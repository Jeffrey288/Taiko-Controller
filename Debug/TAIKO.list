
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014144  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019804  08014330  08014330  00024330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802db34  0802db34  00040344  2**0
                  CONTENTS
  4 .ARM          00000000  0802db34  0802db34  00040344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802db34  0802db34  00040344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802db34  0802db34  0003db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802db38  0802db38  0003db38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0802db3c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001304  20000348  0802de80  00040348  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000164c  0802de80  0004164c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d2c  00000000  00000000  0004036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f1  00000000  00000000  00063099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  00068390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d38  00000000  00000000  0006a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002117d  00000000  00000000  0006c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028107  00000000  00000000  0008d1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0253  00000000  00000000  000b52e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097c4  00000000  00000000  00165588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000348 	.word	0x20000348
 8000204:	00000000 	.word	0x00000000
 8000208:	08014314 	.word	0x08014314

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000034c 	.word	0x2000034c
 8000224:	08014314 	.word	0x08014314

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <DrumInit>:

void DrumOutputDefault(DrumType type) {
	drums[type].hit_count++;
}

void DrumInit() {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

	drum_output_device = DRUM_OUTPUT_NONE;
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <DrumInit+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
//	drum_output_callback = &DrumOutputDefault;
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	e03a      	b.n	80010e4 <DrumInit+0x88>
		drums[i].type = i;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	b2d8      	uxtb	r0, r3
 8001072:	4921      	ldr	r1, [pc, #132]	; (80010f8 <DrumInit+0x9c>)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	440b      	add	r3, r1
 8001080:	4602      	mov	r2, r0
 8001082:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 8001084:	491c      	ldr	r1, [pc, #112]	; (80010f8 <DrumInit+0x9c>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	440b      	add	r3, r1
 8001092:	3308      	adds	r3, #8
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <DrumInit+0xa0>)
 800109e:	1899      	adds	r1, r3, r2
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <DrumInit+0x9c>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4403      	add	r3, r0
 80010ae:	3310      	adds	r3, #16
 80010b0:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 80010b2:	4911      	ldr	r1, [pc, #68]	; (80010f8 <DrumInit+0x9c>)
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80010c6:	f002 f97f 	bl	80033c8 <HAL_GetTick>
 80010ca:	4601      	mov	r1, r0
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <DrumInit+0x9c>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4403      	add	r3, r0
 80010da:	330c      	adds	r3, #12
 80010dc:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	ddc1      	ble.n	800106e <DrumInit+0x12>
	}

}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000668 	.word	0x20000668
 80010f8:	200005a8 	.word	0x200005a8
 80010fc:	20000594 	.word	0x20000594

08001100 <DrumCalibrate>:

void DrumCalibrate() {
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b092      	sub	sp, #72	; 0x48
 8001106:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001108:	f002 f95e 	bl	80033c8 <HAL_GetTick>
 800110c:	6478      	str	r0, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 800110e:	2010      	movs	r0, #16
 8001110:	f010 f8e6 	bl	80112e0 <malloc>
 8001114:	4603      	mov	r3, r0
 8001116:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001118:	2300      	movs	r3, #0
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
 800111c:	e00c      	b.n	8001138 <DrumCalibrate+0x38>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 800111e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	18d4      	adds	r4, r2, r3
 8001126:	f44f 7016 	mov.w	r0, #600	; 0x258
 800112a:	f010 f8d9 	bl	80112e0 <malloc>
 800112e:	4603      	mov	r3, r0
 8001130:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001134:	3301      	adds	r3, #1
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
 8001138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113a:	2b03      	cmp	r3, #3
 800113c:	ddef      	ble.n	800111e <DrumCalibrate+0x1e>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001142:	e023      	b.n	800118c <DrumCalibrate+0x8c>
		while (last_tick == HAL_GetTick()) {
 8001144:	bf00      	nop
 8001146:	f002 f93f 	bl	80033c8 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114e:	4293      	cmp	r3, r2
 8001150:	d0f9      	beq.n	8001146 <DrumCalibrate+0x46>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001152:	f002 f939 	bl	80033c8 <HAL_GetTick>
 8001156:	6478      	str	r0, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
 800115c:	e010      	b.n	8001180 <DrumCalibrate+0x80>
			values[j][i] = drum_sensor_values[j];
 800115e:	4a9c      	ldr	r2, [pc, #624]	; (80013d0 <DrumCalibrate+0x2d0>)
 8001160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	b28a      	uxth	r2, r1
 8001178:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	3301      	adds	r3, #1
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001182:	2b03      	cmp	r3, #3
 8001184:	ddeb      	ble.n	800115e <DrumCalibrate+0x5e>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001188:	3301      	adds	r3, #1
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001192:	dbd7      	blt.n	8001144 <DrumCalibrate+0x44>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
 8001198:	e0f2      	b.n	8001380 <DrumCalibrate+0x280>
		uint32_t sum = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a6:	e026      	b.n	80011f6 <DrumCalibrate+0xf6>
			sum += values[i][j];
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4413      	add	r3, r2
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	4413      	add	r3, r2
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 80011c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	4293      	cmp	r3, r2
 80011da:	d209      	bcs.n	80011f0 <DrumCalibrate+0xf0>
				max_val = values[i][j];
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	3301      	adds	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011fc:	dbd4      	blt.n	80011a8 <DrumCalibrate+0xa8>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 80011fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001200:	f7ff f95c 	bl	80004bc <__aeabi_ui2d>
 8001204:	a36e      	add	r3, pc, #440	; (adr r3, 80013c0 <DrumCalibrate+0x2c0>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fafb 	bl	8000804 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e036      	b.n	8001296 <DrumCalibrate+0x196>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 8001228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f94e 	bl	80004dc <__aeabi_i2d>
 8001240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001244:	f7fe fffc 	bl	8000240 <__aeabi_dsub>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4413      	add	r3, r2
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f93a 	bl	80004dc <__aeabi_i2d>
 8001268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126c:	f7fe ffe8 	bl	8000240 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f99a 	bl	80005b0 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001284:	f7fe ffde 	bl	8000244 <__adddf3>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800129c:	dbc4      	blt.n	8001228 <DrumCalibrate+0x128>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 800129e:	a34a      	add	r3, pc, #296	; (adr r3, 80013c8 <DrumCalibrate+0x2c8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012a8:	f7ff faac 	bl	8000804 <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f012 ff5a 	bl	801416c <sqrt>
 80012b8:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 80012bc:	4945      	ldr	r1, [pc, #276]	; (80013d4 <DrumCalibrate+0x2d4>)
 80012be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	440b      	add	r3, r1
 80012ca:	f103 0118 	add.w	r1, r3, #24
 80012ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012d2:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 80012d6:	493f      	ldr	r1, [pc, #252]	; (80013d4 <DrumCalibrate+0x2d4>)
 80012d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	440b      	add	r3, r1
 80012e4:	3314      	adds	r3, #20
 80012e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e8:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 80012ea:	493a      	ldr	r1, [pc, #232]	; (80013d4 <DrumCalibrate+0x2d4>)
 80012ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	f103 0120 	add.w	r1, r3, #32
 80012fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <DrumCalibrate+0x2d8>)
 800130a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130e:	f7ff f94f 	bl	80005b0 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800131e:	f7fe ff91 	bl	8000244 <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4690      	mov	r8, r2
 8001328:	4699      	mov	r9, r3
 800132a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800132c:	f7ff f8c6 	bl	80004bc <__aeabi_ui2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <DrumCalibrate+0x2dc>)
 800133a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800133e:	f7ff f937 	bl	80005b0 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7fe ff7b 	bl	8000244 <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4640      	mov	r0, r8
 8001354:	4649      	mov	r1, r9
 8001356:	f012 fec7 	bl	80140e8 <fmin>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fbfd 	bl	8000b60 <__aeabi_d2uiz>
 8001366:	4601      	mov	r1, r0
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <DrumCalibrate+0x2d4>)
 800136a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4403      	add	r3, r0
 8001376:	3328      	adds	r3, #40	; 0x28
 8001378:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	3301      	adds	r3, #1
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	2b03      	cmp	r3, #3
 8001384:	f77f af09 	ble.w	800119a <DrumCalibrate+0x9a>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	e00a      	b.n	80013a4 <DrumCalibrate+0x2a4>
		free(values[i]);
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f00f ffa9 	bl	80112f0 <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	ddf1      	ble.n	800138e <DrumCalibrate+0x28e>
	}
	free(values);
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f00f ffa0 	bl	80112f0 <free>

}
 80013b0:	bf00      	nop
 80013b2:	3748      	adds	r7, #72	; 0x48
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	4072c000 	.word	0x4072c000
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4072b000 	.word	0x4072b000
 80013d0:	20000594 	.word	0x20000594
 80013d4:	200005a8 	.word	0x200005a8
 80013d8:	401c0000 	.word	0x401c0000
 80013dc:	40140000 	.word	0x40140000

080013e0 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <ILI9341_Send_Command+0x34>)
 80013f2:	f003 fc8a 	bl	8004d0a <HAL_GPIO_WritePin>
	DC_COMMAND;
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <ILI9341_Send_Command+0x34>)
 80013fe:	f003 fc84 	bl	8004d0a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f95d 	bl	80016c4 <ILI9341_SPI_Send>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010c00 	.word	0x40010c00

08001418 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <ILI9341_Send_Data+0x34>)
 800142a:	f003 fc6e 	bl	8004d0a <HAL_GPIO_WritePin>
	DC_DATA;
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <ILI9341_Send_Data+0x34>)
 8001436:	f003 fc68 	bl	8004d0a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f941 	bl	80016c4 <ILI9341_SPI_Send>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010c00 	.word	0x40010c00

08001450 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001454:	f000 f900 	bl	8001658 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001458:	f000 f958 	bl	800170c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff ffbf 	bl	80013e0 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001462:	20cb      	movs	r0, #203	; 0xcb
 8001464:	f7ff ffbc 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001468:	2039      	movs	r0, #57	; 0x39
 800146a:	f7ff ffd5 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800146e:	202c      	movs	r0, #44	; 0x2c
 8001470:	f7ff ffd2 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff ffcf 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800147a:	2034      	movs	r0, #52	; 0x34
 800147c:	f7ff ffcc 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff ffc9 	bl	8001418 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8001486:	20cf      	movs	r0, #207	; 0xcf
 8001488:	f7ff ffaa 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ffc3 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001492:	20c1      	movs	r0, #193	; 0xc1
 8001494:	f7ff ffc0 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8001498:	2030      	movs	r0, #48	; 0x30
 800149a:	f7ff ffbd 	bl	8001418 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800149e:	20e8      	movs	r0, #232	; 0xe8
 80014a0:	f7ff ff9e 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80014a4:	2085      	movs	r0, #133	; 0x85
 80014a6:	f7ff ffb7 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff ffb4 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f7ff ffb1 	bl	8001418 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80014b6:	20ea      	movs	r0, #234	; 0xea
 80014b8:	f7ff ff92 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff ffab 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff ffa8 	bl	8001418 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80014c8:	20ed      	movs	r0, #237	; 0xed
 80014ca:	f7ff ff89 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80014ce:	2064      	movs	r0, #100	; 0x64
 80014d0:	f7ff ffa2 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7ff ff9f 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80014da:	2012      	movs	r0, #18
 80014dc:	f7ff ff9c 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80014e0:	2081      	movs	r0, #129	; 0x81
 80014e2:	f7ff ff99 	bl	8001418 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80014e6:	20f7      	movs	r0, #247	; 0xf7
 80014e8:	f7ff ff7a 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80014ec:	2020      	movs	r0, #32
 80014ee:	f7ff ff93 	bl	8001418 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80014f2:	20c0      	movs	r0, #192	; 0xc0
 80014f4:	f7ff ff74 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80014f8:	2010      	movs	r0, #16
 80014fa:	f7ff ff8d 	bl	8001418 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80014fe:	20c1      	movs	r0, #193	; 0xc1
 8001500:	f7ff ff6e 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001504:	2010      	movs	r0, #16
 8001506:	f7ff ff87 	bl	8001418 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800150a:	20c5      	movs	r0, #197	; 0xc5
 800150c:	f7ff ff68 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001510:	203e      	movs	r0, #62	; 0x3e
 8001512:	f7ff ff81 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8001516:	2028      	movs	r0, #40	; 0x28
 8001518:	f7ff ff7e 	bl	8001418 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 800151c:	20c7      	movs	r0, #199	; 0xc7
 800151e:	f7ff ff5f 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001522:	2086      	movs	r0, #134	; 0x86
 8001524:	f7ff ff78 	bl	8001418 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8001528:	2036      	movs	r0, #54	; 0x36
 800152a:	f7ff ff59 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 800152e:	2048      	movs	r0, #72	; 0x48
 8001530:	f7ff ff72 	bl	8001418 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8001534:	203a      	movs	r0, #58	; 0x3a
 8001536:	f7ff ff53 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800153a:	2055      	movs	r0, #85	; 0x55
 800153c:	f7ff ff6c 	bl	8001418 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001540:	20b1      	movs	r0, #177	; 0xb1
 8001542:	f7ff ff4d 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ff66 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 800154c:	2018      	movs	r0, #24
 800154e:	f7ff ff63 	bl	8001418 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8001552:	20b6      	movs	r0, #182	; 0xb6
 8001554:	f7ff ff44 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8001558:	2008      	movs	r0, #8
 800155a:	f7ff ff5d 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 800155e:	2082      	movs	r0, #130	; 0x82
 8001560:	f7ff ff5a 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8001564:	2027      	movs	r0, #39	; 0x27
 8001566:	f7ff ff57 	bl	8001418 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800156a:	20f2      	movs	r0, #242	; 0xf2
 800156c:	f7ff ff38 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ff51 	bl	8001418 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8001576:	2026      	movs	r0, #38	; 0x26
 8001578:	f7ff ff32 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff ff4b 	bl	8001418 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8001582:	20e0      	movs	r0, #224	; 0xe0
 8001584:	f7ff ff2c 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8001588:	200f      	movs	r0, #15
 800158a:	f7ff ff45 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800158e:	2031      	movs	r0, #49	; 0x31
 8001590:	f7ff ff42 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8001594:	202b      	movs	r0, #43	; 0x2b
 8001596:	f7ff ff3f 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800159a:	200c      	movs	r0, #12
 800159c:	f7ff ff3c 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015a0:	200e      	movs	r0, #14
 80015a2:	f7ff ff39 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80015a6:	2008      	movs	r0, #8
 80015a8:	f7ff ff36 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80015ac:	204e      	movs	r0, #78	; 0x4e
 80015ae:	f7ff ff33 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80015b2:	20f1      	movs	r0, #241	; 0xf1
 80015b4:	f7ff ff30 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80015b8:	2037      	movs	r0, #55	; 0x37
 80015ba:	f7ff ff2d 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80015be:	2007      	movs	r0, #7
 80015c0:	f7ff ff2a 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80015c4:	2010      	movs	r0, #16
 80015c6:	f7ff ff27 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f7ff ff24 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015d0:	200e      	movs	r0, #14
 80015d2:	f7ff ff21 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80015d6:	2009      	movs	r0, #9
 80015d8:	f7ff ff1e 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff1b 	bl	8001418 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80015e2:	20e1      	movs	r0, #225	; 0xe1
 80015e4:	f7ff fefc 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ff15 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015ee:	200e      	movs	r0, #14
 80015f0:	f7ff ff12 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80015f4:	2014      	movs	r0, #20
 80015f6:	f7ff ff0f 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f7ff ff0c 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001600:	2011      	movs	r0, #17
 8001602:	f7ff ff09 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001606:	2007      	movs	r0, #7
 8001608:	f7ff ff06 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800160c:	2031      	movs	r0, #49	; 0x31
 800160e:	f7ff ff03 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001612:	20c1      	movs	r0, #193	; 0xc1
 8001614:	f7ff ff00 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001618:	2048      	movs	r0, #72	; 0x48
 800161a:	f7ff fefd 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800161e:	2008      	movs	r0, #8
 8001620:	f7ff fefa 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001624:	200f      	movs	r0, #15
 8001626:	f7ff fef7 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800162a:	200c      	movs	r0, #12
 800162c:	f7ff fef4 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001630:	2031      	movs	r0, #49	; 0x31
 8001632:	f7ff fef1 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8001636:	2036      	movs	r0, #54	; 0x36
 8001638:	f7ff feee 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff feeb 	bl	8001418 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8001642:	2011      	movs	r0, #17
 8001644:	f7ff fecc 	bl	80013e0 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8001648:	2029      	movs	r0, #41	; 0x29
 800164a:	f7ff fec9 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 800164e:	202c      	movs	r0, #44	; 0x2c
 8001650:	f7ff fee2 	bl	8001418 <ILI9341_Send_Data>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <ILI9341_SPI_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <ILI9341_SPI_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <ILI9341_SPI_Init+0x64>)
 80016aa:	f007 f820 	bl	80086ee <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80016b4:	f001 fa82 	bl	8002bbc <Error_Handler>
	}
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000066c 	.word	0x2000066c
 80016c0:	40003800 	.word	0x40003800

080016c4 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80016ce:	1df9      	adds	r1, r7, #7
 80016d0:	2301      	movs	r3, #1
 80016d2:	2201      	movs	r2, #1
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <ILI9341_SPI_Send+0x20>)
 80016d6:	f007 f88e 	bl	80087f6 <HAL_SPI_Transmit>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000066c 	.word	0x2000066c

080016e8 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	230a      	movs	r3, #10
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <ILI9341_SPI_Send_Multiple+0x20>)
 80016fc:	f007 f87b 	bl	80087f6 <HAL_SPI_Transmit>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000066c 	.word	0x2000066c

0800170c <ILI9341_Reset>:

void ILI9341_Reset() {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	RESET_ON;
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001716:	4810      	ldr	r0, [pc, #64]	; (8001758 <ILI9341_Reset+0x4c>)
 8001718:	f003 faf7 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f001 fe5d 	bl	80033dc <HAL_Delay>
	RESET_OFF;
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <ILI9341_Reset+0x4c>)
 800172a:	f003 faee 	bl	8004d0a <HAL_GPIO_WritePin>
	CS_ON;
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <ILI9341_Reset+0x4c>)
 8001736:	f003 fae8 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800173a:	2032      	movs	r0, #50	; 0x32
 800173c:	f001 fe4e 	bl	80033dc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fe4d 	bl	80013e0 <ILI9341_Send_Command>
	CS_OFF;
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <ILI9341_Reset+0x4c>)
 800174e:	f003 fadc 	bl	8004d0a <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010c00 	.word	0x40010c00

0800175c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8001766:	2036      	movs	r0, #54	; 0x36
 8001768:	f7ff fe3a 	bl	80013e0 <ILI9341_Send_Command>
	switch (rotation) {
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d836      	bhi.n	80017e0 <ILI9341_Set_Rotation+0x84>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <ILI9341_Set_Rotation+0x1c>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	08001789 	.word	0x08001789
 800177c:	0800179f 	.word	0x0800179f
 8001780:	080017b5 	.word	0x080017b5
 8001784:	080017cb 	.word	0x080017cb
	case 0:
		ILI9341_Send_Data(0x48);
 8001788:	2048      	movs	r0, #72	; 0x48
 800178a:	f7ff fe45 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 240;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 8001790:	22f0      	movs	r2, #240	; 0xf0
 8001792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 8001796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800179a:	601a      	str	r2, [r3, #0]
		break;
 800179c:	e020      	b.n	80017e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800179e:	2028      	movs	r0, #40	; 0x28
 80017a0:	f7ff fe3a 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 80017a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 80017ae:	22f0      	movs	r2, #240	; 0xf0
 80017b0:	601a      	str	r2, [r3, #0]
		break;
 80017b2:	e015      	b.n	80017e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80017b4:	2088      	movs	r0, #136	; 0x88
 80017b6:	f7ff fe2f 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 240;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 80017bc:	22f0      	movs	r2, #240	; 0xf0
 80017be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 80017c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017c6:	601a      	str	r2, [r3, #0]
		break;
 80017c8:	e00a      	b.n	80017e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80017ca:	20e8      	movs	r0, #232	; 0xe8
 80017cc:	f7ff fe24 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 80017d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 80017da:	22f0      	movs	r2, #240	; 0xf0
 80017dc:	601a      	str	r2, [r3, #0]
		break;
 80017de:	bf00      	nop
	}
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001802:	4817      	ldr	r0, [pc, #92]	; (8001860 <ILI9341_SPI_Send_32+0x70>)
 8001804:	f003 fa81 	bl	8004d0a <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <ILI9341_SPI_Send_32+0x70>)
 8001810:	f003 fa7b 	bl	8004d0a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff54 	bl	80016c4 <ILI9341_SPI_Send>

	DC_DATA;
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <ILI9341_SPI_Send_32+0x70>)
 8001824:	f003 fa71 	bl	8004d0a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	0e1b      	lsrs	r3, r3, #24
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff48 	bl	80016c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff42 	bl	80016c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff3c 	bl	80016c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff37 	bl	80016c4 <ILI9341_SPI_Send>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40010c00 	.word	0x40010c00

08001864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001884:	6979      	ldr	r1, [r7, #20]
 8001886:	202a      	movs	r0, #42	; 0x2a
 8001888:	f7ff ffb2 	bl	80017f0 <ILI9341_SPI_Send_32>
	t = y1;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800189e:	6979      	ldr	r1, [r7, #20]
 80018a0:	202b      	movs	r0, #43	; 0x2b
 80018a2:	f7ff ffa5 	bl	80017f0 <ILI9341_SPI_Send_32>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80018ae:	b590      	push	{r4, r7, lr}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4604      	mov	r4, r0
 80018b6:	4608      	mov	r0, r1
 80018b8:	4611      	mov	r1, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	80fb      	strh	r3, [r7, #6]
 80018c0:	4603      	mov	r3, r0
 80018c2:	80bb      	strh	r3, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	88b9      	ldrh	r1, [r7, #4]
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	4413      	add	r3, r2
 80018d6:	3b01      	subs	r3, #1
 80018d8:	461c      	mov	r4, r3
 80018da:	88ba      	ldrh	r2, [r7, #4]
 80018dc:	883b      	ldrh	r3, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4622      	mov	r2, r4
 80018e4:	f7ff ffbe 	bl	8001864 <ILI9341_Set_Address>
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001900:	202c      	movs	r0, #44	; 0x2c
 8001902:	f7ff fd6d 	bl	80013e0 <ILI9341_Send_Command>

	CS_ON;
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190c:	482a      	ldr	r0, [pc, #168]	; (80019b8 <LCD_FillWindow+0xc8>)
 800190e:	f003 f9fc 	bl	8004d0a <HAL_GPIO_WritePin>
	DC_DATA;
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001918:	4827      	ldr	r0, [pc, #156]	; (80019b8 <LCD_FillWindow+0xc8>)
 800191a:	f003 f9f6 	bl	8004d0a <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a26      	ldr	r2, [pc, #152]	; (80019bc <LCD_FillWindow+0xcc>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b3f      	cmp	r3, #63	; 0x3f
 800192e:	dc01      	bgt.n	8001934 <LCD_FillWindow+0x44>
 8001930:	2340      	movs	r3, #64	; 0x40
 8001932:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2bf0      	cmp	r3, #240	; 0xf0
 8001938:	dd01      	ble.n	800193e <LCD_FillWindow+0x4e>
 800193a:	23f0      	movs	r3, #240	; 0xf0
 800193c:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f00f fcc3 	bl	80112e0 <malloc>
 800195a:	4603      	mov	r3, r0
 800195c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e009      	b.n	8001978 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	b292      	uxth	r2, r2
 8001970:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	3301      	adds	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf1      	blt.n	8001964 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001980:	e009      	b.n	8001996 <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff fead 	bl	80016e8 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d8f1      	bhi.n	8001982 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fe9f 	bl	80016e8 <ILI9341_SPI_Send_Multiple>

	free(array);
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f00f fca0 	bl	80112f0 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	cccccccd 	.word	0xcccccccd

080019c0 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	80fb      	strh	r3, [r7, #6]
 80019d2:	4603      	mov	r3, r0
 80019d4:	80bb      	strh	r3, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]
 80019da:	4613      	mov	r3, r2
 80019dc:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019de:	883b      	ldrh	r3, [r7, #0]
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	88b9      	ldrh	r1, [r7, #4]
 80019e4:	88f8      	ldrh	r0, [r7, #6]
 80019e6:	f7ff ff62 	bl	80018ae <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	883a      	ldrh	r2, [r7, #0]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	8b3b      	ldrh	r3, [r7, #24]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff ff79 	bl	80018f0 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
	...

08001a08 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LCD_FillScreen+0x2c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <LCD_FillScreen+0x30>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff ffca 	bl	80019c0 <LCD_DrawFilledRectangle>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
 8001a46:	460b      	mov	r3, r1
 8001a48:	80bb      	strh	r3, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	3b20      	subs	r3, #32
 8001a52:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a54:	88b9      	ldrh	r1, [r7, #4]
 8001a56:	88f8      	ldrh	r0, [r7, #6]
 8001a58:	2310      	movs	r3, #16
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	f7ff ff27 	bl	80018ae <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001a60:	202c      	movs	r0, #44	; 0x2c
 8001a62:	f7ff fcbd 	bl	80013e0 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001a66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a6a:	f00f fc39 	bl	80112e0 <malloc>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a76:	2300      	movs	r3, #0
 8001a78:	75bb      	strb	r3, [r7, #22]
 8001a7a:	e026      	b.n	8001aca <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	7dbb      	ldrb	r3, [r7, #22]
 8001a80:	491c      	ldr	r1, [pc, #112]	; (8001af4 <LCD_DrawChar+0xb8>)
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	440a      	add	r2, r1
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	757b      	strb	r3, [r7, #21]
 8001a90:	e015      	b.n	8001abe <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	e003      	b.n	8001aac <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001ab8:	7d7b      	ldrb	r3, [r7, #21]
 8001aba:	3301      	adds	r3, #1
 8001abc:	757b      	strb	r3, [r7, #21]
 8001abe:	7d7b      	ldrb	r3, [r7, #21]
 8001ac0:	2b07      	cmp	r3, #7
 8001ac2:	d9e6      	bls.n	8001a92 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001ac4:	7dbb      	ldrb	r3, [r7, #22]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	75bb      	strb	r3, [r7, #22]
 8001aca:	7dbb      	ldrb	r3, [r7, #22]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d9d5      	bls.n	8001a7c <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <LCD_DrawChar+0xbc>)
 8001ad8:	f003 f917 	bl	8004d0a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f7ff fe01 	bl	80016e8 <ILI9341_SPI_Send_Multiple>
	free(array);
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f00f fc02 	bl	80112f0 <free>
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0801449c 	.word	0x0801449c
 8001af8:	40010c00 	.word	0x40010c00

08001afc <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	603a      	str	r2, [r7, #0]
 8001b06:	80fb      	strh	r3, [r7, #6]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001b0c:	e01d      	b.n	8001b4a <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b14:	d904      	bls.n	8001b20 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b16:	2300      	movs	r3, #0
 8001b18:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001b1a:	88bb      	ldrh	r3, [r7, #4]
 8001b1c:	3310      	adds	r3, #16
 8001b1e:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b26:	d903      	bls.n	8001b30 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	88b9      	ldrh	r1, [r7, #4]
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff7f 	bl	8001a3c <LCD_DrawChar>

		pStr ++;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	3308      	adds	r3, #8
 8001b48:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1dd      	bne.n	8001b0e <LCD_DrawString+0x12>

	}

}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8001b5c:	b40c      	push	{r2, r3}
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b08e      	sub	sp, #56	; 0x38
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	460a      	mov	r2, r1
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8001b6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b72:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8001b74:	f107 000c 	add.w	r0, r7, #12
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b7c:	2128      	movs	r1, #40	; 0x28
 8001b7e:	f010 f93f 	bl	8011e00 <vsniprintf>
 8001b82:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f107 020c 	add.w	r2, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff ffae 	bl	8001afc <LCD_DrawString>
 8001ba0:	e000      	b.n	8001ba4 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8001ba2:	bf00      	nop
}
 8001ba4:	3738      	adds	r7, #56	; 0x38
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bac:	b002      	add	sp, #8
 8001bae:	4770      	bx	lr

08001bb0 <HAL_TIM_PeriodElapsedCallback>:

uint32_t audio_interrupt_counts = 0;
uint32_t audio_interrupt_start_tick = 0;
uint32_t mix_interrupt_counts = 0;
uint32_t mix_interrupt_start_tick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d105      	bne.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x1c>
		drum_interrupt_counts++;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bc8:	6013      	str	r3, [r2, #0]
		mix_interrupt_counts++;
		PrecomputeMix();
	}


}
 8001bca:	e00a      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x32>
	else if (htim == &htim4) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d106      	bne.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x32>
		mix_interrupt_counts++;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001bdc:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 8001bde:	f000 f82d 	bl	8001c3c <PrecomputeMix>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000094c 	.word	0x2000094c
 8001bf0:	200009e0 	.word	0x200009e0
 8001bf4:	20000994 	.word	0x20000994
 8001bf8:	200009e8 	.word	0x200009e8

08001bfc <AddDrum>:
} AudioTrack;
AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <AddDrum+0x38>)
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 8001c0e:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <AddDrum+0x3c>)
 8001c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8001c18:	81bb      	strh	r3, [r7, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	81fb      	strh	r3, [r7, #14]
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c26:	f000 f865 	bl	8001cf4 <AddTrack>
		.pos = 0
	});
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008
 8001c38:	08014a8c 	.word	0x08014a8c

08001c3c <PrecomputeMix>:

DAC_HandleTypeDef hdac;
int pos = 0;
void PrecomputeMix() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <PrecomputeMix+0xa0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	dc0e      	bgt.n	8001c68 <PrecomputeMix+0x2c>
		if (audio_dma_on) HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <PrecomputeMix+0xa4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <PrecomputeMix+0x1e>
 8001c52:	2100      	movs	r1, #0
 8001c54:	4823      	ldr	r0, [pc, #140]	; (8001ce4 <PrecomputeMix+0xa8>)
 8001c56:	f002 f9f9 	bl	800404c <HAL_DAC_Stop_DMA>
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8001c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <PrecomputeMix+0xac>)
 8001c62:	f00f fb4d 	bl	8011300 <memset>
//		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
//			audio_buff[i].u = -audio_buff[i].i + 32768;
//		}
	}

}
 8001c66:	e035      	b.n	8001cd4 <PrecomputeMix+0x98>
		if (!audio_dma_on) HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <PrecomputeMix+0xa4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d108      	bne.n	8001c82 <PrecomputeMix+0x46>
 8001c70:	2304      	movs	r3, #4
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <PrecomputeMix+0xac>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4819      	ldr	r0, [pc, #100]	; (8001ce4 <PrecomputeMix+0xa8>)
 8001c7e:	f002 f935 	bl	8003eec <HAL_DAC_Start_DMA>
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	e021      	b.n	8001ccc <PrecomputeMix+0x90>
			audio_buff[i].u = (int16_t) (don[pos]) / 4 + 32768;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <PrecomputeMix+0xb0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <PrecomputeMix+0xb4>)
 8001c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da00      	bge.n	8001c9a <PrecomputeMix+0x5e>
 8001c98:	3303      	adds	r3, #3
 8001c9a:	109b      	asrs	r3, r3, #2
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001ca4:	b299      	uxth	r1, r3
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <PrecomputeMix+0xac>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos = (pos + 1) % don_length;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <PrecomputeMix+0xb0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f645 22c7 	movw	r2, #23239	; 0x5ac7
 8001cb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cbc:	fb01 f202 	mul.w	r2, r1, r2
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <PrecomputeMix+0xb0>)
 8001cc4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cd2:	dbd9      	blt.n	8001c88 <PrecomputeMix+0x4c>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000e28 	.word	0x20000e28
 8001ce0:	20000e2c 	.word	0x20000e2c
 8001ce4:	20000738 	.word	0x20000738
 8001ce8:	200009f0 	.word	0x200009f0
 8001cec:	20000e30 	.word	0x20000e30
 8001cf0:	08014a90 	.word	0x08014a90

08001cf4 <AddTrack>:

void AddTrack(AudioTrack track) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <AddTrack+0x3c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	dc0d      	bgt.n	8001d24 <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <AddTrack+0x3c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <AddTrack+0x3c>)
 8001d10:	600a      	str	r2, [r1, #0]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <AddTrack+0x40>)
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	463a      	mov	r2, r7
 8001d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d22:	e000      	b.n	8001d26 <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 8001d24:	bf00      	nop
}
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000e28 	.word	0x20000e28
 8001d34:	20000dd8 	.word	0x20000dd8

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d3c:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8001d40:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d42:	f001 fae9 	bl	8003318 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d46:	f000 fbe7 	bl	8002518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d4a:	f000 fe8b 	bl	8002a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d4e:	f000 fe4f 	bl	80029f0 <MX_DMA_Init>
  MX_SPI2_Init();
 8001d52:	f000 fd2d 	bl	80027b0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001d56:	f000 fdad 	bl	80028b4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001d5a:	f000 fc3d 	bl	80025d8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001d5e:	f00e fedb 	bl	8010b18 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001d62:	f000 fd05 	bl	8002770 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001d66:	f00a fd8f 	bl	800c888 <MX_FATFS_Init>
  MX_DAC_Init();
 8001d6a:	f000 fc9f 	bl	80026ac <MX_DAC_Init>
  MX_I2C1_Init();
 8001d6e:	f000 fcd1 	bl	8002714 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d72:	f000 fd53 	bl	800281c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d76:	f000 fdeb 	bl	8002950 <MX_TIM4_Init>
//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)audio_channel_left.out, 128, DAC_ALIGN_12B_R);
//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)audio_channel_right.out, 128, DAC_ALIGN_12B_R);
//  HAL_TIM_Base_Start(&htim4);
//  HAL_TIM_Base_Start(&htim2);

	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4899      	ldr	r0, [pc, #612]	; (8001fe4 <main+0x2ac>)
 8001d80:	f002 ffc3 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2120      	movs	r1, #32
 8001d88:	4896      	ldr	r0, [pc, #600]	; (8001fe4 <main+0x2ac>)
 8001d8a:	f002 ffbe 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2140      	movs	r1, #64	; 0x40
 8001d92:	4894      	ldr	r0, [pc, #592]	; (8001fe4 <main+0x2ac>)
 8001d94:	f002 ffb9 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9e:	4892      	ldr	r0, [pc, #584]	; (8001fe8 <main+0x2b0>)
 8001da0:	f002 ffb3 	bl	8004d0a <HAL_GPIO_WritePin>

	ILI9341_Init();
 8001da4:	f7ff fb54 	bl	8001450 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff fcd7 	bl	800175c <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8001dae:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001db2:	f7ff fe29 	bl	8001a08 <LCD_FillScreen>
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 8001db6:	2204      	movs	r2, #4
 8001db8:	498c      	ldr	r1, [pc, #560]	; (8001fec <main+0x2b4>)
 8001dba:	488d      	ldr	r0, [pc, #564]	; (8001ff0 <main+0x2b8>)
 8001dbc:	f001 fc1c 	bl	80035f8 <HAL_ADC_Start_DMA>
	DrumInit();
 8001dc0:	f7ff f94c 	bl	800105c <DrumInit>

  	// Setting the clock divider somehow helps :D
  	FRESULT fresult = f_mount(&fs, "/", 1);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	498b      	ldr	r1, [pc, #556]	; (8001ff4 <main+0x2bc>)
 8001dc8:	488b      	ldr	r0, [pc, #556]	; (8001ff8 <main+0x2c0>)
 8001dca:	f00d fea1 	bl	800fb10 <f_mount>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f887 32ff 	strb.w	r3, [r7, #767]	; 0x2ff
  	if (fresult != FR_OK) {
 8001dd4:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <main+0xb4>
  		LCD_Print(0, 10, "Error: f_mount (%d)", fresult); while (1);
 8001ddc:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001de0:	4a86      	ldr	r2, [pc, #536]	; (8001ffc <main+0x2c4>)
 8001de2:	210a      	movs	r1, #10
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff feb9 	bl	8001b5c <LCD_Print>
 8001dea:	e7fe      	b.n	8001dea <main+0xb2>
  	}

  	FIL file;
  	uint16_t temp;
  	fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 8001dec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001df0:	2203      	movs	r2, #3
 8001df2:	4983      	ldr	r1, [pc, #524]	; (8002000 <main+0x2c8>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f00d fed3 	bl	800fba0 <f_open>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f887 32ff 	strb.w	r3, [r7, #767]	; 0x2ff
  	if (fresult == FR_OK) {
 8001e00:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8090 	bne.w	8001f2a <main+0x1f2>
  		uint32_t buff[5];
  		fresult = f_read(&file, buff, 5 * 4, &temp);
 8001e0a:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8001e0e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001e12:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001e16:	2214      	movs	r2, #20
 8001e18:	f00e f93b 	bl	8010092 <f_read>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f887 32ff 	strb.w	r3, [r7, #767]	; 0x2ff
  		if (buff[0] + buff[1] + buff[2] + buff[3] == buff[4]) {
 8001e22:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001e26:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001e30:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	441a      	add	r2, r3
 8001e38:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001e3c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	441a      	add	r2, r3
 8001e44:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001e48:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	441a      	add	r2, r3
 8001e50:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001e54:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d11f      	bne.n	8001e9e <main+0x166>
  			for (int i = 0; i < 4; i++) drums[i].sensor_thresh = buff[i];
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8001e64:	e016      	b.n	8001e94 <main+0x15c>
 8001e66:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001e6a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001e6e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8001e72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e76:	4863      	ldr	r0, [pc, #396]	; (8002004 <main+0x2cc>)
 8001e78:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4403      	add	r3, r0
 8001e86:	3328      	adds	r3, #40	; 0x28
 8001e88:	6019      	str	r1, [r3, #0]
 8001e8a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8001e94:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	dde4      	ble.n	8001e66 <main+0x12e>
 8001e9c:	e03d      	b.n	8001f1a <main+0x1e2>
  		} else {
  			DrumCalibrate();
 8001e9e:	f7ff f92f 	bl	8001100 <DrumCalibrate>
  			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001ea2:	4b58      	ldr	r3, [pc, #352]	; (8002004 <main+0x2cc>)
 8001ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001eaa:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b54      	ldr	r3, [pc, #336]	; (8002004 <main+0x2cc>)
 8001eb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001eb4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001eb8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <main+0x2cc>)
 8001ec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ec4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001ec8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <main+0x2cc>)
 8001ed0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001ed4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001ed8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001edc:	60da      	str	r2, [r3, #12]
					drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <main+0x2cc>)
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee2:	4b48      	ldr	r3, [pc, #288]	; (8002004 <main+0x2cc>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	441a      	add	r2, r3
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <main+0x2cc>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	441a      	add	r2, r3
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <main+0x2cc>)
 8001ef2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001ef6:	441a      	add	r2, r3
  			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001ef8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001efc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001f00:	611a      	str	r2, [r3, #16]
  			fresult = f_write(&file, buff, 5 * 4, &temp);
 8001f02:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8001f06:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001f0a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001f0e:	2214      	movs	r2, #20
 8001f10:	f00e fa2a 	bl	8010368 <f_write>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 32ff 	strb.w	r3, [r7, #767]	; 0x2ff
  		}
  		LCD_Print(0, 10, "Have file, reading... %d", fresult);
 8001f1a:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001f1e:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <main+0x2d0>)
 8001f20:	210a      	movs	r1, #10
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fe1a 	bl	8001b5c <LCD_Print>
 8001f28:	e074      	b.n	8002014 <main+0x2dc>
  	} else if (fresult == FR_NO_FILE) {
 8001f2a:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d14f      	bne.n	8001fd2 <main+0x29a>
  		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001f32:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f36:	2206      	movs	r2, #6
 8001f38:	4931      	ldr	r1, [pc, #196]	; (8002000 <main+0x2c8>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00d fe30 	bl	800fba0 <f_open>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f887 32ff 	strb.w	r3, [r7, #767]	; 0x2ff
  		DrumCalibrate();
 8001f46:	f7ff f8db 	bl	8001100 <DrumCalibrate>
  		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <main+0x2cc>)
 8001f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001f52:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <main+0x2cc>)
 8001f5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f5c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001f60:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <main+0x2cc>)
 8001f68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f6c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001f70:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <main+0x2cc>)
 8001f78:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001f7c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001f80:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001f84:	60da      	str	r2, [r3, #12]
  				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <main+0x2cc>)
 8001f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <main+0x2cc>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	441a      	add	r2, r3
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <main+0x2cc>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	441a      	add	r2, r3
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <main+0x2cc>)
 8001f9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001f9e:	441a      	add	r2, r3
  		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001fa0:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001fa4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001fa8:	611a      	str	r2, [r3, #16]
  		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001faa:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8001fae:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fb2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001fb6:	2214      	movs	r2, #20
 8001fb8:	f00e f9d6 	bl	8010368 <f_write>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f887 32ff 	strb.w	r3, [r7, #767]	; 0x2ff
  		LCD_Print(0, 10, "No file, calibrating... %d", fresult);
 8001fc2:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <main+0x2d4>)
 8001fc8:	210a      	movs	r1, #10
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff fdc6 	bl	8001b5c <LCD_Print>
 8001fd0:	e020      	b.n	8002014 <main+0x2dc>
  	} else {
  		LCD_Print(0, 10, "Error: f_open (%d)", fresult); while (1);
 8001fd2:	f897 32ff 	ldrb.w	r3, [r7, #767]	; 0x2ff
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <main+0x2d8>)
 8001fd8:	210a      	movs	r1, #10
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff fdbe 	bl	8001b5c <LCD_Print>
 8001fe0:	e7fe      	b.n	8001fe0 <main+0x2a8>
 8001fe2:	bf00      	nop
 8001fe4:	40011800 	.word	0x40011800
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	20000594 	.word	0x20000594
 8001ff0:	200006c4 	.word	0x200006c4
 8001ff4:	08014344 	.word	0x08014344
 8001ff8:	20000364 	.word	0x20000364
 8001ffc:	08014348 	.word	0x08014348
 8002000:	0801435c 	.word	0x0801435c
 8002004:	200005a8 	.word	0x200005a8
 8002008:	08014368 	.word	0x08014368
 800200c:	08014384 	.word	0x08014384
 8002010:	080143a0 	.word	0x080143a0
  	}
  	f_close(&file);
 8002014:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002018:	4618      	mov	r0, r3
 800201a:	f00e fc0c 	bl	8010836 <f_close>

//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800201e:	2100      	movs	r1, #0
 8002020:	48cf      	ldr	r0, [pc, #828]	; (8002360 <main+0x628>)
 8002022:	f001 ff0c 	bl	8003e3e <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, 128, DAC_ALIGN_12B_L);
 8002026:	2304      	movs	r3, #4
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	4acd      	ldr	r2, [pc, #820]	; (8002364 <main+0x62c>)
 800202e:	2100      	movs	r1, #0
 8002030:	48cb      	ldr	r0, [pc, #812]	; (8002360 <main+0x628>)
 8002032:	f001 ff5b 	bl	8003eec <HAL_DAC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim3);
 8002036:	48cc      	ldr	r0, [pc, #816]	; (8002368 <main+0x630>)
 8002038:	f006 fe6e 	bl	8008d18 <HAL_TIM_Base_Start_IT>
  	drum_interrupt_start_tick = HAL_GetTick();
 800203c:	f001 f9c4 	bl	80033c8 <HAL_GetTick>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4bc9      	ldr	r3, [pc, #804]	; (800236c <main+0x634>)
 8002046:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 8002048:	48c9      	ldr	r0, [pc, #804]	; (8002370 <main+0x638>)
 800204a:	f006 fe0d 	bl	8008c68 <HAL_TIM_Base_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800204e:	4bc8      	ldr	r3, [pc, #800]	; (8002370 <main+0x638>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	4bc6      	ldr	r3, [pc, #792]	; (8002370 <main+0x638>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	60da      	str	r2, [r3, #12]
  	audio_interrupt_start_tick = HAL_GetTick();
 800205e:	f001 f9b3 	bl	80033c8 <HAL_GetTick>
 8002062:	4603      	mov	r3, r0
 8002064:	4ac3      	ldr	r2, [pc, #780]	; (8002374 <main+0x63c>)
 8002066:	6013      	str	r3, [r2, #0]

  	HAL_TIM_Base_Start_IT(&htim4);
 8002068:	48c3      	ldr	r0, [pc, #780]	; (8002378 <main+0x640>)
 800206a:	f006 fe55 	bl	8008d18 <HAL_TIM_Base_Start_IT>
	mix_interrupt_start_tick = HAL_GetTick();
 800206e:	f001 f9ab 	bl	80033c8 <HAL_GetTick>
 8002072:	4603      	mov	r3, r0
 8002074:	4ac1      	ldr	r2, [pc, #772]	; (800237c <main+0x644>)
 8002076:	6013      	str	r3, [r2, #0]



//  LCD_DrawFilledRectangle(0, 0, 240, 320, RED);

	long last_ticks = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
	long tft_last_ticks = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
	long ticks = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
	int num_hits = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
	int hit_state = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
//
//		switchhid.Button = 0x00;  // shift release
//		USBD_HID_SendReport(&hUsbDeviceFS,  (uint8_t*) &switchhid, sizeof (switchhid));
//		HAL_Delay (200);

		LCD_Print(0, 0, "%4ld", drum_sensor_values[0]);
 8002096:	4bba      	ldr	r3, [pc, #744]	; (8002380 <main+0x648>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4aba      	ldr	r2, [pc, #744]	; (8002384 <main+0x64c>)
 800209c:	2100      	movs	r1, #0
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fd5c 	bl	8001b5c <LCD_Print>
//		  num_hits += 1;
//	  } else {
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  }
//
		if (HAL_GetTick() - tft_last_ticks > 200) {
 80020a4:	f001 f990 	bl	80033c8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2bc8      	cmp	r3, #200	; 0xc8
 80020b2:	d97a      	bls.n	80021aa <main+0x472>

			AddDrum(HAL_GetTick() % 2);
 80020b4:	f001 f988 	bl	80033c8 <HAL_GetTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fd9a 	bl	8001bfc <AddDrum>

//			__disable_irq();
			int r = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80020ce:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	f8c7 22e0 	str.w	r2, [r7, #736]	; 0x2e0
 80020d8:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 80020dc:	f001 f974 	bl	80033c8 <HAL_GetTick>
 80020e0:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80020e2:	4aa9      	ldr	r2, [pc, #676]	; (8002388 <main+0x650>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 80020ec:	f001 f96c 	bl	80033c8 <HAL_GetTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4aa6      	ldr	r2, [pc, #664]	; (800238c <main+0x654>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80020fa:	4ba5      	ldr	r3, [pc, #660]	; (8002390 <main+0x658>)
 80020fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002100:	095c      	lsrs	r4, r3, #5
 8002102:	4623      	mov	r3, r4
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1b1b      	subs	r3, r3, r4
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 800210c:	f001 f95c 	bl	80033c8 <HAL_GetTick>
 8002110:	4603      	mov	r3, r0
 8002112:	4aa0      	ldr	r2, [pc, #640]	; (8002394 <main+0x65c>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 800211a:	4b9d      	ldr	r3, [pc, #628]	; (8002390 <main+0x658>)
 800211c:	fba3 1302 	umull	r1, r3, r3, r2
 8002120:	095d      	lsrs	r5, r3, #5
 8002122:	462b      	mov	r3, r5
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	1b5b      	subs	r3, r3, r5
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 800212c:	f001 f94c 	bl	80033c8 <HAL_GetTick>
 8002130:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002132:	4a98      	ldr	r2, [pc, #608]	; (8002394 <main+0x65c>)
 8002134:	fba2 1203 	umull	r1, r2, r2, r3
 8002138:	0996      	lsrs	r6, r2, #6
 800213a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800213e:	fb06 f202 	mul.w	r2, r6, r2
 8002142:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 8002144:	4b94      	ldr	r3, [pc, #592]	; (8002398 <main+0x660>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fde3 	bl	8000d14 <__aeabi_i2f>
 800214e:	4682      	mov	sl, r0
 8002150:	f001 f93a 	bl	80033c8 <HAL_GetTick>
 8002154:	4603      	mov	r3, r0
 8002156:	4a85      	ldr	r2, [pc, #532]	; (800236c <main+0x634>)
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	3301      	adds	r3, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fdd4 	bl	8000d0c <__aeabi_ui2f>
 8002164:	4603      	mov	r3, r0
 8002166:	4619      	mov	r1, r3
 8002168:	4650      	mov	r0, sl
 800216a:	f7fe fedb 	bl	8000f24 <__aeabi_fdiv>
 800216e:	4603      	mov	r3, r0
 8002170:	498a      	ldr	r1, [pc, #552]	; (800239c <main+0x664>)
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fe22 	bl	8000dbc <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9c0 	bl	8000500 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4986      	ldr	r1, [pc, #536]	; (80023a0 <main+0x668>)
 8002186:	6809      	ldr	r1, [r1, #0]
 8002188:	9106      	str	r1, [sp, #24]
 800218a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800218e:	9602      	str	r6, [sp, #8]
 8002190:	9501      	str	r5, [sp, #4]
 8002192:	9400      	str	r4, [sp, #0]
 8002194:	464b      	mov	r3, r9
 8002196:	4a83      	ldr	r2, [pc, #524]	; (80023a4 <main+0x66c>)
 8002198:	4641      	mov	r1, r8
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff fcde 	bl	8001b5c <LCD_Print>
//						drums[i].sensor_avg, drums[i].sensor_sd, drums[i].sensor_thresh);
//			}

//			__enable_irq();

			tft_last_ticks = HAL_GetTick();
 80021a0:	f001 f912 	bl	80033c8 <HAL_GetTick>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
		}

		int stuff[17];
		int keyPressed = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80021b0:	2201      	movs	r2, #1
 80021b2:	2110      	movs	r1, #16
 80021b4:	487c      	ldr	r0, [pc, #496]	; (80023a8 <main+0x670>)
 80021b6:	f002 fda8 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2120      	movs	r1, #32
 80021be:	487a      	ldr	r0, [pc, #488]	; (80023a8 <main+0x670>)
 80021c0:	f002 fda3 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2140      	movs	r1, #64	; 0x40
 80021c8:	4877      	ldr	r0, [pc, #476]	; (80023a8 <main+0x670>)
 80021ca:	f002 fd9e 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d4:	4875      	ldr	r0, [pc, #468]	; (80023ac <main+0x674>)
 80021d6:	f002 fd98 	bl	8004d0a <HAL_GPIO_WritePin>
		stuff[16] = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN);
 80021da:	2101      	movs	r1, #1
 80021dc:	4872      	ldr	r0, [pc, #456]	; (80023a8 <main+0x670>)
 80021de:	f002 fd7d 	bl	8004cdc <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80021ea:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
		stuff[15] = HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN);
 80021f0:	2102      	movs	r1, #2
 80021f2:	486d      	ldr	r0, [pc, #436]	; (80023a8 <main+0x670>)
 80021f4:	f002 fd72 	bl	8004cdc <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002200:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
		stuff[14] = HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN);
 8002206:	2104      	movs	r1, #4
 8002208:	4867      	ldr	r0, [pc, #412]	; (80023a8 <main+0x670>)
 800220a:	f002 fd67 	bl	8004cdc <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002216:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
		stuff[13] = HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN);
 800221c:	2108      	movs	r1, #8
 800221e:	4862      	ldr	r0, [pc, #392]	; (80023a8 <main+0x670>)
 8002220:	f002 fd5c 	bl	8004cdc <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800222c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002230:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2110      	movs	r1, #16
 8002236:	485c      	ldr	r0, [pc, #368]	; (80023a8 <main+0x670>)
 8002238:	f002 fd67 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 800223c:	2201      	movs	r2, #1
 800223e:	2120      	movs	r1, #32
 8002240:	4859      	ldr	r0, [pc, #356]	; (80023a8 <main+0x670>)
 8002242:	f002 fd62 	bl	8004d0a <HAL_GPIO_WritePin>
		stuff[12] = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN);
 8002246:	2101      	movs	r1, #1
 8002248:	4857      	ldr	r0, [pc, #348]	; (80023a8 <main+0x670>)
 800224a:	f002 fd47 	bl	8004cdc <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002256:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
		stuff[11] = HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN);
 800225c:	2102      	movs	r1, #2
 800225e:	4852      	ldr	r0, [pc, #328]	; (80023a8 <main+0x670>)
 8002260:	f002 fd3c 	bl	8004cdc <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800226c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
		stuff[10] = HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN);
 8002272:	2104      	movs	r1, #4
 8002274:	484c      	ldr	r0, [pc, #304]	; (80023a8 <main+0x670>)
 8002276:	f002 fd31 	bl	8004cdc <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002282:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
		stuff[9] = HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN);
 8002288:	2108      	movs	r1, #8
 800228a:	4847      	ldr	r0, [pc, #284]	; (80023a8 <main+0x670>)
 800228c:	f002 fd26 	bl	8004cdc <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002298:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2120      	movs	r1, #32
 80022a2:	4841      	ldr	r0, [pc, #260]	; (80023a8 <main+0x670>)
 80022a4:	f002 fd31 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80022a8:	2201      	movs	r2, #1
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	483e      	ldr	r0, [pc, #248]	; (80023a8 <main+0x670>)
 80022ae:	f002 fd2c 	bl	8004d0a <HAL_GPIO_WritePin>
		stuff[8] = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN);
 80022b2:	2101      	movs	r1, #1
 80022b4:	483c      	ldr	r0, [pc, #240]	; (80023a8 <main+0x670>)
 80022b6:	f002 fd11 	bl	8004cdc <HAL_GPIO_ReadPin>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80022c2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80022c6:	621a      	str	r2, [r3, #32]
		stuff[7] = HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN);
 80022c8:	2102      	movs	r1, #2
 80022ca:	4837      	ldr	r0, [pc, #220]	; (80023a8 <main+0x670>)
 80022cc:	f002 fd06 	bl	8004cdc <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80022d8:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80022dc:	61da      	str	r2, [r3, #28]
		stuff[6] = HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN);
 80022de:	2104      	movs	r1, #4
 80022e0:	4831      	ldr	r0, [pc, #196]	; (80023a8 <main+0x670>)
 80022e2:	f002 fcfb 	bl	8004cdc <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80022ee:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80022f2:	619a      	str	r2, [r3, #24]
		stuff[5] = HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN);
 80022f4:	2108      	movs	r1, #8
 80022f6:	482c      	ldr	r0, [pc, #176]	; (80023a8 <main+0x670>)
 80022f8:	f002 fcf0 	bl	8004cdc <HAL_GPIO_ReadPin>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002304:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002308:	615a      	str	r2, [r3, #20]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2140      	movs	r1, #64	; 0x40
 800230e:	4826      	ldr	r0, [pc, #152]	; (80023a8 <main+0x670>)
 8002310:	f002 fcfb 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8002314:	2201      	movs	r2, #1
 8002316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800231a:	4824      	ldr	r0, [pc, #144]	; (80023ac <main+0x674>)
 800231c:	f002 fcf5 	bl	8004d0a <HAL_GPIO_WritePin>
		stuff[4] = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN);
 8002320:	2101      	movs	r1, #1
 8002322:	4821      	ldr	r0, [pc, #132]	; (80023a8 <main+0x670>)
 8002324:	f002 fcda 	bl	8004cdc <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002330:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002334:	611a      	str	r2, [r3, #16]
		stuff[3] = HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN);
 8002336:	2102      	movs	r1, #2
 8002338:	481b      	ldr	r0, [pc, #108]	; (80023a8 <main+0x670>)
 800233a:	f002 fccf 	bl	8004cdc <HAL_GPIO_ReadPin>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002346:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800234a:	60da      	str	r2, [r3, #12]
		stuff[2] = HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN);
 800234c:	2104      	movs	r1, #4
 800234e:	4816      	ldr	r0, [pc, #88]	; (80023a8 <main+0x670>)
 8002350:	f002 fcc4 	bl	8004cdc <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800235c:	e028      	b.n	80023b0 <main+0x678>
 800235e:	bf00      	nop
 8002360:	20000738 	.word	0x20000738
 8002364:	200009f0 	.word	0x200009f0
 8002368:	2000094c 	.word	0x2000094c
 800236c:	200009dc 	.word	0x200009dc
 8002370:	20000904 	.word	0x20000904
 8002374:	200009e4 	.word	0x200009e4
 8002378:	20000994 	.word	0x20000994
 800237c:	200009ec 	.word	0x200009ec
 8002380:	20000594 	.word	0x20000594
 8002384:	080143b4 	.word	0x080143b4
 8002388:	95217cb1 	.word	0x95217cb1
 800238c:	45e7b273 	.word	0x45e7b273
 8002390:	88888889 	.word	0x88888889
 8002394:	10624dd3 	.word	0x10624dd3
 8002398:	200009e0 	.word	0x200009e0
 800239c:	447a0000 	.word	0x447a0000
 80023a0:	20000e28 	.word	0x20000e28
 80023a4:	080143bc 	.word	0x080143bc
 80023a8:	40011800 	.word	0x40011800
 80023ac:	40011000 	.word	0x40011000
 80023b0:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80023b4:	609a      	str	r2, [r3, #8]
		stuff[1] = HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN);
 80023b6:	2108      	movs	r1, #8
 80023b8:	4854      	ldr	r0, [pc, #336]	; (800250c <main+0x7d4>)
 80023ba:	f002 fc8f 	bl	8004cdc <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80023c6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80023ca:	605a      	str	r2, [r3, #4]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2110      	movs	r1, #16
 80023d0:	484e      	ldr	r0, [pc, #312]	; (800250c <main+0x7d4>)
 80023d2:	f002 fc9a 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2120      	movs	r1, #32
 80023da:	484c      	ldr	r0, [pc, #304]	; (800250c <main+0x7d4>)
 80023dc:	f002 fc95 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	4849      	ldr	r0, [pc, #292]	; (800250c <main+0x7d4>)
 80023e6:	f002 fc90 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f0:	4847      	ldr	r0, [pc, #284]	; (8002510 <main+0x7d8>)
 80023f2:	f002 fc8a 	bl	8004d0a <HAL_GPIO_WritePin>

		LCD_Print(0, 6, "BTN: %d%d%d%d|%d%d%d%d|%d%d%d%d|%d%d%d%d",
 80023f6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80023fa:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
 8002402:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002406:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800240a:	6898      	ldr	r0, [r3, #8]
 800240c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002410:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002414:	68dc      	ldr	r4, [r3, #12]
 8002416:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800241a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800241e:	691d      	ldr	r5, [r3, #16]
 8002420:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002424:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002428:	695e      	ldr	r6, [r3, #20]
 800242a:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800242e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	623a      	str	r2, [r7, #32]
 8002436:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800243a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800243e:	69d9      	ldr	r1, [r3, #28]
 8002440:	61f9      	str	r1, [r7, #28]
 8002442:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002446:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800244a:	f8d3 c020 	ldr.w	ip, [r3, #32]
 800244e:	f8c7 c018 	str.w	ip, [r7, #24]
 8002452:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002456:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800245a:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
 800245e:	f8c7 e014 	str.w	lr, [r7, #20]
 8002462:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002466:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800246a:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 800246e:	f8c7 8010 	str.w	r8, [r7, #16]
 8002472:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002476:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800247a:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
 800247e:	f8c7 900c 	str.w	r9, [r7, #12]
 8002482:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002486:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800248a:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
 800248e:	f8c7 a008 	str.w	sl, [r7, #8]
 8002492:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002496:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800249a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80024a2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80024a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80024a8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80024ac:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80024b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024b2:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80024b6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	930e      	str	r3, [sp, #56]	; 0x38
 80024be:	920d      	str	r2, [sp, #52]	; 0x34
 80024c0:	910c      	str	r1, [sp, #48]	; 0x30
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80024c6:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80024ca:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80024ce:	f8d7 900c 	ldr.w	r9, [r7, #12]
 80024d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80024d6:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80024da:	f8cd 8020 	str.w	r8, [sp, #32]
 80024de:	f8d7 e014 	ldr.w	lr, [r7, #20]
 80024e2:	f8cd e01c 	str.w	lr, [sp, #28]
 80024e6:	f8d7 c018 	ldr.w	ip, [r7, #24]
 80024ea:	f8cd c018 	str.w	ip, [sp, #24]
 80024ee:	69f9      	ldr	r1, [r7, #28]
 80024f0:	9105      	str	r1, [sp, #20]
 80024f2:	6a3a      	ldr	r2, [r7, #32]
 80024f4:	9204      	str	r2, [sp, #16]
 80024f6:	9603      	str	r6, [sp, #12]
 80024f8:	9502      	str	r5, [sp, #8]
 80024fa:	9401      	str	r4, [sp, #4]
 80024fc:	9000      	str	r0, [sp, #0]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <main+0x7dc>)
 8002502:	2106      	movs	r1, #6
 8002504:	2000      	movs	r0, #0
 8002506:	f7ff fb29 	bl	8001b5c <LCD_Print>
	while (1) {
 800250a:	e5c4      	b.n	8002096 <main+0x35e>
 800250c:	40011800 	.word	0x40011800
 8002510:	40011000 	.word	0x40011000
 8002514:	080143e4 	.word	0x080143e4

08002518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b096      	sub	sp, #88	; 0x58
 800251c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002522:	2228      	movs	r2, #40	; 0x28
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f00e feea 	bl	8011300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800254c:	2301      	movs	r3, #1
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002556:	2300      	movs	r3, #0
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800255a:	2301      	movs	r3, #1
 800255c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800255e:	2302      	movs	r3, #2
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800256c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fa7e 	bl	8006a74 <HAL_RCC_OscConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800257e:	f000 fb1d 	bl	8002bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002582:	230f      	movs	r3, #15
 8002584:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800258e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	2102      	movs	r1, #2
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 fcea 	bl	8006f78 <HAL_RCC_ClockConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80025aa:	f000 fb07 	bl	8002bbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80025ae:	2312      	movs	r3, #18
 80025b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80025b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fe54 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80025ca:	f000 faf7 	bl	8002bbc <Error_Handler>
  }
}
 80025ce:	bf00      	nop
 80025d0:	3758      	adds	r7, #88	; 0x58
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <MX_ADC1_Init+0xcc>)
 80025ea:	4a2f      	ldr	r2, [pc, #188]	; (80026a8 <MX_ADC1_Init+0xd0>)
 80025ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <MX_ADC1_Init+0xcc>)
 80025f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <MX_ADC1_Init+0xcc>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <MX_ADC1_Init+0xcc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <MX_ADC1_Init+0xcc>)
 8002604:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <MX_ADC1_Init+0xcc>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <MX_ADC1_Init+0xcc>)
 8002612:	2204      	movs	r2, #4
 8002614:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002616:	4823      	ldr	r0, [pc, #140]	; (80026a4 <MX_ADC1_Init+0xcc>)
 8002618:	f000 ff04 	bl	8003424 <HAL_ADC_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002622:	f000 facb 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800262a:	2301      	movs	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800262e:	2307      	movs	r3, #7
 8002630:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	4619      	mov	r1, r3
 8002636:	481b      	ldr	r0, [pc, #108]	; (80026a4 <MX_ADC1_Init+0xcc>)
 8002638:	f001 f8d8 	bl	80037ec <HAL_ADC_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 fabb 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002646:	2301      	movs	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800264a:	2302      	movs	r3, #2
 800264c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4814      	ldr	r0, [pc, #80]	; (80026a4 <MX_ADC1_Init+0xcc>)
 8002654:	f001 f8ca 	bl	80037ec <HAL_ADC_ConfigChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800265e:	f000 faad 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002662:	2302      	movs	r3, #2
 8002664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002666:	2303      	movs	r3, #3
 8002668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	4619      	mov	r1, r3
 800266e:	480d      	ldr	r0, [pc, #52]	; (80026a4 <MX_ADC1_Init+0xcc>)
 8002670:	f001 f8bc 	bl	80037ec <HAL_ADC_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800267a:	f000 fa9f 	bl	8002bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800267e:	2303      	movs	r3, #3
 8002680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002682:	2304      	movs	r3, #4
 8002684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4806      	ldr	r0, [pc, #24]	; (80026a4 <MX_ADC1_Init+0xcc>)
 800268c:	f001 f8ae 	bl	80037ec <HAL_ADC_ConfigChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002696:	f000 fa91 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200006c4 	.word	0x200006c4
 80026a8:	40012400 	.word	0x40012400

080026ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026b2:	463b      	mov	r3, r7
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <MX_DAC_Init+0x60>)
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <MX_DAC_Init+0x64>)
 80026be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80026c0:	4812      	ldr	r0, [pc, #72]	; (800270c <MX_DAC_Init+0x60>)
 80026c2:	f001 fb9a 	bl	8003dfa <HAL_DAC_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80026cc:	f000 fa76 	bl	8002bbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80026d0:	2324      	movs	r3, #36	; 0x24
 80026d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80026d8:	463b      	mov	r3, r7
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	480b      	ldr	r0, [pc, #44]	; (800270c <MX_DAC_Init+0x60>)
 80026e0:	f001 fd0c 	bl	80040fc <HAL_DAC_ConfigChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80026ea:	f000 fa67 	bl	8002bbc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80026ee:	463b      	mov	r3, r7
 80026f0:	2210      	movs	r2, #16
 80026f2:	4619      	mov	r1, r3
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_DAC_Init+0x60>)
 80026f6:	f001 fd01 	bl	80040fc <HAL_DAC_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002700:	f000 fa5c 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000738 	.word	0x20000738
 8002710:	40007400 	.word	0x40007400

08002714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <MX_I2C1_Init+0x50>)
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <MX_I2C1_Init+0x54>)
 800271c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <MX_I2C1_Init+0x50>)
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <MX_I2C1_Init+0x58>)
 8002722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <MX_I2C1_Init+0x50>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_I2C1_Init+0x50>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <MX_I2C1_Init+0x50>)
 8002732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <MX_I2C1_Init+0x50>)
 800273a:	2200      	movs	r2, #0
 800273c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <MX_I2C1_Init+0x50>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <MX_I2C1_Init+0x50>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_I2C1_Init+0x50>)
 800274c:	2200      	movs	r2, #0
 800274e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <MX_I2C1_Init+0x50>)
 8002752:	f002 faf3 	bl	8004d3c <HAL_I2C_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800275c:	f000 fa2e 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200007d4 	.word	0x200007d4
 8002768:	40005400 	.word	0x40005400
 800276c:	000186a0 	.word	0x000186a0

08002770 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <MX_SDIO_SD_Init+0x3c>)
 8002778:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 8002794:	2200      	movs	r2, #0
 8002796:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <MX_SDIO_SD_Init+0x38>)
 800279a:	2264      	movs	r2, #100	; 0x64
 800279c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000828 	.word	0x20000828
 80027ac:	40018000 	.word	0x40018000

080027b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <MX_SPI2_Init+0x64>)
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <MX_SPI2_Init+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_SPI2_Init+0x64>)
 80027bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_SPI2_Init+0x64>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <MX_SPI2_Init+0x64>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_SPI2_Init+0x64>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_SPI2_Init+0x64>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <MX_SPI2_Init+0x64>)
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_SPI2_Init+0x64>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <MX_SPI2_Init+0x64>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_SPI2_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <MX_SPI2_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_SPI2_Init+0x64>)
 80027fc:	220a      	movs	r2, #10
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002800:	4804      	ldr	r0, [pc, #16]	; (8002814 <MX_SPI2_Init+0x64>)
 8002802:	f005 ff74 	bl	80086ee <HAL_SPI_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800280c:	f000 f9d6 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	200008ac 	.word	0x200008ac
 8002818:	40003800 	.word	0x40003800

0800281c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	463b      	mov	r3, r7
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_TIM2_Init+0x94>)
 800283a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800283e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_TIM2_Init+0x94>)
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <MX_TIM2_Init+0x94>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_TIM2_Init+0x94>)
 800284e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_TIM2_Init+0x94>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_TIM2_Init+0x94>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002860:	4813      	ldr	r0, [pc, #76]	; (80028b0 <MX_TIM2_Init+0x94>)
 8002862:	f006 f9b1 	bl	8008bc8 <HAL_TIM_Base_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800286c:	f000 f9a6 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	4619      	mov	r1, r3
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <MX_TIM2_Init+0x94>)
 800287e:	f006 fbb3 	bl	8008fe8 <HAL_TIM_ConfigClockSource>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002888:	f000 f998 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800288c:	2320      	movs	r3, #32
 800288e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002894:	463b      	mov	r3, r7
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_TIM2_Init+0x94>)
 800289a:	f006 fe75 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028a4:	f000 f98a 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000904 	.word	0x20000904

080028b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c8:	463b      	mov	r3, r7
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <MX_TIM3_Init+0x94>)
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <MX_TIM3_Init+0x98>)
 80028d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <MX_TIM3_Init+0x94>)
 80028d8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80028dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <MX_TIM3_Init+0x94>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80028e4:	4b18      	ldr	r3, [pc, #96]	; (8002948 <MX_TIM3_Init+0x94>)
 80028e6:	2231      	movs	r2, #49	; 0x31
 80028e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <MX_TIM3_Init+0x94>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <MX_TIM3_Init+0x94>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028f6:	4814      	ldr	r0, [pc, #80]	; (8002948 <MX_TIM3_Init+0x94>)
 80028f8:	f006 f966 	bl	8008bc8 <HAL_TIM_Base_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002902:	f000 f95b 	bl	8002bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	4619      	mov	r1, r3
 8002912:	480d      	ldr	r0, [pc, #52]	; (8002948 <MX_TIM3_Init+0x94>)
 8002914:	f006 fb68 	bl	8008fe8 <HAL_TIM_ConfigClockSource>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800291e:	f000 f94d 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800292a:	463b      	mov	r3, r7
 800292c:	4619      	mov	r1, r3
 800292e:	4806      	ldr	r0, [pc, #24]	; (8002948 <MX_TIM3_Init+0x94>)
 8002930:	f006 fe2a 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800293a:	f000 f93f 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000094c 	.word	0x2000094c
 800294c:	40000400 	.word	0x40000400

08002950 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <MX_TIM4_Init+0x98>)
 8002970:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <MX_TIM4_Init+0x9c>)
 8002972:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <MX_TIM4_Init+0x98>)
 8002976:	2200      	movs	r2, #0
 8002978:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MX_TIM4_Init+0x98>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <MX_TIM4_Init+0x98>)
 8002982:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002986:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_TIM4_Init+0x98>)
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <MX_TIM4_Init+0x98>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <MX_TIM4_Init+0x98>)
 8002996:	f006 f917 	bl	8008bc8 <HAL_TIM_Base_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80029a0:	f000 f90c 	bl	8002bbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80029a4:	2305      	movs	r3, #5
 80029a6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80029a8:	2310      	movs	r3, #16
 80029aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4619      	mov	r1, r3
 80029b2:	480d      	ldr	r0, [pc, #52]	; (80029e8 <MX_TIM4_Init+0x98>)
 80029b4:	f006 fbdf 	bl	8009176 <HAL_TIM_SlaveConfigSynchro>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80029be:	f000 f8fd 	bl	8002bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4806      	ldr	r0, [pc, #24]	; (80029e8 <MX_TIM4_Init+0x98>)
 80029d0:	f006 fdda 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80029da:	f000 f8ef 	bl	8002bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029de:	bf00      	nop
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000994 	.word	0x20000994
 80029ec:	40000800 	.word	0x40000800

080029f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MX_DMA_Init+0x70>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <MX_DMA_Init+0x70>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6153      	str	r3, [r2, #20]
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <MX_DMA_Init+0x70>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <MX_DMA_Init+0x70>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <MX_DMA_Init+0x70>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6153      	str	r3, [r2, #20]
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_DMA_Init+0x70>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	200b      	movs	r0, #11
 8002a2c:	f001 f9af 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a30:	200b      	movs	r0, #11
 8002a32:	f001 f9c8 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	203a      	movs	r0, #58	; 0x3a
 8002a3c:	f001 f9a7 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002a40:	203a      	movs	r0, #58	; 0x3a
 8002a42:	f001 f9c0 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	203b      	movs	r0, #59	; 0x3b
 8002a4c:	f001 f99f 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8002a50:	203b      	movs	r0, #59	; 0x3b
 8002a52:	f001 f9b8 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6a:	f107 0318 	add.w	r3, r7, #24
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a78:	4b4c      	ldr	r3, [pc, #304]	; (8002bac <MX_GPIO_Init+0x148>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <MX_GPIO_Init+0x148>)
 8002a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <MX_GPIO_Init+0x148>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a90:	4b46      	ldr	r3, [pc, #280]	; (8002bac <MX_GPIO_Init+0x148>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a45      	ldr	r2, [pc, #276]	; (8002bac <MX_GPIO_Init+0x148>)
 8002a96:	f043 0310 	orr.w	r3, r3, #16
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b43      	ldr	r3, [pc, #268]	; (8002bac <MX_GPIO_Init+0x148>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	4b40      	ldr	r3, [pc, #256]	; (8002bac <MX_GPIO_Init+0x148>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <MX_GPIO_Init+0x148>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a39      	ldr	r2, [pc, #228]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad8:	4b34      	ldr	r3, [pc, #208]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a33      	ldr	r2, [pc, #204]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ade:	f043 0320 	orr.w	r3, r3, #32
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <MX_GPIO_Init+0x148>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002af0:	2200      	movs	r2, #0
 8002af2:	f64f 0170 	movw	r1, #63600	; 0xf870
 8002af6:	482e      	ldr	r0, [pc, #184]	; (8002bb0 <MX_GPIO_Init+0x14c>)
 8002af8:	f002 f907 	bl	8004d0a <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002b02:	482c      	ldr	r0, [pc, #176]	; (8002bb4 <MX_GPIO_Init+0x150>)
 8002b04:	f002 f901 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002b0e:	482a      	ldr	r0, [pc, #168]	; (8002bb8 <MX_GPIO_Init+0x154>)
 8002b10:	f002 f8fb 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8002b14:	230f      	movs	r3, #15
 8002b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b20:	f107 0318 	add.w	r3, r7, #24
 8002b24:	4619      	mov	r1, r3
 8002b26:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <MX_GPIO_Init+0x14c>)
 8002b28:	f001 ff44 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002b2c:	f64f 0370 	movw	r3, #63600	; 0xf870
 8002b30:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b3e:	f107 0318 	add.w	r3, r7, #24
 8002b42:	4619      	mov	r1, r3
 8002b44:	481a      	ldr	r0, [pc, #104]	; (8002bb0 <MX_GPIO_Init+0x14c>)
 8002b46:	f001 ff35 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4814      	ldr	r0, [pc, #80]	; (8002bb4 <MX_GPIO_Init+0x150>)
 8002b64:	f001 ff26 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002b68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2302      	movs	r3, #2
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0318 	add.w	r3, r7, #24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <MX_GPIO_Init+0x154>)
 8002b82:	f001 ff17 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b96:	f107 0318 	add.w	r3, r7, #24
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <MX_GPIO_Init+0x150>)
 8002b9e:	f001 ff09 	bl	80049b4 <HAL_GPIO_Init>

}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40011800 	.word	0x40011800
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40010c00 	.word	0x40010c00

08002bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc0:	b672      	cpsid	i
}
 8002bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bc4:	e7fe      	b.n	8002bc4 <Error_Handler+0x8>
	...

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_MspInit+0x40>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	4a0d      	ldr	r2, [pc, #52]	; (8002c08 <HAL_MspInit+0x40>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6193      	str	r3, [r2, #24]
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_MspInit+0x40>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_MspInit+0x40>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_MspInit+0x40>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_MspInit+0x40>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <HAL_ADC_MspInit+0xbc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d149      	bne.n	8002cc0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_ADC_MspInit+0xc0>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <HAL_ADC_MspInit+0xc0>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c36:	6193      	str	r3, [r2, #24]
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_ADC_MspInit+0xc0>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_ADC_MspInit+0xc0>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <HAL_ADC_MspInit+0xc0>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6193      	str	r3, [r2, #24]
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_ADC_MspInit+0xc0>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c60:	2303      	movs	r3, #3
 8002c62:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4819      	ldr	r0, [pc, #100]	; (8002cd0 <HAL_ADC_MspInit+0xc4>)
 8002c6c:	f001 fea2 	bl	80049b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_ADC_MspInit+0xcc>)
 8002c74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ca4:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002ca6:	f001 fb09 	bl	80042bc <HAL_DMA_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002cb0:	f7ff ff84 	bl	8002bbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002cb8:	621a      	str	r2, [r3, #32]
 8002cba:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_ADC_MspInit+0xc8>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40012400 	.word	0x40012400
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010800 	.word	0x40010800
 8002cd4:	200006f4 	.word	0x200006f4
 8002cd8:	40020008 	.word	0x40020008

08002cdc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <HAL_DAC_MspInit+0x110>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d172      	bne.n	8002de2 <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_DAC_MspInit+0x114>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_DAC_MspInit+0x114>)
 8002d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d06:	61d3      	str	r3, [r2, #28]
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_DAC_MspInit+0x114>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_DAC_MspInit+0x114>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_DAC_MspInit+0x114>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_DAC_MspInit+0x114>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d2c:	2330      	movs	r3, #48	; 0x30
 8002d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d30:	2303      	movs	r3, #3
 8002d32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	4619      	mov	r1, r3
 8002d3a:	482e      	ldr	r0, [pc, #184]	; (8002df4 <HAL_DAC_MspInit+0x118>)
 8002d3c:	f001 fe3a 	bl	80049b4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d42:	4a2e      	ldr	r2, [pc, #184]	; (8002dfc <HAL_DAC_MspInit+0x120>)
 8002d44:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d48:	2210      	movs	r2, #16
 8002d4a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d5e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d66:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d70:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002d74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002d76:	4820      	ldr	r0, [pc, #128]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d78:	f001 faa0 	bl	80042bc <HAL_DMA_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8002d82:	f7ff ff1b 	bl	8002bbc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_DAC_MspInit+0x11c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_DAC_MspInit+0x128>)
 8002d96:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002dc6:	480e      	ldr	r0, [pc, #56]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002dc8:	f001 fa78 	bl	80042bc <HAL_DMA_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8002dd2:	f7ff fef3 	bl	8002bbc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_DAC_MspInit+0x124>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002de2:	bf00      	nop
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40007400 	.word	0x40007400
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010800 	.word	0x40010800
 8002df8:	2000074c 	.word	0x2000074c
 8002dfc:	40020430 	.word	0x40020430
 8002e00:	20000790 	.word	0x20000790
 8002e04:	40020444 	.word	0x40020444

08002e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <HAL_I2C_MspInit+0x70>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d123      	bne.n	8002e70 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_I2C_MspInit+0x74>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <HAL_I2C_MspInit+0x74>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_I2C_MspInit+0x74>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e40:	23c0      	movs	r3, #192	; 0xc0
 8002e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e44:	2312      	movs	r3, #18
 8002e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	4619      	mov	r1, r3
 8002e52:	480b      	ldr	r0, [pc, #44]	; (8002e80 <HAL_I2C_MspInit+0x78>)
 8002e54:	f001 fdae 	bl	80049b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_I2C_MspInit+0x74>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_I2C_MspInit+0x74>)
 8002e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e62:	61d3      	str	r3, [r2, #28]
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_I2C_MspInit+0x74>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40005400 	.word	0x40005400
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010c00 	.word	0x40010c00

08002e84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0318 	add.w	r3, r7, #24
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <HAL_SD_MspInit+0xa4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d13c      	bne.n	8002f1e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eae:	6153      	str	r3, [r2, #20]
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002ec2:	f043 0310 	orr.w	r3, r3, #16
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002eda:	f043 0320 	orr.w	r3, r3, #32
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_SD_MspInit+0xa8>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002eec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ef0:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efa:	f107 0318 	add.w	r3, r7, #24
 8002efe:	4619      	mov	r1, r3
 8002f00:	480b      	ldr	r0, [pc, #44]	; (8002f30 <HAL_SD_MspInit+0xac>)
 8002f02:	f001 fd57 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f06:	2304      	movs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f12:	f107 0318 	add.w	r3, r7, #24
 8002f16:	4619      	mov	r1, r3
 8002f18:	4806      	ldr	r0, [pc, #24]	; (8002f34 <HAL_SD_MspInit+0xb0>)
 8002f1a:	f001 fd4b 	bl	80049b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3728      	adds	r7, #40	; 0x28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40018000 	.word	0x40018000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400

08002f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_SPI_MspInit+0x8c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d131      	bne.n	8002fbc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002f76:	f043 0308 	orr.w	r3, r3, #8
 8002f7a:	6193      	str	r3, [r2, #24]
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_SPI_MspInit+0x90>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f88:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f96:	f107 0310 	add.w	r3, r7, #16
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <HAL_SPI_MspInit+0x94>)
 8002f9e:	f001 fd09 	bl	80049b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <HAL_SPI_MspInit+0x94>)
 8002fb8:	f001 fcfc 	bl	80049b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40003800 	.word	0x40003800
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010c00 	.word	0x40010c00

08002fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	61d3      	str	r3, [r2, #28]
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ffa:	e032      	b.n	8003062 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_TIM_Base_MspInit+0xa0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d114      	bne.n	8003030 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	61d3      	str	r3, [r2, #28]
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2100      	movs	r1, #0
 8003022:	201d      	movs	r0, #29
 8003024:	f000 feb3 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003028:	201d      	movs	r0, #29
 800302a:	f000 fecc 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
}
 800302e:	e018      	b.n	8003062 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_TIM_Base_MspInit+0xa4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d113      	bne.n	8003062 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	61d3      	str	r3, [r2, #28]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_TIM_Base_MspInit+0x9c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	201e      	movs	r0, #30
 8003058:	f000 fe99 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800305c:	201e      	movs	r0, #30
 800305e:	f000 feb2 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800307c:	e7fe      	b.n	800307c <NMI_Handler+0x4>

0800307e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003082:	e7fe      	b.n	8003082 <HardFault_Handler+0x4>

08003084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <MemManage_Handler+0x4>

0800308a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <BusFault_Handler+0x4>

08003090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <UsageFault_Handler+0x4>

08003096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030be:	f000 f971 	bl	80033a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <DMA1_Channel1_IRQHandler+0x10>)
 80030ce:	f001 fa07 	bl	80044e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200006f4 	.word	0x200006f4

080030dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80030e2:	f002 f894 	bl	800520e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20001338 	.word	0x20001338

080030f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <TIM3_IRQHandler+0x10>)
 80030f6:	f005 fe6f 	bl	8008dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	2000094c 	.word	0x2000094c

08003104 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <TIM4_IRQHandler+0x10>)
 800310a:	f005 fe65 	bl	8008dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000994 	.word	0x20000994

08003118 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <DMA2_Channel3_IRQHandler+0x10>)
 800311e:	f001 f9df 	bl	80044e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000074c 	.word	0x2000074c

0800312c <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA2_Channel4_5_IRQHandler+0x10>)
 8003132:	f001 f9d5 	bl	80044e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000790 	.word	0x20000790

08003140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	return 1;
 8003144:	2301      	movs	r3, #1
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <_kill>:

int _kill(int pid, int sig)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003158:	f00e f898 	bl	801128c <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	2216      	movs	r2, #22
 8003160:	601a      	str	r2, [r3, #0]
	return -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <_exit>:

void _exit (int status)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003176:	f04f 31ff 	mov.w	r1, #4294967295
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffe7 	bl	800314e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003180:	e7fe      	b.n	8003180 <_exit+0x12>

08003182 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e00a      	b.n	80031aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003194:	f3af 8000 	nop.w
 8003198:	4601      	mov	r1, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	b2ca      	uxtb	r2, r1
 80031a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	dbf0      	blt.n	8003194 <_read+0x12>
	}

return len;
 80031b2:	687b      	ldr	r3, [r7, #4]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e009      	b.n	80031e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	60ba      	str	r2, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	dbf1      	blt.n	80031ce <_write+0x12>
	}
	return len;
 80031ea:	687b      	ldr	r3, [r7, #4]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <_close>:

int _close(int file)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321a:	605a      	str	r2, [r3, #4]
	return 0;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <_isatty>:

int _isatty(int file)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	return 1;
 8003230:	2301      	movs	r3, #1
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800325c:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <_sbrk+0x5c>)
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <_sbrk+0x60>)
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003268:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <_sbrk+0x64>)
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <_sbrk+0x68>)
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	429a      	cmp	r2, r3
 8003282:	d207      	bcs.n	8003294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003284:	f00e f802 	bl	801128c <__errno>
 8003288:	4603      	mov	r3, r0
 800328a:	220c      	movs	r2, #12
 800328c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e009      	b.n	80032a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <_sbrk+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <_sbrk+0x64>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <_sbrk+0x64>)
 80032a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20010000 	.word	0x20010000
 80032b4:	00000400 	.word	0x00000400
 80032b8:	20000e34 	.word	0x20000e34
 80032bc:	20001650 	.word	0x20001650

080032c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032cc:	f7ff fff8 	bl	80032c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d0:	480b      	ldr	r0, [pc, #44]	; (8003300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032d2:	490c      	ldr	r1, [pc, #48]	; (8003304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032d4:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032e8:	4c09      	ldr	r4, [pc, #36]	; (8003310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032f6:	f00d ffcf 	bl	8011298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032fa:	f7fe fd1d 	bl	8001d38 <main>
  bx lr
 80032fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003304:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8003308:	0802db3c 	.word	0x0802db3c
  ldr r2, =_sbss
 800330c:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8003310:	2000164c 	.word	0x2000164c

08003314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC1_2_IRQHandler>
	...

08003318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_Init+0x28>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_Init+0x28>)
 8003322:	f043 0310 	orr.w	r3, r3, #16
 8003326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003328:	2003      	movs	r0, #3
 800332a:	f000 fd25 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800332e:	2000      	movs	r0, #0
 8003330:	f000 f808 	bl	8003344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003334:	f7ff fc48 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_InitTick+0x54>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_InitTick+0x58>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800335a:	fbb3 f3f1 	udiv	r3, r3, r1
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fd3d 	bl	8003de2 <HAL_SYSTICK_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e00e      	b.n	8003390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d80a      	bhi.n	800338e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003378:	2200      	movs	r2, #0
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f000 fd05 	bl	8003d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003384:	4a06      	ldr	r2, [pc, #24]	; (80033a0 <HAL_InitTick+0x5c>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000010 	.word	0x20000010
 800339c:	20000018 	.word	0x20000018
 80033a0:	20000014 	.word	0x20000014

080033a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_IncTick+0x1c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_IncTick+0x20>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <HAL_IncTick+0x20>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000018 	.word	0x20000018
 80033c4:	20000e38 	.word	0x20000e38

080033c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return uwTick;
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <HAL_GetTick+0x10>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	20000e38 	.word	0x20000e38

080033dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d005      	beq.n	8003402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_Delay+0x44>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003402:	bf00      	nop
 8003404:	f7ff ffe0 	bl	80033c8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d8f7      	bhi.n	8003404 <HAL_Delay+0x28>
  {
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000018 	.word	0x20000018

08003424 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0ce      	b.n	80035e4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fbd2 	bl	8002c0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb11 	bl	8003a90 <ADC_ConversionStop_Disable>
 800346e:	4603      	mov	r3, r0
 8003470:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 80a9 	bne.w	80035d2 <HAL_ADC_Init+0x1ae>
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 80a5 	bne.w	80035d2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003490:	f023 0302 	bic.w	r3, r3, #2
 8003494:	f043 0202 	orr.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4951      	ldr	r1, [pc, #324]	; (80035ec <HAL_ADC_Init+0x1c8>)
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d10a      	bne.n	80034c0 <HAL_ADC_Init+0x9c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b2:	d002      	beq.n	80034ba <HAL_ADC_Init+0x96>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	e004      	b.n	80034c4 <HAL_ADC_Init+0xa0>
 80034ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034be:	e001      	b.n	80034c4 <HAL_ADC_Init+0xa0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7b1b      	ldrb	r3, [r3, #12]
 80034ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034dc:	d003      	beq.n	80034e6 <HAL_ADC_Init+0xc2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d102      	bne.n	80034ec <HAL_ADC_Init+0xc8>
 80034e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ea:	e000      	b.n	80034ee <HAL_ADC_Init+0xca>
 80034ec:	2300      	movs	r3, #0
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7d1b      	ldrb	r3, [r3, #20]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d119      	bne.n	8003530 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7b1b      	ldrb	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	3b01      	subs	r3, #1
 800350a:	035a      	lsls	r2, r3, #13
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e00b      	b.n	8003530 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_ADC_Init+0x1cc>)
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	430b      	orrs	r3, r1
 8003556:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003560:	d003      	beq.n	800356a <HAL_ADC_Init+0x146>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d104      	bne.n	8003574 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	3b01      	subs	r3, #1
 8003570:	051b      	lsls	r3, r3, #20
 8003572:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	430a      	orrs	r2, r1
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_ADC_Init+0x1d0>)
 8003590:	4013      	ands	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d10b      	bne.n	80035b0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035ae:	e018      	b.n	80035e2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f023 0312 	bic.w	r3, r3, #18
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035d0:	e007      	b.n	80035e2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	f043 0210 	orr.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40013c00 	.word	0x40013c00
 80035f0:	ffe1f7fd 	.word	0xffe1f7fd
 80035f4:	ff1f0efe 	.word	0xff1f0efe

080035f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a64      	ldr	r2, [pc, #400]	; (80037a0 <HAL_ADC_Start_DMA+0x1a8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_ADC_Start_DMA+0x24>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a63      	ldr	r2, [pc, #396]	; (80037a4 <HAL_ADC_Start_DMA+0x1ac>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d106      	bne.n	800362a <HAL_ADC_Start_DMA+0x32>
 800361c:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <HAL_ADC_Start_DMA+0x1a8>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 80b3 	bne.w	8003790 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_ADC_Start_DMA+0x40>
 8003634:	2302      	movs	r3, #2
 8003636:	e0ae      	b.n	8003796 <HAL_ADC_Start_DMA+0x19e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f9cb 	bl	80039dc <ADC_Enable>
 8003646:	4603      	mov	r3, r0
 8003648:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 809a 	bne.w	8003786 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_ADC_Start_DMA+0x1ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d105      	bne.n	800367c <HAL_ADC_Start_DMA+0x84>
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_ADC_Start_DMA+0x1a8>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d115      	bne.n	80036a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	2b00      	cmp	r3, #0
 8003694:	d026      	beq.n	80036e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800369e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036a6:	e01d      	b.n	80036e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <HAL_ADC_Start_DMA+0x1a8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_Start_DMA+0xd0>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a38      	ldr	r2, [pc, #224]	; (80037a4 <HAL_ADC_Start_DMA+0x1ac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10d      	bne.n	80036e4 <HAL_ADC_Start_DMA+0xec>
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_ADC_Start_DMA+0x1a8>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d006      	beq.n	80036fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f023 0206 	bic.w	r2, r3, #6
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80036fc:	e002      	b.n	8003704 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <HAL_ADC_Start_DMA+0x1b0>)
 8003712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <HAL_ADC_Start_DMA+0x1b4>)
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <HAL_ADC_Start_DMA+0x1b8>)
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a18      	ldr	r0, [r3, #32]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	334c      	adds	r3, #76	; 0x4c
 8003748:	4619      	mov	r1, r3
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f000 fe2b 	bl	80043a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800375c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003760:	d108      	bne.n	8003774 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003770:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003772:	e00f      	b.n	8003794 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003782:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003784:	e006      	b.n	8003794 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800378e:	e001      	b.n	8003794 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40012400 	.word	0x40012400
 80037a4:	40012800 	.word	0x40012800
 80037a8:	08003b13 	.word	0x08003b13
 80037ac:	08003b8f 	.word	0x08003b8f
 80037b0:	08003bab 	.word	0x08003bab

080037b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x20>
 8003808:	2302      	movs	r3, #2
 800380a:	e0dc      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x1da>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b06      	cmp	r3, #6
 800381a:	d81c      	bhi.n	8003856 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	3b05      	subs	r3, #5
 800382e:	221f      	movs	r2, #31
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	4019      	ands	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	3b05      	subs	r3, #5
 8003848:	fa00 f203 	lsl.w	r2, r0, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	635a      	str	r2, [r3, #52]	; 0x34
 8003854:	e03c      	b.n	80038d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d81c      	bhi.n	8003898 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	3b23      	subs	r3, #35	; 0x23
 8003870:	221f      	movs	r2, #31
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	4019      	ands	r1, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b23      	subs	r3, #35	; 0x23
 800388a:	fa00 f203 	lsl.w	r2, r0, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
 8003896:	e01b      	b.n	80038d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b41      	subs	r3, #65	; 0x41
 80038aa:	221f      	movs	r2, #31
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	4019      	ands	r1, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b41      	subs	r3, #65	; 0x41
 80038c4:	fa00 f203 	lsl.w	r2, r0, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d91c      	bls.n	8003912 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	3b1e      	subs	r3, #30
 80038ea:	2207      	movs	r2, #7
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4019      	ands	r1, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6898      	ldr	r0, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	3b1e      	subs	r3, #30
 8003904:	fa00 f203 	lsl.w	r2, r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e019      	b.n	8003946 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6919      	ldr	r1, [r3, #16]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	2207      	movs	r2, #7
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	4019      	ands	r1, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6898      	ldr	r0, [r3, #8]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	fa00 f203 	lsl.w	r2, r0, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b10      	cmp	r3, #16
 800394c:	d003      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003952:	2b11      	cmp	r3, #17
 8003954:	d132      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d125      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d126      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800397c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b10      	cmp	r3, #16
 8003984:	d11a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	0c9a      	lsrs	r2, r3, #18
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800399c:	e002      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f9      	bne.n	800399e <HAL_ADC_ConfigChannel+0x1b2>
 80039aa:	e007      	b.n	80039bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012400 	.word	0x40012400
 80039d4:	20000010 	.word	0x20000010
 80039d8:	431bde83 	.word	0x431bde83

080039dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d040      	beq.n	8003a7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a0a:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <ADC_Enable+0xac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <ADC_Enable+0xb0>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	0c9b      	lsrs	r3, r3, #18
 8003a16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a18:	e002      	b.n	8003a20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f9      	bne.n	8003a1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a26:	f7ff fccf 	bl	80033c8 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a2c:	e01f      	b.n	8003a6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a2e:	f7ff fccb 	bl	80033c8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d918      	bls.n	8003a6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d011      	beq.n	8003a6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e007      	b.n	8003a7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d1d8      	bne.n	8003a2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000010 	.word	0x20000010
 8003a8c:	431bde83 	.word	0x431bde83

08003a90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d12e      	bne.n	8003b08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aba:	f7ff fc85 	bl	80033c8 <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ac0:	e01b      	b.n	8003afa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ac2:	f7ff fc81 	bl	80033c8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d914      	bls.n	8003afa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10d      	bne.n	8003afa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e007      	b.n	8003b0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d0dc      	beq.n	8003ac2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d127      	bne.n	8003b7c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b46:	d115      	bne.n	8003b74 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d111      	bne.n	8003b74 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fe1d 	bl	80037b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003b7a:	e004      	b.n	8003b86 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fe12 	bl	80037c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fe01 	bl	80037d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <__NVIC_GetPriorityGrouping+0x18>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0307 	and.w	r3, r3, #7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db0b      	blt.n	8003c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4906      	ldr	r1, [pc, #24]	; (8003c78 <__NVIC_EnableIRQ+0x34>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d44:	d301      	bcc.n	8003d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <SysTick_Config+0x40>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d52:	210f      	movs	r1, #15
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f7ff ff90 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <SysTick_Config+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d62:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <SysTick_Config+0x40>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e010 	.word	0xe000e010

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff2d 	bl	8003be0 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da0:	f7ff ff42 	bl	8003c28 <__NVIC_GetPriorityGrouping>
 8003da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ff90 	bl	8003cd0 <NVIC_EncodePriority>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff5f 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff35 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ffa2 	bl	8003d34 <SysTick_Config>
 8003df0:	4603      	mov	r3, r0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e014      	b.n	8003e36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	791b      	ldrb	r3, [r3, #4]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d105      	bne.n	8003e22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fe ff5d 	bl	8002cdc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e046      	b.n	8003ee0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	795b      	ldrb	r3, [r3, #5]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_DAC_Start+0x20>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e040      	b.n	8003ee0 <HAL_DAC_Start+0xa2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10f      	bne.n	8003ea8 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003e92:	2b3c      	cmp	r3, #60	; 0x3c
 8003e94:	d11d      	bne.n	8003ed2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e014      	b.n	8003ed2 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	213c      	movs	r1, #60	; 0x3c
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0202 	orr.w	r2, r2, #2
 8003ed0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e092      	b.n	800402a <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	795b      	ldrb	r3, [r3, #5]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_DAC_Start_DMA+0x24>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e08c      	b.n	800402a <HAL_DAC_Start_DMA+0x13e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d129      	bne.n	8003f76 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a43      	ldr	r2, [pc, #268]	; (8004034 <HAL_DAC_Start_DMA+0x148>)
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_DAC_Start_DMA+0x14c>)
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4a41      	ldr	r2, [pc, #260]	; (800403c <HAL_DAC_Start_DMA+0x150>)
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f48:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_DAC_Start_DMA+0x6c>
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d005      	beq.n	8003f62 <HAL_DAC_Start_DMA+0x76>
 8003f56:	e009      	b.n	8003f6c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	613b      	str	r3, [r7, #16]
        break;
 8003f60:	e033      	b.n	8003fca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	613b      	str	r3, [r7, #16]
        break;
 8003f6a:	e02e      	b.n	8003fca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3310      	adds	r3, #16
 8003f72:	613b      	str	r3, [r7, #16]
        break;
 8003f74:	e029      	b.n	8003fca <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4a31      	ldr	r2, [pc, #196]	; (8004040 <HAL_DAC_Start_DMA+0x154>)
 8003f7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4a30      	ldr	r2, [pc, #192]	; (8004044 <HAL_DAC_Start_DMA+0x158>)
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <HAL_DAC_Start_DMA+0x15c>)
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_DAC_Start_DMA+0xc0>
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d005      	beq.n	8003fb6 <HAL_DAC_Start_DMA+0xca>
 8003faa:	e009      	b.n	8003fc0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	613b      	str	r3, [r7, #16]
        break;
 8003fb4:	e009      	b.n	8003fca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	613b      	str	r3, [r7, #16]
        break;
 8003fbe:	e004      	b.n	8003fca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	331c      	adds	r3, #28
 8003fc6:	613b      	str	r3, [r7, #16]
        break;
 8003fc8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6898      	ldr	r0, [r3, #8]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	f000 f9e5 	bl	80043a8 <HAL_DMA_Start_IT>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]
 8003fe2:	e008      	b.n	8003ff6 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68d8      	ldr	r0, [r3, #12]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	f000 f9db 	bl	80043a8 <HAL_DMA_Start_IT>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2201      	movs	r2, #1
 8004010:	409a      	lsls	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e005      	b.n	8004028 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	080041ad 	.word	0x080041ad
 8004038:	080041cf 	.word	0x080041cf
 800403c:	080041eb 	.word	0x080041eb
 8004040:	0800424f 	.word	0x0800424f
 8004044:	08004271 	.word	0x08004271
 8004048:	0800428d 	.word	0x0800428d

0800404c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e02e      	b.n	80040be <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43da      	mvns	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	400a      	ands	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6819      	ldr	r1, [r3, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43da      	mvns	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	400a      	ands	r2, r1
 8004098:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f9df 	bl	8004468 <HAL_DMA_Abort>
 80040aa:	e004      	b.n	80040b6 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 f9d9 	bl	8004468 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_DAC_ConfigChannel+0x1c>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e042      	b.n	80041a2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	795b      	ldrb	r3, [r3, #5]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_DAC_ConfigChannel+0x2c>
 8004124:	2302      	movs	r3, #2
 8004126:	e03c      	b.n	80041a2 <HAL_DAC_ConfigChannel+0xa6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2202      	movs	r2, #2
 8004132:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	22c0      	movs	r2, #192	; 0xc0
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80041a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff ff83 	bl	80040c6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	711a      	strb	r2, [r3, #4]
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff ff7b 	bl	80040d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff ff70 	bl	80040ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	711a      	strb	r2, [r3, #4]
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff ffdb 	bl	8004218 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	711a      	strb	r2, [r3, #4]
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff ffd3 	bl	800422a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff ffc8 	bl	800423c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	711a      	strb	r2, [r3, #4]
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e059      	b.n	8004386 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_DMA_Init+0xd4>)
 80042da:	429a      	cmp	r2, r3
 80042dc:	d80f      	bhi.n	80042fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_DMA_Init+0xd8>)
 80042e6:	4413      	add	r3, r2
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <HAL_DMA_Init+0xdc>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	009a      	lsls	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a28      	ldr	r2, [pc, #160]	; (800439c <HAL_DMA_Init+0xe0>)
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80042fc:	e00e      	b.n	800431c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <HAL_DMA_Init+0xe4>)
 8004306:	4413      	add	r3, r2
 8004308:	4a23      	ldr	r2, [pc, #140]	; (8004398 <HAL_DMA_Init+0xdc>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	009a      	lsls	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <HAL_DMA_Init+0xe8>)
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004332:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004336:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004340:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004358:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	40020407 	.word	0x40020407
 8004394:	bffdfff8 	.word	0xbffdfff8
 8004398:	cccccccd 	.word	0xcccccccd
 800439c:	40020000 	.word	0x40020000
 80043a0:	bffdfbf8 	.word	0xbffdfbf8
 80043a4:	40020400 	.word	0x40020400

080043a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_DMA_Start_IT+0x20>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e04b      	b.n	8004460 <HAL_DMA_Start_IT+0xb8>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d13a      	bne.n	8004452 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 faa9 	bl	8004958 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 020e 	orr.w	r2, r2, #14
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	e00f      	b.n	8004440 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0204 	bic.w	r2, r2, #4
 800442e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 020a 	orr.w	r2, r2, #10
 800443e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e005      	b.n	800445e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800445a:	2302      	movs	r3, #2
 800445c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800445e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d008      	beq.n	8004492 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2204      	movs	r2, #4
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e020      	b.n	80044d4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 020e 	bic.w	r2, r2, #14
 80044a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2101      	movs	r1, #1
 80044bc:	fa01 f202 	lsl.w	r2, r1, r2
 80044c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	2204      	movs	r2, #4
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80f1 	beq.w	80046ec <HAL_DMA_IRQHandler+0x20c>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80eb 	beq.w	80046ec <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <HAL_DMA_IRQHandler+0x1d8>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d958      	bls.n	80045f2 <HAL_DMA_IRQHandler+0x112>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5d      	ldr	r2, [pc, #372]	; (80046bc <HAL_DMA_IRQHandler+0x1dc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04f      	beq.n	80045ea <HAL_DMA_IRQHandler+0x10a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5c      	ldr	r2, [pc, #368]	; (80046c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d048      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x106>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5a      	ldr	r2, [pc, #360]	; (80046c4 <HAL_DMA_IRQHandler+0x1e4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x100>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a59      	ldr	r2, [pc, #356]	; (80046c8 <HAL_DMA_IRQHandler+0x1e8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d038      	beq.n	80045da <HAL_DMA_IRQHandler+0xfa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a57      	ldr	r2, [pc, #348]	; (80046cc <HAL_DMA_IRQHandler+0x1ec>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d030      	beq.n	80045d4 <HAL_DMA_IRQHandler+0xf4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a56      	ldr	r2, [pc, #344]	; (80046d0 <HAL_DMA_IRQHandler+0x1f0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d028      	beq.n	80045ce <HAL_DMA_IRQHandler+0xee>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a4d      	ldr	r2, [pc, #308]	; (80046b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d020      	beq.n	80045c8 <HAL_DMA_IRQHandler+0xe8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a52      	ldr	r2, [pc, #328]	; (80046d4 <HAL_DMA_IRQHandler+0x1f4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d019      	beq.n	80045c4 <HAL_DMA_IRQHandler+0xe4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a50      	ldr	r2, [pc, #320]	; (80046d8 <HAL_DMA_IRQHandler+0x1f8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d012      	beq.n	80045c0 <HAL_DMA_IRQHandler+0xe0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4f      	ldr	r2, [pc, #316]	; (80046dc <HAL_DMA_IRQHandler+0x1fc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00a      	beq.n	80045ba <HAL_DMA_IRQHandler+0xda>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4d      	ldr	r2, [pc, #308]	; (80046e0 <HAL_DMA_IRQHandler+0x200>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d102      	bne.n	80045b4 <HAL_DMA_IRQHandler+0xd4>
 80045ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045b2:	e01b      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045b8:	e018      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045be:	e015      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	e013      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e011      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045cc:	e00e      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045d2:	e00b      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80045d8:	e008      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045de:	e005      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e4:	e002      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	e000      	b.n	80045ec <HAL_DMA_IRQHandler+0x10c>
 80045ea:	2304      	movs	r3, #4
 80045ec:	4a3d      	ldr	r2, [pc, #244]	; (80046e4 <HAL_DMA_IRQHandler+0x204>)
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e057      	b.n	80046a2 <HAL_DMA_IRQHandler+0x1c2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a31      	ldr	r2, [pc, #196]	; (80046bc <HAL_DMA_IRQHandler+0x1dc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d04f      	beq.n	800469c <HAL_DMA_IRQHandler+0x1bc>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2f      	ldr	r2, [pc, #188]	; (80046c0 <HAL_DMA_IRQHandler+0x1e0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d048      	beq.n	8004698 <HAL_DMA_IRQHandler+0x1b8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2e      	ldr	r2, [pc, #184]	; (80046c4 <HAL_DMA_IRQHandler+0x1e4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d040      	beq.n	8004692 <HAL_DMA_IRQHandler+0x1b2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <HAL_DMA_IRQHandler+0x1e8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d038      	beq.n	800468c <HAL_DMA_IRQHandler+0x1ac>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <HAL_DMA_IRQHandler+0x1ec>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d030      	beq.n	8004686 <HAL_DMA_IRQHandler+0x1a6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_DMA_IRQHandler+0x1f0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d028      	beq.n	8004680 <HAL_DMA_IRQHandler+0x1a0>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <HAL_DMA_IRQHandler+0x1d8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d020      	beq.n	800467a <HAL_DMA_IRQHandler+0x19a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <HAL_DMA_IRQHandler+0x1f4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d019      	beq.n	8004676 <HAL_DMA_IRQHandler+0x196>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <HAL_DMA_IRQHandler+0x1f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d012      	beq.n	8004672 <HAL_DMA_IRQHandler+0x192>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_DMA_IRQHandler+0x1fc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00a      	beq.n	800466c <HAL_DMA_IRQHandler+0x18c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <HAL_DMA_IRQHandler+0x200>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d102      	bne.n	8004666 <HAL_DMA_IRQHandler+0x186>
 8004660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004664:	e01b      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004666:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800466a:	e018      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 800466c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004670:	e015      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	e013      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004676:	2304      	movs	r3, #4
 8004678:	e011      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 800467a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800467e:	e00e      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004684:	e00b      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004686:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800468a:	e008      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 800468c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004690:	e005      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	e002      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	e000      	b.n	800469e <HAL_DMA_IRQHandler+0x1be>
 800469c:	2304      	movs	r3, #4
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <HAL_DMA_IRQHandler+0x208>)
 80046a0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8136 	beq.w	8004918 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80046b4:	e130      	b.n	8004918 <HAL_DMA_IRQHandler+0x438>
 80046b6:	bf00      	nop
 80046b8:	40020080 	.word	0x40020080
 80046bc:	40020008 	.word	0x40020008
 80046c0:	4002001c 	.word	0x4002001c
 80046c4:	40020030 	.word	0x40020030
 80046c8:	40020044 	.word	0x40020044
 80046cc:	40020058 	.word	0x40020058
 80046d0:	4002006c 	.word	0x4002006c
 80046d4:	40020408 	.word	0x40020408
 80046d8:	4002041c 	.word	0x4002041c
 80046dc:	40020430 	.word	0x40020430
 80046e0:	40020444 	.word	0x40020444
 80046e4:	40020400 	.word	0x40020400
 80046e8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2202      	movs	r2, #2
 80046f2:	409a      	lsls	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80dd 	beq.w	80048b8 <HAL_DMA_IRQHandler+0x3d8>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80d7 	beq.w	80048b8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020a 	bic.w	r2, r2, #10
 8004726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b7b      	ldr	r3, [pc, #492]	; (8004924 <HAL_DMA_IRQHandler+0x444>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d958      	bls.n	80047ee <HAL_DMA_IRQHandler+0x30e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a79      	ldr	r2, [pc, #484]	; (8004928 <HAL_DMA_IRQHandler+0x448>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d04f      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x306>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a78      	ldr	r2, [pc, #480]	; (800492c <HAL_DMA_IRQHandler+0x44c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d048      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x302>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a76      	ldr	r2, [pc, #472]	; (8004930 <HAL_DMA_IRQHandler+0x450>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d040      	beq.n	80047dc <HAL_DMA_IRQHandler+0x2fc>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_DMA_IRQHandler+0x454>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d038      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x2f6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a73      	ldr	r2, [pc, #460]	; (8004938 <HAL_DMA_IRQHandler+0x458>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d030      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x2f0>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a72      	ldr	r2, [pc, #456]	; (800493c <HAL_DMA_IRQHandler+0x45c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d028      	beq.n	80047ca <HAL_DMA_IRQHandler+0x2ea>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a69      	ldr	r2, [pc, #420]	; (8004924 <HAL_DMA_IRQHandler+0x444>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d020      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x2e4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_DMA_IRQHandler+0x460>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d019      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x2e0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6c      	ldr	r2, [pc, #432]	; (8004944 <HAL_DMA_IRQHandler+0x464>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d012      	beq.n	80047bc <HAL_DMA_IRQHandler+0x2dc>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6b      	ldr	r2, [pc, #428]	; (8004948 <HAL_DMA_IRQHandler+0x468>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00a      	beq.n	80047b6 <HAL_DMA_IRQHandler+0x2d6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a69      	ldr	r2, [pc, #420]	; (800494c <HAL_DMA_IRQHandler+0x46c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d102      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x2d0>
 80047aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ae:	e01b      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b4:	e018      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ba:	e015      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047bc:	2320      	movs	r3, #32
 80047be:	e013      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e011      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c8:	e00e      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047ce:	e00b      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d4:	e008      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047da:	e005      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e0:	e002      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047e2:	2320      	movs	r3, #32
 80047e4:	e000      	b.n	80047e8 <HAL_DMA_IRQHandler+0x308>
 80047e6:	2302      	movs	r3, #2
 80047e8:	4a59      	ldr	r2, [pc, #356]	; (8004950 <HAL_DMA_IRQHandler+0x470>)
 80047ea:	6053      	str	r3, [r2, #4]
 80047ec:	e057      	b.n	800489e <HAL_DMA_IRQHandler+0x3be>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4d      	ldr	r2, [pc, #308]	; (8004928 <HAL_DMA_IRQHandler+0x448>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04f      	beq.n	8004898 <HAL_DMA_IRQHandler+0x3b8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a4b      	ldr	r2, [pc, #300]	; (800492c <HAL_DMA_IRQHandler+0x44c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d048      	beq.n	8004894 <HAL_DMA_IRQHandler+0x3b4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a4a      	ldr	r2, [pc, #296]	; (8004930 <HAL_DMA_IRQHandler+0x450>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_IRQHandler+0x3ae>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a48      	ldr	r2, [pc, #288]	; (8004934 <HAL_DMA_IRQHandler+0x454>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d038      	beq.n	8004888 <HAL_DMA_IRQHandler+0x3a8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a47      	ldr	r2, [pc, #284]	; (8004938 <HAL_DMA_IRQHandler+0x458>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d030      	beq.n	8004882 <HAL_DMA_IRQHandler+0x3a2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a45      	ldr	r2, [pc, #276]	; (800493c <HAL_DMA_IRQHandler+0x45c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d028      	beq.n	800487c <HAL_DMA_IRQHandler+0x39c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3d      	ldr	r2, [pc, #244]	; (8004924 <HAL_DMA_IRQHandler+0x444>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d020      	beq.n	8004876 <HAL_DMA_IRQHandler+0x396>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_DMA_IRQHandler+0x460>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d019      	beq.n	8004872 <HAL_DMA_IRQHandler+0x392>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a40      	ldr	r2, [pc, #256]	; (8004944 <HAL_DMA_IRQHandler+0x464>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d012      	beq.n	800486e <HAL_DMA_IRQHandler+0x38e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <HAL_DMA_IRQHandler+0x468>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00a      	beq.n	8004868 <HAL_DMA_IRQHandler+0x388>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3d      	ldr	r2, [pc, #244]	; (800494c <HAL_DMA_IRQHandler+0x46c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d102      	bne.n	8004862 <HAL_DMA_IRQHandler+0x382>
 800485c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004860:	e01b      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004866:	e018      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800486c:	e015      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 800486e:	2320      	movs	r3, #32
 8004870:	e013      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004872:	2302      	movs	r3, #2
 8004874:	e011      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800487a:	e00e      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 800487c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004880:	e00b      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004886:	e008      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800488c:	e005      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 800488e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004892:	e002      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004894:	2320      	movs	r3, #32
 8004896:	e000      	b.n	800489a <HAL_DMA_IRQHandler+0x3ba>
 8004898:	2302      	movs	r3, #2
 800489a:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <HAL_DMA_IRQHandler+0x474>)
 800489c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d034      	beq.n	8004918 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048b6:	e02f      	b.n	8004918 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	2208      	movs	r2, #8
 80048be:	409a      	lsls	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d028      	beq.n	800491a <HAL_DMA_IRQHandler+0x43a>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d023      	beq.n	800491a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 020e 	bic.w	r2, r2, #14
 80048e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f202 	lsl.w	r2, r1, r2
 80048f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
    }
  }
  return;
 8004918:	bf00      	nop
 800491a:	bf00      	nop
}
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40020080 	.word	0x40020080
 8004928:	40020008 	.word	0x40020008
 800492c:	4002001c 	.word	0x4002001c
 8004930:	40020030 	.word	0x40020030
 8004934:	40020044 	.word	0x40020044
 8004938:	40020058 	.word	0x40020058
 800493c:	4002006c 	.word	0x4002006c
 8004940:	40020408 	.word	0x40020408
 8004944:	4002041c 	.word	0x4002041c
 8004948:	40020430 	.word	0x40020430
 800494c:	40020444 	.word	0x40020444
 8004950:	40020400 	.word	0x40020400
 8004954:	40020000 	.word	0x40020000

08004958 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	2101      	movs	r1, #1
 8004970:	fa01 f202 	lsl.w	r2, r1, r2
 8004974:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b10      	cmp	r3, #16
 8004984:	d108      	bne.n	8004998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004996:	e007      	b.n	80049a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b08b      	sub	sp, #44	; 0x2c
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049c2:	2300      	movs	r3, #0
 80049c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049c6:	e179      	b.n	8004cbc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049c8:	2201      	movs	r2, #1
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	f040 8168 	bne.w	8004cb6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4a96      	ldr	r2, [pc, #600]	; (8004c44 <HAL_GPIO_Init+0x290>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d05e      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 80049f0:	4a94      	ldr	r2, [pc, #592]	; (8004c44 <HAL_GPIO_Init+0x290>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d875      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 80049f6:	4a94      	ldr	r2, [pc, #592]	; (8004c48 <HAL_GPIO_Init+0x294>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d058      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 80049fc:	4a92      	ldr	r2, [pc, #584]	; (8004c48 <HAL_GPIO_Init+0x294>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d86f      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a02:	4a92      	ldr	r2, [pc, #584]	; (8004c4c <HAL_GPIO_Init+0x298>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d052      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 8004a08:	4a90      	ldr	r2, [pc, #576]	; (8004c4c <HAL_GPIO_Init+0x298>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d869      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a0e:	4a90      	ldr	r2, [pc, #576]	; (8004c50 <HAL_GPIO_Init+0x29c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04c      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 8004a14:	4a8e      	ldr	r2, [pc, #568]	; (8004c50 <HAL_GPIO_Init+0x29c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d863      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a1a:	4a8e      	ldr	r2, [pc, #568]	; (8004c54 <HAL_GPIO_Init+0x2a0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d046      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
 8004a20:	4a8c      	ldr	r2, [pc, #560]	; (8004c54 <HAL_GPIO_Init+0x2a0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d85d      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a26:	2b12      	cmp	r3, #18
 8004a28:	d82a      	bhi.n	8004a80 <HAL_GPIO_Init+0xcc>
 8004a2a:	2b12      	cmp	r3, #18
 8004a2c:	d859      	bhi.n	8004ae2 <HAL_GPIO_Init+0x12e>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_GPIO_Init+0x80>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004aaf 	.word	0x08004aaf
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004a9b 	.word	0x08004a9b
 8004a40:	08004add 	.word	0x08004add
 8004a44:	08004ae3 	.word	0x08004ae3
 8004a48:	08004ae3 	.word	0x08004ae3
 8004a4c:	08004ae3 	.word	0x08004ae3
 8004a50:	08004ae3 	.word	0x08004ae3
 8004a54:	08004ae3 	.word	0x08004ae3
 8004a58:	08004ae3 	.word	0x08004ae3
 8004a5c:	08004ae3 	.word	0x08004ae3
 8004a60:	08004ae3 	.word	0x08004ae3
 8004a64:	08004ae3 	.word	0x08004ae3
 8004a68:	08004ae3 	.word	0x08004ae3
 8004a6c:	08004ae3 	.word	0x08004ae3
 8004a70:	08004ae3 	.word	0x08004ae3
 8004a74:	08004ae3 	.word	0x08004ae3
 8004a78:	08004a91 	.word	0x08004a91
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	4a75      	ldr	r2, [pc, #468]	; (8004c58 <HAL_GPIO_Init+0x2a4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a86:	e02c      	b.n	8004ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	623b      	str	r3, [r7, #32]
          break;
 8004a8e:	e029      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	623b      	str	r3, [r7, #32]
          break;
 8004a98:	e024      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	623b      	str	r3, [r7, #32]
          break;
 8004aa2:	e01f      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	623b      	str	r3, [r7, #32]
          break;
 8004aac:	e01a      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	623b      	str	r3, [r7, #32]
          break;
 8004aba:	e013      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d105      	bne.n	8004ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	611a      	str	r2, [r3, #16]
          break;
 8004ace:	e009      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	615a      	str	r2, [r3, #20]
          break;
 8004ada:	e003      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
          break;
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x130>
          break;
 8004ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2bff      	cmp	r3, #255	; 0xff
 8004ae8:	d801      	bhi.n	8004aee <HAL_GPIO_Init+0x13a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	e001      	b.n	8004af2 <HAL_GPIO_Init+0x13e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2bff      	cmp	r3, #255	; 0xff
 8004af8:	d802      	bhi.n	8004b00 <HAL_GPIO_Init+0x14c>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	e002      	b.n	8004b06 <HAL_GPIO_Init+0x152>
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	3b08      	subs	r3, #8
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	210f      	movs	r1, #15
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	401a      	ands	r2, r3
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	431a      	orrs	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80c1 	beq.w	8004cb6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b34:	4b49      	ldr	r3, [pc, #292]	; (8004c5c <HAL_GPIO_Init+0x2a8>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	4a48      	ldr	r2, [pc, #288]	; (8004c5c <HAL_GPIO_Init+0x2a8>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6193      	str	r3, [r2, #24]
 8004b40:	4b46      	ldr	r3, [pc, #280]	; (8004c5c <HAL_GPIO_Init+0x2a8>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b4c:	4a44      	ldr	r2, [pc, #272]	; (8004c60 <HAL_GPIO_Init+0x2ac>)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	3302      	adds	r3, #2
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	220f      	movs	r2, #15
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3c      	ldr	r2, [pc, #240]	; (8004c64 <HAL_GPIO_Init+0x2b0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01f      	beq.n	8004bb8 <HAL_GPIO_Init+0x204>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <HAL_GPIO_Init+0x2b4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d019      	beq.n	8004bb4 <HAL_GPIO_Init+0x200>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3a      	ldr	r2, [pc, #232]	; (8004c6c <HAL_GPIO_Init+0x2b8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_GPIO_Init+0x1fc>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <HAL_GPIO_Init+0x2bc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1f8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a38      	ldr	r2, [pc, #224]	; (8004c74 <HAL_GPIO_Init+0x2c0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1f4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a37      	ldr	r2, [pc, #220]	; (8004c78 <HAL_GPIO_Init+0x2c4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1f0>
 8004ba0:	2305      	movs	r3, #5
 8004ba2:	e00a      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	e008      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	e006      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bac:	2303      	movs	r3, #3
 8004bae:	e004      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e002      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_GPIO_Init+0x206>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	f002 0203 	and.w	r2, r2, #3
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	4093      	lsls	r3, r2
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004bca:	4925      	ldr	r1, [pc, #148]	; (8004c60 <HAL_GPIO_Init+0x2ac>)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	4924      	ldr	r1, [pc, #144]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]
 8004bf0:	e006      	b.n	8004c00 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bf2:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	4920      	ldr	r1, [pc, #128]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	491a      	ldr	r1, [pc, #104]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60cb      	str	r3, [r1, #12]
 8004c18:	e006      	b.n	8004c28 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c1a:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	4916      	ldr	r1, [pc, #88]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d025      	beq.n	8004c80 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	4910      	ldr	r1, [pc, #64]	; (8004c7c <HAL_GPIO_Init+0x2c8>)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	e025      	b.n	8004c8e <HAL_GPIO_Init+0x2da>
 8004c42:	bf00      	nop
 8004c44:	10320000 	.word	0x10320000
 8004c48:	10310000 	.word	0x10310000
 8004c4c:	10220000 	.word	0x10220000
 8004c50:	10210000 	.word	0x10210000
 8004c54:	10120000 	.word	0x10120000
 8004c58:	10110000 	.word	0x10110000
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010800 	.word	0x40010800
 8004c68:	40010c00 	.word	0x40010c00
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	40011800 	.word	0x40011800
 8004c78:	40011c00 	.word	0x40011c00
 8004c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c80:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4913      	ldr	r1, [pc, #76]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
 8004ca6:	e006      	b.n	8004cb6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <HAL_GPIO_Init+0x324>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	3301      	adds	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f47f ae7e 	bne.w	80049c8 <HAL_GPIO_Init+0x14>
  }
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	372c      	adds	r7, #44	; 0x2c
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	40010400 	.word	0x40010400

08004cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e001      	b.n	8004cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]
 8004d16:	4613      	mov	r3, r2
 8004d18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d1a:	787b      	ldrb	r3, [r7, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004d26:	e003      	b.n	8004d30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	041a      	lsls	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	611a      	str	r2, [r3, #16]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e12b      	b.n	8004fa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fe f850 	bl	8002e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	; 0x24
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004da0:	f002 fa32 	bl	8007208 <HAL_RCC_GetPCLK1Freq>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4a81      	ldr	r2, [pc, #516]	; (8004fb0 <HAL_I2C_Init+0x274>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d807      	bhi.n	8004dc0 <HAL_I2C_Init+0x84>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a80      	ldr	r2, [pc, #512]	; (8004fb4 <HAL_I2C_Init+0x278>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	bf94      	ite	ls
 8004db8:	2301      	movls	r3, #1
 8004dba:	2300      	movhi	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e006      	b.n	8004dce <HAL_I2C_Init+0x92>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a7d      	ldr	r2, [pc, #500]	; (8004fb8 <HAL_I2C_Init+0x27c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bf94      	ite	ls
 8004dc8:	2301      	movls	r3, #1
 8004dca:	2300      	movhi	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0e7      	b.n	8004fa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a78      	ldr	r2, [pc, #480]	; (8004fbc <HAL_I2C_Init+0x280>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	0c9b      	lsrs	r3, r3, #18
 8004de0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4a6a      	ldr	r2, [pc, #424]	; (8004fb0 <HAL_I2C_Init+0x274>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d802      	bhi.n	8004e10 <HAL_I2C_Init+0xd4>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	e009      	b.n	8004e24 <HAL_I2C_Init+0xe8>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	4a69      	ldr	r2, [pc, #420]	; (8004fc0 <HAL_I2C_Init+0x284>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	3301      	adds	r3, #1
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	495c      	ldr	r1, [pc, #368]	; (8004fb0 <HAL_I2C_Init+0x274>)
 8004e40:	428b      	cmp	r3, r1
 8004e42:	d819      	bhi.n	8004e78 <HAL_I2C_Init+0x13c>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1e59      	subs	r1, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e58:	400b      	ands	r3, r1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_I2C_Init+0x138>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1e59      	subs	r1, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e72:	e051      	b.n	8004f18 <HAL_I2C_Init+0x1dc>
 8004e74:	2304      	movs	r3, #4
 8004e76:	e04f      	b.n	8004f18 <HAL_I2C_Init+0x1dc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d111      	bne.n	8004ea4 <HAL_I2C_Init+0x168>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	440b      	add	r3, r1
 8004e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e92:	3301      	adds	r3, #1
 8004e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e012      	b.n	8004eca <HAL_I2C_Init+0x18e>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	1e58      	subs	r0, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	0099      	lsls	r1, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Init+0x196>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e022      	b.n	8004f18 <HAL_I2C_Init+0x1dc>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_I2C_Init+0x1bc>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1e58      	subs	r0, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	440b      	add	r3, r1
 8004ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eec:	3301      	adds	r3, #1
 8004eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	e00f      	b.n	8004f18 <HAL_I2C_Init+0x1dc>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1e58      	subs	r0, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	0099      	lsls	r1, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f0e:	3301      	adds	r3, #1
 8004f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6911      	ldr	r1, [r2, #16]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	4311      	orrs	r1, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	000186a0 	.word	0x000186a0
 8004fb4:	001e847f 	.word	0x001e847f
 8004fb8:	003d08ff 	.word	0x003d08ff
 8004fbc:	431bde83 	.word	0x431bde83
 8004fc0:	10624dd3 	.word	0x10624dd3

08004fc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	b08b      	sub	sp, #44	; 0x2c
 8004fc8:	af06      	add	r7, sp, #24
 8004fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e0f1      	b.n	80051ba <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f00b fec8 	bl	8010d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f005 f8cd 	bl	800a19c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	687e      	ldr	r6, [r7, #4]
 800500a:	466d      	mov	r5, sp
 800500c:	f106 0410 	add.w	r4, r6, #16
 8005010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	1d33      	adds	r3, r6, #4
 800501a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800501c:	6838      	ldr	r0, [r7, #0]
 800501e:	f005 f897 	bl	800a150 <USB_CoreInit>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0c2      	b.n	80051ba <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f005 f8c8 	bl	800a1d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]
 8005044:	e040      	b.n	80050c8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	440b      	add	r3, r1
 8005056:	3301      	adds	r3, #1
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	440b      	add	r3, r1
 8005080:	3303      	adds	r3, #3
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	440b      	add	r3, r1
 8005094:	3338      	adds	r3, #56	; 0x38
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	440b      	add	r3, r1
 80050a8:	333c      	adds	r3, #60	; 0x3c
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	440b      	add	r3, r1
 80050bc:	3340      	adds	r3, #64	; 0x40
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	3301      	adds	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3b9      	bcc.n	8005046 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	e044      	b.n	8005162 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050d8:	7bfa      	ldrb	r2, [r7, #15]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	440b      	add	r3, r1
 80050e6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005104:	7bfa      	ldrb	r2, [r7, #15]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	440b      	add	r3, r1
 8005112:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	440b      	add	r3, r1
 8005128:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	440b      	add	r3, r1
 800513e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	3301      	adds	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
 8005162:	7bfa      	ldrb	r2, [r7, #15]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d3b5      	bcc.n	80050d8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	687e      	ldr	r6, [r7, #4]
 8005174:	466d      	mov	r5, sp
 8005176:	f106 0410 	add.w	r4, r6, #16
 800517a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	1d33      	adds	r3, r6, #4
 8005184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f005 f82e 	bl	800a1e8 <USB_DevInit>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e00d      	b.n	80051ba <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f007 faaf 	bl	800c716 <USB_DevDisconnect>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_PCD_Start+0x16>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e016      	b.n	8005206 <HAL_PCD_Start+0x44>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f004 ffc3 	bl	800a170 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80051ea:	2101      	movs	r1, #1
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f00c f816 	bl	801121e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f007 fa83 	bl	800c702 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f007 fa85 	bl	800c72a <USB_ReadInterrupts>
 8005220:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb04 	bl	800583a <PCD_EP_ISR_Handler>

    return;
 8005232:	e119      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523a:	2b00      	cmp	r3, #0
 800523c:	d013      	beq.n	8005266 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005250:	b292      	uxth	r2, r2
 8005252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f00b fe0d 	bl	8010e76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800525c:	2100      	movs	r1, #0
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f905 	bl	800546e <HAL_PCD_SetAddress>

    return;
 8005264:	e100      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005282:	b292      	uxth	r2, r2
 8005284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005288:	e0ee      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052a6:	b292      	uxth	r2, r2
 80052a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80052ac:	e0dc      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d027      	beq.n	8005308 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	b292      	uxth	r2, r2
 80052cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052d8:	b29a      	uxth	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0208 	bic.w	r2, r2, #8
 80052e2:	b292      	uxth	r2, r2
 80052e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f00b fdfd 	bl	8010ee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005300:	b292      	uxth	r2, r2
 8005302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005306:	e0af      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8083 	beq.w	800541a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005314:	2300      	movs	r3, #0
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e010      	b.n	800533c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	7ffb      	ldrb	r3, [r7, #31]
 8005328:	8812      	ldrh	r2, [r2, #0]
 800532a:	b292      	uxth	r2, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	3320      	adds	r3, #32
 8005330:	443b      	add	r3, r7
 8005332:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005336:	7ffb      	ldrb	r3, [r7, #31]
 8005338:	3301      	adds	r3, #1
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	7ffb      	ldrb	r3, [r7, #31]
 800533e:	2b07      	cmp	r3, #7
 8005340:	d9eb      	bls.n	800531a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800534a:	b29a      	uxth	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	b292      	uxth	r2, r2
 8005356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	b292      	uxth	r2, r2
 800536e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005372:	bf00      	nop
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800537c:	b29b      	uxth	r3, r3
 800537e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f6      	beq.n	8005374 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005398:	b292      	uxth	r2, r2
 800539a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e00f      	b.n	80053c4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80053a4:	7ffb      	ldrb	r3, [r7, #31]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	4611      	mov	r1, r2
 80053ac:	7ffa      	ldrb	r2, [r7, #31]
 80053ae:	0092      	lsls	r2, r2, #2
 80053b0:	440a      	add	r2, r1
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	3320      	adds	r3, #32
 80053b6:	443b      	add	r3, r7
 80053b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80053bc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80053be:	7ffb      	ldrb	r3, [r7, #31]
 80053c0:	3301      	adds	r3, #1
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	2b07      	cmp	r3, #7
 80053c8:	d9ec      	bls.n	80053a4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0208 	orr.w	r2, r2, #8
 80053dc:	b292      	uxth	r2, r2
 80053de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f4:	b292      	uxth	r2, r2
 80053f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0204 	orr.w	r2, r2, #4
 800540c:	b292      	uxth	r2, r2
 800540e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f00b fd4e 	bl	8010eb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005418:	e026      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00f      	beq.n	8005444 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005436:	b292      	uxth	r2, r2
 8005438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f00b fd0c 	bl	8010e5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005442:	e011      	b.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005460:	b292      	uxth	r2, r2
 8005462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005466:	bf00      	nop
  }
}
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_PCD_SetAddress+0x1a>
 8005484:	2302      	movs	r3, #2
 8005486:	e013      	b.n	80054b0 <HAL_PCD_SetAddress+0x42>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f007 f91b 	bl	800c6dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	70fb      	strb	r3, [r7, #3]
 80054ca:	460b      	mov	r3, r1
 80054cc:	803b      	strh	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da0e      	bge.n	80054fc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	705a      	strb	r2, [r3, #1]
 80054fa:	e00e      	b.n	800551a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 0207 	and.w	r2, r3, #7
 8005502:	4613      	mov	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005526:	883a      	ldrh	r2, [r7, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	78ba      	ldrb	r2, [r7, #2]
 8005530:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005532:	78bb      	ldrb	r3, [r7, #2]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d102      	bne.n	800553e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_PCD_EP_Open+0x94>
 8005548:	2302      	movs	r3, #2
 800554a:	e00e      	b.n	800556a <HAL_PCD_EP_Open+0xb2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68f9      	ldr	r1, [r7, #12]
 800555a:	4618      	mov	r0, r3
 800555c:	f004 fe64 	bl	800a228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005568:	7afb      	ldrb	r3, [r7, #11]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800557e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da0e      	bge.n	80055a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	705a      	strb	r2, [r3, #1]
 80055a2:	e00e      	b.n	80055c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	f003 0207 	and.w	r2, r3, #7
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_PCD_EP_Close+0x6a>
 80055d8:	2302      	movs	r3, #2
 80055da:	e00e      	b.n	80055fa <HAL_PCD_EP_Close+0x88>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f005 f9dc 	bl	800a9a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	460b      	mov	r3, r1
 8005610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	f003 0207 	and.w	r2, r3, #7
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2200      	movs	r2, #0
 800563a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005642:	7afb      	ldrb	r3, [r7, #11]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	b2da      	uxtb	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	4618      	mov	r0, r3
 8005656:	f005 fb93 	bl	800ad80 <USB_EPStartXfer>

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	460b      	mov	r3, r1
 8005672:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005674:	7afb      	ldrb	r3, [r7, #11]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2201      	movs	r2, #1
 80056ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6979      	ldr	r1, [r7, #20]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f005 fb5c 	bl	800ad80 <USB_EPStartXfer>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	f003 0207 	and.w	r2, r3, #7
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d901      	bls.n	80056f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e04c      	b.n	800578a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da0e      	bge.n	8005716 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	705a      	strb	r2, [r3, #1]
 8005714:	e00c      	b.n	8005730 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4413      	add	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_PCD_EP_SetStall+0x7e>
 800574c:	2302      	movs	r3, #2
 800574e:	e01c      	b.n	800578a <HAL_PCD_EP_SetStall+0xb8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	4618      	mov	r0, r3
 8005760:	f006 febf 	bl	800c4e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f006 ffe4 	bl	800c748 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d901      	bls.n	80057b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e040      	b.n	8005832 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	da0e      	bge.n	80057d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4413      	add	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	705a      	strb	r2, [r3, #1]
 80057d4:	e00e      	b.n	80057f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 0207 	and.w	r2, r3, #7
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_PCD_EP_ClrStall+0x82>
 8005810:	2302      	movs	r3, #2
 8005812:	e00e      	b.n	8005832 <HAL_PCD_EP_ClrStall+0xa0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68f9      	ldr	r1, [r7, #12]
 8005822:	4618      	mov	r0, r3
 8005824:	f006 fead 	bl	800c582 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b096      	sub	sp, #88	; 0x58
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005842:	e3bf      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800584c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005850:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800585e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 8179 	bne.w	8005b5a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	2b00      	cmp	r3, #0
 8005872:	d152      	bne.n	800591a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	81fb      	strh	r3, [r7, #14]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	89fb      	ldrh	r3, [r7, #14]
 800588c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3328      	adds	r3, #40	; 0x28
 800589c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	3302      	adds	r3, #2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80058ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	441a      	add	r2, r3
 80058d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80058d8:	2100      	movs	r1, #0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f00b faa3 	bl	8010e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 836b 	beq.w	8005fc4 <PCD_EP_ISR_Handler+0x78a>
 80058ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 8366 	bne.w	8005fc4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005904:	b2da      	uxtb	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b292      	uxth	r2, r2
 800590c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005918:	e354      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005920:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800592c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005934:	2b00      	cmp	r3, #0
 8005936:	d034      	beq.n	80059a2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	3306      	adds	r3, #6
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005962:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800596e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005970:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005974:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005976:	b29b      	uxth	r3, r3
 8005978:	f006 ff36 	bl	800c7e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29a      	uxth	r2, r3
 8005984:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005988:	4013      	ands	r3, r2
 800598a:	823b      	strh	r3, [r7, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	8a3a      	ldrh	r2, [r7, #16]
 8005992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005996:	b292      	uxth	r2, r2
 8005998:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f00b fa16 	bl	8010dcc <HAL_PCD_SetupStageCallback>
 80059a0:	e310      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80059a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f280 830c 	bge.w	8005fc4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80059b8:	4013      	ands	r3, r2
 80059ba:	83fb      	strh	r3, [r7, #30]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	8bfa      	ldrh	r2, [r7, #30]
 80059c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059c6:	b292      	uxth	r2, r2
 80059c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	3306      	adds	r3, #6
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <PCD_EP_ISR_Handler+0x1f8>
 80059fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d015      	beq.n	8005a32 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0c:	6959      	ldr	r1, [r3, #20]
 8005a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a10:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a14:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f006 fee6 	bl	800c7e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	441a      	add	r2, r3
 8005a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a28:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f00b f9df 	bl	8010df0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005a3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 82bd 	bne.w	8005fc4 <PCD_EP_ISR_Handler+0x78a>
 8005a4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a56:	f000 82b5 	beq.w	8005fc4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	4413      	add	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a90:	d91d      	bls.n	8005ace <PCD_EP_ISR_Handler+0x294>
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <PCD_EP_ISR_Handler+0x272>
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	029b      	lsls	r3, r3, #10
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e026      	b.n	8005b1c <PCD_EP_ISR_Handler+0x2e2>
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <PCD_EP_ISR_Handler+0x2b2>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e017      	b.n	8005b1c <PCD_EP_ISR_Handler+0x2e2>
 8005aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	647b      	str	r3, [r7, #68]	; 0x44
 8005af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <PCD_EP_ISR_Handler+0x2cc>
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b02:	3301      	adds	r3, #1
 8005b04:	647b      	str	r3, [r7, #68]	; 0x44
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	827b      	strh	r3, [r7, #18]
 8005b2e:	8a7b      	ldrh	r3, [r7, #18]
 8005b30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b34:	827b      	strh	r3, [r7, #18]
 8005b36:	8a7b      	ldrh	r3, [r7, #18]
 8005b38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b3c:	827b      	strh	r3, [r7, #18]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	8a7b      	ldrh	r3, [r7, #18]
 8005b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	8013      	strh	r3, [r2, #0]
 8005b58:	e234      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005b6e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f280 80fc 	bge.w	8005d70 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005b8e:	4013      	ands	r3, r2
 8005b90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005ba6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005baa:	b292      	uxth	r2, r2
 8005bac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005bae:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc6:	7b1b      	ldrb	r3, [r3, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d125      	bne.n	8005c18 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	3306      	adds	r3, #6
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8092 	beq.w	8005d26 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c08:	6959      	ldr	r1, [r3, #20]
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0c:	88da      	ldrh	r2, [r3, #6]
 8005c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c12:	f006 fde9 	bl	800c7e8 <USB_ReadPMA>
 8005c16:	e086      	b.n	8005d26 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1a:	78db      	ldrb	r3, [r3, #3]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d10a      	bne.n	8005c36 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005c20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c24:	461a      	mov	r2, r3
 8005c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9d9 	bl	8005fe0 <HAL_PCD_EP_DB_Receive>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005c34:	e077      	b.n	8005d26 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d024      	beq.n	8005cde <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3302      	adds	r3, #2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cbc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005cc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d02e      	beq.n	8005d26 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cce:	6959      	ldr	r1, [r3, #20]
 8005cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd2:	891a      	ldrh	r2, [r3, #8]
 8005cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cd8:	f006 fd86 	bl	800c7e8 <USB_ReadPMA>
 8005cdc:	e023      	b.n	8005d26 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3306      	adds	r3, #6
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d06:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005d0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1c:	895a      	ldrh	r2, [r3, #10]
 8005d1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d22:	f006 fd61 	bl	800c7e8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d2e:	441a      	add	r2, r3
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d36:	695a      	ldr	r2, [r3, #20]
 8005d38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d3c:	441a      	add	r2, r3
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <PCD_EP_ISR_Handler+0x51c>
 8005d4a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d206      	bcs.n	8005d64 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f00b f847 	bl	8010df0 <HAL_PCD_DataOutStageCallback>
 8005d62:	e005      	b.n	8005d70 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f005 f808 	bl	800ad80 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005d70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8123 	beq.w	8005fc4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8005d7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd0:	78db      	ldrb	r3, [r3, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	f040 80a2 	bne.w	8005f1c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8005dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dda:	2200      	movs	r2, #0
 8005ddc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de0:	7b1b      	ldrb	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8093 	beq.w	8005f0e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005de8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d046      	beq.n	8005e82 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d126      	bne.n	8005e4a <PCD_EP_ISR_Handler+0x610>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	4413      	add	r3, r2
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	011a      	lsls	r2, r3, #4
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e22:	623b      	str	r3, [r7, #32]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e061      	b.n	8005f0e <PCD_EP_ISR_Handler+0x6d4>
 8005e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d15d      	bne.n	8005f0e <PCD_EP_ISR_Handler+0x6d4>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	4413      	add	r3, r2
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	011a      	lsls	r2, r3, #4
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	4413      	add	r3, r2
 8005e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	e045      	b.n	8005f0e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d126      	bne.n	8005ede <PCD_EP_ISR_Handler+0x6a4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	4413      	add	r3, r2
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	011a      	lsls	r2, r3, #4
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e017      	b.n	8005f0e <PCD_EP_ISR_Handler+0x6d4>
 8005ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d113      	bne.n	8005f0e <PCD_EP_ISR_Handler+0x6d4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	4413      	add	r3, r2
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	011a      	lsls	r2, r3, #4
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	4413      	add	r3, r2
 8005f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f00a ff86 	bl	8010e26 <HAL_PCD_DataInStageCallback>
 8005f1a:	e053      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005f1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d146      	bne.n	8005fb6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	699a      	ldr	r2, [r3, #24]
 8005f58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d907      	bls.n	8005f70 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8005f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	619a      	str	r2, [r3, #24]
 8005f6e:	e002      	b.n	8005f76 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	2200      	movs	r2, #0
 8005f74:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f00a ff4e 	bl	8010e26 <HAL_PCD_DataInStageCallback>
 8005f8a:	e01b      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f94:	441a      	add	r2, r3
 8005f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f98:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fa2:	441a      	add	r2, r3
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f004 fee6 	bl	800ad80 <USB_EPStartXfer>
 8005fb4:	e006      	b.n	8005fc4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005fb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f91b 	bl	80061fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	b21b      	sxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f6ff ac37 	blt.w	8005844 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3758      	adds	r7, #88	; 0x58
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d07e      	beq.n	80060f6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	3302      	adds	r3, #2
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006020:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	8b7b      	ldrh	r3, [r7, #26]
 8006028:	429a      	cmp	r2, r3
 800602a:	d306      	bcc.n	800603a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	8b7b      	ldrh	r3, [r7, #26]
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	619a      	str	r2, [r3, #24]
 8006038:	e002      	b.n	8006040 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d123      	bne.n	8006090 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	833b      	strh	r3, [r7, #24]
 8006064:	8b3b      	ldrh	r3, [r7, #24]
 8006066:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800606a:	833b      	strh	r3, [r7, #24]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	8b3b      	ldrh	r3, [r7, #24]
 800607c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608c:	b29b      	uxth	r3, r3
 800608e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01f      	beq.n	80060da <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	82fb      	strh	r3, [r7, #22]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8afb      	ldrh	r3, [r7, #22]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80060da:	8b7b      	ldrh	r3, [r7, #26]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8087 	beq.w	80061f0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6959      	ldr	r1, [r3, #20]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	891a      	ldrh	r2, [r3, #8]
 80060ee:	8b7b      	ldrh	r3, [r7, #26]
 80060f0:	f006 fb7a 	bl	800c7e8 <USB_ReadPMA>
 80060f4:	e07c      	b.n	80061f0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4413      	add	r3, r2
 800610a:	3306      	adds	r3, #6
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800611e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	699a      	ldr	r2, [r3, #24]
 8006124:	8b7b      	ldrh	r3, [r7, #26]
 8006126:	429a      	cmp	r2, r3
 8006128:	d306      	bcc.n	8006138 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	8b7b      	ldrh	r3, [r7, #26]
 8006130:	1ad2      	subs	r2, r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	619a      	str	r2, [r3, #24]
 8006136:	e002      	b.n	800613e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d123      	bne.n	800618e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	83fb      	strh	r3, [r7, #30]
 8006162:	8bfb      	ldrh	r3, [r7, #30]
 8006164:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006168:	83fb      	strh	r3, [r7, #30]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	8bfb      	ldrh	r3, [r7, #30]
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11f      	bne.n	80061d8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	83bb      	strh	r3, [r7, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	8bbb      	ldrh	r3, [r7, #28]
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80061d8:	8b7b      	ldrh	r3, [r7, #26]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6959      	ldr	r1, [r3, #20]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	895a      	ldrh	r2, [r3, #10]
 80061ea:	8b7b      	ldrh	r3, [r7, #26]
 80061ec:	f006 fafc 	bl	800c7e8 <USB_ReadPMA>
    }
  }

  return count;
 80061f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b0a4      	sub	sp, #144	; 0x90
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	4613      	mov	r3, r2
 8006206:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 81dd 	beq.w	80065ce <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800621c:	b29b      	uxth	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	4413      	add	r3, r2
 8006228:	3302      	adds	r3, #2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006248:	429a      	cmp	r2, r3
 800624a:	d907      	bls.n	800625c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	619a      	str	r2, [r3, #24]
 800625a:	e002      	b.n	8006262 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f040 80b9 	bne.w	80063de <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d126      	bne.n	80062c2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	4413      	add	r3, r2
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	4413      	add	r3, r2
 8006296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	e01a      	b.n	80062f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d116      	bne.n	80062f8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	4413      	add	r3, r2
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	011a      	lsls	r2, r3, #4
 80062e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062f0:	633b      	str	r3, [r7, #48]	; 0x30
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d126      	bne.n	8006354 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	011a      	lsls	r2, r3, #4
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	4413      	add	r3, r2
 8006328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006338:	b29a      	uxth	r2, r3
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e017      	b.n	8006384 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d113      	bne.n	8006384 <HAL_PCD_EP_DB_Transmit+0x18a>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	4413      	add	r3, r2
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	011a      	lsls	r2, r3, #4
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	4413      	add	r3, r2
 8006378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2200      	movs	r2, #0
 8006382:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	4619      	mov	r1, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f00a fd4b 	bl	8010e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 82fc 	beq.w	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	82fb      	strh	r3, [r7, #22]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	441a      	add	r2, r3
 80063c6:	8afb      	ldrh	r3, [r7, #22]
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]
 80063dc:	e2da      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006432:	2b01      	cmp	r3, #1
 8006434:	f040 82ae 	bne.w	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006440:	441a      	add	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	69da      	ldr	r2, [r3, #28]
 800644a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800644e:	441a      	add	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	d30b      	bcc.n	8006478 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	621a      	str	r2, [r3, #32]
 8006476:	e017      	b.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006480:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006490:	e00a      	b.n	80064a8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d165      	bne.n	800657c <HAL_PCD_EP_DB_Transmit+0x382>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064be:	b29b      	uxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c4:	4413      	add	r3, r2
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	011a      	lsls	r2, r3, #4
 80064ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ec:	2b3e      	cmp	r3, #62	; 0x3e
 80064ee:	d91d      	bls.n	800652c <HAL_PCD_EP_DB_Transmit+0x332>
 80064f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <HAL_PCD_EP_DB_Transmit+0x310>
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	3b01      	subs	r3, #1
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29a      	uxth	r2, r3
 8006510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006512:	b29b      	uxth	r3, r3
 8006514:	029b      	lsls	r3, r3, #10
 8006516:	b29b      	uxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006524:	b29a      	uxth	r2, r3
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e044      	b.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800652c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <HAL_PCD_EP_DB_Transmit+0x350>
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006542:	b29a      	uxth	r2, r3
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e035      	b.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48
 8006552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <HAL_PCD_EP_DB_Transmit+0x36a>
 800655e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006560:	3301      	adds	r3, #1
 8006562:	64bb      	str	r3, [r7, #72]	; 0x48
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29b      	uxth	r3, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	b29a      	uxth	r2, r3
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e01c      	b.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d118      	bne.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	647b      	str	r3, [r7, #68]	; 0x44
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006592:	b29b      	uxth	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006598:	4413      	add	r3, r2
 800659a:	647b      	str	r3, [r7, #68]	; 0x44
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	011a      	lsls	r2, r3, #4
 80065a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065aa:	643b      	str	r3, [r7, #64]	; 0x40
 80065ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6959      	ldr	r1, [r3, #20]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	891a      	ldrh	r2, [r3, #8]
 80065c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f006 f8c9 	bl	800c75e <USB_WritePMA>
 80065cc:	e1e2      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	3306      	adds	r3, #6
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006602:	429a      	cmp	r2, r3
 8006604:	d307      	bcc.n	8006616 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	619a      	str	r2, [r3, #24]
 8006614:	e002      	b.n	800661c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 80c0 	bne.w	80067a6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d126      	bne.n	800667c <HAL_PCD_EP_DB_Transmit+0x482>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006642:	4413      	add	r3, r2
 8006644:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	011a      	lsls	r2, r3, #4
 800664c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800664e:	4413      	add	r3, r2
 8006650:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006654:	67bb      	str	r3, [r7, #120]	; 0x78
 8006656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006660:	b29a      	uxth	r2, r3
 8006662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e01a      	b.n	80066b2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d116      	bne.n	80066b2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	667b      	str	r3, [r7, #100]	; 0x64
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006698:	4413      	add	r3, r2
 800669a:	667b      	str	r3, [r7, #100]	; 0x64
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066aa:	663b      	str	r3, [r7, #96]	; 0x60
 80066ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ae:	2200      	movs	r2, #0
 80066b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	677b      	str	r3, [r7, #116]	; 0x74
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d12b      	bne.n	8006718 <HAL_PCD_EP_DB_Transmit+0x51e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d4:	4413      	add	r3, r2
 80066d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	011a      	lsls	r2, r3, #4
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	4413      	add	r3, r2
 80066e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e017      	b.n	8006748 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d113      	bne.n	8006748 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672e:	4413      	add	r3, r2
 8006730:	677b      	str	r3, [r7, #116]	; 0x74
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	011a      	lsls	r2, r3, #4
 8006738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800673a:	4413      	add	r3, r2
 800673c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006740:	673b      	str	r3, [r7, #112]	; 0x70
 8006742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006744:	2200      	movs	r2, #0
 8006746:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f00a fb69 	bl	8010e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 811a 	bne.w	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]
 80067a4:	e0f6      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d121      	bne.n	80067f4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	f040 80ca 	bne.w	8006994 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006808:	441a      	add	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006816:	441a      	add	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d30b      	bcc.n	8006840 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	621a      	str	r2, [r3, #32]
 800683e:	e017      	b.n	8006870 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d108      	bne.n	800685a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006848:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800684c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006858:	e00a      	b.n	8006870 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	657b      	str	r3, [r7, #84]	; 0x54
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d165      	bne.n	800694a <HAL_PCD_EP_DB_Transmit+0x750>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006892:	4413      	add	r3, r2
 8006894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	011a      	lsls	r2, r3, #4
 800689c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800689e:	4413      	add	r3, r2
 80068a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80068a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ba:	2b3e      	cmp	r3, #62	; 0x3e
 80068bc:	d91d      	bls.n	80068fa <HAL_PCD_EP_DB_Transmit+0x700>
 80068be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80068d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068d4:	3b01      	subs	r3, #1
 80068d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	029b      	lsls	r3, r3, #10
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4313      	orrs	r3, r2
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e041      	b.n	800697e <HAL_PCD_EP_DB_Transmit+0x784>
 80068fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006910:	b29a      	uxth	r2, r3
 8006912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	e032      	b.n	800697e <HAL_PCD_EP_DB_Transmit+0x784>
 8006918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_PCD_EP_DB_Transmit+0x738>
 800692c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800692e:	3301      	adds	r3, #1
 8006930:	66bb      	str	r3, [r7, #104]	; 0x68
 8006932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29a      	uxth	r2, r3
 8006938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800693a:	b29b      	uxth	r3, r3
 800693c:	029b      	lsls	r3, r3, #10
 800693e:	b29b      	uxth	r3, r3
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e019      	b.n	800697e <HAL_PCD_EP_DB_Transmit+0x784>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d115      	bne.n	800697e <HAL_PCD_EP_DB_Transmit+0x784>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006960:	4413      	add	r3, r2
 8006962:	657b      	str	r3, [r7, #84]	; 0x54
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	011a      	lsls	r2, r3, #4
 800696a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696c:	4413      	add	r3, r2
 800696e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006972:	653b      	str	r3, [r7, #80]	; 0x50
 8006974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006978:	b29a      	uxth	r2, r3
 800697a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6959      	ldr	r1, [r3, #20]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	895a      	ldrh	r2, [r3, #10]
 800698a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800698e:	b29b      	uxth	r3, r3
 8006990:	f005 fee5 	bl	800c75e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ae:	82bb      	strh	r3, [r7, #20]
 80069b0:	8abb      	ldrh	r3, [r7, #20]
 80069b2:	f083 0310 	eor.w	r3, r3, #16
 80069b6:	82bb      	strh	r3, [r7, #20]
 80069b8:	8abb      	ldrh	r3, [r7, #20]
 80069ba:	f083 0320 	eor.w	r3, r3, #32
 80069be:	82bb      	strh	r3, [r7, #20]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	8abb      	ldrh	r3, [r7, #20]
 80069d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3790      	adds	r7, #144	; 0x90
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b087      	sub	sp, #28
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	607b      	str	r3, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	817b      	strh	r3, [r7, #10]
 80069fc:	4613      	mov	r3, r2
 80069fe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006a00:	897b      	ldrh	r3, [r7, #10]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a0c:	897b      	ldrh	r3, [r7, #10]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4413      	add	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e009      	b.n	8006a38 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a24:	897a      	ldrh	r2, [r7, #10]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006a38:	893b      	ldrh	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d107      	bne.n	8006a4e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2200      	movs	r2, #0
 8006a42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	80da      	strh	r2, [r3, #6]
 8006a4c:	e00b      	b.n	8006a66 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2201      	movs	r2, #1
 8006a52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	0c1b      	lsrs	r3, r3, #16
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
	...

08006a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e272      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8087 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a94:	4b92      	ldr	r3, [pc, #584]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d00c      	beq.n	8006aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006aa0:	4b8f      	ldr	r3, [pc, #572]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d112      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x5e>
 8006aac:	4b8c      	ldr	r3, [pc, #560]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d10b      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aba:	4b89      	ldr	r3, [pc, #548]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d06c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x12c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d168      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e24c      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x76>
 8006adc:	4b80      	ldr	r3, [pc, #512]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a7f      	ldr	r2, [pc, #508]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e02e      	b.n	8006b48 <HAL_RCC_OscConfig+0xd4>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x98>
 8006af2:	4b7b      	ldr	r3, [pc, #492]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7a      	ldr	r2, [pc, #488]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	4b78      	ldr	r3, [pc, #480]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a77      	ldr	r2, [pc, #476]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCC_OscConfig+0xd4>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0xbc>
 8006b16:	4b72      	ldr	r3, [pc, #456]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a71      	ldr	r2, [pc, #452]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b6f      	ldr	r3, [pc, #444]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6e      	ldr	r2, [pc, #440]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0xd4>
 8006b30:	4b6b      	ldr	r3, [pc, #428]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6a      	ldr	r2, [pc, #424]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b68      	ldr	r3, [pc, #416]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a67      	ldr	r2, [pc, #412]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d013      	beq.n	8006b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b50:	f7fc fc3a 	bl	80033c8 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fc fc36 	bl	80033c8 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	; 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e200      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b5d      	ldr	r3, [pc, #372]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0xe4>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b78:	f7fc fc26 	bl	80033c8 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fc fc22 	bl	80033c8 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e1ec      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	4b53      	ldr	r3, [pc, #332]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x10c>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d063      	beq.n	8006c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bae:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006bba:	4b49      	ldr	r3, [pc, #292]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x18c>
 8006bc6:	4b46      	ldr	r3, [pc, #280]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd2:	4b43      	ldr	r3, [pc, #268]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCC_OscConfig+0x176>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e1c0      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bea:	4b3d      	ldr	r3, [pc, #244]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4939      	ldr	r1, [pc, #228]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	e03a      	b.n	8006c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c08:	4b36      	ldr	r3, [pc, #216]	; (8006ce4 <HAL_RCC_OscConfig+0x270>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0e:	f7fc fbdb 	bl	80033c8 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fc fbd7 	bl	80033c8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e1a1      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c28:	4b2d      	ldr	r3, [pc, #180]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b2a      	ldr	r3, [pc, #168]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4927      	ldr	r1, [pc, #156]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	600b      	str	r3, [r1, #0]
 8006c48:	e015      	b.n	8006c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4a:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <HAL_RCC_OscConfig+0x270>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fc fbba 	bl	80033c8 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c58:	f7fc fbb6 	bl	80033c8 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e180      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d03a      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8a:	4b17      	ldr	r3, [pc, #92]	; (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c90:	f7fc fb9a 	bl	80033c8 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fc fb96 	bl	80033c8 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e160      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <HAL_RCC_OscConfig+0x26c>)
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	f000 faba 	bl	8007230 <RCC_Delay>
 8006cbc:	e01c      	b.n	8006cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc4:	f7fc fb80 	bl	80033c8 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cca:	e00f      	b.n	8006cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ccc:	f7fc fb7c 	bl	80033c8 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d908      	bls.n	8006cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e146      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
 8006cde:	bf00      	nop
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	42420000 	.word	0x42420000
 8006ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cec:	4b92      	ldr	r3, [pc, #584]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e9      	bne.n	8006ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80a6 	beq.w	8006e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d0a:	4b8b      	ldr	r3, [pc, #556]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10d      	bne.n	8006d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d16:	4b88      	ldr	r3, [pc, #544]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	4a87      	ldr	r2, [pc, #540]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d20:	61d3      	str	r3, [r2, #28]
 8006d22:	4b85      	ldr	r3, [pc, #532]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2a:	60bb      	str	r3, [r7, #8]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d32:	4b82      	ldr	r3, [pc, #520]	; (8006f3c <HAL_RCC_OscConfig+0x4c8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d118      	bne.n	8006d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d3e:	4b7f      	ldr	r3, [pc, #508]	; (8006f3c <HAL_RCC_OscConfig+0x4c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7e      	ldr	r2, [pc, #504]	; (8006f3c <HAL_RCC_OscConfig+0x4c8>)
 8006d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4a:	f7fc fb3d 	bl	80033c8 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d52:	f7fc fb39 	bl	80033c8 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b64      	cmp	r3, #100	; 0x64
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e103      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	4b75      	ldr	r3, [pc, #468]	; (8006f3c <HAL_RCC_OscConfig+0x4c8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d106      	bne.n	8006d86 <HAL_RCC_OscConfig+0x312>
 8006d78:	4b6f      	ldr	r3, [pc, #444]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	4a6e      	ldr	r2, [pc, #440]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6213      	str	r3, [r2, #32]
 8006d84:	e02d      	b.n	8006de2 <HAL_RCC_OscConfig+0x36e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCC_OscConfig+0x334>
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	4a69      	ldr	r2, [pc, #420]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	6213      	str	r3, [r2, #32]
 8006d9a:	4b67      	ldr	r3, [pc, #412]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	4a66      	ldr	r2, [pc, #408]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	6213      	str	r3, [r2, #32]
 8006da6:	e01c      	b.n	8006de2 <HAL_RCC_OscConfig+0x36e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b05      	cmp	r3, #5
 8006dae:	d10c      	bne.n	8006dca <HAL_RCC_OscConfig+0x356>
 8006db0:	4b61      	ldr	r3, [pc, #388]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	4a60      	ldr	r2, [pc, #384]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006db6:	f043 0304 	orr.w	r3, r3, #4
 8006dba:	6213      	str	r3, [r2, #32]
 8006dbc:	4b5e      	ldr	r3, [pc, #376]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	4a5d      	ldr	r2, [pc, #372]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6213      	str	r3, [r2, #32]
 8006dc8:	e00b      	b.n	8006de2 <HAL_RCC_OscConfig+0x36e>
 8006dca:	4b5b      	ldr	r3, [pc, #364]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	4a5a      	ldr	r2, [pc, #360]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	6213      	str	r3, [r2, #32]
 8006dd6:	4b58      	ldr	r3, [pc, #352]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	4a57      	ldr	r2, [pc, #348]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006ddc:	f023 0304 	bic.w	r3, r3, #4
 8006de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d015      	beq.n	8006e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dea:	f7fc faed 	bl	80033c8 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df0:	e00a      	b.n	8006e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df2:	f7fc fae9 	bl	80033c8 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e0b1      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e08:	4b4b      	ldr	r3, [pc, #300]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0ee      	beq.n	8006df2 <HAL_RCC_OscConfig+0x37e>
 8006e14:	e014      	b.n	8006e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e16:	f7fc fad7 	bl	80033c8 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1c:	e00a      	b.n	8006e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1e:	f7fc fad3 	bl	80033c8 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e09b      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e34:	4b40      	ldr	r3, [pc, #256]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ee      	bne.n	8006e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d105      	bne.n	8006e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e46:	4b3c      	ldr	r3, [pc, #240]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	4a3b      	ldr	r2, [pc, #236]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8087 	beq.w	8006f6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e5c:	4b36      	ldr	r3, [pc, #216]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f003 030c 	and.w	r3, r3, #12
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d061      	beq.n	8006f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d146      	bne.n	8006efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e70:	4b33      	ldr	r3, [pc, #204]	; (8006f40 <HAL_RCC_OscConfig+0x4cc>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e76:	f7fc faa7 	bl	80033c8 <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7e:	f7fc faa3 	bl	80033c8 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e06d      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e90:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f0      	bne.n	8006e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d108      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ea6:	4b24      	ldr	r3, [pc, #144]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	4921      	ldr	r1, [pc, #132]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb8:	4b1f      	ldr	r3, [pc, #124]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a19      	ldr	r1, [r3, #32]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	491b      	ldr	r1, [pc, #108]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x4cc>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed6:	f7fc fa77 	bl	80033c8 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fc fa73 	bl	80033c8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e03d      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ef0:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f0      	beq.n	8006ede <HAL_RCC_OscConfig+0x46a>
 8006efc:	e035      	b.n	8006f6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efe:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <HAL_RCC_OscConfig+0x4cc>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fc fa60 	bl	80033c8 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fc fa5c 	bl	80033c8 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e026      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <HAL_RCC_OscConfig+0x4c4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f0      	bne.n	8006f0c <HAL_RCC_OscConfig+0x498>
 8006f2a:	e01e      	b.n	8006f6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d107      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e019      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	40007000 	.word	0x40007000
 8006f40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <HAL_RCC_OscConfig+0x500>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d106      	bne.n	8006f66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d001      	beq.n	8006f6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40021000 	.word	0x40021000

08006f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0d0      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f8c:	4b6a      	ldr	r3, [pc, #424]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d910      	bls.n	8006fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f9a:	4b67      	ldr	r3, [pc, #412]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f023 0207 	bic.w	r2, r3, #7
 8006fa2:	4965      	ldr	r1, [pc, #404]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	4b63      	ldr	r3, [pc, #396]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0b8      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d020      	beq.n	800700a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd4:	4b59      	ldr	r3, [pc, #356]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4a58      	ldr	r2, [pc, #352]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8006fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	4a52      	ldr	r2, [pc, #328]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8006ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff8:	4b50      	ldr	r3, [pc, #320]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	494d      	ldr	r1, [pc, #308]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007006:	4313      	orrs	r3, r2
 8007008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d040      	beq.n	8007098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701e:	4b47      	ldr	r3, [pc, #284]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d115      	bne.n	8007056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e07f      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e073      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e06b      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007056:	4b39      	ldr	r3, [pc, #228]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f023 0203 	bic.w	r2, r3, #3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	4936      	ldr	r1, [pc, #216]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	4313      	orrs	r3, r2
 8007066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007068:	f7fc f9ae 	bl	80033c8 <HAL_GetTick>
 800706c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800706e:	e00a      	b.n	8007086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007070:	f7fc f9aa 	bl	80033c8 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f241 3288 	movw	r2, #5000	; 0x1388
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e053      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007086:	4b2d      	ldr	r3, [pc, #180]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f003 020c 	and.w	r2, r3, #12
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	429a      	cmp	r2, r3
 8007096:	d1eb      	bne.n	8007070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007098:	4b27      	ldr	r3, [pc, #156]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d210      	bcs.n	80070c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a6:	4b24      	ldr	r3, [pc, #144]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f023 0207 	bic.w	r2, r3, #7
 80070ae:	4922      	ldr	r1, [pc, #136]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <HAL_RCC_ClockConfig+0x1c0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d001      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e032      	b.n	800712e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	4916      	ldr	r1, [pc, #88]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	490e      	ldr	r1, [pc, #56]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 8007102:	4313      	orrs	r3, r2
 8007104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007106:	f000 f821 	bl	800714c <HAL_RCC_GetSysClockFreq>
 800710a:	4602      	mov	r2, r0
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <HAL_RCC_ClockConfig+0x1c4>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	490a      	ldr	r1, [pc, #40]	; (8007140 <HAL_RCC_ClockConfig+0x1c8>)
 8007118:	5ccb      	ldrb	r3, [r1, r3]
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	4a09      	ldr	r2, [pc, #36]	; (8007144 <HAL_RCC_ClockConfig+0x1cc>)
 8007120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCC_ClockConfig+0x1d0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fc f90c 	bl	8003344 <HAL_InitTick>

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40022000 	.word	0x40022000
 800713c:	40021000 	.word	0x40021000
 8007140:	0802d69c 	.word	0x0802d69c
 8007144:	20000010 	.word	0x20000010
 8007148:	20000014 	.word	0x20000014

0800714c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	2300      	movs	r3, #0
 8007158:	60bb      	str	r3, [r7, #8]
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	2300      	movs	r3, #0
 8007160:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007166:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 030c 	and.w	r3, r3, #12
 8007172:	2b04      	cmp	r3, #4
 8007174:	d002      	beq.n	800717c <HAL_RCC_GetSysClockFreq+0x30>
 8007176:	2b08      	cmp	r3, #8
 8007178:	d003      	beq.n	8007182 <HAL_RCC_GetSysClockFreq+0x36>
 800717a:	e027      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800717c:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800717e:	613b      	str	r3, [r7, #16]
      break;
 8007180:	e027      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	0c9b      	lsrs	r3, r3, #18
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800718c:	5cd3      	ldrb	r3, [r2, r3]
 800718e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800719a:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	0c5b      	lsrs	r3, r3, #17
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	4a11      	ldr	r2, [pc, #68]	; (80071ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80071a6:	5cd3      	ldrb	r3, [r2, r3]
 80071a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a0d      	ldr	r2, [pc, #52]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80071ae:	fb03 f202 	mul.w	r2, r3, r2
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e004      	b.n	80071c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	613b      	str	r3, [r7, #16]
      break;
 80071ca:	e002      	b.n	80071d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80071ce:	613b      	str	r3, [r7, #16]
      break;
 80071d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071d2:	693b      	ldr	r3, [r7, #16]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40021000 	.word	0x40021000
 80071e4:	007a1200 	.word	0x007a1200
 80071e8:	0802d6b4 	.word	0x0802d6b4
 80071ec:	0802d6c4 	.word	0x0802d6c4
 80071f0:	003d0900 	.word	0x003d0900

080071f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <HAL_RCC_GetHCLKFreq+0x10>)
 80071fa:	681b      	ldr	r3, [r3, #0]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr
 8007204:	20000010 	.word	0x20000010

08007208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800720c:	f7ff fff2 	bl	80071f4 <HAL_RCC_GetHCLKFreq>
 8007210:	4602      	mov	r2, r0
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	0a1b      	lsrs	r3, r3, #8
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	4903      	ldr	r1, [pc, #12]	; (800722c <HAL_RCC_GetPCLK1Freq+0x24>)
 800721e:	5ccb      	ldrb	r3, [r1, r3]
 8007220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007224:	4618      	mov	r0, r3
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40021000 	.word	0x40021000
 800722c:	0802d6ac 	.word	0x0802d6ac

08007230 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <RCC_Delay+0x34>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <RCC_Delay+0x38>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	0a5b      	lsrs	r3, r3, #9
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800724c:	bf00      	nop
  }
  while (Delay --);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1e5a      	subs	r2, r3, #1
 8007252:	60fa      	str	r2, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f9      	bne.n	800724c <RCC_Delay+0x1c>
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr
 8007264:	20000010 	.word	0x20000010
 8007268:	10624dd3 	.word	0x10624dd3

0800726c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d07d      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800728c:	4b4f      	ldr	r3, [pc, #316]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007298:	4b4c      	ldr	r3, [pc, #304]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	4a4b      	ldr	r2, [pc, #300]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a2:	61d3      	str	r3, [r2, #28]
 80072a4:	4b49      	ldr	r3, [pc, #292]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b4:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d118      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072c0:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a42      	ldr	r2, [pc, #264]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072cc:	f7fc f87c 	bl	80033c8 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d2:	e008      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d4:	f7fc f878 	bl	80033c8 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b64      	cmp	r3, #100	; 0x64
 80072e0:	d901      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e06d      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e6:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d02e      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	429a      	cmp	r2, r3
 800730e:	d027      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007310:	4b2e      	ldr	r3, [pc, #184]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800731a:	4b2e      	ldr	r3, [pc, #184]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007320:	4b2c      	ldr	r3, [pc, #176]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007326:	4a29      	ldr	r2, [pc, #164]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d014      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007336:	f7fc f847 	bl	80033c8 <HAL_GetTick>
 800733a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800733c:	e00a      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733e:	f7fc f843 	bl	80033c8 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f241 3288 	movw	r2, #5000	; 0x1388
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e036      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007354:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0ee      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007360:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4917      	ldr	r1, [pc, #92]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736e:	4313      	orrs	r3, r2
 8007370:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007372:	7dfb      	ldrb	r3, [r7, #23]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d105      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007378:	4b14      	ldr	r3, [pc, #80]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4a13      	ldr	r2, [pc, #76]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800737e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007382:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d008      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	490b      	ldr	r1, [pc, #44]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0310 	and.w	r3, r3, #16
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d008      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	4904      	ldr	r1, [pc, #16]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40007000 	.word	0x40007000
 80073d4:	42420440 	.word	0x42420440

080073d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e022      	b.n	8007430 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fb fd41 	bl	8002e84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f814 	bl	8007438 <HAL_SD_InitCard>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e00a      	b.n	8007430 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007438:	b5b0      	push	{r4, r5, r7, lr}
 800743a:	b08e      	sub	sp, #56	; 0x38
 800743c:	af04      	add	r7, sp, #16
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007440:	2300      	movs	r3, #0
 8007442:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007454:	2376      	movs	r3, #118	; 0x76
 8007456:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681d      	ldr	r5, [r3, #0]
 800745c:	466c      	mov	r4, sp
 800745e:	f107 0314 	add.w	r3, r7, #20
 8007462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007470:	4628      	mov	r0, r5
 8007472:	f002 f907 	bl	8009684 <SDIO_Init>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800747c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e04f      	b.n	8007528 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007488:	4b29      	ldr	r3, [pc, #164]	; (8007530 <HAL_SD_InitCard+0xf8>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f002 f93c 	bl	8009710 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007498:	4b25      	ldr	r3, [pc, #148]	; (8007530 <HAL_SD_InitCard+0xf8>)
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800749e:	2002      	movs	r0, #2
 80074a0:	f7fb ff9c 	bl	80033dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 ff03 	bl	80082b0 <SD_PowerON>
 80074aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e02e      	b.n	8007528 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fe22 	bl	8008114 <SD_InitCard>
 80074d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e01b      	b.n	8007528 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074f8:	4618      	mov	r0, r3
 80074fa:	f002 f995 	bl	8009828 <SDMMC_CmdBlockLength>
 80074fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a0a      	ldr	r2, [pc, #40]	; (8007534 <HAL_SD_InitCard+0xfc>)
 800750c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3728      	adds	r7, #40	; 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bdb0      	pop	{r4, r5, r7, pc}
 8007530:	423000a0 	.word	0x423000a0
 8007534:	004005ff 	.word	0x004005ff

08007538 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b092      	sub	sp, #72	; 0x48
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007546:	f7fb ff3f 	bl	80033c8 <HAL_GetTick>
 800754a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d107      	bne.n	800756a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e1bd      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b01      	cmp	r3, #1
 8007574:	f040 81b0 	bne.w	80078d8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800757e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	441a      	add	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007588:	429a      	cmp	r2, r3
 800758a:	d907      	bls.n	800759c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e1a4      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2203      	movs	r2, #3
 80075a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2200      	movs	r2, #0
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d002      	beq.n	80075ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	025b      	lsls	r3, r3, #9
 80075b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	025b      	lsls	r3, r3, #9
 80075c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80075c6:	2390      	movs	r3, #144	; 0x90
 80075c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80075ca:	2302      	movs	r3, #2
 80075cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80075d2:	2301      	movs	r3, #1
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f107 0214 	add.w	r2, r7, #20
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f002 f8f6 	bl	80097d2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d90a      	bls.n	8007602 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2202      	movs	r2, #2
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075f8:	4618      	mov	r0, r3
 80075fa:	f002 f959 	bl	80098b0 <SDMMC_CmdReadMultiBlock>
 80075fe:	6478      	str	r0, [r7, #68]	; 0x44
 8007600:	e009      	b.n	8007616 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800760e:	4618      	mov	r0, r3
 8007610:	f002 f92c 	bl	800986c <SDMMC_CmdReadSingleBlock>
 8007614:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007618:	2b00      	cmp	r3, #0
 800761a:	d012      	beq.n	8007642 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a7a      	ldr	r2, [pc, #488]	; (800780c <HAL_SD_ReadBlocks+0x2d4>)
 8007622:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800762a:	431a      	orrs	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e151      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007646:	e061      	b.n	800770c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d03c      	beq.n	80076d0 <HAL_SD_ReadBlocks+0x198>
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d039      	beq.n	80076d0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800765c:	2300      	movs	r3, #0
 800765e:	643b      	str	r3, [r7, #64]	; 0x40
 8007660:	e033      	b.n	80076ca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f002 f836 	bl	80096d8 <SDIO_ReadFIFO>
 800766c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	b2da      	uxtb	r2, r3
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	3301      	adds	r3, #1
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767e:	3b01      	subs	r3, #1
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	b2da      	uxtb	r2, r3
 8007688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768e:	3301      	adds	r3, #1
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	3b01      	subs	r3, #1
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	b2da      	uxtb	r2, r3
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	3301      	adds	r3, #1
 80076a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076aa:	3b01      	subs	r3, #1
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	0e1b      	lsrs	r3, r3, #24
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ba:	3301      	adds	r3, #1
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c0:	3b01      	subs	r3, #1
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80076c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c6:	3301      	adds	r3, #1
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076cc:	2b07      	cmp	r3, #7
 80076ce:	d9c8      	bls.n	8007662 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80076d0:	f7fb fe7a 	bl	80033c8 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076dc:	429a      	cmp	r2, r3
 80076de:	d902      	bls.n	80076e6 <HAL_SD_ReadBlocks+0x1ae>
 80076e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d112      	bne.n	800770c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a48      	ldr	r2, [pc, #288]	; (800780c <HAL_SD_ReadBlocks+0x2d4>)
 80076ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e0ec      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007712:	f240 332a 	movw	r3, #810	; 0x32a
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d095      	beq.n	8007648 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d022      	beq.n	8007770 <HAL_SD_ReadBlocks+0x238>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d91f      	bls.n	8007770 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007734:	2b03      	cmp	r3, #3
 8007736:	d01b      	beq.n	8007770 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4618      	mov	r0, r3
 800773e:	f002 f91d 	bl	800997c <SDMMC_CmdStopTransfer>
 8007742:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007746:	2b00      	cmp	r3, #0
 8007748:	d012      	beq.n	8007770 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2f      	ldr	r2, [pc, #188]	; (800780c <HAL_SD_ReadBlocks+0x2d4>)
 8007750:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007758:	431a      	orrs	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0ba      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d012      	beq.n	80077a4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a22      	ldr	r2, [pc, #136]	; (800780c <HAL_SD_ReadBlocks+0x2d4>)
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	f043 0208 	orr.w	r2, r3, #8
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e0a0      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d012      	beq.n	80077d8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <HAL_SD_ReadBlocks+0x2d4>)
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	f043 0202 	orr.w	r2, r3, #2
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e086      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d063      	beq.n	80078ae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a08      	ldr	r2, [pc, #32]	; (800780c <HAL_SD_ReadBlocks+0x2d4>)
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	f043 0220 	orr.w	r2, r3, #32
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e06c      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
 800780c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f001 ff5f 	bl	80096d8 <SDIO_ReadFIFO>
 800781a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	b2da      	uxtb	r2, r3
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007826:	3301      	adds	r3, #1
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800782a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782c:	3b01      	subs	r3, #1
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	b2da      	uxtb	r2, r3
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	3301      	adds	r3, #1
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007842:	3b01      	subs	r3, #1
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	b2da      	uxtb	r2, r3
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007852:	3301      	adds	r3, #1
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007858:	3b01      	subs	r3, #1
 800785a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	b2da      	uxtb	r2, r3
 8007862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007864:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007868:	3301      	adds	r3, #1
 800786a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800786c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786e:	3b01      	subs	r3, #1
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007872:	f7fb fda9 	bl	80033c8 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800787e:	429a      	cmp	r2, r3
 8007880:	d902      	bls.n	8007888 <HAL_SD_ReadBlocks+0x350>
 8007882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007884:	2b00      	cmp	r3, #0
 8007886:	d112      	bne.n	80078ae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a18      	ldr	r2, [pc, #96]	; (80078f0 <HAL_SD_ReadBlocks+0x3b8>)
 800788e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007894:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e01b      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <HAL_SD_ReadBlocks+0x38a>
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1a6      	bne.n	8007810 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80078ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e006      	b.n	80078e6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
  }
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3748      	adds	r7, #72	; 0x48
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	004005ff 	.word	0x004005ff

080078f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b092      	sub	sp, #72	; 0x48
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007902:	f7fb fd61 	bl	80033c8 <HAL_GetTick>
 8007906:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d107      	bne.n	8007926 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e166      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	f040 8159 	bne.w	8007be6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800793a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	441a      	add	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	429a      	cmp	r2, r3
 8007946:	d907      	bls.n	8007958 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e14d      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2203      	movs	r2, #3
 800795c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2200      	movs	r2, #0
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796c:	2b01      	cmp	r3, #1
 800796e:	d002      	beq.n	8007976 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	025b      	lsls	r3, r3, #9
 8007974:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007976:	f04f 33ff 	mov.w	r3, #4294967295
 800797a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	025b      	lsls	r3, r3, #9
 8007980:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007982:	2390      	movs	r3, #144	; 0x90
 8007984:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007986:	2300      	movs	r3, #0
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800798a:	2300      	movs	r3, #0
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800798e:	2301      	movs	r3, #1
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f107 0218 	add.w	r2, r7, #24
 800799a:	4611      	mov	r1, r2
 800799c:	4618      	mov	r0, r3
 800799e:	f001 ff18 	bl	80097d2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d90a      	bls.n	80079be <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 ffbf 	bl	8009938 <SDMMC_CmdWriteMultiBlock>
 80079ba:	6478      	str	r0, [r7, #68]	; 0x44
 80079bc:	e009      	b.n	80079d2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2210      	movs	r2, #16
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 ff92 	bl	80098f4 <SDMMC_CmdWriteSingleBlock>
 80079d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d012      	beq.n	80079fe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a87      	ldr	r2, [pc, #540]	; (8007bfc <HAL_SD_WriteBlocks+0x308>)
 80079de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e6:	431a      	orrs	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e0fa      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007a02:	e065      	b.n	8007ad0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d040      	beq.n	8007a94 <HAL_SD_WriteBlocks+0x1a0>
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d03d      	beq.n	8007a94 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a1c:	e037      	b.n	8007a8e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	3301      	adds	r3, #1
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	021a      	lsls	r2, r3, #8
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	3301      	adds	r3, #1
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a44:	3b01      	subs	r3, #1
 8007a46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	041a      	lsls	r2, r3, #16
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	3301      	adds	r3, #1
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	061a      	lsls	r2, r3, #24
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6e:	3301      	adds	r3, #1
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a74:	3b01      	subs	r3, #1
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f107 0214 	add.w	r2, r7, #20
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 fe34 	bl	80096f0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a90:	2b07      	cmp	r3, #7
 8007a92:	d9c4      	bls.n	8007a1e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007a94:	f7fb fc98 	bl	80033c8 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d902      	bls.n	8007aaa <HAL_SD_WriteBlocks+0x1b6>
 8007aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d112      	bne.n	8007ad0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a53      	ldr	r2, [pc, #332]	; (8007bfc <HAL_SD_WriteBlocks+0x308>)
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e091      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad6:	f240 331a 	movw	r3, #794	; 0x31a
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d091      	beq.n	8007a04 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d022      	beq.n	8007b34 <HAL_SD_WriteBlocks+0x240>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d91f      	bls.n	8007b34 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d01b      	beq.n	8007b34 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 ff3b 	bl	800997c <SDMMC_CmdStopTransfer>
 8007b06:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d012      	beq.n	8007b34 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a3a      	ldr	r2, [pc, #232]	; (8007bfc <HAL_SD_WriteBlocks+0x308>)
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e05f      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d012      	beq.n	8007b68 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2d      	ldr	r2, [pc, #180]	; (8007bfc <HAL_SD_WriteBlocks+0x308>)
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f043 0208 	orr.w	r2, r3, #8
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e045      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a20      	ldr	r2, [pc, #128]	; (8007bfc <HAL_SD_WriteBlocks+0x308>)
 8007b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e02b      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	f003 0310 	and.w	r3, r3, #16
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d012      	beq.n	8007bd0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <HAL_SD_WriteBlocks+0x308>)
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	f043 0210 	orr.w	r2, r3, #16
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e011      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e006      	b.n	8007bf4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3748      	adds	r7, #72	; 0x48
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	004005ff 	.word	0x004005ff

08007c00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c0e:	0f9b      	lsrs	r3, r3, #30
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c1a:	0e9b      	lsrs	r3, r3, #26
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2c:	0e1b      	lsrs	r3, r3, #24
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3e:	0c1b      	lsrs	r3, r3, #16
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c60:	0d1b      	lsrs	r3, r3, #20
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c7e:	0bdb      	lsrs	r3, r3, #15
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c90:	0b9b      	lsrs	r3, r3, #14
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ca2:	0b5b      	lsrs	r3, r3, #13
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cb4:	0b1b      	lsrs	r3, r3, #12
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d163      	bne.n	8007d98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd4:	009a      	lsls	r2, r3, #2
 8007cd6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007cda:	4013      	ands	r3, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ce0:	0f92      	lsrs	r2, r2, #30
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cec:	0edb      	lsrs	r3, r3, #27
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cfe:	0e1b      	lsrs	r3, r3, #24
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d10:	0d5b      	lsrs	r3, r3, #21
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d22:	0c9b      	lsrs	r3, r3, #18
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d34:	0bdb      	lsrs	r3, r3, #15
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	7e1b      	ldrb	r3, [r3, #24]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	3302      	adds	r3, #2
 8007d58:	2201      	movs	r2, #1
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d62:	fb03 f202 	mul.w	r2, r3, r2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	7a1b      	ldrb	r3, [r3, #8]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	2201      	movs	r2, #1
 8007d76:	409a      	lsls	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007d84:	0a52      	lsrs	r2, r2, #9
 8007d86:	fb03 f202 	mul.w	r2, r3, r2
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d94:	661a      	str	r2, [r3, #96]	; 0x60
 8007d96:	e031      	b.n	8007dfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d11d      	bne.n	8007ddc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da4:	041b      	lsls	r3, r3, #16
 8007da6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	431a      	orrs	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	029a      	lsls	r2, r3, #10
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	661a      	str	r2, [r3, #96]	; 0x60
 8007dda:	e00f      	b.n	8007dfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a58      	ldr	r2, [pc, #352]	; (8007f44 <HAL_SD_GetCardCSD+0x344>)
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e09d      	b.n	8007f38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e00:	0b9b      	lsrs	r3, r3, #14
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e12:	09db      	lsrs	r3, r3, #7
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	0fdb      	lsrs	r3, r3, #31
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e40:	0f5b      	lsrs	r3, r3, #29
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e52:	0e9b      	lsrs	r3, r3, #26
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	0d9b      	lsrs	r3, r3, #22
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e76:	0d5b      	lsrs	r3, r3, #21
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	0c1b      	lsrs	r3, r3, #16
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	0bdb      	lsrs	r3, r3, #15
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	0b9b      	lsrs	r3, r3, #14
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	0b5b      	lsrs	r3, r3, #13
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee2:	0b1b      	lsrs	r3, r3, #12
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef6:	0a9b      	lsrs	r3, r3, #10
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	004005ff 	.word	0x004005ff

08007f48 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr
	...

08007fa0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007fa0:	b5b0      	push	{r4, r5, r7, lr}
 8007fa2:	b08e      	sub	sp, #56	; 0x38
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d02e      	beq.n	800801e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc6:	d106      	bne.n	8007fd6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8007fd4:	e029      	b.n	800802a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fdc:	d10a      	bne.n	8007ff4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa1c 	bl	800841c <SD_WideBus_Enable>
 8007fe4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	431a      	orrs	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ff2:	e01a      	b.n	800802a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa59 	bl	80084b2 <SD_WideBus_Disable>
 8008000:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
 800800e:	e00c      	b.n	800802a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
 800801c:	e005      	b.n	800802a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008038:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008048:	e01f      	b.n	800808a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681d      	ldr	r5, [r3, #0]
 8008070:	466c      	mov	r4, sp
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800807a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008084:	4628      	mov	r0, r5
 8008086:	f001 fafd 	bl	8009684 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fbc8 	bl	8009828 <SDMMC_CmdBlockLength>
 8008098:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80080c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3728      	adds	r7, #40	; 0x28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bdb0      	pop	{r4, r5, r7, pc}
 80080ce:	bf00      	nop
 80080d0:	004005ff 	.word	0x004005ff

080080d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f970 	bl	80083cc <SD_SendStatus>
 80080ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d005      	beq.n	8008100 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	0a5b      	lsrs	r3, r3, #9
 8008104:	f003 030f 	and.w	r3, r3, #15
 8008108:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800810a:	693b      	ldr	r3, [r7, #16]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008114:	b5b0      	push	{r4, r5, r7, lr}
 8008116:	b094      	sub	sp, #80	; 0x50
 8008118:	af04      	add	r7, sp, #16
 800811a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800811c:	2301      	movs	r3, #1
 800811e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f001 fb00 	bl	800972a <SDIO_GetPowerState>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008130:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008134:	e0b8      	b.n	80082a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813a:	2b03      	cmp	r3, #3
 800813c:	d02f      	beq.n	800819e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fd24 	bl	8009b90 <SDMMC_CmdSendCID>
 8008148:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800814a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <SD_InitCard+0x40>
    {
      return errorstate;
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	e0a9      	b.n	80082a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fb27 	bl	80097ae <SDIO_GetResponse>
 8008160:	4602      	mov	r2, r0
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2104      	movs	r1, #4
 800816c:	4618      	mov	r0, r3
 800816e:	f001 fb1e 	bl	80097ae <SDIO_GetResponse>
 8008172:	4602      	mov	r2, r0
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2108      	movs	r1, #8
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fb15 	bl	80097ae <SDIO_GetResponse>
 8008184:	4602      	mov	r2, r0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	210c      	movs	r1, #12
 8008190:	4618      	mov	r0, r3
 8008192:	f001 fb0c 	bl	80097ae <SDIO_GetResponse>
 8008196:	4602      	mov	r2, r0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d00d      	beq.n	80081c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f107 020e 	add.w	r2, r7, #14
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 fd2a 	bl	8009c0a <SDMMC_CmdSetRelAdd>
 80081b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80081be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c0:	e072      	b.n	80082a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d036      	beq.n	8008238 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80081ca:	89fb      	ldrh	r3, [r7, #14]
 80081cc:	461a      	mov	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	041b      	lsls	r3, r3, #16
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f001 fcf4 	bl	8009bcc <SDMMC_CmdSendCSD>
 80081e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	e05b      	b.n	80082a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fad9 	bl	80097ae <SDIO_GetResponse>
 80081fc:	4602      	mov	r2, r0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2104      	movs	r1, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fad0 	bl	80097ae <SDIO_GetResponse>
 800820e:	4602      	mov	r2, r0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2108      	movs	r1, #8
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fac7 	bl	80097ae <SDIO_GetResponse>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	210c      	movs	r1, #12
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fabe 	bl	80097ae <SDIO_GetResponse>
 8008232:	4602      	mov	r2, r0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2104      	movs	r1, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f001 fab5 	bl	80097ae <SDIO_GetResponse>
 8008244:	4603      	mov	r3, r0
 8008246:	0d1a      	lsrs	r2, r3, #20
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800824c:	f107 0310 	add.w	r3, r7, #16
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fcd4 	bl	8007c00 <HAL_SD_GetCardCSD>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800825e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008262:	e021      	b.n	80082a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	2200      	movs	r2, #0
 8008270:	461c      	mov	r4, r3
 8008272:	4615      	mov	r5, r2
 8008274:	4622      	mov	r2, r4
 8008276:	462b      	mov	r3, r5
 8008278:	4608      	mov	r0, r1
 800827a:	f001 fba1 	bl	80099c0 <SDMMC_CmdSelDesel>
 800827e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <SD_InitCard+0x176>
  {
    return errorstate;
 8008286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008288:	e00e      	b.n	80082a8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681d      	ldr	r5, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	466c      	mov	r4, sp
 8008292:	f103 0210 	add.w	r2, r3, #16
 8008296:	ca07      	ldmia	r2, {r0, r1, r2}
 8008298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800829c:	3304      	adds	r3, #4
 800829e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082a0:	4628      	mov	r0, r5
 80082a2:	f001 f9ef 	bl	8009684 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3740      	adds	r7, #64	; 0x40
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bdb0      	pop	{r4, r5, r7, pc}

080082b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fb9c 	bl	8009a06 <SDMMC_CmdGoIdleState>
 80082ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <SD_PowerON+0x2a>
  {
    return errorstate;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	e072      	b.n	80083c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fbaf 	bl	8009a42 <SDMMC_CmdOperCond>
 80082e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00d      	beq.n	8008308 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fb85 	bl	8009a06 <SDMMC_CmdGoIdleState>
 80082fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e05b      	b.n	80083c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008312:	2b01      	cmp	r3, #1
 8008314:	d137      	bne.n	8008386 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2100      	movs	r1, #0
 800831c:	4618      	mov	r0, r3
 800831e:	f001 fbaf 	bl	8009a80 <SDMMC_CmdAppCommand>
 8008322:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d02d      	beq.n	8008386 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800832a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800832e:	e047      	b.n	80083c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fba2 	bl	8009a80 <SDMMC_CmdAppCommand>
 800833c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <SD_PowerON+0x98>
    {
      return errorstate;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	e03b      	b.n	80083c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	491e      	ldr	r1, [pc, #120]	; (80083c8 <SD_PowerON+0x118>)
 800834e:	4618      	mov	r0, r3
 8008350:	f001 fbb8 	bl	8009ac4 <SDMMC_CmdAppOperCommand>
 8008354:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800835c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008360:	e02e      	b.n	80083c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2100      	movs	r1, #0
 8008368:	4618      	mov	r0, r3
 800836a:	f001 fa20 	bl	80097ae <SDIO_GetResponse>
 800836e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	0fdb      	lsrs	r3, r3, #31
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <SD_PowerON+0xcc>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <SD_PowerON+0xce>
 800837c:	2300      	movs	r3, #0
 800837e:	613b      	str	r3, [r7, #16]

    count++;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3301      	adds	r3, #1
 8008384:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800838c:	4293      	cmp	r3, r2
 800838e:	d802      	bhi.n	8008396 <SD_PowerON+0xe6>
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0cc      	beq.n	8008330 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800839c:	4293      	cmp	r3, r2
 800839e:	d902      	bls.n	80083a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083a4:	e00c      	b.n	80083c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	645a      	str	r2, [r3, #68]	; 0x44
 80083b6:	e002      	b.n	80083be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	c1100000 	.word	0xc1100000

080083cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80083dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083e0:	e018      	b.n	8008414 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f001 fc2c 	bl	8009c4c <SDMMC_CmdSendStatus>
 80083f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <SD_SendStatus+0x34>
  {
    return errorstate;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	e009      	b.n	8008414 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f001 f9d1 	bl	80097ae <SDIO_GetResponse>
 800840c:	4602      	mov	r2, r0
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 f9bb 	bl	80097ae <SDIO_GetResponse>
 8008438:	4603      	mov	r3, r0
 800843a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800843e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008442:	d102      	bne.n	800844a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008448:	e02f      	b.n	80084aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f879 	bl	8008548 <SD_FindSCR>
 8008456:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	e023      	b.n	80084aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01c      	beq.n	80084a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	041b      	lsls	r3, r3, #16
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f001 fb01 	bl	8009a80 <SDMMC_CmdAppCommand>
 800847e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	e00f      	b.n	80084aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2102      	movs	r1, #2
 8008490:	4618      	mov	r0, r3
 8008492:	f001 fb3a 	bl	8009b0a <SDMMC_CmdBusWidth>
 8008496:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	e003      	b.n	80084aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e001      	b.n	80084aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80084ba:	2300      	movs	r3, #0
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f970 	bl	80097ae <SDIO_GetResponse>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084d8:	d102      	bne.n	80084e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084de:	e02f      	b.n	8008540 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f82e 	bl	8008548 <SD_FindSCR>
 80084ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	e023      	b.n	8008540 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01c      	beq.n	800853c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850a:	041b      	lsls	r3, r3, #16
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f001 fab6 	bl	8009a80 <SDMMC_CmdAppCommand>
 8008514:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	e00f      	b.n	8008540 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f001 faef 	bl	8009b0a <SDMMC_CmdBusWidth>
 800852c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	e003      	b.n	8008540 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008538:	2300      	movs	r3, #0
 800853a:	e001      	b.n	8008540 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800853c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b08f      	sub	sp, #60	; 0x3c
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008552:	f7fa ff39 	bl	80033c8 <HAL_GetTick>
 8008556:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800855c:	2300      	movs	r3, #0
 800855e:	60bb      	str	r3, [r7, #8]
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2108      	movs	r1, #8
 800856e:	4618      	mov	r0, r3
 8008570:	f001 f95a 	bl	8009828 <SDMMC_CmdBlockLength>
 8008574:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <SD_FindSCR+0x38>
  {
    return errorstate;
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	e0b2      	b.n	80086e6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	041b      	lsls	r3, r3, #16
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f001 fa77 	bl	8009a80 <SDMMC_CmdAppCommand>
 8008592:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <SD_FindSCR+0x56>
  {
    return errorstate;
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	e0a3      	b.n	80086e6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800859e:	f04f 33ff 	mov.w	r3, #4294967295
 80085a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80085a4:	2308      	movs	r3, #8
 80085a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80085a8:	2330      	movs	r3, #48	; 0x30
 80085aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80085ac:	2302      	movs	r3, #2
 80085ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f107 0210 	add.w	r2, r7, #16
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 f905 	bl	80097d2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 fabe 	bl	8009b4e <SDMMC_CmdSendSCR>
 80085d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d02a      	beq.n	8008630 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	e083      	b.n	80086e6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00f      	beq.n	800860c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	f107 0208 	add.w	r2, r7, #8
 80085f8:	18d4      	adds	r4, r2, r3
 80085fa:	4608      	mov	r0, r1
 80085fc:	f001 f86c 	bl	80096d8 <SDIO_ReadFIFO>
 8008600:	4603      	mov	r3, r0
 8008602:	6023      	str	r3, [r4, #0]
      index++;
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	3301      	adds	r3, #1
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
 800860a:	e006      	b.n	800861a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d012      	beq.n	8008640 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800861a:	f7fa fed5 	bl	80033c8 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d102      	bne.n	8008630 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800862a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800862e:	e05a      	b.n	80086e6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0cf      	beq.n	80085de <SD_FindSCR+0x96>
 800863e:	e000      	b.n	8008642 <SD_FindSCR+0xfa>
      break;
 8008640:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2208      	movs	r2, #8
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008658:	2308      	movs	r3, #8
 800865a:	e044      	b.n	80086e6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d005      	beq.n	8008676 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2202      	movs	r2, #2
 8008670:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008672:	2302      	movs	r3, #2
 8008674:	e037      	b.n	80086e6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2220      	movs	r2, #32
 800868a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800868c:	2320      	movs	r3, #32
 800868e:	e02a      	b.n	80086e6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f240 523a 	movw	r2, #1338	; 0x53a
 8008698:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	061a      	lsls	r2, r3, #24
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	0e1b      	lsrs	r3, r3, #24
 80086b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	601a      	str	r2, [r3, #0]
    scr++;
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	3304      	adds	r3, #4
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	061a      	lsls	r2, r3, #24
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	0e1b      	lsrs	r3, r3, #24
 80086de:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	373c      	adds	r7, #60	; 0x3c
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd90      	pop	{r4, r7, pc}

080086ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e076      	b.n	80087ee <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008710:	d009      	beq.n	8008726 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	61da      	str	r2, [r3, #28]
 8008718:	e005      	b.n	8008726 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7fa fbf9 	bl	8002f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2202      	movs	r2, #2
 800874a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800875c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800876e:	431a      	orrs	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	ea42 0103 	orr.w	r1, r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	0c1a      	lsrs	r2, r3, #16
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f002 0204 	and.w	r2, r2, #4
 80087cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69da      	ldr	r2, [r3, #28]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b088      	sub	sp, #32
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	603b      	str	r3, [r7, #0]
 8008802:	4613      	mov	r3, r2
 8008804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_SPI_Transmit+0x22>
 8008814:	2302      	movs	r3, #2
 8008816:	e12d      	b.n	8008a74 <HAL_SPI_Transmit+0x27e>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008820:	f7fa fdd2 	bl	80033c8 <HAL_GetTick>
 8008824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b01      	cmp	r3, #1
 8008834:	d002      	beq.n	800883c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008836:	2302      	movs	r3, #2
 8008838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800883a:	e116      	b.n	8008a6a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <HAL_SPI_Transmit+0x52>
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800884c:	e10d      	b.n	8008a6a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2203      	movs	r2, #3
 8008852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	88fa      	ldrh	r2, [r7, #6]
 800886c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008894:	d10f      	bne.n	80088b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d007      	beq.n	80088d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088dc:	d14f      	bne.n	800897e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_SPI_Transmit+0xf6>
 80088e6:	8afb      	ldrh	r3, [r7, #22]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d142      	bne.n	8008972 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	881a      	ldrh	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fc:	1c9a      	adds	r2, r3, #2
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008906:	b29b      	uxth	r3, r3
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008910:	e02f      	b.n	8008972 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b02      	cmp	r3, #2
 800891e:	d112      	bne.n	8008946 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	881a      	ldrh	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	1c9a      	adds	r2, r3, #2
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	86da      	strh	r2, [r3, #54]	; 0x36
 8008944:	e015      	b.n	8008972 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008946:	f7fa fd3f 	bl	80033c8 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d803      	bhi.n	800895e <HAL_SPI_Transmit+0x168>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d102      	bne.n	8008964 <HAL_SPI_Transmit+0x16e>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d106      	bne.n	8008972 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008970:	e07b      	b.n	8008a6a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008976:	b29b      	uxth	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1ca      	bne.n	8008912 <HAL_SPI_Transmit+0x11c>
 800897c:	e050      	b.n	8008a20 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_SPI_Transmit+0x196>
 8008986:	8afb      	ldrh	r3, [r7, #22]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d144      	bne.n	8008a16 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	330c      	adds	r3, #12
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80089b2:	e030      	b.n	8008a16 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d113      	bne.n	80089ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	330c      	adds	r3, #12
 80089cc:	7812      	ldrb	r2, [r2, #0]
 80089ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80089e8:	e015      	b.n	8008a16 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ea:	f7fa fced 	bl	80033c8 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d803      	bhi.n	8008a02 <HAL_SPI_Transmit+0x20c>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d102      	bne.n	8008a08 <HAL_SPI_Transmit+0x212>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008a14:	e029      	b.n	8008a6a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1c9      	bne.n	80089b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f8b1 	bl	8008b8c <SPI_EndRxTxTransaction>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	77fb      	strb	r3, [r7, #31]
 8008a60:	e003      	b.n	8008a6a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3720      	adds	r7, #32
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a8c:	f7fa fc9c 	bl	80033c8 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	4413      	add	r3, r2
 8008a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a9c:	f7fa fc94 	bl	80033c8 <HAL_GetTick>
 8008aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008aa2:	4b39      	ldr	r3, [pc, #228]	; (8008b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	015b      	lsls	r3, r3, #5
 8008aa8:	0d1b      	lsrs	r3, r3, #20
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	fb02 f303 	mul.w	r3, r2, r3
 8008ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ab2:	e054      	b.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aba:	d050      	beq.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008abc:	f7fa fc84 	bl	80033c8 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d902      	bls.n	8008ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d13d      	bne.n	8008b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aea:	d111      	bne.n	8008b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af4:	d004      	beq.n	8008b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008afe:	d107      	bne.n	8008b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b18:	d10f      	bne.n	8008b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e017      	b.n	8008b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4013      	ands	r3, r2
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	2300      	movne	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d19b      	bne.n	8008ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000010 	.word	0x20000010

08008b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2180      	movs	r1, #128	; 0x80
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff ff6a 	bl	8008a7c <SPI_WaitFlagStateUntilTimeout>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb2:	f043 0220 	orr.w	r2, r3, #32
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e000      	b.n	8008bc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e041      	b.n	8008c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fa f9ee 	bl	8002fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f000 fb1c 	bl	8009244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d001      	beq.n	8008c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e03c      	b.n	8008cfa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <HAL_TIM_Base_Start+0x9c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d018      	beq.n	8008cc4 <HAL_TIM_Base_Start+0x5c>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a1c      	ldr	r2, [pc, #112]	; (8008d08 <HAL_TIM_Base_Start+0xa0>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d013      	beq.n	8008cc4 <HAL_TIM_Base_Start+0x5c>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca4:	d00e      	beq.n	8008cc4 <HAL_TIM_Base_Start+0x5c>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a18      	ldr	r2, [pc, #96]	; (8008d0c <HAL_TIM_Base_Start+0xa4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d009      	beq.n	8008cc4 <HAL_TIM_Base_Start+0x5c>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <HAL_TIM_Base_Start+0xa8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d004      	beq.n	8008cc4 <HAL_TIM_Base_Start+0x5c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <HAL_TIM_Base_Start+0xac>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d111      	bne.n	8008ce8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d010      	beq.n	8008cf8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0201 	orr.w	r2, r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce6:	e007      	b.n	8008cf8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0201 	orr.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	40012c00 	.word	0x40012c00
 8008d08:	40013400 	.word	0x40013400
 8008d0c:	40000400 	.word	0x40000400
 8008d10:	40000800 	.word	0x40000800
 8008d14:	40000c00 	.word	0x40000c00

08008d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d001      	beq.n	8008d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e044      	b.n	8008dba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1d      	ldr	r2, [pc, #116]	; (8008dc4 <HAL_TIM_Base_Start_IT+0xac>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d018      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x6c>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a1c      	ldr	r2, [pc, #112]	; (8008dc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d013      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x6c>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d00e      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x6c>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <HAL_TIM_Base_Start_IT+0xb4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d009      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x6c>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d004      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x6c>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a15      	ldr	r2, [pc, #84]	; (8008dd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d111      	bne.n	8008da8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d010      	beq.n	8008db8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0201 	orr.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da6:	e007      	b.n	8008db8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0201 	orr.w	r2, r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	40013400 	.word	0x40013400
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00

08008dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d122      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0202 	mvn.w	r2, #2
 8008e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f9f6 	bl	800920c <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f9e9 	bl	80091fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f9f8 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d122      	bne.n	8008e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d11b      	bne.n	8008e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0204 	mvn.w	r2, #4
 8008e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f9cc 	bl	800920c <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f9bf 	bl	80091fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f9ce 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d122      	bne.n	8008edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0308 	and.w	r3, r3, #8
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d11b      	bne.n	8008edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0208 	mvn.w	r2, #8
 8008eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9a2 	bl	800920c <HAL_TIM_IC_CaptureCallback>
 8008ec8:	e005      	b.n	8008ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f995 	bl	80091fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f9a4 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d122      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d11b      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0210 	mvn.w	r2, #16
 8008f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2208      	movs	r2, #8
 8008f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f978 	bl	800920c <HAL_TIM_IC_CaptureCallback>
 8008f1c:	e005      	b.n	8008f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f96b 	bl	80091fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f97a 	bl	800921e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d10e      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0201 	mvn.w	r2, #1
 8008f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7f8 fe2a 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d10e      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d107      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fb75 	bl	8009672 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f92:	2b40      	cmp	r3, #64	; 0x40
 8008f94:	d10e      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	d107      	bne.n	8008fb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f93e 	bl	8009230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b20      	cmp	r3, #32
 8008fc0:	d10e      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d107      	bne.n	8008fe0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f06f 0220 	mvn.w	r2, #32
 8008fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fb40 	bl	8009660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <HAL_TIM_ConfigClockSource+0x1c>
 8009000:	2302      	movs	r3, #2
 8009002:	e0b4      	b.n	800916e <HAL_TIM_ConfigClockSource+0x186>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800902a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800903c:	d03e      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0xd4>
 800903e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009042:	f200 8087 	bhi.w	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904a:	f000 8086 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x172>
 800904e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009052:	d87f      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009054:	2b70      	cmp	r3, #112	; 0x70
 8009056:	d01a      	beq.n	800908e <HAL_TIM_ConfigClockSource+0xa6>
 8009058:	2b70      	cmp	r3, #112	; 0x70
 800905a:	d87b      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d050      	beq.n	8009102 <HAL_TIM_ConfigClockSource+0x11a>
 8009060:	2b60      	cmp	r3, #96	; 0x60
 8009062:	d877      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009064:	2b50      	cmp	r3, #80	; 0x50
 8009066:	d03c      	beq.n	80090e2 <HAL_TIM_ConfigClockSource+0xfa>
 8009068:	2b50      	cmp	r3, #80	; 0x50
 800906a:	d873      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	d058      	beq.n	8009122 <HAL_TIM_ConfigClockSource+0x13a>
 8009070:	2b40      	cmp	r3, #64	; 0x40
 8009072:	d86f      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009074:	2b30      	cmp	r3, #48	; 0x30
 8009076:	d064      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 8009078:	2b30      	cmp	r3, #48	; 0x30
 800907a:	d86b      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 800907c:	2b20      	cmp	r3, #32
 800907e:	d060      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 8009080:	2b20      	cmp	r3, #32
 8009082:	d867      	bhi.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d05c      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 8009088:	2b10      	cmp	r3, #16
 800908a:	d05a      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x15a>
 800908c:	e062      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6899      	ldr	r1, [r3, #8]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f000 fa53 	bl	8009548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	609a      	str	r2, [r3, #8]
      break;
 80090ba:	e04f      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	6899      	ldr	r1, [r3, #8]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f000 fa3c 	bl	8009548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090de:	609a      	str	r2, [r3, #8]
      break;
 80090e0:	e03c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	6859      	ldr	r1, [r3, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f000 f9b3 	bl	800945a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2150      	movs	r1, #80	; 0x50
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fa0a 	bl	8009514 <TIM_ITRx_SetConfig>
      break;
 8009100:	e02c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6859      	ldr	r1, [r3, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	461a      	mov	r2, r3
 8009110:	f000 f9d1 	bl	80094b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2160      	movs	r1, #96	; 0x60
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f9fa 	bl	8009514 <TIM_ITRx_SetConfig>
      break;
 8009120:	e01c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	6859      	ldr	r1, [r3, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	461a      	mov	r2, r3
 8009130:	f000 f993 	bl	800945a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2140      	movs	r1, #64	; 0x40
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f9ea 	bl	8009514 <TIM_ITRx_SetConfig>
      break;
 8009140:	e00c      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f000 f9e1 	bl	8009514 <TIM_ITRx_SetConfig>
      break;
 8009152:	e003      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
      break;
 8009158:	e000      	b.n	800915c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800915a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <HAL_TIM_SlaveConfigSynchro+0x18>
 800918a:	2302      	movs	r3, #2
 800918c:	e031      	b.n	80091f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8c9 	bl	8009338 <TIM_SlaveTimer_SetConfig>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e018      	b.n	80091f2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091de:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	bc80      	pop	{r7}
 800920a:	4770      	bx	lr

0800920c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr

0800921e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr

08009230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr
	...

08009244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a33      	ldr	r2, [pc, #204]	; (8009324 <TIM_Base_SetConfig+0xe0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d013      	beq.n	8009284 <TIM_Base_SetConfig+0x40>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a32      	ldr	r2, [pc, #200]	; (8009328 <TIM_Base_SetConfig+0xe4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00f      	beq.n	8009284 <TIM_Base_SetConfig+0x40>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800926a:	d00b      	beq.n	8009284 <TIM_Base_SetConfig+0x40>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a2f      	ldr	r2, [pc, #188]	; (800932c <TIM_Base_SetConfig+0xe8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d007      	beq.n	8009284 <TIM_Base_SetConfig+0x40>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a2e      	ldr	r2, [pc, #184]	; (8009330 <TIM_Base_SetConfig+0xec>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d003      	beq.n	8009284 <TIM_Base_SetConfig+0x40>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a2d      	ldr	r2, [pc, #180]	; (8009334 <TIM_Base_SetConfig+0xf0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d108      	bne.n	8009296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a22      	ldr	r2, [pc, #136]	; (8009324 <TIM_Base_SetConfig+0xe0>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d013      	beq.n	80092c6 <TIM_Base_SetConfig+0x82>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a21      	ldr	r2, [pc, #132]	; (8009328 <TIM_Base_SetConfig+0xe4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00f      	beq.n	80092c6 <TIM_Base_SetConfig+0x82>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ac:	d00b      	beq.n	80092c6 <TIM_Base_SetConfig+0x82>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a1e      	ldr	r2, [pc, #120]	; (800932c <TIM_Base_SetConfig+0xe8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d007      	beq.n	80092c6 <TIM_Base_SetConfig+0x82>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a1d      	ldr	r2, [pc, #116]	; (8009330 <TIM_Base_SetConfig+0xec>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d003      	beq.n	80092c6 <TIM_Base_SetConfig+0x82>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a1c      	ldr	r2, [pc, #112]	; (8009334 <TIM_Base_SetConfig+0xf0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d108      	bne.n	80092d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	695b      	ldr	r3, [r3, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a09      	ldr	r2, [pc, #36]	; (8009324 <TIM_Base_SetConfig+0xe0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d003      	beq.n	800930c <TIM_Base_SetConfig+0xc8>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a08      	ldr	r2, [pc, #32]	; (8009328 <TIM_Base_SetConfig+0xe4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d103      	bne.n	8009314 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	615a      	str	r2, [r3, #20]
}
 800931a:	bf00      	nop
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr
 8009324:	40012c00 	.word	0x40012c00
 8009328:	40013400 	.word	0x40013400
 800932c:	40000400 	.word	0x40000400
 8009330:	40000800 	.word	0x40000800
 8009334:	40000c00 	.word	0x40000c00

08009338 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009354:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f023 0307 	bic.w	r3, r3, #7
 8009366:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2b70      	cmp	r3, #112	; 0x70
 8009380:	d01a      	beq.n	80093b8 <TIM_SlaveTimer_SetConfig+0x80>
 8009382:	2b70      	cmp	r3, #112	; 0x70
 8009384:	d860      	bhi.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
 8009386:	2b60      	cmp	r3, #96	; 0x60
 8009388:	d054      	beq.n	8009434 <TIM_SlaveTimer_SetConfig+0xfc>
 800938a:	2b60      	cmp	r3, #96	; 0x60
 800938c:	d85c      	bhi.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
 800938e:	2b50      	cmp	r3, #80	; 0x50
 8009390:	d046      	beq.n	8009420 <TIM_SlaveTimer_SetConfig+0xe8>
 8009392:	2b50      	cmp	r3, #80	; 0x50
 8009394:	d858      	bhi.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
 8009396:	2b40      	cmp	r3, #64	; 0x40
 8009398:	d019      	beq.n	80093ce <TIM_SlaveTimer_SetConfig+0x96>
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d854      	bhi.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
 800939e:	2b30      	cmp	r3, #48	; 0x30
 80093a0:	d055      	beq.n	800944e <TIM_SlaveTimer_SetConfig+0x116>
 80093a2:	2b30      	cmp	r3, #48	; 0x30
 80093a4:	d850      	bhi.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d051      	beq.n	800944e <TIM_SlaveTimer_SetConfig+0x116>
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	d84c      	bhi.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d04d      	beq.n	800944e <TIM_SlaveTimer_SetConfig+0x116>
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d04b      	beq.n	800944e <TIM_SlaveTimer_SetConfig+0x116>
 80093b6:	e047      	b.n	8009448 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	68d9      	ldr	r1, [r3, #12]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	f000 f8be 	bl	8009548 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80093cc:	e040      	b.n	8009450 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d101      	bne.n	80093da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e03b      	b.n	8009452 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6a1a      	ldr	r2, [r3, #32]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	699b      	ldr	r3, [r3, #24]
 80093f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009400:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	4313      	orrs	r3, r2
 800940c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	621a      	str	r2, [r3, #32]
      break;
 800941e:	e017      	b.n	8009450 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	6899      	ldr	r1, [r3, #8]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	461a      	mov	r2, r3
 800942e:	f000 f814 	bl	800945a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009432:	e00d      	b.n	8009450 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	6899      	ldr	r1, [r3, #8]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	461a      	mov	r2, r3
 8009442:	f000 f838 	bl	80094b6 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009446:	e003      	b.n	8009450 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
      break;
 800944c:	e000      	b.n	8009450 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800944e:	bf00      	nop
  }

  return status;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800945a:	b480      	push	{r7}
 800945c:	b087      	sub	sp, #28
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	f023 0201 	bic.w	r2, r3, #1
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 030a 	bic.w	r3, r3, #10
 8009496:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	621a      	str	r2, [r3, #32]
}
 80094ac:	bf00      	nop
 80094ae:	371c      	adds	r7, #28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bc80      	pop	{r7}
 80094b4:	4770      	bx	lr

080094b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b087      	sub	sp, #28
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	f023 0210 	bic.w	r2, r3, #16
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	031b      	lsls	r3, r3, #12
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	621a      	str	r2, [r3, #32]
}
 800950a:	bf00      	nop
 800950c:	371c      	adds	r7, #28
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr

08009514 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4313      	orrs	r3, r2
 8009532:	f043 0307 	orr.w	r3, r3, #7
 8009536:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	609a      	str	r2, [r3, #8]
}
 800953e:	bf00      	nop
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	021a      	lsls	r2, r3, #8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	431a      	orrs	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	609a      	str	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr
	...

08009588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800959c:	2302      	movs	r3, #2
 800959e:	e050      	b.n	8009642 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a1b      	ldr	r2, [pc, #108]	; (800964c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d018      	beq.n	8009616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a19      	ldr	r2, [pc, #100]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d013      	beq.n	8009616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d00e      	beq.n	8009616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a15      	ldr	r2, [pc, #84]	; (8009654 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d009      	beq.n	8009616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a14      	ldr	r2, [pc, #80]	; (8009658 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d004      	beq.n	8009616 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a12      	ldr	r2, [pc, #72]	; (800965c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d10c      	bne.n	8009630 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	4313      	orrs	r3, r2
 8009626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr
 800964c:	40012c00 	.word	0x40012c00
 8009650:	40013400 	.word	0x40013400
 8009654:	40000400 	.word	0x40000400
 8009658:	40000800 	.word	0x40000800
 800965c:	40000c00 	.word	0x40000c00

08009660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr

08009672 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr

08009684 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009684:	b084      	sub	sp, #16
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	f107 001c 	add.w	r0, r7, #28
 8009692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800969a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800969c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800969e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80096a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80096a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80096aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80096ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80096be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	b004      	add	sp, #16
 80096d6:	4770      	bx	lr

080096d8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bc80      	pop	{r7}
 80096ee:	4770      	bx	lr

080096f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr

08009710 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2203      	movs	r2, #3
 800971c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr

0800972a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0303 	and.w	r3, r3, #3
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr

08009744 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009762:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009768:	431a      	orrs	r2, r3
                       Command->CPSM);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800976e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4313      	orrs	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800977e:	f023 030f 	bic.w	r3, r3, #15
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	431a      	orrs	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	bc80      	pop	{r7}
 8009794:	4770      	bx	lr

08009796 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	b2db      	uxtb	r3, r3
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	4770      	bx	lr

080097ae <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3314      	adds	r3, #20
 80097bc:	461a      	mov	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	4413      	add	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
}  
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr

080097d2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b085      	sub	sp, #20
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80097f8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80097fe:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009804:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	4313      	orrs	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800981c:	2300      	movs	r3, #0

}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr

08009828 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009836:	2310      	movs	r3, #16
 8009838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009846:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009848:	f107 0308 	add.w	r3, r7, #8
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff ff78 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009854:	f241 3288 	movw	r2, #5000	; 0x1388
 8009858:	2110      	movs	r1, #16
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa18 	bl	8009c90 <SDMMC_GetCmdResp1>
 8009860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009862:	69fb      	ldr	r3, [r7, #28]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800987a:	2311      	movs	r3, #17
 800987c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800987e:	2340      	movs	r3, #64	; 0x40
 8009880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800988a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff ff56 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009898:	f241 3288 	movw	r2, #5000	; 0x1388
 800989c:	2111      	movs	r1, #17
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f9f6 	bl	8009c90 <SDMMC_GetCmdResp1>
 80098a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098a6:	69fb      	ldr	r3, [r7, #28]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80098be:	2312      	movs	r3, #18
 80098c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098c2:	2340      	movs	r3, #64	; 0x40
 80098c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098d0:	f107 0308 	add.w	r3, r7, #8
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff ff34 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e0:	2112      	movs	r1, #18
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f9d4 	bl	8009c90 <SDMMC_GetCmdResp1>
 80098e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ea:	69fb      	ldr	r3, [r7, #28]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3720      	adds	r7, #32
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009902:	2318      	movs	r3, #24
 8009904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800990a:	2300      	movs	r3, #0
 800990c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800990e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009912:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009914:	f107 0308 	add.w	r3, r7, #8
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7ff ff12 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009920:	f241 3288 	movw	r2, #5000	; 0x1388
 8009924:	2118      	movs	r1, #24
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9b2 	bl	8009c90 <SDMMC_GetCmdResp1>
 800992c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800992e:	69fb      	ldr	r3, [r7, #28]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009946:	2319      	movs	r3, #25
 8009948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800994a:	2340      	movs	r3, #64	; 0x40
 800994c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009958:	f107 0308 	add.w	r3, r7, #8
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff fef0 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009964:	f241 3288 	movw	r2, #5000	; 0x1388
 8009968:	2119      	movs	r1, #25
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f990 	bl	8009c90 <SDMMC_GetCmdResp1>
 8009970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009972:	69fb      	ldr	r3, [r7, #28]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009988:	230c      	movs	r3, #12
 800998a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800998c:	2340      	movs	r3, #64	; 0x40
 800998e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009998:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff fecf 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80099a6:	4a05      	ldr	r2, [pc, #20]	; (80099bc <SDMMC_CmdStopTransfer+0x40>)
 80099a8:	210c      	movs	r1, #12
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f970 	bl	8009c90 <SDMMC_GetCmdResp1>
 80099b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b2:	69fb      	ldr	r3, [r7, #28]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	05f5e100 	.word	0x05f5e100

080099c0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80099d0:	2307      	movs	r3, #7
 80099d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099d4:	2340      	movs	r3, #64	; 0x40
 80099d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099d8:	2300      	movs	r3, #0
 80099da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099e2:	f107 0310 	add.w	r3, r7, #16
 80099e6:	4619      	mov	r1, r3
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff feab 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80099ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f2:	2107      	movs	r1, #7
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f94b 	bl	8009c90 <SDMMC_GetCmdResp1>
 80099fa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3728      	adds	r7, #40	; 0x28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fe8a 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fb63 	bl	800a0fc <SDMMC_GetCmdError>
 8009a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a38:	69fb      	ldr	r3, [r7, #28]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b088      	sub	sp, #32
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a4a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a50:	2308      	movs	r3, #8
 8009a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a62:	f107 0308 	add.w	r3, r7, #8
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fe6b 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 faf6 	bl	800a060 <SDMMC_GetCmdResp7>
 8009a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a76:	69fb      	ldr	r3, [r7, #28]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a8e:	2337      	movs	r3, #55	; 0x37
 8009a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a92:	2340      	movs	r3, #64	; 0x40
 8009a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a96:	2300      	movs	r3, #0
 8009a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aa0:	f107 0308 	add.w	r3, r7, #8
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff fe4c 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab0:	2137      	movs	r1, #55	; 0x37
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f8ec 	bl	8009c90 <SDMMC_GetCmdResp1>
 8009ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aba:	69fb      	ldr	r3, [r7, #28]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ada:	2329      	movs	r3, #41	; 0x29
 8009adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ade:	2340      	movs	r3, #64	; 0x40
 8009ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aec:	f107 0308 	add.w	r3, r7, #8
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff fe26 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f9ff 	bl	8009efc <SDMMC_GetCmdResp3>
 8009afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b00:	69fb      	ldr	r3, [r7, #28]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b088      	sub	sp, #32
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b18:	2306      	movs	r3, #6
 8009b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b2a:	f107 0308 	add.w	r3, r7, #8
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff fe07 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b3a:	2106      	movs	r1, #6
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 f8a7 	bl	8009c90 <SDMMC_GetCmdResp1>
 8009b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b44:	69fb      	ldr	r3, [r7, #28]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3720      	adds	r7, #32
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b088      	sub	sp, #32
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b5a:	2333      	movs	r3, #51	; 0x33
 8009b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b5e:	2340      	movs	r3, #64	; 0x40
 8009b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff fde6 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b7c:	2133      	movs	r1, #51	; 0x33
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f886 	bl	8009c90 <SDMMC_GetCmdResp1>
 8009b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b86:	69fb      	ldr	r3, [r7, #28]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ba0:	23c0      	movs	r3, #192	; 0xc0
 8009ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bae:	f107 0308 	add.w	r3, r7, #8
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fdc5 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f956 	bl	8009e6c <SDMMC_GetCmdResp2>
 8009bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc2:	69fb      	ldr	r3, [r7, #28]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bda:	2309      	movs	r3, #9
 8009bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009bde:	23c0      	movs	r3, #192	; 0xc0
 8009be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bec:	f107 0308 	add.w	r3, r7, #8
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff fda6 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f937 	bl	8009e6c <SDMMC_GetCmdResp2>
 8009bfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c00:	69fb      	ldr	r3, [r7, #28]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3720      	adds	r7, #32
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b088      	sub	sp, #32
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c20:	2300      	movs	r3, #0
 8009c22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c2a:	f107 0308 	add.w	r3, r7, #8
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff fd87 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	2103      	movs	r1, #3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f99a 	bl	8009f74 <SDMMC_GetCmdResp6>
 8009c40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c42:	69fb      	ldr	r3, [r7, #28]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3720      	adds	r7, #32
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c5a:	230d      	movs	r3, #13
 8009c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c5e:	2340      	movs	r3, #64	; 0x40
 8009c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c62:	2300      	movs	r3, #0
 8009c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fd66 	bl	8009744 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7c:	210d      	movs	r1, #13
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f806 	bl	8009c90 <SDMMC_GetCmdResp1>
 8009c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c86:	69fb      	ldr	r3, [r7, #28]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3720      	adds	r7, #32
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c9e:	4b70      	ldr	r3, [pc, #448]	; (8009e60 <SDMMC_GetCmdResp1+0x1d0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a70      	ldr	r2, [pc, #448]	; (8009e64 <SDMMC_GetCmdResp1+0x1d4>)
 8009ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca8:	0a5a      	lsrs	r2, r3, #9
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	fb02 f303 	mul.w	r3, r2, r3
 8009cb0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	1e5a      	subs	r2, r3, #1
 8009cb6:	61fa      	str	r2, [r7, #28]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cc0:	e0c9      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0ef      	beq.n	8009cb2 <SDMMC_GetCmdResp1+0x22>
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1ea      	bne.n	8009cb2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2204      	movs	r2, #4
 8009cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cee:	2304      	movs	r3, #4
 8009cf0:	e0b1      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d004      	beq.n	8009d08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e0a6      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	22c5      	movs	r2, #197	; 0xc5
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7ff fd41 	bl	8009796 <SDIO_GetCommandResponse>
 8009d14:	4603      	mov	r3, r0
 8009d16:	461a      	mov	r2, r3
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d001      	beq.n	8009d22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e099      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009d22:	2100      	movs	r1, #0
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7ff fd42 	bl	80097ae <SDIO_GetResponse>
 8009d2a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	4b4e      	ldr	r3, [pc, #312]	; (8009e68 <SDMMC_GetCmdResp1+0x1d8>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e08d      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	da02      	bge.n	8009d46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d44:	e087      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	e080      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d5e:	2380      	movs	r3, #128	; 0x80
 8009d60:	e079      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d70:	e071      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d80:	e069      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d90:	e061      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009da0:	e059      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009db0:	e051      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dc0:	e049      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009dd0:	e041      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de0:	e039      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009df0:	e031      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009dfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e00:	e029      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e10:	e021      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e20:	e019      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e30:	e011      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e40:	e009      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e50:	e001      	b.n	8009e56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000010 	.word	0x20000010
 8009e64:	10624dd3 	.word	0x10624dd3
 8009e68:	fdffe008 	.word	0xfdffe008

08009e6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e74:	4b1f      	ldr	r3, [pc, #124]	; (8009ef4 <SDMMC_GetCmdResp2+0x88>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a1f      	ldr	r2, [pc, #124]	; (8009ef8 <SDMMC_GetCmdResp2+0x8c>)
 8009e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7e:	0a5b      	lsrs	r3, r3, #9
 8009e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	1e5a      	subs	r2, r3, #1
 8009e8e:	60fa      	str	r2, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d102      	bne.n	8009e9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e98:	e026      	b.n	8009ee8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0ef      	beq.n	8009e8a <SDMMC_GetCmdResp2+0x1e>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1ea      	bne.n	8009e8a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2204      	movs	r2, #4
 8009ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ec6:	2304      	movs	r3, #4
 8009ec8:	e00e      	b.n	8009ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d004      	beq.n	8009ee0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e003      	b.n	8009ee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	22c5      	movs	r2, #197	; 0xc5
 8009ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bc80      	pop	{r7}
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000010 	.word	0x20000010
 8009ef8:	10624dd3 	.word	0x10624dd3

08009efc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f04:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <SDMMC_GetCmdResp3+0x70>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a19      	ldr	r2, [pc, #100]	; (8009f70 <SDMMC_GetCmdResp3+0x74>)
 8009f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0e:	0a5b      	lsrs	r3, r3, #9
 8009f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f14:	fb02 f303 	mul.w	r3, r2, r3
 8009f18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	1e5a      	subs	r2, r3, #1
 8009f1e:	60fa      	str	r2, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f28:	e01b      	b.n	8009f62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0ef      	beq.n	8009f1a <SDMMC_GetCmdResp3+0x1e>
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1ea      	bne.n	8009f1a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d004      	beq.n	8009f5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2204      	movs	r2, #4
 8009f54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f56:	2304      	movs	r3, #4
 8009f58:	e003      	b.n	8009f62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	22c5      	movs	r2, #197	; 0xc5
 8009f5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bc80      	pop	{r7}
 8009f6a:	4770      	bx	lr
 8009f6c:	20000010 	.word	0x20000010
 8009f70:	10624dd3 	.word	0x10624dd3

08009f74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f82:	4b35      	ldr	r3, [pc, #212]	; (800a058 <SDMMC_GetCmdResp6+0xe4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a35      	ldr	r2, [pc, #212]	; (800a05c <SDMMC_GetCmdResp6+0xe8>)
 8009f88:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8c:	0a5b      	lsrs	r3, r3, #9
 8009f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	1e5a      	subs	r2, r3, #1
 8009f9c:	61fa      	str	r2, [r7, #28]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fa6:	e052      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0ef      	beq.n	8009f98 <SDMMC_GetCmdResp6+0x24>
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1ea      	bne.n	8009f98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2204      	movs	r2, #4
 8009fd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	e03a      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e02f      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff fbd1 	bl	8009796 <SDIO_GetCommandResponse>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	7afb      	ldrb	r3, [r7, #11]
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d001      	beq.n	800a002 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e025      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	22c5      	movs	r2, #197	; 0xc5
 800a006:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a008:	2100      	movs	r1, #0
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff fbcf 	bl	80097ae <SDIO_GetResponse>
 800a010:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d106      	bne.n	800a02a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	b29a      	uxth	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a026:	2300      	movs	r3, #0
 800a028:	e011      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a038:	e009      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a048:	e001      	b.n	800a04e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a04a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000010 	.word	0x20000010
 800a05c:	10624dd3 	.word	0x10624dd3

0800a060 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a068:	4b22      	ldr	r3, [pc, #136]	; (800a0f4 <SDMMC_GetCmdResp7+0x94>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a22      	ldr	r2, [pc, #136]	; (800a0f8 <SDMMC_GetCmdResp7+0x98>)
 800a06e:	fba2 2303 	umull	r2, r3, r2, r3
 800a072:	0a5b      	lsrs	r3, r3, #9
 800a074:	f241 3288 	movw	r2, #5000	; 0x1388
 800a078:	fb02 f303 	mul.w	r3, r2, r3
 800a07c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1e5a      	subs	r2, r3, #1
 800a082:	60fa      	str	r2, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a08c:	e02c      	b.n	800a0e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0ef      	beq.n	800a07e <SDMMC_GetCmdResp7+0x1e>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1ea      	bne.n	800a07e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0ba:	2304      	movs	r3, #4
 800a0bc:	e014      	b.n	800a0e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d004      	beq.n	800a0d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e009      	b.n	800a0e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2240      	movs	r2, #64	; 0x40
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a0e6:	2300      	movs	r3, #0
  
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bc80      	pop	{r7}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000010 	.word	0x20000010
 800a0f8:	10624dd3 	.word	0x10624dd3

0800a0fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <SDMMC_GetCmdError+0x4c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a10      	ldr	r2, [pc, #64]	; (800a14c <SDMMC_GetCmdError+0x50>)
 800a10a:	fba2 2303 	umull	r2, r3, r2, r3
 800a10e:	0a5b      	lsrs	r3, r3, #9
 800a110:	f241 3288 	movw	r2, #5000	; 0x1388
 800a114:	fb02 f303 	mul.w	r3, r2, r3
 800a118:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	1e5a      	subs	r2, r3, #1
 800a11e:	60fa      	str	r2, [r7, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a128:	e009      	b.n	800a13e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0f1      	beq.n	800a11a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	22c5      	movs	r2, #197	; 0xc5
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr
 800a148:	20000010 	.word	0x20000010
 800a14c:	10624dd3 	.word	0x10624dd3

0800a150 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a150:	b084      	sub	sp, #16
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	f107 0014 	add.w	r0, r7, #20
 800a15e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	b004      	add	sp, #16
 800a16e:	4770      	bx	lr

0800a170 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a180:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a184:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	b29a      	uxth	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	bc80      	pop	{r7}
 800a19a:	4770      	bx	lr

0800a19c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a1a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a1a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	43db      	mvns	r3, r3
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bc80      	pop	{r7}
 800a1ce:	4770      	bx	lr

0800a1d0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bc80      	pop	{r7}
 800a1e6:	4770      	bx	lr

0800a1e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	f107 0014 	add.w	r0, r7, #20
 800a1f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	bc80      	pop	{r7}
 800a224:	b004      	add	sp, #16
 800a226:	4770      	bx	lr

0800a228 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a228:	b480      	push	{r7}
 800a22a:	b09d      	sub	sp, #116	; 0x74
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	b29b      	uxth	r3, r3
 800a246:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	78db      	ldrb	r3, [r3, #3]
 800a256:	2b03      	cmp	r3, #3
 800a258:	d81f      	bhi.n	800a29a <USB_ActivateEndpoint+0x72>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <USB_ActivateEndpoint+0x38>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a271 	.word	0x0800a271
 800a264:	0800a28d 	.word	0x0800a28d
 800a268:	0800a2a3 	.word	0x0800a2a3
 800a26c:	0800a27f 	.word	0x0800a27f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a270:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a278:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a27c:	e012      	b.n	800a2a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a27e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a282:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a286:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a28a:	e00b      	b.n	800a2a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a28c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a290:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a294:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a298:	e004      	b.n	800a2a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a2a0:	e000      	b.n	800a2a4 <USB_ActivateEndpoint+0x7c>
      break;
 800a2a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	441a      	add	r2, r3
 800a2ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a2b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	441a      	add	r2, r3
 800a2f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	7b1b      	ldrb	r3, [r3, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	f040 8178 	bne.w	800a606 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	785b      	ldrb	r3, [r3, #1]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f000 8084 	beq.w	800a428 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	4413      	add	r3, r2
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	011a      	lsls	r2, r3, #4
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a342:	617b      	str	r3, [r7, #20]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	88db      	ldrh	r3, [r3, #6]
 800a348:	085b      	lsrs	r3, r3, #1
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	827b      	strh	r3, [r7, #18]
 800a362:	8a7b      	ldrh	r3, [r7, #18]
 800a364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01b      	beq.n	800a3a4 <USB_ActivateEndpoint+0x17c>
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a382:	823b      	strh	r3, [r7, #16]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	441a      	add	r2, r3
 800a38e:	8a3b      	ldrh	r3, [r7, #16]
 800a390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a39c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	78db      	ldrb	r3, [r3, #3]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d020      	beq.n	800a3ee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c2:	81bb      	strh	r3, [r7, #12]
 800a3c4:	89bb      	ldrh	r3, [r7, #12]
 800a3c6:	f083 0320 	eor.w	r3, r3, #32
 800a3ca:	81bb      	strh	r3, [r7, #12]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	441a      	add	r2, r3
 800a3d6:	89bb      	ldrh	r3, [r7, #12]
 800a3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	8013      	strh	r3, [r2, #0]
 800a3ec:	e2d5      	b.n	800a99a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a404:	81fb      	strh	r3, [r7, #14]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	441a      	add	r2, r3
 800a410:	89fb      	ldrh	r3, [r7, #14]
 800a412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a41a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a422:	b29b      	uxth	r3, r3
 800a424:	8013      	strh	r3, [r2, #0]
 800a426:	e2b8      	b.n	800a99a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a432:	b29b      	uxth	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	4413      	add	r3, r2
 800a43a:	633b      	str	r3, [r7, #48]	; 0x30
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	011a      	lsls	r2, r3, #4
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	4413      	add	r3, r2
 800a446:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	88db      	ldrh	r3, [r3, #6]
 800a450:	085b      	lsrs	r3, r3, #1
 800a452:	b29b      	uxth	r3, r3
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a466:	b29b      	uxth	r3, r3
 800a468:	461a      	mov	r2, r3
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	4413      	add	r3, r2
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	011a      	lsls	r2, r3, #4
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	4413      	add	r3, r2
 800a47a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	b29b      	uxth	r3, r3
 800a486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b3e      	cmp	r3, #62	; 0x3e
 800a496:	d91d      	bls.n	800a4d4 <USB_ActivateEndpoint+0x2ac>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	095b      	lsrs	r3, r3, #5
 800a49e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f003 031f 	and.w	r3, r3, #31
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <USB_ActivateEndpoint+0x28a>
 800a4ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	029b      	lsls	r3, r3, #10
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	801a      	strh	r2, [r3, #0]
 800a4d2:	e026      	b.n	800a522 <USB_ActivateEndpoint+0x2fa>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <USB_ActivateEndpoint+0x2ca>
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	801a      	strh	r2, [r3, #0]
 800a4f0:	e017      	b.n	800a522 <USB_ActivateEndpoint+0x2fa>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <USB_ActivateEndpoint+0x2e4>
 800a506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a508:	3301      	adds	r3, #1
 800a50a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	b29a      	uxth	r2, r3
 800a512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a514:	b29b      	uxth	r3, r3
 800a516:	029b      	lsls	r3, r3, #10
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01b      	beq.n	800a572 <USB_ActivateEndpoint+0x34a>
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	b29b      	uxth	r3, r3
 800a548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	843b      	strh	r3, [r7, #32]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	441a      	add	r2, r3
 800a55c:	8c3b      	ldrh	r3, [r7, #32]
 800a55e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56e:	b29b      	uxth	r3, r3
 800a570:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d124      	bne.n	800a5c4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	b29b      	uxth	r3, r3
 800a588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a590:	83bb      	strh	r3, [r7, #28]
 800a592:	8bbb      	ldrh	r3, [r7, #28]
 800a594:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a598:	83bb      	strh	r3, [r7, #28]
 800a59a:	8bbb      	ldrh	r3, [r7, #28]
 800a59c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5a0:	83bb      	strh	r3, [r7, #28]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	441a      	add	r2, r3
 800a5ac:	8bbb      	ldrh	r3, [r7, #28]
 800a5ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	8013      	strh	r3, [r2, #0]
 800a5c2:	e1ea      	b.n	800a99a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5da:	83fb      	strh	r3, [r7, #30]
 800a5dc:	8bfb      	ldrh	r3, [r7, #30]
 800a5de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5e2:	83fb      	strh	r3, [r7, #30]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	441a      	add	r2, r3
 800a5ee:	8bfb      	ldrh	r3, [r7, #30]
 800a5f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a600:	b29b      	uxth	r3, r3
 800a602:	8013      	strh	r3, [r2, #0]
 800a604:	e1c9      	b.n	800a99a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	78db      	ldrb	r3, [r3, #3]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d11e      	bne.n	800a64c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a624:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	441a      	add	r2, r3
 800a632:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a63a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a63e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a646:	b29b      	uxth	r3, r3
 800a648:	8013      	strh	r3, [r2, #0]
 800a64a:	e01d      	b.n	800a688 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a662:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	441a      	add	r2, r3
 800a670:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a67c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a684:	b29b      	uxth	r3, r3
 800a686:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a692:	b29b      	uxth	r3, r3
 800a694:	461a      	mov	r2, r3
 800a696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a698:	4413      	add	r3, r2
 800a69a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	011a      	lsls	r2, r3, #4
 800a6a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	891b      	ldrh	r3, [r3, #8]
 800a6b0:	085b      	lsrs	r3, r3, #1
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6ba:	801a      	strh	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	657b      	str	r3, [r7, #84]	; 0x54
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6cc:	4413      	add	r3, r2
 800a6ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	011a      	lsls	r2, r3, #4
 800a6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a6de:	653b      	str	r3, [r7, #80]	; 0x50
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	895b      	ldrh	r3, [r3, #10]
 800a6e4:	085b      	lsrs	r3, r3, #1
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 8093 	bne.w	800a820 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4413      	add	r3, r2
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a70a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a70e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d01b      	beq.n	800a74e <USB_ActivateEndpoint+0x526>
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	b29b      	uxth	r3, r3
 800a724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	441a      	add	r2, r3
 800a738:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a73a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a73e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a75c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01b      	beq.n	800a79e <USB_ActivateEndpoint+0x576>
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	441a      	add	r2, r3
 800a788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a78a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a78e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a796:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7b4:	873b      	strh	r3, [r7, #56]	; 0x38
 800a7b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a7b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a7bc:	873b      	strh	r3, [r7, #56]	; 0x38
 800a7be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a7c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a7c4:	873b      	strh	r3, [r7, #56]	; 0x38
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	441a      	add	r2, r3
 800a7d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a7d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	441a      	add	r2, r3
 800a808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a80a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a80e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	8013      	strh	r3, [r2, #0]
 800a81e:	e0bc      	b.n	800a99a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a830:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01d      	beq.n	800a878 <USB_ActivateEndpoint+0x650>
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a84e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a852:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	441a      	add	r2, r3
 800a860:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a86c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a874:	b29b      	uxth	r3, r3
 800a876:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a888:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a890:	2b00      	cmp	r3, #0
 800a892:	d01d      	beq.n	800a8d0 <USB_ActivateEndpoint+0x6a8>
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	441a      	add	r2, r3
 800a8b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a8bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	78db      	ldrb	r3, [r3, #3]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d024      	beq.n	800a922 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8f6:	f083 0320 	eor.w	r3, r3, #32
 800a8fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	441a      	add	r2, r3
 800a908:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a90c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	8013      	strh	r3, [r2, #0]
 800a920:	e01d      	b.n	800a95e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a938:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	441a      	add	r2, r3
 800a946:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a94a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a94e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	881b      	ldrh	r3, [r3, #0]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a974:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	441a      	add	r2, r3
 800a982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a98a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a98e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a996:	b29b      	uxth	r3, r3
 800a998:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a99a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3774      	adds	r7, #116	; 0x74
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bc80      	pop	{r7}
 800a9a6:	4770      	bx	lr

0800a9a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b08d      	sub	sp, #52	; 0x34
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	7b1b      	ldrb	r3, [r3, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f040 808e 	bne.w	800aad8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d044      	beq.n	800aa4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	81bb      	strh	r3, [r7, #12]
 800a9d2:	89bb      	ldrh	r3, [r7, #12]
 800a9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d01b      	beq.n	800aa14 <USB_DeactivateEndpoint+0x6c>
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4413      	add	r3, r2
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f2:	817b      	strh	r3, [r7, #10]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	441a      	add	r2, r3
 800a9fe:	897b      	ldrh	r3, [r7, #10]
 800aa00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2a:	813b      	strh	r3, [r7, #8]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	441a      	add	r2, r3
 800aa36:	893b      	ldrh	r3, [r7, #8]
 800aa38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	8013      	strh	r3, [r2, #0]
 800aa4c:	e192      	b.n	800ad74 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	827b      	strh	r3, [r7, #18]
 800aa5c:	8a7b      	ldrh	r3, [r7, #18]
 800aa5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d01b      	beq.n	800aa9e <USB_DeactivateEndpoint+0xf6>
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7c:	823b      	strh	r3, [r7, #16]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	441a      	add	r2, r3
 800aa88:	8a3b      	ldrh	r3, [r7, #16]
 800aa8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab4:	81fb      	strh	r3, [r7, #14]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	441a      	add	r2, r3
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	8013      	strh	r3, [r2, #0]
 800aad6:	e14d      	b.n	800ad74 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	785b      	ldrb	r3, [r3, #1]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f040 80a5 	bne.w	800ac2c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	881b      	ldrh	r3, [r3, #0]
 800aaee:	843b      	strh	r3, [r7, #32]
 800aaf0:	8c3b      	ldrh	r3, [r7, #32]
 800aaf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d01b      	beq.n	800ab32 <USB_DeactivateEndpoint+0x18a>
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab10:	83fb      	strh	r3, [r7, #30]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	441a      	add	r2, r3
 800ab1c:	8bfb      	ldrh	r3, [r7, #30]
 800ab1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	83bb      	strh	r3, [r7, #28]
 800ab40:	8bbb      	ldrh	r3, [r7, #28]
 800ab42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01b      	beq.n	800ab82 <USB_DeactivateEndpoint+0x1da>
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab60:	837b      	strh	r3, [r7, #26]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	441a      	add	r2, r3
 800ab6c:	8b7b      	ldrh	r3, [r7, #26]
 800ab6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab98:	833b      	strh	r3, [r7, #24]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	441a      	add	r2, r3
 800aba4:	8b3b      	ldrh	r3, [r7, #24]
 800aba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd0:	82fb      	strh	r3, [r7, #22]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	441a      	add	r2, r3
 800abdc:	8afb      	ldrh	r3, [r7, #22]
 800abde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abee:	b29b      	uxth	r3, r3
 800abf0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac08:	82bb      	strh	r3, [r7, #20]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	441a      	add	r2, r3
 800ac14:	8abb      	ldrh	r3, [r7, #20]
 800ac16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	8013      	strh	r3, [r2, #0]
 800ac2a:	e0a3      	b.n	800ad74 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ac3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d01b      	beq.n	800ac7c <USB_DeactivateEndpoint+0x2d4>
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	441a      	add	r2, r3
 800ac66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ac8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ac8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d01b      	beq.n	800accc <USB_DeactivateEndpoint+0x324>
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acaa:	853b      	strh	r3, [r7, #40]	; 0x28
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	441a      	add	r2, r3
 800acb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acc8:	b29b      	uxth	r3, r3
 800acca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	b29b      	uxth	r3, r3
 800acda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	441a      	add	r2, r3
 800acee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	441a      	add	r2, r3
 800ad26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad52:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	441a      	add	r2, r3
 800ad5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3734      	adds	r7, #52	; 0x34
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc80      	pop	{r7}
 800ad7e:	4770      	bx	lr

0800ad80 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b0c2      	sub	sp, #264	; 0x108
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad8e:	6018      	str	r0, [r3, #0]
 800ad90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad98:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	785b      	ldrb	r3, [r3, #1]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	f040 86b7 	bne.w	800bb1a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800adac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	699a      	ldr	r2, [r3, #24]
 800adb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d908      	bls.n	800adda <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800adc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800add8:	e007      	b.n	800adea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800adda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800adea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	7b1b      	ldrb	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d13a      	bne.n	800ae70 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800adfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6959      	ldr	r1, [r3, #20]
 800ae06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	88da      	ldrh	r2, [r3, #6]
 800ae12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae20:	6800      	ldr	r0, [r0, #0]
 800ae22:	f001 fc9c 	bl	800c75e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ae26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	461a      	mov	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	4413      	add	r3, r2
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	011a      	lsls	r2, r3, #4
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	f000 be1f 	b.w	800baae <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ae70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	78db      	ldrb	r3, [r3, #3]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	f040 8462 	bne.w	800b746 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6a1a      	ldr	r2, [r3, #32]
 800ae8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	f240 83df 	bls.w	800b65e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	441a      	add	r2, r3
 800aee4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6a1a      	ldr	r2, [r3, #32]
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0c:	1ad2      	subs	r2, r2, r3
 800af0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800af1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	b29b      	uxth	r3, r3
 800af38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 81c7 	beq.w	800b2d0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	633b      	str	r3, [r7, #48]	; 0x30
 800af4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	785b      	ldrb	r3, [r3, #1]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d177      	bne.n	800b04e <USB_EPStartXfer+0x2ce>
 800af5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	62bb      	str	r3, [r7, #40]	; 0x28
 800af6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af78:	b29b      	uxth	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	4413      	add	r3, r2
 800af80:	62bb      	str	r3, [r7, #40]	; 0x28
 800af82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	011a      	lsls	r2, r3, #4
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	4413      	add	r3, r2
 800af94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	801a      	strh	r2, [r3, #0]
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afae:	2b3e      	cmp	r3, #62	; 0x3e
 800afb0:	d921      	bls.n	800aff6 <USB_EPStartXfer+0x276>
 800afb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb6:	095b      	lsrs	r3, r3, #5
 800afb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d104      	bne.n	800afd2 <USB_EPStartXfer+0x252>
 800afc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800afcc:	3b01      	subs	r3, #1
 800afce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800afdc:	b29b      	uxth	r3, r3
 800afde:	029b      	lsls	r3, r3, #10
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	4313      	orrs	r3, r2
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afee:	b29a      	uxth	r2, r3
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	801a      	strh	r2, [r3, #0]
 800aff4:	e050      	b.n	800b098 <USB_EPStartXfer+0x318>
 800aff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10a      	bne.n	800b014 <USB_EPStartXfer+0x294>
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	b29b      	uxth	r3, r3
 800b004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	801a      	strh	r2, [r3, #0]
 800b012:	e041      	b.n	800b098 <USB_EPStartXfer+0x318>
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b018:	085b      	lsrs	r3, r3, #1
 800b01a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d004      	beq.n	800b034 <USB_EPStartXfer+0x2b4>
 800b02a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b02e:	3301      	adds	r3, #1
 800b030:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	b29a      	uxth	r2, r3
 800b03a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b03e:	b29b      	uxth	r3, r3
 800b040:	029b      	lsls	r3, r3, #10
 800b042:	b29b      	uxth	r3, r3
 800b044:	4313      	orrs	r3, r2
 800b046:	b29a      	uxth	r2, r3
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	e024      	b.n	800b098 <USB_EPStartXfer+0x318>
 800b04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	785b      	ldrb	r3, [r3, #1]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d11c      	bne.n	800b098 <USB_EPStartXfer+0x318>
 800b05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b062:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	461a      	mov	r2, r3
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	4413      	add	r3, r2
 800b074:	633b      	str	r3, [r7, #48]	; 0x30
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	011a      	lsls	r2, r3, #4
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	4413      	add	r3, r2
 800b088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b092:	b29a      	uxth	r2, r3
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	895b      	ldrh	r3, [r3, #10]
 800b0a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6959      	ldr	r1, [r3, #20]
 800b0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b0be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0c6:	6800      	ldr	r0, [r0, #0]
 800b0c8:	f001 fb49 	bl	800c75e <USB_WritePMA>
            ep->xfer_buff += len;
 800b0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695a      	ldr	r2, [r3, #20]
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0dc:	441a      	add	r2, r3
 800b0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6a1a      	ldr	r2, [r3, #32]
 800b0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	429a      	cmp	r2, r3
 800b104:	d90f      	bls.n	800b126 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b10a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6a1a      	ldr	r2, [r3, #32]
 800b112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	621a      	str	r2, [r3, #32]
 800b124:	e00e      	b.n	800b144 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2200      	movs	r2, #0
 800b142:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	785b      	ldrb	r3, [r3, #1]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d177      	bne.n	800b244 <USB_EPStartXfer+0x4c4>
 800b154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	61bb      	str	r3, [r7, #24]
 800b160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b16e:	b29b      	uxth	r3, r3
 800b170:	461a      	mov	r2, r3
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	4413      	add	r3, r2
 800b176:	61bb      	str	r3, [r7, #24]
 800b178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	011a      	lsls	r2, r3, #4
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	4413      	add	r3, r2
 800b18a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	b29b      	uxth	r3, r3
 800b196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	801a      	strh	r2, [r3, #0]
 800b1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a4:	2b3e      	cmp	r3, #62	; 0x3e
 800b1a6:	d921      	bls.n	800b1ec <USB_EPStartXfer+0x46c>
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ac:	095b      	lsrs	r3, r3, #5
 800b1ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b6:	f003 031f 	and.w	r3, r3, #31
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d104      	bne.n	800b1c8 <USB_EPStartXfer+0x448>
 800b1be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	029b      	lsls	r3, r3, #10
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	801a      	strh	r2, [r3, #0]
 800b1ea:	e056      	b.n	800b29a <USB_EPStartXfer+0x51a>
 800b1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10a      	bne.n	800b20a <USB_EPStartXfer+0x48a>
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b202:	b29a      	uxth	r2, r3
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	801a      	strh	r2, [r3, #0]
 800b208:	e047      	b.n	800b29a <USB_EPStartXfer+0x51a>
 800b20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20e:	085b      	lsrs	r3, r3, #1
 800b210:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <USB_EPStartXfer+0x4aa>
 800b220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b224:	3301      	adds	r3, #1
 800b226:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	b29a      	uxth	r2, r3
 800b230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b234:	b29b      	uxth	r3, r3
 800b236:	029b      	lsls	r3, r3, #10
 800b238:	b29b      	uxth	r3, r3
 800b23a:	4313      	orrs	r3, r2
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	801a      	strh	r2, [r3, #0]
 800b242:	e02a      	b.n	800b29a <USB_EPStartXfer+0x51a>
 800b244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	785b      	ldrb	r3, [r3, #1]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d122      	bne.n	800b29a <USB_EPStartXfer+0x51a>
 800b254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	623b      	str	r3, [r7, #32]
 800b260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b26e:	b29b      	uxth	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	4413      	add	r3, r2
 800b276:	623b      	str	r3, [r7, #32]
 800b278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	011a      	lsls	r2, r3, #4
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	4413      	add	r3, r2
 800b28a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b28e:	61fb      	str	r3, [r7, #28]
 800b290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b294:	b29a      	uxth	r2, r3
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	891b      	ldrh	r3, [r3, #8]
 800b2a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6959      	ldr	r1, [r3, #20]
 800b2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2c8:	6800      	ldr	r0, [r0, #0]
 800b2ca:	f001 fa48 	bl	800c75e <USB_WritePMA>
 800b2ce:	e3ee      	b.n	800baae <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d177      	bne.n	800b3d0 <USB_EPStartXfer+0x650>
 800b2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b300:	4413      	add	r3, r2
 800b302:	64bb      	str	r3, [r7, #72]	; 0x48
 800b304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	011a      	lsls	r2, r3, #4
 800b312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b314:	4413      	add	r3, r2
 800b316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b31a:	647b      	str	r3, [r7, #68]	; 0x44
 800b31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	b29b      	uxth	r3, r3
 800b322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b326:	b29a      	uxth	r2, r3
 800b328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b330:	2b3e      	cmp	r3, #62	; 0x3e
 800b332:	d921      	bls.n	800b378 <USB_EPStartXfer+0x5f8>
 800b334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b338:	095b      	lsrs	r3, r3, #5
 800b33a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b342:	f003 031f 	and.w	r3, r3, #31
 800b346:	2b00      	cmp	r3, #0
 800b348:	d104      	bne.n	800b354 <USB_EPStartXfer+0x5d4>
 800b34a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b34e:	3b01      	subs	r3, #1
 800b350:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	b29a      	uxth	r2, r3
 800b35a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b35e:	b29b      	uxth	r3, r3
 800b360:	029b      	lsls	r3, r3, #10
 800b362:	b29b      	uxth	r3, r3
 800b364:	4313      	orrs	r3, r2
 800b366:	b29b      	uxth	r3, r3
 800b368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b370:	b29a      	uxth	r2, r3
 800b372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b374:	801a      	strh	r2, [r3, #0]
 800b376:	e056      	b.n	800b426 <USB_EPStartXfer+0x6a6>
 800b378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <USB_EPStartXfer+0x616>
 800b380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	b29b      	uxth	r3, r3
 800b386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b38a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b38e:	b29a      	uxth	r2, r3
 800b390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b392:	801a      	strh	r2, [r3, #0]
 800b394:	e047      	b.n	800b426 <USB_EPStartXfer+0x6a6>
 800b396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39a:	085b      	lsrs	r3, r3, #1
 800b39c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <USB_EPStartXfer+0x636>
 800b3ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	029b      	lsls	r3, r3, #10
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3cc:	801a      	strh	r2, [r3, #0]
 800b3ce:	e02a      	b.n	800b426 <USB_EPStartXfer+0x6a6>
 800b3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	785b      	ldrb	r3, [r3, #1]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d122      	bne.n	800b426 <USB_EPStartXfer+0x6a6>
 800b3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	653b      	str	r3, [r7, #80]	; 0x50
 800b3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b400:	4413      	add	r3, r2
 800b402:	653b      	str	r3, [r7, #80]	; 0x50
 800b404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	011a      	lsls	r2, r3, #4
 800b412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b414:	4413      	add	r3, r2
 800b416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b41a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b420:	b29a      	uxth	r2, r3
 800b422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b424:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	891b      	ldrh	r3, [r3, #8]
 800b432:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6959      	ldr	r1, [r3, #20]
 800b442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b446:	b29b      	uxth	r3, r3
 800b448:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b44c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b450:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b454:	6800      	ldr	r0, [r0, #0]
 800b456:	f001 f982 	bl	800c75e <USB_WritePMA>
            ep->xfer_buff += len;
 800b45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	695a      	ldr	r2, [r3, #20]
 800b466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46a:	441a      	add	r2, r3
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6a1a      	ldr	r2, [r3, #32]
 800b484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	429a      	cmp	r2, r3
 800b492:	d90f      	bls.n	800b4b4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6a1a      	ldr	r2, [r3, #32]
 800b4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a4:	1ad2      	subs	r2, r2, r3
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	621a      	str	r2, [r3, #32]
 800b4b2:	e00e      	b.n	800b4d2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	785b      	ldrb	r3, [r3, #1]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d177      	bne.n	800b5de <USB_EPStartXfer+0x85e>
 800b4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b508:	b29b      	uxth	r3, r3
 800b50a:	461a      	mov	r2, r3
 800b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50e:	4413      	add	r3, r2
 800b510:	63bb      	str	r3, [r7, #56]	; 0x38
 800b512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	011a      	lsls	r2, r3, #4
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	4413      	add	r3, r2
 800b524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b528:	637b      	str	r3, [r7, #52]	; 0x34
 800b52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b534:	b29a      	uxth	r2, r3
 800b536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53e:	2b3e      	cmp	r3, #62	; 0x3e
 800b540:	d921      	bls.n	800b586 <USB_EPStartXfer+0x806>
 800b542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b546:	095b      	lsrs	r3, r3, #5
 800b548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b550:	f003 031f 	and.w	r3, r3, #31
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <USB_EPStartXfer+0x7e2>
 800b558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b55c:	3b01      	subs	r3, #1
 800b55e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	b29a      	uxth	r2, r3
 800b568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	029b      	lsls	r3, r3, #10
 800b570:	b29b      	uxth	r3, r3
 800b572:	4313      	orrs	r3, r2
 800b574:	b29b      	uxth	r3, r3
 800b576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b57a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b57e:	b29a      	uxth	r2, r3
 800b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	e050      	b.n	800b628 <USB_EPStartXfer+0x8a8>
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10a      	bne.n	800b5a4 <USB_EPStartXfer+0x824>
 800b58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	b29b      	uxth	r3, r3
 800b594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a0:	801a      	strh	r2, [r3, #0]
 800b5a2:	e041      	b.n	800b628 <USB_EPStartXfer+0x8a8>
 800b5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a8:	085b      	lsrs	r3, r3, #1
 800b5aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <USB_EPStartXfer+0x844>
 800b5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	029b      	lsls	r3, r3, #10
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5da:	801a      	strh	r2, [r3, #0]
 800b5dc:	e024      	b.n	800b628 <USB_EPStartXfer+0x8a8>
 800b5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d11c      	bne.n	800b628 <USB_EPStartXfer+0x8a8>
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	461a      	mov	r2, r3
 800b600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b602:	4413      	add	r3, r2
 800b604:	643b      	str	r3, [r7, #64]	; 0x40
 800b606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	011a      	lsls	r2, r3, #4
 800b614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b616:	4413      	add	r3, r2
 800b618:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b622:	b29a      	uxth	r2, r3
 800b624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b626:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	895b      	ldrh	r3, [r3, #10]
 800b634:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6959      	ldr	r1, [r3, #20]
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b648:	b29b      	uxth	r3, r3
 800b64a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b64e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b652:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b656:	6800      	ldr	r0, [r0, #0]
 800b658:	f001 f881 	bl	800c75e <USB_WritePMA>
 800b65c:	e227      	b.n	800baae <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b694:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	441a      	add	r2, r3
 800b6b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b6b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ea:	4413      	add	r3, r2
 800b6ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	011a      	lsls	r2, r3, #4
 800b6fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6fe:	4413      	add	r3, r2
 800b700:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b704:	65bb      	str	r3, [r7, #88]	; 0x58
 800b706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b70e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	891b      	ldrh	r3, [r3, #8]
 800b71c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6959      	ldr	r1, [r3, #20]
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b730:	b29b      	uxth	r3, r3
 800b732:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b736:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b73a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	f001 f80d 	bl	800c75e <USB_WritePMA>
 800b744:	e1b3      	b.n	800baae <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6a1a      	ldr	r2, [r3, #32]
 800b752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b756:	1ad2      	subs	r2, r2, r3
 800b758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	b29b      	uxth	r3, r3
 800b782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 80c6 	beq.w	800b918 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	673b      	str	r3, [r7, #112]	; 0x70
 800b798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	785b      	ldrb	r3, [r3, #1]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d177      	bne.n	800b898 <USB_EPStartXfer+0xb18>
 800b7a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7c8:	4413      	add	r3, r2
 800b7ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	011a      	lsls	r2, r3, #4
 800b7da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7dc:	4413      	add	r3, r2
 800b7de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b7e2:	667b      	str	r3, [r7, #100]	; 0x64
 800b7e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7f2:	801a      	strh	r2, [r3, #0]
 800b7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f8:	2b3e      	cmp	r3, #62	; 0x3e
 800b7fa:	d921      	bls.n	800b840 <USB_EPStartXfer+0xac0>
 800b7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b800:	095b      	lsrs	r3, r3, #5
 800b802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80a:	f003 031f 	and.w	r3, r3, #31
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d104      	bne.n	800b81c <USB_EPStartXfer+0xa9c>
 800b812:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b816:	3b01      	subs	r3, #1
 800b818:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b81c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	b29a      	uxth	r2, r3
 800b822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b826:	b29b      	uxth	r3, r3
 800b828:	029b      	lsls	r3, r3, #10
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4313      	orrs	r3, r2
 800b82e:	b29b      	uxth	r3, r3
 800b830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b838:	b29a      	uxth	r2, r3
 800b83a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b83c:	801a      	strh	r2, [r3, #0]
 800b83e:	e050      	b.n	800b8e2 <USB_EPStartXfer+0xb62>
 800b840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10a      	bne.n	800b85e <USB_EPStartXfer+0xade>
 800b848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b856:	b29a      	uxth	r2, r3
 800b858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	e041      	b.n	800b8e2 <USB_EPStartXfer+0xb62>
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b862:	085b      	lsrs	r3, r3, #1
 800b864:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	d004      	beq.n	800b87e <USB_EPStartXfer+0xafe>
 800b874:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b878:	3301      	adds	r3, #1
 800b87a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b87e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	b29a      	uxth	r2, r3
 800b884:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b888:	b29b      	uxth	r3, r3
 800b88a:	029b      	lsls	r3, r3, #10
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	b29a      	uxth	r2, r3
 800b892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	e024      	b.n	800b8e2 <USB_EPStartXfer+0xb62>
 800b898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	785b      	ldrb	r3, [r3, #1]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d11c      	bne.n	800b8e2 <USB_EPStartXfer+0xb62>
 800b8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8bc:	4413      	add	r3, r2
 800b8be:	673b      	str	r3, [r7, #112]	; 0x70
 800b8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	011a      	lsls	r2, r3, #4
 800b8ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b8d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	895b      	ldrh	r3, [r3, #10]
 800b8ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6959      	ldr	r1, [r3, #20]
 800b8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b902:	b29b      	uxth	r3, r3
 800b904:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b908:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b90c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b910:	6800      	ldr	r0, [r0, #0]
 800b912:	f000 ff24 	bl	800c75e <USB_WritePMA>
 800b916:	e0ca      	b.n	800baae <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	785b      	ldrb	r3, [r3, #1]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d177      	bne.n	800ba18 <USB_EPStartXfer+0xc98>
 800b928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b942:	b29b      	uxth	r3, r3
 800b944:	461a      	mov	r2, r3
 800b946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b948:	4413      	add	r3, r2
 800b94a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	011a      	lsls	r2, r3, #4
 800b95a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b95c:	4413      	add	r3, r2
 800b95e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b962:	67bb      	str	r3, [r7, #120]	; 0x78
 800b964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b96e:	b29a      	uxth	r2, r3
 800b970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b972:	801a      	strh	r2, [r3, #0]
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	2b3e      	cmp	r3, #62	; 0x3e
 800b97a:	d921      	bls.n	800b9c0 <USB_EPStartXfer+0xc40>
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	095b      	lsrs	r3, r3, #5
 800b982:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98a:	f003 031f 	and.w	r3, r3, #31
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d104      	bne.n	800b99c <USB_EPStartXfer+0xc1c>
 800b992:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b996:	3b01      	subs	r3, #1
 800b998:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b99c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	029b      	lsls	r3, r3, #10
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9bc:	801a      	strh	r2, [r3, #0]
 800b9be:	e05c      	b.n	800ba7a <USB_EPStartXfer+0xcfa>
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <USB_EPStartXfer+0xc5e>
 800b9c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9da:	801a      	strh	r2, [r3, #0]
 800b9dc:	e04d      	b.n	800ba7a <USB_EPStartXfer+0xcfa>
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <USB_EPStartXfer+0xc7e>
 800b9f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	029b      	lsls	r3, r3, #10
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba14:	801a      	strh	r2, [r3, #0]
 800ba16:	e030      	b.n	800ba7a <USB_EPStartXfer+0xcfa>
 800ba18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	785b      	ldrb	r3, [r3, #1]
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d128      	bne.n	800ba7a <USB_EPStartXfer+0xcfa>
 800ba28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	461a      	mov	r2, r3
 800ba48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	011a      	lsls	r2, r3, #4
 800ba60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba64:	4413      	add	r3, r2
 800ba66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ba78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	891b      	ldrh	r3, [r3, #8]
 800ba86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6959      	ldr	r1, [r3, #20]
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800baa0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800baa4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800baa8:	6800      	ldr	r0, [r0, #0]
 800baaa:	f000 fe58 	bl	800c75e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800baae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800babc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad4:	817b      	strh	r3, [r7, #10]
 800bad6:	897b      	ldrh	r3, [r7, #10]
 800bad8:	f083 0310 	eor.w	r3, r3, #16
 800badc:	817b      	strh	r3, [r7, #10]
 800bade:	897b      	ldrh	r3, [r7, #10]
 800bae0:	f083 0320 	eor.w	r3, r3, #32
 800bae4:	817b      	strh	r3, [r7, #10]
 800bae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	441a      	add	r2, r3
 800bb00:	897b      	ldrh	r3, [r7, #10]
 800bb02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	8013      	strh	r3, [r2, #0]
 800bb16:	f000 bcde 	b.w	800c4d6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	7b1b      	ldrb	r3, [r3, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f040 80bb 	bne.w	800bca2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d917      	bls.n	800bb78 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	699a      	ldr	r2, [r3, #24]
 800bb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb68:	1ad2      	subs	r2, r2, r3
 800bb6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	619a      	str	r2, [r3, #24]
 800bb76:	e00e      	b.n	800bb96 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2200      	movs	r2, #0
 800bb94:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbba:	4413      	add	r3, r2
 800bbbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bbc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	011a      	lsls	r2, r3, #4
 800bbce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bbdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbee:	801a      	strh	r2, [r3, #0]
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	2b3e      	cmp	r3, #62	; 0x3e
 800bbf6:	d924      	bls.n	800bc42 <USB_EPStartXfer+0xec2>
 800bbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfc:	095b      	lsrs	r3, r3, #5
 800bbfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc06:	f003 031f 	and.w	r3, r3, #31
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d104      	bne.n	800bc18 <USB_EPStartXfer+0xe98>
 800bc0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc12:	3b01      	subs	r3, #1
 800bc14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	029b      	lsls	r3, r3, #10
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc3c:	801a      	strh	r2, [r3, #0]
 800bc3e:	f000 bc10 	b.w	800c462 <USB_EPStartXfer+0x16e2>
 800bc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10c      	bne.n	800bc64 <USB_EPStartXfer+0xee4>
 800bc4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc60:	801a      	strh	r2, [r3, #0]
 800bc62:	e3fe      	b.n	800c462 <USB_EPStartXfer+0x16e2>
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc68:	085b      	lsrs	r3, r3, #1
 800bc6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <USB_EPStartXfer+0xf04>
 800bc7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc7e:	3301      	adds	r3, #1
 800bc80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	029b      	lsls	r3, r3, #10
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc9e:	801a      	strh	r2, [r3, #0]
 800bca0:	e3df      	b.n	800c462 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	78db      	ldrb	r3, [r3, #3]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	f040 8218 	bne.w	800c0e4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bcb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	785b      	ldrb	r3, [r3, #1]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f040 809d 	bne.w	800be00 <USB_EPStartXfer+0x1080>
 800bcc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	461a      	mov	r2, r3
 800bce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcea:	4413      	add	r3, r2
 800bcec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	011a      	lsls	r2, r3, #4
 800bcfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd02:	4413      	add	r3, r2
 800bd04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd1e:	801a      	strh	r2, [r3, #0]
 800bd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	2b3e      	cmp	r3, #62	; 0x3e
 800bd2e:	d92b      	bls.n	800bd88 <USB_EPStartXfer+0x1008>
 800bd30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	095b      	lsrs	r3, r3, #5
 800bd3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	f003 031f 	and.w	r3, r3, #31
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d104      	bne.n	800bd60 <USB_EPStartXfer+0xfe0>
 800bd56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	029b      	lsls	r3, r3, #10
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	4313      	orrs	r3, r2
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd84:	801a      	strh	r2, [r3, #0]
 800bd86:	e070      	b.n	800be6a <USB_EPStartXfer+0x10ea>
 800bd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10c      	bne.n	800bdb2 <USB_EPStartXfer+0x1032>
 800bd98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bda4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdae:	801a      	strh	r2, [r3, #0]
 800bdb0:	e05b      	b.n	800be6a <USB_EPStartXfer+0x10ea>
 800bdb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <USB_EPStartXfer+0x1062>
 800bdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bddc:	3301      	adds	r3, #1
 800bdde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bde2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	029b      	lsls	r3, r3, #10
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdfc:	801a      	strh	r2, [r3, #0]
 800bdfe:	e034      	b.n	800be6a <USB_EPStartXfer+0x10ea>
 800be00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d12c      	bne.n	800be6a <USB_EPStartXfer+0x10ea>
 800be10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	461a      	mov	r2, r3
 800be30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be34:	4413      	add	r3, r2
 800be36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	011a      	lsls	r2, r3, #4
 800be48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be4c:	4413      	add	r3, r2
 800be4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800be52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	b29a      	uxth	r2, r3
 800be64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800be68:	801a      	strh	r2, [r3, #0]
 800be6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800be78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f040 809d 	bne.w	800bfc4 <USB_EPStartXfer+0x1244>
 800be8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800beae:	4413      	add	r3, r2
 800beb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800beb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	011a      	lsls	r2, r3, #4
 800bec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bec6:	4413      	add	r3, r2
 800bec8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800becc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bed4:	881b      	ldrh	r3, [r3, #0]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bedc:	b29a      	uxth	r2, r3
 800bede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bee2:	801a      	strh	r2, [r3, #0]
 800bee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	2b3e      	cmp	r3, #62	; 0x3e
 800bef2:	d92b      	bls.n	800bf4c <USB_EPStartXfer+0x11cc>
 800bef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	095b      	lsrs	r3, r3, #5
 800bf02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f003 031f 	and.w	r3, r3, #31
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d104      	bne.n	800bf24 <USB_EPStartXfer+0x11a4>
 800bf1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	029b      	lsls	r3, r3, #10
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	4313      	orrs	r3, r2
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf48:	801a      	strh	r2, [r3, #0]
 800bf4a:	e069      	b.n	800c020 <USB_EPStartXfer+0x12a0>
 800bf4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10c      	bne.n	800bf76 <USB_EPStartXfer+0x11f6>
 800bf5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf72:	801a      	strh	r2, [r3, #0]
 800bf74:	e054      	b.n	800c020 <USB_EPStartXfer+0x12a0>
 800bf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	085b      	lsrs	r3, r3, #1
 800bf84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	f003 0301 	and.w	r3, r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <USB_EPStartXfer+0x1226>
 800bf9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bfa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	029b      	lsls	r3, r3, #10
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfc0:	801a      	strh	r2, [r3, #0]
 800bfc2:	e02d      	b.n	800c020 <USB_EPStartXfer+0x12a0>
 800bfc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	785b      	ldrb	r3, [r3, #1]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d125      	bne.n	800c020 <USB_EPStartXfer+0x12a0>
 800bfd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfea:	4413      	add	r3, r2
 800bfec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	011a      	lsls	r2, r3, #4
 800bffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c002:	4413      	add	r3, r2
 800c004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	b29a      	uxth	r2, r3
 800c01a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c01e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 8218 	beq.w	800c462 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4413      	add	r3, r2
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c052:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d005      	beq.n	800c06a <USB_EPStartXfer+0x12ea>
 800c05e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10d      	bne.n	800c086 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c06a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c06e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c072:	2b00      	cmp	r3, #0
 800c074:	f040 81f5 	bne.w	800c462 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c078:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	f040 81ee 	bne.w	800c462 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	441a      	add	r2, r3
 800c0ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	8013      	strh	r3, [r2, #0]
 800c0e2:	e1be      	b.n	800c462 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	78db      	ldrb	r3, [r3, #3]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	f040 81b4 	bne.w	800c45e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	699a      	ldr	r2, [r3, #24]
 800c102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d917      	bls.n	800c142 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	699a      	ldr	r2, [r3, #24]
 800c12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c132:	1ad2      	subs	r2, r2, r3
 800c134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	619a      	str	r2, [r3, #24]
 800c140:	e00e      	b.n	800c160 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2200      	movs	r2, #0
 800c15e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f040 8085 	bne.w	800c27c <USB_EPStartXfer+0x14fc>
 800c172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c18e:	b29b      	uxth	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c196:	4413      	add	r3, r2
 800c198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	011a      	lsls	r2, r3, #4
 800c1aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c1b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1ca:	801a      	strh	r2, [r3, #0]
 800c1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d0:	2b3e      	cmp	r3, #62	; 0x3e
 800c1d2:	d923      	bls.n	800c21c <USB_EPStartXfer+0x149c>
 800c1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d8:	095b      	lsrs	r3, r3, #5
 800c1da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e2:	f003 031f 	and.w	r3, r3, #31
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <USB_EPStartXfer+0x1474>
 800c1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c200:	b29b      	uxth	r3, r3
 800c202:	029b      	lsls	r3, r3, #10
 800c204:	b29b      	uxth	r3, r3
 800c206:	4313      	orrs	r3, r2
 800c208:	b29b      	uxth	r3, r3
 800c20a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c20e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c212:	b29a      	uxth	r2, r3
 800c214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c218:	801a      	strh	r2, [r3, #0]
 800c21a:	e060      	b.n	800c2de <USB_EPStartXfer+0x155e>
 800c21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10c      	bne.n	800c23e <USB_EPStartXfer+0x14be>
 800c224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c234:	b29a      	uxth	r2, r3
 800c236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c23a:	801a      	strh	r2, [r3, #0]
 800c23c:	e04f      	b.n	800c2de <USB_EPStartXfer+0x155e>
 800c23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c242:	085b      	lsrs	r3, r3, #1
 800c244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <USB_EPStartXfer+0x14de>
 800c254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c258:	3301      	adds	r3, #1
 800c25a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c25e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	b29a      	uxth	r2, r3
 800c266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	029b      	lsls	r3, r3, #10
 800c26e:	b29b      	uxth	r3, r3
 800c270:	4313      	orrs	r3, r2
 800c272:	b29a      	uxth	r2, r3
 800c274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c278:	801a      	strh	r2, [r3, #0]
 800c27a:	e030      	b.n	800c2de <USB_EPStartXfer+0x155e>
 800c27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d128      	bne.n	800c2de <USB_EPStartXfer+0x155e>
 800c28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c29e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	011a      	lsls	r2, r3, #4
 800c2c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c2ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c2dc:	801a      	strh	r2, [r3, #0]
 800c2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	785b      	ldrb	r3, [r3, #1]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f040 8085 	bne.w	800c408 <USB_EPStartXfer+0x1688>
 800c2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	461a      	mov	r2, r3
 800c31e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c322:	4413      	add	r3, r2
 800c324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	011a      	lsls	r2, r3, #4
 800c336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c33a:	4413      	add	r3, r2
 800c33c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c350:	b29a      	uxth	r2, r3
 800c352:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c356:	801a      	strh	r2, [r3, #0]
 800c358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c35c:	2b3e      	cmp	r3, #62	; 0x3e
 800c35e:	d923      	bls.n	800c3a8 <USB_EPStartXfer+0x1628>
 800c360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c364:	095b      	lsrs	r3, r3, #5
 800c366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c36e:	f003 031f 	and.w	r3, r3, #31
 800c372:	2b00      	cmp	r3, #0
 800c374:	d104      	bne.n	800c380 <USB_EPStartXfer+0x1600>
 800c376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c37a:	3b01      	subs	r3, #1
 800c37c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	b29a      	uxth	r2, r3
 800c388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	029b      	lsls	r3, r3, #10
 800c390:	b29b      	uxth	r3, r3
 800c392:	4313      	orrs	r3, r2
 800c394:	b29b      	uxth	r3, r3
 800c396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c39a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3a4:	801a      	strh	r2, [r3, #0]
 800c3a6:	e05c      	b.n	800c462 <USB_EPStartXfer+0x16e2>
 800c3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10c      	bne.n	800c3ca <USB_EPStartXfer+0x164a>
 800c3b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3c6:	801a      	strh	r2, [r3, #0]
 800c3c8:	e04b      	b.n	800c462 <USB_EPStartXfer+0x16e2>
 800c3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ce:	085b      	lsrs	r3, r3, #1
 800c3d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d004      	beq.n	800c3ea <USB_EPStartXfer+0x166a>
 800c3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3ee:	881b      	ldrh	r3, [r3, #0]
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	029b      	lsls	r3, r3, #10
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c404:	801a      	strh	r2, [r3, #0]
 800c406:	e02c      	b.n	800c462 <USB_EPStartXfer+0x16e2>
 800c408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	785b      	ldrb	r3, [r3, #1]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d124      	bne.n	800c462 <USB_EPStartXfer+0x16e2>
 800c418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c426:	b29b      	uxth	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c42e:	4413      	add	r3, r2
 800c430:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	011a      	lsls	r2, r3, #4
 800c442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c446:	4413      	add	r3, r2
 800c448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c44c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c454:	b29a      	uxth	r2, r3
 800c456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c45a:	801a      	strh	r2, [r3, #0]
 800c45c:	e001      	b.n	800c462 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e03a      	b.n	800c4d8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	881b      	ldrh	r3, [r3, #0]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c488:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c48c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c494:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c49c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c4a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	441a      	add	r2, r3
 800c4be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c4c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b085      	sub	sp, #20
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	785b      	ldrb	r3, [r3, #1]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d020      	beq.n	800c536 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	b29b      	uxth	r3, r3
 800c502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c50a:	81bb      	strh	r3, [r7, #12]
 800c50c:	89bb      	ldrh	r3, [r7, #12]
 800c50e:	f083 0310 	eor.w	r3, r3, #16
 800c512:	81bb      	strh	r3, [r7, #12]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	441a      	add	r2, r3
 800c51e:	89bb      	ldrh	r3, [r7, #12]
 800c520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c530:	b29b      	uxth	r3, r3
 800c532:	8013      	strh	r3, [r2, #0]
 800c534:	e01f      	b.n	800c576 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	b29b      	uxth	r3, r3
 800c544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54c:	81fb      	strh	r3, [r7, #14]
 800c54e:	89fb      	ldrh	r3, [r7, #14]
 800c550:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c554:	81fb      	strh	r3, [r7, #14]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	441a      	add	r2, r3
 800c560:	89fb      	ldrh	r3, [r7, #14]
 800c562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c572:	b29b      	uxth	r3, r3
 800c574:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bc80      	pop	{r7}
 800c580:	4770      	bx	lr

0800c582 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c582:	b480      	push	{r7}
 800c584:	b087      	sub	sp, #28
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	7b1b      	ldrb	r3, [r3, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f040 809d 	bne.w	800c6d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d04c      	beq.n	800c638 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	823b      	strh	r3, [r7, #16]
 800c5ac:	8a3b      	ldrh	r3, [r7, #16]
 800c5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d01b      	beq.n	800c5ee <USB_EPClearStall+0x6c>
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4413      	add	r3, r2
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5cc:	81fb      	strh	r3, [r7, #14]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	441a      	add	r2, r3
 800c5d8:	89fb      	ldrh	r3, [r7, #14]
 800c5da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	78db      	ldrb	r3, [r3, #3]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d06c      	beq.n	800c6d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	4413      	add	r3, r2
 800c600:	881b      	ldrh	r3, [r3, #0]
 800c602:	b29b      	uxth	r3, r3
 800c604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c60c:	81bb      	strh	r3, [r7, #12]
 800c60e:	89bb      	ldrh	r3, [r7, #12]
 800c610:	f083 0320 	eor.w	r3, r3, #32
 800c614:	81bb      	strh	r3, [r7, #12]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	441a      	add	r2, r3
 800c620:	89bb      	ldrh	r3, [r7, #12]
 800c622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c62a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c632:	b29b      	uxth	r3, r3
 800c634:	8013      	strh	r3, [r2, #0]
 800c636:	e04b      	b.n	800c6d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	82fb      	strh	r3, [r7, #22]
 800c646:	8afb      	ldrh	r3, [r7, #22]
 800c648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d01b      	beq.n	800c688 <USB_EPClearStall+0x106>
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c666:	82bb      	strh	r3, [r7, #20]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	441a      	add	r2, r3
 800c672:	8abb      	ldrh	r3, [r7, #20]
 800c674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c67c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c684:	b29b      	uxth	r3, r3
 800c686:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	b29b      	uxth	r3, r3
 800c696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69e:	827b      	strh	r3, [r7, #18]
 800c6a0:	8a7b      	ldrh	r3, [r7, #18]
 800c6a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c6a6:	827b      	strh	r3, [r7, #18]
 800c6a8:	8a7b      	ldrh	r3, [r7, #18]
 800c6aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c6ae:	827b      	strh	r3, [r7, #18]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	441a      	add	r2, r3
 800c6ba:	8a7b      	ldrh	r3, [r7, #18]
 800c6bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	371c      	adds	r7, #28
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bc80      	pop	{r7}
 800c6da:	4770      	bx	lr

0800c6dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c6e8:	78fb      	ldrb	r3, [r7, #3]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d103      	bne.n	800c6f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2280      	movs	r2, #128	; 0x80
 800c6f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bc80      	pop	{r7}
 800c700:	4770      	bx	lr

0800c702 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	bc80      	pop	{r7}
 800c714:	4770      	bx	lr

0800c716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr

0800c72a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b085      	sub	sp, #20
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c738:	b29b      	uxth	r3, r3
 800c73a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c73c:	68fb      	ldr	r3, [r7, #12]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr

0800c748 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	bc80      	pop	{r7}
 800c75c:	4770      	bx	lr

0800c75e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c75e:	b480      	push	{r7}
 800c760:	b08b      	sub	sp, #44	; 0x2c
 800c762:	af00      	add	r7, sp, #0
 800c764:	60f8      	str	r0, [r7, #12]
 800c766:	60b9      	str	r1, [r7, #8]
 800c768:	4611      	mov	r1, r2
 800c76a:	461a      	mov	r2, r3
 800c76c:	460b      	mov	r3, r1
 800c76e:	80fb      	strh	r3, [r7, #6]
 800c770:	4613      	mov	r3, r2
 800c772:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c774:	88bb      	ldrh	r3, [r7, #4]
 800c776:	3301      	adds	r3, #1
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c784:	88fb      	ldrh	r3, [r7, #6]
 800c786:	005a      	lsls	r2, r3, #1
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	4413      	add	r3, r2
 800c78c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c790:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
 800c796:	e01e      	b.n	800c7d6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	021b      	lsls	r3, r3, #8
 800c7a6:	b21a      	sxth	r2, r3
 800c7a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	b21b      	sxth	r3, r3
 800c7b0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	8a7a      	ldrh	r2, [r7, #18]
 800c7b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	3302      	adds	r3, #2
 800c7bc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	3302      	adds	r3, #2
 800c7c2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1dd      	bne.n	800c798 <USB_WritePMA+0x3a>
  }
}
 800c7dc:	bf00      	nop
 800c7de:	bf00      	nop
 800c7e0:	372c      	adds	r7, #44	; 0x2c
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bc80      	pop	{r7}
 800c7e6:	4770      	bx	lr

0800c7e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b08b      	sub	sp, #44	; 0x2c
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	80fb      	strh	r3, [r7, #6]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c7fe:	88bb      	ldrh	r3, [r7, #4]
 800c800:	085b      	lsrs	r3, r3, #1
 800c802:	b29b      	uxth	r3, r3
 800c804:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c80e:	88fb      	ldrh	r3, [r7, #6]
 800c810:	005a      	lsls	r2, r3, #1
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	4413      	add	r3, r2
 800c816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c81a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	627b      	str	r3, [r7, #36]	; 0x24
 800c820:	e01b      	b.n	800c85a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	b29b      	uxth	r3, r3
 800c828:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	3302      	adds	r3, #2
 800c82e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	b2da      	uxtb	r2, r3
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	3301      	adds	r3, #1
 800c83c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	0a1b      	lsrs	r3, r3, #8
 800c842:	b2da      	uxtb	r2, r3
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	3301      	adds	r3, #1
 800c84c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c84e:	6a3b      	ldr	r3, [r7, #32]
 800c850:	3302      	adds	r3, #2
 800c852:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	3b01      	subs	r3, #1
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e0      	bne.n	800c822 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c860:	88bb      	ldrh	r3, [r7, #4]
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	b29b      	uxth	r3, r3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d007      	beq.n	800c87c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	b29b      	uxth	r3, r3
 800c872:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	b2da      	uxtb	r2, r3
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	701a      	strb	r2, [r3, #0]
  }
}
 800c87c:	bf00      	nop
 800c87e:	372c      	adds	r7, #44	; 0x2c
 800c880:	46bd      	mov	sp, r7
 800c882:	bc80      	pop	{r7}
 800c884:	4770      	bx	lr
	...

0800c888 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c88c:	4904      	ldr	r1, [pc, #16]	; (800c8a0 <MX_FATFS_Init+0x18>)
 800c88e:	4805      	ldr	r0, [pc, #20]	; (800c8a4 <MX_FATFS_Init+0x1c>)
 800c890:	f004 f844 	bl	801091c <FATFS_LinkDriver>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	4b03      	ldr	r3, [pc, #12]	; (800c8a8 <MX_FATFS_Init+0x20>)
 800c89a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c89c:	bf00      	nop
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	20000e40 	.word	0x20000e40
 800c8a4:	0802d748 	.word	0x0802d748
 800c8a8:	20000e3c 	.word	0x20000e3c

0800c8ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c8b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bc80      	pop	{r7}
 800c8b8:	4770      	bx	lr
	...

0800c8bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c8c6:	f000 f879 	bl	800c9bc <BSP_SD_IsDetected>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d001      	beq.n	800c8d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e012      	b.n	800c8fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c8d4:	480b      	ldr	r0, [pc, #44]	; (800c904 <BSP_SD_Init+0x48>)
 800c8d6:	f7fa fd7f 	bl	80073d8 <HAL_SD_Init>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c8de:	79fb      	ldrb	r3, [r7, #7]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d109      	bne.n	800c8f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c8e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c8e8:	4806      	ldr	r0, [pc, #24]	; (800c904 <BSP_SD_Init+0x48>)
 800c8ea:	f7fb fb59 	bl	8007fa0 <HAL_SD_ConfigWideBusOperation>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c8f8:	79fb      	ldrb	r3, [r7, #7]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20000828 	.word	0x20000828

0800c908 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b088      	sub	sp, #32
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
 800c914:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	68f9      	ldr	r1, [r7, #12]
 800c924:	4806      	ldr	r0, [pc, #24]	; (800c940 <BSP_SD_ReadBlocks+0x38>)
 800c926:	f7fa fe07 	bl	8007538 <HAL_SD_ReadBlocks>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20000828 	.word	0x20000828

0800c944 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af02      	add	r7, sp, #8
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	68f9      	ldr	r1, [r7, #12]
 800c960:	4806      	ldr	r0, [pc, #24]	; (800c97c <BSP_SD_WriteBlocks+0x38>)
 800c962:	f7fa ffc7 	bl	80078f4 <HAL_SD_WriteBlocks>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d001      	beq.n	800c970 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c970:	7dfb      	ldrb	r3, [r7, #23]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20000828 	.word	0x20000828

0800c980 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c984:	4805      	ldr	r0, [pc, #20]	; (800c99c <BSP_SD_GetCardState+0x1c>)
 800c986:	f7fb fba5 	bl	80080d4 <HAL_SD_GetCardState>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	bf14      	ite	ne
 800c990:	2301      	movne	r3, #1
 800c992:	2300      	moveq	r3, #0
 800c994:	b2db      	uxtb	r3, r3
}
 800c996:	4618      	mov	r0, r3
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20000828 	.word	0x20000828

0800c9a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c9a8:	6879      	ldr	r1, [r7, #4]
 800c9aa:	4803      	ldr	r0, [pc, #12]	; (800c9b8 <BSP_SD_GetCardInfo+0x18>)
 800c9ac:	f7fb facc 	bl	8007f48 <HAL_SD_GetCardInfo>
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20000828 	.word	0x20000828

0800c9bc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	b2db      	uxtb	r3, r3
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bc80      	pop	{r7}
 800c9d2:	4770      	bx	lr

0800c9d4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800c9e0:	2304      	movs	r3, #4
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	2181      	movs	r1, #129	; 0x81
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f004 faef 	bl	8010fca <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800c9f2:	2010      	movs	r0, #16
 800c9f4:	f004 fbfe 	bl	80111f4 <USBD_static_malloc>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	e005      	b.n	800ca1a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca14:	2200      	movs	r2, #0
 800ca16:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800ca2e:	2181      	movs	r1, #129	; 0x81
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f004 faf0 	bl	8011016 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d009      	beq.n	800ca5a <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f004 fbdd 	bl	801120c <USBD_static_free>
    pdev->pClassData = NULL;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca74:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800ca76:	2300      	movs	r3, #0
 800ca78:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d045      	beq.n	800cb1e <USBD_HID_Setup+0xba>
 800ca92:	2b20      	cmp	r3, #32
 800ca94:	f040 80d3 	bne.w	800cc3e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	785b      	ldrb	r3, [r3, #1]
 800ca9c:	3b02      	subs	r3, #2
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d835      	bhi.n	800cb0e <USBD_HID_Setup+0xaa>
 800caa2:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <USBD_HID_Setup+0x44>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800caff 	.word	0x0800caff
 800caac:	0800cadf 	.word	0x0800cadf
 800cab0:	0800cb0f 	.word	0x0800cb0f
 800cab4:	0800cb0f 	.word	0x0800cb0f
 800cab8:	0800cb0f 	.word	0x0800cb0f
 800cabc:	0800cb0f 	.word	0x0800cb0f
 800cac0:	0800cb0f 	.word	0x0800cb0f
 800cac4:	0800cb0f 	.word	0x0800cb0f
 800cac8:	0800caed 	.word	0x0800caed
 800cacc:	0800cad1 	.word	0x0800cad1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	885b      	ldrh	r3, [r3, #2]
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	461a      	mov	r2, r3
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	601a      	str	r2, [r3, #0]
          break;
 800cadc:	e01e      	b.n	800cb1c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	2201      	movs	r2, #1
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f001 f922 	bl	800dd2e <USBD_CtlSendData>
          break;
 800caea:	e017      	b.n	800cb1c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	885b      	ldrh	r3, [r3, #2]
 800caf0:	0a1b      	lsrs	r3, r3, #8
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	461a      	mov	r2, r3
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	605a      	str	r2, [r3, #4]
          break;
 800cafc:	e00e      	b.n	800cb1c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	3304      	adds	r3, #4
 800cb02:	2201      	movs	r2, #1
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 f911 	bl	800dd2e <USBD_CtlSendData>
          break;
 800cb0c:	e006      	b.n	800cb1c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f001 f8a2 	bl	800dc5a <USBD_CtlError>
          ret = USBD_FAIL;
 800cb16:	2302      	movs	r3, #2
 800cb18:	75fb      	strb	r3, [r7, #23]
          break;
 800cb1a:	bf00      	nop
      }
      break;
 800cb1c:	e096      	b.n	800cc4c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	785b      	ldrb	r3, [r3, #1]
 800cb22:	2b0b      	cmp	r3, #11
 800cb24:	f200 8083 	bhi.w	800cc2e <USBD_HID_Setup+0x1ca>
 800cb28:	a201      	add	r2, pc, #4	; (adr r2, 800cb30 <USBD_HID_Setup+0xcc>)
 800cb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2e:	bf00      	nop
 800cb30:	0800cb61 	.word	0x0800cb61
 800cb34:	0800cc2f 	.word	0x0800cc2f
 800cb38:	0800cc2f 	.word	0x0800cc2f
 800cb3c:	0800cc2f 	.word	0x0800cc2f
 800cb40:	0800cc2f 	.word	0x0800cc2f
 800cb44:	0800cc2f 	.word	0x0800cc2f
 800cb48:	0800cb89 	.word	0x0800cb89
 800cb4c:	0800cc2f 	.word	0x0800cc2f
 800cb50:	0800cc2f 	.word	0x0800cc2f
 800cb54:	0800cc2f 	.word	0x0800cc2f
 800cb58:	0800cbe1 	.word	0x0800cbe1
 800cb5c:	0800cc09 	.word	0x0800cc09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	d107      	bne.n	800cb7a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800cb6a:	f107 030e 	add.w	r3, r7, #14
 800cb6e:	2202      	movs	r2, #2
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f001 f8db 	bl	800dd2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb78:	e060      	b.n	800cc3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 f86c 	bl	800dc5a <USBD_CtlError>
            ret = USBD_FAIL;
 800cb82:	2302      	movs	r3, #2
 800cb84:	75fb      	strb	r3, [r7, #23]
          break;
 800cb86:	e059      	b.n	800cc3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	885b      	ldrh	r3, [r3, #2]
 800cb8c:	0a1b      	lsrs	r3, r3, #8
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	2b22      	cmp	r3, #34	; 0x22
 800cb92:	d108      	bne.n	800cba6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	88db      	ldrh	r3, [r3, #6]
 800cb98:	2b4a      	cmp	r3, #74	; 0x4a
 800cb9a:	bf28      	it	cs
 800cb9c:	234a      	movcs	r3, #74	; 0x4a
 800cb9e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800cba0:	4b2d      	ldr	r3, [pc, #180]	; (800cc58 <USBD_HID_Setup+0x1f4>)
 800cba2:	61bb      	str	r3, [r7, #24]
 800cba4:	e015      	b.n	800cbd2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	885b      	ldrh	r3, [r3, #2]
 800cbaa:	0a1b      	lsrs	r3, r3, #8
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	2b21      	cmp	r3, #33	; 0x21
 800cbb0:	d108      	bne.n	800cbc4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800cbb2:	4b2a      	ldr	r3, [pc, #168]	; (800cc5c <USBD_HID_Setup+0x1f8>)
 800cbb4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	88db      	ldrh	r3, [r3, #6]
 800cbba:	2b09      	cmp	r3, #9
 800cbbc:	bf28      	it	cs
 800cbbe:	2309      	movcs	r3, #9
 800cbc0:	83fb      	strh	r3, [r7, #30]
 800cbc2:	e006      	b.n	800cbd2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f001 f847 	bl	800dc5a <USBD_CtlError>
            ret = USBD_FAIL;
 800cbcc:	2302      	movs	r3, #2
 800cbce:	75fb      	strb	r3, [r7, #23]
            break;
 800cbd0:	e034      	b.n	800cc3c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800cbd2:	8bfb      	ldrh	r3, [r7, #30]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	69b9      	ldr	r1, [r7, #24]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f001 f8a8 	bl	800dd2e <USBD_CtlSendData>
          break;
 800cbde:	e02d      	b.n	800cc3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d107      	bne.n	800cbfa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	3308      	adds	r3, #8
 800cbee:	2201      	movs	r2, #1
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f001 f89b 	bl	800dd2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cbf8:	e020      	b.n	800cc3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f001 f82c 	bl	800dc5a <USBD_CtlError>
            ret = USBD_FAIL;
 800cc02:	2302      	movs	r3, #2
 800cc04:	75fb      	strb	r3, [r7, #23]
          break;
 800cc06:	e019      	b.n	800cc3c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d106      	bne.n	800cc20 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	885b      	ldrh	r3, [r3, #2]
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	461a      	mov	r2, r3
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc1e:	e00d      	b.n	800cc3c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f001 f819 	bl	800dc5a <USBD_CtlError>
            ret = USBD_FAIL;
 800cc28:	2302      	movs	r3, #2
 800cc2a:	75fb      	strb	r3, [r7, #23]
          break;
 800cc2c:	e006      	b.n	800cc3c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 f812 	bl	800dc5a <USBD_CtlError>
          ret = USBD_FAIL;
 800cc36:	2302      	movs	r3, #2
 800cc38:	75fb      	strb	r3, [r7, #23]
          break;
 800cc3a:	bf00      	nop
      }
      break;
 800cc3c:	e006      	b.n	800cc4c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f001 f80a 	bl	800dc5a <USBD_CtlError>
      ret = USBD_FAIL;
 800cc46:	2302      	movs	r3, #2
 800cc48:	75fb      	strb	r3, [r7, #23]
      break;
 800cc4a:	bf00      	nop
  }

  return ret;
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	200000d8 	.word	0x200000d8
 800cc5c:	200000c0 	.word	0x200000c0

0800cc60 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2222      	movs	r2, #34	; 0x22
 800cc6c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800cc6e:	4b03      	ldr	r3, [pc, #12]	; (800cc7c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bc80      	pop	{r7}
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20000054 	.word	0x20000054

0800cc80 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2222      	movs	r2, #34	; 0x22
 800cc8c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800cc8e:	4b03      	ldr	r3, [pc, #12]	; (800cc9c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bc80      	pop	{r7}
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	20000078 	.word	0x20000078

0800cca0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2222      	movs	r2, #34	; 0x22
 800ccac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800ccae:	4b03      	ldr	r3, [pc, #12]	; (800ccbc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bc80      	pop	{r7}
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	2000009c 	.word	0x2000009c

0800ccc0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bc80      	pop	{r7}
 800cce0:	4770      	bx	lr
	...

0800cce4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	220a      	movs	r2, #10
 800ccf0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800ccf2:	4b03      	ldr	r3, [pc, #12]	; (800cd00 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bc80      	pop	{r7}
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	200000cc 	.word	0x200000cc

0800cd04 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e01a      	b.n	800cd52 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d003      	beq.n	800cd3c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	79fa      	ldrb	r2, [r7, #7]
 800cd48:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f004 f8da 	bl	8010f04 <USBD_LL_Init>

  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d006      	beq.n	800cd7c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	73fb      	strb	r3, [r7, #15]
 800cd7a:	e001      	b.n	800cd80 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bc80      	pop	{r7}
 800cd8a:	4770      	bx	lr

0800cd8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f004 f8fd 	bl	8010f94 <USBD_LL_Start>

  return USBD_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bc80      	pop	{r7}
 800cdb6:	4770      	bx	lr

0800cdb8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00c      	beq.n	800cdec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	78fa      	ldrb	r2, [r7, #3]
 800cddc:	4611      	mov	r1, r2
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	4798      	blx	r3
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b082      	sub	sp, #8
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	78fa      	ldrb	r2, [r7, #3]
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	4798      	blx	r3

  return USBD_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 fed7 	bl	800dbe2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ce42:	461a      	mov	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ce50:	f003 031f 	and.w	r3, r3, #31
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d016      	beq.n	800ce86 <USBD_LL_SetupStage+0x6a>
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d81c      	bhi.n	800ce96 <USBD_LL_SetupStage+0x7a>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <USBD_LL_SetupStage+0x4a>
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d008      	beq.n	800ce76 <USBD_LL_SetupStage+0x5a>
 800ce64:	e017      	b.n	800ce96 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f9ca 	bl	800d208 <USBD_StdDevReq>
      break;
 800ce74:	e01a      	b.n	800ceac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fa2c 	bl	800d2dc <USBD_StdItfReq>
      break;
 800ce84:	e012      	b.n	800ceac <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa6c 	bl	800d36c <USBD_StdEPReq>
      break;
 800ce94:	e00a      	b.n	800ceac <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ce9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f004 f8d5 	bl	8011054 <USBD_LL_StallEP>
      break;
 800ceaa:	bf00      	nop
  }

  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b086      	sub	sp, #24
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	460b      	mov	r3, r1
 800cec0:	607a      	str	r2, [r7, #4]
 800cec2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cec4:	7afb      	ldrb	r3, [r7, #11]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d14b      	bne.n	800cf62 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ced0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d134      	bne.n	800cf46 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	68da      	ldr	r2, [r3, #12]
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d919      	bls.n	800cf1c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	1ad2      	subs	r2, r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	68da      	ldr	r2, [r3, #12]
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d203      	bcs.n	800cf0a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	e002      	b.n	800cf10 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	461a      	mov	r2, r3
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 ff38 	bl	800dd8a <USBD_CtlContinueRx>
 800cf1a:	e038      	b.n	800cf8e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00a      	beq.n	800cf3e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cf2e:	2b03      	cmp	r3, #3
 800cf30:	d105      	bne.n	800cf3e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 ff35 	bl	800ddae <USBD_CtlSendStatus>
 800cf44:	e023      	b.n	800cf8e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf4c:	2b05      	cmp	r3, #5
 800cf4e:	d11e      	bne.n	800cf8e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cf58:	2100      	movs	r1, #0
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f004 f87a 	bl	8011054 <USBD_LL_StallEP>
 800cf60:	e015      	b.n	800cf8e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00d      	beq.n	800cf8a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d108      	bne.n	800cf8a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf7e:	699b      	ldr	r3, [r3, #24]
 800cf80:	7afa      	ldrb	r2, [r7, #11]
 800cf82:	4611      	mov	r1, r2
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	4798      	blx	r3
 800cf88:	e001      	b.n	800cf8e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	e000      	b.n	800cf90 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cfa6:	7afb      	ldrb	r3, [r7, #11]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d17f      	bne.n	800d0ac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3314      	adds	r3, #20
 800cfb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d15c      	bne.n	800d076 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	68da      	ldr	r2, [r3, #12]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d915      	bls.n	800cff4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	68da      	ldr	r2, [r3, #12]
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	1ad2      	subs	r2, r2, r3
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	461a      	mov	r2, r3
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 fec0 	bl	800dd66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f004 f8dd 	bl	80111ac <USBD_LL_PrepareReceive>
 800cff2:	e04e      	b.n	800d092 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	6912      	ldr	r2, [r2, #16]
 800cffc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d000:	fb01 f202 	mul.w	r2, r1, r2
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	2b00      	cmp	r3, #0
 800d008:	d11c      	bne.n	800d044 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d012:	429a      	cmp	r2, r3
 800d014:	d316      	bcc.n	800d044 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	689a      	ldr	r2, [r3, #8]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d020:	429a      	cmp	r2, r3
 800d022:	d20f      	bcs.n	800d044 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d024:	2200      	movs	r2, #0
 800d026:	2100      	movs	r1, #0
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f000 fe9c 	bl	800dd66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d036:	2300      	movs	r3, #0
 800d038:	2200      	movs	r2, #0
 800d03a:	2100      	movs	r1, #0
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f004 f8b5 	bl	80111ac <USBD_LL_PrepareReceive>
 800d042:	e026      	b.n	800d092 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00a      	beq.n	800d066 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d056:	2b03      	cmp	r3, #3
 800d058:	d105      	bne.n	800d066 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d066:	2180      	movs	r1, #128	; 0x80
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	f003 fff3 	bl	8011054 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f000 feb0 	bl	800ddd4 <USBD_CtlReceiveStatus>
 800d074:	e00d      	b.n	800d092 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	d004      	beq.n	800d08a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d086:	2b00      	cmp	r3, #0
 800d088:	d103      	bne.n	800d092 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d08a:	2180      	movs	r1, #128	; 0x80
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f003 ffe1 	bl	8011054 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d11d      	bne.n	800d0d8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff fe81 	bl	800cda4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d0aa:	e015      	b.n	800d0d8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0b2:	695b      	ldr	r3, [r3, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00d      	beq.n	800d0d4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d108      	bne.n	800d0d4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	7afa      	ldrb	r2, [r7, #11]
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	4798      	blx	r3
 800d0d2:	e001      	b.n	800d0d8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	e000      	b.n	800d0da <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0ea:	2340      	movs	r3, #64	; 0x40
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f003 ff6a 	bl	8010fca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2240      	movs	r2, #64	; 0x40
 800d102:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d106:	2340      	movs	r3, #64	; 0x40
 800d108:	2200      	movs	r2, #0
 800d10a:	2180      	movs	r1, #128	; 0x80
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f003 ff5c 	bl	8010fca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2201      	movs	r2, #1
 800d116:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2240      	movs	r2, #64	; 0x40
 800d11c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d142:	2b00      	cmp	r3, #0
 800d144:	d009      	beq.n	800d15a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	6852      	ldr	r2, [r2, #4]
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	4611      	mov	r1, r2
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	4798      	blx	r3
  }

  return USBD_OK;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	78fa      	ldrb	r2, [r7, #3]
 800d174:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bc80      	pop	{r7}
 800d180:	4770      	bx	lr

0800d182 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2204      	movs	r2, #4
 800d19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bc80      	pop	{r7}
 800d1a8:	4770      	bx	lr

0800d1aa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b083      	sub	sp, #12
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b8:	2b04      	cmp	r3, #4
 800d1ba:	d105      	bne.n	800d1c8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bc80      	pop	{r7}
 800d1d2:	4770      	bx	lr

0800d1d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d10b      	bne.n	800d1fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d005      	beq.n	800d1fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d21e:	2b40      	cmp	r3, #64	; 0x40
 800d220:	d005      	beq.n	800d22e <USBD_StdDevReq+0x26>
 800d222:	2b40      	cmp	r3, #64	; 0x40
 800d224:	d84f      	bhi.n	800d2c6 <USBD_StdDevReq+0xbe>
 800d226:	2b00      	cmp	r3, #0
 800d228:	d009      	beq.n	800d23e <USBD_StdDevReq+0x36>
 800d22a:	2b20      	cmp	r3, #32
 800d22c:	d14b      	bne.n	800d2c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	6839      	ldr	r1, [r7, #0]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	4798      	blx	r3
      break;
 800d23c:	e048      	b.n	800d2d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	785b      	ldrb	r3, [r3, #1]
 800d242:	2b09      	cmp	r3, #9
 800d244:	d839      	bhi.n	800d2ba <USBD_StdDevReq+0xb2>
 800d246:	a201      	add	r2, pc, #4	; (adr r2, 800d24c <USBD_StdDevReq+0x44>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d29d 	.word	0x0800d29d
 800d250:	0800d2b1 	.word	0x0800d2b1
 800d254:	0800d2bb 	.word	0x0800d2bb
 800d258:	0800d2a7 	.word	0x0800d2a7
 800d25c:	0800d2bb 	.word	0x0800d2bb
 800d260:	0800d27f 	.word	0x0800d27f
 800d264:	0800d275 	.word	0x0800d275
 800d268:	0800d2bb 	.word	0x0800d2bb
 800d26c:	0800d293 	.word	0x0800d293
 800d270:	0800d289 	.word	0x0800d289
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f9dc 	bl	800d634 <USBD_GetDescriptor>
          break;
 800d27c:	e022      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fb3f 	bl	800d904 <USBD_SetAddress>
          break;
 800d286:	e01d      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fb7e 	bl	800d98c <USBD_SetConfig>
          break;
 800d290:	e018      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fc07 	bl	800daa8 <USBD_GetConfig>
          break;
 800d29a:	e013      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fc37 	bl	800db12 <USBD_GetStatus>
          break;
 800d2a4:	e00e      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d2a6:	6839      	ldr	r1, [r7, #0]
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fc65 	bl	800db78 <USBD_SetFeature>
          break;
 800d2ae:	e009      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fc74 	bl	800dba0 <USBD_ClrFeature>
          break;
 800d2b8:	e004      	b.n	800d2c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 fccc 	bl	800dc5a <USBD_CtlError>
          break;
 800d2c2:	bf00      	nop
      }
      break;
 800d2c4:	e004      	b.n	800d2d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d2c6:	6839      	ldr	r1, [r7, #0]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fcc6 	bl	800dc5a <USBD_CtlError>
      break;
 800d2ce:	bf00      	nop
  }

  return ret;
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop

0800d2dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2f2:	2b40      	cmp	r3, #64	; 0x40
 800d2f4:	d005      	beq.n	800d302 <USBD_StdItfReq+0x26>
 800d2f6:	2b40      	cmp	r3, #64	; 0x40
 800d2f8:	d82e      	bhi.n	800d358 <USBD_StdItfReq+0x7c>
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <USBD_StdItfReq+0x26>
 800d2fe:	2b20      	cmp	r3, #32
 800d300:	d12a      	bne.n	800d358 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d308:	3b01      	subs	r3, #1
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d81d      	bhi.n	800d34a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	889b      	ldrh	r3, [r3, #4]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b01      	cmp	r3, #1
 800d316:	d813      	bhi.n	800d340 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	6839      	ldr	r1, [r7, #0]
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	4798      	blx	r3
 800d326:	4603      	mov	r3, r0
 800d328:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	88db      	ldrh	r3, [r3, #6]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d110      	bne.n	800d354 <USBD_StdItfReq+0x78>
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10d      	bne.n	800d354 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 fd38 	bl	800ddae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d33e:	e009      	b.n	800d354 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fc89 	bl	800dc5a <USBD_CtlError>
          break;
 800d348:	e004      	b.n	800d354 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fc84 	bl	800dc5a <USBD_CtlError>
          break;
 800d352:	e000      	b.n	800d356 <USBD_StdItfReq+0x7a>
          break;
 800d354:	bf00      	nop
      }
      break;
 800d356:	e004      	b.n	800d362 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fc7d 	bl	800dc5a <USBD_CtlError>
      break;
 800d360:	bf00      	nop
  }

  return USBD_OK;
 800d362:	2300      	movs	r3, #0
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	889b      	ldrh	r3, [r3, #4]
 800d37e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d388:	2b40      	cmp	r3, #64	; 0x40
 800d38a:	d007      	beq.n	800d39c <USBD_StdEPReq+0x30>
 800d38c:	2b40      	cmp	r3, #64	; 0x40
 800d38e:	f200 8146 	bhi.w	800d61e <USBD_StdEPReq+0x2b2>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <USBD_StdEPReq+0x40>
 800d396:	2b20      	cmp	r3, #32
 800d398:	f040 8141 	bne.w	800d61e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	4798      	blx	r3
      break;
 800d3aa:	e13d      	b.n	800d628 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3b4:	2b20      	cmp	r3, #32
 800d3b6:	d10a      	bne.n	800d3ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	4798      	blx	r3
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	e12d      	b.n	800d62a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d007      	beq.n	800d3e6 <USBD_StdEPReq+0x7a>
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	f300 811b 	bgt.w	800d612 <USBD_StdEPReq+0x2a6>
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d072      	beq.n	800d4c6 <USBD_StdEPReq+0x15a>
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d03a      	beq.n	800d45a <USBD_StdEPReq+0xee>
 800d3e4:	e115      	b.n	800d612 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d002      	beq.n	800d3f6 <USBD_StdEPReq+0x8a>
 800d3f0:	2b03      	cmp	r3, #3
 800d3f2:	d015      	beq.n	800d420 <USBD_StdEPReq+0xb4>
 800d3f4:	e02b      	b.n	800d44e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3f6:	7bbb      	ldrb	r3, [r7, #14]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00c      	beq.n	800d416 <USBD_StdEPReq+0xaa>
 800d3fc:	7bbb      	ldrb	r3, [r7, #14]
 800d3fe:	2b80      	cmp	r3, #128	; 0x80
 800d400:	d009      	beq.n	800d416 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d402:	7bbb      	ldrb	r3, [r7, #14]
 800d404:	4619      	mov	r1, r3
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f003 fe24 	bl	8011054 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d40c:	2180      	movs	r1, #128	; 0x80
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f003 fe20 	bl	8011054 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d414:	e020      	b.n	800d458 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 fc1e 	bl	800dc5a <USBD_CtlError>
              break;
 800d41e:	e01b      	b.n	800d458 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	885b      	ldrh	r3, [r3, #2]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10e      	bne.n	800d446 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00b      	beq.n	800d446 <USBD_StdEPReq+0xda>
 800d42e:	7bbb      	ldrb	r3, [r7, #14]
 800d430:	2b80      	cmp	r3, #128	; 0x80
 800d432:	d008      	beq.n	800d446 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	88db      	ldrh	r3, [r3, #6]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d104      	bne.n	800d446 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f003 fe07 	bl	8011054 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fcb1 	bl	800ddae <USBD_CtlSendStatus>

              break;
 800d44c:	e004      	b.n	800d458 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fc02 	bl	800dc5a <USBD_CtlError>
              break;
 800d456:	bf00      	nop
          }
          break;
 800d458:	e0e0      	b.n	800d61c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d460:	2b02      	cmp	r3, #2
 800d462:	d002      	beq.n	800d46a <USBD_StdEPReq+0xfe>
 800d464:	2b03      	cmp	r3, #3
 800d466:	d015      	beq.n	800d494 <USBD_StdEPReq+0x128>
 800d468:	e026      	b.n	800d4b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d46a:	7bbb      	ldrb	r3, [r7, #14]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00c      	beq.n	800d48a <USBD_StdEPReq+0x11e>
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	2b80      	cmp	r3, #128	; 0x80
 800d474:	d009      	beq.n	800d48a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d476:	7bbb      	ldrb	r3, [r7, #14]
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f003 fdea 	bl	8011054 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d480:	2180      	movs	r1, #128	; 0x80
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f003 fde6 	bl	8011054 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d488:	e01c      	b.n	800d4c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fbe4 	bl	800dc5a <USBD_CtlError>
              break;
 800d492:	e017      	b.n	800d4c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	885b      	ldrh	r3, [r3, #2]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d112      	bne.n	800d4c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d49c:	7bbb      	ldrb	r3, [r7, #14]
 800d49e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d004      	beq.n	800d4b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f003 fdf1 	bl	8011092 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fc7c 	bl	800ddae <USBD_CtlSendStatus>
              }
              break;
 800d4b6:	e004      	b.n	800d4c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 fbcd 	bl	800dc5a <USBD_CtlError>
              break;
 800d4c0:	e000      	b.n	800d4c4 <USBD_StdEPReq+0x158>
              break;
 800d4c2:	bf00      	nop
          }
          break;
 800d4c4:	e0aa      	b.n	800d61c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d002      	beq.n	800d4d6 <USBD_StdEPReq+0x16a>
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d032      	beq.n	800d53a <USBD_StdEPReq+0x1ce>
 800d4d4:	e097      	b.n	800d606 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4d6:	7bbb      	ldrb	r3, [r7, #14]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d007      	beq.n	800d4ec <USBD_StdEPReq+0x180>
 800d4dc:	7bbb      	ldrb	r3, [r7, #14]
 800d4de:	2b80      	cmp	r3, #128	; 0x80
 800d4e0:	d004      	beq.n	800d4ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fbb8 	bl	800dc5a <USBD_CtlError>
                break;
 800d4ea:	e091      	b.n	800d610 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	da0b      	bge.n	800d50c <USBD_StdEPReq+0x1a0>
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
 800d4f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	4413      	add	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	3310      	adds	r3, #16
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	4413      	add	r3, r2
 800d508:	3304      	adds	r3, #4
 800d50a:	e00b      	b.n	800d524 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d512:	4613      	mov	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	4413      	add	r3, r2
 800d522:	3304      	adds	r3, #4
 800d524:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2202      	movs	r2, #2
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fbfb 	bl	800dd2e <USBD_CtlSendData>
              break;
 800d538:	e06a      	b.n	800d610 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d53a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da11      	bge.n	800d566 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	f003 020f 	and.w	r2, r3, #15
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	440b      	add	r3, r1
 800d554:	3318      	adds	r3, #24
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d117      	bne.n	800d58c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fb7b 	bl	800dc5a <USBD_CtlError>
                  break;
 800d564:	e054      	b.n	800d610 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	f003 020f 	and.w	r2, r3, #15
 800d56c:	6879      	ldr	r1, [r7, #4]
 800d56e:	4613      	mov	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	4413      	add	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	440b      	add	r3, r1
 800d578:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d104      	bne.n	800d58c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fb68 	bl	800dc5a <USBD_CtlError>
                  break;
 800d58a:	e041      	b.n	800d610 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d58c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d590:	2b00      	cmp	r3, #0
 800d592:	da0b      	bge.n	800d5ac <USBD_StdEPReq+0x240>
 800d594:	7bbb      	ldrb	r3, [r7, #14]
 800d596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d59a:	4613      	mov	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	3310      	adds	r3, #16
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	e00b      	b.n	800d5c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5ac:	7bbb      	ldrb	r3, [r7, #14]
 800d5ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <USBD_StdEPReq+0x266>
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	2b80      	cmp	r3, #128	; 0x80
 800d5d0:	d103      	bne.n	800d5da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]
 800d5d8:	e00e      	b.n	800d5f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d5da:	7bbb      	ldrb	r3, [r7, #14]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f003 fd76 	bl	80110d0 <USBD_LL_IsStallEP>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	e002      	b.n	800d5f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 fb95 	bl	800dd2e <USBD_CtlSendData>
              break;
 800d604:	e004      	b.n	800d610 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fb26 	bl	800dc5a <USBD_CtlError>
              break;
 800d60e:	bf00      	nop
          }
          break;
 800d610:	e004      	b.n	800d61c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fb20 	bl	800dc5a <USBD_CtlError>
          break;
 800d61a:	bf00      	nop
      }
      break;
 800d61c:	e004      	b.n	800d628 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fb1a 	bl	800dc5a <USBD_CtlError>
      break;
 800d626:	bf00      	nop
  }

  return ret;
 800d628:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
	...

0800d634 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d63e:	2300      	movs	r3, #0
 800d640:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d646:	2300      	movs	r3, #0
 800d648:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	885b      	ldrh	r3, [r3, #2]
 800d64e:	0a1b      	lsrs	r3, r3, #8
 800d650:	b29b      	uxth	r3, r3
 800d652:	3b01      	subs	r3, #1
 800d654:	2b06      	cmp	r3, #6
 800d656:	f200 8128 	bhi.w	800d8aa <USBD_GetDescriptor+0x276>
 800d65a:	a201      	add	r2, pc, #4	; (adr r2, 800d660 <USBD_GetDescriptor+0x2c>)
 800d65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d660:	0800d67d 	.word	0x0800d67d
 800d664:	0800d695 	.word	0x0800d695
 800d668:	0800d6d5 	.word	0x0800d6d5
 800d66c:	0800d8ab 	.word	0x0800d8ab
 800d670:	0800d8ab 	.word	0x0800d8ab
 800d674:	0800d84b 	.word	0x0800d84b
 800d678:	0800d877 	.word	0x0800d877
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	7c12      	ldrb	r2, [r2, #16]
 800d688:	f107 0108 	add.w	r1, r7, #8
 800d68c:	4610      	mov	r0, r2
 800d68e:	4798      	blx	r3
 800d690:	60f8      	str	r0, [r7, #12]
      break;
 800d692:	e112      	b.n	800d8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	7c1b      	ldrb	r3, [r3, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10d      	bne.n	800d6b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a4:	f107 0208 	add.w	r2, r7, #8
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	4798      	blx	r3
 800d6ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	2202      	movs	r2, #2
 800d6b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d6b6:	e100      	b.n	800d8ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	f107 0208 	add.w	r2, r7, #8
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
 800d6c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	701a      	strb	r2, [r3, #0]
      break;
 800d6d2:	e0f2      	b.n	800d8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	885b      	ldrh	r3, [r3, #2]
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b05      	cmp	r3, #5
 800d6dc:	f200 80ac 	bhi.w	800d838 <USBD_GetDescriptor+0x204>
 800d6e0:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <USBD_GetDescriptor+0xb4>)
 800d6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e6:	bf00      	nop
 800d6e8:	0800d701 	.word	0x0800d701
 800d6ec:	0800d735 	.word	0x0800d735
 800d6f0:	0800d769 	.word	0x0800d769
 800d6f4:	0800d79d 	.word	0x0800d79d
 800d6f8:	0800d7d1 	.word	0x0800d7d1
 800d6fc:	0800d805 	.word	0x0800d805
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	7c12      	ldrb	r2, [r2, #16]
 800d718:	f107 0108 	add.w	r1, r7, #8
 800d71c:	4610      	mov	r0, r2
 800d71e:	4798      	blx	r3
 800d720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d722:	e091      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d724:	6839      	ldr	r1, [r7, #0]
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa97 	bl	800dc5a <USBD_CtlError>
            err++;
 800d72c:	7afb      	ldrb	r3, [r7, #11]
 800d72e:	3301      	adds	r3, #1
 800d730:	72fb      	strb	r3, [r7, #11]
          break;
 800d732:	e089      	b.n	800d848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00b      	beq.n	800d758 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	7c12      	ldrb	r2, [r2, #16]
 800d74c:	f107 0108 	add.w	r1, r7, #8
 800d750:	4610      	mov	r0, r2
 800d752:	4798      	blx	r3
 800d754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d756:	e077      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fa7d 	bl	800dc5a <USBD_CtlError>
            err++;
 800d760:	7afb      	ldrb	r3, [r7, #11]
 800d762:	3301      	adds	r3, #1
 800d764:	72fb      	strb	r3, [r7, #11]
          break;
 800d766:	e06f      	b.n	800d848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	7c12      	ldrb	r2, [r2, #16]
 800d780:	f107 0108 	add.w	r1, r7, #8
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
 800d788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d78a:	e05d      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fa63 	bl	800dc5a <USBD_CtlError>
            err++;
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	3301      	adds	r3, #1
 800d798:	72fb      	strb	r3, [r7, #11]
          break;
 800d79a:	e055      	b.n	800d848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00b      	beq.n	800d7c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	7c12      	ldrb	r2, [r2, #16]
 800d7b4:	f107 0108 	add.w	r1, r7, #8
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	4798      	blx	r3
 800d7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7be:	e043      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fa49 	bl	800dc5a <USBD_CtlError>
            err++;
 800d7c8:	7afb      	ldrb	r3, [r7, #11]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ce:	e03b      	b.n	800d848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d7d6:	695b      	ldr	r3, [r3, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00b      	beq.n	800d7f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	7c12      	ldrb	r2, [r2, #16]
 800d7e8:	f107 0108 	add.w	r1, r7, #8
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4798      	blx	r3
 800d7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7f2:	e029      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fa2f 	bl	800dc5a <USBD_CtlError>
            err++;
 800d7fc:	7afb      	ldrb	r3, [r7, #11]
 800d7fe:	3301      	adds	r3, #1
 800d800:	72fb      	strb	r3, [r7, #11]
          break;
 800d802:	e021      	b.n	800d848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d80a:	699b      	ldr	r3, [r3, #24]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	7c12      	ldrb	r2, [r2, #16]
 800d81c:	f107 0108 	add.w	r1, r7, #8
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
 800d824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d826:	e00f      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 fa15 	bl	800dc5a <USBD_CtlError>
            err++;
 800d830:	7afb      	ldrb	r3, [r7, #11]
 800d832:	3301      	adds	r3, #1
 800d834:	72fb      	strb	r3, [r7, #11]
          break;
 800d836:	e007      	b.n	800d848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa0d 	bl	800dc5a <USBD_CtlError>
          err++;
 800d840:	7afb      	ldrb	r3, [r7, #11]
 800d842:	3301      	adds	r3, #1
 800d844:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d846:	e038      	b.n	800d8ba <USBD_GetDescriptor+0x286>
 800d848:	e037      	b.n	800d8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	7c1b      	ldrb	r3, [r3, #16]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d109      	bne.n	800d866 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85a:	f107 0208 	add.w	r2, r7, #8
 800d85e:	4610      	mov	r0, r2
 800d860:	4798      	blx	r3
 800d862:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d864:	e029      	b.n	800d8ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f9f6 	bl	800dc5a <USBD_CtlError>
        err++;
 800d86e:	7afb      	ldrb	r3, [r7, #11]
 800d870:	3301      	adds	r3, #1
 800d872:	72fb      	strb	r3, [r7, #11]
      break;
 800d874:	e021      	b.n	800d8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	7c1b      	ldrb	r3, [r3, #16]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10d      	bne.n	800d89a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d886:	f107 0208 	add.w	r2, r7, #8
 800d88a:	4610      	mov	r0, r2
 800d88c:	4798      	blx	r3
 800d88e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3301      	adds	r3, #1
 800d894:	2207      	movs	r2, #7
 800d896:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d898:	e00f      	b.n	800d8ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f9dc 	bl	800dc5a <USBD_CtlError>
        err++;
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8a8:	e007      	b.n	800d8ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d8aa:	6839      	ldr	r1, [r7, #0]
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 f9d4 	bl	800dc5a <USBD_CtlError>
      err++;
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8b8:	bf00      	nop
  }

  if (err != 0U)
 800d8ba:	7afb      	ldrb	r3, [r7, #11]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d11c      	bne.n	800d8fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d8c0:	893b      	ldrh	r3, [r7, #8]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d011      	beq.n	800d8ea <USBD_GetDescriptor+0x2b6>
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	88db      	ldrh	r3, [r3, #6]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00d      	beq.n	800d8ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	88da      	ldrh	r2, [r3, #6]
 800d8d2:	893b      	ldrh	r3, [r7, #8]
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	bf28      	it	cs
 800d8d8:	4613      	movcs	r3, r2
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d8de:	893b      	ldrh	r3, [r7, #8]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	68f9      	ldr	r1, [r7, #12]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fa22 	bl	800dd2e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	88db      	ldrh	r3, [r3, #6]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d104      	bne.n	800d8fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fa5b 	bl	800ddae <USBD_CtlSendStatus>
 800d8f8:	e000      	b.n	800d8fc <USBD_GetDescriptor+0x2c8>
    return;
 800d8fa:	bf00      	nop
    }
  }
}
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop

0800d904 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	889b      	ldrh	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d130      	bne.n	800d978 <USBD_SetAddress+0x74>
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	88db      	ldrh	r3, [r3, #6]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d12c      	bne.n	800d978 <USBD_SetAddress+0x74>
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	885b      	ldrh	r3, [r3, #2]
 800d922:	2b7f      	cmp	r3, #127	; 0x7f
 800d924:	d828      	bhi.n	800d978 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	885b      	ldrh	r3, [r3, #2]
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d104      	bne.n	800d946 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f98b 	bl	800dc5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d944:	e01d      	b.n	800d982 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	7bfa      	ldrb	r2, [r7, #15]
 800d94a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f003 fbe8 	bl	8011128 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fa28 	bl	800ddae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2202      	movs	r2, #2
 800d968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d96c:	e009      	b.n	800d982 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d976:	e004      	b.n	800d982 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f96d 	bl	800dc5a <USBD_CtlError>
  }
}
 800d980:	bf00      	nop
 800d982:	bf00      	nop
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	885b      	ldrh	r3, [r3, #2]
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	4b41      	ldr	r3, [pc, #260]	; (800daa4 <USBD_SetConfig+0x118>)
 800d99e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d9a0:	4b40      	ldr	r3, [pc, #256]	; (800daa4 <USBD_SetConfig+0x118>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d904      	bls.n	800d9b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f955 	bl	800dc5a <USBD_CtlError>
 800d9b0:	e075      	b.n	800da9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d002      	beq.n	800d9c2 <USBD_SetConfig+0x36>
 800d9bc:	2b03      	cmp	r3, #3
 800d9be:	d023      	beq.n	800da08 <USBD_SetConfig+0x7c>
 800d9c0:	e062      	b.n	800da88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d9c2:	4b38      	ldr	r3, [pc, #224]	; (800daa4 <USBD_SetConfig+0x118>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d01a      	beq.n	800da00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d9ca:	4b36      	ldr	r3, [pc, #216]	; (800daa4 <USBD_SetConfig+0x118>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2203      	movs	r2, #3
 800d9d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d9dc:	4b31      	ldr	r3, [pc, #196]	; (800daa4 <USBD_SetConfig+0x118>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff f9e8 	bl	800cdb8 <USBD_SetClassConfig>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d104      	bne.n	800d9f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 f932 	bl	800dc5a <USBD_CtlError>
            return;
 800d9f6:	e052      	b.n	800da9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f9d8 	bl	800ddae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d9fe:	e04e      	b.n	800da9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f9d4 	bl	800ddae <USBD_CtlSendStatus>
        break;
 800da06:	e04a      	b.n	800da9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800da08:	4b26      	ldr	r3, [pc, #152]	; (800daa4 <USBD_SetConfig+0x118>)
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d112      	bne.n	800da36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800da18:	4b22      	ldr	r3, [pc, #136]	; (800daa4 <USBD_SetConfig+0x118>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	461a      	mov	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800da22:	4b20      	ldr	r3, [pc, #128]	; (800daa4 <USBD_SetConfig+0x118>)
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	4619      	mov	r1, r3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff f9e4 	bl	800cdf6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f9bd 	bl	800ddae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800da34:	e033      	b.n	800da9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800da36:	4b1b      	ldr	r3, [pc, #108]	; (800daa4 <USBD_SetConfig+0x118>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d01d      	beq.n	800da80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff f9d2 	bl	800cdf6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800da52:	4b14      	ldr	r3, [pc, #80]	; (800daa4 <USBD_SetConfig+0x118>)
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	461a      	mov	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800da5c:	4b11      	ldr	r3, [pc, #68]	; (800daa4 <USBD_SetConfig+0x118>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	4619      	mov	r1, r3
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff f9a8 	bl	800cdb8 <USBD_SetClassConfig>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d104      	bne.n	800da78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f8f2 	bl	800dc5a <USBD_CtlError>
            return;
 800da76:	e012      	b.n	800da9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f998 	bl	800ddae <USBD_CtlSendStatus>
        break;
 800da7e:	e00e      	b.n	800da9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f994 	bl	800ddae <USBD_CtlSendStatus>
        break;
 800da86:	e00a      	b.n	800da9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f8e5 	bl	800dc5a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800da90:	4b04      	ldr	r3, [pc, #16]	; (800daa4 <USBD_SetConfig+0x118>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	4619      	mov	r1, r3
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7ff f9ad 	bl	800cdf6 <USBD_ClrClassConfig>
        break;
 800da9c:	bf00      	nop
    }
  }
}
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	20000e44 	.word	0x20000e44

0800daa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	88db      	ldrh	r3, [r3, #6]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d004      	beq.n	800dac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 f8cc 	bl	800dc5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dac2:	e022      	b.n	800db0a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daca:	2b02      	cmp	r3, #2
 800dacc:	dc02      	bgt.n	800dad4 <USBD_GetConfig+0x2c>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	dc03      	bgt.n	800dada <USBD_GetConfig+0x32>
 800dad2:	e015      	b.n	800db00 <USBD_GetConfig+0x58>
 800dad4:	2b03      	cmp	r3, #3
 800dad6:	d00b      	beq.n	800daf0 <USBD_GetConfig+0x48>
 800dad8:	e012      	b.n	800db00 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3308      	adds	r3, #8
 800dae4:	2201      	movs	r2, #1
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f920 	bl	800dd2e <USBD_CtlSendData>
        break;
 800daee:	e00c      	b.n	800db0a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	3304      	adds	r3, #4
 800daf4:	2201      	movs	r2, #1
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 f918 	bl	800dd2e <USBD_CtlSendData>
        break;
 800dafe:	e004      	b.n	800db0a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 f8a9 	bl	800dc5a <USBD_CtlError>
        break;
 800db08:	bf00      	nop
}
 800db0a:	bf00      	nop
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db22:	3b01      	subs	r3, #1
 800db24:	2b02      	cmp	r3, #2
 800db26:	d81e      	bhi.n	800db66 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	88db      	ldrh	r3, [r3, #6]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d004      	beq.n	800db3a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f891 	bl	800dc5a <USBD_CtlError>
        break;
 800db38:	e01a      	b.n	800db70 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2201      	movs	r2, #1
 800db3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f043 0202 	orr.w	r2, r3, #2
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	330c      	adds	r3, #12
 800db5a:	2202      	movs	r2, #2
 800db5c:	4619      	mov	r1, r3
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 f8e5 	bl	800dd2e <USBD_CtlSendData>
      break;
 800db64:	e004      	b.n	800db70 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800db66:	6839      	ldr	r1, [r7, #0]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 f876 	bl	800dc5a <USBD_CtlError>
      break;
 800db6e:	bf00      	nop
  }
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	885b      	ldrh	r3, [r3, #2]
 800db86:	2b01      	cmp	r3, #1
 800db88:	d106      	bne.n	800db98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f90b 	bl	800ddae <USBD_CtlSendStatus>
  }
}
 800db98:	bf00      	nop
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d80b      	bhi.n	800dbce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	885b      	ldrh	r3, [r3, #2]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d10c      	bne.n	800dbd8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f8f1 	bl	800ddae <USBD_CtlSendStatus>
      }
      break;
 800dbcc:	e004      	b.n	800dbd8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f842 	bl	800dc5a <USBD_CtlError>
      break;
 800dbd6:	e000      	b.n	800dbda <USBD_ClrFeature+0x3a>
      break;
 800dbd8:	bf00      	nop
  }
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781a      	ldrb	r2, [r3, #0]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	785a      	ldrb	r2, [r3, #1]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	3302      	adds	r3, #2
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	3303      	adds	r3, #3
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	021b      	lsls	r3, r3, #8
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	4413      	add	r3, r2
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	3305      	adds	r3, #5
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	021b      	lsls	r3, r3, #8
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	4413      	add	r3, r2
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	3306      	adds	r3, #6
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	3307      	adds	r3, #7
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	021b      	lsls	r3, r3, #8
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	4413      	add	r3, r2
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	80da      	strh	r2, [r3, #6]

}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bc80      	pop	{r7}
 800dc58:	4770      	bx	lr

0800dc5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b082      	sub	sp, #8
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800dc64:	2180      	movs	r1, #128	; 0x80
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f003 f9f4 	bl	8011054 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f003 f9f0 	bl	8011054 <USBD_LL_StallEP>
}
 800dc74:	bf00      	nop
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d032      	beq.n	800dcf8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f000 f834 	bl	800dd00 <USBD_GetLen>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	005b      	lsls	r3, r3, #1
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	75fa      	strb	r2, [r7, #23]
 800dcac:	461a      	mov	r2, r3
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	7812      	ldrb	r2, [r2, #0]
 800dcb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800dcb8:	7dfb      	ldrb	r3, [r7, #23]
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	75fa      	strb	r2, [r7, #23]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	2203      	movs	r2, #3
 800dcc6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800dcc8:	e012      	b.n	800dcf0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	60fa      	str	r2, [r7, #12]
 800dcd0:	7dfa      	ldrb	r2, [r7, #23]
 800dcd2:	1c51      	adds	r1, r2, #1
 800dcd4:	75f9      	strb	r1, [r7, #23]
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	440a      	add	r2, r1
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dce0:	7dfb      	ldrb	r3, [r7, #23]
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	75fa      	strb	r2, [r7, #23]
 800dce6:	461a      	mov	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	4413      	add	r3, r2
 800dcec:	2200      	movs	r2, #0
 800dcee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1e8      	bne.n	800dcca <USBD_GetString+0x4e>
    }
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	3718      	adds	r7, #24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800dd0c:	e005      	b.n	800dd1a <USBD_GetLen+0x1a>
  {
    len++;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	3301      	adds	r3, #1
 800dd12:	73fb      	strb	r3, [r7, #15]
    buf++;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3301      	adds	r3, #1
 800dd18:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1f5      	bne.n	800dd0e <USBD_GetLen+0xe>
  }

  return len;
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bc80      	pop	{r7}
 800dd2c:	4770      	bx	lr

0800dd2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b084      	sub	sp, #16
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2202      	movs	r2, #2
 800dd40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dd44:	88fa      	ldrh	r2, [r7, #6]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800dd4a:	88fa      	ldrh	r2, [r7, #6]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd50:	88fb      	ldrh	r3, [r7, #6]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	2100      	movs	r1, #0
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f003 fa05 	bl	8011166 <USBD_LL_Transmit>

  return USBD_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b084      	sub	sp, #16
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	60f8      	str	r0, [r7, #12]
 800dd6e:	60b9      	str	r1, [r7, #8]
 800dd70:	4613      	mov	r3, r2
 800dd72:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	2100      	movs	r1, #0
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f003 f9f3 	bl	8011166 <USBD_LL_Transmit>

  return USBD_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	4613      	mov	r3, r2
 800dd96:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f003 fa04 	bl	80111ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b082      	sub	sp, #8
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2204      	movs	r2, #4
 800ddba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f003 f9ce 	bl	8011166 <USBD_LL_Transmit>

  return USBD_OK;
 800ddca:	2300      	movs	r3, #0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2205      	movs	r2, #5
 800dde0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dde4:	2300      	movs	r3, #0
 800dde6:	2200      	movs	r2, #0
 800dde8:	2100      	movs	r1, #0
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f003 f9de 	bl	80111ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
	...

0800ddfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	4603      	mov	r3, r0
 800de04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	4a08      	ldr	r2, [pc, #32]	; (800de2c <disk_status+0x30>)
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	79fa      	ldrb	r2, [r7, #7]
 800de14:	4905      	ldr	r1, [pc, #20]	; (800de2c <disk_status+0x30>)
 800de16:	440a      	add	r2, r1
 800de18:	7a12      	ldrb	r2, [r2, #8]
 800de1a:	4610      	mov	r0, r2
 800de1c:	4798      	blx	r3
 800de1e:	4603      	mov	r3, r0
 800de20:	73fb      	strb	r3, [r7, #15]
  return stat;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	20000e68 	.word	0x20000e68

0800de30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	4a0d      	ldr	r2, [pc, #52]	; (800de78 <disk_initialize+0x48>)
 800de42:	5cd3      	ldrb	r3, [r2, r3]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d111      	bne.n	800de6c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800de48:	79fb      	ldrb	r3, [r7, #7]
 800de4a:	4a0b      	ldr	r2, [pc, #44]	; (800de78 <disk_initialize+0x48>)
 800de4c:	2101      	movs	r1, #1
 800de4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de50:	79fb      	ldrb	r3, [r7, #7]
 800de52:	4a09      	ldr	r2, [pc, #36]	; (800de78 <disk_initialize+0x48>)
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4413      	add	r3, r2
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	79fa      	ldrb	r2, [r7, #7]
 800de5e:	4906      	ldr	r1, [pc, #24]	; (800de78 <disk_initialize+0x48>)
 800de60:	440a      	add	r2, r1
 800de62:	7a12      	ldrb	r2, [r2, #8]
 800de64:	4610      	mov	r0, r2
 800de66:	4798      	blx	r3
 800de68:	4603      	mov	r3, r0
 800de6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20000e68 	.word	0x20000e68

0800de7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b087      	sub	sp, #28
 800de80:	af00      	add	r7, sp, #0
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	4a0a      	ldr	r2, [pc, #40]	; (800deb8 <disk_read+0x3c>)
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4413      	add	r3, r2
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	689c      	ldr	r4, [r3, #8]
 800de98:	7bfb      	ldrb	r3, [r7, #15]
 800de9a:	4a07      	ldr	r2, [pc, #28]	; (800deb8 <disk_read+0x3c>)
 800de9c:	4413      	add	r3, r2
 800de9e:	7a18      	ldrb	r0, [r3, #8]
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	47a0      	blx	r4
 800dea8:	4603      	mov	r3, r0
 800deaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800deac:	7dfb      	ldrb	r3, [r7, #23]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	371c      	adds	r7, #28
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd90      	pop	{r4, r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20000e68 	.word	0x20000e68

0800debc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60b9      	str	r1, [r7, #8]
 800dec4:	607a      	str	r2, [r7, #4]
 800dec6:	603b      	str	r3, [r7, #0]
 800dec8:	4603      	mov	r3, r0
 800deca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800decc:	7bfb      	ldrb	r3, [r7, #15]
 800dece:	4a0a      	ldr	r2, [pc, #40]	; (800def8 <disk_write+0x3c>)
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	68dc      	ldr	r4, [r3, #12]
 800ded8:	7bfb      	ldrb	r3, [r7, #15]
 800deda:	4a07      	ldr	r2, [pc, #28]	; (800def8 <disk_write+0x3c>)
 800dedc:	4413      	add	r3, r2
 800dede:	7a18      	ldrb	r0, [r3, #8]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	47a0      	blx	r4
 800dee8:	4603      	mov	r3, r0
 800deea:	75fb      	strb	r3, [r7, #23]
  return res;
 800deec:	7dfb      	ldrb	r3, [r7, #23]
}
 800deee:	4618      	mov	r0, r3
 800def0:	371c      	adds	r7, #28
 800def2:	46bd      	mov	sp, r7
 800def4:	bd90      	pop	{r4, r7, pc}
 800def6:	bf00      	nop
 800def8:	20000e68 	.word	0x20000e68

0800defc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	4603      	mov	r3, r0
 800df04:	603a      	str	r2, [r7, #0]
 800df06:	71fb      	strb	r3, [r7, #7]
 800df08:	460b      	mov	r3, r1
 800df0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	4a09      	ldr	r2, [pc, #36]	; (800df34 <disk_ioctl+0x38>)
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	79fa      	ldrb	r2, [r7, #7]
 800df1a:	4906      	ldr	r1, [pc, #24]	; (800df34 <disk_ioctl+0x38>)
 800df1c:	440a      	add	r2, r1
 800df1e:	7a10      	ldrb	r0, [r2, #8]
 800df20:	79b9      	ldrb	r1, [r7, #6]
 800df22:	683a      	ldr	r2, [r7, #0]
 800df24:	4798      	blx	r3
 800df26:	4603      	mov	r3, r0
 800df28:	73fb      	strb	r3, [r7, #15]
  return res;
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	20000e68 	.word	0x20000e68

0800df38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800df38:	b480      	push	{r7}
 800df3a:	b087      	sub	sp, #28
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800df4c:	e007      	b.n	800df5e <mem_cpy+0x26>
		*d++ = *s++;
 800df4e:	693a      	ldr	r2, [r7, #16]
 800df50:	1c53      	adds	r3, r2, #1
 800df52:	613b      	str	r3, [r7, #16]
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	1c59      	adds	r1, r3, #1
 800df58:	6179      	str	r1, [r7, #20]
 800df5a:	7812      	ldrb	r2, [r2, #0]
 800df5c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	1e5a      	subs	r2, r3, #1
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d1f2      	bne.n	800df4e <mem_cpy+0x16>
}
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
 800df6c:	371c      	adds	r7, #28
 800df6e:	46bd      	mov	sp, r7
 800df70:	bc80      	pop	{r7}
 800df72:	4770      	bx	lr

0800df74 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800df84:	e005      	b.n	800df92 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	617a      	str	r2, [r7, #20]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	b2d2      	uxtb	r2, r2
 800df90:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	1e5a      	subs	r2, r3, #1
 800df96:	607a      	str	r2, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1f4      	bne.n	800df86 <mem_set+0x12>
}
 800df9c:	bf00      	nop
 800df9e:	bf00      	nop
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bc80      	pop	{r7}
 800dfa6:	4770      	bx	lr

0800dfa8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800dfa8:	b480      	push	{r7}
 800dfaa:	b089      	sub	sp, #36	; 0x24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	61fb      	str	r3, [r7, #28]
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800dfc0:	bf00      	nop
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	1e5a      	subs	r2, r3, #1
 800dfc6:	607a      	str	r2, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00d      	beq.n	800dfe8 <mem_cmp+0x40>
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	61fa      	str	r2, [r7, #28]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	61ba      	str	r2, [r7, #24]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	1acb      	subs	r3, r1, r3
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d0ec      	beq.n	800dfc2 <mem_cmp+0x1a>
	return r;
 800dfe8:	697b      	ldr	r3, [r7, #20]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3724      	adds	r7, #36	; 0x24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bc80      	pop	{r7}
 800dff2:	4770      	bx	lr

0800dff4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dffe:	e002      	b.n	800e006 <chk_chr+0x12>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3301      	adds	r3, #1
 800e004:	607b      	str	r3, [r7, #4]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d005      	beq.n	800e01a <chk_chr+0x26>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	461a      	mov	r2, r3
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	4293      	cmp	r3, r2
 800e018:	d1f2      	bne.n	800e000 <chk_chr+0xc>
	return *str;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	781b      	ldrb	r3, [r3, #0]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	bc80      	pop	{r7}
 800e026:	4770      	bx	lr

0800e028 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e032:	2300      	movs	r3, #0
 800e034:	60bb      	str	r3, [r7, #8]
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	60fb      	str	r3, [r7, #12]
 800e03a:	e038      	b.n	800e0ae <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800e03c:	492f      	ldr	r1, [pc, #188]	; (800e0fc <chk_lock+0xd4>)
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	4613      	mov	r3, r2
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	440b      	add	r3, r1
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d029      	beq.n	800e0a4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e050:	492a      	ldr	r1, [pc, #168]	; (800e0fc <chk_lock+0xd4>)
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	4613      	mov	r3, r2
 800e056:	005b      	lsls	r3, r3, #1
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	440b      	add	r3, r1
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e066:	429a      	cmp	r2, r3
 800e068:	d11e      	bne.n	800e0a8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800e06a:	4924      	ldr	r1, [pc, #144]	; (800e0fc <chk_lock+0xd4>)
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	440b      	add	r3, r1
 800e078:	3304      	adds	r3, #4
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e082:	429a      	cmp	r2, r3
 800e084:	d110      	bne.n	800e0a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e086:	491d      	ldr	r1, [pc, #116]	; (800e0fc <chk_lock+0xd4>)
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	4613      	mov	r3, r2
 800e08c:	005b      	lsls	r3, r3, #1
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	440b      	add	r3, r1
 800e094:	3308      	adds	r3, #8
 800e096:	881a      	ldrh	r2, [r3, #0]
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d102      	bne.n	800e0a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e0a2:	e007      	b.n	800e0b4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d9c3      	bls.n	800e03c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d109      	bne.n	800e0ce <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <chk_lock+0x9e>
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d101      	bne.n	800e0ca <chk_lock+0xa2>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	e013      	b.n	800e0f2 <chk_lock+0xca>
 800e0ca:	2312      	movs	r3, #18
 800e0cc:	e011      	b.n	800e0f2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10b      	bne.n	800e0ec <chk_lock+0xc4>
 800e0d4:	4909      	ldr	r1, [pc, #36]	; (800e0fc <chk_lock+0xd4>)
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	005b      	lsls	r3, r3, #1
 800e0dc:	4413      	add	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	440b      	add	r3, r1
 800e0e2:	330a      	adds	r3, #10
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ea:	d101      	bne.n	800e0f0 <chk_lock+0xc8>
 800e0ec:	2310      	movs	r3, #16
 800e0ee:	e000      	b.n	800e0f2 <chk_lock+0xca>
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bc80      	pop	{r7}
 800e0fa:	4770      	bx	lr
 800e0fc:	20000e50 	.word	0x20000e50

0800e100 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e106:	2300      	movs	r3, #0
 800e108:	607b      	str	r3, [r7, #4]
 800e10a:	e002      	b.n	800e112 <enq_lock+0x12>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3301      	adds	r3, #1
 800e110:	607b      	str	r3, [r7, #4]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b01      	cmp	r3, #1
 800e116:	d809      	bhi.n	800e12c <enq_lock+0x2c>
 800e118:	490a      	ldr	r1, [pc, #40]	; (800e144 <enq_lock+0x44>)
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	4613      	mov	r3, r2
 800e11e:	005b      	lsls	r3, r3, #1
 800e120:	4413      	add	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	440b      	add	r3, r1
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1ef      	bne.n	800e10c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b02      	cmp	r3, #2
 800e130:	bf14      	ite	ne
 800e132:	2301      	movne	r3, #1
 800e134:	2300      	moveq	r3, #0
 800e136:	b2db      	uxtb	r3, r3
}
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bc80      	pop	{r7}
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	20000e50 	.word	0x20000e50

0800e148 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e152:	2300      	movs	r3, #0
 800e154:	60fb      	str	r3, [r7, #12]
 800e156:	e02b      	b.n	800e1b0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800e158:	4955      	ldr	r1, [pc, #340]	; (800e2b0 <inc_lock+0x168>)
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	4613      	mov	r3, r2
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	4413      	add	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	440b      	add	r3, r1
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e16e:	429a      	cmp	r2, r3
 800e170:	d11b      	bne.n	800e1aa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800e172:	494f      	ldr	r1, [pc, #316]	; (800e2b0 <inc_lock+0x168>)
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	4613      	mov	r3, r2
 800e178:	005b      	lsls	r3, r3, #1
 800e17a:	4413      	add	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	440b      	add	r3, r1
 800e180:	3304      	adds	r3, #4
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d10d      	bne.n	800e1aa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800e18e:	4948      	ldr	r1, [pc, #288]	; (800e2b0 <inc_lock+0x168>)
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	4613      	mov	r3, r2
 800e194:	005b      	lsls	r3, r3, #1
 800e196:	4413      	add	r3, r2
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	440b      	add	r3, r1
 800e19c:	3308      	adds	r3, #8
 800e19e:	881a      	ldrh	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d006      	beq.n	800e1b8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	60fb      	str	r3, [r7, #12]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d9d0      	bls.n	800e158 <inc_lock+0x10>
 800e1b6:	e000      	b.n	800e1ba <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800e1b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d145      	bne.n	800e24c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	60fb      	str	r3, [r7, #12]
 800e1c4:	e002      	b.n	800e1cc <inc_lock+0x84>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	60fb      	str	r3, [r7, #12]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d809      	bhi.n	800e1e6 <inc_lock+0x9e>
 800e1d2:	4937      	ldr	r1, [pc, #220]	; (800e2b0 <inc_lock+0x168>)
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	440b      	add	r3, r1
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1ef      	bne.n	800e1c6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d101      	bne.n	800e1f0 <inc_lock+0xa8>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	e05a      	b.n	800e2a6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800e1f6:	482e      	ldr	r0, [pc, #184]	; (800e2b0 <inc_lock+0x168>)
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	005b      	lsls	r3, r3, #1
 800e1fe:	4413      	add	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4403      	add	r3, r0
 800e204:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800e20c:	4828      	ldr	r0, [pc, #160]	; (800e2b0 <inc_lock+0x168>)
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	4613      	mov	r3, r2
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	4413      	add	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4403      	add	r3, r0
 800e21a:	3304      	adds	r3, #4
 800e21c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800e224:	4922      	ldr	r1, [pc, #136]	; (800e2b0 <inc_lock+0x168>)
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	4613      	mov	r3, r2
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	4413      	add	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	440b      	add	r3, r1
 800e232:	3308      	adds	r3, #8
 800e234:	4602      	mov	r2, r0
 800e236:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800e238:	491d      	ldr	r1, [pc, #116]	; (800e2b0 <inc_lock+0x168>)
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	4613      	mov	r3, r2
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	4413      	add	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	440b      	add	r3, r1
 800e246:	330a      	adds	r3, #10
 800e248:	2200      	movs	r2, #0
 800e24a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00c      	beq.n	800e26c <inc_lock+0x124>
 800e252:	4917      	ldr	r1, [pc, #92]	; (800e2b0 <inc_lock+0x168>)
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	4613      	mov	r3, r2
 800e258:	005b      	lsls	r3, r3, #1
 800e25a:	4413      	add	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	440b      	add	r3, r1
 800e260:	330a      	adds	r3, #10
 800e262:	881b      	ldrh	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <inc_lock+0x124>
 800e268:	2300      	movs	r3, #0
 800e26a:	e01c      	b.n	800e2a6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10b      	bne.n	800e28a <inc_lock+0x142>
 800e272:	490f      	ldr	r1, [pc, #60]	; (800e2b0 <inc_lock+0x168>)
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	4613      	mov	r3, r2
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	4413      	add	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	440b      	add	r3, r1
 800e280:	330a      	adds	r3, #10
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	3301      	adds	r3, #1
 800e286:	b299      	uxth	r1, r3
 800e288:	e001      	b.n	800e28e <inc_lock+0x146>
 800e28a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e28e:	4808      	ldr	r0, [pc, #32]	; (800e2b0 <inc_lock+0x168>)
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	4613      	mov	r3, r2
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	4403      	add	r3, r0
 800e29c:	330a      	adds	r3, #10
 800e29e:	460a      	mov	r2, r1
 800e2a0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3301      	adds	r3, #1
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3714      	adds	r7, #20
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bc80      	pop	{r7}
 800e2ae:	4770      	bx	lr
 800e2b0:	20000e50 	.word	0x20000e50

0800e2b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	607b      	str	r3, [r7, #4]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d82e      	bhi.n	800e326 <dec_lock+0x72>
		n = Files[i].ctr;
 800e2c8:	491b      	ldr	r1, [pc, #108]	; (800e338 <dec_lock+0x84>)
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	4413      	add	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	440b      	add	r3, r1
 800e2d6:	330a      	adds	r3, #10
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e2dc:	89fb      	ldrh	r3, [r7, #14]
 800e2de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2e2:	d101      	bne.n	800e2e8 <dec_lock+0x34>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800e2e8:	89fb      	ldrh	r3, [r7, #14]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <dec_lock+0x40>
 800e2ee:	89fb      	ldrh	r3, [r7, #14]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e2f4:	4910      	ldr	r1, [pc, #64]	; (800e338 <dec_lock+0x84>)
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	4413      	add	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	440b      	add	r3, r1
 800e302:	330a      	adds	r3, #10
 800e304:	89fa      	ldrh	r2, [r7, #14]
 800e306:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e308:	89fb      	ldrh	r3, [r7, #14]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d108      	bne.n	800e320 <dec_lock+0x6c>
 800e30e:	490a      	ldr	r1, [pc, #40]	; (800e338 <dec_lock+0x84>)
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	4613      	mov	r3, r2
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	4413      	add	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	440b      	add	r3, r1
 800e31c:	2200      	movs	r2, #0
 800e31e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	737b      	strb	r3, [r7, #13]
 800e324:	e001      	b.n	800e32a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e326:	2302      	movs	r3, #2
 800e328:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e32a:	7b7b      	ldrb	r3, [r7, #13]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3714      	adds	r7, #20
 800e330:	46bd      	mov	sp, r7
 800e332:	bc80      	pop	{r7}
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	20000e50 	.word	0x20000e50

0800e33c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	e016      	b.n	800e378 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e34a:	4910      	ldr	r1, [pc, #64]	; (800e38c <clear_lock+0x50>)
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	4613      	mov	r3, r2
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	4413      	add	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	440b      	add	r3, r1
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d108      	bne.n	800e372 <clear_lock+0x36>
 800e360:	490a      	ldr	r1, [pc, #40]	; (800e38c <clear_lock+0x50>)
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	4613      	mov	r3, r2
 800e366:	005b      	lsls	r3, r3, #1
 800e368:	4413      	add	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	440b      	add	r3, r1
 800e36e:	2200      	movs	r2, #0
 800e370:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	3301      	adds	r3, #1
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d9e5      	bls.n	800e34a <clear_lock+0xe>
	}
}
 800e37e:	bf00      	nop
 800e380:	bf00      	nop
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	bc80      	pop	{r7}
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	20000e50 	.word	0x20000e50

0800e390 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d038      	beq.n	800e418 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e3ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e3b4:	6879      	ldr	r1, [r7, #4]
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	697a      	ldr	r2, [r7, #20]
 800e3ba:	f7ff fd7f 	bl	800debc <disk_write>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <sync_window+0x3a>
			res = FR_DISK_ERR;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	73fb      	strb	r3, [r7, #15]
 800e3c8:	e026      	b.n	800e418 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e3d8:	697a      	ldr	r2, [r7, #20]
 800e3da:	1ad2      	subs	r2, r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d218      	bcs.n	800e418 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800e3ec:	613b      	str	r3, [r7, #16]
 800e3ee:	e010      	b.n	800e412 <sync_window+0x82>
					wsect += fs->fsize;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e402:	6879      	ldr	r1, [r7, #4]
 800e404:	2301      	movs	r3, #1
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	f7ff fd58 	bl	800debc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3b01      	subs	r3, #1
 800e410:	613b      	str	r3, [r7, #16]
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d8eb      	bhi.n	800e3f0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800e418:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3718      	adds	r7, #24
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b084      	sub	sp, #16
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e436:	683a      	ldr	r2, [r7, #0]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d01b      	beq.n	800e474 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7ff ffa7 	bl	800e390 <sync_window>
 800e442:	4603      	mov	r3, r0
 800e444:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d113      	bne.n	800e474 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e452:	6879      	ldr	r1, [r7, #4]
 800e454:	2301      	movs	r3, #1
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	f7ff fd10 	bl	800de7c <disk_read>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d004      	beq.n	800e46c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e462:	f04f 33ff 	mov.w	r3, #4294967295
 800e466:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e468:	2301      	movs	r3, #1
 800e46a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800e474:	7bfb      	ldrb	r3, [r7, #15]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff ff82 	bl	800e390 <sync_window>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	2b00      	cmp	r3, #0
 800e494:	f040 809b 	bne.w	800e5ce <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e49e:	2b03      	cmp	r3, #3
 800e4a0:	f040 8088 	bne.w	800e5b4 <sync_fs+0x136>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	f040 8082 	bne.w	800e5b4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff fd5b 	bl	800df74 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2255      	movs	r2, #85	; 0x55
 800e4c2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	22aa      	movs	r2, #170	; 0xaa
 800e4ca:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2252      	movs	r2, #82	; 0x52
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2252      	movs	r2, #82	; 0x52
 800e4d8:	705a      	strb	r2, [r3, #1]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2261      	movs	r2, #97	; 0x61
 800e4de:	709a      	strb	r2, [r3, #2]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2241      	movs	r2, #65	; 0x41
 800e4e4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2272      	movs	r2, #114	; 0x72
 800e4ea:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2272      	movs	r2, #114	; 0x72
 800e4f2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2241      	movs	r2, #65	; 0x41
 800e4fa:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2261      	movs	r2, #97	; 0x61
 800e502:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	0a1b      	lsrs	r3, r3, #8
 800e51e:	b29b      	uxth	r3, r3
 800e520:	b2da      	uxtb	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e52e:	0c1b      	lsrs	r3, r3, #16
 800e530:	b2da      	uxtb	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e53e:	0e1b      	lsrs	r3, r3, #24
 800e540:	b2da      	uxtb	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	0a1b      	lsrs	r3, r3, #8
 800e560:	b29b      	uxth	r3, r3
 800e562:	b2da      	uxtb	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e570:	0c1b      	lsrs	r3, r3, #16
 800e572:	b2da      	uxtb	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e580:	0e1b      	lsrs	r3, r3, #24
 800e582:	b2da      	uxtb	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f7ff fc88 	bl	800debc <disk_write>
			fs->fsi_flag = 0;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7ff fc9c 	bl	800defc <disk_ioctl>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <sync_fs+0x150>
			res = FR_DISK_ERR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	3b02      	subs	r3, #2
 800e5e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5ee:	3b02      	subs	r3, #2
 800e5f0:	683a      	ldr	r2, [r7, #0]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d301      	bcc.n	800e5fa <clust2sect+0x22>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e00a      	b.n	800e610 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800e600:	461a      	mov	r2, r3
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	fb03 f202 	mul.w	r2, r3, r2
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800e60e:	4413      	add	r3, r2
}
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	bc80      	pop	{r7}
 800e618:	4770      	bx	lr

0800e61a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b086      	sub	sp, #24
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
 800e622:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d905      	bls.n	800e636 <get_fat+0x1c>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e630:	683a      	ldr	r2, [r7, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d302      	bcc.n	800e63c <get_fat+0x22>
		val = 1;	/* Internal error */
 800e636:	2301      	movs	r3, #1
 800e638:	617b      	str	r3, [r7, #20]
 800e63a:	e0a3      	b.n	800e784 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e63c:	f04f 33ff 	mov.w	r3, #4294967295
 800e640:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e648:	2b03      	cmp	r3, #3
 800e64a:	d068      	beq.n	800e71e <get_fat+0x104>
 800e64c:	2b03      	cmp	r3, #3
 800e64e:	f300 808f 	bgt.w	800e770 <get_fat+0x156>
 800e652:	2b01      	cmp	r3, #1
 800e654:	d002      	beq.n	800e65c <get_fat+0x42>
 800e656:	2b02      	cmp	r3, #2
 800e658:	d040      	beq.n	800e6dc <get_fat+0xc2>
 800e65a:	e089      	b.n	800e770 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	60fb      	str	r3, [r7, #12]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	085b      	lsrs	r3, r3, #1
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	4413      	add	r3, r2
 800e668:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	0a5b      	lsrs	r3, r3, #9
 800e674:	4413      	add	r3, r2
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff fed2 	bl	800e422 <move_window>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d178      	bne.n	800e776 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	1c5a      	adds	r2, r3, #1
 800e688:	60fa      	str	r2, [r7, #12]
 800e68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	5cd3      	ldrb	r3, [r2, r3]
 800e692:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	0a5b      	lsrs	r3, r3, #9
 800e69e:	4413      	add	r3, r2
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7ff febd 	bl	800e422 <move_window>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d165      	bne.n	800e77a <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	5cd3      	ldrb	r3, [r2, r3]
 800e6b8:	021b      	lsls	r3, r3, #8
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <get_fat+0xb8>
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	091b      	lsrs	r3, r3, #4
 800e6d0:	e002      	b.n	800e6d8 <get_fat+0xbe>
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6d8:	617b      	str	r3, [r7, #20]
			break;
 800e6da:	e053      	b.n	800e784 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	0a1b      	lsrs	r3, r3, #8
 800e6e6:	4413      	add	r3, r2
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff fe99 	bl	800e422 <move_window>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d143      	bne.n	800e77e <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	005b      	lsls	r3, r3, #1
 800e6fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	3301      	adds	r3, #1
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	021b      	lsls	r3, r3, #8
 800e70c:	b21a      	sxth	r2, r3
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	b21b      	sxth	r3, r3
 800e714:	4313      	orrs	r3, r2
 800e716:	b21b      	sxth	r3, r3
 800e718:	b29b      	uxth	r3, r3
 800e71a:	617b      	str	r3, [r7, #20]
			break;
 800e71c:	e032      	b.n	800e784 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	09db      	lsrs	r3, r3, #7
 800e728:	4413      	add	r3, r2
 800e72a:	4619      	mov	r1, r3
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7ff fe78 	bl	800e422 <move_window>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d124      	bne.n	800e782 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	4413      	add	r3, r2
 800e744:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	3303      	adds	r3, #3
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	061a      	lsls	r2, r3, #24
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	3302      	adds	r3, #2
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	041b      	lsls	r3, r3, #16
 800e756:	4313      	orrs	r3, r2
 800e758:	693a      	ldr	r2, [r7, #16]
 800e75a:	3201      	adds	r2, #1
 800e75c:	7812      	ldrb	r2, [r2, #0]
 800e75e:	0212      	lsls	r2, r2, #8
 800e760:	4313      	orrs	r3, r2
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	7812      	ldrb	r2, [r2, #0]
 800e766:	4313      	orrs	r3, r2
 800e768:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e76c:	617b      	str	r3, [r7, #20]
			break;
 800e76e:	e009      	b.n	800e784 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800e770:	2301      	movs	r3, #1
 800e772:	617b      	str	r3, [r7, #20]
 800e774:	e006      	b.n	800e784 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e776:	bf00      	nop
 800e778:	e004      	b.n	800e784 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e77a:	bf00      	nop
 800e77c:	e002      	b.n	800e784 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e77e:	bf00      	nop
 800e780:	e000      	b.n	800e784 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e782:	bf00      	nop
		}
	}

	return val;
 800e784:	697b      	ldr	r3, [r7, #20]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b088      	sub	sp, #32
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d905      	bls.n	800e7ac <put_fat+0x1e>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d302      	bcc.n	800e7b2 <put_fat+0x24>
		res = FR_INT_ERR;
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	77fb      	strb	r3, [r7, #31]
 800e7b0:	e0f6      	b.n	800e9a0 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e7b8:	2b03      	cmp	r3, #3
 800e7ba:	f000 809e 	beq.w	800e8fa <put_fat+0x16c>
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	f300 80e4 	bgt.w	800e98c <put_fat+0x1fe>
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d002      	beq.n	800e7ce <put_fat+0x40>
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d06f      	beq.n	800e8ac <put_fat+0x11e>
 800e7cc:	e0de      	b.n	800e98c <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	617b      	str	r3, [r7, #20]
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	085b      	lsrs	r3, r3, #1
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	4413      	add	r3, r2
 800e7da:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	0a5b      	lsrs	r3, r3, #9
 800e7e6:	4413      	add	r3, r2
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f7ff fe19 	bl	800e422 <move_window>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7f4:	7ffb      	ldrb	r3, [r7, #31]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f040 80cb 	bne.w	800e992 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	617a      	str	r2, [r7, #20]
 800e802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	4413      	add	r3, r2
 800e80a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	f003 0301 	and.w	r3, r3, #1
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00d      	beq.n	800e832 <put_fat+0xa4>
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	b25b      	sxtb	r3, r3
 800e81c:	f003 030f 	and.w	r3, r3, #15
 800e820:	b25a      	sxtb	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	b2db      	uxtb	r3, r3
 800e826:	011b      	lsls	r3, r3, #4
 800e828:	b25b      	sxtb	r3, r3
 800e82a:	4313      	orrs	r3, r2
 800e82c:	b25b      	sxtb	r3, r3
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	e001      	b.n	800e836 <put_fat+0xa8>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	b2db      	uxtb	r3, r3
 800e836:	69ba      	ldr	r2, [r7, #24]
 800e838:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	0a5b      	lsrs	r3, r3, #9
 800e84c:	4413      	add	r3, r2
 800e84e:	4619      	mov	r1, r3
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f7ff fde6 	bl	800e422 <move_window>
 800e856:	4603      	mov	r3, r0
 800e858:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e85a:	7ffb      	ldrb	r3, [r7, #31]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f040 809a 	bne.w	800e996 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	f003 0301 	and.w	r3, r3, #1
 800e874:	2b00      	cmp	r3, #0
 800e876:	d003      	beq.n	800e880 <put_fat+0xf2>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	091b      	lsrs	r3, r3, #4
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	e00e      	b.n	800e89e <put_fat+0x110>
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	b25b      	sxtb	r3, r3
 800e886:	f023 030f 	bic.w	r3, r3, #15
 800e88a:	b25a      	sxtb	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	0a1b      	lsrs	r3, r3, #8
 800e890:	b25b      	sxtb	r3, r3
 800e892:	f003 030f 	and.w	r3, r3, #15
 800e896:	b25b      	sxtb	r3, r3
 800e898:	4313      	orrs	r3, r2
 800e89a:	b25b      	sxtb	r3, r3
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	69ba      	ldr	r2, [r7, #24]
 800e8a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800e8aa:	e079      	b.n	800e9a0 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	0a1b      	lsrs	r3, r3, #8
 800e8b6:	4413      	add	r3, r2
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f7ff fdb1 	bl	800e422 <move_window>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8c4:	7ffb      	ldrb	r3, [r7, #31]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d167      	bne.n	800e99a <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	701a      	strb	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	0a1b      	lsrs	r3, r3, #8
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	b2d2      	uxtb	r2, r2
 800e8ee:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800e8f8:	e052      	b.n	800e9a0 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	09db      	lsrs	r3, r3, #7
 800e904:	4413      	add	r3, r2
 800e906:	4619      	mov	r1, r3
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7ff fd8a 	bl	800e422 <move_window>
 800e90e:	4603      	mov	r3, r0
 800e910:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e912:	7ffb      	ldrb	r3, [r7, #31]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d142      	bne.n	800e99e <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4413      	add	r3, r2
 800e924:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	3303      	adds	r3, #3
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	061a      	lsls	r2, r3, #24
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	3302      	adds	r3, #2
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	041b      	lsls	r3, r3, #16
 800e936:	4313      	orrs	r3, r2
 800e938:	69ba      	ldr	r2, [r7, #24]
 800e93a:	3201      	adds	r2, #1
 800e93c:	7812      	ldrb	r2, [r2, #0]
 800e93e:	0212      	lsls	r2, r2, #8
 800e940:	4313      	orrs	r3, r2
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	7812      	ldrb	r2, [r2, #0]
 800e946:	4313      	orrs	r3, r2
 800e948:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	4313      	orrs	r3, r2
 800e950:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	b2da      	uxtb	r2, r3
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	701a      	strb	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	0a1b      	lsrs	r3, r3, #8
 800e960:	b29a      	uxth	r2, r3
 800e962:	69bb      	ldr	r3, [r7, #24]
 800e964:	3301      	adds	r3, #1
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	0c1a      	lsrs	r2, r3, #16
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	3302      	adds	r3, #2
 800e972:	b2d2      	uxtb	r2, r2
 800e974:	701a      	strb	r2, [r3, #0]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	0e1a      	lsrs	r2, r3, #24
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	3303      	adds	r3, #3
 800e97e:	b2d2      	uxtb	r2, r2
 800e980:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2201      	movs	r2, #1
 800e986:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800e98a:	e009      	b.n	800e9a0 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800e98c:	2302      	movs	r3, #2
 800e98e:	77fb      	strb	r3, [r7, #31]
 800e990:	e006      	b.n	800e9a0 <put_fat+0x212>
			if (res != FR_OK) break;
 800e992:	bf00      	nop
 800e994:	e004      	b.n	800e9a0 <put_fat+0x212>
			if (res != FR_OK) break;
 800e996:	bf00      	nop
 800e998:	e002      	b.n	800e9a0 <put_fat+0x212>
			if (res != FR_OK) break;
 800e99a:	bf00      	nop
 800e99c:	e000      	b.n	800e9a0 <put_fat+0x212>
			if (res != FR_OK) break;
 800e99e:	bf00      	nop
		}
	}

	return res;
 800e9a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3720      	adds	r7, #32
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d905      	bls.n	800e9c6 <remove_chain+0x1c>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d302      	bcc.n	800e9cc <remove_chain+0x22>
		res = FR_INT_ERR;
 800e9c6:	2302      	movs	r3, #2
 800e9c8:	73fb      	strb	r3, [r7, #15]
 800e9ca:	e043      	b.n	800ea54 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800e9d0:	e036      	b.n	800ea40 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff fe20 	bl	800e61a <get_fat>
 800e9da:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d035      	beq.n	800ea4e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d102      	bne.n	800e9ee <remove_chain+0x44>
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	73fb      	strb	r3, [r7, #15]
 800e9ec:	e032      	b.n	800ea54 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f4:	d102      	bne.n	800e9fc <remove_chain+0x52>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	73fb      	strb	r3, [r7, #15]
 800e9fa:	e02b      	b.n	800ea54 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	6839      	ldr	r1, [r7, #0]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff fec4 	bl	800e78e <put_fat>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ea0a:	7bfb      	ldrb	r3, [r7, #15]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d120      	bne.n	800ea52 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ea16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea1a:	d00f      	beq.n	800ea3c <remove_chain+0x92>
				fs->free_clust++;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ea22:	1c5a      	adds	r2, r3, #1
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ea30:	f043 0301 	orr.w	r3, r3, #1
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea46:	683a      	ldr	r2, [r7, #0]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d3c2      	bcc.n	800e9d2 <remove_chain+0x28>
 800ea4c:	e002      	b.n	800ea54 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800ea4e:	bf00      	nop
 800ea50:	e000      	b.n	800ea54 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800ea52:	bf00      	nop
		}
	}

	return res;
 800ea54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b086      	sub	sp, #24
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10f      	bne.n	800ea8e <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ea74:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d005      	beq.n	800ea88 <create_chain+0x2a>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea82:	693a      	ldr	r2, [r7, #16]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d31c      	bcc.n	800eac2 <create_chain+0x64>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	613b      	str	r3, [r7, #16]
 800ea8c:	e019      	b.n	800eac2 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f7ff fdc2 	bl	800e61a <get_fat>
 800ea96:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d801      	bhi.n	800eaa2 <create_chain+0x44>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e076      	b.n	800eb90 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa8:	d101      	bne.n	800eaae <create_chain+0x50>
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	e070      	b.n	800eb90 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d201      	bcs.n	800eabe <create_chain+0x60>
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	e068      	b.n	800eb90 <create_chain+0x132>
		scl = clst;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	3301      	adds	r3, #1
 800eaca:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d307      	bcc.n	800eae8 <create_chain+0x8a>
			ncl = 2;
 800ead8:	2302      	movs	r3, #2
 800eada:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800eadc:	697a      	ldr	r2, [r7, #20]
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d901      	bls.n	800eae8 <create_chain+0x8a>
 800eae4:	2300      	movs	r3, #0
 800eae6:	e053      	b.n	800eb90 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800eae8:	6979      	ldr	r1, [r7, #20]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7ff fd95 	bl	800e61a <get_fat>
 800eaf0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00e      	beq.n	800eb16 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafe:	d002      	beq.n	800eb06 <create_chain+0xa8>
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d101      	bne.n	800eb0a <create_chain+0xac>
			return cs;
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	e042      	b.n	800eb90 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d1d9      	bne.n	800eac6 <create_chain+0x68>
 800eb12:	2300      	movs	r3, #0
 800eb14:	e03c      	b.n	800eb90 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800eb16:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800eb18:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800eb1c:	6979      	ldr	r1, [r7, #20]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff fe35 	bl	800e78e <put_fat>
 800eb24:	4603      	mov	r3, r0
 800eb26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d109      	bne.n	800eb42 <create_chain+0xe4>
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d006      	beq.n	800eb42 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff fe28 	bl	800e78e <put_fat>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d11a      	bne.n	800eb7e <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5a:	d018      	beq.n	800eb8e <create_chain+0x130>
			fs->free_clust--;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eb62:	1e5a      	subs	r2, r3, #1
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800eb70:	f043 0301 	orr.w	r3, r3, #1
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800eb7c:	e007      	b.n	800eb8e <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d102      	bne.n	800eb8a <create_chain+0x12c>
 800eb84:	f04f 33ff 	mov.w	r3, #4294967295
 800eb88:	e000      	b.n	800eb8c <create_chain+0x12e>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800eb8e:	697b      	ldr	r3, [r7, #20]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800eba8:	3304      	adds	r3, #4
 800ebaa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	0a5b      	lsrs	r3, r3, #9
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ebb6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ebba:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	1d1a      	adds	r2, r3, #4
 800ebc4:	613a      	str	r2, [r7, #16]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d101      	bne.n	800ebd4 <clmt_clust+0x3c>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e010      	b.n	800ebf6 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d307      	bcc.n	800ebec <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800ebdc:	697a      	ldr	r2, [r7, #20]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	617b      	str	r3, [r7, #20]
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ebea:	e7e9      	b.n	800ebc0 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800ebec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	4413      	add	r3, r2
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	371c      	adds	r7, #28
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bc80      	pop	{r7}
 800ebfe:	4770      	bx	lr

0800ec00 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ec1a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d007      	beq.n	800ec32 <dir_sdi+0x32>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ec2c:	697a      	ldr	r2, [r7, #20]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d301      	bcc.n	800ec36 <dir_sdi+0x36>
		return FR_INT_ERR;
 800ec32:	2302      	movs	r3, #2
 800ec34:	e074      	b.n	800ed20 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10c      	bne.n	800ec56 <dir_sdi+0x56>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d105      	bne.n	800ec56 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec50:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ec54:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d111      	bne.n	800ec80 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec62:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ec66:	461a      	mov	r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d301      	bcc.n	800ec72 <dir_sdi+0x72>
			return FR_INT_ERR;
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e056      	b.n	800ed20 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec78:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ec7c:	613b      	str	r3, [r7, #16]
 800ec7e:	e032      	b.n	800ece6 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec86:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800ec8e:	e01e      	b.n	800ecce <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec96:	6979      	ldr	r1, [r7, #20]
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fcbe 	bl	800e61a <get_fat>
 800ec9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	d101      	bne.n	800ecac <dir_sdi+0xac>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e039      	b.n	800ed20 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d907      	bls.n	800ecc2 <dir_sdi+0xc2>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ecb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ecbc:	697a      	ldr	r2, [r7, #20]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d301      	bcc.n	800ecc6 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	e02c      	b.n	800ed20 <dir_sdi+0x120>
			idx -= ic;
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d2dc      	bcs.n	800ec90 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ecdc:	6979      	ldr	r1, [r7, #20]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7ff fc7a 	bl	800e5d8 <clust2sect>
 800ece4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <dir_sdi+0xf8>
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	e013      	b.n	800ed20 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	091a      	lsrs	r2, r3, #4
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	441a      	add	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	f003 030f 	and.w	r3, r3, #15
 800ed14:	015b      	lsls	r3, r3, #5
 800ed16:	441a      	add	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ed28:	b590      	push	{r4, r7, lr}
 800ed2a:	b087      	sub	sp, #28
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800ed38:	3301      	adds	r3, #1
 800ed3a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d004      	beq.n	800ed4e <dir_next+0x26>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d101      	bne.n	800ed52 <dir_next+0x2a>
		return FR_NO_FILE;
 800ed4e:	2304      	movs	r3, #4
 800ed50:	e0dd      	b.n	800ef0e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f003 030f 	and.w	r3, r3, #15
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f040 80c6 	bne.w	800eeea <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10b      	bne.n	800ed8e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed7c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ed80:	461a      	mov	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	4293      	cmp	r3, r2
 800ed86:	f0c0 80b0 	bcc.w	800eeea <dir_next+0x1c2>
				return FR_NO_FILE;
 800ed8a:	2304      	movs	r3, #4
 800ed8c:	e0bf      	b.n	800ef0e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	091b      	lsrs	r3, r3, #4
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ed98:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ed9c:	3a01      	subs	r2, #1
 800ed9e:	4013      	ands	r3, r2
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f040 80a2 	bne.w	800eeea <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800edb2:	4619      	mov	r1, r3
 800edb4:	4610      	mov	r0, r2
 800edb6:	f7ff fc30 	bl	800e61a <get_fat>
 800edba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d801      	bhi.n	800edc6 <dir_next+0x9e>
 800edc2:	2302      	movs	r3, #2
 800edc4:	e0a3      	b.n	800ef0e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edcc:	d101      	bne.n	800edd2 <dir_next+0xaa>
 800edce:	2301      	movs	r3, #1
 800edd0:	e09d      	b.n	800ef0e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800edd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d374      	bcc.n	800eecc <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d101      	bne.n	800edec <dir_next+0xc4>
 800ede8:	2304      	movs	r3, #4
 800edea:	e090      	b.n	800ef0e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800edf8:	4619      	mov	r1, r3
 800edfa:	4610      	mov	r0, r2
 800edfc:	f7ff fe2f 	bl	800ea5e <create_chain>
 800ee00:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <dir_next+0xe4>
 800ee08:	2307      	movs	r3, #7
 800ee0a:	e080      	b.n	800ef0e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d101      	bne.n	800ee16 <dir_next+0xee>
 800ee12:	2302      	movs	r3, #2
 800ee14:	e07b      	b.n	800ef0e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee1c:	d101      	bne.n	800ee22 <dir_next+0xfa>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e075      	b.n	800ef0e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7ff fab1 	bl	800e390 <sync_window>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <dir_next+0x110>
 800ee34:	2301      	movs	r3, #1
 800ee36:	e06a      	b.n	800ef0e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee42:	2100      	movs	r1, #0
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff f895 	bl	800df74 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800ee56:	6979      	ldr	r1, [r7, #20]
 800ee58:	4610      	mov	r0, r2
 800ee5a:	f7ff fbbd 	bl	800e5d8 <clust2sect>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ee64:	2300      	movs	r3, #0
 800ee66:	613b      	str	r3, [r7, #16]
 800ee68:	e01b      	b.n	800eea2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff fa87 	bl	800e390 <sync_window>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <dir_next+0x164>
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e040      	b.n	800ef0e <dir_next+0x1e6>
						dp->fs->winsect++;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee92:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ee96:	3201      	adds	r2, #1
 800ee98:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	613b      	str	r3, [r7, #16]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eea8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800eeac:	461a      	mov	r2, r3
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d3da      	bcc.n	800ee6a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eeba:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	1a8a      	subs	r2, r1, r2
 800eec8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eeda:	6979      	ldr	r1, [r7, #20]
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff fb7b 	bl	800e5d8 <clust2sect>
 800eee2:	4602      	mov	r2, r0
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eefa:	461a      	mov	r2, r3
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f003 030f 	and.w	r3, r3, #15
 800ef02:	015b      	lsls	r3, r3, #5
 800ef04:	441a      	add	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	371c      	adds	r7, #28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd90      	pop	{r4, r7, pc}

0800ef16 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ef20:	2100      	movs	r1, #0
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7ff fe6c 	bl	800ec00 <dir_sdi>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ef2c:	7bfb      	ldrb	r3, [r7, #15]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d131      	bne.n	800ef96 <dir_alloc+0x80>
		n = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ef42:	4619      	mov	r1, r3
 800ef44:	4610      	mov	r0, r2
 800ef46:	f7ff fa6c 	bl	800e422 <move_window>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d11f      	bne.n	800ef94 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2be5      	cmp	r3, #229	; 0xe5
 800ef5e:	d005      	beq.n	800ef6c <dir_alloc+0x56>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d107      	bne.n	800ef7c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	3301      	adds	r3, #1
 800ef70:	60bb      	str	r3, [r7, #8]
 800ef72:	68ba      	ldr	r2, [r7, #8]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d102      	bne.n	800ef80 <dir_alloc+0x6a>
 800ef7a:	e00c      	b.n	800ef96 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800ef80:	2101      	movs	r1, #1
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff fed0 	bl	800ed28 <dir_next>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800ef8c:	7bfb      	ldrb	r3, [r7, #15]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d0d1      	beq.n	800ef36 <dir_alloc+0x20>
 800ef92:	e000      	b.n	800ef96 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800ef94:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ef96:	7bfb      	ldrb	r3, [r7, #15]
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	d101      	bne.n	800efa0 <dir_alloc+0x8a>
 800ef9c:	2307      	movs	r3, #7
 800ef9e:	73fb      	strb	r3, [r7, #15]
	return res;
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800efaa:	b480      	push	{r7}
 800efac:	b085      	sub	sp, #20
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	331b      	adds	r3, #27
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	021b      	lsls	r3, r3, #8
 800efbc:	b21a      	sxth	r2, r3
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	331a      	adds	r3, #26
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	b21b      	sxth	r3, r3
 800efc6:	4313      	orrs	r3, r2
 800efc8:	b21b      	sxth	r3, r3
 800efca:	b29b      	uxth	r3, r3
 800efcc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800efd4:	2b03      	cmp	r3, #3
 800efd6:	d10f      	bne.n	800eff8 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	3315      	adds	r3, #21
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	021b      	lsls	r3, r3, #8
 800efe0:	b21a      	sxth	r2, r3
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	3314      	adds	r3, #20
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	b21b      	sxth	r3, r3
 800efea:	4313      	orrs	r3, r2
 800efec:	b21b      	sxth	r3, r3
 800efee:	b29b      	uxth	r3, r3
 800eff0:	041b      	lsls	r3, r3, #16
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	4313      	orrs	r3, r2
 800eff6:	60fb      	str	r3, [r7, #12]

	return cl;
 800eff8:	68fb      	ldr	r3, [r7, #12]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3714      	adds	r7, #20
 800effe:	46bd      	mov	sp, r7
 800f000:	bc80      	pop	{r7}
 800f002:	4770      	bx	lr

0800f004 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	331a      	adds	r3, #26
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	b2d2      	uxtb	r2, r2
 800f016:	701a      	strb	r2, [r3, #0]
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	0a1b      	lsrs	r3, r3, #8
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	331b      	adds	r3, #27
 800f024:	b2d2      	uxtb	r2, r2
 800f026:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	0c1a      	lsrs	r2, r3, #16
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3314      	adds	r3, #20
 800f030:	b2d2      	uxtb	r2, r2
 800f032:	701a      	strb	r2, [r3, #0]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	0c1b      	lsrs	r3, r3, #16
 800f038:	b29b      	uxth	r3, r3
 800f03a:	0a1b      	lsrs	r3, r3, #8
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	3315      	adds	r3, #21
 800f042:	b2d2      	uxtb	r2, r2
 800f044:	701a      	strb	r2, [r3, #0]
}
 800f046:	bf00      	nop
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bc80      	pop	{r7}
 800f04e:	4770      	bx	lr

0800f050 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f058:	2100      	movs	r1, #0
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7ff fdd0 	bl	800ec00 <dir_sdi>
 800f060:	4603      	mov	r3, r0
 800f062:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f064:	7dfb      	ldrb	r3, [r7, #23]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <dir_find+0x1e>
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
 800f06c:	e03b      	b.n	800f0e6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f07a:	4619      	mov	r1, r3
 800f07c:	4610      	mov	r0, r2
 800f07e:	f7ff f9d0 	bl	800e422 <move_window>
 800f082:	4603      	mov	r3, r0
 800f084:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f086:	7dfb      	ldrb	r3, [r7, #23]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d128      	bne.n	800f0de <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f092:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d102      	bne.n	800f0a6 <dir_find+0x56>
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	75fb      	strb	r3, [r7, #23]
 800f0a4:	e01e      	b.n	800f0e4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	330b      	adds	r3, #11
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 0308 	and.w	r3, r3, #8
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10a      	bne.n	800f0ca <dir_find+0x7a>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f0ba:	220b      	movs	r2, #11
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6938      	ldr	r0, [r7, #16]
 800f0c0:	f7fe ff72 	bl	800dfa8 <mem_cmp>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00b      	beq.n	800f0e2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7ff fe2b 	bl	800ed28 <dir_next>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d0c8      	beq.n	800f06e <dir_find+0x1e>
 800f0dc:	e002      	b.n	800f0e4 <dir_find+0x94>
		if (res != FR_OK) break;
 800f0de:	bf00      	nop
 800f0e0:	e000      	b.n	800f0e4 <dir_find+0x94>
			break;
 800f0e2:	bf00      	nop

	return res;
 800f0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f0f6:	2101      	movs	r1, #1
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f7ff ff0c 	bl	800ef16 <dir_alloc>
 800f0fe:	4603      	mov	r3, r0
 800f100:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800f102:	7bfb      	ldrb	r3, [r7, #15]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d126      	bne.n	800f156 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f114:	4619      	mov	r1, r3
 800f116:	4610      	mov	r0, r2
 800f118:	f7ff f983 	bl	800e422 <move_window>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f120:	7bfb      	ldrb	r3, [r7, #15]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d117      	bne.n	800f156 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f12c:	2220      	movs	r2, #32
 800f12e:	2100      	movs	r1, #0
 800f130:	4618      	mov	r0, r3
 800f132:	f7fe ff1f 	bl	800df74 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f142:	220b      	movs	r2, #11
 800f144:	4619      	mov	r1, r3
 800f146:	f7fe fef7 	bl	800df38 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f150:	2201      	movs	r2, #1
 800f152:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	e002      	b.n	800f178 <create_name+0x18>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	3301      	adds	r3, #1
 800f176:	60fb      	str	r3, [r7, #12]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b2f      	cmp	r3, #47	; 0x2f
 800f17e:	d0f8      	beq.n	800f172 <create_name+0x12>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	2b5c      	cmp	r3, #92	; 0x5c
 800f186:	d0f4      	beq.n	800f172 <create_name+0x12>
	sfn = dp->fn;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f18e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f190:	220b      	movs	r2, #11
 800f192:	2120      	movs	r1, #32
 800f194:	68b8      	ldr	r0, [r7, #8]
 800f196:	f7fe feed 	bl	800df74 <mem_set>
	si = i = b = 0; ni = 8;
 800f19a:	2300      	movs	r3, #0
 800f19c:	77fb      	strb	r3, [r7, #31]
 800f19e:	2300      	movs	r3, #0
 800f1a0:	613b      	str	r3, [r7, #16]
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	617b      	str	r3, [r7, #20]
 800f1a6:	2308      	movs	r3, #8
 800f1a8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	1c5a      	adds	r2, r3, #1
 800f1ae:	617a      	str	r2, [r7, #20]
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800f1b8:	7fbb      	ldrb	r3, [r7, #30]
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d953      	bls.n	800f266 <create_name+0x106>
 800f1be:	7fbb      	ldrb	r3, [r7, #30]
 800f1c0:	2b2f      	cmp	r3, #47	; 0x2f
 800f1c2:	d050      	beq.n	800f266 <create_name+0x106>
 800f1c4:	7fbb      	ldrb	r3, [r7, #30]
 800f1c6:	2b5c      	cmp	r3, #92	; 0x5c
 800f1c8:	d04d      	beq.n	800f266 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800f1ca:	7fbb      	ldrb	r3, [r7, #30]
 800f1cc:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ce:	d003      	beq.n	800f1d8 <create_name+0x78>
 800f1d0:	693a      	ldr	r2, [r7, #16]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d30f      	bcc.n	800f1f8 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	2b08      	cmp	r3, #8
 800f1dc:	d102      	bne.n	800f1e4 <create_name+0x84>
 800f1de:	7fbb      	ldrb	r3, [r7, #30]
 800f1e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f1e2:	d001      	beq.n	800f1e8 <create_name+0x88>
 800f1e4:	2306      	movs	r3, #6
 800f1e6:	e073      	b.n	800f2d0 <create_name+0x170>
			i = 8; ni = 11;
 800f1e8:	2308      	movs	r3, #8
 800f1ea:	613b      	str	r3, [r7, #16]
 800f1ec:	230b      	movs	r3, #11
 800f1ee:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800f1f0:	7ffb      	ldrb	r3, [r7, #31]
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	77fb      	strb	r3, [r7, #31]
 800f1f6:	e035      	b.n	800f264 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f1f8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	da08      	bge.n	800f212 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800f200:	7ffb      	ldrb	r3, [r7, #31]
 800f202:	f043 0303 	orr.w	r3, r3, #3
 800f206:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f208:	7fbb      	ldrb	r3, [r7, #30]
 800f20a:	3b80      	subs	r3, #128	; 0x80
 800f20c:	4a32      	ldr	r2, [pc, #200]	; (800f2d8 <create_name+0x178>)
 800f20e:	5cd3      	ldrb	r3, [r2, r3]
 800f210:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800f212:	7fbb      	ldrb	r3, [r7, #30]
 800f214:	4619      	mov	r1, r3
 800f216:	4831      	ldr	r0, [pc, #196]	; (800f2dc <create_name+0x17c>)
 800f218:	f7fe feec 	bl	800dff4 <chk_chr>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <create_name+0xc6>
				return FR_INVALID_NAME;
 800f222:	2306      	movs	r3, #6
 800f224:	e054      	b.n	800f2d0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800f226:	7fbb      	ldrb	r3, [r7, #30]
 800f228:	2b40      	cmp	r3, #64	; 0x40
 800f22a:	d907      	bls.n	800f23c <create_name+0xdc>
 800f22c:	7fbb      	ldrb	r3, [r7, #30]
 800f22e:	2b5a      	cmp	r3, #90	; 0x5a
 800f230:	d804      	bhi.n	800f23c <create_name+0xdc>
				b |= 2;
 800f232:	7ffb      	ldrb	r3, [r7, #31]
 800f234:	f043 0302 	orr.w	r3, r3, #2
 800f238:	77fb      	strb	r3, [r7, #31]
 800f23a:	e00c      	b.n	800f256 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800f23c:	7fbb      	ldrb	r3, [r7, #30]
 800f23e:	2b60      	cmp	r3, #96	; 0x60
 800f240:	d909      	bls.n	800f256 <create_name+0xf6>
 800f242:	7fbb      	ldrb	r3, [r7, #30]
 800f244:	2b7a      	cmp	r3, #122	; 0x7a
 800f246:	d806      	bhi.n	800f256 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800f248:	7ffb      	ldrb	r3, [r7, #31]
 800f24a:	f043 0301 	orr.w	r3, r3, #1
 800f24e:	77fb      	strb	r3, [r7, #31]
 800f250:	7fbb      	ldrb	r3, [r7, #30]
 800f252:	3b20      	subs	r3, #32
 800f254:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	613a      	str	r2, [r7, #16]
 800f25c:	68ba      	ldr	r2, [r7, #8]
 800f25e:	4413      	add	r3, r2
 800f260:	7fba      	ldrb	r2, [r7, #30]
 800f262:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f264:	e7a1      	b.n	800f1aa <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	441a      	add	r2, r3
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f270:	7fbb      	ldrb	r3, [r7, #30]
 800f272:	2b20      	cmp	r3, #32
 800f274:	d801      	bhi.n	800f27a <create_name+0x11a>
 800f276:	2304      	movs	r3, #4
 800f278:	e000      	b.n	800f27c <create_name+0x11c>
 800f27a:	2300      	movs	r3, #0
 800f27c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d101      	bne.n	800f288 <create_name+0x128>
 800f284:	2306      	movs	r3, #6
 800f286:	e023      	b.n	800f2d0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	2be5      	cmp	r3, #229	; 0xe5
 800f28e:	d102      	bne.n	800f296 <create_name+0x136>
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	2205      	movs	r2, #5
 800f294:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	2b08      	cmp	r3, #8
 800f29a:	d102      	bne.n	800f2a2 <create_name+0x142>
 800f29c:	7ffb      	ldrb	r3, [r7, #31]
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800f2a2:	7ffb      	ldrb	r3, [r7, #31]
 800f2a4:	f003 0303 	and.w	r3, r3, #3
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d103      	bne.n	800f2b4 <create_name+0x154>
 800f2ac:	7fbb      	ldrb	r3, [r7, #30]
 800f2ae:	f043 0310 	orr.w	r3, r3, #16
 800f2b2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800f2b4:	7ffb      	ldrb	r3, [r7, #31]
 800f2b6:	f003 030c 	and.w	r3, r3, #12
 800f2ba:	2b04      	cmp	r3, #4
 800f2bc:	d103      	bne.n	800f2c6 <create_name+0x166>
 800f2be:	7fbb      	ldrb	r3, [r7, #30]
 800f2c0:	f043 0308 	orr.w	r3, r3, #8
 800f2c4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	330b      	adds	r3, #11
 800f2ca:	7fba      	ldrb	r2, [r7, #30]
 800f2cc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f2ce:	2300      	movs	r3, #0
#endif
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3720      	adds	r7, #32
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	0802d6c8 	.word	0x0802d6c8
 800f2dc:	08014410 	.word	0x08014410

0800f2e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b2f      	cmp	r3, #47	; 0x2f
 800f2f0:	d003      	beq.n	800f2fa <follow_path+0x1a>
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	2b5c      	cmp	r3, #92	; 0x5c
 800f2f8:	d102      	bne.n	800f300 <follow_path+0x20>
		path++;
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2b1f      	cmp	r3, #31
 800f30e:	d80a      	bhi.n	800f326 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800f310:	2100      	movs	r1, #0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fc74 	bl	800ec00 <dir_sdi>
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800f324:	e045      	b.n	800f3b2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f326:	463b      	mov	r3, r7
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7ff ff18 	bl	800f160 <create_name>
 800f330:	4603      	mov	r3, r0
 800f332:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d136      	bne.n	800f3a8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff fe88 	bl	800f050 <dir_find>
 800f340:	4603      	mov	r3, r0
 800f342:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f34a:	7adb      	ldrb	r3, [r3, #11]
 800f34c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00a      	beq.n	800f36a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f354:	7bfb      	ldrb	r3, [r7, #15]
 800f356:	2b04      	cmp	r3, #4
 800f358:	d128      	bne.n	800f3ac <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
 800f35c:	f003 0304 	and.w	r3, r3, #4
 800f360:	2b00      	cmp	r3, #0
 800f362:	d123      	bne.n	800f3ac <follow_path+0xcc>
 800f364:	2305      	movs	r3, #5
 800f366:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800f368:	e020      	b.n	800f3ac <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	f003 0304 	and.w	r3, r3, #4
 800f370:	2b00      	cmp	r3, #0
 800f372:	d11d      	bne.n	800f3b0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f37a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	330b      	adds	r3, #11
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	f003 0310 	and.w	r3, r3, #16
 800f386:	2b00      	cmp	r3, #0
 800f388:	d102      	bne.n	800f390 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800f38a:	2305      	movs	r3, #5
 800f38c:	73fb      	strb	r3, [r7, #15]
 800f38e:	e010      	b.n	800f3b2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff fe06 	bl	800efaa <ld_clust>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3a6:	e7be      	b.n	800f326 <follow_path+0x46>
			if (res != FR_OK) break;
 800f3a8:	bf00      	nop
 800f3aa:	e002      	b.n	800f3b2 <follow_path+0xd2>
				break;
 800f3ac:	bf00      	nop
 800f3ae:	e000      	b.n	800f3b2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3b0:	bf00      	nop
		}
	}

	return res;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d031      	beq.n	800f436 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	617b      	str	r3, [r7, #20]
 800f3d8:	e002      	b.n	800f3e0 <get_ldnumber+0x24>
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	2b20      	cmp	r3, #32
 800f3e6:	d903      	bls.n	800f3f0 <get_ldnumber+0x34>
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	2b3a      	cmp	r3, #58	; 0x3a
 800f3ee:	d1f4      	bne.n	800f3da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b3a      	cmp	r3, #58	; 0x3a
 800f3f6:	d11c      	bne.n	800f432 <get_ldnumber+0x76>
			tp = *path;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	60fa      	str	r2, [r7, #12]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	3b30      	subs	r3, #48	; 0x30
 800f408:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b09      	cmp	r3, #9
 800f40e:	d80e      	bhi.n	800f42e <get_ldnumber+0x72>
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	429a      	cmp	r2, r3
 800f416:	d10a      	bne.n	800f42e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d107      	bne.n	800f42e <get_ldnumber+0x72>
					vol = (int)i;
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	3301      	adds	r3, #1
 800f426:	617b      	str	r3, [r7, #20]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	697a      	ldr	r2, [r7, #20]
 800f42c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	e002      	b.n	800f438 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f432:	2300      	movs	r3, #0
 800f434:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f436:	693b      	ldr	r3, [r7, #16]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	371c      	adds	r7, #28
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bc80      	pop	{r7}
 800f440:	4770      	bx	lr
	...

0800f444 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f04f 32ff 	mov.w	r2, #4294967295
 800f45c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7fe ffdd 	bl	800e422 <move_window>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <check_fs+0x2e>
		return 3;
 800f46e:	2303      	movs	r3, #3
 800f470:	e04a      	b.n	800f508 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f478:	3301      	adds	r3, #1
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	021b      	lsls	r3, r3, #8
 800f47e:	b21a      	sxth	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800f486:	b21b      	sxth	r3, r3
 800f488:	4313      	orrs	r3, r2
 800f48a:	b21b      	sxth	r3, r3
 800f48c:	4a20      	ldr	r2, [pc, #128]	; (800f510 <check_fs+0xcc>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d001      	beq.n	800f496 <check_fs+0x52>
		return 2;
 800f492:	2302      	movs	r3, #2
 800f494:	e038      	b.n	800f508 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3336      	adds	r3, #54	; 0x36
 800f49a:	3303      	adds	r3, #3
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	061a      	lsls	r2, r3, #24
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3336      	adds	r3, #54	; 0x36
 800f4a4:	3302      	adds	r3, #2
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	041b      	lsls	r3, r3, #16
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	3236      	adds	r2, #54	; 0x36
 800f4b0:	3201      	adds	r2, #1
 800f4b2:	7812      	ldrb	r2, [r2, #0]
 800f4b4:	0212      	lsls	r2, r2, #8
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f4c4:	4a13      	ldr	r2, [pc, #76]	; (800f514 <check_fs+0xd0>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d101      	bne.n	800f4ce <check_fs+0x8a>
		return 0;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	e01c      	b.n	800f508 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	3352      	adds	r3, #82	; 0x52
 800f4d2:	3303      	adds	r3, #3
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	061a      	lsls	r2, r3, #24
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3352      	adds	r3, #82	; 0x52
 800f4dc:	3302      	adds	r3, #2
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	041b      	lsls	r3, r3, #16
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	3252      	adds	r2, #82	; 0x52
 800f4e8:	3201      	adds	r2, #1
 800f4ea:	7812      	ldrb	r2, [r2, #0]
 800f4ec:	0212      	lsls	r2, r2, #8
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f4fc:	4a05      	ldr	r2, [pc, #20]	; (800f514 <check_fs+0xd0>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d101      	bne.n	800f506 <check_fs+0xc2>
		return 0;
 800f502:	2300      	movs	r3, #0
 800f504:	e000      	b.n	800f508 <check_fs+0xc4>

	return 1;
 800f506:	2301      	movs	r3, #1
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	ffffaa55 	.word	0xffffaa55
 800f514:	00544146 	.word	0x00544146

0800f518 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b096      	sub	sp, #88	; 0x58
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2200      	movs	r2, #0
 800f52a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f52c:	68b8      	ldr	r0, [r7, #8]
 800f52e:	f7ff ff45 	bl	800f3bc <get_ldnumber>
 800f532:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f536:	2b00      	cmp	r3, #0
 800f538:	da01      	bge.n	800f53e <find_volume+0x26>
 800f53a:	230b      	movs	r3, #11
 800f53c:	e2a8      	b.n	800fa90 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f53e:	4a9d      	ldr	r2, [pc, #628]	; (800f7b4 <find_volume+0x29c>)
 800f540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f546:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <find_volume+0x3a>
 800f54e:	230c      	movs	r3, #12
 800f550:	e29e      	b.n	800fa90 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f556:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800f558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d01b      	beq.n	800f59a <find_volume+0x82>
		stat = disk_status(fs->drv);
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe fc47 	bl	800ddfc <disk_status>
 800f56e:	4603      	mov	r3, r0
 800f570:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f574:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10c      	bne.n	800f59a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800f580:	79fb      	ldrb	r3, [r7, #7]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d007      	beq.n	800f596 <find_volume+0x7e>
 800f586:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f58a:	f003 0304 	and.w	r3, r3, #4
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800f592:	230a      	movs	r3, #10
 800f594:	e27c      	b.n	800fa90 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800f596:	2300      	movs	r3, #0
 800f598:	e27a      	b.n	800fa90 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fc3c 	bl	800de30 <disk_initialize>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800f5be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5c2:	f003 0301 	and.w	r3, r3, #1
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	e260      	b.n	800fa90 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800f5ce:	79fb      	ldrb	r3, [r7, #7]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d007      	beq.n	800f5e4 <find_volume+0xcc>
 800f5d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d001      	beq.n	800f5e4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f5e0:	230a      	movs	r3, #10
 800f5e2:	e255      	b.n	800fa90 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800f5e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5ec:	f7ff ff2a 	bl	800f444 <check_fs>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800f5f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d153      	bne.n	800f6a6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f5fe:	2300      	movs	r3, #0
 800f600:	643b      	str	r3, [r7, #64]	; 0x40
 800f602:	e028      	b.n	800f656 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800f604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f608:	011b      	lsls	r3, r3, #4
 800f60a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f60e:	4413      	add	r3, r2
 800f610:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800f612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f614:	3304      	adds	r3, #4
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d012      	beq.n	800f642 <find_volume+0x12a>
 800f61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61e:	330b      	adds	r3, #11
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	061a      	lsls	r2, r3, #24
 800f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f626:	330a      	adds	r3, #10
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	041b      	lsls	r3, r3, #16
 800f62c:	4313      	orrs	r3, r2
 800f62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f630:	3209      	adds	r2, #9
 800f632:	7812      	ldrb	r2, [r2, #0]
 800f634:	0212      	lsls	r2, r2, #8
 800f636:	4313      	orrs	r3, r2
 800f638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f63a:	3208      	adds	r2, #8
 800f63c:	7812      	ldrb	r2, [r2, #0]
 800f63e:	431a      	orrs	r2, r3
 800f640:	e000      	b.n	800f644 <find_volume+0x12c>
 800f642:	2200      	movs	r2, #0
 800f644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	3358      	adds	r3, #88	; 0x58
 800f64a:	443b      	add	r3, r7
 800f64c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f652:	3301      	adds	r3, #1
 800f654:	643b      	str	r3, [r7, #64]	; 0x40
 800f656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d9d3      	bls.n	800f604 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800f65c:	2300      	movs	r3, #0
 800f65e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f662:	2b00      	cmp	r3, #0
 800f664:	d002      	beq.n	800f66c <find_volume+0x154>
 800f666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f668:	3b01      	subs	r3, #1
 800f66a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800f66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	3358      	adds	r3, #88	; 0x58
 800f672:	443b      	add	r3, r7
 800f674:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f678:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800f67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d005      	beq.n	800f68c <find_volume+0x174>
 800f680:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f682:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f684:	f7ff fede 	bl	800f444 <check_fs>
 800f688:	4603      	mov	r3, r0
 800f68a:	e000      	b.n	800f68e <find_volume+0x176>
 800f68c:	2302      	movs	r3, #2
 800f68e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800f692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f696:	2b00      	cmp	r3, #0
 800f698:	d005      	beq.n	800f6a6 <find_volume+0x18e>
 800f69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f69c:	3301      	adds	r3, #1
 800f69e:	643b      	str	r3, [r7, #64]	; 0x40
 800f6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6a2:	2b03      	cmp	r3, #3
 800f6a4:	d9e2      	bls.n	800f66c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f6a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6aa:	2b03      	cmp	r3, #3
 800f6ac:	d101      	bne.n	800f6b2 <find_volume+0x19a>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e1ee      	b.n	800fa90 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800f6b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d001      	beq.n	800f6be <find_volume+0x1a6>
 800f6ba:	230d      	movs	r3, #13
 800f6bc:	e1e8      	b.n	800fa90 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	7b1b      	ldrb	r3, [r3, #12]
 800f6c2:	021b      	lsls	r3, r3, #8
 800f6c4:	b21a      	sxth	r2, r3
 800f6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c8:	7adb      	ldrb	r3, [r3, #11]
 800f6ca:	b21b      	sxth	r3, r3
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	b21b      	sxth	r3, r3
 800f6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6d4:	d001      	beq.n	800f6da <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800f6d6:	230d      	movs	r3, #13
 800f6d8:	e1da      	b.n	800fa90 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800f6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6dc:	7ddb      	ldrb	r3, [r3, #23]
 800f6de:	021b      	lsls	r3, r3, #8
 800f6e0:	b21a      	sxth	r2, r3
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e4:	7d9b      	ldrb	r3, [r3, #22]
 800f6e6:	b21b      	sxth	r3, r3
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	b21b      	sxth	r3, r3
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800f6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d112      	bne.n	800f71c <find_volume+0x204>
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f6fc:	061a      	lsls	r2, r3, #24
 800f6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f700:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f704:	041b      	lsls	r3, r3, #16
 800f706:	4313      	orrs	r3, r2
 800f708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f70a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800f70e:	0212      	lsls	r2, r2, #8
 800f710:	4313      	orrs	r3, r2
 800f712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f714:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800f718:	4313      	orrs	r3, r2
 800f71a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800f71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f720:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800f724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f726:	7c1a      	ldrb	r2, [r3, #16]
 800f728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f734:	2b01      	cmp	r3, #1
 800f736:	d006      	beq.n	800f746 <find_volume+0x22e>
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f73e:	2b02      	cmp	r3, #2
 800f740:	d001      	beq.n	800f746 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800f742:	230d      	movs	r3, #13
 800f744:	e1a4      	b.n	800fa90 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800f746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f748:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f74c:	461a      	mov	r2, r3
 800f74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f750:	fb02 f303 	mul.w	r3, r2, r3
 800f754:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800f756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f758:	7b5a      	ldrb	r2, [r3, #13]
 800f75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f762:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00a      	beq.n	800f780 <find_volume+0x268>
 800f76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f76c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f770:	461a      	mov	r2, r3
 800f772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f774:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f778:	3b01      	subs	r3, #1
 800f77a:	4013      	ands	r3, r2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800f780:	230d      	movs	r3, #13
 800f782:	e185      	b.n	800fa90 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	7c9b      	ldrb	r3, [r3, #18]
 800f788:	021b      	lsls	r3, r3, #8
 800f78a:	b21a      	sxth	r2, r3
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	7c5b      	ldrb	r3, [r3, #17]
 800f790:	b21b      	sxth	r3, r3
 800f792:	4313      	orrs	r3, r2
 800f794:	b21b      	sxth	r3, r3
 800f796:	b29a      	uxth	r2, r3
 800f798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800f79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f7a4:	f003 030f 	and.w	r3, r3, #15
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d004      	beq.n	800f7b8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800f7ae:	230d      	movs	r3, #13
 800f7b0:	e16e      	b.n	800fa90 <find_volume+0x578>
 800f7b2:	bf00      	nop
 800f7b4:	20000e48 	.word	0x20000e48

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ba:	7d1b      	ldrb	r3, [r3, #20]
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	b21a      	sxth	r2, r3
 800f7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c2:	7cdb      	ldrb	r3, [r3, #19]
 800f7c4:	b21b      	sxth	r3, r3
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	b21b      	sxth	r3, r3
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800f7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d112      	bne.n	800f7fa <find_volume+0x2e2>
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f7da:	061a      	lsls	r2, r3, #24
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f7e2:	041b      	lsls	r3, r3, #16
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7e8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800f7ec:	0212      	lsls	r2, r2, #8
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fc:	7bdb      	ldrb	r3, [r3, #15]
 800f7fe:	021b      	lsls	r3, r3, #8
 800f800:	b21a      	sxth	r2, r3
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	7b9b      	ldrb	r3, [r3, #14]
 800f806:	b21b      	sxth	r3, r3
 800f808:	4313      	orrs	r3, r2
 800f80a:	b21b      	sxth	r3, r3
 800f80c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800f80e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f810:	2b00      	cmp	r3, #0
 800f812:	d101      	bne.n	800f818 <find_volume+0x300>
 800f814:	230d      	movs	r3, #13
 800f816:	e13b      	b.n	800fa90 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800f818:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f81c:	4413      	add	r3, r2
 800f81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f820:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800f824:	0912      	lsrs	r2, r2, #4
 800f826:	b292      	uxth	r2, r2
 800f828:	4413      	add	r3, r2
 800f82a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f82c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f830:	429a      	cmp	r2, r3
 800f832:	d201      	bcs.n	800f838 <find_volume+0x320>
 800f834:	230d      	movs	r3, #13
 800f836:	e12b      	b.n	800fa90 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800f838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f840:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800f844:	fbb3 f3f2 	udiv	r3, r3, r2
 800f848:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800f84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d101      	bne.n	800f854 <find_volume+0x33c>
 800f850:	230d      	movs	r3, #13
 800f852:	e11d      	b.n	800fa90 <find_volume+0x578>
	fmt = FS_FAT12;
 800f854:	2301      	movs	r3, #1
 800f856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f860:	4293      	cmp	r3, r2
 800f862:	d902      	bls.n	800f86a <find_volume+0x352>
 800f864:	2302      	movs	r3, #2
 800f866:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800f86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f870:	4293      	cmp	r3, r2
 800f872:	d902      	bls.n	800f87a <find_volume+0x362>
 800f874:	2303      	movs	r3, #3
 800f876:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	1c9a      	adds	r2, r3, #2
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f888:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800f88c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f890:	441a      	add	r2, r3
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800f898:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89c:	441a      	add	r2, r3
 800f89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800f8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8a8:	2b03      	cmp	r3, #3
 800f8aa:	d121      	bne.n	800f8f0 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800f8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ae:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d001      	beq.n	800f8ba <find_volume+0x3a2>
 800f8b6:	230d      	movs	r3, #13
 800f8b8:	e0ea      	b.n	800fa90 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800f8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f8c0:	061a      	lsls	r2, r3, #24
 800f8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f8c8:	041b      	lsls	r3, r3, #16
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ce:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800f8d2:	0212      	lsls	r2, r2, #8
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8d8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800f8dc:	431a      	orrs	r2, r3
 800f8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	647b      	str	r3, [r7, #68]	; 0x44
 800f8ee:	e025      	b.n	800f93c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <find_volume+0x3e6>
 800f8fa:	230d      	movs	r3, #13
 800f8fc:	e0c8      	b.n	800fa90 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800f904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f906:	441a      	add	r2, r3
 800f908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f90e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f912:	2b02      	cmp	r3, #2
 800f914:	d104      	bne.n	800f920 <find_volume+0x408>
 800f916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f918:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	e00c      	b.n	800f93a <find_volume+0x422>
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f926:	4613      	mov	r3, r2
 800f928:	005b      	lsls	r3, r3, #1
 800f92a:	4413      	add	r3, r2
 800f92c:	085a      	lsrs	r2, r3, #1
 800f92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f930:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f934:	f003 0301 	and.w	r3, r3, #1
 800f938:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800f93a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800f942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f944:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f948:	0a5b      	lsrs	r3, r3, #9
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d201      	bcs.n	800f952 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800f94e:	230d      	movs	r3, #13
 800f950:	e09e      	b.n	800fa90 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	f04f 32ff 	mov.w	r2, #4294967295
 800f958:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800f95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f964:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	2280      	movs	r2, #128	; 0x80
 800f96c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800f970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f974:	2b03      	cmp	r3, #3
 800f976:	d177      	bne.n	800fa68 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f97e:	021b      	lsls	r3, r3, #8
 800f980:	b21a      	sxth	r2, r3
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f988:	b21b      	sxth	r3, r3
 800f98a:	4313      	orrs	r3, r2
 800f98c:	b21b      	sxth	r3, r3
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d16a      	bne.n	800fa68 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800f992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f994:	3301      	adds	r3, #1
 800f996:	4619      	mov	r1, r3
 800f998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f99a:	f7fe fd42 	bl	800e422 <move_window>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d161      	bne.n	800fa68 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ae:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800f9b2:	021b      	lsls	r3, r3, #8
 800f9b4:	b21a      	sxth	r2, r3
 800f9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800f9bc:	b21b      	sxth	r3, r3
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	b21b      	sxth	r3, r3
 800f9c2:	4a35      	ldr	r2, [pc, #212]	; (800fa98 <find_volume+0x580>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d14f      	bne.n	800fa68 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ca:	78db      	ldrb	r3, [r3, #3]
 800f9cc:	061a      	lsls	r2, r3, #24
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	789b      	ldrb	r3, [r3, #2]
 800f9d2:	041b      	lsls	r3, r3, #16
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9d8:	7852      	ldrb	r2, [r2, #1]
 800f9da:	0212      	lsls	r2, r2, #8
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9e0:	7812      	ldrb	r2, [r2, #0]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	4a2d      	ldr	r2, [pc, #180]	; (800fa9c <find_volume+0x584>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d13e      	bne.n	800fa68 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ec:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800f9f0:	061a      	lsls	r2, r3, #24
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800f9f8:	041b      	lsls	r3, r3, #16
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9fe:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800fa02:	0212      	lsls	r2, r2, #8
 800fa04:	4313      	orrs	r3, r2
 800fa06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa08:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	4a24      	ldr	r2, [pc, #144]	; (800faa0 <find_volume+0x588>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d129      	bne.n	800fa68 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800fa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa16:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800fa1a:	061a      	lsls	r2, r3, #24
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800fa22:	041b      	lsls	r3, r3, #16
 800fa24:	4313      	orrs	r3, r2
 800fa26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa28:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800fa2c:	0212      	lsls	r2, r2, #8
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa32:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800fa36:	431a      	orrs	r2, r3
 800fa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800fa44:	061a      	lsls	r2, r3, #24
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800fa4c:	041b      	lsls	r3, r3, #16
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa52:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800fa56:	0212      	lsls	r2, r2, #8
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa5c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800fa60:	431a      	orrs	r2, r3
 800fa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fa6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800fa72:	4b0c      	ldr	r3, [pc, #48]	; (800faa4 <find_volume+0x58c>)
 800fa74:	881b      	ldrh	r3, [r3, #0]
 800fa76:	3301      	adds	r3, #1
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	4b0a      	ldr	r3, [pc, #40]	; (800faa4 <find_volume+0x58c>)
 800fa7c:	801a      	strh	r2, [r3, #0]
 800fa7e:	4b09      	ldr	r3, [pc, #36]	; (800faa4 <find_volume+0x58c>)
 800fa80:	881a      	ldrh	r2, [r3, #0]
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa8a:	f7fe fc57 	bl	800e33c <clear_lock>
#endif

	return FR_OK;
 800fa8e:	2300      	movs	r3, #0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3758      	adds	r7, #88	; 0x58
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	ffffaa55 	.word	0xffffaa55
 800fa9c:	41615252 	.word	0x41615252
 800faa0:	61417272 	.word	0x61417272
 800faa4:	20000e4c 	.word	0x20000e4c

0800faa8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d022      	beq.n	800fb00 <validate+0x58>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d01d      	beq.n	800fb00 <validate+0x58>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800faca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800face:	2b00      	cmp	r3, #0
 800fad0:	d016      	beq.n	800fb00 <validate+0x58>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fad8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d10c      	bne.n	800fb00 <validate+0x58>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800faec:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe f983 	bl	800ddfc <disk_status>
 800faf6:	4603      	mov	r3, r0
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800fb00:	2309      	movs	r3, #9
 800fb02:	e000      	b.n	800fb06 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b088      	sub	sp, #32
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800fb22:	f107 0310 	add.w	r3, r7, #16
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff fc48 	bl	800f3bc <get_ldnumber>
 800fb2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da01      	bge.n	800fb38 <f_mount+0x28>
 800fb34:	230b      	movs	r3, #11
 800fb36:	e02d      	b.n	800fb94 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb38:	4a18      	ldr	r2, [pc, #96]	; (800fb9c <f_mount+0x8c>)
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d006      	beq.n	800fb56 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800fb48:	69b8      	ldr	r0, [r7, #24]
 800fb4a:	f7fe fbf7 	bl	800e33c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d003      	beq.n	800fb64 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	490d      	ldr	r1, [pc, #52]	; (800fb9c <f_mount+0x8c>)
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d002      	beq.n	800fb7a <f_mount+0x6a>
 800fb74:	79fb      	ldrb	r3, [r7, #7]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d001      	beq.n	800fb7e <f_mount+0x6e>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e00a      	b.n	800fb94 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800fb7e:	f107 0108 	add.w	r1, r7, #8
 800fb82:	f107 030c 	add.w	r3, r7, #12
 800fb86:	2200      	movs	r2, #0
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff fcc5 	bl	800f518 <find_volume>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3720      	adds	r7, #32
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	20000e48 	.word	0x20000e48

0800fba0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fbac:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fbb0:	6018      	str	r0, [r3, #0]
 800fbb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fbb6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800fbba:	6019      	str	r1, [r3, #0]
 800fbbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fbc0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fbc4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800fbc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fbca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <f_open+0x38>
 800fbd4:	2309      	movs	r3, #9
 800fbd6:	e257      	b.n	8010088 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800fbd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fbdc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800fbe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fbec:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fbf0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800fbf4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800fbf8:	7812      	ldrb	r2, [r2, #0]
 800fbfa:	f002 021f 	and.w	r2, r2, #31
 800fbfe:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800fc00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fc04:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	f023 0301 	bic.w	r3, r3, #1
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	f107 0108 	add.w	r1, r7, #8
 800fc14:	f107 0320 	add.w	r3, r7, #32
 800fc18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7ff fc7b 	bl	800f518 <find_volume>
 800fc22:	4603      	mov	r3, r0
 800fc24:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800fc28:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f040 8229 	bne.w	8010084 <f_open+0x4e4>
		INIT_BUF(dj);
 800fc32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fc36:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fc3a:	f107 0214 	add.w	r2, r7, #20
 800fc3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800fc42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fc46:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	f107 0320 	add.w	r3, r7, #32
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff fb44 	bl	800f2e0 <follow_path>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800fc5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fc62:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fc66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc6a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc6e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d11d      	bne.n	800fcb2 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800fc76:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d103      	bne.n	800fc86 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800fc7e:	2306      	movs	r3, #6
 800fc80:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800fc84:	e015      	b.n	800fcb2 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fc8a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	f023 0301 	bic.w	r3, r3, #1
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	bf14      	ite	ne
 800fc98:	2301      	movne	r3, #1
 800fc9a:	2300      	moveq	r3, #0
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	461a      	mov	r2, r3
 800fca0:	f107 0320 	add.w	r3, r7, #32
 800fca4:	4611      	mov	r1, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fe f9be 	bl	800e028 <chk_lock>
 800fcac:	4603      	mov	r3, r0
 800fcae:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fcb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcb6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	f003 031c 	and.w	r3, r3, #28
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f000 80e6 	beq.w	800fe92 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800fcc6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d027      	beq.n	800fd1e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800fcce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fcd2:	2b04      	cmp	r3, #4
 800fcd4:	d10e      	bne.n	800fcf4 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fcd6:	f7fe fa13 	bl	800e100 <enq_lock>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d006      	beq.n	800fcee <f_open+0x14e>
 800fce0:	f107 0320 	add.w	r3, r7, #32
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff fa02 	bl	800f0ee <dir_register>
 800fcea:	4603      	mov	r3, r0
 800fcec:	e000      	b.n	800fcf0 <f_open+0x150>
 800fcee:	2312      	movs	r3, #18
 800fcf0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fcf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcf8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fcfc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800fd00:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800fd04:	7812      	ldrb	r2, [r2, #0]
 800fd06:	f042 0208 	orr.w	r2, r2, #8
 800fd0a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800fd0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd10:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd18:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800fd1c:	e017      	b.n	800fd4e <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fd1e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fd22:	330b      	adds	r3, #11
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	f003 0311 	and.w	r3, r3, #17
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d003      	beq.n	800fd36 <f_open+0x196>
					res = FR_DENIED;
 800fd2e:	2307      	movs	r3, #7
 800fd30:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800fd34:	e00b      	b.n	800fd4e <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800fd36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd3a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	f003 0304 	and.w	r3, r3, #4
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d002      	beq.n	800fd4e <f_open+0x1ae>
						res = FR_EXIST;
 800fd48:	2308      	movs	r3, #8
 800fd4a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fd4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f040 80c1 	bne.w	800feda <f_open+0x33a>
 800fd58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd5c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	f003 0308 	and.w	r3, r3, #8
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f000 80b7 	beq.w	800feda <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800fd6c:	f7fc fd9e 	bl	800c8ac <get_fattime>
 800fd70:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800fd74:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fd78:	330e      	adds	r3, #14
 800fd7a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800fd7e:	b2d2      	uxtb	r2, r2
 800fd80:	701a      	strb	r2, [r3, #0]
 800fd82:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	0a1b      	lsrs	r3, r3, #8
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fd90:	330f      	adds	r3, #15
 800fd92:	b2d2      	uxtb	r2, r2
 800fd94:	701a      	strb	r2, [r3, #0]
 800fd96:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800fd9a:	0c1a      	lsrs	r2, r3, #16
 800fd9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fda0:	3310      	adds	r3, #16
 800fda2:	b2d2      	uxtb	r2, r2
 800fda4:	701a      	strb	r2, [r3, #0]
 800fda6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800fdaa:	0e1a      	lsrs	r2, r3, #24
 800fdac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fdb0:	3311      	adds	r3, #17
 800fdb2:	b2d2      	uxtb	r2, r2
 800fdb4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800fdb6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fdba:	330b      	adds	r3, #11
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800fdc0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fdc4:	331c      	adds	r3, #28
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	701a      	strb	r2, [r3, #0]
 800fdca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fdce:	331d      	adds	r3, #29
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	701a      	strb	r2, [r3, #0]
 800fdd4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fdd8:	331e      	adds	r3, #30
 800fdda:	2200      	movs	r2, #0
 800fddc:	701a      	strb	r2, [r3, #0]
 800fdde:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fde2:	331f      	adds	r3, #31
 800fde4:	2200      	movs	r2, #0
 800fde6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800fde8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fdec:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fdf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fdf4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff f8d6 	bl	800efaa <ld_clust>
 800fdfe:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800fe02:	2100      	movs	r1, #0
 800fe04:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800fe08:	f7ff f8fc 	bl	800f004 <st_clust>
				dj.fs->wflag = 1;
 800fe0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe10:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800fe1e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d059      	beq.n	800feda <f_open+0x33a>
					dw = dj.fs->winsect;
 800fe26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe2a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe32:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800fe36:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800fe3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe3e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe46:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fe fdad 	bl	800e9aa <remove_chain>
 800fe50:	4603      	mov	r3, r0
 800fe52:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800fe56:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d13d      	bne.n	800feda <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800fe5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe62:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe6a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800fe6e:	3a01      	subs	r2, #1
 800fe70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800fe74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe78:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe80:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe facc 	bl	800e422 <move_window>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800fe90:	e023      	b.n	800feda <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800fe92:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d11f      	bne.n	800feda <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800fe9a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fe9e:	330b      	adds	r3, #11
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	f003 0310 	and.w	r3, r3, #16
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <f_open+0x312>
					res = FR_NO_FILE;
 800feaa:	2304      	movs	r3, #4
 800feac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800feb0:	e013      	b.n	800feda <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800feb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800feb6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	f003 0302 	and.w	r3, r3, #2
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00a      	beq.n	800feda <f_open+0x33a>
 800fec4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fec8:	330b      	adds	r3, #11
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	f003 0301 	and.w	r3, r3, #1
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <f_open+0x33a>
						res = FR_DENIED;
 800fed4:	2307      	movs	r3, #7
 800fed6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800feda:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d153      	bne.n	800ff8a <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fee6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	f003 0308 	and.w	r3, r3, #8
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00b      	beq.n	800ff0c <f_open+0x36c>
				mode |= FA__WRITTEN;
 800fef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fef8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fefc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800ff00:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800ff04:	7812      	ldrb	r2, [r2, #0]
 800ff06:	f042 0220 	orr.w	r2, r2, #32
 800ff0a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ff0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff10:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff18:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ff1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff20:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800ff2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff2e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800ff38:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff40:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	f023 0301 	bic.w	r3, r3, #1
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	bf14      	ite	ne
 800ff4e:	2301      	movne	r3, #1
 800ff50:	2300      	moveq	r3, #0
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	461a      	mov	r2, r3
 800ff56:	f107 0320 	add.w	r3, r7, #32
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fe f8f3 	bl	800e148 <inc_lock>
 800ff62:	4602      	mov	r2, r0
 800ff64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff68:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800ff72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff76:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d102      	bne.n	800ff8a <f_open+0x3ea>
 800ff84:	2302      	movs	r3, #2
 800ff86:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800ff8a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d178      	bne.n	8010084 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800ff92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff96:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800ffa0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800ffa4:	7812      	ldrb	r2, [r2, #0]
 800ffa6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800ffaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ffae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ffba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ffbe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ffc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ffc6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fe ffed 	bl	800efaa <ld_clust>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ffd6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ffe0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ffe4:	331f      	adds	r3, #31
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	061a      	lsls	r2, r3, #24
 800ffea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ffee:	331e      	adds	r3, #30
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	041b      	lsls	r3, r3, #16
 800fff4:	4313      	orrs	r3, r2
 800fff6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800fffa:	321d      	adds	r2, #29
 800fffc:	7812      	ldrb	r2, [r2, #0]
 800fffe:	0212      	lsls	r2, r2, #8
 8010000:	4313      	orrs	r3, r2
 8010002:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010006:	321c      	adds	r2, #28
 8010008:	7812      	ldrb	r2, [r2, #0]
 801000a:	431a      	orrs	r2, r3
 801000c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010010:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 801001a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801001e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	2200      	movs	r2, #0
 8010026:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 801002a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801002e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2200      	movs	r2, #0
 8010036:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 801003a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801003e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2200      	movs	r2, #0
 8010046:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 801004a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801004e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010052:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801005a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8010064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010068:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010072:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8010076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801007a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8010084:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8010088:	4618      	mov	r0, r3
 801008a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b08c      	sub	sp, #48	; 0x30
 8010096:	af00      	add	r7, sp, #0
 8010098:	60f8      	str	r0, [r7, #12]
 801009a:	60b9      	str	r1, [r7, #8]
 801009c:	607a      	str	r2, [r7, #4]
 801009e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	2200      	movs	r2, #0
 80100a8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f7ff fcfc 	bl	800faa8 <validate>
 80100b0:	4603      	mov	r3, r0
 80100b2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80100b4:	7ffb      	ldrb	r3, [r7, #31]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <f_read+0x2c>
 80100ba:	7ffb      	ldrb	r3, [r7, #31]
 80100bc:	e150      	b.n	8010360 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d003      	beq.n	80100d0 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80100ce:	e147      	b.n	8010360 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80100d6:	f003 0301 	and.w	r3, r3, #1
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d101      	bne.n	80100e2 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80100de:	2307      	movs	r3, #7
 80100e0:	e13e      	b.n	8010360 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	f240 812d 	bls.w	8010356 <f_read+0x2c4>
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010100:	e129      	b.n	8010356 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801010c:	2b00      	cmp	r3, #0
 801010e:	f040 80f2 	bne.w	80102f6 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010118:	0a5b      	lsrs	r3, r3, #9
 801011a:	b2da      	uxtb	r2, r3
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010122:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010126:	3b01      	subs	r3, #1
 8010128:	b2db      	uxtb	r3, r3
 801012a:	4013      	ands	r3, r2
 801012c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 801012e:	7dfb      	ldrb	r3, [r7, #23]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d139      	bne.n	80101a8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801013a:	2b00      	cmp	r3, #0
 801013c:	d104      	bne.n	8010148 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010146:	e018      	b.n	801017a <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801014e:	2b00      	cmp	r3, #0
 8010150:	d008      	beq.n	8010164 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010158:	4619      	mov	r1, r3
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f7fe fd1c 	bl	800eb98 <clmt_clust>
 8010160:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010162:	e00a      	b.n	801017a <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f7fe fa51 	bl	800e61a <get_fat>
 8010178:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 801017a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017c:	2b01      	cmp	r3, #1
 801017e:	d805      	bhi.n	801018c <f_read+0xfa>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2202      	movs	r2, #2
 8010184:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010188:	2302      	movs	r3, #2
 801018a:	e0e9      	b.n	8010360 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010192:	d105      	bne.n	80101a0 <f_read+0x10e>
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2201      	movs	r2, #1
 8010198:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801019c:	2301      	movs	r3, #1
 801019e:	e0df      	b.n	8010360 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80101b4:	4619      	mov	r1, r3
 80101b6:	4610      	mov	r0, r2
 80101b8:	f7fe fa0e 	bl	800e5d8 <clust2sect>
 80101bc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d105      	bne.n	80101d0 <f_read+0x13e>
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2202      	movs	r2, #2
 80101c8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80101cc:	2302      	movs	r3, #2
 80101ce:	e0c7      	b.n	8010360 <f_read+0x2ce>
			sect += csect;
 80101d0:	7dfb      	ldrb	r3, [r7, #23]
 80101d2:	693a      	ldr	r2, [r7, #16]
 80101d4:	4413      	add	r3, r2
 80101d6:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	0a5b      	lsrs	r3, r3, #9
 80101dc:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d046      	beq.n	8010272 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80101e4:	7dfa      	ldrb	r2, [r7, #23]
 80101e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e8:	4413      	add	r3, r2
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80101f0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d908      	bls.n	801020a <f_read+0x178>
					cc = fp->fs->csize - csect;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80101fe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010202:	461a      	mov	r2, r3
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010210:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010216:	693a      	ldr	r2, [r7, #16]
 8010218:	6a39      	ldr	r1, [r7, #32]
 801021a:	f7fd fe2f 	bl	800de7c <disk_read>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d005      	beq.n	8010230 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2201      	movs	r2, #1
 8010228:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801022c:	2301      	movs	r3, #1
 801022e:	e097      	b.n	8010360 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801023a:	2b00      	cmp	r3, #0
 801023c:	d015      	beq.n	801026a <f_read+0x1d8>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	1ad3      	subs	r3, r2, r3
 8010248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801024a:	429a      	cmp	r2, r3
 801024c:	d90d      	bls.n	801026a <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	025b      	lsls	r3, r3, #9
 801025a:	6a3a      	ldr	r2, [r7, #32]
 801025c:	4413      	add	r3, r2
 801025e:	68f9      	ldr	r1, [r7, #12]
 8010260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010264:	4618      	mov	r0, r3
 8010266:	f7fd fe67 	bl	800df38 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	025b      	lsls	r3, r3, #9
 801026e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8010270:	e05b      	b.n	801032a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010278:	693a      	ldr	r2, [r7, #16]
 801027a:	429a      	cmp	r2, r3
 801027c:	d037      	beq.n	80102ee <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010288:	2b00      	cmp	r3, #0
 801028a:	d01d      	beq.n	80102c8 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010292:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010296:	68f9      	ldr	r1, [r7, #12]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801029e:	2301      	movs	r3, #1
 80102a0:	f7fd fe0c 	bl	800debc <disk_write>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d005      	beq.n	80102b6 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80102b2:	2301      	movs	r3, #1
 80102b4:	e054      	b.n	8010360 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80102bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80102ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80102d2:	68f9      	ldr	r1, [r7, #12]
 80102d4:	2301      	movs	r3, #1
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	f7fd fdd0 	bl	800de7c <disk_read>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d005      	beq.n	80102ee <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2201      	movs	r2, #1
 80102e6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80102ea:	2301      	movs	r3, #1
 80102ec:	e038      	b.n	8010360 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80102fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010300:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010304:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8010306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	429a      	cmp	r2, r3
 801030c:	d901      	bls.n	8010312 <f_read+0x280>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	4413      	add	r3, r2
 8010320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010322:	4619      	mov	r1, r3
 8010324:	6a38      	ldr	r0, [r7, #32]
 8010326:	f7fd fe07 	bl	800df38 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801032a:	6a3a      	ldr	r2, [r7, #32]
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	4413      	add	r3, r2
 8010330:	623b      	str	r3, [r7, #32]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033a:	441a      	add	r2, r3
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010348:	441a      	add	r2, r3
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	601a      	str	r2, [r3, #0]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	f47f aed2 	bne.w	8010102 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3730      	adds	r7, #48	; 0x30
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b08a      	sub	sp, #40	; 0x28
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
 8010374:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	2200      	movs	r2, #0
 801037e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7ff fb91 	bl	800faa8 <validate>
 8010386:	4603      	mov	r3, r0
 8010388:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801038a:	7dfb      	ldrb	r3, [r7, #23]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <f_write+0x2c>
 8010390:	7dfb      	ldrb	r3, [r7, #23]
 8010392:	e192      	b.n	80106ba <f_write+0x352>
	if (fp->err)							/* Check error */
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80103a4:	e189      	b.n	80106ba <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80103ac:	f003 0302 	and.w	r3, r3, #2
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d101      	bne.n	80103b8 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80103b4:	2307      	movs	r3, #7
 80103b6:	e180      	b.n	80106ba <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	441a      	add	r2, r3
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80103c8:	429a      	cmp	r2, r3
 80103ca:	f080 8158 	bcs.w	801067e <f_write+0x316>
 80103ce:	2300      	movs	r3, #0
 80103d0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80103d2:	e154      	b.n	801067e <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80103da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f040 8114 	bne.w	801060c <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80103ea:	0a5b      	lsrs	r3, r3, #9
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103f4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80103f8:	3b01      	subs	r3, #1
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	4013      	ands	r3, r2
 80103fe:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8010400:	7dbb      	ldrb	r3, [r7, #22]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d151      	bne.n	80104aa <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10f      	bne.n	8010430 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010416:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041a:	2b00      	cmp	r3, #0
 801041c:	d121      	bne.n	8010462 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010424:	2100      	movs	r1, #0
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe fb19 	bl	800ea5e <create_chain>
 801042c:	6278      	str	r0, [r7, #36]	; 0x24
 801042e:	e018      	b.n	8010462 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010436:	2b00      	cmp	r3, #0
 8010438:	d008      	beq.n	801044c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010440:	4619      	mov	r1, r3
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f7fe fba8 	bl	800eb98 <clmt_clust>
 8010448:	6278      	str	r0, [r7, #36]	; 0x24
 801044a:	e00a      	b.n	8010462 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010458:	4619      	mov	r1, r3
 801045a:	4610      	mov	r0, r2
 801045c:	f7fe faff 	bl	800ea5e <create_chain>
 8010460:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010464:	2b00      	cmp	r3, #0
 8010466:	f000 810f 	beq.w	8010688 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	2b01      	cmp	r3, #1
 801046e:	d105      	bne.n	801047c <f_write+0x114>
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2202      	movs	r2, #2
 8010474:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010478:	2302      	movs	r3, #2
 801047a:	e11e      	b.n	80106ba <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010482:	d105      	bne.n	8010490 <f_write+0x128>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2201      	movs	r2, #1
 8010488:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801048c:	2301      	movs	r3, #1
 801048e:	e114      	b.n	80106ba <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <f_write+0x142>
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80104b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d01d      	beq.n	80104f4 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80104be:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80104c2:	68f9      	ldr	r1, [r7, #12]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80104ca:	2301      	movs	r3, #1
 80104cc:	f7fd fcf6 	bl	800debc <disk_write>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d005      	beq.n	80104e2 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2201      	movs	r2, #1
 80104da:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80104de:	2301      	movs	r3, #1
 80104e0:	e0eb      	b.n	80106ba <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80104e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010500:	4619      	mov	r1, r3
 8010502:	4610      	mov	r0, r2
 8010504:	f7fe f868 	bl	800e5d8 <clust2sect>
 8010508:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d105      	bne.n	801051c <f_write+0x1b4>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2202      	movs	r2, #2
 8010514:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010518:	2302      	movs	r3, #2
 801051a:	e0ce      	b.n	80106ba <f_write+0x352>
			sect += csect;
 801051c:	7dbb      	ldrb	r3, [r7, #22]
 801051e:	693a      	ldr	r2, [r7, #16]
 8010520:	4413      	add	r3, r2
 8010522:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	0a5b      	lsrs	r3, r3, #9
 8010528:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d048      	beq.n	80105c2 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010530:	7dba      	ldrb	r2, [r7, #22]
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	4413      	add	r3, r2
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801053c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010540:	4293      	cmp	r3, r2
 8010542:	d908      	bls.n	8010556 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801054a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801054e:	461a      	mov	r2, r3
 8010550:	7dbb      	ldrb	r3, [r7, #22]
 8010552:	1ad3      	subs	r3, r2, r3
 8010554:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801055c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	69b9      	ldr	r1, [r7, #24]
 8010566:	f7fd fca9 	bl	800debc <disk_write>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010578:	2301      	movs	r3, #1
 801057a:	e09e      	b.n	80106ba <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	1ad3      	subs	r3, r2, r3
 8010586:	69fa      	ldr	r2, [r7, #28]
 8010588:	429a      	cmp	r2, r3
 801058a:	d916      	bls.n	80105ba <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801058c:	68f8      	ldr	r0, [r7, #12]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	025b      	lsls	r3, r3, #9
 801059a:	69ba      	ldr	r2, [r7, #24]
 801059c:	4413      	add	r3, r2
 801059e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105a2:	4619      	mov	r1, r3
 80105a4:	f7fd fcc8 	bl	800df38 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80105ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105b2:	b2da      	uxtb	r2, r3
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	025b      	lsls	r3, r3, #9
 80105be:	623b      	str	r3, [r7, #32]
				continue;
 80105c0:	e047      	b.n	8010652 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105c8:	693a      	ldr	r2, [r7, #16]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d01a      	beq.n	8010604 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80105da:	429a      	cmp	r2, r3
 80105dc:	d212      	bcs.n	8010604 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105e4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80105e8:	68f9      	ldr	r1, [r7, #12]
 80105ea:	2301      	movs	r3, #1
 80105ec:	693a      	ldr	r2, [r7, #16]
 80105ee:	f7fd fc45 	bl	800de7c <disk_read>
 80105f2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d005      	beq.n	8010604 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010600:	2301      	movs	r3, #1
 8010602:	e05a      	b.n	80106ba <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	693a      	ldr	r2, [r7, #16]
 8010608:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010616:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801061a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 801061c:	6a3a      	ldr	r2, [r7, #32]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	429a      	cmp	r2, r3
 8010622:	d901      	bls.n	8010628 <f_write+0x2c0>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801062e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	4413      	add	r3, r2
 8010636:	6a3a      	ldr	r2, [r7, #32]
 8010638:	69b9      	ldr	r1, [r7, #24]
 801063a:	4618      	mov	r0, r3
 801063c:	f7fd fc7c 	bl	800df38 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801064a:	b2da      	uxtb	r2, r3
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8010652:	69ba      	ldr	r2, [r7, #24]
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	4413      	add	r3, r2
 8010658:	61bb      	str	r3, [r7, #24]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010660:	6a3b      	ldr	r3, [r7, #32]
 8010662:	441a      	add	r2, r3
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	6a3b      	ldr	r3, [r7, #32]
 8010670:	441a      	add	r2, r3
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	601a      	str	r2, [r3, #0]
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	6a3b      	ldr	r3, [r7, #32]
 801067a:	1ad3      	subs	r3, r2, r3
 801067c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2b00      	cmp	r3, #0
 8010682:	f47f aea7 	bne.w	80103d4 <f_write+0x6c>
 8010686:	e000      	b.n	801068a <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010688:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010696:	429a      	cmp	r2, r3
 8010698:	d905      	bls.n	80106a6 <f_write+0x33e>
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80106ac:	f043 0320 	orr.w	r3, r3, #32
 80106b0:	b2da      	uxtb	r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3728      	adds	r7, #40	; 0x28
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b086      	sub	sp, #24
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7ff f9ec 	bl	800faa8 <validate>
 80106d0:	4603      	mov	r3, r0
 80106d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106d4:	7dfb      	ldrb	r3, [r7, #23]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f040 80a8 	bne.w	801082c <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80106e2:	f003 0320 	and.w	r3, r3, #32
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 80a0 	beq.w	801082c <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80106f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d019      	beq.n	801072e <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010700:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801070c:	2301      	movs	r3, #1
 801070e:	f7fd fbd5 	bl	800debc <disk_write>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8010718:	2301      	movs	r3, #1
 801071a:	e088      	b.n	801082e <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010726:	b2da      	uxtb	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801073a:	4619      	mov	r1, r3
 801073c:	4610      	mov	r0, r2
 801073e:	f7fd fe70 	bl	800e422 <move_window>
 8010742:	4603      	mov	r3, r0
 8010744:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010746:	7dfb      	ldrb	r3, [r7, #23]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d16f      	bne.n	801082c <f_sync+0x16a>
				dir = fp->dir_ptr;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010752:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	330b      	adds	r3, #11
 8010758:	781a      	ldrb	r2, [r3, #0]
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	330b      	adds	r3, #11
 801075e:	f042 0220 	orr.w	r2, r2, #32
 8010762:	b2d2      	uxtb	r2, r2
 8010764:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	331c      	adds	r3, #28
 8010770:	b2d2      	uxtb	r2, r2
 8010772:	701a      	strb	r2, [r3, #0]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801077a:	b29b      	uxth	r3, r3
 801077c:	0a1b      	lsrs	r3, r3, #8
 801077e:	b29a      	uxth	r2, r3
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	331d      	adds	r3, #29
 8010784:	b2d2      	uxtb	r2, r2
 8010786:	701a      	strb	r2, [r3, #0]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801078e:	0c1a      	lsrs	r2, r3, #16
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	331e      	adds	r3, #30
 8010794:	b2d2      	uxtb	r2, r2
 8010796:	701a      	strb	r2, [r3, #0]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801079e:	0e1a      	lsrs	r2, r3, #24
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	331f      	adds	r3, #31
 80107a4:	b2d2      	uxtb	r2, r2
 80107a6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80107ae:	4619      	mov	r1, r3
 80107b0:	6938      	ldr	r0, [r7, #16]
 80107b2:	f7fe fc27 	bl	800f004 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80107b6:	f7fc f879 	bl	800c8ac <get_fattime>
 80107ba:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	3316      	adds	r3, #22
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	b2d2      	uxtb	r2, r2
 80107c4:	701a      	strb	r2, [r3, #0]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	0a1b      	lsrs	r3, r3, #8
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	3317      	adds	r3, #23
 80107d2:	b2d2      	uxtb	r2, r2
 80107d4:	701a      	strb	r2, [r3, #0]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	0c1a      	lsrs	r2, r3, #16
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	3318      	adds	r3, #24
 80107de:	b2d2      	uxtb	r2, r2
 80107e0:	701a      	strb	r2, [r3, #0]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	0e1a      	lsrs	r2, r3, #24
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	3319      	adds	r3, #25
 80107ea:	b2d2      	uxtb	r2, r2
 80107ec:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	3312      	adds	r3, #18
 80107f2:	2200      	movs	r2, #0
 80107f4:	701a      	strb	r2, [r3, #0]
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	3313      	adds	r3, #19
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010804:	f023 0320 	bic.w	r3, r3, #32
 8010808:	b2da      	uxtb	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010816:	2201      	movs	r2, #1
 8010818:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010822:	4618      	mov	r0, r3
 8010824:	f7fd fe2b 	bl	800e47e <sync_fs>
 8010828:	4603      	mov	r3, r0
 801082a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 801082c:	7dfb      	ldrb	r3, [r7, #23]
}
 801082e:	4618      	mov	r0, r3
 8010830:	3718      	adds	r7, #24
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff ff3f 	bl	80106c2 <f_sync>
 8010844:	4603      	mov	r3, r0
 8010846:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d116      	bne.n	801087c <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f7ff f92a 	bl	800faa8 <validate>
 8010854:	4603      	mov	r3, r0
 8010856:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010858:	7bfb      	ldrb	r3, [r7, #15]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10e      	bne.n	801087c <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010864:	4618      	mov	r0, r3
 8010866:	f7fd fd25 	bl	800e2b4 <dec_lock>
 801086a:	4603      	mov	r3, r0
 801086c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801086e:	7bfb      	ldrb	r3, [r7, #15]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d103      	bne.n	801087c <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2200      	movs	r2, #0
 8010878:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801087c:	7bfb      	ldrb	r3, [r7, #15]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3710      	adds	r7, #16
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
	...

08010888 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010888:	b480      	push	{r7}
 801088a:	b087      	sub	sp, #28
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	4613      	mov	r3, r2
 8010894:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010896:	2301      	movs	r3, #1
 8010898:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801089e:	4b1e      	ldr	r3, [pc, #120]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108a0:	7a5b      	ldrb	r3, [r3, #9]
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d831      	bhi.n	801090c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108a8:	4b1b      	ldr	r3, [pc, #108]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108aa:	7a5b      	ldrb	r3, [r3, #9]
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	461a      	mov	r2, r3
 80108b0:	4b19      	ldr	r3, [pc, #100]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108b2:	2100      	movs	r1, #0
 80108b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80108b6:	4b18      	ldr	r3, [pc, #96]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108b8:	7a5b      	ldrb	r3, [r3, #9]
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	4a16      	ldr	r2, [pc, #88]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108be:	009b      	lsls	r3, r3, #2
 80108c0:	4413      	add	r3, r2
 80108c2:	68fa      	ldr	r2, [r7, #12]
 80108c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80108c6:	4b14      	ldr	r3, [pc, #80]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108c8:	7a5b      	ldrb	r3, [r3, #9]
 80108ca:	b2db      	uxtb	r3, r3
 80108cc:	461a      	mov	r2, r3
 80108ce:	4b12      	ldr	r3, [pc, #72]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108d0:	4413      	add	r3, r2
 80108d2:	79fa      	ldrb	r2, [r7, #7]
 80108d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80108d6:	4b10      	ldr	r3, [pc, #64]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108d8:	7a5b      	ldrb	r3, [r3, #9]
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	1c5a      	adds	r2, r3, #1
 80108de:	b2d1      	uxtb	r1, r2
 80108e0:	4a0d      	ldr	r2, [pc, #52]	; (8010918 <FATFS_LinkDriverEx+0x90>)
 80108e2:	7251      	strb	r1, [r2, #9]
 80108e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80108e6:	7dbb      	ldrb	r3, [r7, #22]
 80108e8:	3330      	adds	r3, #48	; 0x30
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	3301      	adds	r3, #1
 80108f4:	223a      	movs	r2, #58	; 0x3a
 80108f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	3302      	adds	r3, #2
 80108fc:	222f      	movs	r2, #47	; 0x2f
 80108fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	3303      	adds	r3, #3
 8010904:	2200      	movs	r2, #0
 8010906:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 801090c:	7dfb      	ldrb	r3, [r7, #23]
}
 801090e:	4618      	mov	r0, r3
 8010910:	371c      	adds	r7, #28
 8010912:	46bd      	mov	sp, r7
 8010914:	bc80      	pop	{r7}
 8010916:	4770      	bx	lr
 8010918:	20000e68 	.word	0x20000e68

0801091c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010926:	2200      	movs	r2, #0
 8010928:	6839      	ldr	r1, [r7, #0]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7ff ffac 	bl	8010888 <FATFS_LinkDriverEx>
 8010930:	4603      	mov	r3, r0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
	...

0801093c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	4603      	mov	r3, r0
 8010944:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010946:	4b0b      	ldr	r3, [pc, #44]	; (8010974 <SD_initialize+0x38>)
 8010948:	2201      	movs	r2, #1
 801094a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 801094c:	f7fb ffb6 	bl	800c8bc <BSP_SD_Init>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d107      	bne.n	8010966 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010956:	4b07      	ldr	r3, [pc, #28]	; (8010974 <SD_initialize+0x38>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	b2db      	uxtb	r3, r3
 801095c:	f023 0301 	bic.w	r3, r3, #1
 8010960:	b2da      	uxtb	r2, r3
 8010962:	4b04      	ldr	r3, [pc, #16]	; (8010974 <SD_initialize+0x38>)
 8010964:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010966:	4b03      	ldr	r3, [pc, #12]	; (8010974 <SD_initialize+0x38>)
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	b2db      	uxtb	r3, r3
}
 801096c:	4618      	mov	r0, r3
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	20000122 	.word	0x20000122

08010978 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010982:	4b0b      	ldr	r3, [pc, #44]	; (80109b0 <SD_status+0x38>)
 8010984:	2201      	movs	r2, #1
 8010986:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010988:	f7fb fffa 	bl	800c980 <BSP_SD_GetCardState>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d107      	bne.n	80109a2 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010992:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <SD_status+0x38>)
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	b2db      	uxtb	r3, r3
 8010998:	f023 0301 	bic.w	r3, r3, #1
 801099c:	b2da      	uxtb	r2, r3
 801099e:	4b04      	ldr	r3, [pc, #16]	; (80109b0 <SD_status+0x38>)
 80109a0:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80109a2:	4b03      	ldr	r3, [pc, #12]	; (80109b0 <SD_status+0x38>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	b2db      	uxtb	r3, r3
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20000122 	.word	0x20000122

080109b4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	607a      	str	r2, [r7, #4]
 80109be:	603b      	str	r3, [r7, #0]
 80109c0:	4603      	mov	r3, r0
 80109c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80109c4:	2301      	movs	r3, #1
 80109c6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80109c8:	4b0f      	ldr	r3, [pc, #60]	; (8010a08 <SD_read+0x54>)
 80109ca:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80109cc:	4b0f      	ldr	r3, [pc, #60]	; (8010a0c <SD_read+0x58>)
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	6879      	ldr	r1, [r7, #4]
 80109d2:	68b8      	ldr	r0, [r7, #8]
 80109d4:	f7fb ff98 	bl	800c908 <BSP_SD_ReadBlocks>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d10e      	bne.n	80109fc <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80109de:	e006      	b.n	80109ee <SD_read+0x3a>
    {
      if (timeout-- == 0)
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	1e5a      	subs	r2, r3, #1
 80109e4:	613a      	str	r2, [r7, #16]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d101      	bne.n	80109ee <SD_read+0x3a>
      {
        return RES_ERROR;
 80109ea:	2301      	movs	r3, #1
 80109ec:	e007      	b.n	80109fe <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80109ee:	f7fb ffc7 	bl	800c980 <BSP_SD_GetCardState>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1f3      	bne.n	80109e0 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 80109f8:	2300      	movs	r3, #0
 80109fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80109fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3718      	adds	r7, #24
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	000186a0 	.word	0x000186a0
 8010a0c:	05f5e100 	.word	0x05f5e100

08010a10 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b086      	sub	sp, #24
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	607a      	str	r2, [r7, #4]
 8010a1a:	603b      	str	r3, [r7, #0]
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010a20:	2301      	movs	r3, #1
 8010a22:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010a24:	4b0f      	ldr	r3, [pc, #60]	; (8010a64 <SD_write+0x54>)
 8010a26:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8010a28:	4b0f      	ldr	r3, [pc, #60]	; (8010a68 <SD_write+0x58>)
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	68b8      	ldr	r0, [r7, #8]
 8010a30:	f7fb ff88 	bl	800c944 <BSP_SD_WriteBlocks>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d10e      	bne.n	8010a58 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010a3a:	e006      	b.n	8010a4a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	1e5a      	subs	r2, r3, #1
 8010a40:	613a      	str	r2, [r7, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d101      	bne.n	8010a4a <SD_write+0x3a>
      {
        return RES_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e007      	b.n	8010a5a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010a4a:	f7fb ff99 	bl	800c980 <BSP_SD_GetCardState>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d1f3      	bne.n	8010a3c <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3718      	adds	r7, #24
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	000186a0 	.word	0x000186a0
 8010a68:	05f5e100 	.word	0x05f5e100

08010a6c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b08c      	sub	sp, #48	; 0x30
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	4603      	mov	r3, r0
 8010a74:	603a      	str	r2, [r7, #0]
 8010a76:	71fb      	strb	r3, [r7, #7]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010a82:	4b24      	ldr	r3, [pc, #144]	; (8010b14 <SD_ioctl+0xa8>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d001      	beq.n	8010a94 <SD_ioctl+0x28>
 8010a90:	2303      	movs	r3, #3
 8010a92:	e03b      	b.n	8010b0c <SD_ioctl+0xa0>
  
  switch (cmd)
 8010a94:	79bb      	ldrb	r3, [r7, #6]
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d833      	bhi.n	8010b02 <SD_ioctl+0x96>
 8010a9a:	a201      	add	r2, pc, #4	; (adr r2, 8010aa0 <SD_ioctl+0x34>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010ab1 	.word	0x08010ab1
 8010aa4:	08010ab9 	.word	0x08010ab9
 8010aa8:	08010ad1 	.word	0x08010ad1
 8010aac:	08010aeb 	.word	0x08010aeb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ab6:	e027      	b.n	8010b08 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ab8:	f107 030c 	add.w	r3, r7, #12
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fb ff6f 	bl	800c9a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ace:	e01b      	b.n	8010b08 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ad0:	f107 030c 	add.w	r3, r7, #12
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fb ff63 	bl	800c9a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ae8:	e00e      	b.n	8010b08 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010aea:	f107 030c 	add.w	r3, r7, #12
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fb ff56 	bl	800c9a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8010af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010afa:	2300      	movs	r3, #0
 8010afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b00:	e002      	b.n	8010b08 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8010b02:	2304      	movs	r3, #4
 8010b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8010b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3730      	adds	r7, #48	; 0x30
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	20000122 	.word	0x20000122

08010b18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	490e      	ldr	r1, [pc, #56]	; (8010b58 <MX_USB_DEVICE_Init+0x40>)
 8010b20:	480e      	ldr	r0, [pc, #56]	; (8010b5c <MX_USB_DEVICE_Init+0x44>)
 8010b22:	f7fc f8ef 	bl	800cd04 <USBD_Init>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d001      	beq.n	8010b30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010b2c:	f7f2 f846 	bl	8002bbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8010b30:	490b      	ldr	r1, [pc, #44]	; (8010b60 <MX_USB_DEVICE_Init+0x48>)
 8010b32:	480a      	ldr	r0, [pc, #40]	; (8010b5c <MX_USB_DEVICE_Init+0x44>)
 8010b34:	f7fc f911 	bl	800cd5a <USBD_RegisterClass>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010b3e:	f7f2 f83d 	bl	8002bbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b42:	4806      	ldr	r0, [pc, #24]	; (8010b5c <MX_USB_DEVICE_Init+0x44>)
 8010b44:	f7fc f922 	bl	800cd8c <USBD_Start>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8010b4e:	f7f2 f835 	bl	8002bbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b52:	bf00      	nop
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20000124 	.word	0x20000124
 8010b5c:	20000e74 	.word	0x20000e74
 8010b60:	2000001c 	.word	0x2000001c

08010b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	6039      	str	r1, [r7, #0]
 8010b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	2212      	movs	r2, #18
 8010b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010b76:	4b03      	ldr	r3, [pc, #12]	; (8010b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bc80      	pop	{r7}
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	20000140 	.word	0x20000140

08010b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	6039      	str	r1, [r7, #0]
 8010b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2204      	movs	r2, #4
 8010b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b9a:	4b03      	ldr	r3, [pc, #12]	; (8010ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bc80      	pop	{r7}
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	20000154 	.word	0x20000154

08010bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	6039      	str	r1, [r7, #0]
 8010bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010bb8:	79fb      	ldrb	r3, [r7, #7]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d105      	bne.n	8010bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bbe:	683a      	ldr	r2, [r7, #0]
 8010bc0:	4907      	ldr	r1, [pc, #28]	; (8010be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bc2:	4808      	ldr	r0, [pc, #32]	; (8010be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bc4:	f7fd f85a 	bl	800dc7c <USBD_GetString>
 8010bc8:	e004      	b.n	8010bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010bca:	683a      	ldr	r2, [r7, #0]
 8010bcc:	4904      	ldr	r1, [pc, #16]	; (8010be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8010bce:	4805      	ldr	r0, [pc, #20]	; (8010be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8010bd0:	f7fd f854 	bl	800dc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010bd4:	4b02      	ldr	r3, [pc, #8]	; (8010be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	20001138 	.word	0x20001138
 8010be4:	08014454 	.word	0x08014454

08010be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	6039      	str	r1, [r7, #0]
 8010bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010bf4:	683a      	ldr	r2, [r7, #0]
 8010bf6:	4904      	ldr	r1, [pc, #16]	; (8010c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010bf8:	4804      	ldr	r0, [pc, #16]	; (8010c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010bfa:	f7fd f83f 	bl	800dc7c <USBD_GetString>
  return USBD_StrDesc;
 8010bfe:	4b02      	ldr	r3, [pc, #8]	; (8010c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	20001138 	.word	0x20001138
 8010c0c:	0801446c 	.word	0x0801446c

08010c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	6039      	str	r1, [r7, #0]
 8010c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	221a      	movs	r2, #26
 8010c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c22:	f000 f843 	bl	8010cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010c26:	4b02      	ldr	r3, [pc, #8]	; (8010c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	20000158 	.word	0x20000158

08010c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	6039      	str	r1, [r7, #0]
 8010c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c40:	79fb      	ldrb	r3, [r7, #7]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d105      	bne.n	8010c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	4907      	ldr	r1, [pc, #28]	; (8010c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c4a:	4808      	ldr	r0, [pc, #32]	; (8010c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c4c:	f7fd f816 	bl	800dc7c <USBD_GetString>
 8010c50:	e004      	b.n	8010c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	4904      	ldr	r1, [pc, #16]	; (8010c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c56:	4805      	ldr	r0, [pc, #20]	; (8010c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c58:	f7fd f810 	bl	800dc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c5c:	4b02      	ldr	r3, [pc, #8]	; (8010c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	20001138 	.word	0x20001138
 8010c6c:	08014480 	.word	0x08014480

08010c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	6039      	str	r1, [r7, #0]
 8010c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c7c:	79fb      	ldrb	r3, [r7, #7]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d105      	bne.n	8010c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	4907      	ldr	r1, [pc, #28]	; (8010ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c86:	4808      	ldr	r0, [pc, #32]	; (8010ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c88:	f7fc fff8 	bl	800dc7c <USBD_GetString>
 8010c8c:	e004      	b.n	8010c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	4904      	ldr	r1, [pc, #16]	; (8010ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c92:	4805      	ldr	r0, [pc, #20]	; (8010ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c94:	f7fc fff2 	bl	800dc7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c98:	4b02      	ldr	r3, [pc, #8]	; (8010ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	20001138 	.word	0x20001138
 8010ca8:	0801448c 	.word	0x0801448c

08010cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010cb2:	4b0f      	ldr	r3, [pc, #60]	; (8010cf0 <Get_SerialNum+0x44>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010cb8:	4b0e      	ldr	r3, [pc, #56]	; (8010cf4 <Get_SerialNum+0x48>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cbe:	4b0e      	ldr	r3, [pc, #56]	; (8010cf8 <Get_SerialNum+0x4c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4413      	add	r3, r2
 8010cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010cd2:	2208      	movs	r2, #8
 8010cd4:	4909      	ldr	r1, [pc, #36]	; (8010cfc <Get_SerialNum+0x50>)
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	f000 f814 	bl	8010d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010cdc:	2204      	movs	r2, #4
 8010cde:	4908      	ldr	r1, [pc, #32]	; (8010d00 <Get_SerialNum+0x54>)
 8010ce0:	68b8      	ldr	r0, [r7, #8]
 8010ce2:	f000 f80f 	bl	8010d04 <IntToUnicode>
  }
}
 8010ce6:	bf00      	nop
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	1ffff7e8 	.word	0x1ffff7e8
 8010cf4:	1ffff7ec 	.word	0x1ffff7ec
 8010cf8:	1ffff7f0 	.word	0x1ffff7f0
 8010cfc:	2000015a 	.word	0x2000015a
 8010d00:	2000016a 	.word	0x2000016a

08010d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b087      	sub	sp, #28
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	4613      	mov	r3, r2
 8010d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d12:	2300      	movs	r3, #0
 8010d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d16:	2300      	movs	r3, #0
 8010d18:	75fb      	strb	r3, [r7, #23]
 8010d1a:	e027      	b.n	8010d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	0f1b      	lsrs	r3, r3, #28
 8010d20:	2b09      	cmp	r3, #9
 8010d22:	d80b      	bhi.n	8010d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	0f1b      	lsrs	r3, r3, #28
 8010d28:	b2da      	uxtb	r2, r3
 8010d2a:	7dfb      	ldrb	r3, [r7, #23]
 8010d2c:	005b      	lsls	r3, r3, #1
 8010d2e:	4619      	mov	r1, r3
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	440b      	add	r3, r1
 8010d34:	3230      	adds	r2, #48	; 0x30
 8010d36:	b2d2      	uxtb	r2, r2
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	e00a      	b.n	8010d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	0f1b      	lsrs	r3, r3, #28
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
 8010d44:	005b      	lsls	r3, r3, #1
 8010d46:	4619      	mov	r1, r3
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	440b      	add	r3, r1
 8010d4c:	3237      	adds	r2, #55	; 0x37
 8010d4e:	b2d2      	uxtb	r2, r2
 8010d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	011b      	lsls	r3, r3, #4
 8010d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d58:	7dfb      	ldrb	r3, [r7, #23]
 8010d5a:	005b      	lsls	r3, r3, #1
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	4413      	add	r3, r2
 8010d62:	2200      	movs	r2, #0
 8010d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d66:	7dfb      	ldrb	r3, [r7, #23]
 8010d68:	3301      	adds	r3, #1
 8010d6a:	75fb      	strb	r3, [r7, #23]
 8010d6c:	7dfa      	ldrb	r2, [r7, #23]
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d3d3      	bcc.n	8010d1c <IntToUnicode+0x18>
  }
}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bc80      	pop	{r7}
 8010d7e:	4770      	bx	lr

08010d80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a0d      	ldr	r2, [pc, #52]	; (8010dc4 <HAL_PCD_MspInit+0x44>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d113      	bne.n	8010dba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010d92:	4b0d      	ldr	r3, [pc, #52]	; (8010dc8 <HAL_PCD_MspInit+0x48>)
 8010d94:	69db      	ldr	r3, [r3, #28]
 8010d96:	4a0c      	ldr	r2, [pc, #48]	; (8010dc8 <HAL_PCD_MspInit+0x48>)
 8010d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010d9c:	61d3      	str	r3, [r2, #28]
 8010d9e:	4b0a      	ldr	r3, [pc, #40]	; (8010dc8 <HAL_PCD_MspInit+0x48>)
 8010da0:	69db      	ldr	r3, [r3, #28]
 8010da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010da6:	60fb      	str	r3, [r7, #12]
 8010da8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8010daa:	2200      	movs	r2, #0
 8010dac:	2100      	movs	r1, #0
 8010dae:	2014      	movs	r0, #20
 8010db0:	f7f2 ffed 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8010db4:	2014      	movs	r0, #20
 8010db6:	f7f3 f806 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010dba:	bf00      	nop
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	40005c00 	.word	0x40005c00
 8010dc8:	40021000 	.word	0x40021000

08010dcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010de0:	4619      	mov	r1, r3
 8010de2:	4610      	mov	r0, r2
 8010de4:	f7fc f81a 	bl	800ce1c <USBD_LL_SetupStage>
}
 8010de8:	bf00      	nop
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010e02:	78fa      	ldrb	r2, [r7, #3]
 8010e04:	6879      	ldr	r1, [r7, #4]
 8010e06:	4613      	mov	r3, r2
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	4413      	add	r3, r2
 8010e0c:	00db      	lsls	r3, r3, #3
 8010e0e:	440b      	add	r3, r1
 8010e10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	78fb      	ldrb	r3, [r7, #3]
 8010e18:	4619      	mov	r1, r3
 8010e1a:	f7fc f84c 	bl	800ceb6 <USBD_LL_DataOutStage>
}
 8010e1e:	bf00      	nop
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b082      	sub	sp, #8
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010e38:	78fa      	ldrb	r2, [r7, #3]
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	00db      	lsls	r3, r3, #3
 8010e44:	440b      	add	r3, r1
 8010e46:	333c      	adds	r3, #60	; 0x3c
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	78fb      	ldrb	r3, [r7, #3]
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	f7fc f8a3 	bl	800cf98 <USBD_LL_DataInStage>
}
 8010e52:	bf00      	nop
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b082      	sub	sp, #8
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fc f9b3 	bl	800d1d4 <USBD_LL_SOF>
}
 8010e6e:	bf00      	nop
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b084      	sub	sp, #16
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	2b02      	cmp	r3, #2
 8010e88:	d001      	beq.n	8010e8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010e8a:	f7f1 fe97 	bl	8002bbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010e94:	7bfa      	ldrb	r2, [r7, #15]
 8010e96:	4611      	mov	r1, r2
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7fc f963 	bl	800d164 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fc f91c 	bl	800d0e2 <USBD_LL_Reset>
}
 8010eaa:	bf00      	nop
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fc f95d 	bl	800d182 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	699b      	ldr	r3, [r3, #24]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d005      	beq.n	8010edc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ed0:	4b04      	ldr	r3, [pc, #16]	; (8010ee4 <HAL_PCD_SuspendCallback+0x30>)
 8010ed2:	691b      	ldr	r3, [r3, #16]
 8010ed4:	4a03      	ldr	r2, [pc, #12]	; (8010ee4 <HAL_PCD_SuspendCallback+0x30>)
 8010ed6:	f043 0306 	orr.w	r3, r3, #6
 8010eda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	e000ed00 	.word	0xe000ed00

08010ee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fc f957 	bl	800d1aa <USBD_LL_Resume>
}
 8010efc:	bf00      	nop
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010f0c:	4a1f      	ldr	r2, [pc, #124]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4a1d      	ldr	r2, [pc, #116]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8010f1c:	4b1b      	ldr	r3, [pc, #108]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f1e:	4a1c      	ldr	r2, [pc, #112]	; (8010f90 <USBD_LL_Init+0x8c>)
 8010f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010f22:	4b1a      	ldr	r3, [pc, #104]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f24:	2208      	movs	r2, #8
 8010f26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010f28:	4b18      	ldr	r3, [pc, #96]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010f2e:	4b17      	ldr	r3, [pc, #92]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f30:	2200      	movs	r2, #0
 8010f32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010f34:	4b15      	ldr	r3, [pc, #84]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010f3a:	4b14      	ldr	r3, [pc, #80]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010f40:	4812      	ldr	r0, [pc, #72]	; (8010f8c <USBD_LL_Init+0x88>)
 8010f42:	f7f4 f83f 	bl	8004fc4 <HAL_PCD_Init>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d001      	beq.n	8010f50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8010f4c:	f7f1 fe36 	bl	8002bbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010f56:	2318      	movs	r3, #24
 8010f58:	2200      	movs	r2, #0
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	f7f5 fd47 	bl	80069ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010f66:	2358      	movs	r3, #88	; 0x58
 8010f68:	2200      	movs	r2, #0
 8010f6a:	2180      	movs	r1, #128	; 0x80
 8010f6c:	f7f5 fd3f 	bl	80069ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	2181      	movs	r1, #129	; 0x81
 8010f7e:	f7f5 fd36 	bl	80069ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8010f82:	2300      	movs	r3, #0
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3708      	adds	r7, #8
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	20001338 	.word	0x20001338
 8010f90:	40005c00 	.word	0x40005c00

08010f94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7f4 f909 	bl	80051c2 <HAL_PCD_Start>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 f93c 	bl	8011234 <USBD_Get_USB_Status>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4603      	mov	r3, r0
 8010fda:	70fb      	strb	r3, [r7, #3]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70bb      	strb	r3, [r7, #2]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010ff2:	78bb      	ldrb	r3, [r7, #2]
 8010ff4:	883a      	ldrh	r2, [r7, #0]
 8010ff6:	78f9      	ldrb	r1, [r7, #3]
 8010ff8:	f7f4 fa5e 	bl	80054b8 <HAL_PCD_EP_Open>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011000:	7bfb      	ldrb	r3, [r7, #15]
 8011002:	4618      	mov	r0, r3
 8011004:	f000 f916 	bl	8011234 <USBD_Get_USB_Status>
 8011008:	4603      	mov	r3, r0
 801100a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801100c:	7bbb      	ldrb	r3, [r7, #14]
}
 801100e:	4618      	mov	r0, r3
 8011010:	3710      	adds	r7, #16
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011016:	b580      	push	{r7, lr}
 8011018:	b084      	sub	sp, #16
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	460b      	mov	r3, r1
 8011020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011022:	2300      	movs	r3, #0
 8011024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011026:	2300      	movs	r3, #0
 8011028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011030:	78fa      	ldrb	r2, [r7, #3]
 8011032:	4611      	mov	r1, r2
 8011034:	4618      	mov	r0, r3
 8011036:	f7f4 fa9c 	bl	8005572 <HAL_PCD_EP_Close>
 801103a:	4603      	mov	r3, r0
 801103c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801103e:	7bfb      	ldrb	r3, [r7, #15]
 8011040:	4618      	mov	r0, r3
 8011042:	f000 f8f7 	bl	8011234 <USBD_Get_USB_Status>
 8011046:	4603      	mov	r3, r0
 8011048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801104a:	7bbb      	ldrb	r3, [r7, #14]
}
 801104c:	4618      	mov	r0, r3
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	460b      	mov	r3, r1
 801105e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011060:	2300      	movs	r3, #0
 8011062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011064:	2300      	movs	r3, #0
 8011066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801106e:	78fa      	ldrb	r2, [r7, #3]
 8011070:	4611      	mov	r1, r2
 8011072:	4618      	mov	r0, r3
 8011074:	f7f4 fb2d 	bl	80056d2 <HAL_PCD_EP_SetStall>
 8011078:	4603      	mov	r3, r0
 801107a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801107c:	7bfb      	ldrb	r3, [r7, #15]
 801107e:	4618      	mov	r0, r3
 8011080:	f000 f8d8 	bl	8011234 <USBD_Get_USB_Status>
 8011084:	4603      	mov	r3, r0
 8011086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011088:	7bbb      	ldrb	r3, [r7, #14]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b084      	sub	sp, #16
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
 801109a:	460b      	mov	r3, r1
 801109c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801109e:	2300      	movs	r3, #0
 80110a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110a2:	2300      	movs	r3, #0
 80110a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110ac:	78fa      	ldrb	r2, [r7, #3]
 80110ae:	4611      	mov	r1, r2
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7f4 fb6e 	bl	8005792 <HAL_PCD_EP_ClrStall>
 80110b6:	4603      	mov	r3, r0
 80110b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
 80110bc:	4618      	mov	r0, r3
 80110be:	f000 f8b9 	bl	8011234 <USBD_Get_USB_Status>
 80110c2:	4603      	mov	r3, r0
 80110c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3710      	adds	r7, #16
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b085      	sub	sp, #20
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	460b      	mov	r3, r1
 80110da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80110e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	da0c      	bge.n	8011106 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80110ec:	78fb      	ldrb	r3, [r7, #3]
 80110ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110f2:	68f9      	ldr	r1, [r7, #12]
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	4613      	mov	r3, r2
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4413      	add	r3, r2
 80110fc:	00db      	lsls	r3, r3, #3
 80110fe:	440b      	add	r3, r1
 8011100:	3302      	adds	r3, #2
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	e00b      	b.n	801111e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011106:	78fb      	ldrb	r3, [r7, #3]
 8011108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801110c:	68f9      	ldr	r1, [r7, #12]
 801110e:	4613      	mov	r3, r2
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	4413      	add	r3, r2
 8011114:	00db      	lsls	r3, r3, #3
 8011116:	440b      	add	r3, r1
 8011118:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801111c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	bc80      	pop	{r7}
 8011126:	4770      	bx	lr

08011128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011142:	78fa      	ldrb	r2, [r7, #3]
 8011144:	4611      	mov	r1, r2
 8011146:	4618      	mov	r0, r3
 8011148:	f7f4 f991 	bl	800546e <HAL_PCD_SetAddress>
 801114c:	4603      	mov	r3, r0
 801114e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011150:	7bfb      	ldrb	r3, [r7, #15]
 8011152:	4618      	mov	r0, r3
 8011154:	f000 f86e 	bl	8011234 <USBD_Get_USB_Status>
 8011158:	4603      	mov	r3, r0
 801115a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801115c:	7bbb      	ldrb	r3, [r7, #14]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011166:	b580      	push	{r7, lr}
 8011168:	b086      	sub	sp, #24
 801116a:	af00      	add	r7, sp, #0
 801116c:	60f8      	str	r0, [r7, #12]
 801116e:	607a      	str	r2, [r7, #4]
 8011170:	461a      	mov	r2, r3
 8011172:	460b      	mov	r3, r1
 8011174:	72fb      	strb	r3, [r7, #11]
 8011176:	4613      	mov	r3, r2
 8011178:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801117a:	2300      	movs	r3, #0
 801117c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801117e:	2300      	movs	r3, #0
 8011180:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8011188:	893b      	ldrh	r3, [r7, #8]
 801118a:	7af9      	ldrb	r1, [r7, #11]
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	f7f4 fa69 	bl	8005664 <HAL_PCD_EP_Transmit>
 8011192:	4603      	mov	r3, r0
 8011194:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	4618      	mov	r0, r3
 801119a:	f000 f84b 	bl	8011234 <USBD_Get_USB_Status>
 801119e:	4603      	mov	r3, r0
 80111a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80111a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3718      	adds	r7, #24
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	607a      	str	r2, [r7, #4]
 80111b6:	461a      	mov	r2, r3
 80111b8:	460b      	mov	r3, r1
 80111ba:	72fb      	strb	r3, [r7, #11]
 80111bc:	4613      	mov	r3, r2
 80111be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111c0:	2300      	movs	r3, #0
 80111c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111c4:	2300      	movs	r3, #0
 80111c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80111ce:	893b      	ldrh	r3, [r7, #8]
 80111d0:	7af9      	ldrb	r1, [r7, #11]
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	f7f4 fa15 	bl	8005602 <HAL_PCD_EP_Receive>
 80111d8:	4603      	mov	r3, r0
 80111da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111dc:	7dfb      	ldrb	r3, [r7, #23]
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 f828 	bl	8011234 <USBD_Get_USB_Status>
 80111e4:	4603      	mov	r3, r0
 80111e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80111e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3718      	adds	r7, #24
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
	...

080111f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111fc:	4b02      	ldr	r3, [pc, #8]	; (8011208 <USBD_static_malloc+0x14>)
}
 80111fe:	4618      	mov	r0, r3
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	bc80      	pop	{r7}
 8011206:	4770      	bx	lr
 8011208:	20001628 	.word	0x20001628

0801120c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]

}
 8011214:	bf00      	nop
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	bc80      	pop	{r7}
 801121c:	4770      	bx	lr

0801121e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801121e:	b480      	push	{r7}
 8011220:	b083      	sub	sp, #12
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	460b      	mov	r3, r1
 8011228:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801122a:	bf00      	nop
 801122c:	370c      	adds	r7, #12
 801122e:	46bd      	mov	sp, r7
 8011230:	bc80      	pop	{r7}
 8011232:	4770      	bx	lr

08011234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011234:	b480      	push	{r7}
 8011236:	b085      	sub	sp, #20
 8011238:	af00      	add	r7, sp, #0
 801123a:	4603      	mov	r3, r0
 801123c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801123e:	2300      	movs	r3, #0
 8011240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011242:	79fb      	ldrb	r3, [r7, #7]
 8011244:	2b03      	cmp	r3, #3
 8011246:	d817      	bhi.n	8011278 <USBD_Get_USB_Status+0x44>
 8011248:	a201      	add	r2, pc, #4	; (adr r2, 8011250 <USBD_Get_USB_Status+0x1c>)
 801124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801124e:	bf00      	nop
 8011250:	08011261 	.word	0x08011261
 8011254:	08011267 	.word	0x08011267
 8011258:	0801126d 	.word	0x0801126d
 801125c:	08011273 	.word	0x08011273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	73fb      	strb	r3, [r7, #15]
    break;
 8011264:	e00b      	b.n	801127e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011266:	2302      	movs	r3, #2
 8011268:	73fb      	strb	r3, [r7, #15]
    break;
 801126a:	e008      	b.n	801127e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801126c:	2301      	movs	r3, #1
 801126e:	73fb      	strb	r3, [r7, #15]
    break;
 8011270:	e005      	b.n	801127e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011272:	2302      	movs	r3, #2
 8011274:	73fb      	strb	r3, [r7, #15]
    break;
 8011276:	e002      	b.n	801127e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011278:	2302      	movs	r3, #2
 801127a:	73fb      	strb	r3, [r7, #15]
    break;
 801127c:	bf00      	nop
  }
  return usb_status;
 801127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3714      	adds	r7, #20
 8011284:	46bd      	mov	sp, r7
 8011286:	bc80      	pop	{r7}
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop

0801128c <__errno>:
 801128c:	4b01      	ldr	r3, [pc, #4]	; (8011294 <__errno+0x8>)
 801128e:	6818      	ldr	r0, [r3, #0]
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	20000174 	.word	0x20000174

08011298 <__libc_init_array>:
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	2600      	movs	r6, #0
 801129c:	4d0c      	ldr	r5, [pc, #48]	; (80112d0 <__libc_init_array+0x38>)
 801129e:	4c0d      	ldr	r4, [pc, #52]	; (80112d4 <__libc_init_array+0x3c>)
 80112a0:	1b64      	subs	r4, r4, r5
 80112a2:	10a4      	asrs	r4, r4, #2
 80112a4:	42a6      	cmp	r6, r4
 80112a6:	d109      	bne.n	80112bc <__libc_init_array+0x24>
 80112a8:	f003 f834 	bl	8014314 <_init>
 80112ac:	2600      	movs	r6, #0
 80112ae:	4d0a      	ldr	r5, [pc, #40]	; (80112d8 <__libc_init_array+0x40>)
 80112b0:	4c0a      	ldr	r4, [pc, #40]	; (80112dc <__libc_init_array+0x44>)
 80112b2:	1b64      	subs	r4, r4, r5
 80112b4:	10a4      	asrs	r4, r4, #2
 80112b6:	42a6      	cmp	r6, r4
 80112b8:	d105      	bne.n	80112c6 <__libc_init_array+0x2e>
 80112ba:	bd70      	pop	{r4, r5, r6, pc}
 80112bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80112c0:	4798      	blx	r3
 80112c2:	3601      	adds	r6, #1
 80112c4:	e7ee      	b.n	80112a4 <__libc_init_array+0xc>
 80112c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80112ca:	4798      	blx	r3
 80112cc:	3601      	adds	r6, #1
 80112ce:	e7f2      	b.n	80112b6 <__libc_init_array+0x1e>
 80112d0:	0802db34 	.word	0x0802db34
 80112d4:	0802db34 	.word	0x0802db34
 80112d8:	0802db34 	.word	0x0802db34
 80112dc:	0802db38 	.word	0x0802db38

080112e0 <malloc>:
 80112e0:	4b02      	ldr	r3, [pc, #8]	; (80112ec <malloc+0xc>)
 80112e2:	4601      	mov	r1, r0
 80112e4:	6818      	ldr	r0, [r3, #0]
 80112e6:	f000 b87b 	b.w	80113e0 <_malloc_r>
 80112ea:	bf00      	nop
 80112ec:	20000174 	.word	0x20000174

080112f0 <free>:
 80112f0:	4b02      	ldr	r3, [pc, #8]	; (80112fc <free+0xc>)
 80112f2:	4601      	mov	r1, r0
 80112f4:	6818      	ldr	r0, [r3, #0]
 80112f6:	f000 b80b 	b.w	8011310 <_free_r>
 80112fa:	bf00      	nop
 80112fc:	20000174 	.word	0x20000174

08011300 <memset>:
 8011300:	4603      	mov	r3, r0
 8011302:	4402      	add	r2, r0
 8011304:	4293      	cmp	r3, r2
 8011306:	d100      	bne.n	801130a <memset+0xa>
 8011308:	4770      	bx	lr
 801130a:	f803 1b01 	strb.w	r1, [r3], #1
 801130e:	e7f9      	b.n	8011304 <memset+0x4>

08011310 <_free_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4605      	mov	r5, r0
 8011314:	2900      	cmp	r1, #0
 8011316:	d040      	beq.n	801139a <_free_r+0x8a>
 8011318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801131c:	1f0c      	subs	r4, r1, #4
 801131e:	2b00      	cmp	r3, #0
 8011320:	bfb8      	it	lt
 8011322:	18e4      	addlt	r4, r4, r3
 8011324:	f001 fc16 	bl	8012b54 <__malloc_lock>
 8011328:	4a1c      	ldr	r2, [pc, #112]	; (801139c <_free_r+0x8c>)
 801132a:	6813      	ldr	r3, [r2, #0]
 801132c:	b933      	cbnz	r3, 801133c <_free_r+0x2c>
 801132e:	6063      	str	r3, [r4, #4]
 8011330:	6014      	str	r4, [r2, #0]
 8011332:	4628      	mov	r0, r5
 8011334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011338:	f001 bc12 	b.w	8012b60 <__malloc_unlock>
 801133c:	42a3      	cmp	r3, r4
 801133e:	d908      	bls.n	8011352 <_free_r+0x42>
 8011340:	6820      	ldr	r0, [r4, #0]
 8011342:	1821      	adds	r1, r4, r0
 8011344:	428b      	cmp	r3, r1
 8011346:	bf01      	itttt	eq
 8011348:	6819      	ldreq	r1, [r3, #0]
 801134a:	685b      	ldreq	r3, [r3, #4]
 801134c:	1809      	addeq	r1, r1, r0
 801134e:	6021      	streq	r1, [r4, #0]
 8011350:	e7ed      	b.n	801132e <_free_r+0x1e>
 8011352:	461a      	mov	r2, r3
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	b10b      	cbz	r3, 801135c <_free_r+0x4c>
 8011358:	42a3      	cmp	r3, r4
 801135a:	d9fa      	bls.n	8011352 <_free_r+0x42>
 801135c:	6811      	ldr	r1, [r2, #0]
 801135e:	1850      	adds	r0, r2, r1
 8011360:	42a0      	cmp	r0, r4
 8011362:	d10b      	bne.n	801137c <_free_r+0x6c>
 8011364:	6820      	ldr	r0, [r4, #0]
 8011366:	4401      	add	r1, r0
 8011368:	1850      	adds	r0, r2, r1
 801136a:	4283      	cmp	r3, r0
 801136c:	6011      	str	r1, [r2, #0]
 801136e:	d1e0      	bne.n	8011332 <_free_r+0x22>
 8011370:	6818      	ldr	r0, [r3, #0]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	4401      	add	r1, r0
 8011376:	6011      	str	r1, [r2, #0]
 8011378:	6053      	str	r3, [r2, #4]
 801137a:	e7da      	b.n	8011332 <_free_r+0x22>
 801137c:	d902      	bls.n	8011384 <_free_r+0x74>
 801137e:	230c      	movs	r3, #12
 8011380:	602b      	str	r3, [r5, #0]
 8011382:	e7d6      	b.n	8011332 <_free_r+0x22>
 8011384:	6820      	ldr	r0, [r4, #0]
 8011386:	1821      	adds	r1, r4, r0
 8011388:	428b      	cmp	r3, r1
 801138a:	bf01      	itttt	eq
 801138c:	6819      	ldreq	r1, [r3, #0]
 801138e:	685b      	ldreq	r3, [r3, #4]
 8011390:	1809      	addeq	r1, r1, r0
 8011392:	6021      	streq	r1, [r4, #0]
 8011394:	6063      	str	r3, [r4, #4]
 8011396:	6054      	str	r4, [r2, #4]
 8011398:	e7cb      	b.n	8011332 <_free_r+0x22>
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	2000163c 	.word	0x2000163c

080113a0 <sbrk_aligned>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	4e0e      	ldr	r6, [pc, #56]	; (80113dc <sbrk_aligned+0x3c>)
 80113a4:	460c      	mov	r4, r1
 80113a6:	6831      	ldr	r1, [r6, #0]
 80113a8:	4605      	mov	r5, r0
 80113aa:	b911      	cbnz	r1, 80113b2 <sbrk_aligned+0x12>
 80113ac:	f000 fcec 	bl	8011d88 <_sbrk_r>
 80113b0:	6030      	str	r0, [r6, #0]
 80113b2:	4621      	mov	r1, r4
 80113b4:	4628      	mov	r0, r5
 80113b6:	f000 fce7 	bl	8011d88 <_sbrk_r>
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	d00a      	beq.n	80113d4 <sbrk_aligned+0x34>
 80113be:	1cc4      	adds	r4, r0, #3
 80113c0:	f024 0403 	bic.w	r4, r4, #3
 80113c4:	42a0      	cmp	r0, r4
 80113c6:	d007      	beq.n	80113d8 <sbrk_aligned+0x38>
 80113c8:	1a21      	subs	r1, r4, r0
 80113ca:	4628      	mov	r0, r5
 80113cc:	f000 fcdc 	bl	8011d88 <_sbrk_r>
 80113d0:	3001      	adds	r0, #1
 80113d2:	d101      	bne.n	80113d8 <sbrk_aligned+0x38>
 80113d4:	f04f 34ff 	mov.w	r4, #4294967295
 80113d8:	4620      	mov	r0, r4
 80113da:	bd70      	pop	{r4, r5, r6, pc}
 80113dc:	20001640 	.word	0x20001640

080113e0 <_malloc_r>:
 80113e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e4:	1ccd      	adds	r5, r1, #3
 80113e6:	f025 0503 	bic.w	r5, r5, #3
 80113ea:	3508      	adds	r5, #8
 80113ec:	2d0c      	cmp	r5, #12
 80113ee:	bf38      	it	cc
 80113f0:	250c      	movcc	r5, #12
 80113f2:	2d00      	cmp	r5, #0
 80113f4:	4607      	mov	r7, r0
 80113f6:	db01      	blt.n	80113fc <_malloc_r+0x1c>
 80113f8:	42a9      	cmp	r1, r5
 80113fa:	d905      	bls.n	8011408 <_malloc_r+0x28>
 80113fc:	230c      	movs	r3, #12
 80113fe:	2600      	movs	r6, #0
 8011400:	603b      	str	r3, [r7, #0]
 8011402:	4630      	mov	r0, r6
 8011404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011408:	4e2e      	ldr	r6, [pc, #184]	; (80114c4 <_malloc_r+0xe4>)
 801140a:	f001 fba3 	bl	8012b54 <__malloc_lock>
 801140e:	6833      	ldr	r3, [r6, #0]
 8011410:	461c      	mov	r4, r3
 8011412:	bb34      	cbnz	r4, 8011462 <_malloc_r+0x82>
 8011414:	4629      	mov	r1, r5
 8011416:	4638      	mov	r0, r7
 8011418:	f7ff ffc2 	bl	80113a0 <sbrk_aligned>
 801141c:	1c43      	adds	r3, r0, #1
 801141e:	4604      	mov	r4, r0
 8011420:	d14d      	bne.n	80114be <_malloc_r+0xde>
 8011422:	6834      	ldr	r4, [r6, #0]
 8011424:	4626      	mov	r6, r4
 8011426:	2e00      	cmp	r6, #0
 8011428:	d140      	bne.n	80114ac <_malloc_r+0xcc>
 801142a:	6823      	ldr	r3, [r4, #0]
 801142c:	4631      	mov	r1, r6
 801142e:	4638      	mov	r0, r7
 8011430:	eb04 0803 	add.w	r8, r4, r3
 8011434:	f000 fca8 	bl	8011d88 <_sbrk_r>
 8011438:	4580      	cmp	r8, r0
 801143a:	d13a      	bne.n	80114b2 <_malloc_r+0xd2>
 801143c:	6821      	ldr	r1, [r4, #0]
 801143e:	3503      	adds	r5, #3
 8011440:	1a6d      	subs	r5, r5, r1
 8011442:	f025 0503 	bic.w	r5, r5, #3
 8011446:	3508      	adds	r5, #8
 8011448:	2d0c      	cmp	r5, #12
 801144a:	bf38      	it	cc
 801144c:	250c      	movcc	r5, #12
 801144e:	4638      	mov	r0, r7
 8011450:	4629      	mov	r1, r5
 8011452:	f7ff ffa5 	bl	80113a0 <sbrk_aligned>
 8011456:	3001      	adds	r0, #1
 8011458:	d02b      	beq.n	80114b2 <_malloc_r+0xd2>
 801145a:	6823      	ldr	r3, [r4, #0]
 801145c:	442b      	add	r3, r5
 801145e:	6023      	str	r3, [r4, #0]
 8011460:	e00e      	b.n	8011480 <_malloc_r+0xa0>
 8011462:	6822      	ldr	r2, [r4, #0]
 8011464:	1b52      	subs	r2, r2, r5
 8011466:	d41e      	bmi.n	80114a6 <_malloc_r+0xc6>
 8011468:	2a0b      	cmp	r2, #11
 801146a:	d916      	bls.n	801149a <_malloc_r+0xba>
 801146c:	1961      	adds	r1, r4, r5
 801146e:	42a3      	cmp	r3, r4
 8011470:	6025      	str	r5, [r4, #0]
 8011472:	bf18      	it	ne
 8011474:	6059      	strne	r1, [r3, #4]
 8011476:	6863      	ldr	r3, [r4, #4]
 8011478:	bf08      	it	eq
 801147a:	6031      	streq	r1, [r6, #0]
 801147c:	5162      	str	r2, [r4, r5]
 801147e:	604b      	str	r3, [r1, #4]
 8011480:	4638      	mov	r0, r7
 8011482:	f104 060b 	add.w	r6, r4, #11
 8011486:	f001 fb6b 	bl	8012b60 <__malloc_unlock>
 801148a:	f026 0607 	bic.w	r6, r6, #7
 801148e:	1d23      	adds	r3, r4, #4
 8011490:	1af2      	subs	r2, r6, r3
 8011492:	d0b6      	beq.n	8011402 <_malloc_r+0x22>
 8011494:	1b9b      	subs	r3, r3, r6
 8011496:	50a3      	str	r3, [r4, r2]
 8011498:	e7b3      	b.n	8011402 <_malloc_r+0x22>
 801149a:	6862      	ldr	r2, [r4, #4]
 801149c:	42a3      	cmp	r3, r4
 801149e:	bf0c      	ite	eq
 80114a0:	6032      	streq	r2, [r6, #0]
 80114a2:	605a      	strne	r2, [r3, #4]
 80114a4:	e7ec      	b.n	8011480 <_malloc_r+0xa0>
 80114a6:	4623      	mov	r3, r4
 80114a8:	6864      	ldr	r4, [r4, #4]
 80114aa:	e7b2      	b.n	8011412 <_malloc_r+0x32>
 80114ac:	4634      	mov	r4, r6
 80114ae:	6876      	ldr	r6, [r6, #4]
 80114b0:	e7b9      	b.n	8011426 <_malloc_r+0x46>
 80114b2:	230c      	movs	r3, #12
 80114b4:	4638      	mov	r0, r7
 80114b6:	603b      	str	r3, [r7, #0]
 80114b8:	f001 fb52 	bl	8012b60 <__malloc_unlock>
 80114bc:	e7a1      	b.n	8011402 <_malloc_r+0x22>
 80114be:	6025      	str	r5, [r4, #0]
 80114c0:	e7de      	b.n	8011480 <_malloc_r+0xa0>
 80114c2:	bf00      	nop
 80114c4:	2000163c 	.word	0x2000163c

080114c8 <__cvt>:
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114ce:	461f      	mov	r7, r3
 80114d0:	bfbb      	ittet	lt
 80114d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80114d6:	461f      	movlt	r7, r3
 80114d8:	2300      	movge	r3, #0
 80114da:	232d      	movlt	r3, #45	; 0x2d
 80114dc:	b088      	sub	sp, #32
 80114de:	4614      	mov	r4, r2
 80114e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80114e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80114e4:	7013      	strb	r3, [r2, #0]
 80114e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80114ec:	f023 0820 	bic.w	r8, r3, #32
 80114f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114f4:	d005      	beq.n	8011502 <__cvt+0x3a>
 80114f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80114fa:	d100      	bne.n	80114fe <__cvt+0x36>
 80114fc:	3501      	adds	r5, #1
 80114fe:	2302      	movs	r3, #2
 8011500:	e000      	b.n	8011504 <__cvt+0x3c>
 8011502:	2303      	movs	r3, #3
 8011504:	aa07      	add	r2, sp, #28
 8011506:	9204      	str	r2, [sp, #16]
 8011508:	aa06      	add	r2, sp, #24
 801150a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801150e:	e9cd 3500 	strd	r3, r5, [sp]
 8011512:	4622      	mov	r2, r4
 8011514:	463b      	mov	r3, r7
 8011516:	f000 fd0f 	bl	8011f38 <_dtoa_r>
 801151a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801151e:	4606      	mov	r6, r0
 8011520:	d102      	bne.n	8011528 <__cvt+0x60>
 8011522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011524:	07db      	lsls	r3, r3, #31
 8011526:	d522      	bpl.n	801156e <__cvt+0xa6>
 8011528:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801152c:	eb06 0905 	add.w	r9, r6, r5
 8011530:	d110      	bne.n	8011554 <__cvt+0x8c>
 8011532:	7833      	ldrb	r3, [r6, #0]
 8011534:	2b30      	cmp	r3, #48	; 0x30
 8011536:	d10a      	bne.n	801154e <__cvt+0x86>
 8011538:	2200      	movs	r2, #0
 801153a:	2300      	movs	r3, #0
 801153c:	4620      	mov	r0, r4
 801153e:	4639      	mov	r1, r7
 8011540:	f7ef fa9e 	bl	8000a80 <__aeabi_dcmpeq>
 8011544:	b918      	cbnz	r0, 801154e <__cvt+0x86>
 8011546:	f1c5 0501 	rsb	r5, r5, #1
 801154a:	f8ca 5000 	str.w	r5, [sl]
 801154e:	f8da 3000 	ldr.w	r3, [sl]
 8011552:	4499      	add	r9, r3
 8011554:	2200      	movs	r2, #0
 8011556:	2300      	movs	r3, #0
 8011558:	4620      	mov	r0, r4
 801155a:	4639      	mov	r1, r7
 801155c:	f7ef fa90 	bl	8000a80 <__aeabi_dcmpeq>
 8011560:	b108      	cbz	r0, 8011566 <__cvt+0x9e>
 8011562:	f8cd 901c 	str.w	r9, [sp, #28]
 8011566:	2230      	movs	r2, #48	; 0x30
 8011568:	9b07      	ldr	r3, [sp, #28]
 801156a:	454b      	cmp	r3, r9
 801156c:	d307      	bcc.n	801157e <__cvt+0xb6>
 801156e:	4630      	mov	r0, r6
 8011570:	9b07      	ldr	r3, [sp, #28]
 8011572:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011574:	1b9b      	subs	r3, r3, r6
 8011576:	6013      	str	r3, [r2, #0]
 8011578:	b008      	add	sp, #32
 801157a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801157e:	1c59      	adds	r1, r3, #1
 8011580:	9107      	str	r1, [sp, #28]
 8011582:	701a      	strb	r2, [r3, #0]
 8011584:	e7f0      	b.n	8011568 <__cvt+0xa0>

08011586 <__exponent>:
 8011586:	4603      	mov	r3, r0
 8011588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801158a:	2900      	cmp	r1, #0
 801158c:	f803 2b02 	strb.w	r2, [r3], #2
 8011590:	bfb6      	itet	lt
 8011592:	222d      	movlt	r2, #45	; 0x2d
 8011594:	222b      	movge	r2, #43	; 0x2b
 8011596:	4249      	neglt	r1, r1
 8011598:	2909      	cmp	r1, #9
 801159a:	7042      	strb	r2, [r0, #1]
 801159c:	dd2b      	ble.n	80115f6 <__exponent+0x70>
 801159e:	f10d 0407 	add.w	r4, sp, #7
 80115a2:	46a4      	mov	ip, r4
 80115a4:	270a      	movs	r7, #10
 80115a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80115aa:	460a      	mov	r2, r1
 80115ac:	46a6      	mov	lr, r4
 80115ae:	fb07 1516 	mls	r5, r7, r6, r1
 80115b2:	2a63      	cmp	r2, #99	; 0x63
 80115b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80115b8:	4631      	mov	r1, r6
 80115ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80115be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80115c2:	dcf0      	bgt.n	80115a6 <__exponent+0x20>
 80115c4:	3130      	adds	r1, #48	; 0x30
 80115c6:	f1ae 0502 	sub.w	r5, lr, #2
 80115ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80115ce:	4629      	mov	r1, r5
 80115d0:	1c44      	adds	r4, r0, #1
 80115d2:	4561      	cmp	r1, ip
 80115d4:	d30a      	bcc.n	80115ec <__exponent+0x66>
 80115d6:	f10d 0209 	add.w	r2, sp, #9
 80115da:	eba2 020e 	sub.w	r2, r2, lr
 80115de:	4565      	cmp	r5, ip
 80115e0:	bf88      	it	hi
 80115e2:	2200      	movhi	r2, #0
 80115e4:	4413      	add	r3, r2
 80115e6:	1a18      	subs	r0, r3, r0
 80115e8:	b003      	add	sp, #12
 80115ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80115f4:	e7ed      	b.n	80115d2 <__exponent+0x4c>
 80115f6:	2330      	movs	r3, #48	; 0x30
 80115f8:	3130      	adds	r1, #48	; 0x30
 80115fa:	7083      	strb	r3, [r0, #2]
 80115fc:	70c1      	strb	r1, [r0, #3]
 80115fe:	1d03      	adds	r3, r0, #4
 8011600:	e7f1      	b.n	80115e6 <__exponent+0x60>
	...

08011604 <_printf_float>:
 8011604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011608:	b091      	sub	sp, #68	; 0x44
 801160a:	460c      	mov	r4, r1
 801160c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011610:	4616      	mov	r6, r2
 8011612:	461f      	mov	r7, r3
 8011614:	4605      	mov	r5, r0
 8011616:	f001 fa7d 	bl	8012b14 <_localeconv_r>
 801161a:	6803      	ldr	r3, [r0, #0]
 801161c:	4618      	mov	r0, r3
 801161e:	9309      	str	r3, [sp, #36]	; 0x24
 8011620:	f7ee fe02 	bl	8000228 <strlen>
 8011624:	2300      	movs	r3, #0
 8011626:	930e      	str	r3, [sp, #56]	; 0x38
 8011628:	f8d8 3000 	ldr.w	r3, [r8]
 801162c:	900a      	str	r0, [sp, #40]	; 0x28
 801162e:	3307      	adds	r3, #7
 8011630:	f023 0307 	bic.w	r3, r3, #7
 8011634:	f103 0208 	add.w	r2, r3, #8
 8011638:	f894 9018 	ldrb.w	r9, [r4, #24]
 801163c:	f8d4 b000 	ldr.w	fp, [r4]
 8011640:	f8c8 2000 	str.w	r2, [r8]
 8011644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011648:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801164c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011650:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011654:	930b      	str	r3, [sp, #44]	; 0x2c
 8011656:	f04f 32ff 	mov.w	r2, #4294967295
 801165a:	4640      	mov	r0, r8
 801165c:	4b9c      	ldr	r3, [pc, #624]	; (80118d0 <_printf_float+0x2cc>)
 801165e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011660:	f7ef fa40 	bl	8000ae4 <__aeabi_dcmpun>
 8011664:	bb70      	cbnz	r0, 80116c4 <_printf_float+0xc0>
 8011666:	f04f 32ff 	mov.w	r2, #4294967295
 801166a:	4640      	mov	r0, r8
 801166c:	4b98      	ldr	r3, [pc, #608]	; (80118d0 <_printf_float+0x2cc>)
 801166e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011670:	f7ef fa1a 	bl	8000aa8 <__aeabi_dcmple>
 8011674:	bb30      	cbnz	r0, 80116c4 <_printf_float+0xc0>
 8011676:	2200      	movs	r2, #0
 8011678:	2300      	movs	r3, #0
 801167a:	4640      	mov	r0, r8
 801167c:	4651      	mov	r1, sl
 801167e:	f7ef fa09 	bl	8000a94 <__aeabi_dcmplt>
 8011682:	b110      	cbz	r0, 801168a <_printf_float+0x86>
 8011684:	232d      	movs	r3, #45	; 0x2d
 8011686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801168a:	4b92      	ldr	r3, [pc, #584]	; (80118d4 <_printf_float+0x2d0>)
 801168c:	4892      	ldr	r0, [pc, #584]	; (80118d8 <_printf_float+0x2d4>)
 801168e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011692:	bf94      	ite	ls
 8011694:	4698      	movls	r8, r3
 8011696:	4680      	movhi	r8, r0
 8011698:	2303      	movs	r3, #3
 801169a:	f04f 0a00 	mov.w	sl, #0
 801169e:	6123      	str	r3, [r4, #16]
 80116a0:	f02b 0304 	bic.w	r3, fp, #4
 80116a4:	6023      	str	r3, [r4, #0]
 80116a6:	4633      	mov	r3, r6
 80116a8:	4621      	mov	r1, r4
 80116aa:	4628      	mov	r0, r5
 80116ac:	9700      	str	r7, [sp, #0]
 80116ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80116b0:	f000 f9d4 	bl	8011a5c <_printf_common>
 80116b4:	3001      	adds	r0, #1
 80116b6:	f040 8090 	bne.w	80117da <_printf_float+0x1d6>
 80116ba:	f04f 30ff 	mov.w	r0, #4294967295
 80116be:	b011      	add	sp, #68	; 0x44
 80116c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c4:	4642      	mov	r2, r8
 80116c6:	4653      	mov	r3, sl
 80116c8:	4640      	mov	r0, r8
 80116ca:	4651      	mov	r1, sl
 80116cc:	f7ef fa0a 	bl	8000ae4 <__aeabi_dcmpun>
 80116d0:	b148      	cbz	r0, 80116e6 <_printf_float+0xe2>
 80116d2:	f1ba 0f00 	cmp.w	sl, #0
 80116d6:	bfb8      	it	lt
 80116d8:	232d      	movlt	r3, #45	; 0x2d
 80116da:	4880      	ldr	r0, [pc, #512]	; (80118dc <_printf_float+0x2d8>)
 80116dc:	bfb8      	it	lt
 80116de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80116e2:	4b7f      	ldr	r3, [pc, #508]	; (80118e0 <_printf_float+0x2dc>)
 80116e4:	e7d3      	b.n	801168e <_printf_float+0x8a>
 80116e6:	6863      	ldr	r3, [r4, #4]
 80116e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	d142      	bne.n	8011776 <_printf_float+0x172>
 80116f0:	2306      	movs	r3, #6
 80116f2:	6063      	str	r3, [r4, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	9206      	str	r2, [sp, #24]
 80116f8:	aa0e      	add	r2, sp, #56	; 0x38
 80116fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80116fe:	aa0d      	add	r2, sp, #52	; 0x34
 8011700:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011704:	9203      	str	r2, [sp, #12]
 8011706:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801170a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801170e:	6023      	str	r3, [r4, #0]
 8011710:	6863      	ldr	r3, [r4, #4]
 8011712:	4642      	mov	r2, r8
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	4628      	mov	r0, r5
 8011718:	4653      	mov	r3, sl
 801171a:	910b      	str	r1, [sp, #44]	; 0x2c
 801171c:	f7ff fed4 	bl	80114c8 <__cvt>
 8011720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011722:	4680      	mov	r8, r0
 8011724:	2947      	cmp	r1, #71	; 0x47
 8011726:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011728:	d108      	bne.n	801173c <_printf_float+0x138>
 801172a:	1cc8      	adds	r0, r1, #3
 801172c:	db02      	blt.n	8011734 <_printf_float+0x130>
 801172e:	6863      	ldr	r3, [r4, #4]
 8011730:	4299      	cmp	r1, r3
 8011732:	dd40      	ble.n	80117b6 <_printf_float+0x1b2>
 8011734:	f1a9 0902 	sub.w	r9, r9, #2
 8011738:	fa5f f989 	uxtb.w	r9, r9
 801173c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011740:	d81f      	bhi.n	8011782 <_printf_float+0x17e>
 8011742:	464a      	mov	r2, r9
 8011744:	3901      	subs	r1, #1
 8011746:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801174a:	910d      	str	r1, [sp, #52]	; 0x34
 801174c:	f7ff ff1b 	bl	8011586 <__exponent>
 8011750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011752:	4682      	mov	sl, r0
 8011754:	1813      	adds	r3, r2, r0
 8011756:	2a01      	cmp	r2, #1
 8011758:	6123      	str	r3, [r4, #16]
 801175a:	dc02      	bgt.n	8011762 <_printf_float+0x15e>
 801175c:	6822      	ldr	r2, [r4, #0]
 801175e:	07d2      	lsls	r2, r2, #31
 8011760:	d501      	bpl.n	8011766 <_printf_float+0x162>
 8011762:	3301      	adds	r3, #1
 8011764:	6123      	str	r3, [r4, #16]
 8011766:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801176a:	2b00      	cmp	r3, #0
 801176c:	d09b      	beq.n	80116a6 <_printf_float+0xa2>
 801176e:	232d      	movs	r3, #45	; 0x2d
 8011770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011774:	e797      	b.n	80116a6 <_printf_float+0xa2>
 8011776:	2947      	cmp	r1, #71	; 0x47
 8011778:	d1bc      	bne.n	80116f4 <_printf_float+0xf0>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1ba      	bne.n	80116f4 <_printf_float+0xf0>
 801177e:	2301      	movs	r3, #1
 8011780:	e7b7      	b.n	80116f2 <_printf_float+0xee>
 8011782:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011786:	d118      	bne.n	80117ba <_printf_float+0x1b6>
 8011788:	2900      	cmp	r1, #0
 801178a:	6863      	ldr	r3, [r4, #4]
 801178c:	dd0b      	ble.n	80117a6 <_printf_float+0x1a2>
 801178e:	6121      	str	r1, [r4, #16]
 8011790:	b913      	cbnz	r3, 8011798 <_printf_float+0x194>
 8011792:	6822      	ldr	r2, [r4, #0]
 8011794:	07d0      	lsls	r0, r2, #31
 8011796:	d502      	bpl.n	801179e <_printf_float+0x19a>
 8011798:	3301      	adds	r3, #1
 801179a:	440b      	add	r3, r1
 801179c:	6123      	str	r3, [r4, #16]
 801179e:	f04f 0a00 	mov.w	sl, #0
 80117a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80117a4:	e7df      	b.n	8011766 <_printf_float+0x162>
 80117a6:	b913      	cbnz	r3, 80117ae <_printf_float+0x1aa>
 80117a8:	6822      	ldr	r2, [r4, #0]
 80117aa:	07d2      	lsls	r2, r2, #31
 80117ac:	d501      	bpl.n	80117b2 <_printf_float+0x1ae>
 80117ae:	3302      	adds	r3, #2
 80117b0:	e7f4      	b.n	801179c <_printf_float+0x198>
 80117b2:	2301      	movs	r3, #1
 80117b4:	e7f2      	b.n	801179c <_printf_float+0x198>
 80117b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80117ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117bc:	4299      	cmp	r1, r3
 80117be:	db05      	blt.n	80117cc <_printf_float+0x1c8>
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	6121      	str	r1, [r4, #16]
 80117c4:	07d8      	lsls	r0, r3, #31
 80117c6:	d5ea      	bpl.n	801179e <_printf_float+0x19a>
 80117c8:	1c4b      	adds	r3, r1, #1
 80117ca:	e7e7      	b.n	801179c <_printf_float+0x198>
 80117cc:	2900      	cmp	r1, #0
 80117ce:	bfcc      	ite	gt
 80117d0:	2201      	movgt	r2, #1
 80117d2:	f1c1 0202 	rsble	r2, r1, #2
 80117d6:	4413      	add	r3, r2
 80117d8:	e7e0      	b.n	801179c <_printf_float+0x198>
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	055a      	lsls	r2, r3, #21
 80117de:	d407      	bmi.n	80117f0 <_printf_float+0x1ec>
 80117e0:	6923      	ldr	r3, [r4, #16]
 80117e2:	4642      	mov	r2, r8
 80117e4:	4631      	mov	r1, r6
 80117e6:	4628      	mov	r0, r5
 80117e8:	47b8      	blx	r7
 80117ea:	3001      	adds	r0, #1
 80117ec:	d12b      	bne.n	8011846 <_printf_float+0x242>
 80117ee:	e764      	b.n	80116ba <_printf_float+0xb6>
 80117f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80117f4:	f240 80dd 	bls.w	80119b2 <_printf_float+0x3ae>
 80117f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117fc:	2200      	movs	r2, #0
 80117fe:	2300      	movs	r3, #0
 8011800:	f7ef f93e 	bl	8000a80 <__aeabi_dcmpeq>
 8011804:	2800      	cmp	r0, #0
 8011806:	d033      	beq.n	8011870 <_printf_float+0x26c>
 8011808:	2301      	movs	r3, #1
 801180a:	4631      	mov	r1, r6
 801180c:	4628      	mov	r0, r5
 801180e:	4a35      	ldr	r2, [pc, #212]	; (80118e4 <_printf_float+0x2e0>)
 8011810:	47b8      	blx	r7
 8011812:	3001      	adds	r0, #1
 8011814:	f43f af51 	beq.w	80116ba <_printf_float+0xb6>
 8011818:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801181c:	429a      	cmp	r2, r3
 801181e:	db02      	blt.n	8011826 <_printf_float+0x222>
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	07d8      	lsls	r0, r3, #31
 8011824:	d50f      	bpl.n	8011846 <_printf_float+0x242>
 8011826:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801182a:	4631      	mov	r1, r6
 801182c:	4628      	mov	r0, r5
 801182e:	47b8      	blx	r7
 8011830:	3001      	adds	r0, #1
 8011832:	f43f af42 	beq.w	80116ba <_printf_float+0xb6>
 8011836:	f04f 0800 	mov.w	r8, #0
 801183a:	f104 091a 	add.w	r9, r4, #26
 801183e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011840:	3b01      	subs	r3, #1
 8011842:	4543      	cmp	r3, r8
 8011844:	dc09      	bgt.n	801185a <_printf_float+0x256>
 8011846:	6823      	ldr	r3, [r4, #0]
 8011848:	079b      	lsls	r3, r3, #30
 801184a:	f100 8102 	bmi.w	8011a52 <_printf_float+0x44e>
 801184e:	68e0      	ldr	r0, [r4, #12]
 8011850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011852:	4298      	cmp	r0, r3
 8011854:	bfb8      	it	lt
 8011856:	4618      	movlt	r0, r3
 8011858:	e731      	b.n	80116be <_printf_float+0xba>
 801185a:	2301      	movs	r3, #1
 801185c:	464a      	mov	r2, r9
 801185e:	4631      	mov	r1, r6
 8011860:	4628      	mov	r0, r5
 8011862:	47b8      	blx	r7
 8011864:	3001      	adds	r0, #1
 8011866:	f43f af28 	beq.w	80116ba <_printf_float+0xb6>
 801186a:	f108 0801 	add.w	r8, r8, #1
 801186e:	e7e6      	b.n	801183e <_printf_float+0x23a>
 8011870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011872:	2b00      	cmp	r3, #0
 8011874:	dc38      	bgt.n	80118e8 <_printf_float+0x2e4>
 8011876:	2301      	movs	r3, #1
 8011878:	4631      	mov	r1, r6
 801187a:	4628      	mov	r0, r5
 801187c:	4a19      	ldr	r2, [pc, #100]	; (80118e4 <_printf_float+0x2e0>)
 801187e:	47b8      	blx	r7
 8011880:	3001      	adds	r0, #1
 8011882:	f43f af1a 	beq.w	80116ba <_printf_float+0xb6>
 8011886:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801188a:	4313      	orrs	r3, r2
 801188c:	d102      	bne.n	8011894 <_printf_float+0x290>
 801188e:	6823      	ldr	r3, [r4, #0]
 8011890:	07d9      	lsls	r1, r3, #31
 8011892:	d5d8      	bpl.n	8011846 <_printf_float+0x242>
 8011894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011898:	4631      	mov	r1, r6
 801189a:	4628      	mov	r0, r5
 801189c:	47b8      	blx	r7
 801189e:	3001      	adds	r0, #1
 80118a0:	f43f af0b 	beq.w	80116ba <_printf_float+0xb6>
 80118a4:	f04f 0900 	mov.w	r9, #0
 80118a8:	f104 0a1a 	add.w	sl, r4, #26
 80118ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118ae:	425b      	negs	r3, r3
 80118b0:	454b      	cmp	r3, r9
 80118b2:	dc01      	bgt.n	80118b8 <_printf_float+0x2b4>
 80118b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118b6:	e794      	b.n	80117e2 <_printf_float+0x1de>
 80118b8:	2301      	movs	r3, #1
 80118ba:	4652      	mov	r2, sl
 80118bc:	4631      	mov	r1, r6
 80118be:	4628      	mov	r0, r5
 80118c0:	47b8      	blx	r7
 80118c2:	3001      	adds	r0, #1
 80118c4:	f43f aef9 	beq.w	80116ba <_printf_float+0xb6>
 80118c8:	f109 0901 	add.w	r9, r9, #1
 80118cc:	e7ee      	b.n	80118ac <_printf_float+0x2a8>
 80118ce:	bf00      	nop
 80118d0:	7fefffff 	.word	0x7fefffff
 80118d4:	0802d760 	.word	0x0802d760
 80118d8:	0802d764 	.word	0x0802d764
 80118dc:	0802d76c 	.word	0x0802d76c
 80118e0:	0802d768 	.word	0x0802d768
 80118e4:	0802d770 	.word	0x0802d770
 80118e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118ec:	429a      	cmp	r2, r3
 80118ee:	bfa8      	it	ge
 80118f0:	461a      	movge	r2, r3
 80118f2:	2a00      	cmp	r2, #0
 80118f4:	4691      	mov	r9, r2
 80118f6:	dc37      	bgt.n	8011968 <_printf_float+0x364>
 80118f8:	f04f 0b00 	mov.w	fp, #0
 80118fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011900:	f104 021a 	add.w	r2, r4, #26
 8011904:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011908:	ebaa 0309 	sub.w	r3, sl, r9
 801190c:	455b      	cmp	r3, fp
 801190e:	dc33      	bgt.n	8011978 <_printf_float+0x374>
 8011910:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011914:	429a      	cmp	r2, r3
 8011916:	db3b      	blt.n	8011990 <_printf_float+0x38c>
 8011918:	6823      	ldr	r3, [r4, #0]
 801191a:	07da      	lsls	r2, r3, #31
 801191c:	d438      	bmi.n	8011990 <_printf_float+0x38c>
 801191e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011920:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011922:	eba3 020a 	sub.w	r2, r3, sl
 8011926:	eba3 0901 	sub.w	r9, r3, r1
 801192a:	4591      	cmp	r9, r2
 801192c:	bfa8      	it	ge
 801192e:	4691      	movge	r9, r2
 8011930:	f1b9 0f00 	cmp.w	r9, #0
 8011934:	dc34      	bgt.n	80119a0 <_printf_float+0x39c>
 8011936:	f04f 0800 	mov.w	r8, #0
 801193a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801193e:	f104 0a1a 	add.w	sl, r4, #26
 8011942:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011946:	1a9b      	subs	r3, r3, r2
 8011948:	eba3 0309 	sub.w	r3, r3, r9
 801194c:	4543      	cmp	r3, r8
 801194e:	f77f af7a 	ble.w	8011846 <_printf_float+0x242>
 8011952:	2301      	movs	r3, #1
 8011954:	4652      	mov	r2, sl
 8011956:	4631      	mov	r1, r6
 8011958:	4628      	mov	r0, r5
 801195a:	47b8      	blx	r7
 801195c:	3001      	adds	r0, #1
 801195e:	f43f aeac 	beq.w	80116ba <_printf_float+0xb6>
 8011962:	f108 0801 	add.w	r8, r8, #1
 8011966:	e7ec      	b.n	8011942 <_printf_float+0x33e>
 8011968:	4613      	mov	r3, r2
 801196a:	4631      	mov	r1, r6
 801196c:	4642      	mov	r2, r8
 801196e:	4628      	mov	r0, r5
 8011970:	47b8      	blx	r7
 8011972:	3001      	adds	r0, #1
 8011974:	d1c0      	bne.n	80118f8 <_printf_float+0x2f4>
 8011976:	e6a0      	b.n	80116ba <_printf_float+0xb6>
 8011978:	2301      	movs	r3, #1
 801197a:	4631      	mov	r1, r6
 801197c:	4628      	mov	r0, r5
 801197e:	920b      	str	r2, [sp, #44]	; 0x2c
 8011980:	47b8      	blx	r7
 8011982:	3001      	adds	r0, #1
 8011984:	f43f ae99 	beq.w	80116ba <_printf_float+0xb6>
 8011988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801198a:	f10b 0b01 	add.w	fp, fp, #1
 801198e:	e7b9      	b.n	8011904 <_printf_float+0x300>
 8011990:	4631      	mov	r1, r6
 8011992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011996:	4628      	mov	r0, r5
 8011998:	47b8      	blx	r7
 801199a:	3001      	adds	r0, #1
 801199c:	d1bf      	bne.n	801191e <_printf_float+0x31a>
 801199e:	e68c      	b.n	80116ba <_printf_float+0xb6>
 80119a0:	464b      	mov	r3, r9
 80119a2:	4631      	mov	r1, r6
 80119a4:	4628      	mov	r0, r5
 80119a6:	eb08 020a 	add.w	r2, r8, sl
 80119aa:	47b8      	blx	r7
 80119ac:	3001      	adds	r0, #1
 80119ae:	d1c2      	bne.n	8011936 <_printf_float+0x332>
 80119b0:	e683      	b.n	80116ba <_printf_float+0xb6>
 80119b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119b4:	2a01      	cmp	r2, #1
 80119b6:	dc01      	bgt.n	80119bc <_printf_float+0x3b8>
 80119b8:	07db      	lsls	r3, r3, #31
 80119ba:	d537      	bpl.n	8011a2c <_printf_float+0x428>
 80119bc:	2301      	movs	r3, #1
 80119be:	4642      	mov	r2, r8
 80119c0:	4631      	mov	r1, r6
 80119c2:	4628      	mov	r0, r5
 80119c4:	47b8      	blx	r7
 80119c6:	3001      	adds	r0, #1
 80119c8:	f43f ae77 	beq.w	80116ba <_printf_float+0xb6>
 80119cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119d0:	4631      	mov	r1, r6
 80119d2:	4628      	mov	r0, r5
 80119d4:	47b8      	blx	r7
 80119d6:	3001      	adds	r0, #1
 80119d8:	f43f ae6f 	beq.w	80116ba <_printf_float+0xb6>
 80119dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119e0:	2200      	movs	r2, #0
 80119e2:	2300      	movs	r3, #0
 80119e4:	f7ef f84c 	bl	8000a80 <__aeabi_dcmpeq>
 80119e8:	b9d8      	cbnz	r0, 8011a22 <_printf_float+0x41e>
 80119ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119ec:	f108 0201 	add.w	r2, r8, #1
 80119f0:	3b01      	subs	r3, #1
 80119f2:	4631      	mov	r1, r6
 80119f4:	4628      	mov	r0, r5
 80119f6:	47b8      	blx	r7
 80119f8:	3001      	adds	r0, #1
 80119fa:	d10e      	bne.n	8011a1a <_printf_float+0x416>
 80119fc:	e65d      	b.n	80116ba <_printf_float+0xb6>
 80119fe:	2301      	movs	r3, #1
 8011a00:	464a      	mov	r2, r9
 8011a02:	4631      	mov	r1, r6
 8011a04:	4628      	mov	r0, r5
 8011a06:	47b8      	blx	r7
 8011a08:	3001      	adds	r0, #1
 8011a0a:	f43f ae56 	beq.w	80116ba <_printf_float+0xb6>
 8011a0e:	f108 0801 	add.w	r8, r8, #1
 8011a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a14:	3b01      	subs	r3, #1
 8011a16:	4543      	cmp	r3, r8
 8011a18:	dcf1      	bgt.n	80119fe <_printf_float+0x3fa>
 8011a1a:	4653      	mov	r3, sl
 8011a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a20:	e6e0      	b.n	80117e4 <_printf_float+0x1e0>
 8011a22:	f04f 0800 	mov.w	r8, #0
 8011a26:	f104 091a 	add.w	r9, r4, #26
 8011a2a:	e7f2      	b.n	8011a12 <_printf_float+0x40e>
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	4642      	mov	r2, r8
 8011a30:	e7df      	b.n	80119f2 <_printf_float+0x3ee>
 8011a32:	2301      	movs	r3, #1
 8011a34:	464a      	mov	r2, r9
 8011a36:	4631      	mov	r1, r6
 8011a38:	4628      	mov	r0, r5
 8011a3a:	47b8      	blx	r7
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	f43f ae3c 	beq.w	80116ba <_printf_float+0xb6>
 8011a42:	f108 0801 	add.w	r8, r8, #1
 8011a46:	68e3      	ldr	r3, [r4, #12]
 8011a48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011a4a:	1a5b      	subs	r3, r3, r1
 8011a4c:	4543      	cmp	r3, r8
 8011a4e:	dcf0      	bgt.n	8011a32 <_printf_float+0x42e>
 8011a50:	e6fd      	b.n	801184e <_printf_float+0x24a>
 8011a52:	f04f 0800 	mov.w	r8, #0
 8011a56:	f104 0919 	add.w	r9, r4, #25
 8011a5a:	e7f4      	b.n	8011a46 <_printf_float+0x442>

08011a5c <_printf_common>:
 8011a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a60:	4616      	mov	r6, r2
 8011a62:	4699      	mov	r9, r3
 8011a64:	688a      	ldr	r2, [r1, #8]
 8011a66:	690b      	ldr	r3, [r1, #16]
 8011a68:	4607      	mov	r7, r0
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	bfb8      	it	lt
 8011a6e:	4613      	movlt	r3, r2
 8011a70:	6033      	str	r3, [r6, #0]
 8011a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a76:	460c      	mov	r4, r1
 8011a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a7c:	b10a      	cbz	r2, 8011a82 <_printf_common+0x26>
 8011a7e:	3301      	adds	r3, #1
 8011a80:	6033      	str	r3, [r6, #0]
 8011a82:	6823      	ldr	r3, [r4, #0]
 8011a84:	0699      	lsls	r1, r3, #26
 8011a86:	bf42      	ittt	mi
 8011a88:	6833      	ldrmi	r3, [r6, #0]
 8011a8a:	3302      	addmi	r3, #2
 8011a8c:	6033      	strmi	r3, [r6, #0]
 8011a8e:	6825      	ldr	r5, [r4, #0]
 8011a90:	f015 0506 	ands.w	r5, r5, #6
 8011a94:	d106      	bne.n	8011aa4 <_printf_common+0x48>
 8011a96:	f104 0a19 	add.w	sl, r4, #25
 8011a9a:	68e3      	ldr	r3, [r4, #12]
 8011a9c:	6832      	ldr	r2, [r6, #0]
 8011a9e:	1a9b      	subs	r3, r3, r2
 8011aa0:	42ab      	cmp	r3, r5
 8011aa2:	dc28      	bgt.n	8011af6 <_printf_common+0x9a>
 8011aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011aa8:	1e13      	subs	r3, r2, #0
 8011aaa:	6822      	ldr	r2, [r4, #0]
 8011aac:	bf18      	it	ne
 8011aae:	2301      	movne	r3, #1
 8011ab0:	0692      	lsls	r2, r2, #26
 8011ab2:	d42d      	bmi.n	8011b10 <_printf_common+0xb4>
 8011ab4:	4649      	mov	r1, r9
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011abc:	47c0      	blx	r8
 8011abe:	3001      	adds	r0, #1
 8011ac0:	d020      	beq.n	8011b04 <_printf_common+0xa8>
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	68e5      	ldr	r5, [r4, #12]
 8011ac6:	f003 0306 	and.w	r3, r3, #6
 8011aca:	2b04      	cmp	r3, #4
 8011acc:	bf18      	it	ne
 8011ace:	2500      	movne	r5, #0
 8011ad0:	6832      	ldr	r2, [r6, #0]
 8011ad2:	f04f 0600 	mov.w	r6, #0
 8011ad6:	68a3      	ldr	r3, [r4, #8]
 8011ad8:	bf08      	it	eq
 8011ada:	1aad      	subeq	r5, r5, r2
 8011adc:	6922      	ldr	r2, [r4, #16]
 8011ade:	bf08      	it	eq
 8011ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	bfc4      	itt	gt
 8011ae8:	1a9b      	subgt	r3, r3, r2
 8011aea:	18ed      	addgt	r5, r5, r3
 8011aec:	341a      	adds	r4, #26
 8011aee:	42b5      	cmp	r5, r6
 8011af0:	d11a      	bne.n	8011b28 <_printf_common+0xcc>
 8011af2:	2000      	movs	r0, #0
 8011af4:	e008      	b.n	8011b08 <_printf_common+0xac>
 8011af6:	2301      	movs	r3, #1
 8011af8:	4652      	mov	r2, sl
 8011afa:	4649      	mov	r1, r9
 8011afc:	4638      	mov	r0, r7
 8011afe:	47c0      	blx	r8
 8011b00:	3001      	adds	r0, #1
 8011b02:	d103      	bne.n	8011b0c <_printf_common+0xb0>
 8011b04:	f04f 30ff 	mov.w	r0, #4294967295
 8011b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	e7c4      	b.n	8011a9a <_printf_common+0x3e>
 8011b10:	2030      	movs	r0, #48	; 0x30
 8011b12:	18e1      	adds	r1, r4, r3
 8011b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b18:	1c5a      	adds	r2, r3, #1
 8011b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b1e:	4422      	add	r2, r4
 8011b20:	3302      	adds	r3, #2
 8011b22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b26:	e7c5      	b.n	8011ab4 <_printf_common+0x58>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	4622      	mov	r2, r4
 8011b2c:	4649      	mov	r1, r9
 8011b2e:	4638      	mov	r0, r7
 8011b30:	47c0      	blx	r8
 8011b32:	3001      	adds	r0, #1
 8011b34:	d0e6      	beq.n	8011b04 <_printf_common+0xa8>
 8011b36:	3601      	adds	r6, #1
 8011b38:	e7d9      	b.n	8011aee <_printf_common+0x92>
	...

08011b3c <_printf_i>:
 8011b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b40:	7e0f      	ldrb	r7, [r1, #24]
 8011b42:	4691      	mov	r9, r2
 8011b44:	2f78      	cmp	r7, #120	; 0x78
 8011b46:	4680      	mov	r8, r0
 8011b48:	460c      	mov	r4, r1
 8011b4a:	469a      	mov	sl, r3
 8011b4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b52:	d807      	bhi.n	8011b64 <_printf_i+0x28>
 8011b54:	2f62      	cmp	r7, #98	; 0x62
 8011b56:	d80a      	bhi.n	8011b6e <_printf_i+0x32>
 8011b58:	2f00      	cmp	r7, #0
 8011b5a:	f000 80d9 	beq.w	8011d10 <_printf_i+0x1d4>
 8011b5e:	2f58      	cmp	r7, #88	; 0x58
 8011b60:	f000 80a4 	beq.w	8011cac <_printf_i+0x170>
 8011b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b6c:	e03a      	b.n	8011be4 <_printf_i+0xa8>
 8011b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b72:	2b15      	cmp	r3, #21
 8011b74:	d8f6      	bhi.n	8011b64 <_printf_i+0x28>
 8011b76:	a101      	add	r1, pc, #4	; (adr r1, 8011b7c <_printf_i+0x40>)
 8011b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b7c:	08011bd5 	.word	0x08011bd5
 8011b80:	08011be9 	.word	0x08011be9
 8011b84:	08011b65 	.word	0x08011b65
 8011b88:	08011b65 	.word	0x08011b65
 8011b8c:	08011b65 	.word	0x08011b65
 8011b90:	08011b65 	.word	0x08011b65
 8011b94:	08011be9 	.word	0x08011be9
 8011b98:	08011b65 	.word	0x08011b65
 8011b9c:	08011b65 	.word	0x08011b65
 8011ba0:	08011b65 	.word	0x08011b65
 8011ba4:	08011b65 	.word	0x08011b65
 8011ba8:	08011cf7 	.word	0x08011cf7
 8011bac:	08011c19 	.word	0x08011c19
 8011bb0:	08011cd9 	.word	0x08011cd9
 8011bb4:	08011b65 	.word	0x08011b65
 8011bb8:	08011b65 	.word	0x08011b65
 8011bbc:	08011d19 	.word	0x08011d19
 8011bc0:	08011b65 	.word	0x08011b65
 8011bc4:	08011c19 	.word	0x08011c19
 8011bc8:	08011b65 	.word	0x08011b65
 8011bcc:	08011b65 	.word	0x08011b65
 8011bd0:	08011ce1 	.word	0x08011ce1
 8011bd4:	682b      	ldr	r3, [r5, #0]
 8011bd6:	1d1a      	adds	r2, r3, #4
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	602a      	str	r2, [r5, #0]
 8011bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011be4:	2301      	movs	r3, #1
 8011be6:	e0a4      	b.n	8011d32 <_printf_i+0x1f6>
 8011be8:	6820      	ldr	r0, [r4, #0]
 8011bea:	6829      	ldr	r1, [r5, #0]
 8011bec:	0606      	lsls	r6, r0, #24
 8011bee:	f101 0304 	add.w	r3, r1, #4
 8011bf2:	d50a      	bpl.n	8011c0a <_printf_i+0xce>
 8011bf4:	680e      	ldr	r6, [r1, #0]
 8011bf6:	602b      	str	r3, [r5, #0]
 8011bf8:	2e00      	cmp	r6, #0
 8011bfa:	da03      	bge.n	8011c04 <_printf_i+0xc8>
 8011bfc:	232d      	movs	r3, #45	; 0x2d
 8011bfe:	4276      	negs	r6, r6
 8011c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c04:	230a      	movs	r3, #10
 8011c06:	485e      	ldr	r0, [pc, #376]	; (8011d80 <_printf_i+0x244>)
 8011c08:	e019      	b.n	8011c3e <_printf_i+0x102>
 8011c0a:	680e      	ldr	r6, [r1, #0]
 8011c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c10:	602b      	str	r3, [r5, #0]
 8011c12:	bf18      	it	ne
 8011c14:	b236      	sxthne	r6, r6
 8011c16:	e7ef      	b.n	8011bf8 <_printf_i+0xbc>
 8011c18:	682b      	ldr	r3, [r5, #0]
 8011c1a:	6820      	ldr	r0, [r4, #0]
 8011c1c:	1d19      	adds	r1, r3, #4
 8011c1e:	6029      	str	r1, [r5, #0]
 8011c20:	0601      	lsls	r1, r0, #24
 8011c22:	d501      	bpl.n	8011c28 <_printf_i+0xec>
 8011c24:	681e      	ldr	r6, [r3, #0]
 8011c26:	e002      	b.n	8011c2e <_printf_i+0xf2>
 8011c28:	0646      	lsls	r6, r0, #25
 8011c2a:	d5fb      	bpl.n	8011c24 <_printf_i+0xe8>
 8011c2c:	881e      	ldrh	r6, [r3, #0]
 8011c2e:	2f6f      	cmp	r7, #111	; 0x6f
 8011c30:	bf0c      	ite	eq
 8011c32:	2308      	moveq	r3, #8
 8011c34:	230a      	movne	r3, #10
 8011c36:	4852      	ldr	r0, [pc, #328]	; (8011d80 <_printf_i+0x244>)
 8011c38:	2100      	movs	r1, #0
 8011c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c3e:	6865      	ldr	r5, [r4, #4]
 8011c40:	2d00      	cmp	r5, #0
 8011c42:	bfa8      	it	ge
 8011c44:	6821      	ldrge	r1, [r4, #0]
 8011c46:	60a5      	str	r5, [r4, #8]
 8011c48:	bfa4      	itt	ge
 8011c4a:	f021 0104 	bicge.w	r1, r1, #4
 8011c4e:	6021      	strge	r1, [r4, #0]
 8011c50:	b90e      	cbnz	r6, 8011c56 <_printf_i+0x11a>
 8011c52:	2d00      	cmp	r5, #0
 8011c54:	d04d      	beq.n	8011cf2 <_printf_i+0x1b6>
 8011c56:	4615      	mov	r5, r2
 8011c58:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c5c:	fb03 6711 	mls	r7, r3, r1, r6
 8011c60:	5dc7      	ldrb	r7, [r0, r7]
 8011c62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011c66:	4637      	mov	r7, r6
 8011c68:	42bb      	cmp	r3, r7
 8011c6a:	460e      	mov	r6, r1
 8011c6c:	d9f4      	bls.n	8011c58 <_printf_i+0x11c>
 8011c6e:	2b08      	cmp	r3, #8
 8011c70:	d10b      	bne.n	8011c8a <_printf_i+0x14e>
 8011c72:	6823      	ldr	r3, [r4, #0]
 8011c74:	07de      	lsls	r6, r3, #31
 8011c76:	d508      	bpl.n	8011c8a <_printf_i+0x14e>
 8011c78:	6923      	ldr	r3, [r4, #16]
 8011c7a:	6861      	ldr	r1, [r4, #4]
 8011c7c:	4299      	cmp	r1, r3
 8011c7e:	bfde      	ittt	le
 8011c80:	2330      	movle	r3, #48	; 0x30
 8011c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011c8a:	1b52      	subs	r2, r2, r5
 8011c8c:	6122      	str	r2, [r4, #16]
 8011c8e:	464b      	mov	r3, r9
 8011c90:	4621      	mov	r1, r4
 8011c92:	4640      	mov	r0, r8
 8011c94:	f8cd a000 	str.w	sl, [sp]
 8011c98:	aa03      	add	r2, sp, #12
 8011c9a:	f7ff fedf 	bl	8011a5c <_printf_common>
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	d14c      	bne.n	8011d3c <_printf_i+0x200>
 8011ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca6:	b004      	add	sp, #16
 8011ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cac:	4834      	ldr	r0, [pc, #208]	; (8011d80 <_printf_i+0x244>)
 8011cae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011cb2:	6829      	ldr	r1, [r5, #0]
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8011cba:	6029      	str	r1, [r5, #0]
 8011cbc:	061d      	lsls	r5, r3, #24
 8011cbe:	d514      	bpl.n	8011cea <_printf_i+0x1ae>
 8011cc0:	07df      	lsls	r7, r3, #31
 8011cc2:	bf44      	itt	mi
 8011cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8011cc8:	6023      	strmi	r3, [r4, #0]
 8011cca:	b91e      	cbnz	r6, 8011cd4 <_printf_i+0x198>
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	f023 0320 	bic.w	r3, r3, #32
 8011cd2:	6023      	str	r3, [r4, #0]
 8011cd4:	2310      	movs	r3, #16
 8011cd6:	e7af      	b.n	8011c38 <_printf_i+0xfc>
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	f043 0320 	orr.w	r3, r3, #32
 8011cde:	6023      	str	r3, [r4, #0]
 8011ce0:	2378      	movs	r3, #120	; 0x78
 8011ce2:	4828      	ldr	r0, [pc, #160]	; (8011d84 <_printf_i+0x248>)
 8011ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ce8:	e7e3      	b.n	8011cb2 <_printf_i+0x176>
 8011cea:	0659      	lsls	r1, r3, #25
 8011cec:	bf48      	it	mi
 8011cee:	b2b6      	uxthmi	r6, r6
 8011cf0:	e7e6      	b.n	8011cc0 <_printf_i+0x184>
 8011cf2:	4615      	mov	r5, r2
 8011cf4:	e7bb      	b.n	8011c6e <_printf_i+0x132>
 8011cf6:	682b      	ldr	r3, [r5, #0]
 8011cf8:	6826      	ldr	r6, [r4, #0]
 8011cfa:	1d18      	adds	r0, r3, #4
 8011cfc:	6961      	ldr	r1, [r4, #20]
 8011cfe:	6028      	str	r0, [r5, #0]
 8011d00:	0635      	lsls	r5, r6, #24
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	d501      	bpl.n	8011d0a <_printf_i+0x1ce>
 8011d06:	6019      	str	r1, [r3, #0]
 8011d08:	e002      	b.n	8011d10 <_printf_i+0x1d4>
 8011d0a:	0670      	lsls	r0, r6, #25
 8011d0c:	d5fb      	bpl.n	8011d06 <_printf_i+0x1ca>
 8011d0e:	8019      	strh	r1, [r3, #0]
 8011d10:	2300      	movs	r3, #0
 8011d12:	4615      	mov	r5, r2
 8011d14:	6123      	str	r3, [r4, #16]
 8011d16:	e7ba      	b.n	8011c8e <_printf_i+0x152>
 8011d18:	682b      	ldr	r3, [r5, #0]
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	1d1a      	adds	r2, r3, #4
 8011d1e:	602a      	str	r2, [r5, #0]
 8011d20:	681d      	ldr	r5, [r3, #0]
 8011d22:	6862      	ldr	r2, [r4, #4]
 8011d24:	4628      	mov	r0, r5
 8011d26:	f000 fef9 	bl	8012b1c <memchr>
 8011d2a:	b108      	cbz	r0, 8011d30 <_printf_i+0x1f4>
 8011d2c:	1b40      	subs	r0, r0, r5
 8011d2e:	6060      	str	r0, [r4, #4]
 8011d30:	6863      	ldr	r3, [r4, #4]
 8011d32:	6123      	str	r3, [r4, #16]
 8011d34:	2300      	movs	r3, #0
 8011d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d3a:	e7a8      	b.n	8011c8e <_printf_i+0x152>
 8011d3c:	462a      	mov	r2, r5
 8011d3e:	4649      	mov	r1, r9
 8011d40:	4640      	mov	r0, r8
 8011d42:	6923      	ldr	r3, [r4, #16]
 8011d44:	47d0      	blx	sl
 8011d46:	3001      	adds	r0, #1
 8011d48:	d0ab      	beq.n	8011ca2 <_printf_i+0x166>
 8011d4a:	6823      	ldr	r3, [r4, #0]
 8011d4c:	079b      	lsls	r3, r3, #30
 8011d4e:	d413      	bmi.n	8011d78 <_printf_i+0x23c>
 8011d50:	68e0      	ldr	r0, [r4, #12]
 8011d52:	9b03      	ldr	r3, [sp, #12]
 8011d54:	4298      	cmp	r0, r3
 8011d56:	bfb8      	it	lt
 8011d58:	4618      	movlt	r0, r3
 8011d5a:	e7a4      	b.n	8011ca6 <_printf_i+0x16a>
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	4632      	mov	r2, r6
 8011d60:	4649      	mov	r1, r9
 8011d62:	4640      	mov	r0, r8
 8011d64:	47d0      	blx	sl
 8011d66:	3001      	adds	r0, #1
 8011d68:	d09b      	beq.n	8011ca2 <_printf_i+0x166>
 8011d6a:	3501      	adds	r5, #1
 8011d6c:	68e3      	ldr	r3, [r4, #12]
 8011d6e:	9903      	ldr	r1, [sp, #12]
 8011d70:	1a5b      	subs	r3, r3, r1
 8011d72:	42ab      	cmp	r3, r5
 8011d74:	dcf2      	bgt.n	8011d5c <_printf_i+0x220>
 8011d76:	e7eb      	b.n	8011d50 <_printf_i+0x214>
 8011d78:	2500      	movs	r5, #0
 8011d7a:	f104 0619 	add.w	r6, r4, #25
 8011d7e:	e7f5      	b.n	8011d6c <_printf_i+0x230>
 8011d80:	0802d772 	.word	0x0802d772
 8011d84:	0802d783 	.word	0x0802d783

08011d88 <_sbrk_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	4d05      	ldr	r5, [pc, #20]	; (8011da4 <_sbrk_r+0x1c>)
 8011d8e:	4604      	mov	r4, r0
 8011d90:	4608      	mov	r0, r1
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	f7f1 fa5e 	bl	8003254 <_sbrk>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	d102      	bne.n	8011da2 <_sbrk_r+0x1a>
 8011d9c:	682b      	ldr	r3, [r5, #0]
 8011d9e:	b103      	cbz	r3, 8011da2 <_sbrk_r+0x1a>
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	20001644 	.word	0x20001644

08011da8 <_vsniprintf_r>:
 8011da8:	b530      	push	{r4, r5, lr}
 8011daa:	4614      	mov	r4, r2
 8011dac:	2c00      	cmp	r4, #0
 8011dae:	4605      	mov	r5, r0
 8011db0:	461a      	mov	r2, r3
 8011db2:	b09b      	sub	sp, #108	; 0x6c
 8011db4:	da05      	bge.n	8011dc2 <_vsniprintf_r+0x1a>
 8011db6:	238b      	movs	r3, #139	; 0x8b
 8011db8:	6003      	str	r3, [r0, #0]
 8011dba:	f04f 30ff 	mov.w	r0, #4294967295
 8011dbe:	b01b      	add	sp, #108	; 0x6c
 8011dc0:	bd30      	pop	{r4, r5, pc}
 8011dc2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011dc6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011dca:	bf0c      	ite	eq
 8011dcc:	4623      	moveq	r3, r4
 8011dce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011dd2:	9302      	str	r3, [sp, #8]
 8011dd4:	9305      	str	r3, [sp, #20]
 8011dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011dda:	9100      	str	r1, [sp, #0]
 8011ddc:	9104      	str	r1, [sp, #16]
 8011dde:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011de2:	4669      	mov	r1, sp
 8011de4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011de6:	f001 fab3 	bl	8013350 <_svfiprintf_r>
 8011dea:	1c43      	adds	r3, r0, #1
 8011dec:	bfbc      	itt	lt
 8011dee:	238b      	movlt	r3, #139	; 0x8b
 8011df0:	602b      	strlt	r3, [r5, #0]
 8011df2:	2c00      	cmp	r4, #0
 8011df4:	d0e3      	beq.n	8011dbe <_vsniprintf_r+0x16>
 8011df6:	2200      	movs	r2, #0
 8011df8:	9b00      	ldr	r3, [sp, #0]
 8011dfa:	701a      	strb	r2, [r3, #0]
 8011dfc:	e7df      	b.n	8011dbe <_vsniprintf_r+0x16>
	...

08011e00 <vsniprintf>:
 8011e00:	b507      	push	{r0, r1, r2, lr}
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	4613      	mov	r3, r2
 8011e06:	460a      	mov	r2, r1
 8011e08:	4601      	mov	r1, r0
 8011e0a:	4803      	ldr	r0, [pc, #12]	; (8011e18 <vsniprintf+0x18>)
 8011e0c:	6800      	ldr	r0, [r0, #0]
 8011e0e:	f7ff ffcb 	bl	8011da8 <_vsniprintf_r>
 8011e12:	b003      	add	sp, #12
 8011e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e18:	20000174 	.word	0x20000174

08011e1c <quorem>:
 8011e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e20:	6903      	ldr	r3, [r0, #16]
 8011e22:	690c      	ldr	r4, [r1, #16]
 8011e24:	4607      	mov	r7, r0
 8011e26:	42a3      	cmp	r3, r4
 8011e28:	f2c0 8082 	blt.w	8011f30 <quorem+0x114>
 8011e2c:	3c01      	subs	r4, #1
 8011e2e:	f100 0514 	add.w	r5, r0, #20
 8011e32:	f101 0814 	add.w	r8, r1, #20
 8011e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e3a:	9301      	str	r3, [sp, #4]
 8011e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e44:	3301      	adds	r3, #1
 8011e46:	429a      	cmp	r2, r3
 8011e48:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e54:	d331      	bcc.n	8011eba <quorem+0x9e>
 8011e56:	f04f 0e00 	mov.w	lr, #0
 8011e5a:	4640      	mov	r0, r8
 8011e5c:	46ac      	mov	ip, r5
 8011e5e:	46f2      	mov	sl, lr
 8011e60:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e64:	b293      	uxth	r3, r2
 8011e66:	fb06 e303 	mla	r3, r6, r3, lr
 8011e6a:	0c12      	lsrs	r2, r2, #16
 8011e6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	fb06 e202 	mla	r2, r6, r2, lr
 8011e76:	ebaa 0303 	sub.w	r3, sl, r3
 8011e7a:	f8dc a000 	ldr.w	sl, [ip]
 8011e7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e82:	fa1f fa8a 	uxth.w	sl, sl
 8011e86:	4453      	add	r3, sl
 8011e88:	f8dc a000 	ldr.w	sl, [ip]
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011e92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e9c:	4581      	cmp	r9, r0
 8011e9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ea2:	f84c 3b04 	str.w	r3, [ip], #4
 8011ea6:	d2db      	bcs.n	8011e60 <quorem+0x44>
 8011ea8:	f855 300b 	ldr.w	r3, [r5, fp]
 8011eac:	b92b      	cbnz	r3, 8011eba <quorem+0x9e>
 8011eae:	9b01      	ldr	r3, [sp, #4]
 8011eb0:	3b04      	subs	r3, #4
 8011eb2:	429d      	cmp	r5, r3
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	d32f      	bcc.n	8011f18 <quorem+0xfc>
 8011eb8:	613c      	str	r4, [r7, #16]
 8011eba:	4638      	mov	r0, r7
 8011ebc:	f001 f8d4 	bl	8013068 <__mcmp>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	db25      	blt.n	8011f10 <quorem+0xf4>
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	f04f 0c00 	mov.w	ip, #0
 8011eca:	3601      	adds	r6, #1
 8011ecc:	f858 1b04 	ldr.w	r1, [r8], #4
 8011ed0:	f8d0 e000 	ldr.w	lr, [r0]
 8011ed4:	b28b      	uxth	r3, r1
 8011ed6:	ebac 0303 	sub.w	r3, ip, r3
 8011eda:	fa1f f28e 	uxth.w	r2, lr
 8011ede:	4413      	add	r3, r2
 8011ee0:	0c0a      	lsrs	r2, r1, #16
 8011ee2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ef0:	45c1      	cmp	r9, r8
 8011ef2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ef6:	f840 3b04 	str.w	r3, [r0], #4
 8011efa:	d2e7      	bcs.n	8011ecc <quorem+0xb0>
 8011efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f04:	b922      	cbnz	r2, 8011f10 <quorem+0xf4>
 8011f06:	3b04      	subs	r3, #4
 8011f08:	429d      	cmp	r5, r3
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	d30a      	bcc.n	8011f24 <quorem+0x108>
 8011f0e:	613c      	str	r4, [r7, #16]
 8011f10:	4630      	mov	r0, r6
 8011f12:	b003      	add	sp, #12
 8011f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f18:	6812      	ldr	r2, [r2, #0]
 8011f1a:	3b04      	subs	r3, #4
 8011f1c:	2a00      	cmp	r2, #0
 8011f1e:	d1cb      	bne.n	8011eb8 <quorem+0x9c>
 8011f20:	3c01      	subs	r4, #1
 8011f22:	e7c6      	b.n	8011eb2 <quorem+0x96>
 8011f24:	6812      	ldr	r2, [r2, #0]
 8011f26:	3b04      	subs	r3, #4
 8011f28:	2a00      	cmp	r2, #0
 8011f2a:	d1f0      	bne.n	8011f0e <quorem+0xf2>
 8011f2c:	3c01      	subs	r4, #1
 8011f2e:	e7eb      	b.n	8011f08 <quorem+0xec>
 8011f30:	2000      	movs	r0, #0
 8011f32:	e7ee      	b.n	8011f12 <quorem+0xf6>
 8011f34:	0000      	movs	r0, r0
	...

08011f38 <_dtoa_r>:
 8011f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	4616      	mov	r6, r2
 8011f3e:	461f      	mov	r7, r3
 8011f40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011f42:	b099      	sub	sp, #100	; 0x64
 8011f44:	4605      	mov	r5, r0
 8011f46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011f4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011f4e:	b974      	cbnz	r4, 8011f6e <_dtoa_r+0x36>
 8011f50:	2010      	movs	r0, #16
 8011f52:	f7ff f9c5 	bl	80112e0 <malloc>
 8011f56:	4602      	mov	r2, r0
 8011f58:	6268      	str	r0, [r5, #36]	; 0x24
 8011f5a:	b920      	cbnz	r0, 8011f66 <_dtoa_r+0x2e>
 8011f5c:	21ea      	movs	r1, #234	; 0xea
 8011f5e:	4ba8      	ldr	r3, [pc, #672]	; (8012200 <_dtoa_r+0x2c8>)
 8011f60:	48a8      	ldr	r0, [pc, #672]	; (8012204 <_dtoa_r+0x2cc>)
 8011f62:	f001 faf5 	bl	8013550 <__assert_func>
 8011f66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f6a:	6004      	str	r4, [r0, #0]
 8011f6c:	60c4      	str	r4, [r0, #12]
 8011f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f70:	6819      	ldr	r1, [r3, #0]
 8011f72:	b151      	cbz	r1, 8011f8a <_dtoa_r+0x52>
 8011f74:	685a      	ldr	r2, [r3, #4]
 8011f76:	2301      	movs	r3, #1
 8011f78:	4093      	lsls	r3, r2
 8011f7a:	604a      	str	r2, [r1, #4]
 8011f7c:	608b      	str	r3, [r1, #8]
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f000 fe34 	bl	8012bec <_Bfree>
 8011f84:	2200      	movs	r2, #0
 8011f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f88:	601a      	str	r2, [r3, #0]
 8011f8a:	1e3b      	subs	r3, r7, #0
 8011f8c:	bfaf      	iteee	ge
 8011f8e:	2300      	movge	r3, #0
 8011f90:	2201      	movlt	r2, #1
 8011f92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f96:	9305      	strlt	r3, [sp, #20]
 8011f98:	bfa8      	it	ge
 8011f9a:	f8c8 3000 	strge.w	r3, [r8]
 8011f9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011fa2:	4b99      	ldr	r3, [pc, #612]	; (8012208 <_dtoa_r+0x2d0>)
 8011fa4:	bfb8      	it	lt
 8011fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8011faa:	ea33 0309 	bics.w	r3, r3, r9
 8011fae:	d119      	bne.n	8011fe4 <_dtoa_r+0xac>
 8011fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8011fb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011fb6:	6013      	str	r3, [r2, #0]
 8011fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011fbc:	4333      	orrs	r3, r6
 8011fbe:	f000 857f 	beq.w	8012ac0 <_dtoa_r+0xb88>
 8011fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011fc4:	b953      	cbnz	r3, 8011fdc <_dtoa_r+0xa4>
 8011fc6:	4b91      	ldr	r3, [pc, #580]	; (801220c <_dtoa_r+0x2d4>)
 8011fc8:	e022      	b.n	8012010 <_dtoa_r+0xd8>
 8011fca:	4b91      	ldr	r3, [pc, #580]	; (8012210 <_dtoa_r+0x2d8>)
 8011fcc:	9303      	str	r3, [sp, #12]
 8011fce:	3308      	adds	r3, #8
 8011fd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011fd2:	6013      	str	r3, [r2, #0]
 8011fd4:	9803      	ldr	r0, [sp, #12]
 8011fd6:	b019      	add	sp, #100	; 0x64
 8011fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fdc:	4b8b      	ldr	r3, [pc, #556]	; (801220c <_dtoa_r+0x2d4>)
 8011fde:	9303      	str	r3, [sp, #12]
 8011fe0:	3303      	adds	r3, #3
 8011fe2:	e7f5      	b.n	8011fd0 <_dtoa_r+0x98>
 8011fe4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011fe8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8011fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	f7ee fd44 	bl	8000a80 <__aeabi_dcmpeq>
 8011ff8:	4680      	mov	r8, r0
 8011ffa:	b158      	cbz	r0, 8012014 <_dtoa_r+0xdc>
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012000:	6013      	str	r3, [r2, #0]
 8012002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012004:	2b00      	cmp	r3, #0
 8012006:	f000 8558 	beq.w	8012aba <_dtoa_r+0xb82>
 801200a:	4882      	ldr	r0, [pc, #520]	; (8012214 <_dtoa_r+0x2dc>)
 801200c:	6018      	str	r0, [r3, #0]
 801200e:	1e43      	subs	r3, r0, #1
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	e7df      	b.n	8011fd4 <_dtoa_r+0x9c>
 8012014:	ab16      	add	r3, sp, #88	; 0x58
 8012016:	9301      	str	r3, [sp, #4]
 8012018:	ab17      	add	r3, sp, #92	; 0x5c
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	4628      	mov	r0, r5
 801201e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012022:	f001 f8c9 	bl	80131b8 <__d2b>
 8012026:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801202a:	4683      	mov	fp, r0
 801202c:	2c00      	cmp	r4, #0
 801202e:	d07f      	beq.n	8012130 <_dtoa_r+0x1f8>
 8012030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012036:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801203a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801203e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012042:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012046:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801204a:	2200      	movs	r2, #0
 801204c:	4b72      	ldr	r3, [pc, #456]	; (8012218 <_dtoa_r+0x2e0>)
 801204e:	f7ee f8f7 	bl	8000240 <__aeabi_dsub>
 8012052:	a365      	add	r3, pc, #404	; (adr r3, 80121e8 <_dtoa_r+0x2b0>)
 8012054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012058:	f7ee faaa 	bl	80005b0 <__aeabi_dmul>
 801205c:	a364      	add	r3, pc, #400	; (adr r3, 80121f0 <_dtoa_r+0x2b8>)
 801205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012062:	f7ee f8ef 	bl	8000244 <__adddf3>
 8012066:	4606      	mov	r6, r0
 8012068:	4620      	mov	r0, r4
 801206a:	460f      	mov	r7, r1
 801206c:	f7ee fa36 	bl	80004dc <__aeabi_i2d>
 8012070:	a361      	add	r3, pc, #388	; (adr r3, 80121f8 <_dtoa_r+0x2c0>)
 8012072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012076:	f7ee fa9b 	bl	80005b0 <__aeabi_dmul>
 801207a:	4602      	mov	r2, r0
 801207c:	460b      	mov	r3, r1
 801207e:	4630      	mov	r0, r6
 8012080:	4639      	mov	r1, r7
 8012082:	f7ee f8df 	bl	8000244 <__adddf3>
 8012086:	4606      	mov	r6, r0
 8012088:	460f      	mov	r7, r1
 801208a:	f7ee fd41 	bl	8000b10 <__aeabi_d2iz>
 801208e:	2200      	movs	r2, #0
 8012090:	4682      	mov	sl, r0
 8012092:	2300      	movs	r3, #0
 8012094:	4630      	mov	r0, r6
 8012096:	4639      	mov	r1, r7
 8012098:	f7ee fcfc 	bl	8000a94 <__aeabi_dcmplt>
 801209c:	b148      	cbz	r0, 80120b2 <_dtoa_r+0x17a>
 801209e:	4650      	mov	r0, sl
 80120a0:	f7ee fa1c 	bl	80004dc <__aeabi_i2d>
 80120a4:	4632      	mov	r2, r6
 80120a6:	463b      	mov	r3, r7
 80120a8:	f7ee fcea 	bl	8000a80 <__aeabi_dcmpeq>
 80120ac:	b908      	cbnz	r0, 80120b2 <_dtoa_r+0x17a>
 80120ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120b2:	f1ba 0f16 	cmp.w	sl, #22
 80120b6:	d858      	bhi.n	801216a <_dtoa_r+0x232>
 80120b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80120bc:	4b57      	ldr	r3, [pc, #348]	; (801221c <_dtoa_r+0x2e4>)
 80120be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c6:	f7ee fce5 	bl	8000a94 <__aeabi_dcmplt>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	d04f      	beq.n	801216e <_dtoa_r+0x236>
 80120ce:	2300      	movs	r3, #0
 80120d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80120d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80120d8:	1b1c      	subs	r4, r3, r4
 80120da:	1e63      	subs	r3, r4, #1
 80120dc:	9309      	str	r3, [sp, #36]	; 0x24
 80120de:	bf49      	itett	mi
 80120e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80120e4:	2300      	movpl	r3, #0
 80120e6:	9306      	strmi	r3, [sp, #24]
 80120e8:	2300      	movmi	r3, #0
 80120ea:	bf54      	ite	pl
 80120ec:	9306      	strpl	r3, [sp, #24]
 80120ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80120f0:	f1ba 0f00 	cmp.w	sl, #0
 80120f4:	db3d      	blt.n	8012172 <_dtoa_r+0x23a>
 80120f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80120fc:	4453      	add	r3, sl
 80120fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012100:	2300      	movs	r3, #0
 8012102:	930a      	str	r3, [sp, #40]	; 0x28
 8012104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012106:	2b09      	cmp	r3, #9
 8012108:	f200 808c 	bhi.w	8012224 <_dtoa_r+0x2ec>
 801210c:	2b05      	cmp	r3, #5
 801210e:	bfc4      	itt	gt
 8012110:	3b04      	subgt	r3, #4
 8012112:	9322      	strgt	r3, [sp, #136]	; 0x88
 8012114:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012116:	bfc8      	it	gt
 8012118:	2400      	movgt	r4, #0
 801211a:	f1a3 0302 	sub.w	r3, r3, #2
 801211e:	bfd8      	it	le
 8012120:	2401      	movle	r4, #1
 8012122:	2b03      	cmp	r3, #3
 8012124:	f200 808a 	bhi.w	801223c <_dtoa_r+0x304>
 8012128:	e8df f003 	tbb	[pc, r3]
 801212c:	5b4d4f2d 	.word	0x5b4d4f2d
 8012130:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8012134:	441c      	add	r4, r3
 8012136:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801213a:	2b20      	cmp	r3, #32
 801213c:	bfc3      	ittte	gt
 801213e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012142:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8012146:	fa09 f303 	lslgt.w	r3, r9, r3
 801214a:	f1c3 0320 	rsble	r3, r3, #32
 801214e:	bfc6      	itte	gt
 8012150:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012154:	4318      	orrgt	r0, r3
 8012156:	fa06 f003 	lslle.w	r0, r6, r3
 801215a:	f7ee f9af 	bl	80004bc <__aeabi_ui2d>
 801215e:	2301      	movs	r3, #1
 8012160:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012164:	3c01      	subs	r4, #1
 8012166:	9313      	str	r3, [sp, #76]	; 0x4c
 8012168:	e76f      	b.n	801204a <_dtoa_r+0x112>
 801216a:	2301      	movs	r3, #1
 801216c:	e7b2      	b.n	80120d4 <_dtoa_r+0x19c>
 801216e:	900f      	str	r0, [sp, #60]	; 0x3c
 8012170:	e7b1      	b.n	80120d6 <_dtoa_r+0x19e>
 8012172:	9b06      	ldr	r3, [sp, #24]
 8012174:	eba3 030a 	sub.w	r3, r3, sl
 8012178:	9306      	str	r3, [sp, #24]
 801217a:	f1ca 0300 	rsb	r3, sl, #0
 801217e:	930a      	str	r3, [sp, #40]	; 0x28
 8012180:	2300      	movs	r3, #0
 8012182:	930e      	str	r3, [sp, #56]	; 0x38
 8012184:	e7be      	b.n	8012104 <_dtoa_r+0x1cc>
 8012186:	2300      	movs	r3, #0
 8012188:	930b      	str	r3, [sp, #44]	; 0x2c
 801218a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801218c:	2b00      	cmp	r3, #0
 801218e:	dc58      	bgt.n	8012242 <_dtoa_r+0x30a>
 8012190:	f04f 0901 	mov.w	r9, #1
 8012194:	464b      	mov	r3, r9
 8012196:	f8cd 9020 	str.w	r9, [sp, #32]
 801219a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 801219e:	2200      	movs	r2, #0
 80121a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80121a2:	6042      	str	r2, [r0, #4]
 80121a4:	2204      	movs	r2, #4
 80121a6:	f102 0614 	add.w	r6, r2, #20
 80121aa:	429e      	cmp	r6, r3
 80121ac:	6841      	ldr	r1, [r0, #4]
 80121ae:	d94e      	bls.n	801224e <_dtoa_r+0x316>
 80121b0:	4628      	mov	r0, r5
 80121b2:	f000 fcdb 	bl	8012b6c <_Balloc>
 80121b6:	9003      	str	r0, [sp, #12]
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d14c      	bne.n	8012256 <_dtoa_r+0x31e>
 80121bc:	4602      	mov	r2, r0
 80121be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80121c2:	4b17      	ldr	r3, [pc, #92]	; (8012220 <_dtoa_r+0x2e8>)
 80121c4:	e6cc      	b.n	8011f60 <_dtoa_r+0x28>
 80121c6:	2301      	movs	r3, #1
 80121c8:	e7de      	b.n	8012188 <_dtoa_r+0x250>
 80121ca:	2300      	movs	r3, #0
 80121cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80121ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80121d0:	eb0a 0903 	add.w	r9, sl, r3
 80121d4:	f109 0301 	add.w	r3, r9, #1
 80121d8:	2b01      	cmp	r3, #1
 80121da:	9308      	str	r3, [sp, #32]
 80121dc:	bfb8      	it	lt
 80121de:	2301      	movlt	r3, #1
 80121e0:	e7dd      	b.n	801219e <_dtoa_r+0x266>
 80121e2:	2301      	movs	r3, #1
 80121e4:	e7f2      	b.n	80121cc <_dtoa_r+0x294>
 80121e6:	bf00      	nop
 80121e8:	636f4361 	.word	0x636f4361
 80121ec:	3fd287a7 	.word	0x3fd287a7
 80121f0:	8b60c8b3 	.word	0x8b60c8b3
 80121f4:	3fc68a28 	.word	0x3fc68a28
 80121f8:	509f79fb 	.word	0x509f79fb
 80121fc:	3fd34413 	.word	0x3fd34413
 8012200:	0802d7a1 	.word	0x0802d7a1
 8012204:	0802d7b8 	.word	0x0802d7b8
 8012208:	7ff00000 	.word	0x7ff00000
 801220c:	0802d79d 	.word	0x0802d79d
 8012210:	0802d794 	.word	0x0802d794
 8012214:	0802d771 	.word	0x0802d771
 8012218:	3ff80000 	.word	0x3ff80000
 801221c:	0802d8a8 	.word	0x0802d8a8
 8012220:	0802d813 	.word	0x0802d813
 8012224:	2401      	movs	r4, #1
 8012226:	2300      	movs	r3, #0
 8012228:	940b      	str	r4, [sp, #44]	; 0x2c
 801222a:	9322      	str	r3, [sp, #136]	; 0x88
 801222c:	f04f 39ff 	mov.w	r9, #4294967295
 8012230:	2200      	movs	r2, #0
 8012232:	2312      	movs	r3, #18
 8012234:	f8cd 9020 	str.w	r9, [sp, #32]
 8012238:	9223      	str	r2, [sp, #140]	; 0x8c
 801223a:	e7b0      	b.n	801219e <_dtoa_r+0x266>
 801223c:	2301      	movs	r3, #1
 801223e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012240:	e7f4      	b.n	801222c <_dtoa_r+0x2f4>
 8012242:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8012246:	464b      	mov	r3, r9
 8012248:	f8cd 9020 	str.w	r9, [sp, #32]
 801224c:	e7a7      	b.n	801219e <_dtoa_r+0x266>
 801224e:	3101      	adds	r1, #1
 8012250:	6041      	str	r1, [r0, #4]
 8012252:	0052      	lsls	r2, r2, #1
 8012254:	e7a7      	b.n	80121a6 <_dtoa_r+0x26e>
 8012256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012258:	9a03      	ldr	r2, [sp, #12]
 801225a:	601a      	str	r2, [r3, #0]
 801225c:	9b08      	ldr	r3, [sp, #32]
 801225e:	2b0e      	cmp	r3, #14
 8012260:	f200 80a8 	bhi.w	80123b4 <_dtoa_r+0x47c>
 8012264:	2c00      	cmp	r4, #0
 8012266:	f000 80a5 	beq.w	80123b4 <_dtoa_r+0x47c>
 801226a:	f1ba 0f00 	cmp.w	sl, #0
 801226e:	dd34      	ble.n	80122da <_dtoa_r+0x3a2>
 8012270:	4a9a      	ldr	r2, [pc, #616]	; (80124dc <_dtoa_r+0x5a4>)
 8012272:	f00a 030f 	and.w	r3, sl, #15
 8012276:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801227a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801227e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012282:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012286:	ea4f 142a 	mov.w	r4, sl, asr #4
 801228a:	d016      	beq.n	80122ba <_dtoa_r+0x382>
 801228c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012290:	4b93      	ldr	r3, [pc, #588]	; (80124e0 <_dtoa_r+0x5a8>)
 8012292:	2703      	movs	r7, #3
 8012294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012298:	f7ee fab4 	bl	8000804 <__aeabi_ddiv>
 801229c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122a0:	f004 040f 	and.w	r4, r4, #15
 80122a4:	4e8e      	ldr	r6, [pc, #568]	; (80124e0 <_dtoa_r+0x5a8>)
 80122a6:	b954      	cbnz	r4, 80122be <_dtoa_r+0x386>
 80122a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80122ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122b0:	f7ee faa8 	bl	8000804 <__aeabi_ddiv>
 80122b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122b8:	e029      	b.n	801230e <_dtoa_r+0x3d6>
 80122ba:	2702      	movs	r7, #2
 80122bc:	e7f2      	b.n	80122a4 <_dtoa_r+0x36c>
 80122be:	07e1      	lsls	r1, r4, #31
 80122c0:	d508      	bpl.n	80122d4 <_dtoa_r+0x39c>
 80122c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80122c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80122ca:	f7ee f971 	bl	80005b0 <__aeabi_dmul>
 80122ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80122d2:	3701      	adds	r7, #1
 80122d4:	1064      	asrs	r4, r4, #1
 80122d6:	3608      	adds	r6, #8
 80122d8:	e7e5      	b.n	80122a6 <_dtoa_r+0x36e>
 80122da:	f000 80a5 	beq.w	8012428 <_dtoa_r+0x4f0>
 80122de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80122e2:	f1ca 0400 	rsb	r4, sl, #0
 80122e6:	4b7d      	ldr	r3, [pc, #500]	; (80124dc <_dtoa_r+0x5a4>)
 80122e8:	f004 020f 	and.w	r2, r4, #15
 80122ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f4:	f7ee f95c 	bl	80005b0 <__aeabi_dmul>
 80122f8:	2702      	movs	r7, #2
 80122fa:	2300      	movs	r3, #0
 80122fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012300:	4e77      	ldr	r6, [pc, #476]	; (80124e0 <_dtoa_r+0x5a8>)
 8012302:	1124      	asrs	r4, r4, #4
 8012304:	2c00      	cmp	r4, #0
 8012306:	f040 8084 	bne.w	8012412 <_dtoa_r+0x4da>
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1d2      	bne.n	80122b4 <_dtoa_r+0x37c>
 801230e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012310:	2b00      	cmp	r3, #0
 8012312:	f000 808b 	beq.w	801242c <_dtoa_r+0x4f4>
 8012316:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801231a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801231e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012322:	2200      	movs	r2, #0
 8012324:	4b6f      	ldr	r3, [pc, #444]	; (80124e4 <_dtoa_r+0x5ac>)
 8012326:	f7ee fbb5 	bl	8000a94 <__aeabi_dcmplt>
 801232a:	2800      	cmp	r0, #0
 801232c:	d07e      	beq.n	801242c <_dtoa_r+0x4f4>
 801232e:	9b08      	ldr	r3, [sp, #32]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d07b      	beq.n	801242c <_dtoa_r+0x4f4>
 8012334:	f1b9 0f00 	cmp.w	r9, #0
 8012338:	dd38      	ble.n	80123ac <_dtoa_r+0x474>
 801233a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801233e:	2200      	movs	r2, #0
 8012340:	4b69      	ldr	r3, [pc, #420]	; (80124e8 <_dtoa_r+0x5b0>)
 8012342:	f7ee f935 	bl	80005b0 <__aeabi_dmul>
 8012346:	464c      	mov	r4, r9
 8012348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801234c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8012350:	3701      	adds	r7, #1
 8012352:	4638      	mov	r0, r7
 8012354:	f7ee f8c2 	bl	80004dc <__aeabi_i2d>
 8012358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801235c:	f7ee f928 	bl	80005b0 <__aeabi_dmul>
 8012360:	2200      	movs	r2, #0
 8012362:	4b62      	ldr	r3, [pc, #392]	; (80124ec <_dtoa_r+0x5b4>)
 8012364:	f7ed ff6e 	bl	8000244 <__adddf3>
 8012368:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801236c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012370:	9611      	str	r6, [sp, #68]	; 0x44
 8012372:	2c00      	cmp	r4, #0
 8012374:	d15d      	bne.n	8012432 <_dtoa_r+0x4fa>
 8012376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801237a:	2200      	movs	r2, #0
 801237c:	4b5c      	ldr	r3, [pc, #368]	; (80124f0 <_dtoa_r+0x5b8>)
 801237e:	f7ed ff5f 	bl	8000240 <__aeabi_dsub>
 8012382:	4602      	mov	r2, r0
 8012384:	460b      	mov	r3, r1
 8012386:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801238a:	4633      	mov	r3, r6
 801238c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801238e:	f7ee fb9f 	bl	8000ad0 <__aeabi_dcmpgt>
 8012392:	2800      	cmp	r0, #0
 8012394:	f040 829c 	bne.w	80128d0 <_dtoa_r+0x998>
 8012398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801239c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801239e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80123a2:	f7ee fb77 	bl	8000a94 <__aeabi_dcmplt>
 80123a6:	2800      	cmp	r0, #0
 80123a8:	f040 8290 	bne.w	80128cc <_dtoa_r+0x994>
 80123ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80123b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80123b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f2c0 8152 	blt.w	8012660 <_dtoa_r+0x728>
 80123bc:	f1ba 0f0e 	cmp.w	sl, #14
 80123c0:	f300 814e 	bgt.w	8012660 <_dtoa_r+0x728>
 80123c4:	4b45      	ldr	r3, [pc, #276]	; (80124dc <_dtoa_r+0x5a4>)
 80123c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80123ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80123ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80123d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f280 80db 	bge.w	8012590 <_dtoa_r+0x658>
 80123da:	9b08      	ldr	r3, [sp, #32]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f300 80d7 	bgt.w	8012590 <_dtoa_r+0x658>
 80123e2:	f040 8272 	bne.w	80128ca <_dtoa_r+0x992>
 80123e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123ea:	2200      	movs	r2, #0
 80123ec:	4b40      	ldr	r3, [pc, #256]	; (80124f0 <_dtoa_r+0x5b8>)
 80123ee:	f7ee f8df 	bl	80005b0 <__aeabi_dmul>
 80123f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123f6:	f7ee fb61 	bl	8000abc <__aeabi_dcmpge>
 80123fa:	9c08      	ldr	r4, [sp, #32]
 80123fc:	4626      	mov	r6, r4
 80123fe:	2800      	cmp	r0, #0
 8012400:	f040 8248 	bne.w	8012894 <_dtoa_r+0x95c>
 8012404:	2331      	movs	r3, #49	; 0x31
 8012406:	9f03      	ldr	r7, [sp, #12]
 8012408:	f10a 0a01 	add.w	sl, sl, #1
 801240c:	f807 3b01 	strb.w	r3, [r7], #1
 8012410:	e244      	b.n	801289c <_dtoa_r+0x964>
 8012412:	07e2      	lsls	r2, r4, #31
 8012414:	d505      	bpl.n	8012422 <_dtoa_r+0x4ea>
 8012416:	e9d6 2300 	ldrd	r2, r3, [r6]
 801241a:	f7ee f8c9 	bl	80005b0 <__aeabi_dmul>
 801241e:	2301      	movs	r3, #1
 8012420:	3701      	adds	r7, #1
 8012422:	1064      	asrs	r4, r4, #1
 8012424:	3608      	adds	r6, #8
 8012426:	e76d      	b.n	8012304 <_dtoa_r+0x3cc>
 8012428:	2702      	movs	r7, #2
 801242a:	e770      	b.n	801230e <_dtoa_r+0x3d6>
 801242c:	46d0      	mov	r8, sl
 801242e:	9c08      	ldr	r4, [sp, #32]
 8012430:	e78f      	b.n	8012352 <_dtoa_r+0x41a>
 8012432:	9903      	ldr	r1, [sp, #12]
 8012434:	4b29      	ldr	r3, [pc, #164]	; (80124dc <_dtoa_r+0x5a4>)
 8012436:	4421      	add	r1, r4
 8012438:	9112      	str	r1, [sp, #72]	; 0x48
 801243a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801243c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012440:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012444:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012448:	2900      	cmp	r1, #0
 801244a:	d055      	beq.n	80124f8 <_dtoa_r+0x5c0>
 801244c:	2000      	movs	r0, #0
 801244e:	4929      	ldr	r1, [pc, #164]	; (80124f4 <_dtoa_r+0x5bc>)
 8012450:	f7ee f9d8 	bl	8000804 <__aeabi_ddiv>
 8012454:	463b      	mov	r3, r7
 8012456:	4632      	mov	r2, r6
 8012458:	f7ed fef2 	bl	8000240 <__aeabi_dsub>
 801245c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012460:	9f03      	ldr	r7, [sp, #12]
 8012462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012466:	f7ee fb53 	bl	8000b10 <__aeabi_d2iz>
 801246a:	4604      	mov	r4, r0
 801246c:	f7ee f836 	bl	80004dc <__aeabi_i2d>
 8012470:	4602      	mov	r2, r0
 8012472:	460b      	mov	r3, r1
 8012474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012478:	f7ed fee2 	bl	8000240 <__aeabi_dsub>
 801247c:	4602      	mov	r2, r0
 801247e:	460b      	mov	r3, r1
 8012480:	3430      	adds	r4, #48	; 0x30
 8012482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801248a:	f807 4b01 	strb.w	r4, [r7], #1
 801248e:	f7ee fb01 	bl	8000a94 <__aeabi_dcmplt>
 8012492:	2800      	cmp	r0, #0
 8012494:	d174      	bne.n	8012580 <_dtoa_r+0x648>
 8012496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801249a:	2000      	movs	r0, #0
 801249c:	4911      	ldr	r1, [pc, #68]	; (80124e4 <_dtoa_r+0x5ac>)
 801249e:	f7ed fecf 	bl	8000240 <__aeabi_dsub>
 80124a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80124a6:	f7ee faf5 	bl	8000a94 <__aeabi_dcmplt>
 80124aa:	2800      	cmp	r0, #0
 80124ac:	f040 80b7 	bne.w	801261e <_dtoa_r+0x6e6>
 80124b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80124b2:	429f      	cmp	r7, r3
 80124b4:	f43f af7a 	beq.w	80123ac <_dtoa_r+0x474>
 80124b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80124bc:	2200      	movs	r2, #0
 80124be:	4b0a      	ldr	r3, [pc, #40]	; (80124e8 <_dtoa_r+0x5b0>)
 80124c0:	f7ee f876 	bl	80005b0 <__aeabi_dmul>
 80124c4:	2200      	movs	r2, #0
 80124c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80124ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124ce:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <_dtoa_r+0x5b0>)
 80124d0:	f7ee f86e 	bl	80005b0 <__aeabi_dmul>
 80124d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124d8:	e7c3      	b.n	8012462 <_dtoa_r+0x52a>
 80124da:	bf00      	nop
 80124dc:	0802d8a8 	.word	0x0802d8a8
 80124e0:	0802d880 	.word	0x0802d880
 80124e4:	3ff00000 	.word	0x3ff00000
 80124e8:	40240000 	.word	0x40240000
 80124ec:	401c0000 	.word	0x401c0000
 80124f0:	40140000 	.word	0x40140000
 80124f4:	3fe00000 	.word	0x3fe00000
 80124f8:	4630      	mov	r0, r6
 80124fa:	4639      	mov	r1, r7
 80124fc:	f7ee f858 	bl	80005b0 <__aeabi_dmul>
 8012500:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012502:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012506:	9c03      	ldr	r4, [sp, #12]
 8012508:	9314      	str	r3, [sp, #80]	; 0x50
 801250a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801250e:	f7ee faff 	bl	8000b10 <__aeabi_d2iz>
 8012512:	9015      	str	r0, [sp, #84]	; 0x54
 8012514:	f7ed ffe2 	bl	80004dc <__aeabi_i2d>
 8012518:	4602      	mov	r2, r0
 801251a:	460b      	mov	r3, r1
 801251c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012520:	f7ed fe8e 	bl	8000240 <__aeabi_dsub>
 8012524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012526:	4606      	mov	r6, r0
 8012528:	3330      	adds	r3, #48	; 0x30
 801252a:	f804 3b01 	strb.w	r3, [r4], #1
 801252e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012530:	460f      	mov	r7, r1
 8012532:	429c      	cmp	r4, r3
 8012534:	f04f 0200 	mov.w	r2, #0
 8012538:	d124      	bne.n	8012584 <_dtoa_r+0x64c>
 801253a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801253e:	4bb0      	ldr	r3, [pc, #704]	; (8012800 <_dtoa_r+0x8c8>)
 8012540:	f7ed fe80 	bl	8000244 <__adddf3>
 8012544:	4602      	mov	r2, r0
 8012546:	460b      	mov	r3, r1
 8012548:	4630      	mov	r0, r6
 801254a:	4639      	mov	r1, r7
 801254c:	f7ee fac0 	bl	8000ad0 <__aeabi_dcmpgt>
 8012550:	2800      	cmp	r0, #0
 8012552:	d163      	bne.n	801261c <_dtoa_r+0x6e4>
 8012554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012558:	2000      	movs	r0, #0
 801255a:	49a9      	ldr	r1, [pc, #676]	; (8012800 <_dtoa_r+0x8c8>)
 801255c:	f7ed fe70 	bl	8000240 <__aeabi_dsub>
 8012560:	4602      	mov	r2, r0
 8012562:	460b      	mov	r3, r1
 8012564:	4630      	mov	r0, r6
 8012566:	4639      	mov	r1, r7
 8012568:	f7ee fa94 	bl	8000a94 <__aeabi_dcmplt>
 801256c:	2800      	cmp	r0, #0
 801256e:	f43f af1d 	beq.w	80123ac <_dtoa_r+0x474>
 8012572:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012574:	1e7b      	subs	r3, r7, #1
 8012576:	9314      	str	r3, [sp, #80]	; 0x50
 8012578:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801257c:	2b30      	cmp	r3, #48	; 0x30
 801257e:	d0f8      	beq.n	8012572 <_dtoa_r+0x63a>
 8012580:	46c2      	mov	sl, r8
 8012582:	e03b      	b.n	80125fc <_dtoa_r+0x6c4>
 8012584:	4b9f      	ldr	r3, [pc, #636]	; (8012804 <_dtoa_r+0x8cc>)
 8012586:	f7ee f813 	bl	80005b0 <__aeabi_dmul>
 801258a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801258e:	e7bc      	b.n	801250a <_dtoa_r+0x5d2>
 8012590:	9f03      	ldr	r7, [sp, #12]
 8012592:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801259a:	4640      	mov	r0, r8
 801259c:	4649      	mov	r1, r9
 801259e:	f7ee f931 	bl	8000804 <__aeabi_ddiv>
 80125a2:	f7ee fab5 	bl	8000b10 <__aeabi_d2iz>
 80125a6:	4604      	mov	r4, r0
 80125a8:	f7ed ff98 	bl	80004dc <__aeabi_i2d>
 80125ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125b0:	f7ed fffe 	bl	80005b0 <__aeabi_dmul>
 80125b4:	4602      	mov	r2, r0
 80125b6:	460b      	mov	r3, r1
 80125b8:	4640      	mov	r0, r8
 80125ba:	4649      	mov	r1, r9
 80125bc:	f7ed fe40 	bl	8000240 <__aeabi_dsub>
 80125c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80125c4:	f807 6b01 	strb.w	r6, [r7], #1
 80125c8:	9e03      	ldr	r6, [sp, #12]
 80125ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80125ce:	1bbe      	subs	r6, r7, r6
 80125d0:	45b4      	cmp	ip, r6
 80125d2:	4602      	mov	r2, r0
 80125d4:	460b      	mov	r3, r1
 80125d6:	d136      	bne.n	8012646 <_dtoa_r+0x70e>
 80125d8:	f7ed fe34 	bl	8000244 <__adddf3>
 80125dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125e0:	4680      	mov	r8, r0
 80125e2:	4689      	mov	r9, r1
 80125e4:	f7ee fa74 	bl	8000ad0 <__aeabi_dcmpgt>
 80125e8:	bb58      	cbnz	r0, 8012642 <_dtoa_r+0x70a>
 80125ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125ee:	4640      	mov	r0, r8
 80125f0:	4649      	mov	r1, r9
 80125f2:	f7ee fa45 	bl	8000a80 <__aeabi_dcmpeq>
 80125f6:	b108      	cbz	r0, 80125fc <_dtoa_r+0x6c4>
 80125f8:	07e1      	lsls	r1, r4, #31
 80125fa:	d422      	bmi.n	8012642 <_dtoa_r+0x70a>
 80125fc:	4628      	mov	r0, r5
 80125fe:	4659      	mov	r1, fp
 8012600:	f000 faf4 	bl	8012bec <_Bfree>
 8012604:	2300      	movs	r3, #0
 8012606:	703b      	strb	r3, [r7, #0]
 8012608:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801260a:	f10a 0001 	add.w	r0, sl, #1
 801260e:	6018      	str	r0, [r3, #0]
 8012610:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012612:	2b00      	cmp	r3, #0
 8012614:	f43f acde 	beq.w	8011fd4 <_dtoa_r+0x9c>
 8012618:	601f      	str	r7, [r3, #0]
 801261a:	e4db      	b.n	8011fd4 <_dtoa_r+0x9c>
 801261c:	4627      	mov	r7, r4
 801261e:	463b      	mov	r3, r7
 8012620:	461f      	mov	r7, r3
 8012622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012626:	2a39      	cmp	r2, #57	; 0x39
 8012628:	d107      	bne.n	801263a <_dtoa_r+0x702>
 801262a:	9a03      	ldr	r2, [sp, #12]
 801262c:	429a      	cmp	r2, r3
 801262e:	d1f7      	bne.n	8012620 <_dtoa_r+0x6e8>
 8012630:	2230      	movs	r2, #48	; 0x30
 8012632:	9903      	ldr	r1, [sp, #12]
 8012634:	f108 0801 	add.w	r8, r8, #1
 8012638:	700a      	strb	r2, [r1, #0]
 801263a:	781a      	ldrb	r2, [r3, #0]
 801263c:	3201      	adds	r2, #1
 801263e:	701a      	strb	r2, [r3, #0]
 8012640:	e79e      	b.n	8012580 <_dtoa_r+0x648>
 8012642:	46d0      	mov	r8, sl
 8012644:	e7eb      	b.n	801261e <_dtoa_r+0x6e6>
 8012646:	2200      	movs	r2, #0
 8012648:	4b6e      	ldr	r3, [pc, #440]	; (8012804 <_dtoa_r+0x8cc>)
 801264a:	f7ed ffb1 	bl	80005b0 <__aeabi_dmul>
 801264e:	2200      	movs	r2, #0
 8012650:	2300      	movs	r3, #0
 8012652:	4680      	mov	r8, r0
 8012654:	4689      	mov	r9, r1
 8012656:	f7ee fa13 	bl	8000a80 <__aeabi_dcmpeq>
 801265a:	2800      	cmp	r0, #0
 801265c:	d09b      	beq.n	8012596 <_dtoa_r+0x65e>
 801265e:	e7cd      	b.n	80125fc <_dtoa_r+0x6c4>
 8012660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012662:	2a00      	cmp	r2, #0
 8012664:	f000 80d0 	beq.w	8012808 <_dtoa_r+0x8d0>
 8012668:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801266a:	2a01      	cmp	r2, #1
 801266c:	f300 80ae 	bgt.w	80127cc <_dtoa_r+0x894>
 8012670:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012672:	2a00      	cmp	r2, #0
 8012674:	f000 80a6 	beq.w	80127c4 <_dtoa_r+0x88c>
 8012678:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801267c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801267e:	9f06      	ldr	r7, [sp, #24]
 8012680:	9a06      	ldr	r2, [sp, #24]
 8012682:	2101      	movs	r1, #1
 8012684:	441a      	add	r2, r3
 8012686:	9206      	str	r2, [sp, #24]
 8012688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801268a:	4628      	mov	r0, r5
 801268c:	441a      	add	r2, r3
 801268e:	9209      	str	r2, [sp, #36]	; 0x24
 8012690:	f000 fb62 	bl	8012d58 <__i2b>
 8012694:	4606      	mov	r6, r0
 8012696:	2f00      	cmp	r7, #0
 8012698:	dd0c      	ble.n	80126b4 <_dtoa_r+0x77c>
 801269a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801269c:	2b00      	cmp	r3, #0
 801269e:	dd09      	ble.n	80126b4 <_dtoa_r+0x77c>
 80126a0:	42bb      	cmp	r3, r7
 80126a2:	bfa8      	it	ge
 80126a4:	463b      	movge	r3, r7
 80126a6:	9a06      	ldr	r2, [sp, #24]
 80126a8:	1aff      	subs	r7, r7, r3
 80126aa:	1ad2      	subs	r2, r2, r3
 80126ac:	9206      	str	r2, [sp, #24]
 80126ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126b0:	1ad3      	subs	r3, r2, r3
 80126b2:	9309      	str	r3, [sp, #36]	; 0x24
 80126b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126b6:	b1f3      	cbz	r3, 80126f6 <_dtoa_r+0x7be>
 80126b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	f000 80a8 	beq.w	8012810 <_dtoa_r+0x8d8>
 80126c0:	2c00      	cmp	r4, #0
 80126c2:	dd10      	ble.n	80126e6 <_dtoa_r+0x7ae>
 80126c4:	4631      	mov	r1, r6
 80126c6:	4622      	mov	r2, r4
 80126c8:	4628      	mov	r0, r5
 80126ca:	f000 fc03 	bl	8012ed4 <__pow5mult>
 80126ce:	465a      	mov	r2, fp
 80126d0:	4601      	mov	r1, r0
 80126d2:	4606      	mov	r6, r0
 80126d4:	4628      	mov	r0, r5
 80126d6:	f000 fb55 	bl	8012d84 <__multiply>
 80126da:	4680      	mov	r8, r0
 80126dc:	4659      	mov	r1, fp
 80126de:	4628      	mov	r0, r5
 80126e0:	f000 fa84 	bl	8012bec <_Bfree>
 80126e4:	46c3      	mov	fp, r8
 80126e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126e8:	1b1a      	subs	r2, r3, r4
 80126ea:	d004      	beq.n	80126f6 <_dtoa_r+0x7be>
 80126ec:	4659      	mov	r1, fp
 80126ee:	4628      	mov	r0, r5
 80126f0:	f000 fbf0 	bl	8012ed4 <__pow5mult>
 80126f4:	4683      	mov	fp, r0
 80126f6:	2101      	movs	r1, #1
 80126f8:	4628      	mov	r0, r5
 80126fa:	f000 fb2d 	bl	8012d58 <__i2b>
 80126fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012700:	4604      	mov	r4, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	f340 8086 	ble.w	8012814 <_dtoa_r+0x8dc>
 8012708:	461a      	mov	r2, r3
 801270a:	4601      	mov	r1, r0
 801270c:	4628      	mov	r0, r5
 801270e:	f000 fbe1 	bl	8012ed4 <__pow5mult>
 8012712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012714:	4604      	mov	r4, r0
 8012716:	2b01      	cmp	r3, #1
 8012718:	dd7f      	ble.n	801281a <_dtoa_r+0x8e2>
 801271a:	f04f 0800 	mov.w	r8, #0
 801271e:	6923      	ldr	r3, [r4, #16]
 8012720:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012724:	6918      	ldr	r0, [r3, #16]
 8012726:	f000 fac9 	bl	8012cbc <__hi0bits>
 801272a:	f1c0 0020 	rsb	r0, r0, #32
 801272e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012730:	4418      	add	r0, r3
 8012732:	f010 001f 	ands.w	r0, r0, #31
 8012736:	f000 8092 	beq.w	801285e <_dtoa_r+0x926>
 801273a:	f1c0 0320 	rsb	r3, r0, #32
 801273e:	2b04      	cmp	r3, #4
 8012740:	f340 808a 	ble.w	8012858 <_dtoa_r+0x920>
 8012744:	f1c0 001c 	rsb	r0, r0, #28
 8012748:	9b06      	ldr	r3, [sp, #24]
 801274a:	4407      	add	r7, r0
 801274c:	4403      	add	r3, r0
 801274e:	9306      	str	r3, [sp, #24]
 8012750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012752:	4403      	add	r3, r0
 8012754:	9309      	str	r3, [sp, #36]	; 0x24
 8012756:	9b06      	ldr	r3, [sp, #24]
 8012758:	2b00      	cmp	r3, #0
 801275a:	dd05      	ble.n	8012768 <_dtoa_r+0x830>
 801275c:	4659      	mov	r1, fp
 801275e:	461a      	mov	r2, r3
 8012760:	4628      	mov	r0, r5
 8012762:	f000 fc11 	bl	8012f88 <__lshift>
 8012766:	4683      	mov	fp, r0
 8012768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	dd05      	ble.n	801277a <_dtoa_r+0x842>
 801276e:	4621      	mov	r1, r4
 8012770:	461a      	mov	r2, r3
 8012772:	4628      	mov	r0, r5
 8012774:	f000 fc08 	bl	8012f88 <__lshift>
 8012778:	4604      	mov	r4, r0
 801277a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801277c:	2b00      	cmp	r3, #0
 801277e:	d070      	beq.n	8012862 <_dtoa_r+0x92a>
 8012780:	4621      	mov	r1, r4
 8012782:	4658      	mov	r0, fp
 8012784:	f000 fc70 	bl	8013068 <__mcmp>
 8012788:	2800      	cmp	r0, #0
 801278a:	da6a      	bge.n	8012862 <_dtoa_r+0x92a>
 801278c:	2300      	movs	r3, #0
 801278e:	4659      	mov	r1, fp
 8012790:	220a      	movs	r2, #10
 8012792:	4628      	mov	r0, r5
 8012794:	f000 fa4c 	bl	8012c30 <__multadd>
 8012798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801279a:	4683      	mov	fp, r0
 801279c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	f000 8194 	beq.w	8012ace <_dtoa_r+0xb96>
 80127a6:	4631      	mov	r1, r6
 80127a8:	2300      	movs	r3, #0
 80127aa:	220a      	movs	r2, #10
 80127ac:	4628      	mov	r0, r5
 80127ae:	f000 fa3f 	bl	8012c30 <__multadd>
 80127b2:	f1b9 0f00 	cmp.w	r9, #0
 80127b6:	4606      	mov	r6, r0
 80127b8:	f300 8093 	bgt.w	80128e2 <_dtoa_r+0x9aa>
 80127bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80127be:	2b02      	cmp	r3, #2
 80127c0:	dc57      	bgt.n	8012872 <_dtoa_r+0x93a>
 80127c2:	e08e      	b.n	80128e2 <_dtoa_r+0x9aa>
 80127c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80127c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80127ca:	e757      	b.n	801267c <_dtoa_r+0x744>
 80127cc:	9b08      	ldr	r3, [sp, #32]
 80127ce:	1e5c      	subs	r4, r3, #1
 80127d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127d2:	42a3      	cmp	r3, r4
 80127d4:	bfb7      	itett	lt
 80127d6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80127d8:	1b1c      	subge	r4, r3, r4
 80127da:	1ae2      	sublt	r2, r4, r3
 80127dc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80127de:	bfbe      	ittt	lt
 80127e0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80127e2:	189b      	addlt	r3, r3, r2
 80127e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80127e6:	9b08      	ldr	r3, [sp, #32]
 80127e8:	bfb8      	it	lt
 80127ea:	2400      	movlt	r4, #0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	bfbb      	ittet	lt
 80127f0:	9b06      	ldrlt	r3, [sp, #24]
 80127f2:	9a08      	ldrlt	r2, [sp, #32]
 80127f4:	9f06      	ldrge	r7, [sp, #24]
 80127f6:	1a9f      	sublt	r7, r3, r2
 80127f8:	bfac      	ite	ge
 80127fa:	9b08      	ldrge	r3, [sp, #32]
 80127fc:	2300      	movlt	r3, #0
 80127fe:	e73f      	b.n	8012680 <_dtoa_r+0x748>
 8012800:	3fe00000 	.word	0x3fe00000
 8012804:	40240000 	.word	0x40240000
 8012808:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801280a:	9f06      	ldr	r7, [sp, #24]
 801280c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801280e:	e742      	b.n	8012696 <_dtoa_r+0x75e>
 8012810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012812:	e76b      	b.n	80126ec <_dtoa_r+0x7b4>
 8012814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012816:	2b01      	cmp	r3, #1
 8012818:	dc19      	bgt.n	801284e <_dtoa_r+0x916>
 801281a:	9b04      	ldr	r3, [sp, #16]
 801281c:	b9bb      	cbnz	r3, 801284e <_dtoa_r+0x916>
 801281e:	9b05      	ldr	r3, [sp, #20]
 8012820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012824:	b99b      	cbnz	r3, 801284e <_dtoa_r+0x916>
 8012826:	9b05      	ldr	r3, [sp, #20]
 8012828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801282c:	0d1b      	lsrs	r3, r3, #20
 801282e:	051b      	lsls	r3, r3, #20
 8012830:	b183      	cbz	r3, 8012854 <_dtoa_r+0x91c>
 8012832:	f04f 0801 	mov.w	r8, #1
 8012836:	9b06      	ldr	r3, [sp, #24]
 8012838:	3301      	adds	r3, #1
 801283a:	9306      	str	r3, [sp, #24]
 801283c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801283e:	3301      	adds	r3, #1
 8012840:	9309      	str	r3, [sp, #36]	; 0x24
 8012842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012844:	2b00      	cmp	r3, #0
 8012846:	f47f af6a 	bne.w	801271e <_dtoa_r+0x7e6>
 801284a:	2001      	movs	r0, #1
 801284c:	e76f      	b.n	801272e <_dtoa_r+0x7f6>
 801284e:	f04f 0800 	mov.w	r8, #0
 8012852:	e7f6      	b.n	8012842 <_dtoa_r+0x90a>
 8012854:	4698      	mov	r8, r3
 8012856:	e7f4      	b.n	8012842 <_dtoa_r+0x90a>
 8012858:	f43f af7d 	beq.w	8012756 <_dtoa_r+0x81e>
 801285c:	4618      	mov	r0, r3
 801285e:	301c      	adds	r0, #28
 8012860:	e772      	b.n	8012748 <_dtoa_r+0x810>
 8012862:	9b08      	ldr	r3, [sp, #32]
 8012864:	2b00      	cmp	r3, #0
 8012866:	dc36      	bgt.n	80128d6 <_dtoa_r+0x99e>
 8012868:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801286a:	2b02      	cmp	r3, #2
 801286c:	dd33      	ble.n	80128d6 <_dtoa_r+0x99e>
 801286e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012872:	f1b9 0f00 	cmp.w	r9, #0
 8012876:	d10d      	bne.n	8012894 <_dtoa_r+0x95c>
 8012878:	4621      	mov	r1, r4
 801287a:	464b      	mov	r3, r9
 801287c:	2205      	movs	r2, #5
 801287e:	4628      	mov	r0, r5
 8012880:	f000 f9d6 	bl	8012c30 <__multadd>
 8012884:	4601      	mov	r1, r0
 8012886:	4604      	mov	r4, r0
 8012888:	4658      	mov	r0, fp
 801288a:	f000 fbed 	bl	8013068 <__mcmp>
 801288e:	2800      	cmp	r0, #0
 8012890:	f73f adb8 	bgt.w	8012404 <_dtoa_r+0x4cc>
 8012894:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012896:	9f03      	ldr	r7, [sp, #12]
 8012898:	ea6f 0a03 	mvn.w	sl, r3
 801289c:	f04f 0800 	mov.w	r8, #0
 80128a0:	4621      	mov	r1, r4
 80128a2:	4628      	mov	r0, r5
 80128a4:	f000 f9a2 	bl	8012bec <_Bfree>
 80128a8:	2e00      	cmp	r6, #0
 80128aa:	f43f aea7 	beq.w	80125fc <_dtoa_r+0x6c4>
 80128ae:	f1b8 0f00 	cmp.w	r8, #0
 80128b2:	d005      	beq.n	80128c0 <_dtoa_r+0x988>
 80128b4:	45b0      	cmp	r8, r6
 80128b6:	d003      	beq.n	80128c0 <_dtoa_r+0x988>
 80128b8:	4641      	mov	r1, r8
 80128ba:	4628      	mov	r0, r5
 80128bc:	f000 f996 	bl	8012bec <_Bfree>
 80128c0:	4631      	mov	r1, r6
 80128c2:	4628      	mov	r0, r5
 80128c4:	f000 f992 	bl	8012bec <_Bfree>
 80128c8:	e698      	b.n	80125fc <_dtoa_r+0x6c4>
 80128ca:	2400      	movs	r4, #0
 80128cc:	4626      	mov	r6, r4
 80128ce:	e7e1      	b.n	8012894 <_dtoa_r+0x95c>
 80128d0:	46c2      	mov	sl, r8
 80128d2:	4626      	mov	r6, r4
 80128d4:	e596      	b.n	8012404 <_dtoa_r+0x4cc>
 80128d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	f000 80fd 	beq.w	8012adc <_dtoa_r+0xba4>
 80128e2:	2f00      	cmp	r7, #0
 80128e4:	dd05      	ble.n	80128f2 <_dtoa_r+0x9ba>
 80128e6:	4631      	mov	r1, r6
 80128e8:	463a      	mov	r2, r7
 80128ea:	4628      	mov	r0, r5
 80128ec:	f000 fb4c 	bl	8012f88 <__lshift>
 80128f0:	4606      	mov	r6, r0
 80128f2:	f1b8 0f00 	cmp.w	r8, #0
 80128f6:	d05c      	beq.n	80129b2 <_dtoa_r+0xa7a>
 80128f8:	4628      	mov	r0, r5
 80128fa:	6871      	ldr	r1, [r6, #4]
 80128fc:	f000 f936 	bl	8012b6c <_Balloc>
 8012900:	4607      	mov	r7, r0
 8012902:	b928      	cbnz	r0, 8012910 <_dtoa_r+0x9d8>
 8012904:	4602      	mov	r2, r0
 8012906:	f240 21ea 	movw	r1, #746	; 0x2ea
 801290a:	4b7f      	ldr	r3, [pc, #508]	; (8012b08 <_dtoa_r+0xbd0>)
 801290c:	f7ff bb28 	b.w	8011f60 <_dtoa_r+0x28>
 8012910:	6932      	ldr	r2, [r6, #16]
 8012912:	f106 010c 	add.w	r1, r6, #12
 8012916:	3202      	adds	r2, #2
 8012918:	0092      	lsls	r2, r2, #2
 801291a:	300c      	adds	r0, #12
 801291c:	f000 f90c 	bl	8012b38 <memcpy>
 8012920:	2201      	movs	r2, #1
 8012922:	4639      	mov	r1, r7
 8012924:	4628      	mov	r0, r5
 8012926:	f000 fb2f 	bl	8012f88 <__lshift>
 801292a:	46b0      	mov	r8, r6
 801292c:	4606      	mov	r6, r0
 801292e:	9b03      	ldr	r3, [sp, #12]
 8012930:	3301      	adds	r3, #1
 8012932:	9308      	str	r3, [sp, #32]
 8012934:	9b03      	ldr	r3, [sp, #12]
 8012936:	444b      	add	r3, r9
 8012938:	930a      	str	r3, [sp, #40]	; 0x28
 801293a:	9b04      	ldr	r3, [sp, #16]
 801293c:	f003 0301 	and.w	r3, r3, #1
 8012940:	9309      	str	r3, [sp, #36]	; 0x24
 8012942:	9b08      	ldr	r3, [sp, #32]
 8012944:	4621      	mov	r1, r4
 8012946:	3b01      	subs	r3, #1
 8012948:	4658      	mov	r0, fp
 801294a:	9304      	str	r3, [sp, #16]
 801294c:	f7ff fa66 	bl	8011e1c <quorem>
 8012950:	4603      	mov	r3, r0
 8012952:	4641      	mov	r1, r8
 8012954:	3330      	adds	r3, #48	; 0x30
 8012956:	9006      	str	r0, [sp, #24]
 8012958:	4658      	mov	r0, fp
 801295a:	930b      	str	r3, [sp, #44]	; 0x2c
 801295c:	f000 fb84 	bl	8013068 <__mcmp>
 8012960:	4632      	mov	r2, r6
 8012962:	4681      	mov	r9, r0
 8012964:	4621      	mov	r1, r4
 8012966:	4628      	mov	r0, r5
 8012968:	f000 fb9a 	bl	80130a0 <__mdiff>
 801296c:	68c2      	ldr	r2, [r0, #12]
 801296e:	4607      	mov	r7, r0
 8012970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012972:	bb02      	cbnz	r2, 80129b6 <_dtoa_r+0xa7e>
 8012974:	4601      	mov	r1, r0
 8012976:	4658      	mov	r0, fp
 8012978:	f000 fb76 	bl	8013068 <__mcmp>
 801297c:	4602      	mov	r2, r0
 801297e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012980:	4639      	mov	r1, r7
 8012982:	4628      	mov	r0, r5
 8012984:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8012988:	f000 f930 	bl	8012bec <_Bfree>
 801298c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801298e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012990:	9f08      	ldr	r7, [sp, #32]
 8012992:	ea43 0102 	orr.w	r1, r3, r2
 8012996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012998:	430b      	orrs	r3, r1
 801299a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801299c:	d10d      	bne.n	80129ba <_dtoa_r+0xa82>
 801299e:	2b39      	cmp	r3, #57	; 0x39
 80129a0:	d029      	beq.n	80129f6 <_dtoa_r+0xabe>
 80129a2:	f1b9 0f00 	cmp.w	r9, #0
 80129a6:	dd01      	ble.n	80129ac <_dtoa_r+0xa74>
 80129a8:	9b06      	ldr	r3, [sp, #24]
 80129aa:	3331      	adds	r3, #49	; 0x31
 80129ac:	9a04      	ldr	r2, [sp, #16]
 80129ae:	7013      	strb	r3, [r2, #0]
 80129b0:	e776      	b.n	80128a0 <_dtoa_r+0x968>
 80129b2:	4630      	mov	r0, r6
 80129b4:	e7b9      	b.n	801292a <_dtoa_r+0x9f2>
 80129b6:	2201      	movs	r2, #1
 80129b8:	e7e2      	b.n	8012980 <_dtoa_r+0xa48>
 80129ba:	f1b9 0f00 	cmp.w	r9, #0
 80129be:	db06      	blt.n	80129ce <_dtoa_r+0xa96>
 80129c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80129c2:	ea41 0909 	orr.w	r9, r1, r9
 80129c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129c8:	ea59 0101 	orrs.w	r1, r9, r1
 80129cc:	d120      	bne.n	8012a10 <_dtoa_r+0xad8>
 80129ce:	2a00      	cmp	r2, #0
 80129d0:	ddec      	ble.n	80129ac <_dtoa_r+0xa74>
 80129d2:	4659      	mov	r1, fp
 80129d4:	2201      	movs	r2, #1
 80129d6:	4628      	mov	r0, r5
 80129d8:	9308      	str	r3, [sp, #32]
 80129da:	f000 fad5 	bl	8012f88 <__lshift>
 80129de:	4621      	mov	r1, r4
 80129e0:	4683      	mov	fp, r0
 80129e2:	f000 fb41 	bl	8013068 <__mcmp>
 80129e6:	2800      	cmp	r0, #0
 80129e8:	9b08      	ldr	r3, [sp, #32]
 80129ea:	dc02      	bgt.n	80129f2 <_dtoa_r+0xaba>
 80129ec:	d1de      	bne.n	80129ac <_dtoa_r+0xa74>
 80129ee:	07da      	lsls	r2, r3, #31
 80129f0:	d5dc      	bpl.n	80129ac <_dtoa_r+0xa74>
 80129f2:	2b39      	cmp	r3, #57	; 0x39
 80129f4:	d1d8      	bne.n	80129a8 <_dtoa_r+0xa70>
 80129f6:	2339      	movs	r3, #57	; 0x39
 80129f8:	9a04      	ldr	r2, [sp, #16]
 80129fa:	7013      	strb	r3, [r2, #0]
 80129fc:	463b      	mov	r3, r7
 80129fe:	461f      	mov	r7, r3
 8012a00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8012a04:	3b01      	subs	r3, #1
 8012a06:	2a39      	cmp	r2, #57	; 0x39
 8012a08:	d050      	beq.n	8012aac <_dtoa_r+0xb74>
 8012a0a:	3201      	adds	r2, #1
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	e747      	b.n	80128a0 <_dtoa_r+0x968>
 8012a10:	2a00      	cmp	r2, #0
 8012a12:	dd03      	ble.n	8012a1c <_dtoa_r+0xae4>
 8012a14:	2b39      	cmp	r3, #57	; 0x39
 8012a16:	d0ee      	beq.n	80129f6 <_dtoa_r+0xabe>
 8012a18:	3301      	adds	r3, #1
 8012a1a:	e7c7      	b.n	80129ac <_dtoa_r+0xa74>
 8012a1c:	9a08      	ldr	r2, [sp, #32]
 8012a1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012a20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a24:	428a      	cmp	r2, r1
 8012a26:	d02a      	beq.n	8012a7e <_dtoa_r+0xb46>
 8012a28:	4659      	mov	r1, fp
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	220a      	movs	r2, #10
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f000 f8fe 	bl	8012c30 <__multadd>
 8012a34:	45b0      	cmp	r8, r6
 8012a36:	4683      	mov	fp, r0
 8012a38:	f04f 0300 	mov.w	r3, #0
 8012a3c:	f04f 020a 	mov.w	r2, #10
 8012a40:	4641      	mov	r1, r8
 8012a42:	4628      	mov	r0, r5
 8012a44:	d107      	bne.n	8012a56 <_dtoa_r+0xb1e>
 8012a46:	f000 f8f3 	bl	8012c30 <__multadd>
 8012a4a:	4680      	mov	r8, r0
 8012a4c:	4606      	mov	r6, r0
 8012a4e:	9b08      	ldr	r3, [sp, #32]
 8012a50:	3301      	adds	r3, #1
 8012a52:	9308      	str	r3, [sp, #32]
 8012a54:	e775      	b.n	8012942 <_dtoa_r+0xa0a>
 8012a56:	f000 f8eb 	bl	8012c30 <__multadd>
 8012a5a:	4631      	mov	r1, r6
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	2300      	movs	r3, #0
 8012a60:	220a      	movs	r2, #10
 8012a62:	4628      	mov	r0, r5
 8012a64:	f000 f8e4 	bl	8012c30 <__multadd>
 8012a68:	4606      	mov	r6, r0
 8012a6a:	e7f0      	b.n	8012a4e <_dtoa_r+0xb16>
 8012a6c:	f1b9 0f00 	cmp.w	r9, #0
 8012a70:	bfcc      	ite	gt
 8012a72:	464f      	movgt	r7, r9
 8012a74:	2701      	movle	r7, #1
 8012a76:	f04f 0800 	mov.w	r8, #0
 8012a7a:	9a03      	ldr	r2, [sp, #12]
 8012a7c:	4417      	add	r7, r2
 8012a7e:	4659      	mov	r1, fp
 8012a80:	2201      	movs	r2, #1
 8012a82:	4628      	mov	r0, r5
 8012a84:	9308      	str	r3, [sp, #32]
 8012a86:	f000 fa7f 	bl	8012f88 <__lshift>
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	4683      	mov	fp, r0
 8012a8e:	f000 faeb 	bl	8013068 <__mcmp>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	dcb2      	bgt.n	80129fc <_dtoa_r+0xac4>
 8012a96:	d102      	bne.n	8012a9e <_dtoa_r+0xb66>
 8012a98:	9b08      	ldr	r3, [sp, #32]
 8012a9a:	07db      	lsls	r3, r3, #31
 8012a9c:	d4ae      	bmi.n	80129fc <_dtoa_r+0xac4>
 8012a9e:	463b      	mov	r3, r7
 8012aa0:	461f      	mov	r7, r3
 8012aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012aa6:	2a30      	cmp	r2, #48	; 0x30
 8012aa8:	d0fa      	beq.n	8012aa0 <_dtoa_r+0xb68>
 8012aaa:	e6f9      	b.n	80128a0 <_dtoa_r+0x968>
 8012aac:	9a03      	ldr	r2, [sp, #12]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d1a5      	bne.n	80129fe <_dtoa_r+0xac6>
 8012ab2:	2331      	movs	r3, #49	; 0x31
 8012ab4:	f10a 0a01 	add.w	sl, sl, #1
 8012ab8:	e779      	b.n	80129ae <_dtoa_r+0xa76>
 8012aba:	4b14      	ldr	r3, [pc, #80]	; (8012b0c <_dtoa_r+0xbd4>)
 8012abc:	f7ff baa8 	b.w	8012010 <_dtoa_r+0xd8>
 8012ac0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f47f aa81 	bne.w	8011fca <_dtoa_r+0x92>
 8012ac8:	4b11      	ldr	r3, [pc, #68]	; (8012b10 <_dtoa_r+0xbd8>)
 8012aca:	f7ff baa1 	b.w	8012010 <_dtoa_r+0xd8>
 8012ace:	f1b9 0f00 	cmp.w	r9, #0
 8012ad2:	dc03      	bgt.n	8012adc <_dtoa_r+0xba4>
 8012ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ad6:	2b02      	cmp	r3, #2
 8012ad8:	f73f aecb 	bgt.w	8012872 <_dtoa_r+0x93a>
 8012adc:	9f03      	ldr	r7, [sp, #12]
 8012ade:	4621      	mov	r1, r4
 8012ae0:	4658      	mov	r0, fp
 8012ae2:	f7ff f99b 	bl	8011e1c <quorem>
 8012ae6:	9a03      	ldr	r2, [sp, #12]
 8012ae8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012aec:	f807 3b01 	strb.w	r3, [r7], #1
 8012af0:	1aba      	subs	r2, r7, r2
 8012af2:	4591      	cmp	r9, r2
 8012af4:	ddba      	ble.n	8012a6c <_dtoa_r+0xb34>
 8012af6:	4659      	mov	r1, fp
 8012af8:	2300      	movs	r3, #0
 8012afa:	220a      	movs	r2, #10
 8012afc:	4628      	mov	r0, r5
 8012afe:	f000 f897 	bl	8012c30 <__multadd>
 8012b02:	4683      	mov	fp, r0
 8012b04:	e7eb      	b.n	8012ade <_dtoa_r+0xba6>
 8012b06:	bf00      	nop
 8012b08:	0802d813 	.word	0x0802d813
 8012b0c:	0802d770 	.word	0x0802d770
 8012b10:	0802d794 	.word	0x0802d794

08012b14 <_localeconv_r>:
 8012b14:	4800      	ldr	r0, [pc, #0]	; (8012b18 <_localeconv_r+0x4>)
 8012b16:	4770      	bx	lr
 8012b18:	200002c8 	.word	0x200002c8

08012b1c <memchr>:
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	b510      	push	{r4, lr}
 8012b20:	b2c9      	uxtb	r1, r1
 8012b22:	4402      	add	r2, r0
 8012b24:	4293      	cmp	r3, r2
 8012b26:	4618      	mov	r0, r3
 8012b28:	d101      	bne.n	8012b2e <memchr+0x12>
 8012b2a:	2000      	movs	r0, #0
 8012b2c:	e003      	b.n	8012b36 <memchr+0x1a>
 8012b2e:	7804      	ldrb	r4, [r0, #0]
 8012b30:	3301      	adds	r3, #1
 8012b32:	428c      	cmp	r4, r1
 8012b34:	d1f6      	bne.n	8012b24 <memchr+0x8>
 8012b36:	bd10      	pop	{r4, pc}

08012b38 <memcpy>:
 8012b38:	440a      	add	r2, r1
 8012b3a:	4291      	cmp	r1, r2
 8012b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b40:	d100      	bne.n	8012b44 <memcpy+0xc>
 8012b42:	4770      	bx	lr
 8012b44:	b510      	push	{r4, lr}
 8012b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b4a:	4291      	cmp	r1, r2
 8012b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b50:	d1f9      	bne.n	8012b46 <memcpy+0xe>
 8012b52:	bd10      	pop	{r4, pc}

08012b54 <__malloc_lock>:
 8012b54:	4801      	ldr	r0, [pc, #4]	; (8012b5c <__malloc_lock+0x8>)
 8012b56:	f000 bd2c 	b.w	80135b2 <__retarget_lock_acquire_recursive>
 8012b5a:	bf00      	nop
 8012b5c:	20001648 	.word	0x20001648

08012b60 <__malloc_unlock>:
 8012b60:	4801      	ldr	r0, [pc, #4]	; (8012b68 <__malloc_unlock+0x8>)
 8012b62:	f000 bd27 	b.w	80135b4 <__retarget_lock_release_recursive>
 8012b66:	bf00      	nop
 8012b68:	20001648 	.word	0x20001648

08012b6c <_Balloc>:
 8012b6c:	b570      	push	{r4, r5, r6, lr}
 8012b6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012b70:	4604      	mov	r4, r0
 8012b72:	460d      	mov	r5, r1
 8012b74:	b976      	cbnz	r6, 8012b94 <_Balloc+0x28>
 8012b76:	2010      	movs	r0, #16
 8012b78:	f7fe fbb2 	bl	80112e0 <malloc>
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	6260      	str	r0, [r4, #36]	; 0x24
 8012b80:	b920      	cbnz	r0, 8012b8c <_Balloc+0x20>
 8012b82:	2166      	movs	r1, #102	; 0x66
 8012b84:	4b17      	ldr	r3, [pc, #92]	; (8012be4 <_Balloc+0x78>)
 8012b86:	4818      	ldr	r0, [pc, #96]	; (8012be8 <_Balloc+0x7c>)
 8012b88:	f000 fce2 	bl	8013550 <__assert_func>
 8012b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b90:	6006      	str	r6, [r0, #0]
 8012b92:	60c6      	str	r6, [r0, #12]
 8012b94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012b96:	68f3      	ldr	r3, [r6, #12]
 8012b98:	b183      	cbz	r3, 8012bbc <_Balloc+0x50>
 8012b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ba2:	b9b8      	cbnz	r0, 8012bd4 <_Balloc+0x68>
 8012ba4:	2101      	movs	r1, #1
 8012ba6:	fa01 f605 	lsl.w	r6, r1, r5
 8012baa:	1d72      	adds	r2, r6, #5
 8012bac:	4620      	mov	r0, r4
 8012bae:	0092      	lsls	r2, r2, #2
 8012bb0:	f000 fb5e 	bl	8013270 <_calloc_r>
 8012bb4:	b160      	cbz	r0, 8012bd0 <_Balloc+0x64>
 8012bb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012bba:	e00e      	b.n	8012bda <_Balloc+0x6e>
 8012bbc:	2221      	movs	r2, #33	; 0x21
 8012bbe:	2104      	movs	r1, #4
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f000 fb55 	bl	8013270 <_calloc_r>
 8012bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012bc8:	60f0      	str	r0, [r6, #12]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d1e4      	bne.n	8012b9a <_Balloc+0x2e>
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	6802      	ldr	r2, [r0, #0]
 8012bd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012bda:	2300      	movs	r3, #0
 8012bdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012be0:	e7f7      	b.n	8012bd2 <_Balloc+0x66>
 8012be2:	bf00      	nop
 8012be4:	0802d7a1 	.word	0x0802d7a1
 8012be8:	0802d824 	.word	0x0802d824

08012bec <_Bfree>:
 8012bec:	b570      	push	{r4, r5, r6, lr}
 8012bee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	b976      	cbnz	r6, 8012c14 <_Bfree+0x28>
 8012bf6:	2010      	movs	r0, #16
 8012bf8:	f7fe fb72 	bl	80112e0 <malloc>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	6268      	str	r0, [r5, #36]	; 0x24
 8012c00:	b920      	cbnz	r0, 8012c0c <_Bfree+0x20>
 8012c02:	218a      	movs	r1, #138	; 0x8a
 8012c04:	4b08      	ldr	r3, [pc, #32]	; (8012c28 <_Bfree+0x3c>)
 8012c06:	4809      	ldr	r0, [pc, #36]	; (8012c2c <_Bfree+0x40>)
 8012c08:	f000 fca2 	bl	8013550 <__assert_func>
 8012c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c10:	6006      	str	r6, [r0, #0]
 8012c12:	60c6      	str	r6, [r0, #12]
 8012c14:	b13c      	cbz	r4, 8012c26 <_Bfree+0x3a>
 8012c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012c18:	6862      	ldr	r2, [r4, #4]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c20:	6021      	str	r1, [r4, #0]
 8012c22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c26:	bd70      	pop	{r4, r5, r6, pc}
 8012c28:	0802d7a1 	.word	0x0802d7a1
 8012c2c:	0802d824 	.word	0x0802d824

08012c30 <__multadd>:
 8012c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c34:	4607      	mov	r7, r0
 8012c36:	460c      	mov	r4, r1
 8012c38:	461e      	mov	r6, r3
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	690d      	ldr	r5, [r1, #16]
 8012c3e:	f101 0c14 	add.w	ip, r1, #20
 8012c42:	f8dc 3000 	ldr.w	r3, [ip]
 8012c46:	3001      	adds	r0, #1
 8012c48:	b299      	uxth	r1, r3
 8012c4a:	fb02 6101 	mla	r1, r2, r1, r6
 8012c4e:	0c1e      	lsrs	r6, r3, #16
 8012c50:	0c0b      	lsrs	r3, r1, #16
 8012c52:	fb02 3306 	mla	r3, r2, r6, r3
 8012c56:	b289      	uxth	r1, r1
 8012c58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012c5c:	4285      	cmp	r5, r0
 8012c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012c62:	f84c 1b04 	str.w	r1, [ip], #4
 8012c66:	dcec      	bgt.n	8012c42 <__multadd+0x12>
 8012c68:	b30e      	cbz	r6, 8012cae <__multadd+0x7e>
 8012c6a:	68a3      	ldr	r3, [r4, #8]
 8012c6c:	42ab      	cmp	r3, r5
 8012c6e:	dc19      	bgt.n	8012ca4 <__multadd+0x74>
 8012c70:	6861      	ldr	r1, [r4, #4]
 8012c72:	4638      	mov	r0, r7
 8012c74:	3101      	adds	r1, #1
 8012c76:	f7ff ff79 	bl	8012b6c <_Balloc>
 8012c7a:	4680      	mov	r8, r0
 8012c7c:	b928      	cbnz	r0, 8012c8a <__multadd+0x5a>
 8012c7e:	4602      	mov	r2, r0
 8012c80:	21b5      	movs	r1, #181	; 0xb5
 8012c82:	4b0c      	ldr	r3, [pc, #48]	; (8012cb4 <__multadd+0x84>)
 8012c84:	480c      	ldr	r0, [pc, #48]	; (8012cb8 <__multadd+0x88>)
 8012c86:	f000 fc63 	bl	8013550 <__assert_func>
 8012c8a:	6922      	ldr	r2, [r4, #16]
 8012c8c:	f104 010c 	add.w	r1, r4, #12
 8012c90:	3202      	adds	r2, #2
 8012c92:	0092      	lsls	r2, r2, #2
 8012c94:	300c      	adds	r0, #12
 8012c96:	f7ff ff4f 	bl	8012b38 <memcpy>
 8012c9a:	4621      	mov	r1, r4
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	f7ff ffa5 	bl	8012bec <_Bfree>
 8012ca2:	4644      	mov	r4, r8
 8012ca4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ca8:	3501      	adds	r5, #1
 8012caa:	615e      	str	r6, [r3, #20]
 8012cac:	6125      	str	r5, [r4, #16]
 8012cae:	4620      	mov	r0, r4
 8012cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cb4:	0802d813 	.word	0x0802d813
 8012cb8:	0802d824 	.word	0x0802d824

08012cbc <__hi0bits>:
 8012cbc:	0c02      	lsrs	r2, r0, #16
 8012cbe:	0412      	lsls	r2, r2, #16
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	b9ca      	cbnz	r2, 8012cf8 <__hi0bits+0x3c>
 8012cc4:	0403      	lsls	r3, r0, #16
 8012cc6:	2010      	movs	r0, #16
 8012cc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012ccc:	bf04      	itt	eq
 8012cce:	021b      	lsleq	r3, r3, #8
 8012cd0:	3008      	addeq	r0, #8
 8012cd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012cd6:	bf04      	itt	eq
 8012cd8:	011b      	lsleq	r3, r3, #4
 8012cda:	3004      	addeq	r0, #4
 8012cdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012ce0:	bf04      	itt	eq
 8012ce2:	009b      	lsleq	r3, r3, #2
 8012ce4:	3002      	addeq	r0, #2
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	db05      	blt.n	8012cf6 <__hi0bits+0x3a>
 8012cea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8012cee:	f100 0001 	add.w	r0, r0, #1
 8012cf2:	bf08      	it	eq
 8012cf4:	2020      	moveq	r0, #32
 8012cf6:	4770      	bx	lr
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	e7e5      	b.n	8012cc8 <__hi0bits+0xc>

08012cfc <__lo0bits>:
 8012cfc:	6803      	ldr	r3, [r0, #0]
 8012cfe:	4602      	mov	r2, r0
 8012d00:	f013 0007 	ands.w	r0, r3, #7
 8012d04:	d00b      	beq.n	8012d1e <__lo0bits+0x22>
 8012d06:	07d9      	lsls	r1, r3, #31
 8012d08:	d421      	bmi.n	8012d4e <__lo0bits+0x52>
 8012d0a:	0798      	lsls	r0, r3, #30
 8012d0c:	bf49      	itett	mi
 8012d0e:	085b      	lsrmi	r3, r3, #1
 8012d10:	089b      	lsrpl	r3, r3, #2
 8012d12:	2001      	movmi	r0, #1
 8012d14:	6013      	strmi	r3, [r2, #0]
 8012d16:	bf5c      	itt	pl
 8012d18:	2002      	movpl	r0, #2
 8012d1a:	6013      	strpl	r3, [r2, #0]
 8012d1c:	4770      	bx	lr
 8012d1e:	b299      	uxth	r1, r3
 8012d20:	b909      	cbnz	r1, 8012d26 <__lo0bits+0x2a>
 8012d22:	2010      	movs	r0, #16
 8012d24:	0c1b      	lsrs	r3, r3, #16
 8012d26:	b2d9      	uxtb	r1, r3
 8012d28:	b909      	cbnz	r1, 8012d2e <__lo0bits+0x32>
 8012d2a:	3008      	adds	r0, #8
 8012d2c:	0a1b      	lsrs	r3, r3, #8
 8012d2e:	0719      	lsls	r1, r3, #28
 8012d30:	bf04      	itt	eq
 8012d32:	091b      	lsreq	r3, r3, #4
 8012d34:	3004      	addeq	r0, #4
 8012d36:	0799      	lsls	r1, r3, #30
 8012d38:	bf04      	itt	eq
 8012d3a:	089b      	lsreq	r3, r3, #2
 8012d3c:	3002      	addeq	r0, #2
 8012d3e:	07d9      	lsls	r1, r3, #31
 8012d40:	d403      	bmi.n	8012d4a <__lo0bits+0x4e>
 8012d42:	085b      	lsrs	r3, r3, #1
 8012d44:	f100 0001 	add.w	r0, r0, #1
 8012d48:	d003      	beq.n	8012d52 <__lo0bits+0x56>
 8012d4a:	6013      	str	r3, [r2, #0]
 8012d4c:	4770      	bx	lr
 8012d4e:	2000      	movs	r0, #0
 8012d50:	4770      	bx	lr
 8012d52:	2020      	movs	r0, #32
 8012d54:	4770      	bx	lr
	...

08012d58 <__i2b>:
 8012d58:	b510      	push	{r4, lr}
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	2101      	movs	r1, #1
 8012d5e:	f7ff ff05 	bl	8012b6c <_Balloc>
 8012d62:	4602      	mov	r2, r0
 8012d64:	b928      	cbnz	r0, 8012d72 <__i2b+0x1a>
 8012d66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012d6a:	4b04      	ldr	r3, [pc, #16]	; (8012d7c <__i2b+0x24>)
 8012d6c:	4804      	ldr	r0, [pc, #16]	; (8012d80 <__i2b+0x28>)
 8012d6e:	f000 fbef 	bl	8013550 <__assert_func>
 8012d72:	2301      	movs	r3, #1
 8012d74:	6144      	str	r4, [r0, #20]
 8012d76:	6103      	str	r3, [r0, #16]
 8012d78:	bd10      	pop	{r4, pc}
 8012d7a:	bf00      	nop
 8012d7c:	0802d813 	.word	0x0802d813
 8012d80:	0802d824 	.word	0x0802d824

08012d84 <__multiply>:
 8012d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d88:	4691      	mov	r9, r2
 8012d8a:	690a      	ldr	r2, [r1, #16]
 8012d8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012d90:	460c      	mov	r4, r1
 8012d92:	429a      	cmp	r2, r3
 8012d94:	bfbe      	ittt	lt
 8012d96:	460b      	movlt	r3, r1
 8012d98:	464c      	movlt	r4, r9
 8012d9a:	4699      	movlt	r9, r3
 8012d9c:	6927      	ldr	r7, [r4, #16]
 8012d9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012da2:	68a3      	ldr	r3, [r4, #8]
 8012da4:	6861      	ldr	r1, [r4, #4]
 8012da6:	eb07 060a 	add.w	r6, r7, sl
 8012daa:	42b3      	cmp	r3, r6
 8012dac:	b085      	sub	sp, #20
 8012dae:	bfb8      	it	lt
 8012db0:	3101      	addlt	r1, #1
 8012db2:	f7ff fedb 	bl	8012b6c <_Balloc>
 8012db6:	b930      	cbnz	r0, 8012dc6 <__multiply+0x42>
 8012db8:	4602      	mov	r2, r0
 8012dba:	f240 115d 	movw	r1, #349	; 0x15d
 8012dbe:	4b43      	ldr	r3, [pc, #268]	; (8012ecc <__multiply+0x148>)
 8012dc0:	4843      	ldr	r0, [pc, #268]	; (8012ed0 <__multiply+0x14c>)
 8012dc2:	f000 fbc5 	bl	8013550 <__assert_func>
 8012dc6:	f100 0514 	add.w	r5, r0, #20
 8012dca:	462b      	mov	r3, r5
 8012dcc:	2200      	movs	r2, #0
 8012dce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012dd2:	4543      	cmp	r3, r8
 8012dd4:	d321      	bcc.n	8012e1a <__multiply+0x96>
 8012dd6:	f104 0314 	add.w	r3, r4, #20
 8012dda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012dde:	f109 0314 	add.w	r3, r9, #20
 8012de2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012de6:	9202      	str	r2, [sp, #8]
 8012de8:	1b3a      	subs	r2, r7, r4
 8012dea:	3a15      	subs	r2, #21
 8012dec:	f022 0203 	bic.w	r2, r2, #3
 8012df0:	3204      	adds	r2, #4
 8012df2:	f104 0115 	add.w	r1, r4, #21
 8012df6:	428f      	cmp	r7, r1
 8012df8:	bf38      	it	cc
 8012dfa:	2204      	movcc	r2, #4
 8012dfc:	9201      	str	r2, [sp, #4]
 8012dfe:	9a02      	ldr	r2, [sp, #8]
 8012e00:	9303      	str	r3, [sp, #12]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d80c      	bhi.n	8012e20 <__multiply+0x9c>
 8012e06:	2e00      	cmp	r6, #0
 8012e08:	dd03      	ble.n	8012e12 <__multiply+0x8e>
 8012e0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d059      	beq.n	8012ec6 <__multiply+0x142>
 8012e12:	6106      	str	r6, [r0, #16]
 8012e14:	b005      	add	sp, #20
 8012e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1a:	f843 2b04 	str.w	r2, [r3], #4
 8012e1e:	e7d8      	b.n	8012dd2 <__multiply+0x4e>
 8012e20:	f8b3 a000 	ldrh.w	sl, [r3]
 8012e24:	f1ba 0f00 	cmp.w	sl, #0
 8012e28:	d023      	beq.n	8012e72 <__multiply+0xee>
 8012e2a:	46a9      	mov	r9, r5
 8012e2c:	f04f 0c00 	mov.w	ip, #0
 8012e30:	f104 0e14 	add.w	lr, r4, #20
 8012e34:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012e38:	f8d9 1000 	ldr.w	r1, [r9]
 8012e3c:	fa1f fb82 	uxth.w	fp, r2
 8012e40:	b289      	uxth	r1, r1
 8012e42:	fb0a 110b 	mla	r1, sl, fp, r1
 8012e46:	4461      	add	r1, ip
 8012e48:	f8d9 c000 	ldr.w	ip, [r9]
 8012e4c:	0c12      	lsrs	r2, r2, #16
 8012e4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012e52:	fb0a c202 	mla	r2, sl, r2, ip
 8012e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012e5a:	b289      	uxth	r1, r1
 8012e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012e60:	4577      	cmp	r7, lr
 8012e62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e66:	f849 1b04 	str.w	r1, [r9], #4
 8012e6a:	d8e3      	bhi.n	8012e34 <__multiply+0xb0>
 8012e6c:	9a01      	ldr	r2, [sp, #4]
 8012e6e:	f845 c002 	str.w	ip, [r5, r2]
 8012e72:	9a03      	ldr	r2, [sp, #12]
 8012e74:	3304      	adds	r3, #4
 8012e76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012e7a:	f1b9 0f00 	cmp.w	r9, #0
 8012e7e:	d020      	beq.n	8012ec2 <__multiply+0x13e>
 8012e80:	46ae      	mov	lr, r5
 8012e82:	f04f 0a00 	mov.w	sl, #0
 8012e86:	6829      	ldr	r1, [r5, #0]
 8012e88:	f104 0c14 	add.w	ip, r4, #20
 8012e8c:	f8bc b000 	ldrh.w	fp, [ip]
 8012e90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012e94:	b289      	uxth	r1, r1
 8012e96:	fb09 220b 	mla	r2, r9, fp, r2
 8012e9a:	4492      	add	sl, r2
 8012e9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012ea0:	f84e 1b04 	str.w	r1, [lr], #4
 8012ea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012ea8:	f8be 1000 	ldrh.w	r1, [lr]
 8012eac:	0c12      	lsrs	r2, r2, #16
 8012eae:	fb09 1102 	mla	r1, r9, r2, r1
 8012eb2:	4567      	cmp	r7, ip
 8012eb4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012eb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ebc:	d8e6      	bhi.n	8012e8c <__multiply+0x108>
 8012ebe:	9a01      	ldr	r2, [sp, #4]
 8012ec0:	50a9      	str	r1, [r5, r2]
 8012ec2:	3504      	adds	r5, #4
 8012ec4:	e79b      	b.n	8012dfe <__multiply+0x7a>
 8012ec6:	3e01      	subs	r6, #1
 8012ec8:	e79d      	b.n	8012e06 <__multiply+0x82>
 8012eca:	bf00      	nop
 8012ecc:	0802d813 	.word	0x0802d813
 8012ed0:	0802d824 	.word	0x0802d824

08012ed4 <__pow5mult>:
 8012ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ed8:	4615      	mov	r5, r2
 8012eda:	f012 0203 	ands.w	r2, r2, #3
 8012ede:	4606      	mov	r6, r0
 8012ee0:	460f      	mov	r7, r1
 8012ee2:	d007      	beq.n	8012ef4 <__pow5mult+0x20>
 8012ee4:	4c25      	ldr	r4, [pc, #148]	; (8012f7c <__pow5mult+0xa8>)
 8012ee6:	3a01      	subs	r2, #1
 8012ee8:	2300      	movs	r3, #0
 8012eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012eee:	f7ff fe9f 	bl	8012c30 <__multadd>
 8012ef2:	4607      	mov	r7, r0
 8012ef4:	10ad      	asrs	r5, r5, #2
 8012ef6:	d03d      	beq.n	8012f74 <__pow5mult+0xa0>
 8012ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012efa:	b97c      	cbnz	r4, 8012f1c <__pow5mult+0x48>
 8012efc:	2010      	movs	r0, #16
 8012efe:	f7fe f9ef 	bl	80112e0 <malloc>
 8012f02:	4602      	mov	r2, r0
 8012f04:	6270      	str	r0, [r6, #36]	; 0x24
 8012f06:	b928      	cbnz	r0, 8012f14 <__pow5mult+0x40>
 8012f08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012f0c:	4b1c      	ldr	r3, [pc, #112]	; (8012f80 <__pow5mult+0xac>)
 8012f0e:	481d      	ldr	r0, [pc, #116]	; (8012f84 <__pow5mult+0xb0>)
 8012f10:	f000 fb1e 	bl	8013550 <__assert_func>
 8012f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f18:	6004      	str	r4, [r0, #0]
 8012f1a:	60c4      	str	r4, [r0, #12]
 8012f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012f24:	b94c      	cbnz	r4, 8012f3a <__pow5mult+0x66>
 8012f26:	f240 2171 	movw	r1, #625	; 0x271
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	f7ff ff14 	bl	8012d58 <__i2b>
 8012f30:	2300      	movs	r3, #0
 8012f32:	4604      	mov	r4, r0
 8012f34:	f8c8 0008 	str.w	r0, [r8, #8]
 8012f38:	6003      	str	r3, [r0, #0]
 8012f3a:	f04f 0900 	mov.w	r9, #0
 8012f3e:	07eb      	lsls	r3, r5, #31
 8012f40:	d50a      	bpl.n	8012f58 <__pow5mult+0x84>
 8012f42:	4639      	mov	r1, r7
 8012f44:	4622      	mov	r2, r4
 8012f46:	4630      	mov	r0, r6
 8012f48:	f7ff ff1c 	bl	8012d84 <__multiply>
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	4639      	mov	r1, r7
 8012f50:	4630      	mov	r0, r6
 8012f52:	f7ff fe4b 	bl	8012bec <_Bfree>
 8012f56:	4647      	mov	r7, r8
 8012f58:	106d      	asrs	r5, r5, #1
 8012f5a:	d00b      	beq.n	8012f74 <__pow5mult+0xa0>
 8012f5c:	6820      	ldr	r0, [r4, #0]
 8012f5e:	b938      	cbnz	r0, 8012f70 <__pow5mult+0x9c>
 8012f60:	4622      	mov	r2, r4
 8012f62:	4621      	mov	r1, r4
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff ff0d 	bl	8012d84 <__multiply>
 8012f6a:	6020      	str	r0, [r4, #0]
 8012f6c:	f8c0 9000 	str.w	r9, [r0]
 8012f70:	4604      	mov	r4, r0
 8012f72:	e7e4      	b.n	8012f3e <__pow5mult+0x6a>
 8012f74:	4638      	mov	r0, r7
 8012f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f7a:	bf00      	nop
 8012f7c:	0802d970 	.word	0x0802d970
 8012f80:	0802d7a1 	.word	0x0802d7a1
 8012f84:	0802d824 	.word	0x0802d824

08012f88 <__lshift>:
 8012f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f8c:	460c      	mov	r4, r1
 8012f8e:	4607      	mov	r7, r0
 8012f90:	4691      	mov	r9, r2
 8012f92:	6923      	ldr	r3, [r4, #16]
 8012f94:	6849      	ldr	r1, [r1, #4]
 8012f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012f9a:	68a3      	ldr	r3, [r4, #8]
 8012f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012fa0:	f108 0601 	add.w	r6, r8, #1
 8012fa4:	42b3      	cmp	r3, r6
 8012fa6:	db0b      	blt.n	8012fc0 <__lshift+0x38>
 8012fa8:	4638      	mov	r0, r7
 8012faa:	f7ff fddf 	bl	8012b6c <_Balloc>
 8012fae:	4605      	mov	r5, r0
 8012fb0:	b948      	cbnz	r0, 8012fc6 <__lshift+0x3e>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012fb8:	4b29      	ldr	r3, [pc, #164]	; (8013060 <__lshift+0xd8>)
 8012fba:	482a      	ldr	r0, [pc, #168]	; (8013064 <__lshift+0xdc>)
 8012fbc:	f000 fac8 	bl	8013550 <__assert_func>
 8012fc0:	3101      	adds	r1, #1
 8012fc2:	005b      	lsls	r3, r3, #1
 8012fc4:	e7ee      	b.n	8012fa4 <__lshift+0x1c>
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f100 0114 	add.w	r1, r0, #20
 8012fcc:	f100 0210 	add.w	r2, r0, #16
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	4553      	cmp	r3, sl
 8012fd4:	db37      	blt.n	8013046 <__lshift+0xbe>
 8012fd6:	6920      	ldr	r0, [r4, #16]
 8012fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012fdc:	f104 0314 	add.w	r3, r4, #20
 8012fe0:	f019 091f 	ands.w	r9, r9, #31
 8012fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012fec:	d02f      	beq.n	801304e <__lshift+0xc6>
 8012fee:	468a      	mov	sl, r1
 8012ff0:	f04f 0c00 	mov.w	ip, #0
 8012ff4:	f1c9 0e20 	rsb	lr, r9, #32
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	fa02 f209 	lsl.w	r2, r2, r9
 8012ffe:	ea42 020c 	orr.w	r2, r2, ip
 8013002:	f84a 2b04 	str.w	r2, [sl], #4
 8013006:	f853 2b04 	ldr.w	r2, [r3], #4
 801300a:	4298      	cmp	r0, r3
 801300c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013010:	d8f2      	bhi.n	8012ff8 <__lshift+0x70>
 8013012:	1b03      	subs	r3, r0, r4
 8013014:	3b15      	subs	r3, #21
 8013016:	f023 0303 	bic.w	r3, r3, #3
 801301a:	3304      	adds	r3, #4
 801301c:	f104 0215 	add.w	r2, r4, #21
 8013020:	4290      	cmp	r0, r2
 8013022:	bf38      	it	cc
 8013024:	2304      	movcc	r3, #4
 8013026:	f841 c003 	str.w	ip, [r1, r3]
 801302a:	f1bc 0f00 	cmp.w	ip, #0
 801302e:	d001      	beq.n	8013034 <__lshift+0xac>
 8013030:	f108 0602 	add.w	r6, r8, #2
 8013034:	3e01      	subs	r6, #1
 8013036:	4638      	mov	r0, r7
 8013038:	4621      	mov	r1, r4
 801303a:	612e      	str	r6, [r5, #16]
 801303c:	f7ff fdd6 	bl	8012bec <_Bfree>
 8013040:	4628      	mov	r0, r5
 8013042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013046:	f842 0f04 	str.w	r0, [r2, #4]!
 801304a:	3301      	adds	r3, #1
 801304c:	e7c1      	b.n	8012fd2 <__lshift+0x4a>
 801304e:	3904      	subs	r1, #4
 8013050:	f853 2b04 	ldr.w	r2, [r3], #4
 8013054:	4298      	cmp	r0, r3
 8013056:	f841 2f04 	str.w	r2, [r1, #4]!
 801305a:	d8f9      	bhi.n	8013050 <__lshift+0xc8>
 801305c:	e7ea      	b.n	8013034 <__lshift+0xac>
 801305e:	bf00      	nop
 8013060:	0802d813 	.word	0x0802d813
 8013064:	0802d824 	.word	0x0802d824

08013068 <__mcmp>:
 8013068:	4603      	mov	r3, r0
 801306a:	690a      	ldr	r2, [r1, #16]
 801306c:	6900      	ldr	r0, [r0, #16]
 801306e:	b530      	push	{r4, r5, lr}
 8013070:	1a80      	subs	r0, r0, r2
 8013072:	d10d      	bne.n	8013090 <__mcmp+0x28>
 8013074:	3314      	adds	r3, #20
 8013076:	3114      	adds	r1, #20
 8013078:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801307c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013080:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013084:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013088:	4295      	cmp	r5, r2
 801308a:	d002      	beq.n	8013092 <__mcmp+0x2a>
 801308c:	d304      	bcc.n	8013098 <__mcmp+0x30>
 801308e:	2001      	movs	r0, #1
 8013090:	bd30      	pop	{r4, r5, pc}
 8013092:	42a3      	cmp	r3, r4
 8013094:	d3f4      	bcc.n	8013080 <__mcmp+0x18>
 8013096:	e7fb      	b.n	8013090 <__mcmp+0x28>
 8013098:	f04f 30ff 	mov.w	r0, #4294967295
 801309c:	e7f8      	b.n	8013090 <__mcmp+0x28>
	...

080130a0 <__mdiff>:
 80130a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a4:	460d      	mov	r5, r1
 80130a6:	4607      	mov	r7, r0
 80130a8:	4611      	mov	r1, r2
 80130aa:	4628      	mov	r0, r5
 80130ac:	4614      	mov	r4, r2
 80130ae:	f7ff ffdb 	bl	8013068 <__mcmp>
 80130b2:	1e06      	subs	r6, r0, #0
 80130b4:	d111      	bne.n	80130da <__mdiff+0x3a>
 80130b6:	4631      	mov	r1, r6
 80130b8:	4638      	mov	r0, r7
 80130ba:	f7ff fd57 	bl	8012b6c <_Balloc>
 80130be:	4602      	mov	r2, r0
 80130c0:	b928      	cbnz	r0, 80130ce <__mdiff+0x2e>
 80130c2:	f240 2132 	movw	r1, #562	; 0x232
 80130c6:	4b3a      	ldr	r3, [pc, #232]	; (80131b0 <__mdiff+0x110>)
 80130c8:	483a      	ldr	r0, [pc, #232]	; (80131b4 <__mdiff+0x114>)
 80130ca:	f000 fa41 	bl	8013550 <__assert_func>
 80130ce:	2301      	movs	r3, #1
 80130d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80130d4:	4610      	mov	r0, r2
 80130d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130da:	bfa4      	itt	ge
 80130dc:	4623      	movge	r3, r4
 80130de:	462c      	movge	r4, r5
 80130e0:	4638      	mov	r0, r7
 80130e2:	6861      	ldr	r1, [r4, #4]
 80130e4:	bfa6      	itte	ge
 80130e6:	461d      	movge	r5, r3
 80130e8:	2600      	movge	r6, #0
 80130ea:	2601      	movlt	r6, #1
 80130ec:	f7ff fd3e 	bl	8012b6c <_Balloc>
 80130f0:	4602      	mov	r2, r0
 80130f2:	b918      	cbnz	r0, 80130fc <__mdiff+0x5c>
 80130f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80130f8:	4b2d      	ldr	r3, [pc, #180]	; (80131b0 <__mdiff+0x110>)
 80130fa:	e7e5      	b.n	80130c8 <__mdiff+0x28>
 80130fc:	f102 0814 	add.w	r8, r2, #20
 8013100:	46c2      	mov	sl, r8
 8013102:	f04f 0c00 	mov.w	ip, #0
 8013106:	6927      	ldr	r7, [r4, #16]
 8013108:	60c6      	str	r6, [r0, #12]
 801310a:	692e      	ldr	r6, [r5, #16]
 801310c:	f104 0014 	add.w	r0, r4, #20
 8013110:	f105 0914 	add.w	r9, r5, #20
 8013114:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8013118:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801311c:	3410      	adds	r4, #16
 801311e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8013122:	f859 3b04 	ldr.w	r3, [r9], #4
 8013126:	fa1f f18b 	uxth.w	r1, fp
 801312a:	448c      	add	ip, r1
 801312c:	b299      	uxth	r1, r3
 801312e:	0c1b      	lsrs	r3, r3, #16
 8013130:	ebac 0101 	sub.w	r1, ip, r1
 8013134:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013138:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801313c:	b289      	uxth	r1, r1
 801313e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8013142:	454e      	cmp	r6, r9
 8013144:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013148:	f84a 3b04 	str.w	r3, [sl], #4
 801314c:	d8e7      	bhi.n	801311e <__mdiff+0x7e>
 801314e:	1b73      	subs	r3, r6, r5
 8013150:	3b15      	subs	r3, #21
 8013152:	f023 0303 	bic.w	r3, r3, #3
 8013156:	3515      	adds	r5, #21
 8013158:	3304      	adds	r3, #4
 801315a:	42ae      	cmp	r6, r5
 801315c:	bf38      	it	cc
 801315e:	2304      	movcc	r3, #4
 8013160:	4418      	add	r0, r3
 8013162:	4443      	add	r3, r8
 8013164:	461e      	mov	r6, r3
 8013166:	4605      	mov	r5, r0
 8013168:	4575      	cmp	r5, lr
 801316a:	d30e      	bcc.n	801318a <__mdiff+0xea>
 801316c:	f10e 0103 	add.w	r1, lr, #3
 8013170:	1a09      	subs	r1, r1, r0
 8013172:	f021 0103 	bic.w	r1, r1, #3
 8013176:	3803      	subs	r0, #3
 8013178:	4586      	cmp	lr, r0
 801317a:	bf38      	it	cc
 801317c:	2100      	movcc	r1, #0
 801317e:	4419      	add	r1, r3
 8013180:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8013184:	b18b      	cbz	r3, 80131aa <__mdiff+0x10a>
 8013186:	6117      	str	r7, [r2, #16]
 8013188:	e7a4      	b.n	80130d4 <__mdiff+0x34>
 801318a:	f855 8b04 	ldr.w	r8, [r5], #4
 801318e:	fa1f f188 	uxth.w	r1, r8
 8013192:	4461      	add	r1, ip
 8013194:	140c      	asrs	r4, r1, #16
 8013196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801319a:	b289      	uxth	r1, r1
 801319c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80131a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80131a4:	f846 1b04 	str.w	r1, [r6], #4
 80131a8:	e7de      	b.n	8013168 <__mdiff+0xc8>
 80131aa:	3f01      	subs	r7, #1
 80131ac:	e7e8      	b.n	8013180 <__mdiff+0xe0>
 80131ae:	bf00      	nop
 80131b0:	0802d813 	.word	0x0802d813
 80131b4:	0802d824 	.word	0x0802d824

080131b8 <__d2b>:
 80131b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80131bc:	2101      	movs	r1, #1
 80131be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80131c2:	4690      	mov	r8, r2
 80131c4:	461d      	mov	r5, r3
 80131c6:	f7ff fcd1 	bl	8012b6c <_Balloc>
 80131ca:	4604      	mov	r4, r0
 80131cc:	b930      	cbnz	r0, 80131dc <__d2b+0x24>
 80131ce:	4602      	mov	r2, r0
 80131d0:	f240 310a 	movw	r1, #778	; 0x30a
 80131d4:	4b24      	ldr	r3, [pc, #144]	; (8013268 <__d2b+0xb0>)
 80131d6:	4825      	ldr	r0, [pc, #148]	; (801326c <__d2b+0xb4>)
 80131d8:	f000 f9ba 	bl	8013550 <__assert_func>
 80131dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80131e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80131e4:	bb2d      	cbnz	r5, 8013232 <__d2b+0x7a>
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	f1b8 0300 	subs.w	r3, r8, #0
 80131ec:	d026      	beq.n	801323c <__d2b+0x84>
 80131ee:	4668      	mov	r0, sp
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	f7ff fd83 	bl	8012cfc <__lo0bits>
 80131f6:	9900      	ldr	r1, [sp, #0]
 80131f8:	b1f0      	cbz	r0, 8013238 <__d2b+0x80>
 80131fa:	9a01      	ldr	r2, [sp, #4]
 80131fc:	f1c0 0320 	rsb	r3, r0, #32
 8013200:	fa02 f303 	lsl.w	r3, r2, r3
 8013204:	430b      	orrs	r3, r1
 8013206:	40c2      	lsrs	r2, r0
 8013208:	6163      	str	r3, [r4, #20]
 801320a:	9201      	str	r2, [sp, #4]
 801320c:	9b01      	ldr	r3, [sp, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	bf14      	ite	ne
 8013212:	2102      	movne	r1, #2
 8013214:	2101      	moveq	r1, #1
 8013216:	61a3      	str	r3, [r4, #24]
 8013218:	6121      	str	r1, [r4, #16]
 801321a:	b1c5      	cbz	r5, 801324e <__d2b+0x96>
 801321c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013220:	4405      	add	r5, r0
 8013222:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013226:	603d      	str	r5, [r7, #0]
 8013228:	6030      	str	r0, [r6, #0]
 801322a:	4620      	mov	r0, r4
 801322c:	b002      	add	sp, #8
 801322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013236:	e7d6      	b.n	80131e6 <__d2b+0x2e>
 8013238:	6161      	str	r1, [r4, #20]
 801323a:	e7e7      	b.n	801320c <__d2b+0x54>
 801323c:	a801      	add	r0, sp, #4
 801323e:	f7ff fd5d 	bl	8012cfc <__lo0bits>
 8013242:	2101      	movs	r1, #1
 8013244:	9b01      	ldr	r3, [sp, #4]
 8013246:	6121      	str	r1, [r4, #16]
 8013248:	6163      	str	r3, [r4, #20]
 801324a:	3020      	adds	r0, #32
 801324c:	e7e5      	b.n	801321a <__d2b+0x62>
 801324e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8013252:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013256:	6038      	str	r0, [r7, #0]
 8013258:	6918      	ldr	r0, [r3, #16]
 801325a:	f7ff fd2f 	bl	8012cbc <__hi0bits>
 801325e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8013262:	6031      	str	r1, [r6, #0]
 8013264:	e7e1      	b.n	801322a <__d2b+0x72>
 8013266:	bf00      	nop
 8013268:	0802d813 	.word	0x0802d813
 801326c:	0802d824 	.word	0x0802d824

08013270 <_calloc_r>:
 8013270:	b570      	push	{r4, r5, r6, lr}
 8013272:	fba1 5402 	umull	r5, r4, r1, r2
 8013276:	b934      	cbnz	r4, 8013286 <_calloc_r+0x16>
 8013278:	4629      	mov	r1, r5
 801327a:	f7fe f8b1 	bl	80113e0 <_malloc_r>
 801327e:	4606      	mov	r6, r0
 8013280:	b928      	cbnz	r0, 801328e <_calloc_r+0x1e>
 8013282:	4630      	mov	r0, r6
 8013284:	bd70      	pop	{r4, r5, r6, pc}
 8013286:	220c      	movs	r2, #12
 8013288:	2600      	movs	r6, #0
 801328a:	6002      	str	r2, [r0, #0]
 801328c:	e7f9      	b.n	8013282 <_calloc_r+0x12>
 801328e:	462a      	mov	r2, r5
 8013290:	4621      	mov	r1, r4
 8013292:	f7fe f835 	bl	8011300 <memset>
 8013296:	e7f4      	b.n	8013282 <_calloc_r+0x12>

08013298 <__ssputs_r>:
 8013298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801329c:	688e      	ldr	r6, [r1, #8]
 801329e:	4682      	mov	sl, r0
 80132a0:	429e      	cmp	r6, r3
 80132a2:	460c      	mov	r4, r1
 80132a4:	4690      	mov	r8, r2
 80132a6:	461f      	mov	r7, r3
 80132a8:	d838      	bhi.n	801331c <__ssputs_r+0x84>
 80132aa:	898a      	ldrh	r2, [r1, #12]
 80132ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80132b0:	d032      	beq.n	8013318 <__ssputs_r+0x80>
 80132b2:	6825      	ldr	r5, [r4, #0]
 80132b4:	6909      	ldr	r1, [r1, #16]
 80132b6:	3301      	adds	r3, #1
 80132b8:	eba5 0901 	sub.w	r9, r5, r1
 80132bc:	6965      	ldr	r5, [r4, #20]
 80132be:	444b      	add	r3, r9
 80132c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132c8:	106d      	asrs	r5, r5, #1
 80132ca:	429d      	cmp	r5, r3
 80132cc:	bf38      	it	cc
 80132ce:	461d      	movcc	r5, r3
 80132d0:	0553      	lsls	r3, r2, #21
 80132d2:	d531      	bpl.n	8013338 <__ssputs_r+0xa0>
 80132d4:	4629      	mov	r1, r5
 80132d6:	f7fe f883 	bl	80113e0 <_malloc_r>
 80132da:	4606      	mov	r6, r0
 80132dc:	b950      	cbnz	r0, 80132f4 <__ssputs_r+0x5c>
 80132de:	230c      	movs	r3, #12
 80132e0:	f04f 30ff 	mov.w	r0, #4294967295
 80132e4:	f8ca 3000 	str.w	r3, [sl]
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ee:	81a3      	strh	r3, [r4, #12]
 80132f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f4:	464a      	mov	r2, r9
 80132f6:	6921      	ldr	r1, [r4, #16]
 80132f8:	f7ff fc1e 	bl	8012b38 <memcpy>
 80132fc:	89a3      	ldrh	r3, [r4, #12]
 80132fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013306:	81a3      	strh	r3, [r4, #12]
 8013308:	6126      	str	r6, [r4, #16]
 801330a:	444e      	add	r6, r9
 801330c:	6026      	str	r6, [r4, #0]
 801330e:	463e      	mov	r6, r7
 8013310:	6165      	str	r5, [r4, #20]
 8013312:	eba5 0509 	sub.w	r5, r5, r9
 8013316:	60a5      	str	r5, [r4, #8]
 8013318:	42be      	cmp	r6, r7
 801331a:	d900      	bls.n	801331e <__ssputs_r+0x86>
 801331c:	463e      	mov	r6, r7
 801331e:	4632      	mov	r2, r6
 8013320:	4641      	mov	r1, r8
 8013322:	6820      	ldr	r0, [r4, #0]
 8013324:	f000 f959 	bl	80135da <memmove>
 8013328:	68a3      	ldr	r3, [r4, #8]
 801332a:	2000      	movs	r0, #0
 801332c:	1b9b      	subs	r3, r3, r6
 801332e:	60a3      	str	r3, [r4, #8]
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	4433      	add	r3, r6
 8013334:	6023      	str	r3, [r4, #0]
 8013336:	e7db      	b.n	80132f0 <__ssputs_r+0x58>
 8013338:	462a      	mov	r2, r5
 801333a:	f000 f968 	bl	801360e <_realloc_r>
 801333e:	4606      	mov	r6, r0
 8013340:	2800      	cmp	r0, #0
 8013342:	d1e1      	bne.n	8013308 <__ssputs_r+0x70>
 8013344:	4650      	mov	r0, sl
 8013346:	6921      	ldr	r1, [r4, #16]
 8013348:	f7fd ffe2 	bl	8011310 <_free_r>
 801334c:	e7c7      	b.n	80132de <__ssputs_r+0x46>
	...

08013350 <_svfiprintf_r>:
 8013350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	4698      	mov	r8, r3
 8013356:	898b      	ldrh	r3, [r1, #12]
 8013358:	4607      	mov	r7, r0
 801335a:	061b      	lsls	r3, r3, #24
 801335c:	460d      	mov	r5, r1
 801335e:	4614      	mov	r4, r2
 8013360:	b09d      	sub	sp, #116	; 0x74
 8013362:	d50e      	bpl.n	8013382 <_svfiprintf_r+0x32>
 8013364:	690b      	ldr	r3, [r1, #16]
 8013366:	b963      	cbnz	r3, 8013382 <_svfiprintf_r+0x32>
 8013368:	2140      	movs	r1, #64	; 0x40
 801336a:	f7fe f839 	bl	80113e0 <_malloc_r>
 801336e:	6028      	str	r0, [r5, #0]
 8013370:	6128      	str	r0, [r5, #16]
 8013372:	b920      	cbnz	r0, 801337e <_svfiprintf_r+0x2e>
 8013374:	230c      	movs	r3, #12
 8013376:	603b      	str	r3, [r7, #0]
 8013378:	f04f 30ff 	mov.w	r0, #4294967295
 801337c:	e0d1      	b.n	8013522 <_svfiprintf_r+0x1d2>
 801337e:	2340      	movs	r3, #64	; 0x40
 8013380:	616b      	str	r3, [r5, #20]
 8013382:	2300      	movs	r3, #0
 8013384:	9309      	str	r3, [sp, #36]	; 0x24
 8013386:	2320      	movs	r3, #32
 8013388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801338c:	2330      	movs	r3, #48	; 0x30
 801338e:	f04f 0901 	mov.w	r9, #1
 8013392:	f8cd 800c 	str.w	r8, [sp, #12]
 8013396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801353c <_svfiprintf_r+0x1ec>
 801339a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801339e:	4623      	mov	r3, r4
 80133a0:	469a      	mov	sl, r3
 80133a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133a6:	b10a      	cbz	r2, 80133ac <_svfiprintf_r+0x5c>
 80133a8:	2a25      	cmp	r2, #37	; 0x25
 80133aa:	d1f9      	bne.n	80133a0 <_svfiprintf_r+0x50>
 80133ac:	ebba 0b04 	subs.w	fp, sl, r4
 80133b0:	d00b      	beq.n	80133ca <_svfiprintf_r+0x7a>
 80133b2:	465b      	mov	r3, fp
 80133b4:	4622      	mov	r2, r4
 80133b6:	4629      	mov	r1, r5
 80133b8:	4638      	mov	r0, r7
 80133ba:	f7ff ff6d 	bl	8013298 <__ssputs_r>
 80133be:	3001      	adds	r0, #1
 80133c0:	f000 80aa 	beq.w	8013518 <_svfiprintf_r+0x1c8>
 80133c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133c6:	445a      	add	r2, fp
 80133c8:	9209      	str	r2, [sp, #36]	; 0x24
 80133ca:	f89a 3000 	ldrb.w	r3, [sl]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f000 80a2 	beq.w	8013518 <_svfiprintf_r+0x1c8>
 80133d4:	2300      	movs	r3, #0
 80133d6:	f04f 32ff 	mov.w	r2, #4294967295
 80133da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133de:	f10a 0a01 	add.w	sl, sl, #1
 80133e2:	9304      	str	r3, [sp, #16]
 80133e4:	9307      	str	r3, [sp, #28]
 80133e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133ea:	931a      	str	r3, [sp, #104]	; 0x68
 80133ec:	4654      	mov	r4, sl
 80133ee:	2205      	movs	r2, #5
 80133f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133f4:	4851      	ldr	r0, [pc, #324]	; (801353c <_svfiprintf_r+0x1ec>)
 80133f6:	f7ff fb91 	bl	8012b1c <memchr>
 80133fa:	9a04      	ldr	r2, [sp, #16]
 80133fc:	b9d8      	cbnz	r0, 8013436 <_svfiprintf_r+0xe6>
 80133fe:	06d0      	lsls	r0, r2, #27
 8013400:	bf44      	itt	mi
 8013402:	2320      	movmi	r3, #32
 8013404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013408:	0711      	lsls	r1, r2, #28
 801340a:	bf44      	itt	mi
 801340c:	232b      	movmi	r3, #43	; 0x2b
 801340e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013412:	f89a 3000 	ldrb.w	r3, [sl]
 8013416:	2b2a      	cmp	r3, #42	; 0x2a
 8013418:	d015      	beq.n	8013446 <_svfiprintf_r+0xf6>
 801341a:	4654      	mov	r4, sl
 801341c:	2000      	movs	r0, #0
 801341e:	f04f 0c0a 	mov.w	ip, #10
 8013422:	9a07      	ldr	r2, [sp, #28]
 8013424:	4621      	mov	r1, r4
 8013426:	f811 3b01 	ldrb.w	r3, [r1], #1
 801342a:	3b30      	subs	r3, #48	; 0x30
 801342c:	2b09      	cmp	r3, #9
 801342e:	d94e      	bls.n	80134ce <_svfiprintf_r+0x17e>
 8013430:	b1b0      	cbz	r0, 8013460 <_svfiprintf_r+0x110>
 8013432:	9207      	str	r2, [sp, #28]
 8013434:	e014      	b.n	8013460 <_svfiprintf_r+0x110>
 8013436:	eba0 0308 	sub.w	r3, r0, r8
 801343a:	fa09 f303 	lsl.w	r3, r9, r3
 801343e:	4313      	orrs	r3, r2
 8013440:	46a2      	mov	sl, r4
 8013442:	9304      	str	r3, [sp, #16]
 8013444:	e7d2      	b.n	80133ec <_svfiprintf_r+0x9c>
 8013446:	9b03      	ldr	r3, [sp, #12]
 8013448:	1d19      	adds	r1, r3, #4
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	9103      	str	r1, [sp, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	bfbb      	ittet	lt
 8013452:	425b      	neglt	r3, r3
 8013454:	f042 0202 	orrlt.w	r2, r2, #2
 8013458:	9307      	strge	r3, [sp, #28]
 801345a:	9307      	strlt	r3, [sp, #28]
 801345c:	bfb8      	it	lt
 801345e:	9204      	strlt	r2, [sp, #16]
 8013460:	7823      	ldrb	r3, [r4, #0]
 8013462:	2b2e      	cmp	r3, #46	; 0x2e
 8013464:	d10c      	bne.n	8013480 <_svfiprintf_r+0x130>
 8013466:	7863      	ldrb	r3, [r4, #1]
 8013468:	2b2a      	cmp	r3, #42	; 0x2a
 801346a:	d135      	bne.n	80134d8 <_svfiprintf_r+0x188>
 801346c:	9b03      	ldr	r3, [sp, #12]
 801346e:	3402      	adds	r4, #2
 8013470:	1d1a      	adds	r2, r3, #4
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	9203      	str	r2, [sp, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	bfb8      	it	lt
 801347a:	f04f 33ff 	movlt.w	r3, #4294967295
 801347e:	9305      	str	r3, [sp, #20]
 8013480:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013540 <_svfiprintf_r+0x1f0>
 8013484:	2203      	movs	r2, #3
 8013486:	4650      	mov	r0, sl
 8013488:	7821      	ldrb	r1, [r4, #0]
 801348a:	f7ff fb47 	bl	8012b1c <memchr>
 801348e:	b140      	cbz	r0, 80134a2 <_svfiprintf_r+0x152>
 8013490:	2340      	movs	r3, #64	; 0x40
 8013492:	eba0 000a 	sub.w	r0, r0, sl
 8013496:	fa03 f000 	lsl.w	r0, r3, r0
 801349a:	9b04      	ldr	r3, [sp, #16]
 801349c:	3401      	adds	r4, #1
 801349e:	4303      	orrs	r3, r0
 80134a0:	9304      	str	r3, [sp, #16]
 80134a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134a6:	2206      	movs	r2, #6
 80134a8:	4826      	ldr	r0, [pc, #152]	; (8013544 <_svfiprintf_r+0x1f4>)
 80134aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80134ae:	f7ff fb35 	bl	8012b1c <memchr>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d038      	beq.n	8013528 <_svfiprintf_r+0x1d8>
 80134b6:	4b24      	ldr	r3, [pc, #144]	; (8013548 <_svfiprintf_r+0x1f8>)
 80134b8:	bb1b      	cbnz	r3, 8013502 <_svfiprintf_r+0x1b2>
 80134ba:	9b03      	ldr	r3, [sp, #12]
 80134bc:	3307      	adds	r3, #7
 80134be:	f023 0307 	bic.w	r3, r3, #7
 80134c2:	3308      	adds	r3, #8
 80134c4:	9303      	str	r3, [sp, #12]
 80134c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134c8:	4433      	add	r3, r6
 80134ca:	9309      	str	r3, [sp, #36]	; 0x24
 80134cc:	e767      	b.n	801339e <_svfiprintf_r+0x4e>
 80134ce:	460c      	mov	r4, r1
 80134d0:	2001      	movs	r0, #1
 80134d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80134d6:	e7a5      	b.n	8013424 <_svfiprintf_r+0xd4>
 80134d8:	2300      	movs	r3, #0
 80134da:	f04f 0c0a 	mov.w	ip, #10
 80134de:	4619      	mov	r1, r3
 80134e0:	3401      	adds	r4, #1
 80134e2:	9305      	str	r3, [sp, #20]
 80134e4:	4620      	mov	r0, r4
 80134e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134ea:	3a30      	subs	r2, #48	; 0x30
 80134ec:	2a09      	cmp	r2, #9
 80134ee:	d903      	bls.n	80134f8 <_svfiprintf_r+0x1a8>
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d0c5      	beq.n	8013480 <_svfiprintf_r+0x130>
 80134f4:	9105      	str	r1, [sp, #20]
 80134f6:	e7c3      	b.n	8013480 <_svfiprintf_r+0x130>
 80134f8:	4604      	mov	r4, r0
 80134fa:	2301      	movs	r3, #1
 80134fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013500:	e7f0      	b.n	80134e4 <_svfiprintf_r+0x194>
 8013502:	ab03      	add	r3, sp, #12
 8013504:	9300      	str	r3, [sp, #0]
 8013506:	462a      	mov	r2, r5
 8013508:	4638      	mov	r0, r7
 801350a:	4b10      	ldr	r3, [pc, #64]	; (801354c <_svfiprintf_r+0x1fc>)
 801350c:	a904      	add	r1, sp, #16
 801350e:	f7fe f879 	bl	8011604 <_printf_float>
 8013512:	1c42      	adds	r2, r0, #1
 8013514:	4606      	mov	r6, r0
 8013516:	d1d6      	bne.n	80134c6 <_svfiprintf_r+0x176>
 8013518:	89ab      	ldrh	r3, [r5, #12]
 801351a:	065b      	lsls	r3, r3, #25
 801351c:	f53f af2c 	bmi.w	8013378 <_svfiprintf_r+0x28>
 8013520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013522:	b01d      	add	sp, #116	; 0x74
 8013524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013528:	ab03      	add	r3, sp, #12
 801352a:	9300      	str	r3, [sp, #0]
 801352c:	462a      	mov	r2, r5
 801352e:	4638      	mov	r0, r7
 8013530:	4b06      	ldr	r3, [pc, #24]	; (801354c <_svfiprintf_r+0x1fc>)
 8013532:	a904      	add	r1, sp, #16
 8013534:	f7fe fb02 	bl	8011b3c <_printf_i>
 8013538:	e7eb      	b.n	8013512 <_svfiprintf_r+0x1c2>
 801353a:	bf00      	nop
 801353c:	0802d97c 	.word	0x0802d97c
 8013540:	0802d982 	.word	0x0802d982
 8013544:	0802d986 	.word	0x0802d986
 8013548:	08011605 	.word	0x08011605
 801354c:	08013299 	.word	0x08013299

08013550 <__assert_func>:
 8013550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013552:	4614      	mov	r4, r2
 8013554:	461a      	mov	r2, r3
 8013556:	4b09      	ldr	r3, [pc, #36]	; (801357c <__assert_func+0x2c>)
 8013558:	4605      	mov	r5, r0
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	68d8      	ldr	r0, [r3, #12]
 801355e:	b14c      	cbz	r4, 8013574 <__assert_func+0x24>
 8013560:	4b07      	ldr	r3, [pc, #28]	; (8013580 <__assert_func+0x30>)
 8013562:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013566:	9100      	str	r1, [sp, #0]
 8013568:	462b      	mov	r3, r5
 801356a:	4906      	ldr	r1, [pc, #24]	; (8013584 <__assert_func+0x34>)
 801356c:	f000 f80e 	bl	801358c <fiprintf>
 8013570:	f000 faa2 	bl	8013ab8 <abort>
 8013574:	4b04      	ldr	r3, [pc, #16]	; (8013588 <__assert_func+0x38>)
 8013576:	461c      	mov	r4, r3
 8013578:	e7f3      	b.n	8013562 <__assert_func+0x12>
 801357a:	bf00      	nop
 801357c:	20000174 	.word	0x20000174
 8013580:	0802d98d 	.word	0x0802d98d
 8013584:	0802d99a 	.word	0x0802d99a
 8013588:	0802d9c8 	.word	0x0802d9c8

0801358c <fiprintf>:
 801358c:	b40e      	push	{r1, r2, r3}
 801358e:	b503      	push	{r0, r1, lr}
 8013590:	4601      	mov	r1, r0
 8013592:	ab03      	add	r3, sp, #12
 8013594:	4805      	ldr	r0, [pc, #20]	; (80135ac <fiprintf+0x20>)
 8013596:	f853 2b04 	ldr.w	r2, [r3], #4
 801359a:	6800      	ldr	r0, [r0, #0]
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	f000 f88d 	bl	80136bc <_vfiprintf_r>
 80135a2:	b002      	add	sp, #8
 80135a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80135a8:	b003      	add	sp, #12
 80135aa:	4770      	bx	lr
 80135ac:	20000174 	.word	0x20000174

080135b0 <__retarget_lock_init_recursive>:
 80135b0:	4770      	bx	lr

080135b2 <__retarget_lock_acquire_recursive>:
 80135b2:	4770      	bx	lr

080135b4 <__retarget_lock_release_recursive>:
 80135b4:	4770      	bx	lr

080135b6 <__ascii_mbtowc>:
 80135b6:	b082      	sub	sp, #8
 80135b8:	b901      	cbnz	r1, 80135bc <__ascii_mbtowc+0x6>
 80135ba:	a901      	add	r1, sp, #4
 80135bc:	b142      	cbz	r2, 80135d0 <__ascii_mbtowc+0x1a>
 80135be:	b14b      	cbz	r3, 80135d4 <__ascii_mbtowc+0x1e>
 80135c0:	7813      	ldrb	r3, [r2, #0]
 80135c2:	600b      	str	r3, [r1, #0]
 80135c4:	7812      	ldrb	r2, [r2, #0]
 80135c6:	1e10      	subs	r0, r2, #0
 80135c8:	bf18      	it	ne
 80135ca:	2001      	movne	r0, #1
 80135cc:	b002      	add	sp, #8
 80135ce:	4770      	bx	lr
 80135d0:	4610      	mov	r0, r2
 80135d2:	e7fb      	b.n	80135cc <__ascii_mbtowc+0x16>
 80135d4:	f06f 0001 	mvn.w	r0, #1
 80135d8:	e7f8      	b.n	80135cc <__ascii_mbtowc+0x16>

080135da <memmove>:
 80135da:	4288      	cmp	r0, r1
 80135dc:	b510      	push	{r4, lr}
 80135de:	eb01 0402 	add.w	r4, r1, r2
 80135e2:	d902      	bls.n	80135ea <memmove+0x10>
 80135e4:	4284      	cmp	r4, r0
 80135e6:	4623      	mov	r3, r4
 80135e8:	d807      	bhi.n	80135fa <memmove+0x20>
 80135ea:	1e43      	subs	r3, r0, #1
 80135ec:	42a1      	cmp	r1, r4
 80135ee:	d008      	beq.n	8013602 <memmove+0x28>
 80135f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80135f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80135f8:	e7f8      	b.n	80135ec <memmove+0x12>
 80135fa:	4601      	mov	r1, r0
 80135fc:	4402      	add	r2, r0
 80135fe:	428a      	cmp	r2, r1
 8013600:	d100      	bne.n	8013604 <memmove+0x2a>
 8013602:	bd10      	pop	{r4, pc}
 8013604:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013608:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801360c:	e7f7      	b.n	80135fe <memmove+0x24>

0801360e <_realloc_r>:
 801360e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013612:	4680      	mov	r8, r0
 8013614:	4614      	mov	r4, r2
 8013616:	460e      	mov	r6, r1
 8013618:	b921      	cbnz	r1, 8013624 <_realloc_r+0x16>
 801361a:	4611      	mov	r1, r2
 801361c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013620:	f7fd bede 	b.w	80113e0 <_malloc_r>
 8013624:	b92a      	cbnz	r2, 8013632 <_realloc_r+0x24>
 8013626:	f7fd fe73 	bl	8011310 <_free_r>
 801362a:	4625      	mov	r5, r4
 801362c:	4628      	mov	r0, r5
 801362e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013632:	f000 fc61 	bl	8013ef8 <_malloc_usable_size_r>
 8013636:	4284      	cmp	r4, r0
 8013638:	4607      	mov	r7, r0
 801363a:	d802      	bhi.n	8013642 <_realloc_r+0x34>
 801363c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013640:	d812      	bhi.n	8013668 <_realloc_r+0x5a>
 8013642:	4621      	mov	r1, r4
 8013644:	4640      	mov	r0, r8
 8013646:	f7fd fecb 	bl	80113e0 <_malloc_r>
 801364a:	4605      	mov	r5, r0
 801364c:	2800      	cmp	r0, #0
 801364e:	d0ed      	beq.n	801362c <_realloc_r+0x1e>
 8013650:	42bc      	cmp	r4, r7
 8013652:	4622      	mov	r2, r4
 8013654:	4631      	mov	r1, r6
 8013656:	bf28      	it	cs
 8013658:	463a      	movcs	r2, r7
 801365a:	f7ff fa6d 	bl	8012b38 <memcpy>
 801365e:	4631      	mov	r1, r6
 8013660:	4640      	mov	r0, r8
 8013662:	f7fd fe55 	bl	8011310 <_free_r>
 8013666:	e7e1      	b.n	801362c <_realloc_r+0x1e>
 8013668:	4635      	mov	r5, r6
 801366a:	e7df      	b.n	801362c <_realloc_r+0x1e>

0801366c <__sfputc_r>:
 801366c:	6893      	ldr	r3, [r2, #8]
 801366e:	b410      	push	{r4}
 8013670:	3b01      	subs	r3, #1
 8013672:	2b00      	cmp	r3, #0
 8013674:	6093      	str	r3, [r2, #8]
 8013676:	da07      	bge.n	8013688 <__sfputc_r+0x1c>
 8013678:	6994      	ldr	r4, [r2, #24]
 801367a:	42a3      	cmp	r3, r4
 801367c:	db01      	blt.n	8013682 <__sfputc_r+0x16>
 801367e:	290a      	cmp	r1, #10
 8013680:	d102      	bne.n	8013688 <__sfputc_r+0x1c>
 8013682:	bc10      	pop	{r4}
 8013684:	f000 b94a 	b.w	801391c <__swbuf_r>
 8013688:	6813      	ldr	r3, [r2, #0]
 801368a:	1c58      	adds	r0, r3, #1
 801368c:	6010      	str	r0, [r2, #0]
 801368e:	7019      	strb	r1, [r3, #0]
 8013690:	4608      	mov	r0, r1
 8013692:	bc10      	pop	{r4}
 8013694:	4770      	bx	lr

08013696 <__sfputs_r>:
 8013696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013698:	4606      	mov	r6, r0
 801369a:	460f      	mov	r7, r1
 801369c:	4614      	mov	r4, r2
 801369e:	18d5      	adds	r5, r2, r3
 80136a0:	42ac      	cmp	r4, r5
 80136a2:	d101      	bne.n	80136a8 <__sfputs_r+0x12>
 80136a4:	2000      	movs	r0, #0
 80136a6:	e007      	b.n	80136b8 <__sfputs_r+0x22>
 80136a8:	463a      	mov	r2, r7
 80136aa:	4630      	mov	r0, r6
 80136ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136b0:	f7ff ffdc 	bl	801366c <__sfputc_r>
 80136b4:	1c43      	adds	r3, r0, #1
 80136b6:	d1f3      	bne.n	80136a0 <__sfputs_r+0xa>
 80136b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080136bc <_vfiprintf_r>:
 80136bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c0:	460d      	mov	r5, r1
 80136c2:	4614      	mov	r4, r2
 80136c4:	4698      	mov	r8, r3
 80136c6:	4606      	mov	r6, r0
 80136c8:	b09d      	sub	sp, #116	; 0x74
 80136ca:	b118      	cbz	r0, 80136d4 <_vfiprintf_r+0x18>
 80136cc:	6983      	ldr	r3, [r0, #24]
 80136ce:	b90b      	cbnz	r3, 80136d4 <_vfiprintf_r+0x18>
 80136d0:	f000 fb10 	bl	8013cf4 <__sinit>
 80136d4:	4b89      	ldr	r3, [pc, #548]	; (80138fc <_vfiprintf_r+0x240>)
 80136d6:	429d      	cmp	r5, r3
 80136d8:	d11b      	bne.n	8013712 <_vfiprintf_r+0x56>
 80136da:	6875      	ldr	r5, [r6, #4]
 80136dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136de:	07d9      	lsls	r1, r3, #31
 80136e0:	d405      	bmi.n	80136ee <_vfiprintf_r+0x32>
 80136e2:	89ab      	ldrh	r3, [r5, #12]
 80136e4:	059a      	lsls	r2, r3, #22
 80136e6:	d402      	bmi.n	80136ee <_vfiprintf_r+0x32>
 80136e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136ea:	f7ff ff62 	bl	80135b2 <__retarget_lock_acquire_recursive>
 80136ee:	89ab      	ldrh	r3, [r5, #12]
 80136f0:	071b      	lsls	r3, r3, #28
 80136f2:	d501      	bpl.n	80136f8 <_vfiprintf_r+0x3c>
 80136f4:	692b      	ldr	r3, [r5, #16]
 80136f6:	b9eb      	cbnz	r3, 8013734 <_vfiprintf_r+0x78>
 80136f8:	4629      	mov	r1, r5
 80136fa:	4630      	mov	r0, r6
 80136fc:	f000 f96e 	bl	80139dc <__swsetup_r>
 8013700:	b1c0      	cbz	r0, 8013734 <_vfiprintf_r+0x78>
 8013702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013704:	07dc      	lsls	r4, r3, #31
 8013706:	d50e      	bpl.n	8013726 <_vfiprintf_r+0x6a>
 8013708:	f04f 30ff 	mov.w	r0, #4294967295
 801370c:	b01d      	add	sp, #116	; 0x74
 801370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013712:	4b7b      	ldr	r3, [pc, #492]	; (8013900 <_vfiprintf_r+0x244>)
 8013714:	429d      	cmp	r5, r3
 8013716:	d101      	bne.n	801371c <_vfiprintf_r+0x60>
 8013718:	68b5      	ldr	r5, [r6, #8]
 801371a:	e7df      	b.n	80136dc <_vfiprintf_r+0x20>
 801371c:	4b79      	ldr	r3, [pc, #484]	; (8013904 <_vfiprintf_r+0x248>)
 801371e:	429d      	cmp	r5, r3
 8013720:	bf08      	it	eq
 8013722:	68f5      	ldreq	r5, [r6, #12]
 8013724:	e7da      	b.n	80136dc <_vfiprintf_r+0x20>
 8013726:	89ab      	ldrh	r3, [r5, #12]
 8013728:	0598      	lsls	r0, r3, #22
 801372a:	d4ed      	bmi.n	8013708 <_vfiprintf_r+0x4c>
 801372c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801372e:	f7ff ff41 	bl	80135b4 <__retarget_lock_release_recursive>
 8013732:	e7e9      	b.n	8013708 <_vfiprintf_r+0x4c>
 8013734:	2300      	movs	r3, #0
 8013736:	9309      	str	r3, [sp, #36]	; 0x24
 8013738:	2320      	movs	r3, #32
 801373a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801373e:	2330      	movs	r3, #48	; 0x30
 8013740:	f04f 0901 	mov.w	r9, #1
 8013744:	f8cd 800c 	str.w	r8, [sp, #12]
 8013748:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013908 <_vfiprintf_r+0x24c>
 801374c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013750:	4623      	mov	r3, r4
 8013752:	469a      	mov	sl, r3
 8013754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013758:	b10a      	cbz	r2, 801375e <_vfiprintf_r+0xa2>
 801375a:	2a25      	cmp	r2, #37	; 0x25
 801375c:	d1f9      	bne.n	8013752 <_vfiprintf_r+0x96>
 801375e:	ebba 0b04 	subs.w	fp, sl, r4
 8013762:	d00b      	beq.n	801377c <_vfiprintf_r+0xc0>
 8013764:	465b      	mov	r3, fp
 8013766:	4622      	mov	r2, r4
 8013768:	4629      	mov	r1, r5
 801376a:	4630      	mov	r0, r6
 801376c:	f7ff ff93 	bl	8013696 <__sfputs_r>
 8013770:	3001      	adds	r0, #1
 8013772:	f000 80aa 	beq.w	80138ca <_vfiprintf_r+0x20e>
 8013776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013778:	445a      	add	r2, fp
 801377a:	9209      	str	r2, [sp, #36]	; 0x24
 801377c:	f89a 3000 	ldrb.w	r3, [sl]
 8013780:	2b00      	cmp	r3, #0
 8013782:	f000 80a2 	beq.w	80138ca <_vfiprintf_r+0x20e>
 8013786:	2300      	movs	r3, #0
 8013788:	f04f 32ff 	mov.w	r2, #4294967295
 801378c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013790:	f10a 0a01 	add.w	sl, sl, #1
 8013794:	9304      	str	r3, [sp, #16]
 8013796:	9307      	str	r3, [sp, #28]
 8013798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801379c:	931a      	str	r3, [sp, #104]	; 0x68
 801379e:	4654      	mov	r4, sl
 80137a0:	2205      	movs	r2, #5
 80137a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137a6:	4858      	ldr	r0, [pc, #352]	; (8013908 <_vfiprintf_r+0x24c>)
 80137a8:	f7ff f9b8 	bl	8012b1c <memchr>
 80137ac:	9a04      	ldr	r2, [sp, #16]
 80137ae:	b9d8      	cbnz	r0, 80137e8 <_vfiprintf_r+0x12c>
 80137b0:	06d1      	lsls	r1, r2, #27
 80137b2:	bf44      	itt	mi
 80137b4:	2320      	movmi	r3, #32
 80137b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137ba:	0713      	lsls	r3, r2, #28
 80137bc:	bf44      	itt	mi
 80137be:	232b      	movmi	r3, #43	; 0x2b
 80137c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137c4:	f89a 3000 	ldrb.w	r3, [sl]
 80137c8:	2b2a      	cmp	r3, #42	; 0x2a
 80137ca:	d015      	beq.n	80137f8 <_vfiprintf_r+0x13c>
 80137cc:	4654      	mov	r4, sl
 80137ce:	2000      	movs	r0, #0
 80137d0:	f04f 0c0a 	mov.w	ip, #10
 80137d4:	9a07      	ldr	r2, [sp, #28]
 80137d6:	4621      	mov	r1, r4
 80137d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137dc:	3b30      	subs	r3, #48	; 0x30
 80137de:	2b09      	cmp	r3, #9
 80137e0:	d94e      	bls.n	8013880 <_vfiprintf_r+0x1c4>
 80137e2:	b1b0      	cbz	r0, 8013812 <_vfiprintf_r+0x156>
 80137e4:	9207      	str	r2, [sp, #28]
 80137e6:	e014      	b.n	8013812 <_vfiprintf_r+0x156>
 80137e8:	eba0 0308 	sub.w	r3, r0, r8
 80137ec:	fa09 f303 	lsl.w	r3, r9, r3
 80137f0:	4313      	orrs	r3, r2
 80137f2:	46a2      	mov	sl, r4
 80137f4:	9304      	str	r3, [sp, #16]
 80137f6:	e7d2      	b.n	801379e <_vfiprintf_r+0xe2>
 80137f8:	9b03      	ldr	r3, [sp, #12]
 80137fa:	1d19      	adds	r1, r3, #4
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	9103      	str	r1, [sp, #12]
 8013800:	2b00      	cmp	r3, #0
 8013802:	bfbb      	ittet	lt
 8013804:	425b      	neglt	r3, r3
 8013806:	f042 0202 	orrlt.w	r2, r2, #2
 801380a:	9307      	strge	r3, [sp, #28]
 801380c:	9307      	strlt	r3, [sp, #28]
 801380e:	bfb8      	it	lt
 8013810:	9204      	strlt	r2, [sp, #16]
 8013812:	7823      	ldrb	r3, [r4, #0]
 8013814:	2b2e      	cmp	r3, #46	; 0x2e
 8013816:	d10c      	bne.n	8013832 <_vfiprintf_r+0x176>
 8013818:	7863      	ldrb	r3, [r4, #1]
 801381a:	2b2a      	cmp	r3, #42	; 0x2a
 801381c:	d135      	bne.n	801388a <_vfiprintf_r+0x1ce>
 801381e:	9b03      	ldr	r3, [sp, #12]
 8013820:	3402      	adds	r4, #2
 8013822:	1d1a      	adds	r2, r3, #4
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	9203      	str	r2, [sp, #12]
 8013828:	2b00      	cmp	r3, #0
 801382a:	bfb8      	it	lt
 801382c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013830:	9305      	str	r3, [sp, #20]
 8013832:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801390c <_vfiprintf_r+0x250>
 8013836:	2203      	movs	r2, #3
 8013838:	4650      	mov	r0, sl
 801383a:	7821      	ldrb	r1, [r4, #0]
 801383c:	f7ff f96e 	bl	8012b1c <memchr>
 8013840:	b140      	cbz	r0, 8013854 <_vfiprintf_r+0x198>
 8013842:	2340      	movs	r3, #64	; 0x40
 8013844:	eba0 000a 	sub.w	r0, r0, sl
 8013848:	fa03 f000 	lsl.w	r0, r3, r0
 801384c:	9b04      	ldr	r3, [sp, #16]
 801384e:	3401      	adds	r4, #1
 8013850:	4303      	orrs	r3, r0
 8013852:	9304      	str	r3, [sp, #16]
 8013854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013858:	2206      	movs	r2, #6
 801385a:	482d      	ldr	r0, [pc, #180]	; (8013910 <_vfiprintf_r+0x254>)
 801385c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013860:	f7ff f95c 	bl	8012b1c <memchr>
 8013864:	2800      	cmp	r0, #0
 8013866:	d03f      	beq.n	80138e8 <_vfiprintf_r+0x22c>
 8013868:	4b2a      	ldr	r3, [pc, #168]	; (8013914 <_vfiprintf_r+0x258>)
 801386a:	bb1b      	cbnz	r3, 80138b4 <_vfiprintf_r+0x1f8>
 801386c:	9b03      	ldr	r3, [sp, #12]
 801386e:	3307      	adds	r3, #7
 8013870:	f023 0307 	bic.w	r3, r3, #7
 8013874:	3308      	adds	r3, #8
 8013876:	9303      	str	r3, [sp, #12]
 8013878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801387a:	443b      	add	r3, r7
 801387c:	9309      	str	r3, [sp, #36]	; 0x24
 801387e:	e767      	b.n	8013750 <_vfiprintf_r+0x94>
 8013880:	460c      	mov	r4, r1
 8013882:	2001      	movs	r0, #1
 8013884:	fb0c 3202 	mla	r2, ip, r2, r3
 8013888:	e7a5      	b.n	80137d6 <_vfiprintf_r+0x11a>
 801388a:	2300      	movs	r3, #0
 801388c:	f04f 0c0a 	mov.w	ip, #10
 8013890:	4619      	mov	r1, r3
 8013892:	3401      	adds	r4, #1
 8013894:	9305      	str	r3, [sp, #20]
 8013896:	4620      	mov	r0, r4
 8013898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801389c:	3a30      	subs	r2, #48	; 0x30
 801389e:	2a09      	cmp	r2, #9
 80138a0:	d903      	bls.n	80138aa <_vfiprintf_r+0x1ee>
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d0c5      	beq.n	8013832 <_vfiprintf_r+0x176>
 80138a6:	9105      	str	r1, [sp, #20]
 80138a8:	e7c3      	b.n	8013832 <_vfiprintf_r+0x176>
 80138aa:	4604      	mov	r4, r0
 80138ac:	2301      	movs	r3, #1
 80138ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80138b2:	e7f0      	b.n	8013896 <_vfiprintf_r+0x1da>
 80138b4:	ab03      	add	r3, sp, #12
 80138b6:	9300      	str	r3, [sp, #0]
 80138b8:	462a      	mov	r2, r5
 80138ba:	4630      	mov	r0, r6
 80138bc:	4b16      	ldr	r3, [pc, #88]	; (8013918 <_vfiprintf_r+0x25c>)
 80138be:	a904      	add	r1, sp, #16
 80138c0:	f7fd fea0 	bl	8011604 <_printf_float>
 80138c4:	4607      	mov	r7, r0
 80138c6:	1c78      	adds	r0, r7, #1
 80138c8:	d1d6      	bne.n	8013878 <_vfiprintf_r+0x1bc>
 80138ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138cc:	07d9      	lsls	r1, r3, #31
 80138ce:	d405      	bmi.n	80138dc <_vfiprintf_r+0x220>
 80138d0:	89ab      	ldrh	r3, [r5, #12]
 80138d2:	059a      	lsls	r2, r3, #22
 80138d4:	d402      	bmi.n	80138dc <_vfiprintf_r+0x220>
 80138d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138d8:	f7ff fe6c 	bl	80135b4 <__retarget_lock_release_recursive>
 80138dc:	89ab      	ldrh	r3, [r5, #12]
 80138de:	065b      	lsls	r3, r3, #25
 80138e0:	f53f af12 	bmi.w	8013708 <_vfiprintf_r+0x4c>
 80138e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138e6:	e711      	b.n	801370c <_vfiprintf_r+0x50>
 80138e8:	ab03      	add	r3, sp, #12
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	462a      	mov	r2, r5
 80138ee:	4630      	mov	r0, r6
 80138f0:	4b09      	ldr	r3, [pc, #36]	; (8013918 <_vfiprintf_r+0x25c>)
 80138f2:	a904      	add	r1, sp, #16
 80138f4:	f7fe f922 	bl	8011b3c <_printf_i>
 80138f8:	e7e4      	b.n	80138c4 <_vfiprintf_r+0x208>
 80138fa:	bf00      	nop
 80138fc:	0802daf4 	.word	0x0802daf4
 8013900:	0802db14 	.word	0x0802db14
 8013904:	0802dad4 	.word	0x0802dad4
 8013908:	0802d97c 	.word	0x0802d97c
 801390c:	0802d982 	.word	0x0802d982
 8013910:	0802d986 	.word	0x0802d986
 8013914:	08011605 	.word	0x08011605
 8013918:	08013697 	.word	0x08013697

0801391c <__swbuf_r>:
 801391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801391e:	460e      	mov	r6, r1
 8013920:	4614      	mov	r4, r2
 8013922:	4605      	mov	r5, r0
 8013924:	b118      	cbz	r0, 801392e <__swbuf_r+0x12>
 8013926:	6983      	ldr	r3, [r0, #24]
 8013928:	b90b      	cbnz	r3, 801392e <__swbuf_r+0x12>
 801392a:	f000 f9e3 	bl	8013cf4 <__sinit>
 801392e:	4b21      	ldr	r3, [pc, #132]	; (80139b4 <__swbuf_r+0x98>)
 8013930:	429c      	cmp	r4, r3
 8013932:	d12b      	bne.n	801398c <__swbuf_r+0x70>
 8013934:	686c      	ldr	r4, [r5, #4]
 8013936:	69a3      	ldr	r3, [r4, #24]
 8013938:	60a3      	str	r3, [r4, #8]
 801393a:	89a3      	ldrh	r3, [r4, #12]
 801393c:	071a      	lsls	r2, r3, #28
 801393e:	d52f      	bpl.n	80139a0 <__swbuf_r+0x84>
 8013940:	6923      	ldr	r3, [r4, #16]
 8013942:	b36b      	cbz	r3, 80139a0 <__swbuf_r+0x84>
 8013944:	6923      	ldr	r3, [r4, #16]
 8013946:	6820      	ldr	r0, [r4, #0]
 8013948:	b2f6      	uxtb	r6, r6
 801394a:	1ac0      	subs	r0, r0, r3
 801394c:	6963      	ldr	r3, [r4, #20]
 801394e:	4637      	mov	r7, r6
 8013950:	4283      	cmp	r3, r0
 8013952:	dc04      	bgt.n	801395e <__swbuf_r+0x42>
 8013954:	4621      	mov	r1, r4
 8013956:	4628      	mov	r0, r5
 8013958:	f000 f938 	bl	8013bcc <_fflush_r>
 801395c:	bb30      	cbnz	r0, 80139ac <__swbuf_r+0x90>
 801395e:	68a3      	ldr	r3, [r4, #8]
 8013960:	3001      	adds	r0, #1
 8013962:	3b01      	subs	r3, #1
 8013964:	60a3      	str	r3, [r4, #8]
 8013966:	6823      	ldr	r3, [r4, #0]
 8013968:	1c5a      	adds	r2, r3, #1
 801396a:	6022      	str	r2, [r4, #0]
 801396c:	701e      	strb	r6, [r3, #0]
 801396e:	6963      	ldr	r3, [r4, #20]
 8013970:	4283      	cmp	r3, r0
 8013972:	d004      	beq.n	801397e <__swbuf_r+0x62>
 8013974:	89a3      	ldrh	r3, [r4, #12]
 8013976:	07db      	lsls	r3, r3, #31
 8013978:	d506      	bpl.n	8013988 <__swbuf_r+0x6c>
 801397a:	2e0a      	cmp	r6, #10
 801397c:	d104      	bne.n	8013988 <__swbuf_r+0x6c>
 801397e:	4621      	mov	r1, r4
 8013980:	4628      	mov	r0, r5
 8013982:	f000 f923 	bl	8013bcc <_fflush_r>
 8013986:	b988      	cbnz	r0, 80139ac <__swbuf_r+0x90>
 8013988:	4638      	mov	r0, r7
 801398a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801398c:	4b0a      	ldr	r3, [pc, #40]	; (80139b8 <__swbuf_r+0x9c>)
 801398e:	429c      	cmp	r4, r3
 8013990:	d101      	bne.n	8013996 <__swbuf_r+0x7a>
 8013992:	68ac      	ldr	r4, [r5, #8]
 8013994:	e7cf      	b.n	8013936 <__swbuf_r+0x1a>
 8013996:	4b09      	ldr	r3, [pc, #36]	; (80139bc <__swbuf_r+0xa0>)
 8013998:	429c      	cmp	r4, r3
 801399a:	bf08      	it	eq
 801399c:	68ec      	ldreq	r4, [r5, #12]
 801399e:	e7ca      	b.n	8013936 <__swbuf_r+0x1a>
 80139a0:	4621      	mov	r1, r4
 80139a2:	4628      	mov	r0, r5
 80139a4:	f000 f81a 	bl	80139dc <__swsetup_r>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d0cb      	beq.n	8013944 <__swbuf_r+0x28>
 80139ac:	f04f 37ff 	mov.w	r7, #4294967295
 80139b0:	e7ea      	b.n	8013988 <__swbuf_r+0x6c>
 80139b2:	bf00      	nop
 80139b4:	0802daf4 	.word	0x0802daf4
 80139b8:	0802db14 	.word	0x0802db14
 80139bc:	0802dad4 	.word	0x0802dad4

080139c0 <__ascii_wctomb>:
 80139c0:	4603      	mov	r3, r0
 80139c2:	4608      	mov	r0, r1
 80139c4:	b141      	cbz	r1, 80139d8 <__ascii_wctomb+0x18>
 80139c6:	2aff      	cmp	r2, #255	; 0xff
 80139c8:	d904      	bls.n	80139d4 <__ascii_wctomb+0x14>
 80139ca:	228a      	movs	r2, #138	; 0x8a
 80139cc:	f04f 30ff 	mov.w	r0, #4294967295
 80139d0:	601a      	str	r2, [r3, #0]
 80139d2:	4770      	bx	lr
 80139d4:	2001      	movs	r0, #1
 80139d6:	700a      	strb	r2, [r1, #0]
 80139d8:	4770      	bx	lr
	...

080139dc <__swsetup_r>:
 80139dc:	4b32      	ldr	r3, [pc, #200]	; (8013aa8 <__swsetup_r+0xcc>)
 80139de:	b570      	push	{r4, r5, r6, lr}
 80139e0:	681d      	ldr	r5, [r3, #0]
 80139e2:	4606      	mov	r6, r0
 80139e4:	460c      	mov	r4, r1
 80139e6:	b125      	cbz	r5, 80139f2 <__swsetup_r+0x16>
 80139e8:	69ab      	ldr	r3, [r5, #24]
 80139ea:	b913      	cbnz	r3, 80139f2 <__swsetup_r+0x16>
 80139ec:	4628      	mov	r0, r5
 80139ee:	f000 f981 	bl	8013cf4 <__sinit>
 80139f2:	4b2e      	ldr	r3, [pc, #184]	; (8013aac <__swsetup_r+0xd0>)
 80139f4:	429c      	cmp	r4, r3
 80139f6:	d10f      	bne.n	8013a18 <__swsetup_r+0x3c>
 80139f8:	686c      	ldr	r4, [r5, #4]
 80139fa:	89a3      	ldrh	r3, [r4, #12]
 80139fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a00:	0719      	lsls	r1, r3, #28
 8013a02:	d42c      	bmi.n	8013a5e <__swsetup_r+0x82>
 8013a04:	06dd      	lsls	r5, r3, #27
 8013a06:	d411      	bmi.n	8013a2c <__swsetup_r+0x50>
 8013a08:	2309      	movs	r3, #9
 8013a0a:	6033      	str	r3, [r6, #0]
 8013a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a10:	f04f 30ff 	mov.w	r0, #4294967295
 8013a14:	81a3      	strh	r3, [r4, #12]
 8013a16:	e03e      	b.n	8013a96 <__swsetup_r+0xba>
 8013a18:	4b25      	ldr	r3, [pc, #148]	; (8013ab0 <__swsetup_r+0xd4>)
 8013a1a:	429c      	cmp	r4, r3
 8013a1c:	d101      	bne.n	8013a22 <__swsetup_r+0x46>
 8013a1e:	68ac      	ldr	r4, [r5, #8]
 8013a20:	e7eb      	b.n	80139fa <__swsetup_r+0x1e>
 8013a22:	4b24      	ldr	r3, [pc, #144]	; (8013ab4 <__swsetup_r+0xd8>)
 8013a24:	429c      	cmp	r4, r3
 8013a26:	bf08      	it	eq
 8013a28:	68ec      	ldreq	r4, [r5, #12]
 8013a2a:	e7e6      	b.n	80139fa <__swsetup_r+0x1e>
 8013a2c:	0758      	lsls	r0, r3, #29
 8013a2e:	d512      	bpl.n	8013a56 <__swsetup_r+0x7a>
 8013a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a32:	b141      	cbz	r1, 8013a46 <__swsetup_r+0x6a>
 8013a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a38:	4299      	cmp	r1, r3
 8013a3a:	d002      	beq.n	8013a42 <__swsetup_r+0x66>
 8013a3c:	4630      	mov	r0, r6
 8013a3e:	f7fd fc67 	bl	8011310 <_free_r>
 8013a42:	2300      	movs	r3, #0
 8013a44:	6363      	str	r3, [r4, #52]	; 0x34
 8013a46:	89a3      	ldrh	r3, [r4, #12]
 8013a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a4c:	81a3      	strh	r3, [r4, #12]
 8013a4e:	2300      	movs	r3, #0
 8013a50:	6063      	str	r3, [r4, #4]
 8013a52:	6923      	ldr	r3, [r4, #16]
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	89a3      	ldrh	r3, [r4, #12]
 8013a58:	f043 0308 	orr.w	r3, r3, #8
 8013a5c:	81a3      	strh	r3, [r4, #12]
 8013a5e:	6923      	ldr	r3, [r4, #16]
 8013a60:	b94b      	cbnz	r3, 8013a76 <__swsetup_r+0x9a>
 8013a62:	89a3      	ldrh	r3, [r4, #12]
 8013a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a6c:	d003      	beq.n	8013a76 <__swsetup_r+0x9a>
 8013a6e:	4621      	mov	r1, r4
 8013a70:	4630      	mov	r0, r6
 8013a72:	f000 fa01 	bl	8013e78 <__smakebuf_r>
 8013a76:	89a0      	ldrh	r0, [r4, #12]
 8013a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a7c:	f010 0301 	ands.w	r3, r0, #1
 8013a80:	d00a      	beq.n	8013a98 <__swsetup_r+0xbc>
 8013a82:	2300      	movs	r3, #0
 8013a84:	60a3      	str	r3, [r4, #8]
 8013a86:	6963      	ldr	r3, [r4, #20]
 8013a88:	425b      	negs	r3, r3
 8013a8a:	61a3      	str	r3, [r4, #24]
 8013a8c:	6923      	ldr	r3, [r4, #16]
 8013a8e:	b943      	cbnz	r3, 8013aa2 <__swsetup_r+0xc6>
 8013a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a94:	d1ba      	bne.n	8013a0c <__swsetup_r+0x30>
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	0781      	lsls	r1, r0, #30
 8013a9a:	bf58      	it	pl
 8013a9c:	6963      	ldrpl	r3, [r4, #20]
 8013a9e:	60a3      	str	r3, [r4, #8]
 8013aa0:	e7f4      	b.n	8013a8c <__swsetup_r+0xb0>
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	e7f7      	b.n	8013a96 <__swsetup_r+0xba>
 8013aa6:	bf00      	nop
 8013aa8:	20000174 	.word	0x20000174
 8013aac:	0802daf4 	.word	0x0802daf4
 8013ab0:	0802db14 	.word	0x0802db14
 8013ab4:	0802dad4 	.word	0x0802dad4

08013ab8 <abort>:
 8013ab8:	2006      	movs	r0, #6
 8013aba:	b508      	push	{r3, lr}
 8013abc:	f000 fa4c 	bl	8013f58 <raise>
 8013ac0:	2001      	movs	r0, #1
 8013ac2:	f7ef fb54 	bl	800316e <_exit>
	...

08013ac8 <__sflush_r>:
 8013ac8:	898a      	ldrh	r2, [r1, #12]
 8013aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013acc:	4605      	mov	r5, r0
 8013ace:	0710      	lsls	r0, r2, #28
 8013ad0:	460c      	mov	r4, r1
 8013ad2:	d457      	bmi.n	8013b84 <__sflush_r+0xbc>
 8013ad4:	684b      	ldr	r3, [r1, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	dc04      	bgt.n	8013ae4 <__sflush_r+0x1c>
 8013ada:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	dc01      	bgt.n	8013ae4 <__sflush_r+0x1c>
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ae6:	2e00      	cmp	r6, #0
 8013ae8:	d0fa      	beq.n	8013ae0 <__sflush_r+0x18>
 8013aea:	2300      	movs	r3, #0
 8013aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013af0:	682f      	ldr	r7, [r5, #0]
 8013af2:	602b      	str	r3, [r5, #0]
 8013af4:	d032      	beq.n	8013b5c <__sflush_r+0x94>
 8013af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013af8:	89a3      	ldrh	r3, [r4, #12]
 8013afa:	075a      	lsls	r2, r3, #29
 8013afc:	d505      	bpl.n	8013b0a <__sflush_r+0x42>
 8013afe:	6863      	ldr	r3, [r4, #4]
 8013b00:	1ac0      	subs	r0, r0, r3
 8013b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b04:	b10b      	cbz	r3, 8013b0a <__sflush_r+0x42>
 8013b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b08:	1ac0      	subs	r0, r0, r3
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b10:	4628      	mov	r0, r5
 8013b12:	6a21      	ldr	r1, [r4, #32]
 8013b14:	47b0      	blx	r6
 8013b16:	1c43      	adds	r3, r0, #1
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	d106      	bne.n	8013b2a <__sflush_r+0x62>
 8013b1c:	6829      	ldr	r1, [r5, #0]
 8013b1e:	291d      	cmp	r1, #29
 8013b20:	d82c      	bhi.n	8013b7c <__sflush_r+0xb4>
 8013b22:	4a29      	ldr	r2, [pc, #164]	; (8013bc8 <__sflush_r+0x100>)
 8013b24:	40ca      	lsrs	r2, r1
 8013b26:	07d6      	lsls	r6, r2, #31
 8013b28:	d528      	bpl.n	8013b7c <__sflush_r+0xb4>
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	6062      	str	r2, [r4, #4]
 8013b2e:	6922      	ldr	r2, [r4, #16]
 8013b30:	04d9      	lsls	r1, r3, #19
 8013b32:	6022      	str	r2, [r4, #0]
 8013b34:	d504      	bpl.n	8013b40 <__sflush_r+0x78>
 8013b36:	1c42      	adds	r2, r0, #1
 8013b38:	d101      	bne.n	8013b3e <__sflush_r+0x76>
 8013b3a:	682b      	ldr	r3, [r5, #0]
 8013b3c:	b903      	cbnz	r3, 8013b40 <__sflush_r+0x78>
 8013b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8013b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b42:	602f      	str	r7, [r5, #0]
 8013b44:	2900      	cmp	r1, #0
 8013b46:	d0cb      	beq.n	8013ae0 <__sflush_r+0x18>
 8013b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b4c:	4299      	cmp	r1, r3
 8013b4e:	d002      	beq.n	8013b56 <__sflush_r+0x8e>
 8013b50:	4628      	mov	r0, r5
 8013b52:	f7fd fbdd 	bl	8011310 <_free_r>
 8013b56:	2000      	movs	r0, #0
 8013b58:	6360      	str	r0, [r4, #52]	; 0x34
 8013b5a:	e7c2      	b.n	8013ae2 <__sflush_r+0x1a>
 8013b5c:	6a21      	ldr	r1, [r4, #32]
 8013b5e:	2301      	movs	r3, #1
 8013b60:	4628      	mov	r0, r5
 8013b62:	47b0      	blx	r6
 8013b64:	1c41      	adds	r1, r0, #1
 8013b66:	d1c7      	bne.n	8013af8 <__sflush_r+0x30>
 8013b68:	682b      	ldr	r3, [r5, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d0c4      	beq.n	8013af8 <__sflush_r+0x30>
 8013b6e:	2b1d      	cmp	r3, #29
 8013b70:	d001      	beq.n	8013b76 <__sflush_r+0xae>
 8013b72:	2b16      	cmp	r3, #22
 8013b74:	d101      	bne.n	8013b7a <__sflush_r+0xb2>
 8013b76:	602f      	str	r7, [r5, #0]
 8013b78:	e7b2      	b.n	8013ae0 <__sflush_r+0x18>
 8013b7a:	89a3      	ldrh	r3, [r4, #12]
 8013b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b80:	81a3      	strh	r3, [r4, #12]
 8013b82:	e7ae      	b.n	8013ae2 <__sflush_r+0x1a>
 8013b84:	690f      	ldr	r7, [r1, #16]
 8013b86:	2f00      	cmp	r7, #0
 8013b88:	d0aa      	beq.n	8013ae0 <__sflush_r+0x18>
 8013b8a:	0793      	lsls	r3, r2, #30
 8013b8c:	bf18      	it	ne
 8013b8e:	2300      	movne	r3, #0
 8013b90:	680e      	ldr	r6, [r1, #0]
 8013b92:	bf08      	it	eq
 8013b94:	694b      	ldreq	r3, [r1, #20]
 8013b96:	1bf6      	subs	r6, r6, r7
 8013b98:	600f      	str	r7, [r1, #0]
 8013b9a:	608b      	str	r3, [r1, #8]
 8013b9c:	2e00      	cmp	r6, #0
 8013b9e:	dd9f      	ble.n	8013ae0 <__sflush_r+0x18>
 8013ba0:	4633      	mov	r3, r6
 8013ba2:	463a      	mov	r2, r7
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	6a21      	ldr	r1, [r4, #32]
 8013ba8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8013bac:	47e0      	blx	ip
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	dc06      	bgt.n	8013bc0 <__sflush_r+0xf8>
 8013bb2:	89a3      	ldrh	r3, [r4, #12]
 8013bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bbc:	81a3      	strh	r3, [r4, #12]
 8013bbe:	e790      	b.n	8013ae2 <__sflush_r+0x1a>
 8013bc0:	4407      	add	r7, r0
 8013bc2:	1a36      	subs	r6, r6, r0
 8013bc4:	e7ea      	b.n	8013b9c <__sflush_r+0xd4>
 8013bc6:	bf00      	nop
 8013bc8:	20400001 	.word	0x20400001

08013bcc <_fflush_r>:
 8013bcc:	b538      	push	{r3, r4, r5, lr}
 8013bce:	690b      	ldr	r3, [r1, #16]
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	460c      	mov	r4, r1
 8013bd4:	b913      	cbnz	r3, 8013bdc <_fflush_r+0x10>
 8013bd6:	2500      	movs	r5, #0
 8013bd8:	4628      	mov	r0, r5
 8013bda:	bd38      	pop	{r3, r4, r5, pc}
 8013bdc:	b118      	cbz	r0, 8013be6 <_fflush_r+0x1a>
 8013bde:	6983      	ldr	r3, [r0, #24]
 8013be0:	b90b      	cbnz	r3, 8013be6 <_fflush_r+0x1a>
 8013be2:	f000 f887 	bl	8013cf4 <__sinit>
 8013be6:	4b14      	ldr	r3, [pc, #80]	; (8013c38 <_fflush_r+0x6c>)
 8013be8:	429c      	cmp	r4, r3
 8013bea:	d11b      	bne.n	8013c24 <_fflush_r+0x58>
 8013bec:	686c      	ldr	r4, [r5, #4]
 8013bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d0ef      	beq.n	8013bd6 <_fflush_r+0xa>
 8013bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013bf8:	07d0      	lsls	r0, r2, #31
 8013bfa:	d404      	bmi.n	8013c06 <_fflush_r+0x3a>
 8013bfc:	0599      	lsls	r1, r3, #22
 8013bfe:	d402      	bmi.n	8013c06 <_fflush_r+0x3a>
 8013c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c02:	f7ff fcd6 	bl	80135b2 <__retarget_lock_acquire_recursive>
 8013c06:	4628      	mov	r0, r5
 8013c08:	4621      	mov	r1, r4
 8013c0a:	f7ff ff5d 	bl	8013ac8 <__sflush_r>
 8013c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c10:	4605      	mov	r5, r0
 8013c12:	07da      	lsls	r2, r3, #31
 8013c14:	d4e0      	bmi.n	8013bd8 <_fflush_r+0xc>
 8013c16:	89a3      	ldrh	r3, [r4, #12]
 8013c18:	059b      	lsls	r3, r3, #22
 8013c1a:	d4dd      	bmi.n	8013bd8 <_fflush_r+0xc>
 8013c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c1e:	f7ff fcc9 	bl	80135b4 <__retarget_lock_release_recursive>
 8013c22:	e7d9      	b.n	8013bd8 <_fflush_r+0xc>
 8013c24:	4b05      	ldr	r3, [pc, #20]	; (8013c3c <_fflush_r+0x70>)
 8013c26:	429c      	cmp	r4, r3
 8013c28:	d101      	bne.n	8013c2e <_fflush_r+0x62>
 8013c2a:	68ac      	ldr	r4, [r5, #8]
 8013c2c:	e7df      	b.n	8013bee <_fflush_r+0x22>
 8013c2e:	4b04      	ldr	r3, [pc, #16]	; (8013c40 <_fflush_r+0x74>)
 8013c30:	429c      	cmp	r4, r3
 8013c32:	bf08      	it	eq
 8013c34:	68ec      	ldreq	r4, [r5, #12]
 8013c36:	e7da      	b.n	8013bee <_fflush_r+0x22>
 8013c38:	0802daf4 	.word	0x0802daf4
 8013c3c:	0802db14 	.word	0x0802db14
 8013c40:	0802dad4 	.word	0x0802dad4

08013c44 <std>:
 8013c44:	2300      	movs	r3, #0
 8013c46:	b510      	push	{r4, lr}
 8013c48:	4604      	mov	r4, r0
 8013c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8013c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c52:	6083      	str	r3, [r0, #8]
 8013c54:	8181      	strh	r1, [r0, #12]
 8013c56:	6643      	str	r3, [r0, #100]	; 0x64
 8013c58:	81c2      	strh	r2, [r0, #14]
 8013c5a:	6183      	str	r3, [r0, #24]
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	2208      	movs	r2, #8
 8013c60:	305c      	adds	r0, #92	; 0x5c
 8013c62:	f7fd fb4d 	bl	8011300 <memset>
 8013c66:	4b05      	ldr	r3, [pc, #20]	; (8013c7c <std+0x38>)
 8013c68:	6224      	str	r4, [r4, #32]
 8013c6a:	6263      	str	r3, [r4, #36]	; 0x24
 8013c6c:	4b04      	ldr	r3, [pc, #16]	; (8013c80 <std+0x3c>)
 8013c6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c70:	4b04      	ldr	r3, [pc, #16]	; (8013c84 <std+0x40>)
 8013c72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c74:	4b04      	ldr	r3, [pc, #16]	; (8013c88 <std+0x44>)
 8013c76:	6323      	str	r3, [r4, #48]	; 0x30
 8013c78:	bd10      	pop	{r4, pc}
 8013c7a:	bf00      	nop
 8013c7c:	08013f91 	.word	0x08013f91
 8013c80:	08013fb3 	.word	0x08013fb3
 8013c84:	08013feb 	.word	0x08013feb
 8013c88:	0801400f 	.word	0x0801400f

08013c8c <_cleanup_r>:
 8013c8c:	4901      	ldr	r1, [pc, #4]	; (8013c94 <_cleanup_r+0x8>)
 8013c8e:	f000 b8af 	b.w	8013df0 <_fwalk_reent>
 8013c92:	bf00      	nop
 8013c94:	08013bcd 	.word	0x08013bcd

08013c98 <__sfmoreglue>:
 8013c98:	2268      	movs	r2, #104	; 0x68
 8013c9a:	b570      	push	{r4, r5, r6, lr}
 8013c9c:	1e4d      	subs	r5, r1, #1
 8013c9e:	4355      	muls	r5, r2
 8013ca0:	460e      	mov	r6, r1
 8013ca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013ca6:	f7fd fb9b 	bl	80113e0 <_malloc_r>
 8013caa:	4604      	mov	r4, r0
 8013cac:	b140      	cbz	r0, 8013cc0 <__sfmoreglue+0x28>
 8013cae:	2100      	movs	r1, #0
 8013cb0:	e9c0 1600 	strd	r1, r6, [r0]
 8013cb4:	300c      	adds	r0, #12
 8013cb6:	60a0      	str	r0, [r4, #8]
 8013cb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cbc:	f7fd fb20 	bl	8011300 <memset>
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	bd70      	pop	{r4, r5, r6, pc}

08013cc4 <__sfp_lock_acquire>:
 8013cc4:	4801      	ldr	r0, [pc, #4]	; (8013ccc <__sfp_lock_acquire+0x8>)
 8013cc6:	f7ff bc74 	b.w	80135b2 <__retarget_lock_acquire_recursive>
 8013cca:	bf00      	nop
 8013ccc:	20001649 	.word	0x20001649

08013cd0 <__sfp_lock_release>:
 8013cd0:	4801      	ldr	r0, [pc, #4]	; (8013cd8 <__sfp_lock_release+0x8>)
 8013cd2:	f7ff bc6f 	b.w	80135b4 <__retarget_lock_release_recursive>
 8013cd6:	bf00      	nop
 8013cd8:	20001649 	.word	0x20001649

08013cdc <__sinit_lock_acquire>:
 8013cdc:	4801      	ldr	r0, [pc, #4]	; (8013ce4 <__sinit_lock_acquire+0x8>)
 8013cde:	f7ff bc68 	b.w	80135b2 <__retarget_lock_acquire_recursive>
 8013ce2:	bf00      	nop
 8013ce4:	2000164a 	.word	0x2000164a

08013ce8 <__sinit_lock_release>:
 8013ce8:	4801      	ldr	r0, [pc, #4]	; (8013cf0 <__sinit_lock_release+0x8>)
 8013cea:	f7ff bc63 	b.w	80135b4 <__retarget_lock_release_recursive>
 8013cee:	bf00      	nop
 8013cf0:	2000164a 	.word	0x2000164a

08013cf4 <__sinit>:
 8013cf4:	b510      	push	{r4, lr}
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	f7ff fff0 	bl	8013cdc <__sinit_lock_acquire>
 8013cfc:	69a3      	ldr	r3, [r4, #24]
 8013cfe:	b11b      	cbz	r3, 8013d08 <__sinit+0x14>
 8013d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d04:	f7ff bff0 	b.w	8013ce8 <__sinit_lock_release>
 8013d08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d0c:	6523      	str	r3, [r4, #80]	; 0x50
 8013d0e:	4b13      	ldr	r3, [pc, #76]	; (8013d5c <__sinit+0x68>)
 8013d10:	4a13      	ldr	r2, [pc, #76]	; (8013d60 <__sinit+0x6c>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d16:	42a3      	cmp	r3, r4
 8013d18:	bf08      	it	eq
 8013d1a:	2301      	moveq	r3, #1
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	bf08      	it	eq
 8013d20:	61a3      	streq	r3, [r4, #24]
 8013d22:	f000 f81f 	bl	8013d64 <__sfp>
 8013d26:	6060      	str	r0, [r4, #4]
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f000 f81b 	bl	8013d64 <__sfp>
 8013d2e:	60a0      	str	r0, [r4, #8]
 8013d30:	4620      	mov	r0, r4
 8013d32:	f000 f817 	bl	8013d64 <__sfp>
 8013d36:	2200      	movs	r2, #0
 8013d38:	2104      	movs	r1, #4
 8013d3a:	60e0      	str	r0, [r4, #12]
 8013d3c:	6860      	ldr	r0, [r4, #4]
 8013d3e:	f7ff ff81 	bl	8013c44 <std>
 8013d42:	2201      	movs	r2, #1
 8013d44:	2109      	movs	r1, #9
 8013d46:	68a0      	ldr	r0, [r4, #8]
 8013d48:	f7ff ff7c 	bl	8013c44 <std>
 8013d4c:	2202      	movs	r2, #2
 8013d4e:	2112      	movs	r1, #18
 8013d50:	68e0      	ldr	r0, [r4, #12]
 8013d52:	f7ff ff77 	bl	8013c44 <std>
 8013d56:	2301      	movs	r3, #1
 8013d58:	61a3      	str	r3, [r4, #24]
 8013d5a:	e7d1      	b.n	8013d00 <__sinit+0xc>
 8013d5c:	0802d75c 	.word	0x0802d75c
 8013d60:	08013c8d 	.word	0x08013c8d

08013d64 <__sfp>:
 8013d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d66:	4607      	mov	r7, r0
 8013d68:	f7ff ffac 	bl	8013cc4 <__sfp_lock_acquire>
 8013d6c:	4b1e      	ldr	r3, [pc, #120]	; (8013de8 <__sfp+0x84>)
 8013d6e:	681e      	ldr	r6, [r3, #0]
 8013d70:	69b3      	ldr	r3, [r6, #24]
 8013d72:	b913      	cbnz	r3, 8013d7a <__sfp+0x16>
 8013d74:	4630      	mov	r0, r6
 8013d76:	f7ff ffbd 	bl	8013cf4 <__sinit>
 8013d7a:	3648      	adds	r6, #72	; 0x48
 8013d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d80:	3b01      	subs	r3, #1
 8013d82:	d503      	bpl.n	8013d8c <__sfp+0x28>
 8013d84:	6833      	ldr	r3, [r6, #0]
 8013d86:	b30b      	cbz	r3, 8013dcc <__sfp+0x68>
 8013d88:	6836      	ldr	r6, [r6, #0]
 8013d8a:	e7f7      	b.n	8013d7c <__sfp+0x18>
 8013d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d90:	b9d5      	cbnz	r5, 8013dc8 <__sfp+0x64>
 8013d92:	4b16      	ldr	r3, [pc, #88]	; (8013dec <__sfp+0x88>)
 8013d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013d98:	60e3      	str	r3, [r4, #12]
 8013d9a:	6665      	str	r5, [r4, #100]	; 0x64
 8013d9c:	f7ff fc08 	bl	80135b0 <__retarget_lock_init_recursive>
 8013da0:	f7ff ff96 	bl	8013cd0 <__sfp_lock_release>
 8013da4:	2208      	movs	r2, #8
 8013da6:	4629      	mov	r1, r5
 8013da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013db0:	6025      	str	r5, [r4, #0]
 8013db2:	61a5      	str	r5, [r4, #24]
 8013db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013db8:	f7fd faa2 	bl	8011300 <memset>
 8013dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dc8:	3468      	adds	r4, #104	; 0x68
 8013dca:	e7d9      	b.n	8013d80 <__sfp+0x1c>
 8013dcc:	2104      	movs	r1, #4
 8013dce:	4638      	mov	r0, r7
 8013dd0:	f7ff ff62 	bl	8013c98 <__sfmoreglue>
 8013dd4:	4604      	mov	r4, r0
 8013dd6:	6030      	str	r0, [r6, #0]
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d1d5      	bne.n	8013d88 <__sfp+0x24>
 8013ddc:	f7ff ff78 	bl	8013cd0 <__sfp_lock_release>
 8013de0:	230c      	movs	r3, #12
 8013de2:	603b      	str	r3, [r7, #0]
 8013de4:	e7ee      	b.n	8013dc4 <__sfp+0x60>
 8013de6:	bf00      	nop
 8013de8:	0802d75c 	.word	0x0802d75c
 8013dec:	ffff0001 	.word	0xffff0001

08013df0 <_fwalk_reent>:
 8013df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013df4:	4606      	mov	r6, r0
 8013df6:	4688      	mov	r8, r1
 8013df8:	2700      	movs	r7, #0
 8013dfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013dfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e02:	f1b9 0901 	subs.w	r9, r9, #1
 8013e06:	d505      	bpl.n	8013e14 <_fwalk_reent+0x24>
 8013e08:	6824      	ldr	r4, [r4, #0]
 8013e0a:	2c00      	cmp	r4, #0
 8013e0c:	d1f7      	bne.n	8013dfe <_fwalk_reent+0xe>
 8013e0e:	4638      	mov	r0, r7
 8013e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e14:	89ab      	ldrh	r3, [r5, #12]
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d907      	bls.n	8013e2a <_fwalk_reent+0x3a>
 8013e1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	d003      	beq.n	8013e2a <_fwalk_reent+0x3a>
 8013e22:	4629      	mov	r1, r5
 8013e24:	4630      	mov	r0, r6
 8013e26:	47c0      	blx	r8
 8013e28:	4307      	orrs	r7, r0
 8013e2a:	3568      	adds	r5, #104	; 0x68
 8013e2c:	e7e9      	b.n	8013e02 <_fwalk_reent+0x12>

08013e2e <__swhatbuf_r>:
 8013e2e:	b570      	push	{r4, r5, r6, lr}
 8013e30:	460e      	mov	r6, r1
 8013e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e36:	4614      	mov	r4, r2
 8013e38:	2900      	cmp	r1, #0
 8013e3a:	461d      	mov	r5, r3
 8013e3c:	b096      	sub	sp, #88	; 0x58
 8013e3e:	da08      	bge.n	8013e52 <__swhatbuf_r+0x24>
 8013e40:	2200      	movs	r2, #0
 8013e42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e46:	602a      	str	r2, [r5, #0]
 8013e48:	061a      	lsls	r2, r3, #24
 8013e4a:	d410      	bmi.n	8013e6e <__swhatbuf_r+0x40>
 8013e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e50:	e00e      	b.n	8013e70 <__swhatbuf_r+0x42>
 8013e52:	466a      	mov	r2, sp
 8013e54:	f000 f902 	bl	801405c <_fstat_r>
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	dbf1      	blt.n	8013e40 <__swhatbuf_r+0x12>
 8013e5c:	9a01      	ldr	r2, [sp, #4]
 8013e5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013e62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013e66:	425a      	negs	r2, r3
 8013e68:	415a      	adcs	r2, r3
 8013e6a:	602a      	str	r2, [r5, #0]
 8013e6c:	e7ee      	b.n	8013e4c <__swhatbuf_r+0x1e>
 8013e6e:	2340      	movs	r3, #64	; 0x40
 8013e70:	2000      	movs	r0, #0
 8013e72:	6023      	str	r3, [r4, #0]
 8013e74:	b016      	add	sp, #88	; 0x58
 8013e76:	bd70      	pop	{r4, r5, r6, pc}

08013e78 <__smakebuf_r>:
 8013e78:	898b      	ldrh	r3, [r1, #12]
 8013e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e7c:	079d      	lsls	r5, r3, #30
 8013e7e:	4606      	mov	r6, r0
 8013e80:	460c      	mov	r4, r1
 8013e82:	d507      	bpl.n	8013e94 <__smakebuf_r+0x1c>
 8013e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e88:	6023      	str	r3, [r4, #0]
 8013e8a:	6123      	str	r3, [r4, #16]
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	6163      	str	r3, [r4, #20]
 8013e90:	b002      	add	sp, #8
 8013e92:	bd70      	pop	{r4, r5, r6, pc}
 8013e94:	466a      	mov	r2, sp
 8013e96:	ab01      	add	r3, sp, #4
 8013e98:	f7ff ffc9 	bl	8013e2e <__swhatbuf_r>
 8013e9c:	9900      	ldr	r1, [sp, #0]
 8013e9e:	4605      	mov	r5, r0
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	f7fd fa9d 	bl	80113e0 <_malloc_r>
 8013ea6:	b948      	cbnz	r0, 8013ebc <__smakebuf_r+0x44>
 8013ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013eac:	059a      	lsls	r2, r3, #22
 8013eae:	d4ef      	bmi.n	8013e90 <__smakebuf_r+0x18>
 8013eb0:	f023 0303 	bic.w	r3, r3, #3
 8013eb4:	f043 0302 	orr.w	r3, r3, #2
 8013eb8:	81a3      	strh	r3, [r4, #12]
 8013eba:	e7e3      	b.n	8013e84 <__smakebuf_r+0xc>
 8013ebc:	4b0d      	ldr	r3, [pc, #52]	; (8013ef4 <__smakebuf_r+0x7c>)
 8013ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ec0:	89a3      	ldrh	r3, [r4, #12]
 8013ec2:	6020      	str	r0, [r4, #0]
 8013ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ec8:	81a3      	strh	r3, [r4, #12]
 8013eca:	9b00      	ldr	r3, [sp, #0]
 8013ecc:	6120      	str	r0, [r4, #16]
 8013ece:	6163      	str	r3, [r4, #20]
 8013ed0:	9b01      	ldr	r3, [sp, #4]
 8013ed2:	b15b      	cbz	r3, 8013eec <__smakebuf_r+0x74>
 8013ed4:	4630      	mov	r0, r6
 8013ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013eda:	f000 f8d1 	bl	8014080 <_isatty_r>
 8013ede:	b128      	cbz	r0, 8013eec <__smakebuf_r+0x74>
 8013ee0:	89a3      	ldrh	r3, [r4, #12]
 8013ee2:	f023 0303 	bic.w	r3, r3, #3
 8013ee6:	f043 0301 	orr.w	r3, r3, #1
 8013eea:	81a3      	strh	r3, [r4, #12]
 8013eec:	89a0      	ldrh	r0, [r4, #12]
 8013eee:	4305      	orrs	r5, r0
 8013ef0:	81a5      	strh	r5, [r4, #12]
 8013ef2:	e7cd      	b.n	8013e90 <__smakebuf_r+0x18>
 8013ef4:	08013c8d 	.word	0x08013c8d

08013ef8 <_malloc_usable_size_r>:
 8013ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013efc:	1f18      	subs	r0, r3, #4
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	bfbc      	itt	lt
 8013f02:	580b      	ldrlt	r3, [r1, r0]
 8013f04:	18c0      	addlt	r0, r0, r3
 8013f06:	4770      	bx	lr

08013f08 <_raise_r>:
 8013f08:	291f      	cmp	r1, #31
 8013f0a:	b538      	push	{r3, r4, r5, lr}
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	460d      	mov	r5, r1
 8013f10:	d904      	bls.n	8013f1c <_raise_r+0x14>
 8013f12:	2316      	movs	r3, #22
 8013f14:	6003      	str	r3, [r0, #0]
 8013f16:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1a:	bd38      	pop	{r3, r4, r5, pc}
 8013f1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013f1e:	b112      	cbz	r2, 8013f26 <_raise_r+0x1e>
 8013f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f24:	b94b      	cbnz	r3, 8013f3a <_raise_r+0x32>
 8013f26:	4620      	mov	r0, r4
 8013f28:	f000 f830 	bl	8013f8c <_getpid_r>
 8013f2c:	462a      	mov	r2, r5
 8013f2e:	4601      	mov	r1, r0
 8013f30:	4620      	mov	r0, r4
 8013f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f36:	f000 b817 	b.w	8013f68 <_kill_r>
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	d00a      	beq.n	8013f54 <_raise_r+0x4c>
 8013f3e:	1c59      	adds	r1, r3, #1
 8013f40:	d103      	bne.n	8013f4a <_raise_r+0x42>
 8013f42:	2316      	movs	r3, #22
 8013f44:	6003      	str	r3, [r0, #0]
 8013f46:	2001      	movs	r0, #1
 8013f48:	e7e7      	b.n	8013f1a <_raise_r+0x12>
 8013f4a:	2400      	movs	r4, #0
 8013f4c:	4628      	mov	r0, r5
 8013f4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f52:	4798      	blx	r3
 8013f54:	2000      	movs	r0, #0
 8013f56:	e7e0      	b.n	8013f1a <_raise_r+0x12>

08013f58 <raise>:
 8013f58:	4b02      	ldr	r3, [pc, #8]	; (8013f64 <raise+0xc>)
 8013f5a:	4601      	mov	r1, r0
 8013f5c:	6818      	ldr	r0, [r3, #0]
 8013f5e:	f7ff bfd3 	b.w	8013f08 <_raise_r>
 8013f62:	bf00      	nop
 8013f64:	20000174 	.word	0x20000174

08013f68 <_kill_r>:
 8013f68:	b538      	push	{r3, r4, r5, lr}
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	4d06      	ldr	r5, [pc, #24]	; (8013f88 <_kill_r+0x20>)
 8013f6e:	4604      	mov	r4, r0
 8013f70:	4608      	mov	r0, r1
 8013f72:	4611      	mov	r1, r2
 8013f74:	602b      	str	r3, [r5, #0]
 8013f76:	f7ef f8ea 	bl	800314e <_kill>
 8013f7a:	1c43      	adds	r3, r0, #1
 8013f7c:	d102      	bne.n	8013f84 <_kill_r+0x1c>
 8013f7e:	682b      	ldr	r3, [r5, #0]
 8013f80:	b103      	cbz	r3, 8013f84 <_kill_r+0x1c>
 8013f82:	6023      	str	r3, [r4, #0]
 8013f84:	bd38      	pop	{r3, r4, r5, pc}
 8013f86:	bf00      	nop
 8013f88:	20001644 	.word	0x20001644

08013f8c <_getpid_r>:
 8013f8c:	f7ef b8d8 	b.w	8003140 <_getpid>

08013f90 <__sread>:
 8013f90:	b510      	push	{r4, lr}
 8013f92:	460c      	mov	r4, r1
 8013f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f98:	f000 f894 	bl	80140c4 <_read_r>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	bfab      	itete	ge
 8013fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8013fa4:	181b      	addge	r3, r3, r0
 8013fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013faa:	bfac      	ite	ge
 8013fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8013fae:	81a3      	strhlt	r3, [r4, #12]
 8013fb0:	bd10      	pop	{r4, pc}

08013fb2 <__swrite>:
 8013fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb6:	461f      	mov	r7, r3
 8013fb8:	898b      	ldrh	r3, [r1, #12]
 8013fba:	4605      	mov	r5, r0
 8013fbc:	05db      	lsls	r3, r3, #23
 8013fbe:	460c      	mov	r4, r1
 8013fc0:	4616      	mov	r6, r2
 8013fc2:	d505      	bpl.n	8013fd0 <__swrite+0x1e>
 8013fc4:	2302      	movs	r3, #2
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fcc:	f000 f868 	bl	80140a0 <_lseek_r>
 8013fd0:	89a3      	ldrh	r3, [r4, #12]
 8013fd2:	4632      	mov	r2, r6
 8013fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013fd8:	81a3      	strh	r3, [r4, #12]
 8013fda:	4628      	mov	r0, r5
 8013fdc:	463b      	mov	r3, r7
 8013fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe6:	f000 b817 	b.w	8014018 <_write_r>

08013fea <__sseek>:
 8013fea:	b510      	push	{r4, lr}
 8013fec:	460c      	mov	r4, r1
 8013fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ff2:	f000 f855 	bl	80140a0 <_lseek_r>
 8013ff6:	1c43      	adds	r3, r0, #1
 8013ff8:	89a3      	ldrh	r3, [r4, #12]
 8013ffa:	bf15      	itete	ne
 8013ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014006:	81a3      	strheq	r3, [r4, #12]
 8014008:	bf18      	it	ne
 801400a:	81a3      	strhne	r3, [r4, #12]
 801400c:	bd10      	pop	{r4, pc}

0801400e <__sclose>:
 801400e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014012:	f000 b813 	b.w	801403c <_close_r>
	...

08014018 <_write_r>:
 8014018:	b538      	push	{r3, r4, r5, lr}
 801401a:	4604      	mov	r4, r0
 801401c:	4608      	mov	r0, r1
 801401e:	4611      	mov	r1, r2
 8014020:	2200      	movs	r2, #0
 8014022:	4d05      	ldr	r5, [pc, #20]	; (8014038 <_write_r+0x20>)
 8014024:	602a      	str	r2, [r5, #0]
 8014026:	461a      	mov	r2, r3
 8014028:	f7ef f8c8 	bl	80031bc <_write>
 801402c:	1c43      	adds	r3, r0, #1
 801402e:	d102      	bne.n	8014036 <_write_r+0x1e>
 8014030:	682b      	ldr	r3, [r5, #0]
 8014032:	b103      	cbz	r3, 8014036 <_write_r+0x1e>
 8014034:	6023      	str	r3, [r4, #0]
 8014036:	bd38      	pop	{r3, r4, r5, pc}
 8014038:	20001644 	.word	0x20001644

0801403c <_close_r>:
 801403c:	b538      	push	{r3, r4, r5, lr}
 801403e:	2300      	movs	r3, #0
 8014040:	4d05      	ldr	r5, [pc, #20]	; (8014058 <_close_r+0x1c>)
 8014042:	4604      	mov	r4, r0
 8014044:	4608      	mov	r0, r1
 8014046:	602b      	str	r3, [r5, #0]
 8014048:	f7ef f8d4 	bl	80031f4 <_close>
 801404c:	1c43      	adds	r3, r0, #1
 801404e:	d102      	bne.n	8014056 <_close_r+0x1a>
 8014050:	682b      	ldr	r3, [r5, #0]
 8014052:	b103      	cbz	r3, 8014056 <_close_r+0x1a>
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	bd38      	pop	{r3, r4, r5, pc}
 8014058:	20001644 	.word	0x20001644

0801405c <_fstat_r>:
 801405c:	b538      	push	{r3, r4, r5, lr}
 801405e:	2300      	movs	r3, #0
 8014060:	4d06      	ldr	r5, [pc, #24]	; (801407c <_fstat_r+0x20>)
 8014062:	4604      	mov	r4, r0
 8014064:	4608      	mov	r0, r1
 8014066:	4611      	mov	r1, r2
 8014068:	602b      	str	r3, [r5, #0]
 801406a:	f7ef f8ce 	bl	800320a <_fstat>
 801406e:	1c43      	adds	r3, r0, #1
 8014070:	d102      	bne.n	8014078 <_fstat_r+0x1c>
 8014072:	682b      	ldr	r3, [r5, #0]
 8014074:	b103      	cbz	r3, 8014078 <_fstat_r+0x1c>
 8014076:	6023      	str	r3, [r4, #0]
 8014078:	bd38      	pop	{r3, r4, r5, pc}
 801407a:	bf00      	nop
 801407c:	20001644 	.word	0x20001644

08014080 <_isatty_r>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	2300      	movs	r3, #0
 8014084:	4d05      	ldr	r5, [pc, #20]	; (801409c <_isatty_r+0x1c>)
 8014086:	4604      	mov	r4, r0
 8014088:	4608      	mov	r0, r1
 801408a:	602b      	str	r3, [r5, #0]
 801408c:	f7ef f8cc 	bl	8003228 <_isatty>
 8014090:	1c43      	adds	r3, r0, #1
 8014092:	d102      	bne.n	801409a <_isatty_r+0x1a>
 8014094:	682b      	ldr	r3, [r5, #0]
 8014096:	b103      	cbz	r3, 801409a <_isatty_r+0x1a>
 8014098:	6023      	str	r3, [r4, #0]
 801409a:	bd38      	pop	{r3, r4, r5, pc}
 801409c:	20001644 	.word	0x20001644

080140a0 <_lseek_r>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4604      	mov	r4, r0
 80140a4:	4608      	mov	r0, r1
 80140a6:	4611      	mov	r1, r2
 80140a8:	2200      	movs	r2, #0
 80140aa:	4d05      	ldr	r5, [pc, #20]	; (80140c0 <_lseek_r+0x20>)
 80140ac:	602a      	str	r2, [r5, #0]
 80140ae:	461a      	mov	r2, r3
 80140b0:	f7ef f8c4 	bl	800323c <_lseek>
 80140b4:	1c43      	adds	r3, r0, #1
 80140b6:	d102      	bne.n	80140be <_lseek_r+0x1e>
 80140b8:	682b      	ldr	r3, [r5, #0]
 80140ba:	b103      	cbz	r3, 80140be <_lseek_r+0x1e>
 80140bc:	6023      	str	r3, [r4, #0]
 80140be:	bd38      	pop	{r3, r4, r5, pc}
 80140c0:	20001644 	.word	0x20001644

080140c4 <_read_r>:
 80140c4:	b538      	push	{r3, r4, r5, lr}
 80140c6:	4604      	mov	r4, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	4611      	mov	r1, r2
 80140cc:	2200      	movs	r2, #0
 80140ce:	4d05      	ldr	r5, [pc, #20]	; (80140e4 <_read_r+0x20>)
 80140d0:	602a      	str	r2, [r5, #0]
 80140d2:	461a      	mov	r2, r3
 80140d4:	f7ef f855 	bl	8003182 <_read>
 80140d8:	1c43      	adds	r3, r0, #1
 80140da:	d102      	bne.n	80140e2 <_read_r+0x1e>
 80140dc:	682b      	ldr	r3, [r5, #0]
 80140de:	b103      	cbz	r3, 80140e2 <_read_r+0x1e>
 80140e0:	6023      	str	r3, [r4, #0]
 80140e2:	bd38      	pop	{r3, r4, r5, pc}
 80140e4:	20001644 	.word	0x20001644

080140e8 <fmin>:
 80140e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ea:	4604      	mov	r4, r0
 80140ec:	460d      	mov	r5, r1
 80140ee:	4616      	mov	r6, r2
 80140f0:	461f      	mov	r7, r3
 80140f2:	f000 f813 	bl	801411c <__fpclassifyd>
 80140f6:	b158      	cbz	r0, 8014110 <fmin+0x28>
 80140f8:	4630      	mov	r0, r6
 80140fa:	4639      	mov	r1, r7
 80140fc:	f000 f80e 	bl	801411c <__fpclassifyd>
 8014100:	b140      	cbz	r0, 8014114 <fmin+0x2c>
 8014102:	4632      	mov	r2, r6
 8014104:	463b      	mov	r3, r7
 8014106:	4620      	mov	r0, r4
 8014108:	4629      	mov	r1, r5
 801410a:	f7ec fcc3 	bl	8000a94 <__aeabi_dcmplt>
 801410e:	b908      	cbnz	r0, 8014114 <fmin+0x2c>
 8014110:	4634      	mov	r4, r6
 8014112:	463d      	mov	r5, r7
 8014114:	4620      	mov	r0, r4
 8014116:	4629      	mov	r1, r5
 8014118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801411c <__fpclassifyd>:
 801411c:	b510      	push	{r4, lr}
 801411e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8014122:	460b      	mov	r3, r1
 8014124:	d019      	beq.n	801415a <__fpclassifyd+0x3e>
 8014126:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801412a:	490e      	ldr	r1, [pc, #56]	; (8014164 <__fpclassifyd+0x48>)
 801412c:	428a      	cmp	r2, r1
 801412e:	d90e      	bls.n	801414e <__fpclassifyd+0x32>
 8014130:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8014134:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8014138:	428a      	cmp	r2, r1
 801413a:	d908      	bls.n	801414e <__fpclassifyd+0x32>
 801413c:	4a0a      	ldr	r2, [pc, #40]	; (8014168 <__fpclassifyd+0x4c>)
 801413e:	4213      	tst	r3, r2
 8014140:	d007      	beq.n	8014152 <__fpclassifyd+0x36>
 8014142:	4294      	cmp	r4, r2
 8014144:	d107      	bne.n	8014156 <__fpclassifyd+0x3a>
 8014146:	fab0 f080 	clz	r0, r0
 801414a:	0940      	lsrs	r0, r0, #5
 801414c:	bd10      	pop	{r4, pc}
 801414e:	2004      	movs	r0, #4
 8014150:	e7fc      	b.n	801414c <__fpclassifyd+0x30>
 8014152:	2003      	movs	r0, #3
 8014154:	e7fa      	b.n	801414c <__fpclassifyd+0x30>
 8014156:	2000      	movs	r0, #0
 8014158:	e7f8      	b.n	801414c <__fpclassifyd+0x30>
 801415a:	2800      	cmp	r0, #0
 801415c:	d1ee      	bne.n	801413c <__fpclassifyd+0x20>
 801415e:	2002      	movs	r0, #2
 8014160:	e7f4      	b.n	801414c <__fpclassifyd+0x30>
 8014162:	bf00      	nop
 8014164:	7fdfffff 	.word	0x7fdfffff
 8014168:	7ff00000 	.word	0x7ff00000

0801416c <sqrt>:
 801416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801416e:	4606      	mov	r6, r0
 8014170:	460f      	mov	r7, r1
 8014172:	f000 f81f 	bl	80141b4 <__ieee754_sqrt>
 8014176:	4632      	mov	r2, r6
 8014178:	4604      	mov	r4, r0
 801417a:	460d      	mov	r5, r1
 801417c:	463b      	mov	r3, r7
 801417e:	4630      	mov	r0, r6
 8014180:	4639      	mov	r1, r7
 8014182:	f7ec fcaf 	bl	8000ae4 <__aeabi_dcmpun>
 8014186:	b990      	cbnz	r0, 80141ae <sqrt+0x42>
 8014188:	2200      	movs	r2, #0
 801418a:	2300      	movs	r3, #0
 801418c:	4630      	mov	r0, r6
 801418e:	4639      	mov	r1, r7
 8014190:	f7ec fc80 	bl	8000a94 <__aeabi_dcmplt>
 8014194:	b158      	cbz	r0, 80141ae <sqrt+0x42>
 8014196:	f7fd f879 	bl	801128c <__errno>
 801419a:	2321      	movs	r3, #33	; 0x21
 801419c:	2200      	movs	r2, #0
 801419e:	6003      	str	r3, [r0, #0]
 80141a0:	2300      	movs	r3, #0
 80141a2:	4610      	mov	r0, r2
 80141a4:	4619      	mov	r1, r3
 80141a6:	f7ec fb2d 	bl	8000804 <__aeabi_ddiv>
 80141aa:	4604      	mov	r4, r0
 80141ac:	460d      	mov	r5, r1
 80141ae:	4620      	mov	r0, r4
 80141b0:	4629      	mov	r1, r5
 80141b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080141b4 <__ieee754_sqrt>:
 80141b4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8014310 <__ieee754_sqrt+0x15c>
 80141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141bc:	ea3c 0c01 	bics.w	ip, ip, r1
 80141c0:	4606      	mov	r6, r0
 80141c2:	460d      	mov	r5, r1
 80141c4:	460c      	mov	r4, r1
 80141c6:	460a      	mov	r2, r1
 80141c8:	4607      	mov	r7, r0
 80141ca:	4603      	mov	r3, r0
 80141cc:	d10f      	bne.n	80141ee <__ieee754_sqrt+0x3a>
 80141ce:	4602      	mov	r2, r0
 80141d0:	460b      	mov	r3, r1
 80141d2:	f7ec f9ed 	bl	80005b0 <__aeabi_dmul>
 80141d6:	4602      	mov	r2, r0
 80141d8:	460b      	mov	r3, r1
 80141da:	4630      	mov	r0, r6
 80141dc:	4629      	mov	r1, r5
 80141de:	f7ec f831 	bl	8000244 <__adddf3>
 80141e2:	4606      	mov	r6, r0
 80141e4:	460d      	mov	r5, r1
 80141e6:	4630      	mov	r0, r6
 80141e8:	4629      	mov	r1, r5
 80141ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ee:	2900      	cmp	r1, #0
 80141f0:	dc0e      	bgt.n	8014210 <__ieee754_sqrt+0x5c>
 80141f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80141f6:	ea5c 0707 	orrs.w	r7, ip, r7
 80141fa:	d0f4      	beq.n	80141e6 <__ieee754_sqrt+0x32>
 80141fc:	b141      	cbz	r1, 8014210 <__ieee754_sqrt+0x5c>
 80141fe:	4602      	mov	r2, r0
 8014200:	460b      	mov	r3, r1
 8014202:	f7ec f81d 	bl	8000240 <__aeabi_dsub>
 8014206:	4602      	mov	r2, r0
 8014208:	460b      	mov	r3, r1
 801420a:	f7ec fafb 	bl	8000804 <__aeabi_ddiv>
 801420e:	e7e8      	b.n	80141e2 <__ieee754_sqrt+0x2e>
 8014210:	1521      	asrs	r1, r4, #20
 8014212:	d075      	beq.n	8014300 <__ieee754_sqrt+0x14c>
 8014214:	07cc      	lsls	r4, r1, #31
 8014216:	f04f 0400 	mov.w	r4, #0
 801421a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801421e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8014222:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014226:	bf5e      	ittt	pl
 8014228:	0fd9      	lsrpl	r1, r3, #31
 801422a:	005b      	lslpl	r3, r3, #1
 801422c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8014230:	0fd9      	lsrs	r1, r3, #31
 8014232:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8014236:	2516      	movs	r5, #22
 8014238:	4620      	mov	r0, r4
 801423a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801423e:	107f      	asrs	r7, r7, #1
 8014240:	005b      	lsls	r3, r3, #1
 8014242:	1846      	adds	r6, r0, r1
 8014244:	4296      	cmp	r6, r2
 8014246:	bfde      	ittt	le
 8014248:	1b92      	suble	r2, r2, r6
 801424a:	1870      	addle	r0, r6, r1
 801424c:	1864      	addle	r4, r4, r1
 801424e:	0052      	lsls	r2, r2, #1
 8014250:	3d01      	subs	r5, #1
 8014252:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014256:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801425a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801425e:	d1f0      	bne.n	8014242 <__ieee754_sqrt+0x8e>
 8014260:	4629      	mov	r1, r5
 8014262:	f04f 0e20 	mov.w	lr, #32
 8014266:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801426a:	4282      	cmp	r2, r0
 801426c:	eb06 0c05 	add.w	ip, r6, r5
 8014270:	dc02      	bgt.n	8014278 <__ieee754_sqrt+0xc4>
 8014272:	d113      	bne.n	801429c <__ieee754_sqrt+0xe8>
 8014274:	459c      	cmp	ip, r3
 8014276:	d811      	bhi.n	801429c <__ieee754_sqrt+0xe8>
 8014278:	f1bc 0f00 	cmp.w	ip, #0
 801427c:	eb0c 0506 	add.w	r5, ip, r6
 8014280:	da43      	bge.n	801430a <__ieee754_sqrt+0x156>
 8014282:	2d00      	cmp	r5, #0
 8014284:	db41      	blt.n	801430a <__ieee754_sqrt+0x156>
 8014286:	f100 0801 	add.w	r8, r0, #1
 801428a:	1a12      	subs	r2, r2, r0
 801428c:	4640      	mov	r0, r8
 801428e:	459c      	cmp	ip, r3
 8014290:	bf88      	it	hi
 8014292:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014296:	eba3 030c 	sub.w	r3, r3, ip
 801429a:	4431      	add	r1, r6
 801429c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80142a0:	f1be 0e01 	subs.w	lr, lr, #1
 80142a4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80142a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80142ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80142b0:	d1db      	bne.n	801426a <__ieee754_sqrt+0xb6>
 80142b2:	4313      	orrs	r3, r2
 80142b4:	d006      	beq.n	80142c4 <__ieee754_sqrt+0x110>
 80142b6:	1c48      	adds	r0, r1, #1
 80142b8:	bf0b      	itete	eq
 80142ba:	4671      	moveq	r1, lr
 80142bc:	3101      	addne	r1, #1
 80142be:	3401      	addeq	r4, #1
 80142c0:	f021 0101 	bicne.w	r1, r1, #1
 80142c4:	1063      	asrs	r3, r4, #1
 80142c6:	0849      	lsrs	r1, r1, #1
 80142c8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80142cc:	07e2      	lsls	r2, r4, #31
 80142ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80142d2:	bf48      	it	mi
 80142d4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80142d8:	460e      	mov	r6, r1
 80142da:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80142de:	e782      	b.n	80141e6 <__ieee754_sqrt+0x32>
 80142e0:	0ada      	lsrs	r2, r3, #11
 80142e2:	3815      	subs	r0, #21
 80142e4:	055b      	lsls	r3, r3, #21
 80142e6:	2a00      	cmp	r2, #0
 80142e8:	d0fa      	beq.n	80142e0 <__ieee754_sqrt+0x12c>
 80142ea:	02d5      	lsls	r5, r2, #11
 80142ec:	d50a      	bpl.n	8014304 <__ieee754_sqrt+0x150>
 80142ee:	f1c1 0420 	rsb	r4, r1, #32
 80142f2:	fa23 f404 	lsr.w	r4, r3, r4
 80142f6:	1e4d      	subs	r5, r1, #1
 80142f8:	408b      	lsls	r3, r1
 80142fa:	4322      	orrs	r2, r4
 80142fc:	1b41      	subs	r1, r0, r5
 80142fe:	e789      	b.n	8014214 <__ieee754_sqrt+0x60>
 8014300:	4608      	mov	r0, r1
 8014302:	e7f0      	b.n	80142e6 <__ieee754_sqrt+0x132>
 8014304:	0052      	lsls	r2, r2, #1
 8014306:	3101      	adds	r1, #1
 8014308:	e7ef      	b.n	80142ea <__ieee754_sqrt+0x136>
 801430a:	4680      	mov	r8, r0
 801430c:	e7bd      	b.n	801428a <__ieee754_sqrt+0xd6>
 801430e:	bf00      	nop
 8014310:	7ff00000 	.word	0x7ff00000

08014314 <_init>:
 8014314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014316:	bf00      	nop
 8014318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801431a:	bc08      	pop	{r3}
 801431c:	469e      	mov	lr, r3
 801431e:	4770      	bx	lr

08014320 <_fini>:
 8014320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014322:	bf00      	nop
 8014324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014326:	bc08      	pop	{r3}
 8014328:	469e      	mov	lr, r3
 801432a:	4770      	bx	lr
