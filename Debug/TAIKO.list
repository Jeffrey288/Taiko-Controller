
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001486c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001983c  08014a58  08014a58  00024a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e294  0802e294  00040338  2**0
                  CONTENTS
  4 .ARM          00000000  0802e294  0802e294  00040338  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802e294  0802e294  00040338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e294  0802e294  0003e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e298  0802e298  0003e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0802e29c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000338  0802e5d4  00040338  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001670  0802e5d4  00041670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024416  00000000  00000000  00040361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005768  00000000  00000000  00064777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002010  00000000  00000000  00069ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d90  00000000  00000000  0006bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022166  00000000  00000000  0006dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000293a9  00000000  00000000  0008fde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0393  00000000  00000000  000b918f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169522  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000990c  00000000  00000000  00169574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000338 	.word	0x20000338
 8000204:	00000000 	.word	0x00000000
 8000208:	08014a3c 	.word	0x08014a3c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000033c 	.word	0x2000033c
 8000224:	08014a3c 	.word	0x08014a3c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <AddDrum+0x38>)
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 800106e:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <AddDrum+0x3c>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8001078:	81bb      	strh	r3, [r7, #12]
 800107a:	2300      	movs	r3, #0
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001086:	f000 f809 	bl	800109c <AddTrack>
		.pos = 0
	});
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	08014bf8 	.word	0x08014bf8

0800109c <AddTrack>:

void AddTrack(AudioTrack track) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	463b      	mov	r3, r7
 80010a4:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <AddTrack+0x3c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	dc0d      	bgt.n	80010cc <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <AddTrack+0x3c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <AddTrack+0x3c>)
 80010b8:	600a      	str	r2, [r1, #0]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <AddTrack+0x40>)
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4413      	add	r3, r2
 80010c0:	463a      	mov	r2, r7
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010ca:	e000      	b.n	80010ce <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 80010cc:	bf00      	nop
}
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000078c 	.word	0x2000078c
 80010dc:	2000073c 	.word	0x2000073c

080010e0 <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <RemoveTrack+0x44>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd12      	ble.n	8001118 <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <RemoveTrack+0x44>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <RemoveTrack+0x44>)
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <RemoveTrack+0x44>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <RemoveTrack+0x48>)
 8001104:	4908      	ldr	r1, [pc, #32]	; (8001128 <RemoveTrack+0x48>)
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4403      	add	r3, r0
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	440a      	add	r2, r1
 800110e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001112:	e883 0003 	stmia.w	r3, {r0, r1}
 8001116:	e000      	b.n	800111a <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 8001118:	bf00      	nop
}
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000078c 	.word	0x2000078c
 8001128:	2000073c 	.word	0x2000073c

0800112c <PrecomputeMix>:

void PrecomputeMix() {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <PrecomputeMix+0x15c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc11      	bgt.n	800115e <PrecomputeMix+0x32>
		if (audio_dma_on) {
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <PrecomputeMix+0x160>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001142:	2100      	movs	r1, #0
 8001144:	4852      	ldr	r0, [pc, #328]	; (8001290 <PrecomputeMix+0x164>)
 8001146:	f003 fab7 	bl	80046b8 <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <PrecomputeMix+0x160>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8001150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001154:	2100      	movs	r1, #0
 8001156:	484f      	ldr	r0, [pc, #316]	; (8001294 <PrecomputeMix+0x168>)
 8001158:	f010 fc68 	bl	8011a2c <memset>
			}
		}

	}

}
 800115c:	e090      	b.n	8001280 <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <PrecomputeMix+0x160>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d126      	bne.n	80011b4 <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 8001166:	484c      	ldr	r0, [pc, #304]	; (8001298 <PrecomputeMix+0x16c>)
 8001168:	f008 f924 	bl	80093b4 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 800116c:	484b      	ldr	r0, [pc, #300]	; (800129c <PrecomputeMix+0x170>)
 800116e:	f008 f921 	bl	80093b4 <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8001172:	2304      	movs	r3, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <PrecomputeMix+0x168>)
 800117c:	2100      	movs	r1, #0
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <PrecomputeMix+0x164>)
 8001180:	f003 f9ea 	bl	8004558 <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <PrecomputeMix+0x174>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 8001192:	4842      	ldr	r0, [pc, #264]	; (800129c <PrecomputeMix+0x170>)
 8001194:	f008 f934 	bl	8009400 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8001198:	483f      	ldr	r0, [pc, #252]	; (8001298 <PrecomputeMix+0x16c>)
 800119a:	f008 f8b3 	bl	8009304 <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <PrecomputeMix+0x16c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <PrecomputeMix+0x16c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <PrecomputeMix+0x160>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e05e      	b.n	8001278 <PrecomputeMix+0x14c>
			int32_t sum = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
			int j = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 80011c2:	e033      	b.n	800122c <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 80011c4:	4a37      	ldr	r2, [pc, #220]	; (80012a4 <PrecomputeMix+0x178>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80011cc:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <PrecomputeMix+0x178>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	88da      	ldrh	r2, [r3, #6]
 80011d6:	1c53      	adds	r3, r2, #1
 80011d8:	b29c      	uxth	r4, r3
 80011da:	4832      	ldr	r0, [pc, #200]	; (80012a4 <PrecomputeMix+0x178>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4403      	add	r3, r0
 80011e2:	4620      	mov	r0, r4
 80011e4:	80d8      	strh	r0, [r3, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	440b      	add	r3, r1
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da00      	bge.n	80011f6 <PrecomputeMix+0xca>
 80011f4:	3303      	adds	r3, #3
 80011f6:	109b      	asrs	r3, r3, #2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <PrecomputeMix+0x178>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	88da      	ldrh	r2, [r3, #6]
 800120c:	4925      	ldr	r1, [pc, #148]	; (80012a4 <PrecomputeMix+0x178>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	889b      	ldrh	r3, [r3, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d905      	bls.n	8001226 <PrecomputeMix+0xfa>
					RemoveTrack(j);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff5e 	bl	80010e0 <RemoveTrack>
 8001224:	e002      	b.n	800122c <PrecomputeMix+0x100>
					j++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <PrecomputeMix+0x15c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbc6      	blt.n	80011c4 <PrecomputeMix+0x98>
			if (sum < -32768) {
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800123c:	da05      	bge.n	800124a <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <PrecomputeMix+0x168>)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2100      	movs	r1, #0
 8001244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001248:	e013      	b.n	8001272 <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001250:	db06      	blt.n	8001260 <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <PrecomputeMix+0x168>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800125a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800125e:	e008      	b.n	8001272 <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	b29b      	uxth	r3, r3
 8001264:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001268:	b299      	uxth	r1, r3
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <PrecomputeMix+0x168>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	db9c      	blt.n	80011ba <PrecomputeMix+0x8e>
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	2000078c 	.word	0x2000078c
 800128c:	20000790 	.word	0x20000790
 8001290:	20000b98 	.word	0x20000b98
 8001294:	20000354 	.word	0x20000354
 8001298:	20000d64 	.word	0x20000d64
 800129c:	20000df4 	.word	0x20000df4
 80012a0:	40000800 	.word	0x40000800
 80012a4:	2000073c 	.word	0x2000073c

080012a8 <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2110      	movs	r1, #16
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <ButtonPadInit+0x34>)
 80012b2:	f004 f860 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2120      	movs	r1, #32
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <ButtonPadInit+0x34>)
 80012bc:	f004 f85b 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <ButtonPadInit+0x34>)
 80012c6:	f004 f856 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <ButtonPadInit+0x38>)
 80012d2:	f004 f850 	bl	8005376 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40011800 	.word	0x40011800
 80012e0:	40011000 	.word	0x40011000

080012e4 <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <ButtonPadCallback+0x2c>)
 80012f4:	f004 f828 	bl	8005348 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 8001302:	f002 fb97 	bl	8003a34 <HAL_GetTick>
 8001306:	4603      	mov	r3, r0
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <ButtonPadCallback+0x30>)
 800130a:	6013      	str	r3, [r2, #0]
		return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e14c      	b.n	80015aa <ButtonPadCallback+0x2c6>
 8001310:	40011800 	.word	0x40011800
 8001314:	200007a4 	.word	0x200007a4
	}

	currentMillis = HAL_GetTick();
 8001318:	f002 fb8c 	bl	8003a34 <HAL_GetTick>
 800131c:	4603      	mov	r3, r0
 800131e:	4aa5      	ldr	r2, [pc, #660]	; (80015b4 <ButtonPadCallback+0x2d0>)
 8001320:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8001322:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8001328:	4ba2      	ldr	r3, [pc, #648]	; (80015b4 <ButtonPadCallback+0x2d0>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4ba3      	ldr	r3, [pc, #652]	; (80015bc <ButtonPadCallback+0x2d8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b14      	cmp	r3, #20
 8001334:	f240 8133 	bls.w	800159e <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8001338:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800133a:	220f      	movs	r2, #15
 800133c:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800133e:	4ba0      	ldr	r3, [pc, #640]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	4b9d      	ldr	r3, [pc, #628]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800134c:	2202      	movs	r2, #2
 800134e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001350:	499b      	ldr	r1, [pc, #620]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001352:	489c      	ldr	r0, [pc, #624]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001354:	f003 fe64 	bl	8005020 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001358:	2201      	movs	r2, #1
 800135a:	2110      	movs	r1, #16
 800135c:	4899      	ldr	r0, [pc, #612]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800135e:	f004 f80a 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2120      	movs	r1, #32
 8001366:	4897      	ldr	r0, [pc, #604]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001368:	f004 f805 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4894      	ldr	r0, [pc, #592]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001372:	f004 f800 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	4892      	ldr	r0, [pc, #584]	; (80015c8 <ButtonPadCallback+0x2e4>)
 800137e:	f003 fffa 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8001382:	2101      	movs	r1, #1
 8001384:	488f      	ldr	r0, [pc, #572]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001386:	f003 ffdf 	bl	8005348 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <ButtonPadCallback+0xb8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <ButtonPadCallback+0xb8>
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001398:	2210      	movs	r2, #16
 800139a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 800139c:	2102      	movs	r1, #2
 800139e:	4889      	ldr	r0, [pc, #548]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013a0:	f003 ffd2 	bl	8005348 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <ButtonPadCallback+0xd2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d102      	bne.n	80013b6 <ButtonPadCallback+0xd2>
 80013b0:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013b2:	220f      	movs	r2, #15
 80013b4:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 80013b6:	2104      	movs	r1, #4
 80013b8:	4882      	ldr	r0, [pc, #520]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013ba:	f003 ffc5 	bl	8005348 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <ButtonPadCallback+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d102      	bne.n	80013d0 <ButtonPadCallback+0xec>
 80013ca:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013cc:	220e      	movs	r2, #14
 80013ce:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 80013d0:	2108      	movs	r1, #8
 80013d2:	487c      	ldr	r0, [pc, #496]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013d4:	f003 ffb8 	bl	8005348 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <ButtonPadCallback+0x106>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d102      	bne.n	80013ea <ButtonPadCallback+0x106>
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013e6:	220d      	movs	r2, #13
 80013e8:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4875      	ldr	r0, [pc, #468]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013f0:	f003 ffc1 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2120      	movs	r1, #32
 80013f8:	4872      	ldr	r0, [pc, #456]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013fa:	f003 ffbc 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 80013fe:	2101      	movs	r1, #1
 8001400:	4870      	ldr	r0, [pc, #448]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001402:	f003 ffa1 	bl	8005348 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <ButtonPadCallback+0x134>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <ButtonPadCallback+0x134>
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001414:	220c      	movs	r2, #12
 8001416:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8001418:	2102      	movs	r1, #2
 800141a:	486a      	ldr	r0, [pc, #424]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800141c:	f003 ff94 	bl	8005348 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <ButtonPadCallback+0x14e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d102      	bne.n	8001432 <ButtonPadCallback+0x14e>
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800142e:	220b      	movs	r2, #11
 8001430:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8001432:	2104      	movs	r1, #4
 8001434:	4863      	ldr	r0, [pc, #396]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001436:	f003 ff87 	bl	8005348 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <ButtonPadCallback+0x168>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d102      	bne.n	800144c <ButtonPadCallback+0x168>
 8001446:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001448:	220a      	movs	r2, #10
 800144a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 800144c:	2108      	movs	r1, #8
 800144e:	485d      	ldr	r0, [pc, #372]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001450:	f003 ff7a 	bl	8005348 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <ButtonPadCallback+0x182>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d102      	bne.n	8001466 <ButtonPadCallback+0x182>
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001462:	2209      	movs	r2, #9
 8001464:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	4856      	ldr	r0, [pc, #344]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800146c:	f003 ff83 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4853      	ldr	r0, [pc, #332]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001476:	f003 ff7e 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 800147a:	2101      	movs	r1, #1
 800147c:	4851      	ldr	r0, [pc, #324]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800147e:	f003 ff63 	bl	8005348 <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <ButtonPadCallback+0x1b0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <ButtonPadCallback+0x1b0>
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001490:	2208      	movs	r2, #8
 8001492:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8001494:	2102      	movs	r1, #2
 8001496:	484b      	ldr	r0, [pc, #300]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001498:	f003 ff56 	bl	8005348 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <ButtonPadCallback+0x1ca>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d102      	bne.n	80014ae <ButtonPadCallback+0x1ca>
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 80014ae:	2104      	movs	r1, #4
 80014b0:	4844      	ldr	r0, [pc, #272]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014b2:	f003 ff49 	bl	8005348 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <ButtonPadCallback+0x1e4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d102      	bne.n	80014c8 <ButtonPadCallback+0x1e4>
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014c4:	2206      	movs	r2, #6
 80014c6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 80014c8:	2108      	movs	r1, #8
 80014ca:	483e      	ldr	r0, [pc, #248]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014cc:	f003 ff3c 	bl	8005348 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <ButtonPadCallback+0x1fe>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d102      	bne.n	80014e2 <ButtonPadCallback+0x1fe>
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014de:	2205      	movs	r2, #5
 80014e0:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2140      	movs	r1, #64	; 0x40
 80014e6:	4837      	ldr	r0, [pc, #220]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014e8:	f003 ff45 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <ButtonPadCallback+0x2e4>)
 80014f4:	f003 ff3f 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 80014f8:	2101      	movs	r1, #1
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014fc:	f003 ff24 	bl	8005348 <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <ButtonPadCallback+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <ButtonPadCallback+0x22e>
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800150e:	2204      	movs	r2, #4
 8001510:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 8001512:	2102      	movs	r1, #2
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001516:	f003 ff17 	bl	8005348 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <ButtonPadCallback+0x248>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d102      	bne.n	800152c <ButtonPadCallback+0x248>
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001528:	2203      	movs	r2, #3
 800152a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 800152c:	2104      	movs	r1, #4
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001530:	f003 ff0a 	bl	8005348 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <ButtonPadCallback+0x262>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d102      	bne.n	8001546 <ButtonPadCallback+0x262>
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001542:	2202      	movs	r2, #2
 8001544:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 8001546:	2108      	movs	r1, #8
 8001548:	481e      	ldr	r0, [pc, #120]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800154a:	f003 fefd 	bl	8005348 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <ButtonPadCallback+0x27c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b08      	cmp	r3, #8
 8001558:	d102      	bne.n	8001560 <ButtonPadCallback+0x27c>
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800155c:	2201      	movs	r2, #1
 800155e:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	2110      	movs	r1, #16
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001566:	f003 ff06 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2120      	movs	r1, #32
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001570:	f003 ff01 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800157a:	f003 fefc 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <ButtonPadCallback+0x2e4>)
 8001586:	f003 fef6 	bl	8005376 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <ButtonPadCallback+0x2e8>)
 800158e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001592:	2202      	movs	r2, #2
 8001594:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800159a:	f003 fd41 	bl	8005020 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <ButtonPadCallback+0x2d0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <ButtonPadCallback+0x2d8>)
 80015a4:	6013      	str	r3, [r2, #0]
	return keyPressed;
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80015a8:	881b      	ldrh	r3, [r3, #0]

}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200007a8 	.word	0x200007a8
 80015b8:	200007ac 	.word	0x200007ac
 80015bc:	200007a4 	.word	0x200007a4
 80015c0:	20000794 	.word	0x20000794
 80015c4:	40011800 	.word	0x40011800
 80015c8:	40011000 	.word	0x40011000
 80015cc:	10310000 	.word	0x10310000

080015d0 <DrumInit>:
uint32_t drum_sensor_values[NUM_DRUMS];
DrumStruct drums[NUM_DRUMS];
DrumOutputDevice drum_output_device;
uint32_t drum_max_val[NUM_DRUMS] = {0};

void DrumInit() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80015d6:	af00      	add	r7, sp, #0

	// init ADC
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 80015d8:	2204      	movs	r2, #4
 80015da:	49c2      	ldr	r1, [pc, #776]	; (80018e4 <DrumInit+0x314>)
 80015dc:	48c2      	ldr	r0, [pc, #776]	; (80018e8 <DrumInit+0x318>)
 80015de:	f002 fb41 	bl	8003c64 <HAL_ADC_Start_DMA>

	// init drums struct
	drum_output_device = DRUM_OUTPUT_NONE;
 80015e2:	4bc2      	ldr	r3, [pc, #776]	; (80018ec <DrumInit+0x31c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
//	drum_output_callback = &DrumOutputDefault;
	for (int i = 0; i < NUM_DRUMS; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80015ee:	e070      	b.n	80016d2 <DrumInit+0x102>
		drums[i].type = i;
 80015f0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	49be      	ldr	r1, [pc, #760]	; (80018f0 <DrumInit+0x320>)
 80015f8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	4602      	mov	r2, r0
 8001608:	701a      	strb	r2, [r3, #0]
		if (drums[i].type == DRUM_LEFT_KA || drums[i].type == DRUM_RIGHT_KA)
 800160a:	49b9      	ldr	r1, [pc, #740]	; (80018f0 <DrumInit+0x320>)
 800160c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	440b      	add	r3, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00a      	beq.n	8001636 <DrumInit+0x66>
 8001620:	49b3      	ldr	r1, [pc, #716]	; (80018f0 <DrumInit+0x320>)
 8001622:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	440b      	add	r3, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d10b      	bne.n	800164e <DrumInit+0x7e>
			drums[i].sound = DRUM_KA;
 8001636:	49ae      	ldr	r1, [pc, #696]	; (80018f0 <DrumInit+0x320>)
 8001638:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	440b      	add	r3, r1
 8001646:	3301      	adds	r3, #1
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e00a      	b.n	8001664 <DrumInit+0x94>
		else
			drums[i].sound = DRUM_DON;
 800164e:	49a8      	ldr	r1, [pc, #672]	; (80018f0 <DrumInit+0x320>)
 8001650:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	3301      	adds	r3, #1
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 8001664:	49a2      	ldr	r1, [pc, #648]	; (80018f0 <DrumInit+0x320>)
 8001666:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	440b      	add	r3, r1
 8001674:	3308      	adds	r3, #8
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 800167a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4a98      	ldr	r2, [pc, #608]	; (80018e4 <DrumInit+0x314>)
 8001682:	1899      	adds	r1, r3, r2
 8001684:	489a      	ldr	r0, [pc, #616]	; (80018f0 <DrumInit+0x320>)
 8001686:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4403      	add	r3, r0
 8001694:	3310      	adds	r3, #16
 8001696:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 8001698:	4995      	ldr	r1, [pc, #596]	; (80018f0 <DrumInit+0x320>)
 800169a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80016ae:	f002 f9c1 	bl	8003a34 <HAL_GetTick>
 80016b2:	4601      	mov	r1, r0
 80016b4:	488e      	ldr	r0, [pc, #568]	; (80018f0 <DrumInit+0x320>)
 80016b6:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4403      	add	r3, r0
 80016c4:	330c      	adds	r3, #12
 80016c6:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80016c8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80016d2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	dd8a      	ble.n	80015f0 <DrumInit+0x20>

	// deal with sd card stuff
	// Format: {drum[0], drum[1], drum[2], drum[3], checksum}
	FIL file;
	uint16_t temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80016da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016de:	2203      	movs	r2, #3
 80016e0:	4984      	ldr	r1, [pc, #528]	; (80018f4 <DrumInit+0x324>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00e fdf2 	bl	80102cc <f_open>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	if (fresult == FR_OK) {
 80016ee:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 8090 	bne.w	8001818 <DrumInit+0x248>
		uint32_t buff[5];
		fresult = f_read(&file, buff, 5 * 4, &temp);
 80016f8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80016fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001700:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001704:	2214      	movs	r2, #20
 8001706:	f00f f85a 	bl	80107be <f_read>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		if (buff[0] + buff[1] + buff[2] + buff[3] == buff[4]) {
 8001710:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001714:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800171e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	441a      	add	r2, r3
 8001726:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800172a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	441a      	add	r2, r3
 8001732:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001736:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	441a      	add	r2, r3
 800173e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001742:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d11f      	bne.n	800178c <DrumInit+0x1bc>
			for (int i = 0; i < 4; i++) drums[i].sensor_thresh = buff[i];
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001752:	e016      	b.n	8001782 <DrumInit+0x1b2>
 8001754:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001758:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800175c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001764:	4862      	ldr	r0, [pc, #392]	; (80018f0 <DrumInit+0x320>)
 8001766:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4403      	add	r3, r0
 8001774:	3328      	adds	r3, #40	; 0x28
 8001776:	6019      	str	r1, [r3, #0]
 8001778:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800177c:	3301      	adds	r3, #1
 800177e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001782:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001786:	2b03      	cmp	r3, #3
 8001788:	dde4      	ble.n	8001754 <DrumInit+0x184>
 800178a:	e03d      	b.n	8001808 <DrumInit+0x238>
		} else {
			DrumCalibrate();
 800178c:	f000 f96c 	bl	8001a68 <DrumCalibrate>
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <DrumInit+0x320>)
 8001792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001794:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001798:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <DrumInit+0x320>)
 80017a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <DrumInit+0x320>)
 80017ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <DrumInit+0x320>)
 80017be:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80017c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017c6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017ca:	60da      	str	r2, [r3, #12]
					drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80017cc:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <DrumInit+0x320>)
 80017ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <DrumInit+0x320>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	441a      	add	r2, r3
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <DrumInit+0x320>)
 80017d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017dc:	441a      	add	r2, r3
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <DrumInit+0x320>)
 80017e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80017e4:	441a      	add	r2, r3
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80017e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017ea:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017ee:	611a      	str	r2, [r3, #16]
			fresult = f_write(&file, buff, 5 * 4, &temp);
 80017f0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80017f4:	f107 0114 	add.w	r1, r7, #20
 80017f8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80017fc:	2214      	movs	r2, #20
 80017fe:	f00f f949 	bl	8010a94 <f_write>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		}
		LCD_Print(0, 19, "Success: Have file, reading... %d", fresult);
 8001808:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800180c:	4a3a      	ldr	r2, [pc, #232]	; (80018f8 <DrumInit+0x328>)
 800180e:	2113      	movs	r1, #19
 8001810:	2000      	movs	r0, #0
 8001812:	f000 ffe7 	bl	80027e4 <LCD_Print>
 8001816:	e05a      	b.n	80018ce <DrumInit+0x2fe>
	} else if (fresult == FR_NO_FILE) {
 8001818:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800181c:	2b04      	cmp	r3, #4
 800181e:	d14e      	bne.n	80018be <DrumInit+0x2ee>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001824:	2206      	movs	r2, #6
 8001826:	4933      	ldr	r1, [pc, #204]	; (80018f4 <DrumInit+0x324>)
 8001828:	4618      	mov	r0, r3
 800182a:	f00e fd4f 	bl	80102cc <f_open>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		DrumCalibrate();
 8001834:	f000 f918 	bl	8001a68 <DrumCalibrate>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <DrumInit+0x320>)
 800183a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001840:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <DrumInit+0x320>)
 8001848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800184e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <DrumInit+0x320>)
 8001856:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800185a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800185e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <DrumInit+0x320>)
 8001866:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800186a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800186e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001872:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <DrumInit+0x320>)
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <DrumInit+0x320>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	441a      	add	r2, r3
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <DrumInit+0x320>)
 8001880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001884:	441a      	add	r2, r3
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <DrumInit+0x320>)
 8001888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800188c:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800188e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001892:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001896:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001898:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800189c:	4639      	mov	r1, r7
 800189e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80018a2:	2214      	movs	r2, #20
 80018a4:	f00f f8f6 	bl	8010a94 <f_write>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		LCD_Print(0, 19, "Error: No file, calibrating... %d", fresult);
 80018ae:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <DrumInit+0x32c>)
 80018b4:	2113      	movs	r1, #19
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 ff94 	bl	80027e4 <LCD_Print>
 80018bc:	e007      	b.n	80018ce <DrumInit+0x2fe>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 80018be:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <DrumInit+0x330>)
 80018c4:	2113      	movs	r1, #19
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 ff8c 	bl	80027e4 <LCD_Print>
 80018cc:	e7fe      	b.n	80018cc <DrumInit+0x2fc>
	}
	f_close(&file);
 80018ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00f fb45 	bl	8010f62 <f_close>

}
 80018d8:	bf00      	nop
 80018da:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200009e0 	.word	0x200009e0
 80018e8:	20000b24 	.word	0x20000b24
 80018ec:	20000ab0 	.word	0x20000ab0
 80018f0:	200009f0 	.word	0x200009f0
 80018f4:	08014a58 	.word	0x08014a58
 80018f8:	08014a64 	.word	0x08014a64
 80018fc:	08014a88 	.word	0x08014a88
 8001900:	08014aac 	.word	0x08014aac

08001904 <DrumThreshWrite>:

void DrumThreshWrite() {
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800190a:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 800190c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001910:	2203      	movs	r2, #3
 8001912:	4952      	ldr	r1, [pc, #328]	; (8001a5c <DrumThreshWrite+0x158>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00e fcd9 	bl	80102cc <f_open>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 8001920:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001924:	2b00      	cmp	r3, #0
 8001926:	d13c      	bne.n	80019a2 <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <DrumThreshWrite+0x15c>)
 800192a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001930:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800193a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800193e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800194a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800194e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001956:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800195a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800195e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001962:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001964:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <DrumThreshWrite+0x15c>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	441a      	add	r2, r3
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001974:	441a      	add	r2, r3
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800197c:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800197e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001982:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001986:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	f107 0118 	add.w	r1, r7, #24
 8001990:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001994:	2214      	movs	r2, #20
 8001996:	f00f f87d 	bl	8010a94 <f_write>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80019a0:	e051      	b.n	8001a46 <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 80019a2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d145      	bne.n	8001a36 <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 80019aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ae:	2206      	movs	r2, #6
 80019b0:	492a      	ldr	r1, [pc, #168]	; (8001a5c <DrumThreshWrite+0x158>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00e fc8a 	bl	80102cc <f_open>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019ec:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80019f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019f8:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	441a      	add	r2, r3
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	441a      	add	r2, r3
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001a0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001a12:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001a14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001a1c:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	1d39      	adds	r1, r7, #4
 8001a24:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001a28:	2214      	movs	r2, #20
 8001a2a:	f00f f833 	bl	8010a94 <f_write>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001a34:	e007      	b.n	8001a46 <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 8001a36:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <DrumThreshWrite+0x160>)
 8001a3c:	2113      	movs	r1, #19
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 fed0 	bl	80027e4 <LCD_Print>
 8001a44:	e7fe      	b.n	8001a44 <DrumThreshWrite+0x140>
	}
	f_close(&file);
 8001a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00f fa89 	bl	8010f62 <f_close>
}
 8001a50:	bf00      	nop
 8001a52:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	08014a58 	.word	0x08014a58
 8001a60:	200009f0 	.word	0x200009f0
 8001a64:	08014aac 	.word	0x08014aac

08001a68 <DrumCalibrate>:

// Let's not touch this :D
void DrumCalibrate() {
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	b092      	sub	sp, #72	; 0x48
 8001a6e:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001a70:	f001 ffe0 	bl	8003a34 <HAL_GetTick>
 8001a74:	6478      	str	r0, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 8001a76:	2010      	movs	r0, #16
 8001a78:	f00f ffc8 	bl	8011a0c <malloc>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
 8001a84:	e00c      	b.n	8001aa0 <DrumCalibrate+0x38>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 8001a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	18d4      	adds	r4, r2, r3
 8001a8e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a92:	f00f ffbb 	bl	8011a0c <malloc>
 8001a96:	4603      	mov	r3, r0
 8001a98:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8001aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	ddef      	ble.n	8001a86 <DrumCalibrate+0x1e>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aaa:	e023      	b.n	8001af4 <DrumCalibrate+0x8c>
		while (last_tick == HAL_GetTick()) {
 8001aac:	bf00      	nop
 8001aae:	f001 ffc1 	bl	8003a34 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d0f9      	beq.n	8001aae <DrumCalibrate+0x46>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001aba:	f001 ffbb 	bl	8003a34 <HAL_GetTick>
 8001abe:	6478      	str	r0, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac4:	e010      	b.n	8001ae8 <DrumCalibrate+0x80>
			values[j][i] = drum_sensor_values[j];
 8001ac6:	4a9c      	ldr	r2, [pc, #624]	; (8001d38 <DrumCalibrate+0x2d0>)
 8001ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	b28a      	uxth	r2, r1
 8001ae0:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	ddeb      	ble.n	8001ac6 <DrumCalibrate+0x5e>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af0:	3301      	adds	r3, #1
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001afa:	dbd7      	blt.n	8001aac <DrumCalibrate+0x44>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
 8001b00:	e0f2      	b.n	8001ce8 <DrumCalibrate+0x280>
		uint32_t sum = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	e026      	b.n	8001b5e <DrumCalibrate+0xf6>
			sum += values[i][j];
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4413      	add	r3, r2
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	4413      	add	r3, r2
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4413      	add	r3, r2
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d209      	bcs.n	8001b58 <DrumCalibrate+0xf0>
				max_val = values[i][j];
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b64:	dbd4      	blt.n	8001b10 <DrumCalibrate+0xa8>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 8001b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b68:	f7fe fca8 	bl	80004bc <__aeabi_ui2d>
 8001b6c:	a36e      	add	r3, pc, #440	; (adr r3, 8001d28 <DrumCalibrate+0x2c0>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fe47 	bl	8000804 <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e036      	b.n	8001bfe <DrumCalibrate+0x196>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4413      	add	r3, r2
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc9a 	bl	80004dc <__aeabi_i2d>
 8001ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bac:	f7fe fb48 	bl	8000240 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc86 	bl	80004dc <__aeabi_i2d>
 8001bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd4:	f7fe fb34 	bl	8000240 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fce6 	bl	80005b0 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bec:	f7fe fb2a 	bl	8000244 <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c04:	dbc4      	blt.n	8001b90 <DrumCalibrate+0x128>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 8001c06:	a34a      	add	r3, pc, #296	; (adr r3, 8001d30 <DrumCalibrate+0x2c8>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c10:	f7fe fdf8 	bl	8000804 <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f012 fe3a 	bl	8014894 <sqrt>
 8001c20:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 8001c24:	4945      	ldr	r1, [pc, #276]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	440b      	add	r3, r1
 8001c32:	f103 0118 	add.w	r1, r3, #24
 8001c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c3a:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 8001c3e:	493f      	ldr	r1, [pc, #252]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3314      	adds	r3, #20
 8001c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c50:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 8001c52:	493a      	ldr	r1, [pc, #232]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	f103 0120 	add.w	r1, r3, #32
 8001c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c68:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <DrumCalibrate+0x2d8>)
 8001c72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c76:	f7fe fc9b 	bl	80005b0 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c86:	f7fe fadd 	bl	8000244 <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4699      	mov	r9, r3
 8001c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c94:	f7fe fc12 	bl	80004bc <__aeabi_ui2d>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <DrumCalibrate+0x2dc>)
 8001ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca6:	f7fe fc83 	bl	80005b0 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	f7fe fac7 	bl	8000244 <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4640      	mov	r0, r8
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	f012 fda7 	bl	8014810 <fmin>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ff49 	bl	8000b60 <__aeabi_d2uiz>
 8001cce:	4601      	mov	r1, r0
 8001cd0:	481a      	ldr	r0, [pc, #104]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4403      	add	r3, r0
 8001cde:	3328      	adds	r3, #40	; 0x28
 8001ce0:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	f77f af09 	ble.w	8001b02 <DrumCalibrate+0x9a>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e00a      	b.n	8001d0c <DrumCalibrate+0x2a4>
		free(values[i]);
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00f fe8b 	bl	8011a1c <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	ddf1      	ble.n	8001cf6 <DrumCalibrate+0x28e>
	}
	free(values);
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f00f fe82 	bl	8011a1c <free>

}
 8001d18:	bf00      	nop
 8001d1a:	3748      	adds	r7, #72	; 0x48
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	4072c000 	.word	0x4072c000
 8001d30:	00000000 	.word	0x00000000
 8001d34:	4072b000 	.word	0x4072b000
 8001d38:	200009e0 	.word	0x200009e0
 8001d3c:	200009f0 	.word	0x200009f0
 8001d40:	401c0000 	.word	0x401c0000
 8001d44:	40140000 	.word	0x40140000

08001d48 <DrumUpdate>:

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d52:	b672      	cpsid	i
}
 8001d54:	bf00      	nop

	__disable_irq();

	int i = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <DrumUpdate+0xbc>)
 8001d5c:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 8001d5e:	e048      	b.n	8001df2 <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d807      	bhi.n	8001d7e <DrumUpdate+0x36>
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	fa42 f303 	asr.w	r3, r2, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d011      	beq.n	8001da2 <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	7a1b      	ldrb	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f966 	bl	800105c <AddDrum>
			}
			drum->state = DRUM_HIT;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2201      	movs	r2, #1
 8001d94:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 8001d96:	f001 fe4d 	bl	8003a34 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e011      	b.n	8001dc6 <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	7a1b      	ldrb	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2202      	movs	r2, #2
 8001dae:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 8001db0:	f001 fe40 	bl	8003a34 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d902      	bls.n	8001dc6 <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <DrumUpdate+0xc0>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d906      	bls.n	8001de6 <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <DrumUpdate+0xc0>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3330      	adds	r3, #48	; 0x30
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	ddb3      	ble.n	8001d60 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001df8:	b662      	cpsie	i
}
 8001dfa:	bf00      	nop
		}
	}

	__enable_irq();
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200009f0 	.word	0x200009f0
 8001e08:	20000ab4 	.word	0x20000ab4

08001e0c <LCD_DrumCalibration>:

uint16_t drum_calibrate_number = 0;
uint32_t drum_max_val_reset_ticks = 0;
void LCD_DrumCalibration(int* r) {
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0e:	b08d      	sub	sp, #52	; 0x34
 8001e10:	af06      	add	r7, sp, #24
 8001e12:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - drum_max_val_reset_ticks > 3000) {
 8001e14:	f001 fe0e 	bl	8003a34 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <LCD_DrumCalibration+0x148>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d90d      	bls.n	8001e44 <LCD_DrumCalibration+0x38>
		for (int i = 0; i < NUM_DRUMS; i++) drum_max_val[i] = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e007      	b.n	8001e3e <LCD_DrumCalibration+0x32>
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <LCD_DrumCalibration+0x14c>)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2100      	movs	r1, #0
 8001e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	ddf4      	ble.n	8001e2e <LCD_DrumCalibration+0x22>
	}

	LCD_Print(0, (*r)++, "cal: %2d | adc | hits | max", drum_calibrate_number);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c59      	adds	r1, r3, #1
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6011      	str	r1, [r2, #0]
 8001e4e:	b299      	uxth	r1, r3
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <LCD_DrumCalibration+0x150>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <LCD_DrumCalibration+0x154>)
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 fcc4 	bl	80027e4 <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e022      	b.n	8001ea8 <LCD_DrumCalibration+0x9c>
		LCD_Print(0, (*r)++, "Drum %d: %4ld | %4d | %4d", i,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6011      	str	r1, [r2, #0]
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	4a3d      	ldr	r2, [pc, #244]	; (8001f64 <LCD_DrumCalibration+0x158>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e76:	4c3c      	ldr	r4, [pc, #240]	; (8001f68 <LCD_DrumCalibration+0x15c>)
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4423      	add	r3, r4
 8001e84:	3304      	adds	r3, #4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4c33      	ldr	r4, [pc, #204]	; (8001f58 <LCD_DrumCalibration+0x14c>)
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001e90:	9202      	str	r2, [sp, #8]
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	9100      	str	r1, [sp, #0]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <LCD_DrumCalibration+0x160>)
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 fca1 	bl	80027e4 <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	ddd9      	ble.n	8001e62 <LCD_DrumCalibration+0x56>
				drum_sensor_values[i], drums[i].hit_count, drum_max_val[i]);
	}

	LCD_Print(0, (*r)++, "trsh | st. | avg | sd ");
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6011      	str	r1, [r2, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <LCD_DrumCalibration+0x164>)
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 fc90 	bl	80027e4 <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e03b      	b.n	8001f42 <LCD_DrumCalibration+0x136>
		LCD_Print(0, (*r)++, "%4d | %3d | %4.0f | %2.2f",
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6011      	str	r1, [r2, #0]
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	4924      	ldr	r1, [pc, #144]	; (8001f68 <LCD_DrumCalibration+0x15c>)
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3328      	adds	r3, #40	; 0x28
 8001ee6:	681d      	ldr	r5, [r3, #0]
				drums[i].sensor_thresh, drums[i].state, drums[i].sensor_avg, drums[i].sensor_sd);
 8001ee8:	491f      	ldr	r1, [pc, #124]	; (8001f68 <LCD_DrumCalibration+0x15c>)
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	781b      	ldrb	r3, [r3, #0]
		LCD_Print(0, (*r)++, "%4d | %3d | %4.0f | %2.2f",
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	491a      	ldr	r1, [pc, #104]	; (8001f68 <LCD_DrumCalibration+0x15c>)
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	440b      	add	r3, r1
 8001f0a:	3318      	adds	r3, #24
 8001f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f10:	4e15      	ldr	r6, [pc, #84]	; (8001f68 <LCD_DrumCalibration+0x15c>)
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4433      	add	r3, r6
 8001f1e:	3320      	adds	r3, #32
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	462b      	mov	r3, r5
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <LCD_DrumCalibration+0x168>)
 8001f34:	4621      	mov	r1, r4
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 fc54 	bl	80027e4 <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	ddc0      	ble.n	8001eca <LCD_DrumCalibration+0xbe>
	}

}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000ac8 	.word	0x20000ac8
 8001f58:	20000ab4 	.word	0x20000ab4
 8001f5c:	20000ac4 	.word	0x20000ac4
 8001f60:	08014ac0 	.word	0x08014ac0
 8001f64:	200009e0 	.word	0x200009e0
 8001f68:	200009f0 	.word	0x200009f0
 8001f6c:	08014adc 	.word	0x08014adc
 8001f70:	08014af8 	.word	0x08014af8
 8001f74:	08014b10 	.word	0x08014b10

08001f78 <ButtonPad_DrumCalibration>:

void ButtonPad_DrumCalibration(int keyPressed) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	d866      	bhi.n	8002056 <ButtonPad_DrumCalibration+0xde>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <ButtonPad_DrumCalibration+0x18>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fb1 	.word	0x08001fb1
 8001f94:	08001fb9 	.word	0x08001fb9
 8001f98:	08001fc1 	.word	0x08001fc1
 8001f9c:	08001fc9 	.word	0x08001fc9
 8001fa0:	08001fd1 	.word	0x08001fd1
 8001fa4:	08002003 	.word	0x08002003
 8001fa8:	08002035 	.word	0x08002035
 8001fac:	08002051 	.word	0x08002051
		case 1: AddDrum(DRUM_DON); break;
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff f853 	bl	800105c <AddDrum>
 8001fb6:	e04e      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff f84f 	bl	800105c <AddDrum>
 8001fbe:	e04a      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff fec1 	bl	8001d48 <DrumUpdate>
 8001fc6:	e046      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff febd 	bl	8001d48 <DrumUpdate>
 8001fce:	e042      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <ButtonPad_DrumCalibration+0xe8>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4a23      	ldr	r2, [pc, #140]	; (8002064 <ButtonPad_DrumCalibration+0xec>)
 8001fd8:	460b      	mov	r3, r1
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	440b      	add	r3, r1
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3328      	adds	r3, #40	; 0x28
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <ButtonPad_DrumCalibration+0xe8>)
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	4610      	mov	r0, r2
 8001fec:	f103 020a 	add.w	r2, r3, #10
 8001ff0:	491c      	ldr	r1, [pc, #112]	; (8002064 <ButtonPad_DrumCalibration+0xec>)
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4403      	add	r3, r0
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3328      	adds	r3, #40	; 0x28
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e029      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <ButtonPad_DrumCalibration+0xe8>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	4a16      	ldr	r2, [pc, #88]	; (8002064 <ButtonPad_DrumCalibration+0xec>)
 800200a:	460b      	mov	r3, r1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	440b      	add	r3, r1
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	3328      	adds	r3, #40	; 0x28
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <ButtonPad_DrumCalibration+0xe8>)
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	4610      	mov	r0, r2
 800201e:	f1a3 020a 	sub.w	r2, r3, #10
 8002022:	4910      	ldr	r1, [pc, #64]	; (8002064 <ButtonPad_DrumCalibration+0xec>)
 8002024:	4603      	mov	r3, r0
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4403      	add	r3, r0
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	440b      	add	r3, r1
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e010      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <ButtonPad_DrumCalibration+0xe8>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	425a      	negs	r2, r3
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	f002 0203 	and.w	r2, r2, #3
 8002044:	bf58      	it	pl
 8002046:	4253      	negpl	r3, r2
 8002048:	b29a      	uxth	r2, r3
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <ButtonPad_DrumCalibration+0xe8>)
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	e002      	b.n	8002056 <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 8002050:	f7ff fc58 	bl	8001904 <DrumThreshWrite>
 8002054:	bf00      	nop
	}
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000ac4 	.word	0x20000ac4
 8002064:	200009f0 	.word	0x200009f0

08002068 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <ILI9341_Send_Command+0x34>)
 800207a:	f003 f97c 	bl	8005376 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <ILI9341_Send_Command+0x34>)
 8002086:	f003 f976 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f95d 	bl	800234c <ILI9341_SPI_Send>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40010c00 	.word	0x40010c00

080020a0 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <ILI9341_Send_Data+0x34>)
 80020b2:	f003 f960 	bl	8005376 <HAL_GPIO_WritePin>
	DC_DATA;
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <ILI9341_Send_Data+0x34>)
 80020be:	f003 f95a 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f941 	bl	800234c <ILI9341_SPI_Send>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40010c00 	.word	0x40010c00

080020d8 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 80020dc:	f000 f900 	bl	80022e0 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 80020e0:	f000 f958 	bl	8002394 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff ffbf 	bl	8002068 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80020ea:	20cb      	movs	r0, #203	; 0xcb
 80020ec:	f7ff ffbc 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80020f0:	2039      	movs	r0, #57	; 0x39
 80020f2:	f7ff ffd5 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80020f6:	202c      	movs	r0, #44	; 0x2c
 80020f8:	f7ff ffd2 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff ffcf 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8002102:	2034      	movs	r0, #52	; 0x34
 8002104:	f7ff ffcc 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8002108:	2002      	movs	r0, #2
 800210a:	f7ff ffc9 	bl	80020a0 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800210e:	20cf      	movs	r0, #207	; 0xcf
 8002110:	f7ff ffaa 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ffc3 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800211a:	20c1      	movs	r0, #193	; 0xc1
 800211c:	f7ff ffc0 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8002120:	2030      	movs	r0, #48	; 0x30
 8002122:	f7ff ffbd 	bl	80020a0 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8002126:	20e8      	movs	r0, #232	; 0xe8
 8002128:	f7ff ff9e 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 800212c:	2085      	movs	r0, #133	; 0x85
 800212e:	f7ff ffb7 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff ffb4 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8002138:	2078      	movs	r0, #120	; 0x78
 800213a:	f7ff ffb1 	bl	80020a0 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800213e:	20ea      	movs	r0, #234	; 0xea
 8002140:	f7ff ff92 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff ffab 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7ff ffa8 	bl	80020a0 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8002150:	20ed      	movs	r0, #237	; 0xed
 8002152:	f7ff ff89 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8002156:	2064      	movs	r0, #100	; 0x64
 8002158:	f7ff ffa2 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800215c:	2003      	movs	r0, #3
 800215e:	f7ff ff9f 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8002162:	2012      	movs	r0, #18
 8002164:	f7ff ff9c 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8002168:	2081      	movs	r0, #129	; 0x81
 800216a:	f7ff ff99 	bl	80020a0 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800216e:	20f7      	movs	r0, #247	; 0xf7
 8002170:	f7ff ff7a 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8002174:	2020      	movs	r0, #32
 8002176:	f7ff ff93 	bl	80020a0 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 800217a:	20c0      	movs	r0, #192	; 0xc0
 800217c:	f7ff ff74 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8002180:	2010      	movs	r0, #16
 8002182:	f7ff ff8d 	bl	80020a0 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8002186:	20c1      	movs	r0, #193	; 0xc1
 8002188:	f7ff ff6e 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800218c:	2010      	movs	r0, #16
 800218e:	f7ff ff87 	bl	80020a0 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8002192:	20c5      	movs	r0, #197	; 0xc5
 8002194:	f7ff ff68 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8002198:	203e      	movs	r0, #62	; 0x3e
 800219a:	f7ff ff81 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800219e:	2028      	movs	r0, #40	; 0x28
 80021a0:	f7ff ff7e 	bl	80020a0 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80021a4:	20c7      	movs	r0, #199	; 0xc7
 80021a6:	f7ff ff5f 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80021aa:	2086      	movs	r0, #134	; 0x86
 80021ac:	f7ff ff78 	bl	80020a0 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80021b0:	2036      	movs	r0, #54	; 0x36
 80021b2:	f7ff ff59 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80021b6:	2048      	movs	r0, #72	; 0x48
 80021b8:	f7ff ff72 	bl	80020a0 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80021bc:	203a      	movs	r0, #58	; 0x3a
 80021be:	f7ff ff53 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80021c2:	2055      	movs	r0, #85	; 0x55
 80021c4:	f7ff ff6c 	bl	80020a0 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80021c8:	20b1      	movs	r0, #177	; 0xb1
 80021ca:	f7ff ff4d 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff ff66 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80021d4:	2018      	movs	r0, #24
 80021d6:	f7ff ff63 	bl	80020a0 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80021da:	20b6      	movs	r0, #182	; 0xb6
 80021dc:	f7ff ff44 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80021e0:	2008      	movs	r0, #8
 80021e2:	f7ff ff5d 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80021e6:	2082      	movs	r0, #130	; 0x82
 80021e8:	f7ff ff5a 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80021ec:	2027      	movs	r0, #39	; 0x27
 80021ee:	f7ff ff57 	bl	80020a0 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80021f2:	20f2      	movs	r0, #242	; 0xf2
 80021f4:	f7ff ff38 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7ff ff51 	bl	80020a0 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80021fe:	2026      	movs	r0, #38	; 0x26
 8002200:	f7ff ff32 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8002204:	2001      	movs	r0, #1
 8002206:	f7ff ff4b 	bl	80020a0 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800220a:	20e0      	movs	r0, #224	; 0xe0
 800220c:	f7ff ff2c 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8002210:	200f      	movs	r0, #15
 8002212:	f7ff ff45 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002216:	2031      	movs	r0, #49	; 0x31
 8002218:	f7ff ff42 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800221c:	202b      	movs	r0, #43	; 0x2b
 800221e:	f7ff ff3f 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8002222:	200c      	movs	r0, #12
 8002224:	f7ff ff3c 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002228:	200e      	movs	r0, #14
 800222a:	f7ff ff39 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800222e:	2008      	movs	r0, #8
 8002230:	f7ff ff36 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8002234:	204e      	movs	r0, #78	; 0x4e
 8002236:	f7ff ff33 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800223a:	20f1      	movs	r0, #241	; 0xf1
 800223c:	f7ff ff30 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8002240:	2037      	movs	r0, #55	; 0x37
 8002242:	f7ff ff2d 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8002246:	2007      	movs	r0, #7
 8002248:	f7ff ff2a 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800224c:	2010      	movs	r0, #16
 800224e:	f7ff ff27 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8002252:	2003      	movs	r0, #3
 8002254:	f7ff ff24 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002258:	200e      	movs	r0, #14
 800225a:	f7ff ff21 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800225e:	2009      	movs	r0, #9
 8002260:	f7ff ff1e 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f7ff ff1b 	bl	80020a0 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 800226a:	20e1      	movs	r0, #225	; 0xe1
 800226c:	f7ff fefc 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff ff15 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002276:	200e      	movs	r0, #14
 8002278:	f7ff ff12 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800227c:	2014      	movs	r0, #20
 800227e:	f7ff ff0f 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8002282:	2003      	movs	r0, #3
 8002284:	f7ff ff0c 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8002288:	2011      	movs	r0, #17
 800228a:	f7ff ff09 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800228e:	2007      	movs	r0, #7
 8002290:	f7ff ff06 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002294:	2031      	movs	r0, #49	; 0x31
 8002296:	f7ff ff03 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800229a:	20c1      	movs	r0, #193	; 0xc1
 800229c:	f7ff ff00 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80022a0:	2048      	movs	r0, #72	; 0x48
 80022a2:	f7ff fefd 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80022a6:	2008      	movs	r0, #8
 80022a8:	f7ff fefa 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80022ac:	200f      	movs	r0, #15
 80022ae:	f7ff fef7 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80022b2:	200c      	movs	r0, #12
 80022b4:	f7ff fef4 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80022b8:	2031      	movs	r0, #49	; 0x31
 80022ba:	f7ff fef1 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80022be:	2036      	movs	r0, #54	; 0x36
 80022c0:	f7ff feee 	bl	80020a0 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80022c4:	200f      	movs	r0, #15
 80022c6:	f7ff feeb 	bl	80020a0 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80022ca:	2011      	movs	r0, #17
 80022cc:	f7ff fecc 	bl	8002068 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80022d0:	2029      	movs	r0, #41	; 0x29
 80022d2:	f7ff fec9 	bl	8002068 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80022d6:	202c      	movs	r0, #44	; 0x2c
 80022d8:	f7ff fee2 	bl	80020a0 <ILI9341_Send_Data>
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <ILI9341_SPI_Init+0x64>)
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <ILI9341_SPI_Init+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <ILI9341_SPI_Init+0x64>)
 80022ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f0:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <ILI9341_SPI_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <ILI9341_SPI_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <ILI9341_SPI_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <ILI9341_SPI_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <ILI9341_SPI_Init+0x64>)
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <ILI9341_SPI_Init+0x64>)
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <ILI9341_SPI_Init+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <ILI9341_SPI_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <ILI9341_SPI_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <ILI9341_SPI_Init+0x64>)
 800232c:	220a      	movs	r2, #10
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <ILI9341_SPI_Init+0x64>)
 8002332:	f006 fd2a 	bl	8008d8a <HAL_SPI_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 800233c:	f000 ff58 	bl	80031f0 <Error_Handler>
	}
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000acc 	.word	0x20000acc
 8002348:	40003800 	.word	0x40003800

0800234c <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 8002356:	1df9      	adds	r1, r7, #7
 8002358:	2301      	movs	r3, #1
 800235a:	2201      	movs	r2, #1
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <ILI9341_SPI_Send+0x20>)
 800235e:	f006 fd98 	bl	8008e92 <HAL_SPI_Transmit>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000acc 	.word	0x20000acc

08002370 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b29a      	uxth	r2, r3
 800237e:	230a      	movs	r3, #10
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <ILI9341_SPI_Send_Multiple+0x20>)
 8002384:	f006 fd85 	bl	8008e92 <HAL_SPI_Transmit>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000acc 	.word	0x20000acc

08002394 <ILI9341_Reset>:

void ILI9341_Reset() {
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	RESET_ON;
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239e:	4810      	ldr	r0, [pc, #64]	; (80023e0 <ILI9341_Reset+0x4c>)
 80023a0:	f002 ffe9 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80023a4:	2032      	movs	r0, #50	; 0x32
 80023a6:	f001 fb4f 	bl	8003a48 <HAL_Delay>
	RESET_OFF;
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <ILI9341_Reset+0x4c>)
 80023b2:	f002 ffe0 	bl	8005376 <HAL_GPIO_WritePin>
	CS_ON;
 80023b6:	2200      	movs	r2, #0
 80023b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023bc:	4808      	ldr	r0, [pc, #32]	; (80023e0 <ILI9341_Reset+0x4c>)
 80023be:	f002 ffda 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80023c2:	2032      	movs	r0, #50	; 0x32
 80023c4:	f001 fb40 	bl	8003a48 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fe4d 	bl	8002068 <ILI9341_Send_Command>
	CS_OFF;
 80023ce:	2201      	movs	r2, #1
 80023d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <ILI9341_Reset+0x4c>)
 80023d6:	f002 ffce 	bl	8005376 <HAL_GPIO_WritePin>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40010c00 	.word	0x40010c00

080023e4 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80023ee:	2036      	movs	r0, #54	; 0x36
 80023f0:	f7ff fe3a 	bl	8002068 <ILI9341_Send_Command>
	switch (rotation) {
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d836      	bhi.n	8002468 <ILI9341_Set_Rotation+0x84>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <ILI9341_Set_Rotation+0x1c>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002411 	.word	0x08002411
 8002404:	08002427 	.word	0x08002427
 8002408:	0800243d 	.word	0x0800243d
 800240c:	08002453 	.word	0x08002453
	case 0:
		ILI9341_Send_Data(0x48);
 8002410:	2048      	movs	r0, #72	; 0x48
 8002412:	f7ff fe45 	bl	80020a0 <ILI9341_Send_Data>
		X_SIZE = 240;
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <ILI9341_Set_Rotation+0x8c>)
 8002418:	22f0      	movs	r2, #240	; 0xf0
 800241a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <ILI9341_Set_Rotation+0x90>)
 800241e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002422:	601a      	str	r2, [r3, #0]
		break;
 8002424:	e020      	b.n	8002468 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8002426:	2028      	movs	r0, #40	; 0x28
 8002428:	f7ff fe3a 	bl	80020a0 <ILI9341_Send_Data>
		X_SIZE = 320;
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <ILI9341_Set_Rotation+0x8c>)
 800242e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002432:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <ILI9341_Set_Rotation+0x90>)
 8002436:	22f0      	movs	r2, #240	; 0xf0
 8002438:	601a      	str	r2, [r3, #0]
		break;
 800243a:	e015      	b.n	8002468 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 800243c:	2088      	movs	r0, #136	; 0x88
 800243e:	f7ff fe2f 	bl	80020a0 <ILI9341_Send_Data>
		X_SIZE = 240;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <ILI9341_Set_Rotation+0x8c>)
 8002444:	22f0      	movs	r2, #240	; 0xf0
 8002446:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <ILI9341_Set_Rotation+0x90>)
 800244a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800244e:	601a      	str	r2, [r3, #0]
		break;
 8002450:	e00a      	b.n	8002468 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8002452:	20e8      	movs	r0, #232	; 0xe8
 8002454:	f7ff fe24 	bl	80020a0 <ILI9341_Send_Data>
		X_SIZE = 320;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <ILI9341_Set_Rotation+0x8c>)
 800245a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800245e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <ILI9341_Set_Rotation+0x90>)
 8002462:	22f0      	movs	r2, #240	; 0xf0
 8002464:	601a      	str	r2, [r3, #0]
		break;
 8002466:	bf00      	nop
	}
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000008 	.word	0x20000008
 8002474:	2000000c 	.word	0x2000000c

08002478 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248a:	4817      	ldr	r0, [pc, #92]	; (80024e8 <ILI9341_SPI_Send_32+0x70>)
 800248c:	f002 ff73 	bl	8005376 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002496:	4814      	ldr	r0, [pc, #80]	; (80024e8 <ILI9341_SPI_Send_32+0x70>)
 8002498:	f002 ff6d 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff54 	bl	800234c <ILI9341_SPI_Send>

	DC_DATA;
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <ILI9341_SPI_Send_32+0x70>)
 80024ac:	f002 ff63 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	0e1b      	lsrs	r3, r3, #24
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff48 	bl	800234c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	0c1b      	lsrs	r3, r3, #16
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff42 	bl	800234c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff3c 	bl	800234c <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff37 	bl	800234c <ILI9341_SPI_Send>

}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40010c00 	.word	0x40010c00

080024ec <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	617b      	str	r3, [r7, #20]
	t |= x2;
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 800250c:	6979      	ldr	r1, [r7, #20]
 800250e:	202a      	movs	r0, #42	; 0x2a
 8002510:	f7ff ffb2 	bl	8002478 <ILI9341_SPI_Send_32>
	t = y1;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	617b      	str	r3, [r7, #20]
	t |= y2;
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8002526:	6979      	ldr	r1, [r7, #20]
 8002528:	202b      	movs	r0, #43	; 0x2b
 800252a:	f7ff ffa5 	bl	8002478 <ILI9341_SPI_Send_32>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 8002536:	b590      	push	{r4, r7, lr}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	4604      	mov	r4, r0
 800253e:	4608      	mov	r0, r1
 8002540:	4611      	mov	r1, r2
 8002542:	461a      	mov	r2, r3
 8002544:	4623      	mov	r3, r4
 8002546:	80fb      	strh	r3, [r7, #6]
 8002548:	4603      	mov	r3, r0
 800254a:	80bb      	strh	r3, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 8002554:	88f8      	ldrh	r0, [r7, #6]
 8002556:	88b9      	ldrh	r1, [r7, #4]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	4413      	add	r3, r2
 800255e:	3b01      	subs	r3, #1
 8002560:	461c      	mov	r4, r3
 8002562:	88ba      	ldrh	r2, [r7, #4]
 8002564:	883b      	ldrh	r3, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	3b01      	subs	r3, #1
 800256a:	4622      	mov	r2, r4
 800256c:	f7ff ffbe 	bl	80024ec <ILI9341_Set_Address>
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}

08002578 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8002588:	202c      	movs	r0, #44	; 0x2c
 800258a:	f7ff fd6d 	bl	8002068 <ILI9341_Send_Command>

	CS_ON;
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002594:	482a      	ldr	r0, [pc, #168]	; (8002640 <LCD_FillWindow+0xc8>)
 8002596:	f002 feee 	bl	8005376 <HAL_GPIO_WritePin>
	DC_DATA;
 800259a:	2201      	movs	r2, #1
 800259c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a0:	4827      	ldr	r0, [pc, #156]	; (8002640 <LCD_FillWindow+0xc8>)
 80025a2:	f002 fee8 	bl	8005376 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <LCD_FillWindow+0xcc>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2b3f      	cmp	r3, #63	; 0x3f
 80025b6:	dc01      	bgt.n	80025bc <LCD_FillWindow+0x44>
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2bf0      	cmp	r3, #240	; 0xf0
 80025c0:	dd01      	ble.n	80025c6 <LCD_FillWindow+0x4e>
 80025c2:	23f0      	movs	r3, #240	; 0xf0
 80025c4:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f00f fa15 	bl	8011a0c <malloc>
 80025e2:	4603      	mov	r3, r0
 80025e4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e009      	b.n	8002600 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	b292      	uxth	r2, r2
 80025f8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	429a      	cmp	r2, r3
 8002606:	dbf1      	blt.n	80025ec <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8002608:	e009      	b.n	800261e <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4619      	mov	r1, r3
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fead 	bl	8002370 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d8f1      	bhi.n	800260a <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4619      	mov	r1, r3
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fe9f 	bl	8002370 <ILI9341_SPI_Send_Multiple>

	free(array);
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f00f f9f2 	bl	8011a1c <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40010c00 	.word	0x40010c00
 8002644:	cccccccd 	.word	0xcccccccd

08002648 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4623      	mov	r3, r4
 8002658:	80fb      	strh	r3, [r7, #6]
 800265a:	4603      	mov	r3, r0
 800265c:	80bb      	strh	r3, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]
 8002662:	4613      	mov	r3, r2
 8002664:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	88b9      	ldrh	r1, [r7, #4]
 800266c:	88f8      	ldrh	r0, [r7, #6]
 800266e:	f7ff ff62 	bl	8002536 <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	883a      	ldrh	r2, [r7, #0]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	461a      	mov	r2, r3
 800267c:	8b3b      	ldrh	r3, [r7, #24]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7ff ff79 	bl	8002578 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
	...

08002690 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af02      	add	r7, sp, #8
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <LCD_FillScreen+0x2c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <LCD_FillScreen+0x30>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b299      	uxth	r1, r3
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	460b      	mov	r3, r1
 80026ac:	2100      	movs	r1, #0
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff ffca 	bl	8002648 <LCD_DrawFilledRectangle>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000008 	.word	0x20000008
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
 80026ce:	460b      	mov	r3, r1
 80026d0:	80bb      	strh	r3, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	3b20      	subs	r3, #32
 80026da:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80026dc:	88b9      	ldrh	r1, [r7, #4]
 80026de:	88f8      	ldrh	r0, [r7, #6]
 80026e0:	2310      	movs	r3, #16
 80026e2:	2208      	movs	r2, #8
 80026e4:	f7ff ff27 	bl	8002536 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 80026e8:	202c      	movs	r0, #44	; 0x2c
 80026ea:	f7ff fcbd 	bl	8002068 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 80026ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026f2:	f00f f98b 	bl	8011a0c <malloc>
 80026f6:	4603      	mov	r3, r0
 80026f8:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80026fe:	2300      	movs	r3, #0
 8002700:	75bb      	strb	r3, [r7, #22]
 8002702:	e026      	b.n	8002752 <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	7dbb      	ldrb	r3, [r7, #22]
 8002708:	491c      	ldr	r1, [pc, #112]	; (800277c <LCD_DrawChar+0xb8>)
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	440a      	add	r2, r1
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002714:	2300      	movs	r3, #0
 8002716:	757b      	strb	r3, [r7, #21]
 8002718:	e015      	b.n	8002746 <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2200      	movs	r2, #0
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	e003      	b.n	8002734 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002732:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
			pt++;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3302      	adds	r3, #2
 800273e:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002740:	7d7b      	ldrb	r3, [r7, #21]
 8002742:	3301      	adds	r3, #1
 8002744:	757b      	strb	r3, [r7, #21]
 8002746:	7d7b      	ldrb	r3, [r7, #21]
 8002748:	2b07      	cmp	r3, #7
 800274a:	d9e6      	bls.n	800271a <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800274c:	7dbb      	ldrb	r3, [r7, #22]
 800274e:	3301      	adds	r3, #1
 8002750:	75bb      	strb	r3, [r7, #22]
 8002752:	7dbb      	ldrb	r3, [r7, #22]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d9d5      	bls.n	8002704 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8002758:	2201      	movs	r2, #1
 800275a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800275e:	4808      	ldr	r0, [pc, #32]	; (8002780 <LCD_DrawChar+0xbc>)
 8002760:	f002 fe09 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8002764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002768:	68b8      	ldr	r0, [r7, #8]
 800276a:	f7ff fe01 	bl	8002370 <ILI9341_SPI_Send_Multiple>
	free(array);
 800276e:	68b8      	ldr	r0, [r7, #8]
 8002770:	f00f f954 	bl	8011a1c <free>
}
 8002774:	bf00      	nop
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	0802d808 	.word	0x0802d808
 8002780:	40010c00 	.word	0x40010c00

08002784 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	603a      	str	r2, [r7, #0]
 800278e:	80fb      	strh	r3, [r7, #6]
 8002790:	460b      	mov	r3, r1
 8002792:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8002794:	e01d      	b.n	80027d2 <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800279c:	d904      	bls.n	80027a8 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800279e:	2300      	movs	r3, #0
 80027a0:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	3310      	adds	r3, #16
 80027a6:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80027a8:	88bb      	ldrh	r3, [r7, #4]
 80027aa:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80027ae:	d903      	bls.n	80027b8 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027b0:	2300      	movs	r3, #0
 80027b2:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	88b9      	ldrh	r1, [r7, #4]
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff7f 	bl	80026c4 <LCD_DrawChar>

		pStr ++;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	3308      	adds	r3, #8
 80027d0:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1dd      	bne.n	8002796 <LCD_DrawString+0x12>

	}

}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 80027e4:	b40c      	push	{r2, r3}
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b08e      	sub	sp, #56	; 0x38
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	460a      	mov	r2, r1
 80027f0:	80fb      	strh	r3, [r7, #6]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 80027f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027fa:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 80027fc:	f107 000c 	add.w	r0, r7, #12
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002804:	2128      	movs	r1, #40	; 0x28
 8002806:	f00f fe91 	bl	801252c <vsniprintf>
 800280a:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	b298      	uxth	r0, r3
 8002818:	88bb      	ldrh	r3, [r7, #4]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	b29b      	uxth	r3, r3
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	4619      	mov	r1, r3
 8002824:	f7ff ffae 	bl	8002784 <LCD_DrawString>
 8002828:	e000      	b.n	800282c <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 800282a:	bf00      	nop
}
 800282c:	3738      	adds	r7, #56	; 0x38
 800282e:	46bd      	mov	sp, r7
 8002830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002834:	b002      	add	sp, #8
 8002836:	4770      	bx	lr

08002838 <HAL_TIM_PeriodElapsedCallback>:

uint32_t audio_interrupt_counts = 0;
uint32_t audio_interrupt_start_tick = 0;
uint32_t mix_interrupt_counts = 0;
uint32_t mix_interrupt_start_tick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <HAL_TIM_PeriodElapsedCallback+0x22>
		drum_interrupt_counts++;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002850:	6013      	str	r3, [r2, #0]
		DrumUpdate(0);
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fa78 	bl	8001d48 <DrumUpdate>

	else if (htim == &htim4) {
		mix_interrupt_counts++;
		PrecomputeMix();
	}
}
 8002858:	e00a      	b.n	8002870 <HAL_TIM_PeriodElapsedCallback+0x38>
	else if (htim == &htim4) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d106      	bne.n	8002870 <HAL_TIM_PeriodElapsedCallback+0x38>
		mix_interrupt_counts++;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800286a:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 800286c:	f7fe fc5e 	bl	800112c <PrecomputeMix>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000dac 	.word	0x20000dac
 800287c:	20000e40 	.word	0x20000e40
 8002880:	20000df4 	.word	0x20000df4
 8002884:	20000e50 	.word	0x20000e50

08002888 <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fd25 	bl	80012e4 <ButtonPadCallback>
 800289a:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff fb6b 	bl	8001f78 <ButtonPad_DrumCalibration>


}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b0:	b090      	sub	sp, #64	; 0x40
 80028b2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b4:	f001 f866 	bl	8003984 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b8:	f000 f926 	bl	8002b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028bc:	f000 fbca 	bl	8003054 <MX_GPIO_Init>
  MX_DMA_Init();
 80028c0:	f000 fb8e 	bl	8002fe0 <MX_DMA_Init>
  MX_SPI2_Init();
 80028c4:	f000 fa6c 	bl	8002da0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80028c8:	f000 faec 	bl	8002ea4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80028cc:	f000 f97c 	bl	8002bc8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80028d0:	f00e fcb8 	bl	8011244 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80028d4:	f000 fa44 	bl	8002d60 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80028d8:	f00a fb4a 	bl	800cf70 <MX_FATFS_Init>
  MX_DAC_Init();
 80028dc:	f000 f9de 	bl	8002c9c <MX_DAC_Init>
  MX_I2C1_Init();
 80028e0:	f000 fa10 	bl	8002d04 <MX_I2C1_Init>
  MX_TIM2_Init();
 80028e4:	f000 fa92 	bl	8002e0c <MX_TIM2_Init>
  MX_TIM4_Init();
 80028e8:	f000 fb2a 	bl	8002f40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	ButtonPadInit();
 80028ec:	f7fe fcdc 	bl	80012a8 <ButtonPadInit>

	ILI9341_Init();
 80028f0:	f7ff fbf2 	bl	80020d8 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 80028f4:	2002      	movs	r0, #2
 80028f6:	f7ff fd75 	bl	80023e4 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 80028fa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80028fe:	f7ff fec7 	bl	8002690 <LCD_FillScreen>


  	// Setting the clock divider somehow helps :D
  	FRESULT fresult = f_mount(&fs, "/", 1);
 8002902:	2201      	movs	r2, #1
 8002904:	496c      	ldr	r1, [pc, #432]	; (8002ab8 <main+0x20c>)
 8002906:	486d      	ldr	r0, [pc, #436]	; (8002abc <main+0x210>)
 8002908:	f00d fc98 	bl	801023c <f_mount>
 800290c:	4603      	mov	r3, r0
 800290e:	76fb      	strb	r3, [r7, #27]
  	if (fresult != FR_OK) {
 8002910:	7efb      	ldrb	r3, [r7, #27]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <main+0x78>
  		LCD_Print(0, 19, "Error: f_mount (%d)", fresult); while (1);
 8002916:	7efb      	ldrb	r3, [r7, #27]
 8002918:	4a69      	ldr	r2, [pc, #420]	; (8002ac0 <main+0x214>)
 800291a:	2113      	movs	r1, #19
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff ff61 	bl	80027e4 <LCD_Print>
 8002922:	e7fe      	b.n	8002922 <main+0x76>
  	}

	DrumInit();
 8002924:	f7fe fe54 	bl	80015d0 <DrumInit>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002928:	2100      	movs	r1, #0
 800292a:	4866      	ldr	r0, [pc, #408]	; (8002ac4 <main+0x218>)
 800292c:	f001 fdbd 	bl	80044aa <HAL_DAC_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 8002930:	4865      	ldr	r0, [pc, #404]	; (8002ac8 <main+0x21c>)
 8002932:	f006 fd65 	bl	8009400 <HAL_TIM_Base_Start_IT>
  	drum_interrupt_start_tick = HAL_GetTick();
 8002936:	f001 f87d 	bl	8003a34 <HAL_GetTick>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <main+0x220>)
 8002940:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 8002942:	4863      	ldr	r0, [pc, #396]	; (8002ad0 <main+0x224>)
 8002944:	f006 fcde 	bl	8009304 <HAL_TIM_Base_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002948:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <main+0x224>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b60      	ldr	r3, [pc, #384]	; (8002ad0 <main+0x224>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	60da      	str	r2, [r3, #12]
  	audio_interrupt_start_tick = HAL_GetTick();
 8002958:	f001 f86c 	bl	8003a34 <HAL_GetTick>
 800295c:	4603      	mov	r3, r0
 800295e:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <main+0x228>)
 8002960:	6013      	str	r3, [r2, #0]

  	HAL_TIM_Base_Start_IT(&htim4);
 8002962:	485d      	ldr	r0, [pc, #372]	; (8002ad8 <main+0x22c>)
 8002964:	f006 fd4c 	bl	8009400 <HAL_TIM_Base_Start_IT>
	mix_interrupt_start_tick = HAL_GetTick();
 8002968:	f001 f864 	bl	8003a34 <HAL_GetTick>
 800296c:	4603      	mov	r3, r0
 800296e:	4a5b      	ldr	r2, [pc, #364]	; (8002adc <main+0x230>)
 8002970:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	long last_ticks = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
	long tft_last_ticks = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
	long ticks = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
	int num_hits = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
	int hit_state = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
	while (1) {


		keyboardhid.MODIFIER = 0x02;  // left Shift
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <main+0x234>)
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
		keyboardhid.KEYCODE1 = 0x04;  // press 'a'
 800298c:	4b54      	ldr	r3, [pc, #336]	; (8002ae0 <main+0x234>)
 800298e:	2204      	movs	r2, #4
 8002990:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = 0x05;  // press 'b'
 8002992:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <main+0x234>)
 8002994:	2205      	movs	r2, #5
 8002996:	70da      	strb	r2, [r3, #3]
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8002998:	2208      	movs	r2, #8
 800299a:	4951      	ldr	r1, [pc, #324]	; (8002ae0 <main+0x234>)
 800299c:	4851      	ldr	r0, [pc, #324]	; (8002ae4 <main+0x238>)
 800299e:	f00a fcd3 	bl	800d348 <USBD_HID_SendReport>
		HAL_Delay (50);
 80029a2:	2032      	movs	r0, #50	; 0x32
 80029a4:	f001 f850 	bl	8003a48 <HAL_Delay>

		keyboardhid.MODIFIER = 0x00;  // shift release
 80029a8:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <main+0x234>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
		keyboardhid.KEYCODE1 = 0x00;  // release key
 80029ae:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <main+0x234>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = 0x00;  // release key
 80029b4:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <main+0x234>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	70da      	strb	r2, [r3, #3]
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80029ba:	2208      	movs	r2, #8
 80029bc:	4948      	ldr	r1, [pc, #288]	; (8002ae0 <main+0x234>)
 80029be:	4849      	ldr	r0, [pc, #292]	; (8002ae4 <main+0x238>)
 80029c0:	f00a fcc2 	bl	800d348 <USBD_HID_SendReport>
//
//		switchhid.Button = 0x00;  // shift release
//		USBD_HID_SendReport(&hUsbDeviceFS,  (uint8_t*) &switchhid, sizeof (switchhid));
//		HAL_Delay (200);

		if (HAL_GetTick() - tft_last_ticks > 10) {
 80029c4:	f001 f836 	bl	8003a34 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b0a      	cmp	r3, #10
 80029d0:	d9d9      	bls.n	8002986 <main+0xda>

//			AddDrum((HAL_GetTick() / 1000) % 2);
			int r = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 80029e0:	f001 f828 	bl	8003a34 <HAL_GetTick>
 80029e4:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80029e6:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <main+0x23c>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 80029f0:	f001 f820 	bl	8003a34 <HAL_GetTick>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a3d      	ldr	r2, [pc, #244]	; (8002aec <main+0x240>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <main+0x244>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095c      	lsrs	r4, r3, #5
 8002a06:	4623      	mov	r3, r4
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1b1b      	subs	r3, r3, r4
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002a10:	f001 f810 	bl	8003a34 <HAL_GetTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <main+0x248>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <main+0x244>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095d      	lsrs	r5, r3, #5
 8002a26:	462b      	mov	r3, r5
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1b5b      	subs	r3, r3, r5
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002a30:	f001 f800 	bl	8003a34 <HAL_GetTick>
 8002a34:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a36:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <main+0x248>)
 8002a38:	fba2 1203 	umull	r1, r2, r2, r3
 8002a3c:	0996      	lsrs	r6, r2, #6
 8002a3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a42:	fb06 f202 	mul.w	r2, r6, r2
 8002a46:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <main+0x24c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe f961 	bl	8000d14 <__aeabi_i2f>
 8002a52:	4682      	mov	sl, r0
 8002a54:	f000 ffee 	bl	8003a34 <HAL_GetTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <main+0x220>)
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	3301      	adds	r3, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f952 	bl	8000d0c <__aeabi_ui2f>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4650      	mov	r0, sl
 8002a6e:	f7fe fa59 	bl	8000f24 <__aeabi_fdiv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4921      	ldr	r1, [pc, #132]	; (8002afc <main+0x250>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f9a0 	bl	8000dbc <__aeabi_fmul>
 8002a7c:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd3e 	bl	8000500 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	491d      	ldr	r1, [pc, #116]	; (8002b00 <main+0x254>)
 8002a8a:	6809      	ldr	r1, [r1, #0]
 8002a8c:	9106      	str	r1, [sp, #24]
 8002a8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a92:	9602      	str	r6, [sp, #8]
 8002a94:	9501      	str	r5, [sp, #4]
 8002a96:	9400      	str	r4, [sp, #0]
 8002a98:	464b      	mov	r3, r9
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <main+0x258>)
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7ff fea0 	bl	80027e4 <LCD_Print>
					num_tracks);
			LCD_DrumCalibration(&r);
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f9b0 	bl	8001e0c <LCD_DrumCalibration>
			tft_last_ticks = HAL_GetTick();
 8002aac:	f000 ffc2 	bl	8003a34 <HAL_GetTick>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	61fb      	str	r3, [r7, #28]
	while (1) {
 8002ab4:	e767      	b.n	8002986 <main+0xda>
 8002ab6:	bf00      	nop
 8002ab8:	08014b2c 	.word	0x08014b2c
 8002abc:	200007b0 	.word	0x200007b0
 8002ac0:	08014b30 	.word	0x08014b30
 8002ac4:	20000b98 	.word	0x20000b98
 8002ac8:	20000dac 	.word	0x20000dac
 8002acc:	20000e3c 	.word	0x20000e3c
 8002ad0:	20000d64 	.word	0x20000d64
 8002ad4:	20000e4c 	.word	0x20000e4c
 8002ad8:	20000df4 	.word	0x20000df4
 8002adc:	20000e54 	.word	0x20000e54
 8002ae0:	20000e44 	.word	0x20000e44
 8002ae4:	20000e98 	.word	0x20000e98
 8002ae8:	95217cb1 	.word	0x95217cb1
 8002aec:	45e7b273 	.word	0x45e7b273
 8002af0:	88888889 	.word	0x88888889
 8002af4:	10624dd3 	.word	0x10624dd3
 8002af8:	20000e40 	.word	0x20000e40
 8002afc:	447a0000 	.word	0x447a0000
 8002b00:	2000078c 	.word	0x2000078c
 8002b04:	08014b44 	.word	0x08014b44

08002b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b096      	sub	sp, #88	; 0x58
 8002b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b12:	2228      	movs	r2, #40	; 0x28
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00e ff88 	bl	8011a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fad4 	bl	8007110 <HAL_RCC_OscConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002b6e:	f000 fb3f 	bl	80031f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b72:	230f      	movs	r3, #15
 8002b74:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b76:	2302      	movs	r3, #2
 8002b78:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fd40 	bl	8007614 <HAL_RCC_ClockConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b9a:	f000 fb29 	bl	80031f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002b9e:	2312      	movs	r3, #18
 8002ba0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 feaa 	bl	8007908 <HAL_RCCEx_PeriphCLKConfig>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002bba:	f000 fb19 	bl	80031f0 <Error_Handler>
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3758      	adds	r7, #88	; 0x58
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <MX_ADC1_Init+0xd0>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bec:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002bf4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002c02:	2204      	movs	r2, #4
 8002c04:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c06:	4823      	ldr	r0, [pc, #140]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002c08:	f000 ff42 	bl	8003a90 <HAL_ADC_Init>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002c12:	f000 faed 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002c1e:	2307      	movs	r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	481b      	ldr	r0, [pc, #108]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002c28:	f001 f916 	bl	8003e58 <HAL_ADC_ConfigChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002c32:	f000 fadd 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4814      	ldr	r0, [pc, #80]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002c44:	f001 f908 	bl	8003e58 <HAL_ADC_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002c4e:	f000 facf 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c52:	2302      	movs	r3, #2
 8002c54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c56:	2303      	movs	r3, #3
 8002c58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	480d      	ldr	r0, [pc, #52]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002c60:	f001 f8fa 	bl	8003e58 <HAL_ADC_ConfigChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002c6a:	f000 fac1 	bl	80031f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c72:	2304      	movs	r3, #4
 8002c74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4806      	ldr	r0, [pc, #24]	; (8002c94 <MX_ADC1_Init+0xcc>)
 8002c7c:	f001 f8ec 	bl	8003e58 <HAL_ADC_ConfigChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002c86:	f000 fab3 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000b24 	.word	0x20000b24
 8002c98:	40012400 	.word	0x40012400

08002c9c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_DAC_Init+0x60>)
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <MX_DAC_Init+0x64>)
 8002cae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002cb0:	4812      	ldr	r0, [pc, #72]	; (8002cfc <MX_DAC_Init+0x60>)
 8002cb2:	f001 fbd8 	bl	8004466 <HAL_DAC_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002cbc:	f000 fa98 	bl	80031f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002cc0:	2324      	movs	r3, #36	; 0x24
 8002cc2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002cc8:	463b      	mov	r3, r7
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480b      	ldr	r0, [pc, #44]	; (8002cfc <MX_DAC_Init+0x60>)
 8002cd0:	f001 fd4a 	bl	8004768 <HAL_DAC_ConfigChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002cda:	f000 fa89 	bl	80031f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002cde:	463b      	mov	r3, r7
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_DAC_Init+0x60>)
 8002ce6:	f001 fd3f 	bl	8004768 <HAL_DAC_ConfigChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002cf0:	f000 fa7e 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000b98 	.word	0x20000b98
 8002d00:	40007400 	.word	0x40007400

08002d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <MX_I2C1_Init+0x54>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_I2C1_Init+0x58>)
 8002d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d40:	4804      	ldr	r0, [pc, #16]	; (8002d54 <MX_I2C1_Init+0x50>)
 8002d42:	f002 fb49 	bl	80053d8 <HAL_I2C_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d4c:	f000 fa50 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000c34 	.word	0x20000c34
 8002d58:	40005400 	.word	0x40005400
 8002d5c:	000186a0 	.word	0x000186a0

08002d60 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d66:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <MX_SDIO_SD_Init+0x3c>)
 8002d68:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <MX_SDIO_SD_Init+0x38>)
 8002d8a:	2264      	movs	r2, #100	; 0x64
 8002d8c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000c88 	.word	0x20000c88
 8002d9c:	40018000 	.word	0x40018000

08002da0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <MX_SPI2_Init+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002db0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002dec:	220a      	movs	r2, #10
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002df0:	4804      	ldr	r0, [pc, #16]	; (8002e04 <MX_SPI2_Init+0x64>)
 8002df2:	f005 ffca 	bl	8008d8a <HAL_SPI_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002dfc:	f000 f9f8 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000d0c 	.word	0x20000d0c
 8002e08:	40003800 	.word	0x40003800

08002e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e20:	463b      	mov	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e3e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002e42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e50:	4813      	ldr	r0, [pc, #76]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e52:	f006 fa07 	bl	8009264 <HAL_TIM_Base_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e5c:	f000 f9c8 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e6e:	f006 fc2f 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e78:	f000 f9ba 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	4619      	mov	r1, r3
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e8a:	f006 fef1 	bl	8009c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e94:	f000 f9ac 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000d64 	.word	0x20000d64

08002ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <MX_TIM3_Init+0x98>)
 8002ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ec8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ed6:	2231      	movs	r2, #49	; 0x31
 8002ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee6:	4814      	ldr	r0, [pc, #80]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ee8:	f006 f9bc 	bl	8009264 <HAL_TIM_Base_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ef2:	f000 f97d 	bl	80031f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	4619      	mov	r1, r3
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002f04:	f006 fbe4 	bl	80096d0 <HAL_TIM_ConfigClockSource>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f0e:	f000 f96f 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002f20:	f006 fea6 	bl	8009c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f2a:	f000 f961 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000dac 	.word	0x20000dac
 8002f3c:	40000400 	.word	0x40000400

08002f40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f60:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <MX_TIM4_Init+0x9c>)
 8002f62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f72:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f84:	4814      	ldr	r0, [pc, #80]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f86:	f006 f96d 	bl	8009264 <HAL_TIM_Base_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002f90:	f000 f92e 	bl	80031f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002f94:	2305      	movs	r3, #5
 8002f96:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002f98:	2310      	movs	r3, #16
 8002f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002fa4:	f006 fc5b 	bl	800985e <HAL_TIM_SlaveConfigSynchro>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002fae:	f000 f91f 	bl	80031f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002fc0:	f006 fe56 	bl	8009c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002fca:	f000 f911 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000df4 	.word	0x20000df4
 8002fdc:	40000800 	.word	0x40000800

08002fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <MX_DMA_Init+0x70>)
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <MX_DMA_Init+0x70>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6153      	str	r3, [r2, #20]
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <MX_DMA_Init+0x70>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <MX_DMA_Init+0x70>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <MX_DMA_Init+0x70>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6153      	str	r3, [r2, #20]
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <MX_DMA_Init+0x70>)
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	200b      	movs	r0, #11
 800301c:	f001 f9ed 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003020:	200b      	movs	r0, #11
 8003022:	f001 fa06 	bl	8004432 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	203a      	movs	r0, #58	; 0x3a
 800302c:	f001 f9e5 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003030:	203a      	movs	r0, #58	; 0x3a
 8003032:	f001 f9fe 	bl	8004432 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	203b      	movs	r0, #59	; 0x3b
 800303c:	f001 f9dd 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8003040:	203b      	movs	r0, #59	; 0x3b
 8003042:	f001 f9f6 	bl	8004432 <HAL_NVIC_EnableIRQ>

}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000

08003054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003068:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <MX_GPIO_Init+0x188>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <MX_GPIO_Init+0x188>)
 800306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003072:	6193      	str	r3, [r2, #24]
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <MX_GPIO_Init+0x188>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003080:	4b56      	ldr	r3, [pc, #344]	; (80031dc <MX_GPIO_Init+0x188>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4a55      	ldr	r2, [pc, #340]	; (80031dc <MX_GPIO_Init+0x188>)
 8003086:	f043 0310 	orr.w	r3, r3, #16
 800308a:	6193      	str	r3, [r2, #24]
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <MX_GPIO_Init+0x188>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <MX_GPIO_Init+0x188>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <MX_GPIO_Init+0x188>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b4d      	ldr	r3, [pc, #308]	; (80031dc <MX_GPIO_Init+0x188>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b0:	4b4a      	ldr	r3, [pc, #296]	; (80031dc <MX_GPIO_Init+0x188>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a49      	ldr	r2, [pc, #292]	; (80031dc <MX_GPIO_Init+0x188>)
 80030b6:	f043 0308 	orr.w	r3, r3, #8
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b47      	ldr	r3, [pc, #284]	; (80031dc <MX_GPIO_Init+0x188>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c8:	4b44      	ldr	r3, [pc, #272]	; (80031dc <MX_GPIO_Init+0x188>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a43      	ldr	r2, [pc, #268]	; (80031dc <MX_GPIO_Init+0x188>)
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b41      	ldr	r3, [pc, #260]	; (80031dc <MX_GPIO_Init+0x188>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 80030e0:	2200      	movs	r2, #0
 80030e2:	f64f 0170 	movw	r1, #63600	; 0xf870
 80030e6:	483e      	ldr	r0, [pc, #248]	; (80031e0 <MX_GPIO_Init+0x18c>)
 80030e8:	f002 f945 	bl	8005376 <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80030f2:	483c      	ldr	r0, [pc, #240]	; (80031e4 <MX_GPIO_Init+0x190>)
 80030f4:	f002 f93f 	bl	8005376 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80030fe:	483a      	ldr	r0, [pc, #232]	; (80031e8 <MX_GPIO_Init+0x194>)
 8003100:	f002 f939 	bl	8005376 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003104:	230f      	movs	r3, #15
 8003106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <MX_GPIO_Init+0x198>)
 800310a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800310c:	2302      	movs	r3, #2
 800310e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003110:	f107 0318 	add.w	r3, r7, #24
 8003114:	4619      	mov	r1, r3
 8003116:	4832      	ldr	r0, [pc, #200]	; (80031e0 <MX_GPIO_Init+0x18c>)
 8003118:	f001 ff82 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 800311c:	f64f 0370 	movw	r3, #63600	; 0xf870
 8003120:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2302      	movs	r3, #2
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800312e:	f107 0318 	add.w	r3, r7, #24
 8003132:	4619      	mov	r1, r3
 8003134:	482a      	ldr	r0, [pc, #168]	; (80031e0 <MX_GPIO_Init+0x18c>)
 8003136:	f001 ff73 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800313a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800313e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003140:	2301      	movs	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2302      	movs	r3, #2
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314c:	f107 0318 	add.w	r3, r7, #24
 8003150:	4619      	mov	r1, r3
 8003152:	4824      	ldr	r0, [pc, #144]	; (80031e4 <MX_GPIO_Init+0x190>)
 8003154:	f001 ff64 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8003158:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800315c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315e:	2301      	movs	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2302      	movs	r3, #2
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f107 0318 	add.w	r3, r7, #24
 800316e:	4619      	mov	r1, r3
 8003170:	481d      	ldr	r0, [pc, #116]	; (80031e8 <MX_GPIO_Init+0x194>)
 8003172:	f001 ff55 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317a:	2301      	movs	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003186:	f107 0318 	add.w	r3, r7, #24
 800318a:	4619      	mov	r1, r3
 800318c:	4815      	ldr	r0, [pc, #84]	; (80031e4 <MX_GPIO_Init+0x190>)
 800318e:	f001 ff47 	bl	8005020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	2006      	movs	r0, #6
 8003198:	f001 f92f 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800319c:	2006      	movs	r0, #6
 800319e:	f001 f948 	bl	8004432 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	2007      	movs	r0, #7
 80031a8:	f001 f927 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031ac:	2007      	movs	r0, #7
 80031ae:	f001 f940 	bl	8004432 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	2008      	movs	r0, #8
 80031b8:	f001 f91f 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031bc:	2008      	movs	r0, #8
 80031be:	f001 f938 	bl	8004432 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	2009      	movs	r0, #9
 80031c8:	f001 f917 	bl	80043fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80031cc:	2009      	movs	r0, #9
 80031ce:	f001 f930 	bl	8004432 <HAL_NVIC_EnableIRQ>

}
 80031d2:	bf00      	nop
 80031d4:	3728      	adds	r7, #40	; 0x28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40011800 	.word	0x40011800
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40010c00 	.word	0x40010c00
 80031ec:	10310000 	.word	0x10310000

080031f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031f8:	e7fe      	b.n	80031f8 <Error_Handler+0x8>
	...

080031fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_MspInit+0x40>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <HAL_MspInit+0x40>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6193      	str	r3, [r2, #24]
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_MspInit+0x40>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_MspInit+0x40>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <HAL_MspInit+0x40>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	61d3      	str	r3, [r2, #28]
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_MspInit+0x40>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_ADC_MspInit+0xbc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d149      	bne.n	80032f4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_ADC_MspInit+0xc0>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_ADC_MspInit+0xc0>)
 8003266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_ADC_MspInit+0xc0>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_ADC_MspInit+0xc0>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <HAL_ADC_MspInit+0xc0>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_ADC_MspInit+0xc0>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003290:	230f      	movs	r3, #15
 8003292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003294:	2303      	movs	r3, #3
 8003296:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4619      	mov	r1, r3
 800329e:	4819      	ldr	r0, [pc, #100]	; (8003304 <HAL_ADC_MspInit+0xc4>)
 80032a0:	f001 febe 	bl	8005020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032a6:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_ADC_MspInit+0xcc>)
 80032a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032ce:	2220      	movs	r2, #32
 80032d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032da:	f001 fb25 	bl	8004928 <HAL_DMA_Init>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80032e4:	f7ff ff84 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032ec:	621a      	str	r2, [r3, #32]
 80032ee:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032f4:	bf00      	nop
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40012400 	.word	0x40012400
 8003300:	40021000 	.word	0x40021000
 8003304:	40010800 	.word	0x40010800
 8003308:	20000b54 	.word	0x20000b54
 800330c:	40020008 	.word	0x40020008

08003310 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0310 	add.w	r3, r7, #16
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3d      	ldr	r2, [pc, #244]	; (8003420 <HAL_DAC_MspInit+0x110>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d172      	bne.n	8003416 <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <HAL_DAC_MspInit+0x114>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4a3b      	ldr	r2, [pc, #236]	; (8003424 <HAL_DAC_MspInit+0x114>)
 8003336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800333a:	61d3      	str	r3, [r2, #28]
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_DAC_MspInit+0x114>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_DAC_MspInit+0x114>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4a35      	ldr	r2, [pc, #212]	; (8003424 <HAL_DAC_MspInit+0x114>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6193      	str	r3, [r2, #24]
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_DAC_MspInit+0x114>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003360:	2330      	movs	r3, #48	; 0x30
 8003362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003364:	2303      	movs	r3, #3
 8003366:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	4619      	mov	r1, r3
 800336e:	482e      	ldr	r0, [pc, #184]	; (8003428 <HAL_DAC_MspInit+0x118>)
 8003370:	f001 fe56 	bl	8005020 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_DAC_MspInit+0x11c>)
 8003376:	4a2e      	ldr	r2, [pc, #184]	; (8003430 <HAL_DAC_MspInit+0x120>)
 8003378:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_DAC_MspInit+0x11c>)
 800337c:	2210      	movs	r2, #16
 800337e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <HAL_DAC_MspInit+0x11c>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_DAC_MspInit+0x11c>)
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800338c:	4b27      	ldr	r3, [pc, #156]	; (800342c <HAL_DAC_MspInit+0x11c>)
 800338e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003392:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_DAC_MspInit+0x11c>)
 8003396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800339c:	4b23      	ldr	r3, [pc, #140]	; (800342c <HAL_DAC_MspInit+0x11c>)
 800339e:	2220      	movs	r2, #32
 80033a0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <HAL_DAC_MspInit+0x11c>)
 80033a4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80033a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80033aa:	4820      	ldr	r0, [pc, #128]	; (800342c <HAL_DAC_MspInit+0x11c>)
 80033ac:	f001 fabc 	bl	8004928 <HAL_DMA_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 80033b6:	f7ff ff1b 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_DAC_MspInit+0x11c>)
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	; (800342c <HAL_DAC_MspInit+0x11c>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033c8:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <HAL_DAC_MspInit+0x128>)
 80033ca:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033ce:	2210      	movs	r2, #16
 80033d0:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ec:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033f0:	2220      	movs	r2, #32
 80033f2:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80033fa:	480e      	ldr	r0, [pc, #56]	; (8003434 <HAL_DAC_MspInit+0x124>)
 80033fc:	f001 fa94 	bl	8004928 <HAL_DMA_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8003406:	f7ff fef3 	bl	80031f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_DAC_MspInit+0x124>)
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_DAC_MspInit+0x124>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003416:	bf00      	nop
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40007400 	.word	0x40007400
 8003424:	40021000 	.word	0x40021000
 8003428:	40010800 	.word	0x40010800
 800342c:	20000bac 	.word	0x20000bac
 8003430:	40020430 	.word	0x40020430
 8003434:	20000bf0 	.word	0x20000bf0
 8003438:	40020444 	.word	0x40020444

0800343c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <HAL_I2C_MspInit+0x70>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d123      	bne.n	80034a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 8003462:	f043 0308 	orr.w	r3, r3, #8
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003478:	2312      	movs	r3, #18
 800347a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	4619      	mov	r1, r3
 8003486:	480b      	ldr	r0, [pc, #44]	; (80034b4 <HAL_I2C_MspInit+0x78>)
 8003488:	f001 fdca 	bl	8005020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 8003492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003496:	61d3      	str	r3, [r2, #28]
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_I2C_MspInit+0x74>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40005400 	.word	0x40005400
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40010c00 	.word	0x40010c00

080034b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 0318 	add.w	r3, r7, #24
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_SD_MspInit+0xa4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d13c      	bne.n	8003552 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <HAL_SD_MspInit+0xa8>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <HAL_SD_MspInit+0xa8>)
 80034de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e2:	6153      	str	r3, [r2, #20]
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_SD_MspInit+0xa8>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_SD_MspInit+0xa8>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_SD_MspInit+0xa8>)
 80034f6:	f043 0310 	orr.w	r3, r3, #16
 80034fa:	6193      	str	r3, [r2, #24]
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_SD_MspInit+0xa8>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_SD_MspInit+0xa8>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <HAL_SD_MspInit+0xa8>)
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	6193      	str	r3, [r2, #24]
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_SD_MspInit+0xa8>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003520:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003524:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800352a:	2303      	movs	r3, #3
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352e:	f107 0318 	add.w	r3, r7, #24
 8003532:	4619      	mov	r1, r3
 8003534:	480b      	ldr	r0, [pc, #44]	; (8003564 <HAL_SD_MspInit+0xac>)
 8003536:	f001 fd73 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800353a:	2304      	movs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003542:	2303      	movs	r3, #3
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003546:	f107 0318 	add.w	r3, r7, #24
 800354a:	4619      	mov	r1, r3
 800354c:	4806      	ldr	r0, [pc, #24]	; (8003568 <HAL_SD_MspInit+0xb0>)
 800354e:	f001 fd67 	bl	8005020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40018000 	.word	0x40018000
 8003560:	40021000 	.word	0x40021000
 8003564:	40011000 	.word	0x40011000
 8003568:	40011400 	.word	0x40011400

0800356c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_SPI_MspInit+0x8c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d131      	bne.n	80035f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_SPI_MspInit+0x90>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <HAL_SPI_MspInit+0x90>)
 8003592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003596:	61d3      	str	r3, [r2, #28]
 8003598:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_SPI_MspInit+0x90>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_SPI_MspInit+0x90>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_SPI_MspInit+0x90>)
 80035aa:	f043 0308 	orr.w	r3, r3, #8
 80035ae:	6193      	str	r3, [r2, #24]
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_SPI_MspInit+0x90>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80035bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80035c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4619      	mov	r1, r3
 80035d0:	480b      	ldr	r0, [pc, #44]	; (8003600 <HAL_SPI_MspInit+0x94>)
 80035d2:	f001 fd25 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80035d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	4619      	mov	r1, r3
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <HAL_SPI_MspInit+0x94>)
 80035ec:	f001 fd18 	bl	8005020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035f0:	bf00      	nop
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40003800 	.word	0x40003800
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010c00 	.word	0x40010c00

08003604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d10c      	bne.n	8003630 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	61d3      	str	r3, [r2, #28]
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800362e:	e032      	b.n	8003696 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <HAL_TIM_Base_MspInit+0xa0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d114      	bne.n	8003664 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	61d3      	str	r3, [r2, #28]
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	201d      	movs	r0, #29
 8003658:	f000 fecf 	bl	80043fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800365c:	201d      	movs	r0, #29
 800365e:	f000 fee8 	bl	8004432 <HAL_NVIC_EnableIRQ>
}
 8003662:	e018      	b.n	8003696 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0f      	ldr	r2, [pc, #60]	; (80036a8 <HAL_TIM_Base_MspInit+0xa4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	61d3      	str	r3, [r2, #28]
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_TIM_Base_MspInit+0x9c>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	201e      	movs	r0, #30
 800368c:	f000 feb5 	bl	80043fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003690:	201e      	movs	r0, #30
 8003692:	f000 fece 	bl	8004432 <HAL_NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <NMI_Handler+0x4>

080036b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b6:	e7fe      	b.n	80036b6 <HardFault_Handler+0x4>

080036b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036bc:	e7fe      	b.n	80036bc <MemManage_Handler+0x4>

080036be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c2:	e7fe      	b.n	80036c2 <BusFault_Handler+0x4>

080036c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036c8:	e7fe      	b.n	80036c8 <UsageFault_Handler+0x4>

080036ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036f2:	f000 f98d 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}

080036fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036fe:	2001      	movs	r0, #1
 8003700:	f001 fe52 	bl	80053a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}

08003708 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800370c:	2002      	movs	r0, #2
 800370e:	f001 fe4b 	bl	80053a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}

08003716 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800371a:	2004      	movs	r0, #4
 800371c:	f001 fe44 	bl	80053a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}

08003724 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003728:	2008      	movs	r0, #8
 800372a:	f001 fe3d 	bl	80053a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <DMA1_Channel1_IRQHandler+0x10>)
 800373a:	f001 fa07 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000b54 	.word	0x20000b54

08003748 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800374e:	f002 f8ac 	bl	80058aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000135c 	.word	0x2000135c

0800375c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <TIM3_IRQHandler+0x10>)
 8003762:	f005 fead 	bl	80094c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000dac 	.word	0x20000dac

08003770 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <TIM4_IRQHandler+0x10>)
 8003776:	f005 fea3 	bl	80094c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000df4 	.word	0x20000df4

08003784 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <DMA2_Channel3_IRQHandler+0x10>)
 800378a:	f001 f9df 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000bac 	.word	0x20000bac

08003798 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <DMA2_Channel4_5_IRQHandler+0x10>)
 800379e:	f001 f9d5 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000bf0 	.word	0x20000bf0

080037ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	return 1;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <_kill>:

int _kill(int pid, int sig)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037c4:	f00e f8f8 	bl	80119b8 <__errno>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2216      	movs	r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
	return -1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_exit>:

void _exit (int status)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037e2:	f04f 31ff 	mov.w	r1, #4294967295
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffe7 	bl	80037ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80037ec:	e7fe      	b.n	80037ec <_exit+0x12>

080037ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e00a      	b.n	8003816 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003800:	f3af 8000 	nop.w
 8003804:	4601      	mov	r1, r0
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	60ba      	str	r2, [r7, #8]
 800380c:	b2ca      	uxtb	r2, r1
 800380e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3301      	adds	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	dbf0      	blt.n	8003800 <_read+0x12>
	}

return len;
 800381e:	687b      	ldr	r3, [r7, #4]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e009      	b.n	800384e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	60ba      	str	r2, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	dbf1      	blt.n	800383a <_write+0x12>
	}
	return len;
 8003856:	687b      	ldr	r3, [r7, #4]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_close>:

int _close(int file)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	return -1;
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003886:	605a      	str	r2, [r3, #4]
	return 0;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <_isatty>:

int _isatty(int file)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	return 1;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
	return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <_sbrk+0x5c>)
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <_sbrk+0x60>)
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <_sbrk+0x64>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <_sbrk+0x64>)
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <_sbrk+0x68>)
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <_sbrk+0x64>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d207      	bcs.n	8003900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f0:	f00e f862 	bl	80119b8 <__errno>
 80038f4:	4603      	mov	r3, r0
 80038f6:	220c      	movs	r2, #12
 80038f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e009      	b.n	8003914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <_sbrk+0x64>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <_sbrk+0x64>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	4a05      	ldr	r2, [pc, #20]	; (8003924 <_sbrk+0x64>)
 8003910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20010000 	.word	0x20010000
 8003920:	00000400 	.word	0x00000400
 8003924:	20000e58 	.word	0x20000e58
 8003928:	20001670 	.word	0x20001670

0800392c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003938:	f7ff fff8 	bl	800392c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800393e:	490c      	ldr	r1, [pc, #48]	; (8003970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003940:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003944:	e002      	b.n	800394c <LoopCopyDataInit>

08003946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394a:	3304      	adds	r3, #4

0800394c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800394c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003950:	d3f9      	bcc.n	8003946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003954:	4c09      	ldr	r4, [pc, #36]	; (800397c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003958:	e001      	b.n	800395e <LoopFillZerobss>

0800395a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800395c:	3204      	adds	r2, #4

0800395e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003960:	d3fb      	bcc.n	800395a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003962:	f00e f82f 	bl	80119c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003966:	f7fe ffa1 	bl	80028ac <main>
  bx lr
 800396a:	4770      	bx	lr
  ldr r0, =_sdata
 800396c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003970:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003974:	0802e29c 	.word	0x0802e29c
  ldr r2, =_sbss
 8003978:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 800397c:	20001670 	.word	0x20001670

08003980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC1_2_IRQHandler>
	...

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_Init+0x28>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_Init+0x28>)
 800398e:	f043 0310 	orr.w	r3, r3, #16
 8003992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 fd25 	bl	80043e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399a:	2000      	movs	r0, #0
 800399c:	f000 f808 	bl	80039b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a0:	f7ff fc2c 	bl	80031fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40022000 	.word	0x40022000

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_InitTick+0x54>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_InitTick+0x58>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fd3d 	bl	800444e <HAL_SYSTICK_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00e      	b.n	80039fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d80a      	bhi.n	80039fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e4:	2200      	movs	r2, #0
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f000 fd05 	bl	80043fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_InitTick+0x5c>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000010 	.word	0x20000010
 8003a08:	20000018 	.word	0x20000018
 8003a0c:	20000014 	.word	0x20000014

08003a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_IncTick+0x1c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_IncTick+0x20>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_IncTick+0x20>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	20000018 	.word	0x20000018
 8003a30:	20000e5c 	.word	0x20000e5c

08003a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_GetTick+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000e5c 	.word	0x20000e5c

08003a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_GetTick>
 8003a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d005      	beq.n	8003a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_Delay+0x44>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a6e:	bf00      	nop
 8003a70:	f7ff ffe0 	bl	8003a34 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <HAL_Delay+0x28>
  {
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000018 	.word	0x20000018

08003a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0ce      	b.n	8003c50 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fbb6 	bl	8003240 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb11 	bl	80040fc <ADC_ConversionStop_Disable>
 8003ada:	4603      	mov	r3, r0
 8003adc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 80a9 	bne.w	8003c3e <HAL_ADC_Init+0x1ae>
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 80a5 	bne.w	8003c3e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003afc:	f023 0302 	bic.w	r3, r3, #2
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4951      	ldr	r1, [pc, #324]	; (8003c58 <HAL_ADC_Init+0x1c8>)
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d10a      	bne.n	8003b2c <HAL_ADC_Init+0x9c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b1e:	d002      	beq.n	8003b26 <HAL_ADC_Init+0x96>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	e004      	b.n	8003b30 <HAL_ADC_Init+0xa0>
 8003b26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b2a:	e001      	b.n	8003b30 <HAL_ADC_Init+0xa0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7b1b      	ldrb	r3, [r3, #12]
 8003b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_Init+0xc2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <HAL_ADC_Init+0xc8>
 8003b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b56:	e000      	b.n	8003b5a <HAL_ADC_Init+0xca>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7d1b      	ldrb	r3, [r3, #20]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d119      	bne.n	8003b9c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7b1b      	ldrb	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	035a      	lsls	r2, r3, #13
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e00b      	b.n	8003b9c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_ADC_Init+0x1cc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bcc:	d003      	beq.n	8003bd6 <HAL_ADC_Init+0x146>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d104      	bne.n	8003be0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_ADC_Init+0x1d0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d10b      	bne.n	8003c1c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c1a:	e018      	b.n	8003c4e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f023 0312 	bic.w	r3, r3, #18
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c3c:	e007      	b.n	8003c4e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40013c00 	.word	0x40013c00
 8003c5c:	ffe1f7fd 	.word	0xffe1f7fd
 8003c60:	ff1f0efe 	.word	0xff1f0efe

08003c64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a64      	ldr	r2, [pc, #400]	; (8003e0c <HAL_ADC_Start_DMA+0x1a8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_ADC_Start_DMA+0x24>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_ADC_Start_DMA+0x1ac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d106      	bne.n	8003c96 <HAL_ADC_Start_DMA+0x32>
 8003c88:	4b60      	ldr	r3, [pc, #384]	; (8003e0c <HAL_ADC_Start_DMA+0x1a8>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f040 80b3 	bne.w	8003dfc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_Start_DMA+0x40>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0ae      	b.n	8003e02 <HAL_ADC_Start_DMA+0x19e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f9cb 	bl	8004048 <ADC_Enable>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 809a 	bne.w	8003df2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4e      	ldr	r2, [pc, #312]	; (8003e10 <HAL_ADC_Start_DMA+0x1ac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_Start_DMA+0x84>
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_ADC_Start_DMA+0x1a8>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d115      	bne.n	8003d14 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d026      	beq.n	8003d50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d12:	e01d      	b.n	8003d50 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <HAL_ADC_Start_DMA+0x1a8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_ADC_Start_DMA+0xd0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_ADC_Start_DMA+0x1ac>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10d      	bne.n	8003d50 <HAL_ADC_Start_DMA+0xec>
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_ADC_Start_DMA+0x1a8>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d006      	beq.n	8003d6a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f023 0206 	bic.w	r2, r3, #6
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d68:	e002      	b.n	8003d70 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	; (8003e14 <HAL_ADC_Start_DMA+0x1b0>)
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4a24      	ldr	r2, [pc, #144]	; (8003e18 <HAL_ADC_Start_DMA+0x1b4>)
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_ADC_Start_DMA+0x1b8>)
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0202 	mvn.w	r2, #2
 8003d98:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a18      	ldr	r0, [r3, #32]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	334c      	adds	r3, #76	; 0x4c
 8003db4:	4619      	mov	r1, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f000 fe2b 	bl	8004a14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003dc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003dcc:	d108      	bne.n	8003de0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ddc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003dde:	e00f      	b.n	8003e00 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003dee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003df0:	e006      	b.n	8003e00 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003dfa:	e001      	b.n	8003e00 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40012400 	.word	0x40012400
 8003e10:	40012800 	.word	0x40012800
 8003e14:	0800417f 	.word	0x0800417f
 8003e18:	080041fb 	.word	0x080041fb
 8003e1c:	08004217 	.word	0x08004217

08003e20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x20>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e0dc      	b.n	8004032 <HAL_ADC_ConfigChannel+0x1da>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d81c      	bhi.n	8003ec2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	3b05      	subs	r3, #5
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	4019      	ands	r1, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3b05      	subs	r3, #5
 8003eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34
 8003ec0:	e03c      	b.n	8003f3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d81c      	bhi.n	8003f04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	3b23      	subs	r3, #35	; 0x23
 8003edc:	221f      	movs	r2, #31
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	4019      	ands	r1, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3b23      	subs	r3, #35	; 0x23
 8003ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
 8003f02:	e01b      	b.n	8003f3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	3b41      	subs	r3, #65	; 0x41
 8003f16:	221f      	movs	r2, #31
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	4019      	ands	r1, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3b41      	subs	r3, #65	; 0x41
 8003f30:	fa00 f203 	lsl.w	r2, r0, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b09      	cmp	r3, #9
 8003f42:	d91c      	bls.n	8003f7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68d9      	ldr	r1, [r3, #12]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	3b1e      	subs	r3, #30
 8003f56:	2207      	movs	r2, #7
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	4019      	ands	r1, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6898      	ldr	r0, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3b1e      	subs	r3, #30
 8003f70:	fa00 f203 	lsl.w	r2, r0, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e019      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6919      	ldr	r1, [r3, #16]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	2207      	movs	r2, #7
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	4019      	ands	r1, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6898      	ldr	r0, [r3, #8]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d003      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fbe:	2b11      	cmp	r3, #17
 8003fc0:	d132      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_ADC_ConfigChannel+0x1e4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d125      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d126      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003fe8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d11a      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a13      	ldr	r2, [pc, #76]	; (8004044 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	0c9a      	lsrs	r2, r3, #18
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004008:	e002      	b.n	8004010 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3b01      	subs	r3, #1
 800400e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f9      	bne.n	800400a <HAL_ADC_ConfigChannel+0x1b2>
 8004016:	e007      	b.n	8004028 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	40012400 	.word	0x40012400
 8004040:	20000010 	.word	0x20000010
 8004044:	431bde83 	.word	0x431bde83

08004048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d040      	beq.n	80040e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <ADC_Enable+0xac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <ADC_Enable+0xb0>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	0c9b      	lsrs	r3, r3, #18
 8004082:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004084:	e002      	b.n	800408c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3b01      	subs	r3, #1
 800408a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f9      	bne.n	8004086 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004092:	f7ff fccf 	bl	8003a34 <HAL_GetTick>
 8004096:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004098:	e01f      	b.n	80040da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800409a:	f7ff fccb 	bl	8003a34 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d918      	bls.n	80040da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d011      	beq.n	80040da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f043 0210 	orr.w	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e007      	b.n	80040ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d1d8      	bne.n	800409a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000010 	.word	0x20000010
 80040f8:	431bde83 	.word	0x431bde83

080040fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d12e      	bne.n	8004174 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004126:	f7ff fc85 	bl	8003a34 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800412c:	e01b      	b.n	8004166 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800412e:	f7ff fc81 	bl	8003a34 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d914      	bls.n	8004166 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d10d      	bne.n	8004166 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f043 0210 	orr.w	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e007      	b.n	8004176 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d0dc      	beq.n	800412e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004194:	2b00      	cmp	r3, #0
 8004196:	d127      	bne.n	80041e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80041ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041b2:	d115      	bne.n	80041e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d111      	bne.n	80041e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7ff fe1d 	bl	8003e20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80041e6:	e004      	b.n	80041f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fe12 	bl	8003e32 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	f043 0204 	orr.w	r2, r3, #4
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fe01 	bl	8003e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800425c:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427e:	4a04      	ldr	r2, [pc, #16]	; (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	60d3      	str	r3, [r2, #12]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <__NVIC_GetPriorityGrouping+0x18>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 0307 	and.w	r3, r3, #7
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db0b      	blt.n	80042da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <__NVIC_EnableIRQ+0x34>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2001      	movs	r0, #1
 80042d2:	fa00 f202 	lsl.w	r2, r0, r2
 80042d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	e000e100 	.word	0xe000e100

080042e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	bf28      	it	cs
 800435a:	2304      	movcs	r3, #4
 800435c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3304      	adds	r3, #4
 8004362:	2b06      	cmp	r3, #6
 8004364:	d902      	bls.n	800436c <NVIC_EncodePriority+0x30>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3b03      	subs	r3, #3
 800436a:	e000      	b.n	800436e <NVIC_EncodePriority+0x32>
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	401a      	ands	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004384:	f04f 31ff 	mov.w	r1, #4294967295
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	43d9      	mvns	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004394:	4313      	orrs	r3, r2
         );
}
 8004396:	4618      	mov	r0, r3
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b0:	d301      	bcc.n	80043b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043b2:	2301      	movs	r3, #1
 80043b4:	e00f      	b.n	80043d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b6:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <SysTick_Config+0x40>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043be:	210f      	movs	r1, #15
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	f7ff ff90 	bl	80042e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <SysTick_Config+0x40>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <SysTick_Config+0x40>)
 80043d0:	2207      	movs	r2, #7
 80043d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	e000e010 	.word	0xe000e010

080043e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff2d 	bl	800424c <__NVIC_SetPriorityGrouping>
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800440c:	f7ff ff42 	bl	8004294 <__NVIC_GetPriorityGrouping>
 8004410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7ff ff90 	bl	800433c <NVIC_EncodePriority>
 800441c:	4602      	mov	r2, r0
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ff5f 	bl	80042e8 <__NVIC_SetPriority>
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	4603      	mov	r3, r0
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ff35 	bl	80042b0 <__NVIC_EnableIRQ>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ffa2 	bl	80043a0 <SysTick_Config>
 800445c:	4603      	mov	r3, r0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e014      	b.n	80044a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	791b      	ldrb	r3, [r3, #4]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fe ff41 	bl	8003310 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e046      	b.n	800454c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	795b      	ldrb	r3, [r3, #5]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_DAC_Start+0x20>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e040      	b.n	800454c <HAL_DAC_Start+0xa2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6819      	ldr	r1, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2201      	movs	r2, #1
 80044e4:	409a      	lsls	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80044fe:	2b3c      	cmp	r3, #60	; 0x3c
 8004500:	d11d      	bne.n	800453e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e014      	b.n	800453e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	213c      	movs	r1, #60	; 0x3c
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	429a      	cmp	r2, r3
 800452c:	d107      	bne.n	800453e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0202 	orr.w	r2, r2, #2
 800453c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
	...

08004558 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e092      	b.n	8004696 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	795b      	ldrb	r3, [r3, #5]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_DAC_Start_DMA+0x24>
 8004578:	2302      	movs	r3, #2
 800457a:	e08c      	b.n	8004696 <HAL_DAC_Start_DMA+0x13e>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2202      	movs	r2, #2
 8004586:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d129      	bne.n	80045e2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4a43      	ldr	r2, [pc, #268]	; (80046a0 <HAL_DAC_Start_DMA+0x148>)
 8004594:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <HAL_DAC_Start_DMA+0x14c>)
 800459c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4a41      	ldr	r2, [pc, #260]	; (80046a8 <HAL_DAC_Start_DMA+0x150>)
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_DAC_Start_DMA+0x6c>
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d005      	beq.n	80045ce <HAL_DAC_Start_DMA+0x76>
 80045c2:	e009      	b.n	80045d8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	613b      	str	r3, [r7, #16]
        break;
 80045cc:	e033      	b.n	8004636 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	613b      	str	r3, [r7, #16]
        break;
 80045d6:	e02e      	b.n	8004636 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3310      	adds	r3, #16
 80045de:	613b      	str	r3, [r7, #16]
        break;
 80045e0:	e029      	b.n	8004636 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4a31      	ldr	r2, [pc, #196]	; (80046ac <HAL_DAC_Start_DMA+0x154>)
 80045e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <HAL_DAC_Start_DMA+0x158>)
 80045f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <HAL_DAC_Start_DMA+0x15c>)
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004608:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_DAC_Start_DMA+0xc0>
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	2b04      	cmp	r3, #4
 8004614:	d005      	beq.n	8004622 <HAL_DAC_Start_DMA+0xca>
 8004616:	e009      	b.n	800462c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	613b      	str	r3, [r7, #16]
        break;
 8004620:	e009      	b.n	8004636 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3318      	adds	r3, #24
 8004628:	613b      	str	r3, [r7, #16]
        break;
 800462a:	e004      	b.n	8004636 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	331c      	adds	r3, #28
 8004632:	613b      	str	r3, [r7, #16]
        break;
 8004634:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6898      	ldr	r0, [r3, #8]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	f000 f9e5 	bl	8004a14 <HAL_DMA_Start_IT>
 800464a:	4603      	mov	r3, r0
 800464c:	75fb      	strb	r3, [r7, #23]
 800464e:	e008      	b.n	8004662 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68d8      	ldr	r0, [r3, #12]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	f000 f9db 	bl	8004a14 <HAL_DMA_Start_IT>
 800465e:	4603      	mov	r3, r0
 8004660:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2201      	movs	r2, #1
 800467c:	409a      	lsls	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e005      	b.n	8004694 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f043 0204 	orr.w	r2, r3, #4
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004694:	7dfb      	ldrb	r3, [r7, #23]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	08004819 	.word	0x08004819
 80046a4:	0800483b 	.word	0x0800483b
 80046a8:	08004857 	.word	0x08004857
 80046ac:	080048bb 	.word	0x080048bb
 80046b0:	080048dd 	.word	0x080048dd
 80046b4:	080048f9 	.word	0x080048f9

080046b8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e02e      	b.n	800472a <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43da      	mvns	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	400a      	ands	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43da      	mvns	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	400a      	ands	r2, r1
 8004704:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f9df 	bl	8004ad4 <HAL_DMA_Abort>
 8004716:	e004      	b.n	8004722 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f9d9 	bl	8004ad4 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004768:	b480      	push	{r7}
 800476a:	b089      	sub	sp, #36	; 0x24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_DAC_ConfigChannel+0x1c>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e042      	b.n	800480e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	795b      	ldrb	r3, [r3, #5]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_DAC_ConfigChannel+0x2c>
 8004790:	2302      	movs	r3, #2
 8004792:	e03c      	b.n	800480e <HAL_DAC_ConfigChannel+0xa6>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2202      	movs	r2, #2
 800479e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	22c0      	movs	r2, #192	; 0xc0
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43da      	mvns	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	400a      	ands	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800480c:	7ffb      	ldrb	r3, [r7, #31]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3724      	adds	r7, #36	; 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff ff83 	bl	8004732 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	711a      	strb	r2, [r3, #4]
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff ff7b 	bl	8004744 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f7ff ff70 	bl	8004756 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	711a      	strb	r2, [r3, #4]
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff ffdb 	bl	8004884 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	711a      	strb	r2, [r3, #4]
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff ffd3 	bl	8004896 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f043 0204 	orr.w	r2, r3, #4
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff ffc8 	bl	80048a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	711a      	strb	r2, [r3, #4]
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e059      	b.n	80049f2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <HAL_DMA_Init+0xd4>)
 8004946:	429a      	cmp	r2, r3
 8004948:	d80f      	bhi.n	800496a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_DMA_Init+0xd8>)
 8004952:	4413      	add	r3, r2
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <HAL_DMA_Init+0xdc>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	009a      	lsls	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a28      	ldr	r2, [pc, #160]	; (8004a08 <HAL_DMA_Init+0xe0>)
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
 8004968:	e00e      	b.n	8004988 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_DMA_Init+0xe4>)
 8004972:	4413      	add	r3, r2
 8004974:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <HAL_DMA_Init+0xdc>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	009a      	lsls	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_DMA_Init+0xe8>)
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800499e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	40020407 	.word	0x40020407
 8004a00:	bffdfff8 	.word	0xbffdfff8
 8004a04:	cccccccd 	.word	0xcccccccd
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	bffdfbf8 	.word	0xbffdfbf8
 8004a10:	40020400 	.word	0x40020400

08004a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_Start_IT+0x20>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e04b      	b.n	8004acc <HAL_DMA_Start_IT+0xb8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d13a      	bne.n	8004abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 faa9 	bl	8004fc4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 020e 	orr.w	r2, r2, #14
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e00f      	b.n	8004aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 020a 	orr.w	r2, r2, #10
 8004aaa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e005      	b.n	8004aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d008      	beq.n	8004afe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2204      	movs	r2, #4
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e020      	b.n	8004b40 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 020e 	bic.w	r2, r2, #14
 8004b0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2101      	movs	r1, #1
 8004b28:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2204      	movs	r2, #4
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80f1 	beq.w	8004d58 <HAL_DMA_IRQHandler+0x20c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80eb 	beq.w	8004d58 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_DMA_IRQHandler+0x1d8>)
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d958      	bls.n	8004c5e <HAL_DMA_IRQHandler+0x112>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5d      	ldr	r2, [pc, #372]	; (8004d28 <HAL_DMA_IRQHandler+0x1dc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d04f      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x10a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5c      	ldr	r2, [pc, #368]	; (8004d2c <HAL_DMA_IRQHandler+0x1e0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d048      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x106>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_DMA_IRQHandler+0x1e4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d040      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x100>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a59      	ldr	r2, [pc, #356]	; (8004d34 <HAL_DMA_IRQHandler+0x1e8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d038      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xfa>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <HAL_DMA_IRQHandler+0x1ec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d030      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xf4>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a56      	ldr	r2, [pc, #344]	; (8004d3c <HAL_DMA_IRQHandler+0x1f0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d028      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xee>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4d      	ldr	r2, [pc, #308]	; (8004d24 <HAL_DMA_IRQHandler+0x1d8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d020      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xe8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_DMA_IRQHandler+0x1f4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d019      	beq.n	8004c30 <HAL_DMA_IRQHandler+0xe4>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a50      	ldr	r2, [pc, #320]	; (8004d44 <HAL_DMA_IRQHandler+0x1f8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d012      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xe0>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a4f      	ldr	r2, [pc, #316]	; (8004d48 <HAL_DMA_IRQHandler+0x1fc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00a      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xda>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <HAL_DMA_IRQHandler+0x200>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d102      	bne.n	8004c20 <HAL_DMA_IRQHandler+0xd4>
 8004c1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c1e:	e01b      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c24:	e018      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2a:	e015      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	e013      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c30:	2304      	movs	r3, #4
 8004c32:	e011      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c38:	e00e      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c3e:	e00b      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c44:	e008      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c4a:	e005      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c50:	e002      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	e000      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c56:	2304      	movs	r3, #4
 8004c58:	4a3d      	ldr	r2, [pc, #244]	; (8004d50 <HAL_DMA_IRQHandler+0x204>)
 8004c5a:	6053      	str	r3, [r2, #4]
 8004c5c:	e057      	b.n	8004d0e <HAL_DMA_IRQHandler+0x1c2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a31      	ldr	r2, [pc, #196]	; (8004d28 <HAL_DMA_IRQHandler+0x1dc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d04f      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x1bc>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <HAL_DMA_IRQHandler+0x1e0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d048      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x1b8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <HAL_DMA_IRQHandler+0x1e4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x1b2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <HAL_DMA_IRQHandler+0x1e8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d038      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x1ac>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <HAL_DMA_IRQHandler+0x1ec>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d030      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x1a6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <HAL_DMA_IRQHandler+0x1f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d028      	beq.n	8004cec <HAL_DMA_IRQHandler+0x1a0>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_DMA_IRQHandler+0x1d8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d020      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0x19a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <HAL_DMA_IRQHandler+0x1f4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d019      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x196>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_DMA_IRQHandler+0x1f8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d012      	beq.n	8004cde <HAL_DMA_IRQHandler+0x192>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <HAL_DMA_IRQHandler+0x1fc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x18c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_DMA_IRQHandler+0x200>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d102      	bne.n	8004cd2 <HAL_DMA_IRQHandler+0x186>
 8004ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cd0:	e01b      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cd6:	e018      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cdc:	e015      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	e013      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	e011      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004ce6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004cea:	e00e      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cf0:	e00b      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cf6:	e008      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cfc:	e005      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d02:	e002      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	e000      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <HAL_DMA_IRQHandler+0x208>)
 8004d0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8136 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d20:	e130      	b.n	8004f84 <HAL_DMA_IRQHandler+0x438>
 8004d22:	bf00      	nop
 8004d24:	40020080 	.word	0x40020080
 8004d28:	40020008 	.word	0x40020008
 8004d2c:	4002001c 	.word	0x4002001c
 8004d30:	40020030 	.word	0x40020030
 8004d34:	40020044 	.word	0x40020044
 8004d38:	40020058 	.word	0x40020058
 8004d3c:	4002006c 	.word	0x4002006c
 8004d40:	40020408 	.word	0x40020408
 8004d44:	4002041c 	.word	0x4002041c
 8004d48:	40020430 	.word	0x40020430
 8004d4c:	40020444 	.word	0x40020444
 8004d50:	40020400 	.word	0x40020400
 8004d54:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 80dd 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x3d8>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80d7 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 020a 	bic.w	r2, r2, #10
 8004d92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b7b      	ldr	r3, [pc, #492]	; (8004f90 <HAL_DMA_IRQHandler+0x444>)
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d958      	bls.n	8004e5a <HAL_DMA_IRQHandler+0x30e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a79      	ldr	r2, [pc, #484]	; (8004f94 <HAL_DMA_IRQHandler+0x448>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d04f      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x306>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a78      	ldr	r2, [pc, #480]	; (8004f98 <HAL_DMA_IRQHandler+0x44c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d048      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x302>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a76      	ldr	r2, [pc, #472]	; (8004f9c <HAL_DMA_IRQHandler+0x450>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d040      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x2fc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a75      	ldr	r2, [pc, #468]	; (8004fa0 <HAL_DMA_IRQHandler+0x454>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d038      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2f6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a73      	ldr	r2, [pc, #460]	; (8004fa4 <HAL_DMA_IRQHandler+0x458>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d030      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2f0>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a72      	ldr	r2, [pc, #456]	; (8004fa8 <HAL_DMA_IRQHandler+0x45c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d028      	beq.n	8004e36 <HAL_DMA_IRQHandler+0x2ea>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a69      	ldr	r2, [pc, #420]	; (8004f90 <HAL_DMA_IRQHandler+0x444>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d020      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x2e4>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a6e      	ldr	r2, [pc, #440]	; (8004fac <HAL_DMA_IRQHandler+0x460>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d019      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x2e0>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a6c      	ldr	r2, [pc, #432]	; (8004fb0 <HAL_DMA_IRQHandler+0x464>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d012      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2dc>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6b      	ldr	r2, [pc, #428]	; (8004fb4 <HAL_DMA_IRQHandler+0x468>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00a      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2d6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a69      	ldr	r2, [pc, #420]	; (8004fb8 <HAL_DMA_IRQHandler+0x46c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d102      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x2d0>
 8004e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e1a:	e01b      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e20:	e018      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e26:	e015      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e28:	2320      	movs	r3, #32
 8004e2a:	e013      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e011      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e34:	e00e      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e3a:	e00b      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e40:	e008      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e46:	e005      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4c:	e002      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e4e:	2320      	movs	r3, #32
 8004e50:	e000      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e52:	2302      	movs	r3, #2
 8004e54:	4a59      	ldr	r2, [pc, #356]	; (8004fbc <HAL_DMA_IRQHandler+0x470>)
 8004e56:	6053      	str	r3, [r2, #4]
 8004e58:	e057      	b.n	8004f0a <HAL_DMA_IRQHandler+0x3be>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4d      	ldr	r2, [pc, #308]	; (8004f94 <HAL_DMA_IRQHandler+0x448>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d04f      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x3b8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a4b      	ldr	r2, [pc, #300]	; (8004f98 <HAL_DMA_IRQHandler+0x44c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d048      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x3b4>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4a      	ldr	r2, [pc, #296]	; (8004f9c <HAL_DMA_IRQHandler+0x450>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d040      	beq.n	8004efa <HAL_DMA_IRQHandler+0x3ae>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a48      	ldr	r2, [pc, #288]	; (8004fa0 <HAL_DMA_IRQHandler+0x454>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d038      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x3a8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <HAL_DMA_IRQHandler+0x458>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d030      	beq.n	8004eee <HAL_DMA_IRQHandler+0x3a2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a45      	ldr	r2, [pc, #276]	; (8004fa8 <HAL_DMA_IRQHandler+0x45c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d028      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x39c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <HAL_DMA_IRQHandler+0x444>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d020      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x396>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a41      	ldr	r2, [pc, #260]	; (8004fac <HAL_DMA_IRQHandler+0x460>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d019      	beq.n	8004ede <HAL_DMA_IRQHandler+0x392>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a40      	ldr	r2, [pc, #256]	; (8004fb0 <HAL_DMA_IRQHandler+0x464>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d012      	beq.n	8004eda <HAL_DMA_IRQHandler+0x38e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <HAL_DMA_IRQHandler+0x468>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_DMA_IRQHandler+0x388>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <HAL_DMA_IRQHandler+0x46c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d102      	bne.n	8004ece <HAL_DMA_IRQHandler+0x382>
 8004ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ecc:	e01b      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed2:	e018      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed8:	e015      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004eda:	2320      	movs	r3, #32
 8004edc:	e013      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e011      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ee6:	e00e      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004eec:	e00b      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	e008      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ef8:	e005      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efe:	e002      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004f00:	2320      	movs	r3, #32
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004f04:	2302      	movs	r3, #2
 8004f06:	4a2e      	ldr	r2, [pc, #184]	; (8004fc0 <HAL_DMA_IRQHandler+0x474>)
 8004f08:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d034      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f22:	e02f      	b.n	8004f84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2208      	movs	r2, #8
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d028      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x43a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d023      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 020e 	bic.w	r2, r2, #14
 8004f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	2101      	movs	r1, #1
 8004f58:	fa01 f202 	lsl.w	r2, r1, r2
 8004f5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
    }
  }
  return;
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
}
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40020080 	.word	0x40020080
 8004f94:	40020008 	.word	0x40020008
 8004f98:	4002001c 	.word	0x4002001c
 8004f9c:	40020030 	.word	0x40020030
 8004fa0:	40020044 	.word	0x40020044
 8004fa4:	40020058 	.word	0x40020058
 8004fa8:	4002006c 	.word	0x4002006c
 8004fac:	40020408 	.word	0x40020408
 8004fb0:	4002041c 	.word	0x4002041c
 8004fb4:	40020430 	.word	0x40020430
 8004fb8:	40020444 	.word	0x40020444
 8004fbc:	40020400 	.word	0x40020400
 8004fc0:	40020000 	.word	0x40020000

08004fc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d108      	bne.n	8005004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005002:	e007      	b.n	8005014 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
	...

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b08b      	sub	sp, #44	; 0x2c
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005032:	e179      	b.n	8005328 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005034:	2201      	movs	r2, #1
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	429a      	cmp	r2, r3
 800504e:	f040 8168 	bne.w	8005322 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4a96      	ldr	r2, [pc, #600]	; (80052b0 <HAL_GPIO_Init+0x290>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d05e      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 800505c:	4a94      	ldr	r2, [pc, #592]	; (80052b0 <HAL_GPIO_Init+0x290>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d875      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 8005062:	4a94      	ldr	r2, [pc, #592]	; (80052b4 <HAL_GPIO_Init+0x294>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d058      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 8005068:	4a92      	ldr	r2, [pc, #584]	; (80052b4 <HAL_GPIO_Init+0x294>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d86f      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 800506e:	4a92      	ldr	r2, [pc, #584]	; (80052b8 <HAL_GPIO_Init+0x298>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d052      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 8005074:	4a90      	ldr	r2, [pc, #576]	; (80052b8 <HAL_GPIO_Init+0x298>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d869      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 800507a:	4a90      	ldr	r2, [pc, #576]	; (80052bc <HAL_GPIO_Init+0x29c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d04c      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 8005080:	4a8e      	ldr	r2, [pc, #568]	; (80052bc <HAL_GPIO_Init+0x29c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d863      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 8005086:	4a8e      	ldr	r2, [pc, #568]	; (80052c0 <HAL_GPIO_Init+0x2a0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d046      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 800508c:	4a8c      	ldr	r2, [pc, #560]	; (80052c0 <HAL_GPIO_Init+0x2a0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d85d      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 8005092:	2b12      	cmp	r3, #18
 8005094:	d82a      	bhi.n	80050ec <HAL_GPIO_Init+0xcc>
 8005096:	2b12      	cmp	r3, #18
 8005098:	d859      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <HAL_GPIO_Init+0x80>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	0800511b 	.word	0x0800511b
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	08005107 	.word	0x08005107
 80050ac:	08005149 	.word	0x08005149
 80050b0:	0800514f 	.word	0x0800514f
 80050b4:	0800514f 	.word	0x0800514f
 80050b8:	0800514f 	.word	0x0800514f
 80050bc:	0800514f 	.word	0x0800514f
 80050c0:	0800514f 	.word	0x0800514f
 80050c4:	0800514f 	.word	0x0800514f
 80050c8:	0800514f 	.word	0x0800514f
 80050cc:	0800514f 	.word	0x0800514f
 80050d0:	0800514f 	.word	0x0800514f
 80050d4:	0800514f 	.word	0x0800514f
 80050d8:	0800514f 	.word	0x0800514f
 80050dc:	0800514f 	.word	0x0800514f
 80050e0:	0800514f 	.word	0x0800514f
 80050e4:	080050fd 	.word	0x080050fd
 80050e8:	08005111 	.word	0x08005111
 80050ec:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <HAL_GPIO_Init+0x2a4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80050f2:	e02c      	b.n	800514e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	623b      	str	r3, [r7, #32]
          break;
 80050fa:	e029      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	3304      	adds	r3, #4
 8005102:	623b      	str	r3, [r7, #32]
          break;
 8005104:	e024      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	3308      	adds	r3, #8
 800510c:	623b      	str	r3, [r7, #32]
          break;
 800510e:	e01f      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	330c      	adds	r3, #12
 8005116:	623b      	str	r3, [r7, #32]
          break;
 8005118:	e01a      	b.n	8005150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005122:	2304      	movs	r3, #4
 8005124:	623b      	str	r3, [r7, #32]
          break;
 8005126:	e013      	b.n	8005150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005130:	2308      	movs	r3, #8
 8005132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	611a      	str	r2, [r3, #16]
          break;
 800513a:	e009      	b.n	8005150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800513c:	2308      	movs	r3, #8
 800513e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	615a      	str	r2, [r3, #20]
          break;
 8005146:	e003      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005148:	2300      	movs	r3, #0
 800514a:	623b      	str	r3, [r7, #32]
          break;
 800514c:	e000      	b.n	8005150 <HAL_GPIO_Init+0x130>
          break;
 800514e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2bff      	cmp	r3, #255	; 0xff
 8005154:	d801      	bhi.n	800515a <HAL_GPIO_Init+0x13a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	e001      	b.n	800515e <HAL_GPIO_Init+0x13e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2bff      	cmp	r3, #255	; 0xff
 8005164:	d802      	bhi.n	800516c <HAL_GPIO_Init+0x14c>
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	e002      	b.n	8005172 <HAL_GPIO_Init+0x152>
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	3b08      	subs	r3, #8
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	210f      	movs	r1, #15
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	401a      	ands	r2, r3
 8005184:	6a39      	ldr	r1, [r7, #32]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80c1 	beq.w	8005322 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80051a0:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <HAL_GPIO_Init+0x2a8>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	4a48      	ldr	r2, [pc, #288]	; (80052c8 <HAL_GPIO_Init+0x2a8>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6193      	str	r3, [r2, #24]
 80051ac:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <HAL_GPIO_Init+0x2a8>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80051b8:	4a44      	ldr	r2, [pc, #272]	; (80052cc <HAL_GPIO_Init+0x2ac>)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	3302      	adds	r3, #2
 80051c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	220f      	movs	r2, #15
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3c      	ldr	r2, [pc, #240]	; (80052d0 <HAL_GPIO_Init+0x2b0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01f      	beq.n	8005224 <HAL_GPIO_Init+0x204>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <HAL_GPIO_Init+0x2b4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d019      	beq.n	8005220 <HAL_GPIO_Init+0x200>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <HAL_GPIO_Init+0x2b8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_GPIO_Init+0x1fc>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a39      	ldr	r2, [pc, #228]	; (80052dc <HAL_GPIO_Init+0x2bc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00d      	beq.n	8005218 <HAL_GPIO_Init+0x1f8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_GPIO_Init+0x2c0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <HAL_GPIO_Init+0x1f4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <HAL_GPIO_Init+0x2c4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_GPIO_Init+0x1f0>
 800520c:	2305      	movs	r3, #5
 800520e:	e00a      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005210:	2306      	movs	r3, #6
 8005212:	e008      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005214:	2304      	movs	r3, #4
 8005216:	e006      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005218:	2303      	movs	r3, #3
 800521a:	e004      	b.n	8005226 <HAL_GPIO_Init+0x206>
 800521c:	2302      	movs	r3, #2
 800521e:	e002      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005224:	2300      	movs	r3, #0
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	f002 0203 	and.w	r2, r2, #3
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	4093      	lsls	r3, r2
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005236:	4925      	ldr	r1, [pc, #148]	; (80052cc <HAL_GPIO_Init+0x2ac>)
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	3302      	adds	r3, #2
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d006      	beq.n	800525e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4924      	ldr	r1, [pc, #144]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]
 800525c:	e006      	b.n	800526c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	43db      	mvns	r3, r3
 8005266:	4920      	ldr	r1, [pc, #128]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005268:	4013      	ands	r3, r2
 800526a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	491a      	ldr	r1, [pc, #104]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	60cb      	str	r3, [r1, #12]
 8005284:	e006      	b.n	8005294 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	43db      	mvns	r3, r3
 800528e:	4916      	ldr	r1, [pc, #88]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005290:	4013      	ands	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d025      	beq.n	80052ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	4910      	ldr	r1, [pc, #64]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
 80052ac:	e025      	b.n	80052fa <HAL_GPIO_Init+0x2da>
 80052ae:	bf00      	nop
 80052b0:	10320000 	.word	0x10320000
 80052b4:	10310000 	.word	0x10310000
 80052b8:	10220000 	.word	0x10220000
 80052bc:	10210000 	.word	0x10210000
 80052c0:	10120000 	.word	0x10120000
 80052c4:	10110000 	.word	0x10110000
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010800 	.word	0x40010800
 80052d4:	40010c00 	.word	0x40010c00
 80052d8:	40011000 	.word	0x40011000
 80052dc:	40011400 	.word	0x40011400
 80052e0:	40011800 	.word	0x40011800
 80052e4:	40011c00 	.word	0x40011c00
 80052e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052ec:	4b15      	ldr	r3, [pc, #84]	; (8005344 <HAL_GPIO_Init+0x324>)
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	4913      	ldr	r1, [pc, #76]	; (8005344 <HAL_GPIO_Init+0x324>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <HAL_GPIO_Init+0x324>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	490e      	ldr	r1, [pc, #56]	; (8005344 <HAL_GPIO_Init+0x324>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
 8005312:	e006      	b.n	8005322 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_GPIO_Init+0x324>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	43db      	mvns	r3, r3
 800531c:	4909      	ldr	r1, [pc, #36]	; (8005344 <HAL_GPIO_Init+0x324>)
 800531e:	4013      	ands	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	f47f ae7e 	bne.w	8005034 <HAL_GPIO_Init+0x14>
  }
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	372c      	adds	r7, #44	; 0x2c
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	40010400 	.word	0x40010400

08005348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e001      	b.n	800536a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	807b      	strh	r3, [r7, #2]
 8005382:	4613      	mov	r3, r2
 8005384:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005386:	787b      	ldrb	r3, [r7, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538c:	887a      	ldrh	r2, [r7, #2]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005392:	e003      	b.n	800539c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	041a      	lsls	r2, r3, #16
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	611a      	str	r2, [r3, #16]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053b4:	695a      	ldr	r2, [r3, #20]
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d006      	beq.n	80053cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053be:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fd fa5e 	bl	8002888 <HAL_GPIO_EXTI_Callback>
  }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40010400 	.word	0x40010400

080053d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e12b      	b.n	8005642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fe f81c 	bl	800343c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800542a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800543a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800543c:	f002 fa32 	bl	80078a4 <HAL_RCC_GetPCLK1Freq>
 8005440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4a81      	ldr	r2, [pc, #516]	; (800564c <HAL_I2C_Init+0x274>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d807      	bhi.n	800545c <HAL_I2C_Init+0x84>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a80      	ldr	r2, [pc, #512]	; (8005650 <HAL_I2C_Init+0x278>)
 8005450:	4293      	cmp	r3, r2
 8005452:	bf94      	ite	ls
 8005454:	2301      	movls	r3, #1
 8005456:	2300      	movhi	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e006      	b.n	800546a <HAL_I2C_Init+0x92>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a7d      	ldr	r2, [pc, #500]	; (8005654 <HAL_I2C_Init+0x27c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	bf94      	ite	ls
 8005464:	2301      	movls	r3, #1
 8005466:	2300      	movhi	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0e7      	b.n	8005642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a78      	ldr	r2, [pc, #480]	; (8005658 <HAL_I2C_Init+0x280>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	0c9b      	lsrs	r3, r3, #18
 800547c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4a6a      	ldr	r2, [pc, #424]	; (800564c <HAL_I2C_Init+0x274>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d802      	bhi.n	80054ac <HAL_I2C_Init+0xd4>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3301      	adds	r3, #1
 80054aa:	e009      	b.n	80054c0 <HAL_I2C_Init+0xe8>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	4a69      	ldr	r2, [pc, #420]	; (800565c <HAL_I2C_Init+0x284>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	099b      	lsrs	r3, r3, #6
 80054be:	3301      	adds	r3, #1
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	495c      	ldr	r1, [pc, #368]	; (800564c <HAL_I2C_Init+0x274>)
 80054dc:	428b      	cmp	r3, r1
 80054de:	d819      	bhi.n	8005514 <HAL_I2C_Init+0x13c>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1e59      	subs	r1, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054f4:	400b      	ands	r3, r1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_I2C_Init+0x138>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1e59      	subs	r1, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fbb1 f3f3 	udiv	r3, r1, r3
 8005508:	3301      	adds	r3, #1
 800550a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550e:	e051      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 8005510:	2304      	movs	r3, #4
 8005512:	e04f      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d111      	bne.n	8005540 <HAL_I2C_Init+0x168>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	440b      	add	r3, r1
 800552a:	fbb0 f3f3 	udiv	r3, r0, r3
 800552e:	3301      	adds	r3, #1
 8005530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e012      	b.n	8005566 <HAL_I2C_Init+0x18e>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	0099      	lsls	r1, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Init+0x196>
 800556a:	2301      	movs	r3, #1
 800556c:	e022      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10e      	bne.n	8005594 <HAL_I2C_Init+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1e58      	subs	r0, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	440b      	add	r3, r1
 8005584:	fbb0 f3f3 	udiv	r3, r0, r3
 8005588:	3301      	adds	r3, #1
 800558a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	e00f      	b.n	80055b4 <HAL_I2C_Init+0x1dc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1e58      	subs	r0, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	0099      	lsls	r1, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055aa:	3301      	adds	r3, #1
 80055ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	6809      	ldr	r1, [r1, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6911      	ldr	r1, [r2, #16]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68d2      	ldr	r2, [r2, #12]
 80055ee:	4311      	orrs	r1, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	000186a0 	.word	0x000186a0
 8005650:	001e847f 	.word	0x001e847f
 8005654:	003d08ff 	.word	0x003d08ff
 8005658:	431bde83 	.word	0x431bde83
 800565c:	10624dd3 	.word	0x10624dd3

08005660 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b08b      	sub	sp, #44	; 0x2c
 8005664:	af06      	add	r7, sp, #24
 8005666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0f1      	b.n	8005856 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f00b ff10 	bl	80114ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2203      	movs	r2, #3
 8005690:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f005 f8f3 	bl	800a884 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	687e      	ldr	r6, [r7, #4]
 80056a6:	466d      	mov	r5, sp
 80056a8:	f106 0410 	add.w	r4, r6, #16
 80056ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	602b      	str	r3, [r5, #0]
 80056b4:	1d33      	adds	r3, r6, #4
 80056b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056b8:	6838      	ldr	r0, [r7, #0]
 80056ba:	f005 f8bd 	bl	800a838 <USB_CoreInit>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0c2      	b.n	8005856 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f005 f8ee 	bl	800a8b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056dc:	2300      	movs	r3, #0
 80056de:	73fb      	strb	r3, [r7, #15]
 80056e0:	e040      	b.n	8005764 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	440b      	add	r3, r1
 80056f2:	3301      	adds	r3, #1
 80056f4:	2201      	movs	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	440b      	add	r3, r1
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	440b      	add	r3, r1
 800571c:	3303      	adds	r3, #3
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	440b      	add	r3, r1
 8005730:	3338      	adds	r3, #56	; 0x38
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	333c      	adds	r3, #60	; 0x3c
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	3340      	adds	r3, #64	; 0x40
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	3301      	adds	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	7bfa      	ldrb	r2, [r7, #15]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d3b9      	bcc.n	80056e2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	e044      	b.n	80057fe <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005774:	7bfa      	ldrb	r2, [r7, #15]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800578a:	7bfa      	ldrb	r2, [r7, #15]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	440b      	add	r3, r1
 8005798:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057a0:	7bfa      	ldrb	r2, [r7, #15]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	440b      	add	r3, r1
 80057ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	440b      	add	r3, r1
 80057c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057e2:	7bfa      	ldrb	r2, [r7, #15]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	440b      	add	r3, r1
 80057f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	3301      	adds	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
 80057fe:	7bfa      	ldrb	r2, [r7, #15]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d3b5      	bcc.n	8005774 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	687e      	ldr	r6, [r7, #4]
 8005810:	466d      	mov	r5, sp
 8005812:	f106 0410 	add.w	r4, r6, #16
 8005816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	1d33      	adds	r3, r6, #4
 8005820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005822:	6838      	ldr	r0, [r7, #0]
 8005824:	f005 f854 	bl	800a8d0 <USB_DevInit>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e00d      	b.n	8005856 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f007 fad5 	bl	800cdfe <USB_DevDisconnect>

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800585e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_PCD_Start+0x16>
 8005870:	2302      	movs	r3, #2
 8005872:	e016      	b.n	80058a2 <HAL_PCD_Start+0x44>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f004 ffe9 	bl	800a858 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005886:	2101      	movs	r1, #1
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f00c f85e 	bl	801194a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f007 faa9 	bl	800cdea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b088      	sub	sp, #32
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f007 faab 	bl	800ce12 <USB_ReadInterrupts>
 80058bc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fb04 	bl	8005ed6 <PCD_EP_ISR_Handler>

    return;
 80058ce:	e119      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d013      	beq.n	8005902 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ec:	b292      	uxth	r2, r2
 80058ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f00b fe55 	bl	80115a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80058f8:	2100      	movs	r1, #0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f905 	bl	8005b0a <HAL_PCD_SetAddress>

    return;
 8005900:	e100      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005914:	b29a      	uxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800591e:	b292      	uxth	r2, r2
 8005920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005924:	e0ee      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00c      	beq.n	800594a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005942:	b292      	uxth	r2, r2
 8005944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005948:	e0dc      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d027      	beq.n	80059a4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0204 	bic.w	r2, r2, #4
 8005966:	b292      	uxth	r2, r2
 8005968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0208 	bic.w	r2, r2, #8
 800597e:	b292      	uxth	r2, r2
 8005980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f00b fe45 	bl	8011614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800599c:	b292      	uxth	r2, r2
 800599e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80059a2:	e0af      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8083 	beq.w	8005ab6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80059b0:	2300      	movs	r3, #0
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e010      	b.n	80059d8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	7ffb      	ldrb	r3, [r7, #31]
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	b292      	uxth	r2, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	3320      	adds	r3, #32
 80059cc:	443b      	add	r3, r7
 80059ce:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80059d2:	7ffb      	ldrb	r3, [r7, #31]
 80059d4:	3301      	adds	r3, #1
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	7ffb      	ldrb	r3, [r7, #31]
 80059da:	2b07      	cmp	r3, #7
 80059dc:	d9eb      	bls.n	80059b6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	b292      	uxth	r2, r2
 80059f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005a0e:	bf00      	nop
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f6      	beq.n	8005a10 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	b292      	uxth	r2, r2
 8005a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	e00f      	b.n	8005a60 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	4611      	mov	r1, r2
 8005a48:	7ffa      	ldrb	r2, [r7, #31]
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	440a      	add	r2, r1
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	3320      	adds	r3, #32
 8005a52:	443b      	add	r3, r7
 8005a54:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a58:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	2b07      	cmp	r3, #7
 8005a64:	d9ec      	bls.n	8005a40 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0208 	orr.w	r2, r2, #8
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a90:	b292      	uxth	r2, r2
 8005a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0204 	orr.w	r2, r2, #4
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f00b fd96 	bl	80115e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ab4:	e026      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00f      	beq.n	8005ae0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ad2:	b292      	uxth	r2, r2
 8005ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f00b fd54 	bl	8011586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ade:	e011      	b.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00c      	beq.n	8005b04 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005afc:	b292      	uxth	r2, r2
 8005afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005b02:	bf00      	nop
  }
}
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_PCD_SetAddress+0x1a>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e013      	b.n	8005b4c <HAL_PCD_SetAddress+0x42>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f007 f941 	bl	800cdc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	70fb      	strb	r3, [r7, #3]
 8005b66:	460b      	mov	r3, r1
 8005b68:	803b      	strh	r3, [r7, #0]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	da0e      	bge.n	8005b98 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	705a      	strb	r2, [r3, #1]
 8005b96:	e00e      	b.n	8005bb6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 0207 	and.w	r2, r3, #7
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bc2:	883a      	ldrh	r2, [r7, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	78ba      	ldrb	r2, [r7, #2]
 8005bcc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bce:	78bb      	ldrb	r3, [r7, #2]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d102      	bne.n	8005bda <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_PCD_EP_Open+0x94>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e00e      	b.n	8005c06 <HAL_PCD_EP_Open+0xb2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f004 fe8a 	bl	800a910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005c04:	7afb      	ldrb	r3, [r7, #11]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da0e      	bge.n	8005c40 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	705a      	strb	r2, [r3, #1]
 8005c3e:	e00e      	b.n	8005c5e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	f003 0207 	and.w	r2, r3, #7
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_PCD_EP_Close+0x6a>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e00e      	b.n	8005c96 <HAL_PCD_EP_Close+0x88>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68f9      	ldr	r1, [r7, #12]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f005 fa02 	bl	800b090 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	460b      	mov	r3, r1
 8005cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	f003 0207 	and.w	r2, r3, #7
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f005 fbb9 	bl	800b468 <USB_EPStartXfer>

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2200      	movs	r2, #0
 8005d44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f005 fb82 	bl	800b468 <USB_EPStartXfer>

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	f003 0207 	and.w	r2, r3, #7
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d901      	bls.n	8005d8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e04c      	b.n	8005e26 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da0e      	bge.n	8005db2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	705a      	strb	r2, [r3, #1]
 8005db0:	e00c      	b.n	8005dcc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_PCD_EP_SetStall+0x7e>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e01c      	b.n	8005e26 <HAL_PCD_EP_SetStall+0xb8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f006 fee5 	bl	800cbca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f007 f80a 	bl	800ce30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	460b      	mov	r3, r1
 8005e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d901      	bls.n	8005e4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e040      	b.n	8005ece <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da0e      	bge.n	8005e72 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	705a      	strb	r2, [r3, #1]
 8005e70:	e00e      	b.n	8005e90 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 0207 	and.w	r2, r3, #7
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_PCD_EP_ClrStall+0x82>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e00e      	b.n	8005ece <HAL_PCD_EP_ClrStall+0xa0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68f9      	ldr	r1, [r7, #12]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f006 fed3 	bl	800cc6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b096      	sub	sp, #88	; 0x58
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ede:	e3bf      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ee8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005eec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005efa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 8179 	bne.w	80061f6 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d152      	bne.n	8005fb6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f20:	81fb      	strh	r3, [r7, #14]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3328      	adds	r3, #40	; 0x28
 8005f38:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3302      	adds	r3, #2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	441a      	add	r2, r3
 8005f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f72:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005f74:	2100      	movs	r1, #0
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f00b faeb 	bl	8011552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 836b 	beq.w	8006660 <PCD_EP_ISR_Handler+0x78a>
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 8366 	bne.w	8006660 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005fb4:	e354      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fbc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005fc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d034      	beq.n	800603e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3306      	adds	r3, #6
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800600a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800600e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006010:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006012:	b29b      	uxth	r3, r3
 8006014:	f006 ff5c 	bl	800ced0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29a      	uxth	r2, r3
 8006020:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006024:	4013      	ands	r3, r2
 8006026:	823b      	strh	r3, [r7, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	8a3a      	ldrh	r2, [r7, #16]
 800602e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006032:	b292      	uxth	r2, r2
 8006034:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f00b fa5e 	bl	80114f8 <HAL_PCD_SetupStageCallback>
 800603c:	e310      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800603e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006042:	2b00      	cmp	r3, #0
 8006044:	f280 830c 	bge.w	8006660 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29a      	uxth	r2, r3
 8006050:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006054:	4013      	ands	r3, r2
 8006056:	83fb      	strh	r3, [r7, #30]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	8bfa      	ldrh	r2, [r7, #30]
 800605e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006062:	b292      	uxth	r2, r2
 8006064:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606e:	b29b      	uxth	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4413      	add	r3, r2
 800607a:	3306      	adds	r3, #6
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800608e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006090:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d019      	beq.n	80060ce <PCD_EP_ISR_Handler+0x1f8>
 800609a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d015      	beq.n	80060ce <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a8:	6959      	ldr	r1, [r3, #20]
 80060aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f006 ff0c 	bl	800ced0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80060b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	441a      	add	r2, r3
 80060c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80060c6:	2100      	movs	r1, #0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f00b fa27 	bl	801151c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80060d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 82bd 	bne.w	8006660 <PCD_EP_ISR_Handler+0x78a>
 80060e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060f2:	f000 82b5 	beq.w	8006660 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006104:	b29b      	uxth	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	4413      	add	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006120:	b29a      	uxth	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b3e      	cmp	r3, #62	; 0x3e
 800612c:	d91d      	bls.n	800616a <PCD_EP_ISR_Handler+0x294>
 800612e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
 8006136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	2b00      	cmp	r3, #0
 8006140:	d102      	bne.n	8006148 <PCD_EP_ISR_Handler+0x272>
 8006142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006144:	3b01      	subs	r3, #1
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29a      	uxth	r2, r3
 800614e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006150:	b29b      	uxth	r3, r3
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	b29b      	uxth	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	e026      	b.n	80061b8 <PCD_EP_ISR_Handler+0x2e2>
 800616a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <PCD_EP_ISR_Handler+0x2b2>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006180:	b29a      	uxth	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	e017      	b.n	80061b8 <PCD_EP_ISR_Handler+0x2e2>
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	647b      	str	r3, [r7, #68]	; 0x44
 8006190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <PCD_EP_ISR_Handler+0x2cc>
 800619c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800619e:	3301      	adds	r3, #1
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	827b      	strh	r3, [r7, #18]
 80061ca:	8a7b      	ldrh	r3, [r7, #18]
 80061cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061d0:	827b      	strh	r3, [r7, #18]
 80061d2:	8a7b      	ldrh	r3, [r7, #18]
 80061d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d8:	827b      	strh	r3, [r7, #18]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	8a7b      	ldrh	r3, [r7, #18]
 80061e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	8013      	strh	r3, [r2, #0]
 80061f4:	e234      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800620a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800620e:	2b00      	cmp	r3, #0
 8006210:	f280 80fc 	bge.w	800640c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29a      	uxth	r2, r3
 8006226:	f640 738f 	movw	r3, #3983	; 0xf8f
 800622a:	4013      	ands	r3, r2
 800622c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006246:	b292      	uxth	r2, r2
 8006248:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800624a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006262:	7b1b      	ldrb	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d125      	bne.n	80062b4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	4413      	add	r3, r2
 800627c:	3306      	adds	r3, #6
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006290:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006294:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8092 	beq.w	80063c2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a4:	6959      	ldr	r1, [r3, #20]
 80062a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a8:	88da      	ldrh	r2, [r3, #6]
 80062aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80062ae:	f006 fe0f 	bl	800ced0 <USB_ReadPMA>
 80062b2:	e086      	b.n	80063c2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80062b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b6:	78db      	ldrb	r3, [r3, #3]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d10a      	bne.n	80062d2 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80062bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062c0:	461a      	mov	r2, r3
 80062c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f9d9 	bl	800667c <HAL_PCD_EP_DB_Receive>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80062d0:	e077      	b.n	80063c2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d024      	beq.n	800637a <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006338:	b29b      	uxth	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	3302      	adds	r3, #2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006358:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800635c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02e      	beq.n	80063c2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636a:	6959      	ldr	r1, [r3, #20]
 800636c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636e:	891a      	ldrh	r2, [r3, #8]
 8006370:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006374:	f006 fdac 	bl	800ced0 <USB_ReadPMA>
 8006378:	e023      	b.n	80063c2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006382:	b29b      	uxth	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	3306      	adds	r3, #6
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80063a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b8:	895a      	ldrh	r2, [r3, #10]
 80063ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063be:	f006 fd87 	bl	800ced0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80063c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063ca:	441a      	add	r2, r3
 80063cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80063d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063d8:	441a      	add	r2, r3
 80063da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80063de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <PCD_EP_ISR_Handler+0x51c>
 80063e6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d206      	bcs.n	8006400 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80063f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f00b f88f 	bl	801151c <HAL_PCD_DataOutStageCallback>
 80063fe:	e005      	b.n	800640c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006406:	4618      	mov	r0, r3
 8006408:	f005 f82e 	bl	800b468 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800640c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8123 	beq.w	8006660 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800641a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800645e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	78db      	ldrb	r3, [r3, #3]
 800646e:	2b01      	cmp	r3, #1
 8006470:	f040 80a2 	bne.w	80065b8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8006474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006476:	2200      	movs	r2, #0
 8006478:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800647a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800647c:	7b1b      	ldrb	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8093 	beq.w	80065aa <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006484:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d046      	beq.n	800651e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d126      	bne.n	80064e6 <PCD_EP_ISR_Handler+0x610>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	4413      	add	r3, r2
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
 80064b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	4413      	add	r3, r2
 80064ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e061      	b.n	80065aa <PCD_EP_ISR_Handler+0x6d4>
 80064e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d15d      	bne.n	80065aa <PCD_EP_ISR_Handler+0x6d4>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	4413      	add	r3, r2
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	011a      	lsls	r2, r3, #4
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	4413      	add	r3, r2
 8006510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	2200      	movs	r2, #0
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e045      	b.n	80065aa <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d126      	bne.n	800657a <PCD_EP_ISR_Handler+0x6a4>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	4413      	add	r3, r2
 8006542:	637b      	str	r3, [r7, #52]	; 0x34
 8006544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	011a      	lsls	r2, r3, #4
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	4413      	add	r3, r2
 800654e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655e:	b29a      	uxth	r2, r3
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	801a      	strh	r2, [r3, #0]
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006572:	b29a      	uxth	r2, r3
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e017      	b.n	80065aa <PCD_EP_ISR_Handler+0x6d4>
 800657a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d113      	bne.n	80065aa <PCD_EP_ISR_Handler+0x6d4>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658a:	b29b      	uxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	4413      	add	r3, r2
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	011a      	lsls	r2, r3, #4
 800659a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659c:	4413      	add	r3, r2
 800659e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	2200      	movs	r2, #0
 80065a8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f00a ffce 	bl	8011552 <HAL_PCD_DataInStageCallback>
 80065b6:	e053      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80065b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d146      	bne.n	8006652 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	3302      	adds	r3, #2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80065f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d907      	bls.n	800660c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006604:	1ad2      	subs	r2, r2, r3
 8006606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006608:	619a      	str	r2, [r3, #24]
 800660a:	e002      	b.n	8006612 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800660c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800660e:	2200      	movs	r2, #0
 8006610:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800661a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f00a ff96 	bl	8011552 <HAL_PCD_DataInStageCallback>
 8006626:	e01b      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006630:	441a      	add	r2, r3
 8006632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006634:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006638:	69da      	ldr	r2, [r3, #28]
 800663a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800663e:	441a      	add	r2, r3
 8006640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006642:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800664a:	4618      	mov	r0, r3
 800664c:	f004 ff0c 	bl	800b468 <USB_EPStartXfer>
 8006650:	e006      	b.n	8006660 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006652:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006656:	461a      	mov	r2, r3
 8006658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f91b 	bl	8006896 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006668:	b29b      	uxth	r3, r3
 800666a:	b21b      	sxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	f6ff ac37 	blt.w	8005ee0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3758      	adds	r7, #88	; 0x58
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800668a:	88fb      	ldrh	r3, [r7, #6]
 800668c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d07e      	beq.n	8006792 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	3302      	adds	r3, #2
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	8b7b      	ldrh	r3, [r7, #26]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d306      	bcc.n	80066d6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	8b7b      	ldrh	r3, [r7, #26]
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	619a      	str	r2, [r3, #24]
 80066d4:	e002      	b.n	80066dc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2200      	movs	r2, #0
 80066da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d123      	bne.n	800672c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	833b      	strh	r3, [r7, #24]
 8006700:	8b3b      	ldrh	r3, [r7, #24]
 8006702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006706:	833b      	strh	r3, [r7, #24]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	441a      	add	r2, r3
 8006716:	8b3b      	ldrh	r3, [r7, #24]
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01f      	beq.n	8006776 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006750:	82fb      	strh	r3, [r7, #22]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	8afb      	ldrh	r3, [r7, #22]
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006776:	8b7b      	ldrh	r3, [r7, #26]
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8087 	beq.w	800688c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6959      	ldr	r1, [r3, #20]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	891a      	ldrh	r2, [r3, #8]
 800678a:	8b7b      	ldrh	r3, [r7, #26]
 800678c:	f006 fba0 	bl	800ced0 <USB_ReadPMA>
 8006790:	e07c      	b.n	800688c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	3306      	adds	r3, #6
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	8b7b      	ldrh	r3, [r7, #26]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d306      	bcc.n	80067d4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	8b7b      	ldrh	r3, [r7, #26]
 80067cc:	1ad2      	subs	r2, r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	619a      	str	r2, [r3, #24]
 80067d2:	e002      	b.n	80067da <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2200      	movs	r2, #0
 80067d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d123      	bne.n	800682a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	83fb      	strh	r3, [r7, #30]
 80067fe:	8bfb      	ldrh	r3, [r7, #30]
 8006800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006804:	83fb      	strh	r3, [r7, #30]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8bfb      	ldrh	r3, [r7, #30]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11f      	bne.n	8006874 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	83bb      	strh	r3, [r7, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	8bbb      	ldrh	r3, [r7, #28]
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006874:	8b7b      	ldrh	r3, [r7, #26]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6959      	ldr	r1, [r3, #20]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	895a      	ldrh	r2, [r3, #10]
 8006886:	8b7b      	ldrh	r3, [r7, #26]
 8006888:	f006 fb22 	bl	800ced0 <USB_ReadPMA>
    }
  }

  return count;
 800688c:	8b7b      	ldrh	r3, [r7, #26]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b0a4      	sub	sp, #144	; 0x90
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	4613      	mov	r3, r2
 80068a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 81dd 	beq.w	8006c6a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	3302      	adds	r3, #2
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d907      	bls.n	80068f8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	619a      	str	r2, [r3, #24]
 80068f6:	e002      	b.n	80068fe <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f040 80b9 	bne.w	8006a7a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d126      	bne.n	800695e <HAL_PCD_EP_DB_Transmit+0xc8>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	4413      	add	r3, r2
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	011a      	lsls	r2, r3, #4
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	4413      	add	r3, r2
 8006932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006936:	62bb      	str	r3, [r7, #40]	; 0x28
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006942:	b29a      	uxth	r2, r3
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006956:	b29a      	uxth	r2, r3
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	e01a      	b.n	8006994 <HAL_PCD_EP_DB_Transmit+0xfe>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d116      	bne.n	8006994 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006974:	b29b      	uxth	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	4413      	add	r3, r2
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	011a      	lsls	r2, r3, #4
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	4413      	add	r3, r2
 8006988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800698c:	633b      	str	r3, [r7, #48]	; 0x30
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2200      	movs	r2, #0
 8006992:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d126      	bne.n	80069f0 <HAL_PCD_EP_DB_Transmit+0x15a>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	011a      	lsls	r2, r3, #4
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e017      	b.n	8006a20 <HAL_PCD_EP_DB_Transmit+0x18a>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d113      	bne.n	8006a20 <HAL_PCD_EP_DB_Transmit+0x18a>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	4413      	add	r3, r2
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	4413      	add	r3, r2
 8006a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f00a fd93 	bl	8011552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 82fc 	beq.w	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	82fb      	strh	r3, [r7, #22]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	8afb      	ldrh	r3, [r7, #22]
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]
 8006a78:	e2da      	b.n	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d021      	beq.n	8006ac8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	f040 82ae 	bne.w	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006adc:	441a      	add	r2, r3
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	69da      	ldr	r2, [r3, #28]
 8006ae6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006aea:	441a      	add	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d30b      	bcc.n	8006b14 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	621a      	str	r2, [r3, #32]
 8006b12:	e017      	b.n	8006b44 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006b1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b2c:	e00a      	b.n	8006b44 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d165      	bne.n	8006c18 <HAL_PCD_EP_DB_Transmit+0x382>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	4413      	add	r3, r2
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	011a      	lsls	r2, r3, #4
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b88:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8a:	d91d      	bls.n	8006bc8 <HAL_PCD_EP_DB_Transmit+0x332>
 8006b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <HAL_PCD_EP_DB_Transmit+0x310>
 8006ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	e044      	b.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <HAL_PCD_EP_DB_Transmit+0x350>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	e035      	b.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	029b      	lsls	r3, r3, #10
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	e01c      	b.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d118      	bne.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c34:	4413      	add	r3, r2
 8006c36:	647b      	str	r3, [r7, #68]	; 0x44
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	011a      	lsls	r2, r3, #4
 8006c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40
 8006c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c50:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6959      	ldr	r1, [r3, #20]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	891a      	ldrh	r2, [r3, #8]
 8006c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f006 f8ef 	bl	800ce46 <USB_WritePMA>
 8006c68:	e1e2      	b.n	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3306      	adds	r3, #6
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	6812      	ldr	r2, [r2, #0]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c92:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d307      	bcc.n	8006cb2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	619a      	str	r2, [r3, #24]
 8006cb0:	e002      	b.n	8006cb8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 80c0 	bne.w	8006e42 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d126      	bne.n	8006d18 <HAL_PCD_EP_DB_Transmit+0x482>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cde:	4413      	add	r3, r2
 8006ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	011a      	lsls	r2, r3, #4
 8006ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	e01a      	b.n	8006d4e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d116      	bne.n	8006d4e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	667b      	str	r3, [r7, #100]	; 0x64
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d34:	4413      	add	r3, r2
 8006d36:	667b      	str	r3, [r7, #100]	; 0x64
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d46:	663b      	str	r3, [r7, #96]	; 0x60
 8006d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	677b      	str	r3, [r7, #116]	; 0x74
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	785b      	ldrb	r3, [r3, #1]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d12b      	bne.n	8006db4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	4413      	add	r3, r2
 8006d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	011a      	lsls	r2, r3, #4
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	e017      	b.n	8006de4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d113      	bne.n	8006de4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dca:	4413      	add	r3, r2
 8006dcc:	677b      	str	r3, [r7, #116]	; 0x74
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	011a      	lsls	r2, r3, #4
 8006dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8006dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de0:	2200      	movs	r2, #0
 8006de2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f00a fbb1 	bl	8011552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 811a 	bne.w	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e16:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]
 8006e40:	e0f6      	b.n	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d121      	bne.n	8006e90 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	461a      	mov	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	f040 80ca 	bne.w	8007030 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ea4:	441a      	add	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	69da      	ldr	r2, [r3, #28]
 8006eae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006eb2:	441a      	add	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d30b      	bcc.n	8006edc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6a1a      	ldr	r2, [r3, #32]
 8006ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ed4:	1ad2      	subs	r2, r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	621a      	str	r2, [r3, #32]
 8006eda:	e017      	b.n	8006f0c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d108      	bne.n	8006ef6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006ee4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ee8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006ef4:	e00a      	b.n	8006f0c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	657b      	str	r3, [r7, #84]	; 0x54
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d165      	bne.n	8006fe6 <HAL_PCD_EP_DB_Transmit+0x750>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2e:	4413      	add	r3, r2
 8006f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	011a      	lsls	r2, r3, #4
 8006f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f56:	2b3e      	cmp	r3, #62	; 0x3e
 8006f58:	d91d      	bls.n	8006f96 <HAL_PCD_EP_DB_Transmit+0x700>
 8006f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <HAL_PCD_EP_DB_Transmit+0x6de>
 8006f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f70:	3b01      	subs	r3, #1
 8006f72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	029b      	lsls	r3, r3, #10
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4313      	orrs	r3, r2
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	e041      	b.n	800701a <HAL_PCD_EP_DB_Transmit+0x784>
 8006f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	e032      	b.n	800701a <HAL_PCD_EP_DB_Transmit+0x784>
 8006fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_PCD_EP_DB_Transmit+0x738>
 8006fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fca:	3301      	adds	r3, #1
 8006fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	e019      	b.n	800701a <HAL_PCD_EP_DB_Transmit+0x784>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d115      	bne.n	800701a <HAL_PCD_EP_DB_Transmit+0x784>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffc:	4413      	add	r3, r2
 8006ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	011a      	lsls	r2, r3, #4
 8007006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007008:	4413      	add	r3, r2
 800700a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800700e:	653b      	str	r3, [r7, #80]	; 0x50
 8007010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007014:	b29a      	uxth	r2, r3
 8007016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007018:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6959      	ldr	r1, [r3, #20]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	895a      	ldrh	r2, [r3, #10]
 8007026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800702a:	b29b      	uxth	r3, r3
 800702c:	f005 ff0b 	bl	800ce46 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704a:	82bb      	strh	r3, [r7, #20]
 800704c:	8abb      	ldrh	r3, [r7, #20]
 800704e:	f083 0310 	eor.w	r3, r3, #16
 8007052:	82bb      	strh	r3, [r7, #20]
 8007054:	8abb      	ldrh	r3, [r7, #20]
 8007056:	f083 0320 	eor.w	r3, r3, #32
 800705a:	82bb      	strh	r3, [r7, #20]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8abb      	ldrh	r3, [r7, #20]
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3790      	adds	r7, #144	; 0x90
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800708a:	b480      	push	{r7}
 800708c:	b087      	sub	sp, #28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	607b      	str	r3, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	817b      	strh	r3, [r7, #10]
 8007098:	4613      	mov	r3, r2
 800709a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800709c:	897b      	ldrh	r3, [r7, #10]
 800709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070a8:	897b      	ldrh	r3, [r7, #10]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e009      	b.n	80070d4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070c0:	897a      	ldrh	r2, [r7, #10]
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80070d4:	893b      	ldrh	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	80da      	strh	r2, [r3, #6]
 80070e8:	e00b      	b.n	8007102 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2201      	movs	r2, #1
 80070ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr
	...

08007110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e272      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8087 	beq.w	800723e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007130:	4b92      	ldr	r3, [pc, #584]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f003 030c 	and.w	r3, r3, #12
 8007138:	2b04      	cmp	r3, #4
 800713a:	d00c      	beq.n	8007156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800713c:	4b8f      	ldr	r3, [pc, #572]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f003 030c 	and.w	r3, r3, #12
 8007144:	2b08      	cmp	r3, #8
 8007146:	d112      	bne.n	800716e <HAL_RCC_OscConfig+0x5e>
 8007148:	4b8c      	ldr	r3, [pc, #560]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007154:	d10b      	bne.n	800716e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007156:	4b89      	ldr	r3, [pc, #548]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d06c      	beq.n	800723c <HAL_RCC_OscConfig+0x12c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d168      	bne.n	800723c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e24c      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x76>
 8007178:	4b80      	ldr	r3, [pc, #512]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a7f      	ldr	r2, [pc, #508]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 800717e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e02e      	b.n	80071e4 <HAL_RCC_OscConfig+0xd4>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0x98>
 800718e:	4b7b      	ldr	r3, [pc, #492]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a7a      	ldr	r2, [pc, #488]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	4b78      	ldr	r3, [pc, #480]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a77      	ldr	r2, [pc, #476]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e01d      	b.n	80071e4 <HAL_RCC_OscConfig+0xd4>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071b0:	d10c      	bne.n	80071cc <HAL_RCC_OscConfig+0xbc>
 80071b2:	4b72      	ldr	r3, [pc, #456]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a71      	ldr	r2, [pc, #452]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b6f      	ldr	r3, [pc, #444]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a6e      	ldr	r2, [pc, #440]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e00b      	b.n	80071e4 <HAL_RCC_OscConfig+0xd4>
 80071cc:	4b6b      	ldr	r3, [pc, #428]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a6a      	ldr	r2, [pc, #424]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4b68      	ldr	r3, [pc, #416]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a67      	ldr	r2, [pc, #412]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80071de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d013      	beq.n	8007214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ec:	f7fc fc22 	bl	8003a34 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071f4:	f7fc fc1e 	bl	8003a34 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b64      	cmp	r3, #100	; 0x64
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e200      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007206:	4b5d      	ldr	r3, [pc, #372]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCC_OscConfig+0xe4>
 8007212:	e014      	b.n	800723e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007214:	f7fc fc0e 	bl	8003a34 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800721c:	f7fc fc0a 	bl	8003a34 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	; 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e1ec      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800722e:	4b53      	ldr	r3, [pc, #332]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x10c>
 800723a:	e000      	b.n	800723e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800723c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d063      	beq.n	8007312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800724a:	4b4c      	ldr	r3, [pc, #304]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 030c 	and.w	r3, r3, #12
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007256:	4b49      	ldr	r3, [pc, #292]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f003 030c 	and.w	r3, r3, #12
 800725e:	2b08      	cmp	r3, #8
 8007260:	d11c      	bne.n	800729c <HAL_RCC_OscConfig+0x18c>
 8007262:	4b46      	ldr	r3, [pc, #280]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d116      	bne.n	800729c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800726e:	4b43      	ldr	r3, [pc, #268]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <HAL_RCC_OscConfig+0x176>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d001      	beq.n	8007286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e1c0      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007286:	4b3d      	ldr	r3, [pc, #244]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	4939      	ldr	r1, [pc, #228]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800729a:	e03a      	b.n	8007312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d020      	beq.n	80072e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a4:	4b36      	ldr	r3, [pc, #216]	; (8007380 <HAL_RCC_OscConfig+0x270>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fc fbc3 	bl	8003a34 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b2:	f7fc fbbf 	bl	8003a34 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e1a1      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c4:	4b2d      	ldr	r3, [pc, #180]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d0:	4b2a      	ldr	r3, [pc, #168]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	4927      	ldr	r1, [pc, #156]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	600b      	str	r3, [r1, #0]
 80072e4:	e015      	b.n	8007312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e6:	4b26      	ldr	r3, [pc, #152]	; (8007380 <HAL_RCC_OscConfig+0x270>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ec:	f7fc fba2 	bl	8003a34 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f4:	f7fc fb9e 	bl	8003a34 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e180      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d03a      	beq.n	8007394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d019      	beq.n	800735a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007326:	4b17      	ldr	r3, [pc, #92]	; (8007384 <HAL_RCC_OscConfig+0x274>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732c:	f7fc fb82 	bl	8003a34 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007334:	f7fc fb7e 	bl	8003a34 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e160      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <HAL_RCC_OscConfig+0x26c>)
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f0      	beq.n	8007334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007352:	2001      	movs	r0, #1
 8007354:	f000 faba 	bl	80078cc <RCC_Delay>
 8007358:	e01c      	b.n	8007394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <HAL_RCC_OscConfig+0x274>)
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007360:	f7fc fb68 	bl	8003a34 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007366:	e00f      	b.n	8007388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007368:	f7fc fb64 	bl	8003a34 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d908      	bls.n	8007388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e146      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
 800737a:	bf00      	nop
 800737c:	40021000 	.word	0x40021000
 8007380:	42420000 	.word	0x42420000
 8007384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007388:	4b92      	ldr	r3, [pc, #584]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e9      	bne.n	8007368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80a6 	beq.w	80074ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073a6:	4b8b      	ldr	r3, [pc, #556]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073b2:	4b88      	ldr	r3, [pc, #544]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	4a87      	ldr	r2, [pc, #540]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80073b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073bc:	61d3      	str	r3, [r2, #28]
 80073be:	4b85      	ldr	r3, [pc, #532]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c6:	60bb      	str	r3, [r7, #8]
 80073c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ca:	2301      	movs	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ce:	4b82      	ldr	r3, [pc, #520]	; (80075d8 <HAL_RCC_OscConfig+0x4c8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d118      	bne.n	800740c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073da:	4b7f      	ldr	r3, [pc, #508]	; (80075d8 <HAL_RCC_OscConfig+0x4c8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a7e      	ldr	r2, [pc, #504]	; (80075d8 <HAL_RCC_OscConfig+0x4c8>)
 80073e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073e6:	f7fc fb25 	bl	8003a34 <HAL_GetTick>
 80073ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ee:	f7fc fb21 	bl	8003a34 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b64      	cmp	r3, #100	; 0x64
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e103      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007400:	4b75      	ldr	r3, [pc, #468]	; (80075d8 <HAL_RCC_OscConfig+0x4c8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f0      	beq.n	80073ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d106      	bne.n	8007422 <HAL_RCC_OscConfig+0x312>
 8007414:	4b6f      	ldr	r3, [pc, #444]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	4a6e      	ldr	r2, [pc, #440]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800741a:	f043 0301 	orr.w	r3, r3, #1
 800741e:	6213      	str	r3, [r2, #32]
 8007420:	e02d      	b.n	800747e <HAL_RCC_OscConfig+0x36e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10c      	bne.n	8007444 <HAL_RCC_OscConfig+0x334>
 800742a:	4b6a      	ldr	r3, [pc, #424]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	4a69      	ldr	r2, [pc, #420]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	6213      	str	r3, [r2, #32]
 8007436:	4b67      	ldr	r3, [pc, #412]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	4a66      	ldr	r2, [pc, #408]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800743c:	f023 0304 	bic.w	r3, r3, #4
 8007440:	6213      	str	r3, [r2, #32]
 8007442:	e01c      	b.n	800747e <HAL_RCC_OscConfig+0x36e>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b05      	cmp	r3, #5
 800744a:	d10c      	bne.n	8007466 <HAL_RCC_OscConfig+0x356>
 800744c:	4b61      	ldr	r3, [pc, #388]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	4a60      	ldr	r2, [pc, #384]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007452:	f043 0304 	orr.w	r3, r3, #4
 8007456:	6213      	str	r3, [r2, #32]
 8007458:	4b5e      	ldr	r3, [pc, #376]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	4a5d      	ldr	r2, [pc, #372]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	6213      	str	r3, [r2, #32]
 8007464:	e00b      	b.n	800747e <HAL_RCC_OscConfig+0x36e>
 8007466:	4b5b      	ldr	r3, [pc, #364]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	4a5a      	ldr	r2, [pc, #360]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	6213      	str	r3, [r2, #32]
 8007472:	4b58      	ldr	r3, [pc, #352]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	4a57      	ldr	r2, [pc, #348]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007478:	f023 0304 	bic.w	r3, r3, #4
 800747c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d015      	beq.n	80074b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007486:	f7fc fad5 	bl	8003a34 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800748c:	e00a      	b.n	80074a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748e:	f7fc fad1 	bl	8003a34 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	f241 3288 	movw	r2, #5000	; 0x1388
 800749c:	4293      	cmp	r3, r2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e0b1      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a4:	4b4b      	ldr	r3, [pc, #300]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0ee      	beq.n	800748e <HAL_RCC_OscConfig+0x37e>
 80074b0:	e014      	b.n	80074dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074b2:	f7fc fabf 	bl	8003a34 <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b8:	e00a      	b.n	80074d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ba:	f7fc fabb 	bl	8003a34 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e09b      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074d0:	4b40      	ldr	r3, [pc, #256]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1ee      	bne.n	80074ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d105      	bne.n	80074ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e2:	4b3c      	ldr	r3, [pc, #240]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	4a3b      	ldr	r2, [pc, #236]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80074e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 8087 	beq.w	8007606 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074f8:	4b36      	ldr	r3, [pc, #216]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 030c 	and.w	r3, r3, #12
 8007500:	2b08      	cmp	r3, #8
 8007502:	d061      	beq.n	80075c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d146      	bne.n	800759a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800750c:	4b33      	ldr	r3, [pc, #204]	; (80075dc <HAL_RCC_OscConfig+0x4cc>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007512:	f7fc fa8f 	bl	8003a34 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007518:	e008      	b.n	800752c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800751a:	f7fc fa8b 	bl	8003a34 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e06d      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800752c:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007540:	d108      	bne.n	8007554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	4921      	ldr	r1, [pc, #132]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007550:	4313      	orrs	r3, r2
 8007552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007554:	4b1f      	ldr	r3, [pc, #124]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a19      	ldr	r1, [r3, #32]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	430b      	orrs	r3, r1
 8007566:	491b      	ldr	r1, [pc, #108]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 8007568:	4313      	orrs	r3, r2
 800756a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800756c:	4b1b      	ldr	r3, [pc, #108]	; (80075dc <HAL_RCC_OscConfig+0x4cc>)
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007572:	f7fc fa5f 	bl	8003a34 <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800757a:	f7fc fa5b 	bl	8003a34 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e03d      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800758c:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f0      	beq.n	800757a <HAL_RCC_OscConfig+0x46a>
 8007598:	e035      	b.n	8007606 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <HAL_RCC_OscConfig+0x4cc>)
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a0:	f7fc fa48 	bl	8003a34 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a8:	f7fc fa44 	bl	8003a34 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e026      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075ba:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <HAL_RCC_OscConfig+0x4c4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0x498>
 80075c6:	e01e      	b.n	8007606 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d107      	bne.n	80075e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e019      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
 80075d4:	40021000 	.word	0x40021000
 80075d8:	40007000 	.word	0x40007000
 80075dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <HAL_RCC_OscConfig+0x500>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d106      	bne.n	8007602 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d001      	beq.n	8007606 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40021000 	.word	0x40021000

08007614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0d0      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007628:	4b6a      	ldr	r3, [pc, #424]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d910      	bls.n	8007658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007636:	4b67      	ldr	r3, [pc, #412]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 0207 	bic.w	r2, r3, #7
 800763e:	4965      	ldr	r1, [pc, #404]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007646:	4b63      	ldr	r3, [pc, #396]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d001      	beq.n	8007658 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0b8      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d020      	beq.n	80076a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007670:	4b59      	ldr	r3, [pc, #356]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4a58      	ldr	r2, [pc, #352]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007676:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800767a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007688:	4b53      	ldr	r3, [pc, #332]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	4a52      	ldr	r2, [pc, #328]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 800768e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007692:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007694:	4b50      	ldr	r3, [pc, #320]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	494d      	ldr	r1, [pc, #308]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d040      	beq.n	8007734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d107      	bne.n	80076ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ba:	4b47      	ldr	r3, [pc, #284]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d115      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e07f      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d107      	bne.n	80076e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d2:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e073      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e2:	4b3d      	ldr	r3, [pc, #244]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e06b      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076f2:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f023 0203 	bic.w	r2, r3, #3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4936      	ldr	r1, [pc, #216]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007700:	4313      	orrs	r3, r2
 8007702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007704:	f7fc f996 	bl	8003a34 <HAL_GetTick>
 8007708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770a:	e00a      	b.n	8007722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800770c:	f7fc f992 	bl	8003a34 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	f241 3288 	movw	r2, #5000	; 0x1388
 800771a:	4293      	cmp	r3, r2
 800771c:	d901      	bls.n	8007722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e053      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007722:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f003 020c 	and.w	r2, r3, #12
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	429a      	cmp	r2, r3
 8007732:	d1eb      	bne.n	800770c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	429a      	cmp	r2, r3
 8007740:	d210      	bcs.n	8007764 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007742:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f023 0207 	bic.w	r2, r3, #7
 800774a:	4922      	ldr	r1, [pc, #136]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	4313      	orrs	r3, r2
 8007750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007752:	4b20      	ldr	r3, [pc, #128]	; (80077d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	429a      	cmp	r2, r3
 800775e:	d001      	beq.n	8007764 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e032      	b.n	80077ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007770:	4b19      	ldr	r3, [pc, #100]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4916      	ldr	r1, [pc, #88]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 800777e:	4313      	orrs	r3, r2
 8007780:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	490e      	ldr	r1, [pc, #56]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077a2:	f000 f821 	bl	80077e8 <HAL_RCC_GetSysClockFreq>
 80077a6:	4602      	mov	r2, r0
 80077a8:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <HAL_RCC_ClockConfig+0x1c4>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	490a      	ldr	r1, [pc, #40]	; (80077dc <HAL_RCC_ClockConfig+0x1c8>)
 80077b4:	5ccb      	ldrb	r3, [r1, r3]
 80077b6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ba:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <HAL_RCC_ClockConfig+0x1cc>)
 80077bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077be:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <HAL_RCC_ClockConfig+0x1d0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fc f8f4 	bl	80039b0 <HAL_InitTick>

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40022000 	.word	0x40022000
 80077d8:	40021000 	.word	0x40021000
 80077dc:	0802ddf8 	.word	0x0802ddf8
 80077e0:	20000010 	.word	0x20000010
 80077e4:	20000014 	.word	0x20000014

080077e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007802:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_RCC_GetSysClockFreq+0x94>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b04      	cmp	r3, #4
 8007810:	d002      	beq.n	8007818 <HAL_RCC_GetSysClockFreq+0x30>
 8007812:	2b08      	cmp	r3, #8
 8007814:	d003      	beq.n	800781e <HAL_RCC_GetSysClockFreq+0x36>
 8007816:	e027      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007818:	4b19      	ldr	r3, [pc, #100]	; (8007880 <HAL_RCC_GetSysClockFreq+0x98>)
 800781a:	613b      	str	r3, [r7, #16]
      break;
 800781c:	e027      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	0c9b      	lsrs	r3, r3, #18
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	4a17      	ldr	r2, [pc, #92]	; (8007884 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007828:	5cd3      	ldrb	r3, [r2, r3]
 800782a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d010      	beq.n	8007858 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <HAL_RCC_GetSysClockFreq+0x94>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	0c5b      	lsrs	r3, r3, #17
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	4a11      	ldr	r2, [pc, #68]	; (8007888 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007842:	5cd3      	ldrb	r3, [r2, r3]
 8007844:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <HAL_RCC_GetSysClockFreq+0x98>)
 800784a:	fb03 f202 	mul.w	r2, r3, r2
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e004      	b.n	8007862 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a0c      	ldr	r2, [pc, #48]	; (800788c <HAL_RCC_GetSysClockFreq+0xa4>)
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	613b      	str	r3, [r7, #16]
      break;
 8007866:	e002      	b.n	800786e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <HAL_RCC_GetSysClockFreq+0x98>)
 800786a:	613b      	str	r3, [r7, #16]
      break;
 800786c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800786e:	693b      	ldr	r3, [r7, #16]
}
 8007870:	4618      	mov	r0, r3
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40021000 	.word	0x40021000
 8007880:	007a1200 	.word	0x007a1200
 8007884:	0802de10 	.word	0x0802de10
 8007888:	0802de20 	.word	0x0802de20
 800788c:	003d0900 	.word	0x003d0900

08007890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007896:	681b      	ldr	r3, [r3, #0]
}
 8007898:	4618      	mov	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr
 80078a0:	20000010 	.word	0x20000010

080078a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078a8:	f7ff fff2 	bl	8007890 <HAL_RCC_GetHCLKFreq>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	4903      	ldr	r1, [pc, #12]	; (80078c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ba:	5ccb      	ldrb	r3, [r1, r3]
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40021000 	.word	0x40021000
 80078c8:	0802de08 	.word	0x0802de08

080078cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <RCC_Delay+0x34>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a0a      	ldr	r2, [pc, #40]	; (8007904 <RCC_Delay+0x38>)
 80078da:	fba2 2303 	umull	r2, r3, r2, r3
 80078de:	0a5b      	lsrs	r3, r3, #9
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80078e8:	bf00      	nop
  }
  while (Delay --);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1e5a      	subs	r2, r3, #1
 80078ee:	60fa      	str	r2, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f9      	bne.n	80078e8 <RCC_Delay+0x1c>
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr
 8007900:	20000010 	.word	0x20000010
 8007904:	10624dd3 	.word	0x10624dd3

08007908 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d07d      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007924:	2300      	movs	r3, #0
 8007926:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007928:	4b4f      	ldr	r3, [pc, #316]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10d      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007934:	4b4c      	ldr	r3, [pc, #304]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	4a4b      	ldr	r2, [pc, #300]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800793a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793e:	61d3      	str	r3, [r2, #28]
 8007940:	4b49      	ldr	r3, [pc, #292]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007948:	60bb      	str	r3, [r7, #8]
 800794a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007950:	4b46      	ldr	r3, [pc, #280]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d118      	bne.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800795c:	4b43      	ldr	r3, [pc, #268]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a42      	ldr	r2, [pc, #264]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007966:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007968:	f7fc f864 	bl	8003a34 <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800796e:	e008      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007970:	f7fc f860 	bl	8003a34 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b64      	cmp	r3, #100	; 0x64
 800797c:	d901      	bls.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e06d      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007982:	4b3a      	ldr	r3, [pc, #232]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798a:	2b00      	cmp	r3, #0
 800798c:	d0f0      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800798e:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007996:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d02e      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d027      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079ac:	4b2e      	ldr	r3, [pc, #184]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079b6:	4b2e      	ldr	r3, [pc, #184]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079bc:	4b2c      	ldr	r3, [pc, #176]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80079c2:	4a29      	ldr	r2, [pc, #164]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d014      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d2:	f7fc f82f 	bl	8003a34 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d8:	e00a      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079da:	f7fc f82b 	bl	8003a34 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e036      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f0:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0ee      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079fc:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	4917      	ldr	r1, [pc, #92]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d105      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a14:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	4a13      	ldr	r2, [pc, #76]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	490b      	ldr	r1, [pc, #44]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a4a:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	4904      	ldr	r1, [pc, #16]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	40007000 	.word	0x40007000
 8007a70:	42420440 	.word	0x42420440

08007a74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e022      	b.n	8007acc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d105      	bne.n	8007a9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fb fd0d 	bl	80034b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f814 	bl	8007ad4 <HAL_SD_InitCard>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e00a      	b.n	8007acc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ad4:	b5b0      	push	{r4, r5, r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af04      	add	r7, sp, #16
 8007ada:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007af0:	2376      	movs	r3, #118	; 0x76
 8007af2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681d      	ldr	r5, [r3, #0]
 8007af8:	466c      	mov	r4, sp
 8007afa:	f107 0314 	add.w	r3, r7, #20
 8007afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f002 f92d 	bl	8009d6c <SDIO_Init>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e04f      	b.n	8007bc4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007b24:	4b29      	ldr	r3, [pc, #164]	; (8007bcc <HAL_SD_InitCard+0xf8>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f002 f962 	bl	8009df8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007b34:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <HAL_SD_InitCard+0xf8>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007b3a:	2002      	movs	r0, #2
 8007b3c:	f7fb ff84 	bl	8003a48 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 ff03 	bl	800894c <SD_PowerON>
 8007b46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e02e      	b.n	8007bc4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fe22 	bl	80087b0 <SD_InitCard>
 8007b6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e01b      	b.n	8007bc4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 f9bb 	bl	8009f10 <SDMMC_CmdBlockLength>
 8007b9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00f      	beq.n	8007bc2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <HAL_SD_InitCard+0xfc>)
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3728      	adds	r7, #40	; 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bdb0      	pop	{r4, r5, r7, pc}
 8007bcc:	423000a0 	.word	0x423000a0
 8007bd0:	004005ff 	.word	0x004005ff

08007bd4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b092      	sub	sp, #72	; 0x48
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007be2:	f7fb ff27 	bl	8003a34 <HAL_GetTick>
 8007be6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d107      	bne.n	8007c06 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e1bd      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	f040 81b0 	bne.w	8007f74 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	441a      	add	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d907      	bls.n	8007c38 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e1a4      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d002      	beq.n	8007c56 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	025b      	lsls	r3, r3, #9
 8007c54:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	025b      	lsls	r3, r3, #9
 8007c60:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c62:	2390      	movs	r3, #144	; 0x90
 8007c64:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007c66:	2302      	movs	r3, #2
 8007c68:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f107 0214 	add.w	r2, r7, #20
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f002 f91c 	bl	8009eba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d90a      	bls.n	8007c9e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 f97f 	bl	8009f98 <SDMMC_CmdReadMultiBlock>
 8007c9a:	6478      	str	r0, [r7, #68]	; 0x44
 8007c9c:	e009      	b.n	8007cb2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007caa:	4618      	mov	r0, r3
 8007cac:	f002 f952 	bl	8009f54 <SDMMC_CmdReadSingleBlock>
 8007cb0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d012      	beq.n	8007cde <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a7a      	ldr	r2, [pc, #488]	; (8007ea8 <HAL_SD_ReadBlocks+0x2d4>)
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e151      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007ce2:	e061      	b.n	8007da8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d03c      	beq.n	8007d6c <HAL_SD_ReadBlocks+0x198>
 8007cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d039      	beq.n	8007d6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8007cfc:	e033      	b.n	8007d66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f002 f85c 	bl	8009dc0 <SDIO_ReadFIFO>
 8007d08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d14:	3301      	adds	r3, #1
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d30:	3b01      	subs	r3, #1
 8007d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	0c1b      	lsrs	r3, r3, #16
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	3301      	adds	r3, #1
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d46:	3b01      	subs	r3, #1
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	3301      	adds	r3, #1
 8007d58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d62:	3301      	adds	r3, #1
 8007d64:	643b      	str	r3, [r7, #64]	; 0x40
 8007d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d68:	2b07      	cmp	r3, #7
 8007d6a:	d9c8      	bls.n	8007cfe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007d6c:	f7fb fe62 	bl	8003a34 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d902      	bls.n	8007d82 <HAL_SD_ReadBlocks+0x1ae>
 8007d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d112      	bne.n	8007da8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a48      	ldr	r2, [pc, #288]	; (8007ea8 <HAL_SD_ReadBlocks+0x2d4>)
 8007d88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e0ec      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dae:	f240 332a 	movw	r3, #810	; 0x32a
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d095      	beq.n	8007ce4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d022      	beq.n	8007e0c <HAL_SD_ReadBlocks+0x238>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d91f      	bls.n	8007e0c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d01b      	beq.n	8007e0c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f002 f943 	bl	800a064 <SDMMC_CmdStopTransfer>
 8007dde:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d012      	beq.n	8007e0c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a2f      	ldr	r2, [pc, #188]	; (8007ea8 <HAL_SD_ReadBlocks+0x2d4>)
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df4:	431a      	orrs	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e0ba      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d012      	beq.n	8007e40 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a22      	ldr	r2, [pc, #136]	; (8007ea8 <HAL_SD_ReadBlocks+0x2d4>)
 8007e20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	f043 0208 	orr.w	r2, r3, #8
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e0a0      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d012      	beq.n	8007e74 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <HAL_SD_ReadBlocks+0x2d4>)
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	f043 0202 	orr.w	r2, r3, #2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e086      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d063      	beq.n	8007f4a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <HAL_SD_ReadBlocks+0x2d4>)
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f043 0220 	orr.w	r2, r3, #32
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e06c      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
 8007ea8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 ff85 	bl	8009dc0 <SDIO_ReadFIFO>
 8007eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	0a1b      	lsrs	r3, r3, #8
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed8:	3301      	adds	r3, #1
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	0c1b      	lsrs	r3, r3, #16
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	3301      	adds	r3, #1
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	0e1b      	lsrs	r3, r3, #24
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	3301      	adds	r3, #1
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007f0e:	f7fb fd91 	bl	8003a34 <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d902      	bls.n	8007f24 <HAL_SD_ReadBlocks+0x350>
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d112      	bne.n	8007f4a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a18      	ldr	r2, [pc, #96]	; (8007f8c <HAL_SD_ReadBlocks+0x3b8>)
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e01b      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <HAL_SD_ReadBlocks+0x38a>
 8007f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1a6      	bne.n	8007eac <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e006      	b.n	8007f82 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
  }
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3748      	adds	r7, #72	; 0x48
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	004005ff 	.word	0x004005ff

08007f90 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b092      	sub	sp, #72	; 0x48
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f9e:	f7fb fd49 	bl	8003a34 <HAL_GetTick>
 8007fa2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d107      	bne.n	8007fc2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e166      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	f040 8159 	bne.w	8008282 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	441a      	add	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d907      	bls.n	8007ff4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e14d      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008008:	2b01      	cmp	r3, #1
 800800a:	d002      	beq.n	8008012 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	025b      	lsls	r3, r3, #9
 8008010:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008012:	f04f 33ff 	mov.w	r3, #4294967295
 8008016:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	025b      	lsls	r3, r3, #9
 800801c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800801e:	2390      	movs	r3, #144	; 0x90
 8008020:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008026:	2300      	movs	r3, #0
 8008028:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800802a:	2301      	movs	r3, #1
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f107 0218 	add.w	r2, r7, #24
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f001 ff3e 	bl	8009eba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d90a      	bls.n	800805a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008050:	4618      	mov	r0, r3
 8008052:	f001 ffe5 	bl	800a020 <SDMMC_CmdWriteMultiBlock>
 8008056:	6478      	str	r0, [r7, #68]	; 0x44
 8008058:	e009      	b.n	800806e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2210      	movs	r2, #16
 800805e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008066:	4618      	mov	r0, r3
 8008068:	f001 ffb8 	bl	8009fdc <SDMMC_CmdWriteSingleBlock>
 800806c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800806e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008070:	2b00      	cmp	r3, #0
 8008072:	d012      	beq.n	800809a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a87      	ldr	r2, [pc, #540]	; (8008298 <HAL_SD_WriteBlocks+0x308>)
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008082:	431a      	orrs	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e0fa      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800809e:	e065      	b.n	800816c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d040      	beq.n	8008130 <HAL_SD_WriteBlocks+0x1a0>
 80080ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d03d      	beq.n	8008130 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80080b4:	2300      	movs	r3, #0
 80080b6:	643b      	str	r3, [r7, #64]	; 0x40
 80080b8:	e037      	b.n	800812a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80080ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	3301      	adds	r3, #1
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80080c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c8:	3b01      	subs	r3, #1
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	021a      	lsls	r2, r3, #8
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	3301      	adds	r3, #1
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80080de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e0:	3b01      	subs	r3, #1
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	041a      	lsls	r2, r3, #16
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f2:	3301      	adds	r3, #1
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f8:	3b01      	subs	r3, #1
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	061a      	lsls	r2, r3, #24
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	4313      	orrs	r3, r2
 8008106:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	3301      	adds	r3, #1
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800810e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008110:	3b01      	subs	r3, #1
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f107 0214 	add.w	r2, r7, #20
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fe5a 	bl	8009dd8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008126:	3301      	adds	r3, #1
 8008128:	643b      	str	r3, [r7, #64]	; 0x40
 800812a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812c:	2b07      	cmp	r3, #7
 800812e:	d9c4      	bls.n	80080ba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008130:	f7fb fc80 	bl	8003a34 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800813c:	429a      	cmp	r2, r3
 800813e:	d902      	bls.n	8008146 <HAL_SD_WriteBlocks+0x1b6>
 8008140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008142:	2b00      	cmp	r3, #0
 8008144:	d112      	bne.n	800816c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a53      	ldr	r2, [pc, #332]	; (8008298 <HAL_SD_WriteBlocks+0x308>)
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008154:	431a      	orrs	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e091      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008172:	f240 331a 	movw	r3, #794	; 0x31a
 8008176:	4013      	ands	r3, r2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d091      	beq.n	80080a0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d022      	beq.n	80081d0 <HAL_SD_WriteBlocks+0x240>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d91f      	bls.n	80081d0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	2b03      	cmp	r3, #3
 8008196:	d01b      	beq.n	80081d0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f001 ff61 	bl	800a064 <SDMMC_CmdStopTransfer>
 80081a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80081a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d012      	beq.n	80081d0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a3a      	ldr	r2, [pc, #232]	; (8008298 <HAL_SD_WriteBlocks+0x308>)
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b8:	431a      	orrs	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e05f      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d012      	beq.n	8008204 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2d      	ldr	r2, [pc, #180]	; (8008298 <HAL_SD_WriteBlocks+0x308>)
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	f043 0208 	orr.w	r2, r3, #8
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e045      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d012      	beq.n	8008238 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a20      	ldr	r2, [pc, #128]	; (8008298 <HAL_SD_WriteBlocks+0x308>)
 8008218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	f043 0202 	orr.w	r2, r3, #2
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e02b      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b00      	cmp	r3, #0
 8008244:	d012      	beq.n	800826c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a13      	ldr	r2, [pc, #76]	; (8008298 <HAL_SD_WriteBlocks+0x308>)
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	f043 0210 	orr.w	r2, r3, #16
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e011      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f240 523a 	movw	r2, #1338	; 0x53a
 8008274:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e006      	b.n	8008290 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
  }
}
 8008290:	4618      	mov	r0, r3
 8008292:	3748      	adds	r7, #72	; 0x48
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	004005ff 	.word	0x004005ff

0800829c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082aa:	0f9b      	lsrs	r3, r3, #30
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b6:	0e9b      	lsrs	r3, r3, #26
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c8:	0e1b      	lsrs	r3, r3, #24
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 0303 	and.w	r3, r3, #3
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082da:	0c1b      	lsrs	r3, r3, #16
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082fc:	0d1b      	lsrs	r3, r3, #20
 80082fe:	b29a      	uxth	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f003 030f 	and.w	r3, r3, #15
 8008310:	b2da      	uxtb	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800831a:	0bdb      	lsrs	r3, r3, #15
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800832c:	0b9b      	lsrs	r3, r3, #14
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	b2da      	uxtb	r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800833e:	0b5b      	lsrs	r3, r3, #13
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	b2da      	uxtb	r2, r3
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008350:	0b1b      	lsrs	r3, r3, #12
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008368:	2b00      	cmp	r3, #0
 800836a:	d163      	bne.n	8008434 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008370:	009a      	lsls	r2, r3, #2
 8008372:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008376:	4013      	ands	r3, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800837c:	0f92      	lsrs	r2, r2, #30
 800837e:	431a      	orrs	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008388:	0edb      	lsrs	r3, r3, #27
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	b2da      	uxtb	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839a:	0e1b      	lsrs	r3, r3, #24
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ac:	0d5b      	lsrs	r3, r3, #21
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f003 0307 	and.w	r3, r3, #7
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083be:	0c9b      	lsrs	r3, r3, #18
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d0:	0bdb      	lsrs	r3, r3, #15
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7e1b      	ldrb	r3, [r3, #24]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	3302      	adds	r3, #2
 80083f4:	2201      	movs	r2, #1
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80083fe:	fb03 f202 	mul.w	r2, r3, r2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	7a1b      	ldrb	r3, [r3, #8]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	2201      	movs	r2, #1
 8008412:	409a      	lsls	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008420:	0a52      	lsrs	r2, r2, #9
 8008422:	fb03 f202 	mul.w	r2, r3, r2
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008430:	661a      	str	r2, [r3, #96]	; 0x60
 8008432:	e031      	b.n	8008498 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008438:	2b01      	cmp	r3, #1
 800843a:	d11d      	bne.n	8008478 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844a:	0c1b      	lsrs	r3, r3, #16
 800844c:	431a      	orrs	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	3301      	adds	r3, #1
 8008458:	029a      	lsls	r2, r3, #10
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800846c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	661a      	str	r2, [r3, #96]	; 0x60
 8008476:	e00f      	b.n	8008498 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a58      	ldr	r2, [pc, #352]	; (80085e0 <HAL_SD_GetCardCSD+0x344>)
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e09d      	b.n	80085d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800849c:	0b9b      	lsrs	r3, r3, #14
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ae:	09db      	lsrs	r3, r3, #7
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d0:	0fdb      	lsrs	r3, r3, #31
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084dc:	0f5b      	lsrs	r3, r3, #29
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ee:	0e9b      	lsrs	r3, r3, #26
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008500:	0d9b      	lsrs	r3, r3, #22
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	b2da      	uxtb	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008512:	0d5b      	lsrs	r3, r3, #21
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	0bdb      	lsrs	r3, r3, #15
 8008544:	b2db      	uxtb	r3, r3
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	b2da      	uxtb	r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008556:	0b9b      	lsrs	r3, r3, #14
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856a:	0b5b      	lsrs	r3, r3, #13
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	b2da      	uxtb	r2, r3
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857e:	0b1b      	lsrs	r3, r3, #12
 8008580:	b2db      	uxtb	r3, r3
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	b2da      	uxtb	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	0a9b      	lsrs	r3, r3, #10
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	0a1b      	lsrs	r3, r3, #8
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	004005ff 	.word	0x004005ff

080085e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
	...

0800863c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800863c:	b5b0      	push	{r4, r5, r7, lr}
 800863e:	b08e      	sub	sp, #56	; 0x38
 8008640:	af04      	add	r7, sp, #16
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2203      	movs	r2, #3
 8008650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008658:	2b03      	cmp	r3, #3
 800865a:	d02e      	beq.n	80086ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008662:	d106      	bne.n	8008672 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
 8008670:	e029      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008678:	d10a      	bne.n	8008690 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa1c 	bl	8008ab8 <SD_WideBus_Enable>
 8008680:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	639a      	str	r2, [r3, #56]	; 0x38
 800868e:	e01a      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa59 	bl	8008b4e <SD_WideBus_Disable>
 800869c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38
 80086aa:	e00c      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
 80086b8:	e005      	b.n	80086c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a26      	ldr	r2, [pc, #152]	; (800876c <HAL_SD_ConfigWideBusOperation+0x130>)
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086e4:	e01f      	b.n	8008726 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681d      	ldr	r5, [r3, #0]
 800870c:	466c      	mov	r4, sp
 800870e:	f107 0314 	add.w	r3, r7, #20
 8008712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008720:	4628      	mov	r0, r5
 8008722:	f001 fb23 	bl	8009d6c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fbee 	bl	8009f10 <SDMMC_CmdBlockLength>
 8008734:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00c      	beq.n	8008756 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0a      	ldr	r2, [pc, #40]	; (800876c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800875e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008762:	4618      	mov	r0, r3
 8008764:	3728      	adds	r7, #40	; 0x28
 8008766:	46bd      	mov	sp, r7
 8008768:	bdb0      	pop	{r4, r5, r7, pc}
 800876a:	bf00      	nop
 800876c:	004005ff 	.word	0x004005ff

08008770 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f970 	bl	8008a68 <SD_SendStatus>
 8008788:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	431a      	orrs	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	0a5b      	lsrs	r3, r3, #9
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80087a6:	693b      	ldr	r3, [r7, #16]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087b0:	b5b0      	push	{r4, r5, r7, lr}
 80087b2:	b094      	sub	sp, #80	; 0x50
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087b8:	2301      	movs	r3, #1
 80087ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 fb26 	bl	8009e12 <SDIO_GetPowerState>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087d0:	e0b8      	b.n	8008944 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d02f      	beq.n	800883a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fd4a 	bl	800a278 <SDMMC_CmdSendCID>
 80087e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80087ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ee:	e0a9      	b.n	8008944 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2100      	movs	r1, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 fb4d 	bl	8009e96 <SDIO_GetResponse>
 80087fc:	4602      	mov	r2, r0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2104      	movs	r1, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fb44 	bl	8009e96 <SDIO_GetResponse>
 800880e:	4602      	mov	r2, r0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2108      	movs	r1, #8
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fb3b 	bl	8009e96 <SDIO_GetResponse>
 8008820:	4602      	mov	r2, r0
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	210c      	movs	r1, #12
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fb32 	bl	8009e96 <SDIO_GetResponse>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	2b03      	cmp	r3, #3
 8008840:	d00d      	beq.n	800885e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f107 020e 	add.w	r2, r7, #14
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f001 fd50 	bl	800a2f2 <SDMMC_CmdSetRelAdd>
 8008852:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <SD_InitCard+0xae>
    {
      return errorstate;
 800885a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885c:	e072      	b.n	8008944 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	2b03      	cmp	r3, #3
 8008864:	d036      	beq.n	80088d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008866:	89fb      	ldrh	r3, [r7, #14]
 8008868:	461a      	mov	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f001 fd1a 	bl	800a2b4 <SDMMC_CmdSendCSD>
 8008880:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	e05b      	b.n	8008944 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2100      	movs	r1, #0
 8008892:	4618      	mov	r0, r3
 8008894:	f001 faff 	bl	8009e96 <SDIO_GetResponse>
 8008898:	4602      	mov	r2, r0
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2104      	movs	r1, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 faf6 	bl	8009e96 <SDIO_GetResponse>
 80088aa:	4602      	mov	r2, r0
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2108      	movs	r1, #8
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 faed 	bl	8009e96 <SDIO_GetResponse>
 80088bc:	4602      	mov	r2, r0
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	210c      	movs	r1, #12
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fae4 	bl	8009e96 <SDIO_GetResponse>
 80088ce:	4602      	mov	r2, r0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2104      	movs	r1, #4
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fadb 	bl	8009e96 <SDIO_GetResponse>
 80088e0:	4603      	mov	r3, r0
 80088e2:	0d1a      	lsrs	r2, r3, #20
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80088e8:	f107 0310 	add.w	r3, r7, #16
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff fcd4 	bl	800829c <HAL_SD_GetCardCSD>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088fe:	e021      	b.n	8008944 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008908:	041b      	lsls	r3, r3, #16
 800890a:	2200      	movs	r2, #0
 800890c:	461c      	mov	r4, r3
 800890e:	4615      	mov	r5, r2
 8008910:	4622      	mov	r2, r4
 8008912:	462b      	mov	r3, r5
 8008914:	4608      	mov	r0, r1
 8008916:	f001 fbc7 	bl	800a0a8 <SDMMC_CmdSelDesel>
 800891a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800891c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <SD_InitCard+0x176>
  {
    return errorstate;
 8008922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008924:	e00e      	b.n	8008944 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	466c      	mov	r4, sp
 800892e:	f103 0210 	add.w	r2, r3, #16
 8008932:	ca07      	ldmia	r2, {r0, r1, r2}
 8008934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008938:	3304      	adds	r3, #4
 800893a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800893c:	4628      	mov	r0, r5
 800893e:	f001 fa15 	bl	8009d6c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3740      	adds	r7, #64	; 0x40
 8008948:	46bd      	mov	sp, r7
 800894a:	bdb0      	pop	{r4, r5, r7, pc}

0800894c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	2300      	movs	r3, #0
 800895e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f001 fbc2 	bl	800a0ee <SDMMC_CmdGoIdleState>
 800896a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	e072      	b.n	8008a5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4618      	mov	r0, r3
 800897c:	f001 fbd5 	bl	800a12a <SDMMC_CmdOperCond>
 8008980:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00d      	beq.n	80089a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f001 fbab 	bl	800a0ee <SDMMC_CmdGoIdleState>
 8008998:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	e05b      	b.n	8008a5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d137      	bne.n	8008a22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2100      	movs	r1, #0
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fbd5 	bl	800a168 <SDMMC_CmdAppCommand>
 80089be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d02d      	beq.n	8008a22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089ca:	e047      	b.n	8008a5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 fbc8 	bl	800a168 <SDMMC_CmdAppCommand>
 80089d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	e03b      	b.n	8008a5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	491e      	ldr	r1, [pc, #120]	; (8008a64 <SD_PowerON+0x118>)
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 fbde 	bl	800a1ac <SDMMC_CmdAppOperCommand>
 80089f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089fc:	e02e      	b.n	8008a5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2100      	movs	r1, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fa46 	bl	8009e96 <SDIO_GetResponse>
 8008a0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	0fdb      	lsrs	r3, r3, #31
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <SD_PowerON+0xcc>
 8008a14:	2301      	movs	r3, #1
 8008a16:	e000      	b.n	8008a1a <SD_PowerON+0xce>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	613b      	str	r3, [r7, #16]

    count++;
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d802      	bhi.n	8008a32 <SD_PowerON+0xe6>
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0cc      	beq.n	80089cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d902      	bls.n	8008a42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a40:	e00c      	b.n	8008a5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	645a      	str	r2, [r3, #68]	; 0x44
 8008a52:	e002      	b.n	8008a5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	c1100000 	.word	0xc1100000

08008a68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a7c:	e018      	b.n	8008ab0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f001 fc52 	bl	800a334 <SDMMC_CmdSendStatus>
 8008a90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	e009      	b.n	8008ab0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f001 f9f7 	bl	8009e96 <SDIO_GetResponse>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2100      	movs	r1, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 f9e1 	bl	8009e96 <SDIO_GetResponse>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ade:	d102      	bne.n	8008ae6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ae4:	e02f      	b.n	8008b46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ae6:	f107 030c 	add.w	r3, r7, #12
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f879 	bl	8008be4 <SD_FindSCR>
 8008af2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	e023      	b.n	8008b46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01c      	beq.n	8008b42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b10:	041b      	lsls	r3, r3, #16
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f001 fb27 	bl	800a168 <SDMMC_CmdAppCommand>
 8008b1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	e00f      	b.n	8008b46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2102      	movs	r1, #2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fb60 	bl	800a1f2 <SDMMC_CmdBusWidth>
 8008b32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	e003      	b.n	8008b46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e001      	b.n	8008b46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b086      	sub	sp, #24
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 f996 	bl	8009e96 <SDIO_GetResponse>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b74:	d102      	bne.n	8008b7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b7a:	e02f      	b.n	8008bdc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b7c:	f107 030c 	add.w	r3, r7, #12
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f82e 	bl	8008be4 <SD_FindSCR>
 8008b88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	e023      	b.n	8008bdc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01c      	beq.n	8008bd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f001 fadc 	bl	800a168 <SDMMC_CmdAppCommand>
 8008bb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	e00f      	b.n	8008bdc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 fb15 	bl	800a1f2 <SDMMC_CmdBusWidth>
 8008bc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	e003      	b.n	8008bdc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e001      	b.n	8008bdc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b08f      	sub	sp, #60	; 0x3c
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bee:	f7fa ff21 	bl	8003a34 <HAL_GetTick>
 8008bf2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60bb      	str	r3, [r7, #8]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2108      	movs	r1, #8
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f001 f980 	bl	8009f10 <SDMMC_CmdBlockLength>
 8008c10:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	e0b2      	b.n	8008d82 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c24:	041b      	lsls	r3, r3, #16
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f001 fa9d 	bl	800a168 <SDMMC_CmdAppCommand>
 8008c2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	e0a3      	b.n	8008d82 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c40:	2308      	movs	r3, #8
 8008c42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008c44:	2330      	movs	r3, #48	; 0x30
 8008c46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008c50:	2301      	movs	r3, #1
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f107 0210 	add.w	r2, r7, #16
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 f92b 	bl	8009eba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 fae4 	bl	800a236 <SDMMC_CmdSendSCR>
 8008c6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d02a      	beq.n	8008ccc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	e083      	b.n	8008d82 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00f      	beq.n	8008ca8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6819      	ldr	r1, [r3, #0]
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	f107 0208 	add.w	r2, r7, #8
 8008c94:	18d4      	adds	r4, r2, r3
 8008c96:	4608      	mov	r0, r1
 8008c98:	f001 f892 	bl	8009dc0 <SDIO_ReadFIFO>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	6023      	str	r3, [r4, #0]
      index++;
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca6:	e006      	b.n	8008cb6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d012      	beq.n	8008cdc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cb6:	f7fa febd 	bl	8003a34 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc4:	d102      	bne.n	8008ccc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cca:	e05a      	b.n	8008d82 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0cf      	beq.n	8008c7a <SD_FindSCR+0x96>
 8008cda:	e000      	b.n	8008cde <SD_FindSCR+0xfa>
      break;
 8008cdc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	e044      	b.n	8008d82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e037      	b.n	8008d82 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2220      	movs	r2, #32
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d28:	2320      	movs	r3, #32
 8008d2a:	e02a      	b.n	8008d82 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d34:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	061a      	lsls	r2, r3, #24
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	0e1b      	lsrs	r3, r3, #24
 8008d52:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	601a      	str	r2, [r3, #0]
    scr++;
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	061a      	lsls	r2, r3, #24
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	0a1b      	lsrs	r3, r3, #8
 8008d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	0e1b      	lsrs	r3, r3, #24
 8008d7a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	373c      	adds	r7, #60	; 0x3c
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd90      	pop	{r4, r7, pc}

08008d8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e076      	b.n	8008e8a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d108      	bne.n	8008db6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dac:	d009      	beq.n	8008dc2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	61da      	str	r2, [r3, #28]
 8008db4:	e005      	b.n	8008dc2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7fa fbc5 	bl	800356c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2202      	movs	r2, #2
 8008de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008df8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e32:	431a      	orrs	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e46:	ea42 0103 	orr.w	r1, r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	0c1a      	lsrs	r2, r3, #16
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f002 0204 	and.w	r2, r2, #4
 8008e68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b088      	sub	sp, #32
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_SPI_Transmit+0x22>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e12d      	b.n	8009110 <HAL_SPI_Transmit+0x27e>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ebc:	f7fa fdba 	bl	8003a34 <HAL_GetTick>
 8008ec0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d002      	beq.n	8008ed8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ed6:	e116      	b.n	8009106 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_SPI_Transmit+0x52>
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ee8:	e10d      	b.n	8009106 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2203      	movs	r2, #3
 8008eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f30:	d10f      	bne.n	8008f52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5c:	2b40      	cmp	r3, #64	; 0x40
 8008f5e:	d007      	beq.n	8008f70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f78:	d14f      	bne.n	800901a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_SPI_Transmit+0xf6>
 8008f82:	8afb      	ldrh	r3, [r7, #22]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d142      	bne.n	800900e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	881a      	ldrh	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	1c9a      	adds	r2, r3, #2
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008fac:	e02f      	b.n	800900e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d112      	bne.n	8008fe2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc0:	881a      	ldrh	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	1c9a      	adds	r2, r3, #2
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	86da      	strh	r2, [r3, #54]	; 0x36
 8008fe0:	e015      	b.n	800900e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe2:	f7fa fd27 	bl	8003a34 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d803      	bhi.n	8008ffa <HAL_SPI_Transmit+0x168>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff8:	d102      	bne.n	8009000 <HAL_SPI_Transmit+0x16e>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d106      	bne.n	800900e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800900c:	e07b      	b.n	8009106 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009012:	b29b      	uxth	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1ca      	bne.n	8008fae <HAL_SPI_Transmit+0x11c>
 8009018:	e050      	b.n	80090bc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_SPI_Transmit+0x196>
 8009022:	8afb      	ldrh	r3, [r7, #22]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d144      	bne.n	80090b2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	330c      	adds	r3, #12
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009044:	b29b      	uxth	r3, r3
 8009046:	3b01      	subs	r3, #1
 8009048:	b29a      	uxth	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800904e:	e030      	b.n	80090b2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b02      	cmp	r3, #2
 800905c:	d113      	bne.n	8009086 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	330c      	adds	r3, #12
 8009068:	7812      	ldrb	r2, [r2, #0]
 800906a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800907a:	b29b      	uxth	r3, r3
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	86da      	strh	r2, [r3, #54]	; 0x36
 8009084:	e015      	b.n	80090b2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009086:	f7fa fcd5 	bl	8003a34 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	d803      	bhi.n	800909e <HAL_SPI_Transmit+0x20c>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909c:	d102      	bne.n	80090a4 <HAL_SPI_Transmit+0x212>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d106      	bne.n	80090b2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80090b0:	e029      	b.n	8009106 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1c9      	bne.n	8009050 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f8b1 	bl	8009228 <SPI_EndRxTxTransaction>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2220      	movs	r2, #32
 80090d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090da:	2300      	movs	r3, #0
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	77fb      	strb	r3, [r7, #31]
 80090fc:	e003      	b.n	8009106 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800910e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	603b      	str	r3, [r7, #0]
 8009124:	4613      	mov	r3, r2
 8009126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009128:	f7fa fc84 	bl	8003a34 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	1a9b      	subs	r3, r3, r2
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4413      	add	r3, r2
 8009136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009138:	f7fa fc7c 	bl	8003a34 <HAL_GetTick>
 800913c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	015b      	lsls	r3, r3, #5
 8009144:	0d1b      	lsrs	r3, r3, #20
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	fb02 f303 	mul.w	r3, r2, r3
 800914c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800914e:	e054      	b.n	80091fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d050      	beq.n	80091fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009158:	f7fa fc6c 	bl	8003a34 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	429a      	cmp	r2, r3
 8009166:	d902      	bls.n	800916e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d13d      	bne.n	80091ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800917c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009186:	d111      	bne.n	80091ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009190:	d004      	beq.n	800919c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919a:	d107      	bne.n	80091ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b4:	d10f      	bne.n	80091d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e017      	b.n	800921a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4013      	ands	r3, r2
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	429a      	cmp	r2, r3
 8009208:	bf0c      	ite	eq
 800920a:	2301      	moveq	r3, #1
 800920c:	2300      	movne	r3, #0
 800920e:	b2db      	uxtb	r3, r3
 8009210:	461a      	mov	r2, r3
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	429a      	cmp	r2, r3
 8009216:	d19b      	bne.n	8009150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000010 	.word	0x20000010

08009228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2200      	movs	r2, #0
 800923c:	2180      	movs	r1, #128	; 0x80
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff ff6a 	bl	8009118 <SPI_WaitFlagStateUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d007      	beq.n	800925a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924e:	f043 0220 	orr.w	r2, r3, #32
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e000      	b.n	800925c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e041      	b.n	80092fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fa f9ba 	bl	8003604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f000 fb42 	bl	800992c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b01      	cmp	r3, #1
 8009316:	d001      	beq.n	800931c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e03c      	b.n	8009396 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <HAL_TIM_Base_Start+0x9c>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d018      	beq.n	8009360 <HAL_TIM_Base_Start+0x5c>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1c      	ldr	r2, [pc, #112]	; (80093a4 <HAL_TIM_Base_Start+0xa0>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d013      	beq.n	8009360 <HAL_TIM_Base_Start+0x5c>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009340:	d00e      	beq.n	8009360 <HAL_TIM_Base_Start+0x5c>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <HAL_TIM_Base_Start+0xa4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d009      	beq.n	8009360 <HAL_TIM_Base_Start+0x5c>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a16      	ldr	r2, [pc, #88]	; (80093ac <HAL_TIM_Base_Start+0xa8>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d004      	beq.n	8009360 <HAL_TIM_Base_Start+0x5c>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a15      	ldr	r2, [pc, #84]	; (80093b0 <HAL_TIM_Base_Start+0xac>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d111      	bne.n	8009384 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b06      	cmp	r3, #6
 8009370:	d010      	beq.n	8009394 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 0201 	orr.w	r2, r2, #1
 8009380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009382:	e007      	b.n	8009394 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0201 	orr.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr
 80093a0:	40012c00 	.word	0x40012c00
 80093a4:	40013400 	.word	0x40013400
 80093a8:	40000400 	.word	0x40000400
 80093ac:	40000800 	.word	0x40000800
 80093b0:	40000c00 	.word	0x40000c00

080093b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6a1a      	ldr	r2, [r3, #32]
 80093c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80093c6:	4013      	ands	r3, r2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10f      	bne.n	80093ec <HAL_TIM_Base_Stop+0x38>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6a1a      	ldr	r2, [r3, #32]
 80093d2:	f240 4344 	movw	r3, #1092	; 0x444
 80093d6:	4013      	ands	r3, r2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d107      	bne.n	80093ec <HAL_TIM_Base_Stop+0x38>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 0201 	bic.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e044      	b.n	80094a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f042 0201 	orr.w	r2, r2, #1
 800942e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a1d      	ldr	r2, [pc, #116]	; (80094ac <HAL_TIM_Base_Start_IT+0xac>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d018      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x6c>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1c      	ldr	r2, [pc, #112]	; (80094b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d013      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x6c>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800944c:	d00e      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x6c>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d009      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x6c>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d004      	beq.n	800946c <HAL_TIM_Base_Start_IT+0x6c>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a15      	ldr	r2, [pc, #84]	; (80094bc <HAL_TIM_Base_Start_IT+0xbc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d111      	bne.n	8009490 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b06      	cmp	r3, #6
 800947c:	d010      	beq.n	80094a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0201 	orr.w	r2, r2, #1
 800948c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800948e:	e007      	b.n	80094a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	40013400 	.word	0x40013400
 80094b4:	40000400 	.word	0x40000400
 80094b8:	40000800 	.word	0x40000800
 80094bc:	40000c00 	.word	0x40000c00

080094c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d122      	bne.n	800951c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d11b      	bne.n	800951c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f06f 0202 	mvn.w	r2, #2
 80094ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9f6 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 8009508:	e005      	b.n	8009516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f9e9 	bl	80098e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f9f8 	bl	8009906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b04      	cmp	r3, #4
 8009528:	d122      	bne.n	8009570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b04      	cmp	r3, #4
 8009536:	d11b      	bne.n	8009570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f06f 0204 	mvn.w	r2, #4
 8009540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2202      	movs	r2, #2
 8009546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f9cc 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 800955c:	e005      	b.n	800956a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f9bf 	bl	80098e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f9ce 	bl	8009906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0308 	and.w	r3, r3, #8
 800957a:	2b08      	cmp	r3, #8
 800957c:	d122      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b08      	cmp	r3, #8
 800958a:	d11b      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f06f 0208 	mvn.w	r2, #8
 8009594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2204      	movs	r2, #4
 800959a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f9a2 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 80095b0:	e005      	b.n	80095be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f995 	bl	80098e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f9a4 	bl	8009906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0310 	and.w	r3, r3, #16
 80095ce:	2b10      	cmp	r3, #16
 80095d0:	d122      	bne.n	8009618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b10      	cmp	r3, #16
 80095de:	d11b      	bne.n	8009618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f06f 0210 	mvn.w	r2, #16
 80095e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2208      	movs	r2, #8
 80095ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f978 	bl	80098f4 <HAL_TIM_IC_CaptureCallback>
 8009604:	e005      	b.n	8009612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f96b 	bl	80098e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f97a 	bl	8009906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b01      	cmp	r3, #1
 8009624:	d10e      	bne.n	8009644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b01      	cmp	r3, #1
 8009632:	d107      	bne.n	8009644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f06f 0201 	mvn.w	r2, #1
 800963c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f9 f8fa 	bl	8002838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964e:	2b80      	cmp	r3, #128	; 0x80
 8009650:	d10e      	bne.n	8009670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800965c:	2b80      	cmp	r3, #128	; 0x80
 800965e:	d107      	bne.n	8009670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fb75 	bl	8009d5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d10e      	bne.n	800969c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009688:	2b40      	cmp	r3, #64	; 0x40
 800968a:	d107      	bne.n	800969c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f93e 	bl	8009918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d10e      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d107      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f06f 0220 	mvn.w	r2, #32
 80096c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fb40 	bl	8009d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_ConfigClockSource+0x1c>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e0b4      	b.n	8009856 <HAL_TIM_ConfigClockSource+0x186>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800970a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009724:	d03e      	beq.n	80097a4 <HAL_TIM_ConfigClockSource+0xd4>
 8009726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800972a:	f200 8087 	bhi.w	800983c <HAL_TIM_ConfigClockSource+0x16c>
 800972e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009732:	f000 8086 	beq.w	8009842 <HAL_TIM_ConfigClockSource+0x172>
 8009736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973a:	d87f      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 800973c:	2b70      	cmp	r3, #112	; 0x70
 800973e:	d01a      	beq.n	8009776 <HAL_TIM_ConfigClockSource+0xa6>
 8009740:	2b70      	cmp	r3, #112	; 0x70
 8009742:	d87b      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 8009744:	2b60      	cmp	r3, #96	; 0x60
 8009746:	d050      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0x11a>
 8009748:	2b60      	cmp	r3, #96	; 0x60
 800974a:	d877      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 800974c:	2b50      	cmp	r3, #80	; 0x50
 800974e:	d03c      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0xfa>
 8009750:	2b50      	cmp	r3, #80	; 0x50
 8009752:	d873      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 8009754:	2b40      	cmp	r3, #64	; 0x40
 8009756:	d058      	beq.n	800980a <HAL_TIM_ConfigClockSource+0x13a>
 8009758:	2b40      	cmp	r3, #64	; 0x40
 800975a:	d86f      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 800975c:	2b30      	cmp	r3, #48	; 0x30
 800975e:	d064      	beq.n	800982a <HAL_TIM_ConfigClockSource+0x15a>
 8009760:	2b30      	cmp	r3, #48	; 0x30
 8009762:	d86b      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 8009764:	2b20      	cmp	r3, #32
 8009766:	d060      	beq.n	800982a <HAL_TIM_ConfigClockSource+0x15a>
 8009768:	2b20      	cmp	r3, #32
 800976a:	d867      	bhi.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d05c      	beq.n	800982a <HAL_TIM_ConfigClockSource+0x15a>
 8009770:	2b10      	cmp	r3, #16
 8009772:	d05a      	beq.n	800982a <HAL_TIM_ConfigClockSource+0x15a>
 8009774:	e062      	b.n	800983c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	6899      	ldr	r1, [r3, #8]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f000 fa53 	bl	8009c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	609a      	str	r2, [r3, #8]
      break;
 80097a2:	e04f      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	6899      	ldr	r1, [r3, #8]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	f000 fa3c 	bl	8009c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097c6:	609a      	str	r2, [r3, #8]
      break;
 80097c8:	e03c      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	6859      	ldr	r1, [r3, #4]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	461a      	mov	r2, r3
 80097d8:	f000 f9b3 	bl	8009b42 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2150      	movs	r1, #80	; 0x50
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fa0a 	bl	8009bfc <TIM_ITRx_SetConfig>
      break;
 80097e8:	e02c      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f000 f9d1 	bl	8009b9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2160      	movs	r1, #96	; 0x60
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f9fa 	bl	8009bfc <TIM_ITRx_SetConfig>
      break;
 8009808:	e01c      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6859      	ldr	r1, [r3, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	461a      	mov	r2, r3
 8009818:	f000 f993 	bl	8009b42 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2140      	movs	r1, #64	; 0x40
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f9ea 	bl	8009bfc <TIM_ITRx_SetConfig>
      break;
 8009828:	e00c      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f000 f9e1 	bl	8009bfc <TIM_ITRx_SetConfig>
      break;
 800983a:	e003      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
      break;
 8009840:	e000      	b.n	8009844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009872:	2302      	movs	r3, #2
 8009874:	e031      	b.n	80098da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f8c9 	bl	8009a20 <TIM_SlaveTimer_SetConfig>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e018      	b.n	80098da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	bc80      	pop	{r7}
 8009928:	4770      	bx	lr
	...

0800992c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a33      	ldr	r2, [pc, #204]	; (8009a0c <TIM_Base_SetConfig+0xe0>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d013      	beq.n	800996c <TIM_Base_SetConfig+0x40>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a32      	ldr	r2, [pc, #200]	; (8009a10 <TIM_Base_SetConfig+0xe4>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00f      	beq.n	800996c <TIM_Base_SetConfig+0x40>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009952:	d00b      	beq.n	800996c <TIM_Base_SetConfig+0x40>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a2f      	ldr	r2, [pc, #188]	; (8009a14 <TIM_Base_SetConfig+0xe8>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d007      	beq.n	800996c <TIM_Base_SetConfig+0x40>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a2e      	ldr	r2, [pc, #184]	; (8009a18 <TIM_Base_SetConfig+0xec>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d003      	beq.n	800996c <TIM_Base_SetConfig+0x40>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a2d      	ldr	r2, [pc, #180]	; (8009a1c <TIM_Base_SetConfig+0xf0>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d108      	bne.n	800997e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a22      	ldr	r2, [pc, #136]	; (8009a0c <TIM_Base_SetConfig+0xe0>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d013      	beq.n	80099ae <TIM_Base_SetConfig+0x82>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a21      	ldr	r2, [pc, #132]	; (8009a10 <TIM_Base_SetConfig+0xe4>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d00f      	beq.n	80099ae <TIM_Base_SetConfig+0x82>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009994:	d00b      	beq.n	80099ae <TIM_Base_SetConfig+0x82>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a1e      	ldr	r2, [pc, #120]	; (8009a14 <TIM_Base_SetConfig+0xe8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d007      	beq.n	80099ae <TIM_Base_SetConfig+0x82>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <TIM_Base_SetConfig+0xec>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d003      	beq.n	80099ae <TIM_Base_SetConfig+0x82>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <TIM_Base_SetConfig+0xf0>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d108      	bne.n	80099c0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <TIM_Base_SetConfig+0xe0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d003      	beq.n	80099f4 <TIM_Base_SetConfig+0xc8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a08      	ldr	r2, [pc, #32]	; (8009a10 <TIM_Base_SetConfig+0xe4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d103      	bne.n	80099fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	615a      	str	r2, [r3, #20]
}
 8009a02:	bf00      	nop
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bc80      	pop	{r7}
 8009a0a:	4770      	bx	lr
 8009a0c:	40012c00 	.word	0x40012c00
 8009a10:	40013400 	.word	0x40013400
 8009a14:	40000400 	.word	0x40000400
 8009a18:	40000800 	.word	0x40000800
 8009a1c:	40000c00 	.word	0x40000c00

08009a20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	2b70      	cmp	r3, #112	; 0x70
 8009a68:	d01a      	beq.n	8009aa0 <TIM_SlaveTimer_SetConfig+0x80>
 8009a6a:	2b70      	cmp	r3, #112	; 0x70
 8009a6c:	d860      	bhi.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
 8009a6e:	2b60      	cmp	r3, #96	; 0x60
 8009a70:	d054      	beq.n	8009b1c <TIM_SlaveTimer_SetConfig+0xfc>
 8009a72:	2b60      	cmp	r3, #96	; 0x60
 8009a74:	d85c      	bhi.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
 8009a76:	2b50      	cmp	r3, #80	; 0x50
 8009a78:	d046      	beq.n	8009b08 <TIM_SlaveTimer_SetConfig+0xe8>
 8009a7a:	2b50      	cmp	r3, #80	; 0x50
 8009a7c:	d858      	bhi.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d019      	beq.n	8009ab6 <TIM_SlaveTimer_SetConfig+0x96>
 8009a82:	2b40      	cmp	r3, #64	; 0x40
 8009a84:	d854      	bhi.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
 8009a86:	2b30      	cmp	r3, #48	; 0x30
 8009a88:	d055      	beq.n	8009b36 <TIM_SlaveTimer_SetConfig+0x116>
 8009a8a:	2b30      	cmp	r3, #48	; 0x30
 8009a8c:	d850      	bhi.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
 8009a8e:	2b20      	cmp	r3, #32
 8009a90:	d051      	beq.n	8009b36 <TIM_SlaveTimer_SetConfig+0x116>
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d84c      	bhi.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04d      	beq.n	8009b36 <TIM_SlaveTimer_SetConfig+0x116>
 8009a9a:	2b10      	cmp	r3, #16
 8009a9c:	d04b      	beq.n	8009b36 <TIM_SlaveTimer_SetConfig+0x116>
 8009a9e:	e047      	b.n	8009b30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	68d9      	ldr	r1, [r3, #12]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f000 f8be 	bl	8009c30 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009ab4:	e040      	b.n	8009b38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d101      	bne.n	8009ac2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e03b      	b.n	8009b3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a1a      	ldr	r2, [r3, #32]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ae8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	621a      	str	r2, [r3, #32]
      break;
 8009b06:	e017      	b.n	8009b38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	6899      	ldr	r1, [r3, #8]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	461a      	mov	r2, r3
 8009b16:	f000 f814 	bl	8009b42 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b1a:	e00d      	b.n	8009b38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	6899      	ldr	r1, [r3, #8]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f000 f838 	bl	8009b9e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b2e:	e003      	b.n	8009b38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	75fb      	strb	r3, [r7, #23]
      break;
 8009b34:	e000      	b.n	8009b38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009b36:	bf00      	nop
  }

  return status;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b087      	sub	sp, #28
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	f023 0201 	bic.w	r2, r3, #1
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f023 030a 	bic.w	r3, r3, #10
 8009b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	621a      	str	r2, [r3, #32]
}
 8009b94:	bf00      	nop
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr

08009b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b087      	sub	sp, #28
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	f023 0210 	bic.w	r2, r3, #16
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	031b      	lsls	r3, r3, #12
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr

08009bfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f043 0307 	orr.w	r3, r3, #7
 8009c1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	609a      	str	r2, [r3, #8]
}
 8009c26:	bf00      	nop
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr

08009c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	021a      	lsls	r2, r3, #8
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	609a      	str	r2, [r3, #8]
}
 8009c64:	bf00      	nop
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bc80      	pop	{r7}
 8009c6c:	4770      	bx	lr
	...

08009c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e050      	b.n	8009d2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a1b      	ldr	r2, [pc, #108]	; (8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d018      	beq.n	8009cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a19      	ldr	r2, [pc, #100]	; (8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d013      	beq.n	8009cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cde:	d00e      	beq.n	8009cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a15      	ldr	r2, [pc, #84]	; (8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d009      	beq.n	8009cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a14      	ldr	r2, [pc, #80]	; (8009d40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d004      	beq.n	8009cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a12      	ldr	r2, [pc, #72]	; (8009d44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d10c      	bne.n	8009d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bc80      	pop	{r7}
 8009d32:	4770      	bx	lr
 8009d34:	40012c00 	.word	0x40012c00
 8009d38:	40013400 	.word	0x40013400
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	40000800 	.word	0x40000800
 8009d44:	40000c00 	.word	0x40000c00

08009d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bc80      	pop	{r7}
 8009d58:	4770      	bx	lr

08009d5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bc80      	pop	{r7}
 8009d6a:	4770      	bx	lr

08009d6c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	f107 001c 	add.w	r0, r7, #28
 8009d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009d82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009d84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009d86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009d8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009d8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009d92:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009d96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009da6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	431a      	orrs	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bc80      	pop	{r7}
 8009dbc:	b004      	add	sp, #16
 8009dbe:	4770      	bx	lr

08009dc0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bc80      	pop	{r7}
 8009dd6:	4770      	bx	lr

08009dd8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr

08009df8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2203      	movs	r2, #3
 8009e04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bc80      	pop	{r7}
 8009e10:	4770      	bx	lr

08009e12 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0303 	and.w	r3, r3, #3
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc80      	pop	{r7}
 8009e2a:	4770      	bx	lr

08009e2c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e66:	f023 030f 	bic.w	r3, r3, #15
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bc80      	pop	{r7}
 8009e7c:	4770      	bx	lr

08009e7e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	b2db      	uxtb	r3, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr

08009e96 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3314      	adds	r3, #20
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
}  
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr

08009eba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ee0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009ee6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009eec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0

}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc80      	pop	{r7}
 8009f0e:	4770      	bx	lr

08009f10 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f1e:	2310      	movs	r3, #16
 8009f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f22:	2340      	movs	r3, #64	; 0x40
 8009f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f30:	f107 0308 	add.w	r3, r7, #8
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff ff78 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f40:	2110      	movs	r1, #16
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa18 	bl	800a378 <SDMMC_GetCmdResp1>
 8009f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f4a:	69fb      	ldr	r3, [r7, #28]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009f62:	2311      	movs	r3, #17
 8009f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f66:	2340      	movs	r3, #64	; 0x40
 8009f68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f74:	f107 0308 	add.w	r3, r7, #8
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff ff56 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f84:	2111      	movs	r1, #17
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f9f6 	bl	800a378 <SDMMC_GetCmdResp1>
 8009f8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f8e:	69fb      	ldr	r3, [r7, #28]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009fa6:	2312      	movs	r3, #18
 8009fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fb8:	f107 0308 	add.w	r3, r7, #8
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff ff34 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc8:	2112      	movs	r1, #18
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f9d4 	bl	800a378 <SDMMC_GetCmdResp1>
 8009fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3720      	adds	r7, #32
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009fea:	2318      	movs	r3, #24
 8009fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fee:	2340      	movs	r3, #64	; 0x40
 8009ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff ff12 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a008:	f241 3288 	movw	r2, #5000	; 0x1388
 800a00c:	2118      	movs	r1, #24
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f9b2 	bl	800a378 <SDMMC_GetCmdResp1>
 800a014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a016:	69fb      	ldr	r3, [r7, #28]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a02e:	2319      	movs	r3, #25
 800a030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a032:	2340      	movs	r3, #64	; 0x40
 800a034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a040:	f107 0308 	add.w	r3, r7, #8
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fef0 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a050:	2119      	movs	r1, #25
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f990 	bl	800a378 <SDMMC_GetCmdResp1>
 800a058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a05a:	69fb      	ldr	r3, [r7, #28]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3720      	adds	r7, #32
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a070:	230c      	movs	r3, #12
 800a072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a074:	2340      	movs	r3, #64	; 0x40
 800a076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a07c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a082:	f107 0308 	add.w	r3, r7, #8
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff fecf 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a08e:	4a05      	ldr	r2, [pc, #20]	; (800a0a4 <SDMMC_CmdStopTransfer+0x40>)
 800a090:	210c      	movs	r1, #12
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f970 	bl	800a378 <SDMMC_GetCmdResp1>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	05f5e100 	.word	0x05f5e100

0800a0a8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	; 0x28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a0b8:	2307      	movs	r3, #7
 800a0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0bc:	2340      	movs	r3, #64	; 0x40
 800a0be:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0ca:	f107 0310 	add.w	r3, r7, #16
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff feab 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0da:	2107      	movs	r1, #7
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 f94b 	bl	800a378 <SDMMC_GetCmdResp1>
 800a0e2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3728      	adds	r7, #40	; 0x28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b088      	sub	sp, #32
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a0fe:	2300      	movs	r3, #0
 800a100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a10a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a10c:	f107 0308 	add.w	r3, r7, #8
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff fe8a 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fb63 	bl	800a7e4 <SDMMC_GetCmdError>
 800a11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a120:	69fb      	ldr	r3, [r7, #28]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3720      	adds	r7, #32
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b088      	sub	sp, #32
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a132:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a138:	2308      	movs	r3, #8
 800a13a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a13c:	2340      	movs	r3, #64	; 0x40
 800a13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a148:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a14a:	f107 0308 	add.w	r3, r7, #8
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fe6b 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 faf6 	bl	800a748 <SDMMC_GetCmdResp7>
 800a15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a15e:	69fb      	ldr	r3, [r7, #28]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a176:	2337      	movs	r3, #55	; 0x37
 800a178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a17a:	2340      	movs	r3, #64	; 0x40
 800a17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a17e:	2300      	movs	r3, #0
 800a180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a186:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a188:	f107 0308 	add.w	r3, r7, #8
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fe4c 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a194:	f241 3288 	movw	r2, #5000	; 0x1388
 800a198:	2137      	movs	r1, #55	; 0x37
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f8ec 	bl	800a378 <SDMMC_GetCmdResp1>
 800a1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1a2:	69fb      	ldr	r3, [r7, #28]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a1c2:	2329      	movs	r3, #41	; 0x29
 800a1c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1d4:	f107 0308 	add.w	r3, r7, #8
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fe26 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f9ff 	bl	800a5e4 <SDMMC_GetCmdResp3>
 800a1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b088      	sub	sp, #32
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a200:	2306      	movs	r3, #6
 800a202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a204:	2340      	movs	r3, #64	; 0x40
 800a206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a20c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a210:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fe07 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a222:	2106      	movs	r1, #6
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f8a7 	bl	800a378 <SDMMC_GetCmdResp1>
 800a22a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b088      	sub	sp, #32
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a242:	2333      	movs	r3, #51	; 0x33
 800a244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a246:	2340      	movs	r3, #64	; 0x40
 800a248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a254:	f107 0308 	add.w	r3, r7, #8
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fde6 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a260:	f241 3288 	movw	r2, #5000	; 0x1388
 800a264:	2133      	movs	r1, #51	; 0x33
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f886 	bl	800a378 <SDMMC_GetCmdResp1>
 800a26c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a26e:	69fb      	ldr	r3, [r7, #28]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3720      	adds	r7, #32
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b088      	sub	sp, #32
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a284:	2302      	movs	r3, #2
 800a286:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a288:	23c0      	movs	r3, #192	; 0xc0
 800a28a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a294:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a296:	f107 0308 	add.w	r3, r7, #8
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff fdc5 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f956 	bl	800a554 <SDMMC_GetCmdResp2>
 800a2a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2aa:	69fb      	ldr	r3, [r7, #28]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3720      	adds	r7, #32
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a2c2:	2309      	movs	r3, #9
 800a2c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2c6:	23c0      	movs	r3, #192	; 0xc0
 800a2c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2d4:	f107 0308 	add.w	r3, r7, #8
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fda6 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f937 	bl	800a554 <SDMMC_GetCmdResp2>
 800a2e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3720      	adds	r7, #32
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b088      	sub	sp, #32
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a300:	2303      	movs	r3, #3
 800a302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a304:	2340      	movs	r3, #64	; 0x40
 800a306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a308:	2300      	movs	r3, #0
 800a30a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a310:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a312:	f107 0308 	add.w	r3, r7, #8
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7ff fd87 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	2103      	movs	r1, #3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f99a 	bl	800a65c <SDMMC_GetCmdResp6>
 800a328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a32a:	69fb      	ldr	r3, [r7, #28]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a342:	230d      	movs	r3, #13
 800a344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a346:	2340      	movs	r3, #64	; 0x40
 800a348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a34e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a354:	f107 0308 	add.w	r3, r7, #8
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff fd66 	bl	8009e2c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a360:	f241 3288 	movw	r2, #5000	; 0x1388
 800a364:	210d      	movs	r1, #13
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f806 	bl	800a378 <SDMMC_GetCmdResp1>
 800a36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a36e:	69fb      	ldr	r3, [r7, #28]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	460b      	mov	r3, r1
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a386:	4b70      	ldr	r3, [pc, #448]	; (800a548 <SDMMC_GetCmdResp1+0x1d0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a70      	ldr	r2, [pc, #448]	; (800a54c <SDMMC_GetCmdResp1+0x1d4>)
 800a38c:	fba2 2303 	umull	r2, r3, r2, r3
 800a390:	0a5a      	lsrs	r2, r3, #9
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	fb02 f303 	mul.w	r3, r2, r3
 800a398:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	1e5a      	subs	r2, r3, #1
 800a39e:	61fa      	str	r2, [r7, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3a8:	e0c9      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0ef      	beq.n	800a39a <SDMMC_GetCmdResp1+0x22>
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1ea      	bne.n	800a39a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d004      	beq.n	800a3da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3d6:	2304      	movs	r3, #4
 800a3d8:	e0b1      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d004      	beq.n	800a3f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e0a6      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	22c5      	movs	r2, #197	; 0xc5
 800a3f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff fd41 	bl	8009e7e <SDIO_GetCommandResponse>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461a      	mov	r2, r3
 800a400:	7afb      	ldrb	r3, [r7, #11]
 800a402:	4293      	cmp	r3, r2
 800a404:	d001      	beq.n	800a40a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a406:	2301      	movs	r3, #1
 800a408:	e099      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a40a:	2100      	movs	r1, #0
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fd42 	bl	8009e96 <SDIO_GetResponse>
 800a412:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	4b4e      	ldr	r3, [pc, #312]	; (800a550 <SDMMC_GetCmdResp1+0x1d8>)
 800a418:	4013      	ands	r3, r2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a41e:	2300      	movs	r3, #0
 800a420:	e08d      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	da02      	bge.n	800a42e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a42c:	e087      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d001      	beq.n	800a43c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a438:	2340      	movs	r3, #64	; 0x40
 800a43a:	e080      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a446:	2380      	movs	r3, #128	; 0x80
 800a448:	e079      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a454:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a458:	e071      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a464:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a468:	e069      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a478:	e061      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a488:	e059      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a498:	e051      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4a8:	e049      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4b8:	e041      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a4c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4c8:	e039      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4d8:	e031      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4e8:	e029      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4f8:	e021      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a504:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a508:	e019      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a514:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a518:	e011      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a524:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a528:	e009      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a534:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a538:	e001      	b.n	800a53e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a53a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3720      	adds	r7, #32
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20000010 	.word	0x20000010
 800a54c:	10624dd3 	.word	0x10624dd3
 800a550:	fdffe008 	.word	0xfdffe008

0800a554 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a55c:	4b1f      	ldr	r3, [pc, #124]	; (800a5dc <SDMMC_GetCmdResp2+0x88>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1f      	ldr	r2, [pc, #124]	; (800a5e0 <SDMMC_GetCmdResp2+0x8c>)
 800a562:	fba2 2303 	umull	r2, r3, r2, r3
 800a566:	0a5b      	lsrs	r3, r3, #9
 800a568:	f241 3288 	movw	r2, #5000	; 0x1388
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	1e5a      	subs	r2, r3, #1
 800a576:	60fa      	str	r2, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a57c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a580:	e026      	b.n	800a5d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0ef      	beq.n	800a572 <SDMMC_GetCmdResp2+0x1e>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1ea      	bne.n	800a572 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d004      	beq.n	800a5b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ae:	2304      	movs	r3, #4
 800a5b0:	e00e      	b.n	800a5d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e003      	b.n	800a5d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	22c5      	movs	r2, #197	; 0xc5
 800a5cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	20000010 	.word	0x20000010
 800a5e0:	10624dd3 	.word	0x10624dd3

0800a5e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5ec:	4b19      	ldr	r3, [pc, #100]	; (800a654 <SDMMC_GetCmdResp3+0x70>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a19      	ldr	r2, [pc, #100]	; (800a658 <SDMMC_GetCmdResp3+0x74>)
 800a5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f6:	0a5b      	lsrs	r3, r3, #9
 800a5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5fc:	fb02 f303 	mul.w	r3, r2, r3
 800a600:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	60fa      	str	r2, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d102      	bne.n	800a612 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a60c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a610:	e01b      	b.n	800a64a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0ef      	beq.n	800a602 <SDMMC_GetCmdResp3+0x1e>
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1ea      	bne.n	800a602 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2204      	movs	r2, #4
 800a63c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a63e:	2304      	movs	r3, #4
 800a640:	e003      	b.n	800a64a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	22c5      	movs	r2, #197	; 0xc5
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc80      	pop	{r7}
 800a652:	4770      	bx	lr
 800a654:	20000010 	.word	0x20000010
 800a658:	10624dd3 	.word	0x10624dd3

0800a65c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	460b      	mov	r3, r1
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a66a:	4b35      	ldr	r3, [pc, #212]	; (800a740 <SDMMC_GetCmdResp6+0xe4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a35      	ldr	r2, [pc, #212]	; (800a744 <SDMMC_GetCmdResp6+0xe8>)
 800a670:	fba2 2303 	umull	r2, r3, r2, r3
 800a674:	0a5b      	lsrs	r3, r3, #9
 800a676:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67a:	fb02 f303 	mul.w	r3, r2, r3
 800a67e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	1e5a      	subs	r2, r3, #1
 800a684:	61fa      	str	r2, [r7, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a68a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a68e:	e052      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a694:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d0ef      	beq.n	800a680 <SDMMC_GetCmdResp6+0x24>
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1ea      	bne.n	800a680 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d004      	beq.n	800a6c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2204      	movs	r2, #4
 800a6ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6bc:	2304      	movs	r3, #4
 800a6be:	e03a      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e02f      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fbd1 	bl	8009e7e <SDIO_GetCommandResponse>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d001      	beq.n	800a6ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e025      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	22c5      	movs	r2, #197	; 0xc5
 800a6ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7ff fbcf 	bl	8009e96 <SDIO_GetResponse>
 800a6f8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d106      	bne.n	800a712 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	0c1b      	lsrs	r3, r3, #16
 800a708:	b29a      	uxth	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a70e:	2300      	movs	r3, #0
 800a710:	e011      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a71c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a720:	e009      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a72c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a730:	e001      	b.n	800a736 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3720      	adds	r7, #32
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	20000010 	.word	0x20000010
 800a744:	10624dd3 	.word	0x10624dd3

0800a748 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a750:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <SDMMC_GetCmdResp7+0x94>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a22      	ldr	r2, [pc, #136]	; (800a7e0 <SDMMC_GetCmdResp7+0x98>)
 800a756:	fba2 2303 	umull	r2, r3, r2, r3
 800a75a:	0a5b      	lsrs	r3, r3, #9
 800a75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	1e5a      	subs	r2, r3, #1
 800a76a:	60fa      	str	r2, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a774:	e02c      	b.n	800a7d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0ef      	beq.n	800a766 <SDMMC_GetCmdResp7+0x1e>
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1ea      	bne.n	800a766 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d004      	beq.n	800a7a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2204      	movs	r2, #4
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7a2:	2304      	movs	r3, #4
 800a7a4:	e014      	b.n	800a7d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d004      	beq.n	800a7bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e009      	b.n	800a7d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2240      	movs	r2, #64	; 0x40
 800a7cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7ce:	2300      	movs	r3, #0
  
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000010 	.word	0x20000010
 800a7e0:	10624dd3 	.word	0x10624dd3

0800a7e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7ec:	4b10      	ldr	r3, [pc, #64]	; (800a830 <SDMMC_GetCmdError+0x4c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a10      	ldr	r2, [pc, #64]	; (800a834 <SDMMC_GetCmdError+0x50>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	0a5b      	lsrs	r3, r3, #9
 800a7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fc:	fb02 f303 	mul.w	r3, r2, r3
 800a800:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	60fa      	str	r2, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a80c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a810:	e009      	b.n	800a826 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0f1      	beq.n	800a802 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	22c5      	movs	r2, #197	; 0xc5
 800a822:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bc80      	pop	{r7}
 800a82e:	4770      	bx	lr
 800a830:	20000010 	.word	0x20000010
 800a834:	10624dd3 	.word	0x10624dd3

0800a838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a838:	b084      	sub	sp, #16
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	f107 0014 	add.w	r0, r7, #20
 800a846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	bc80      	pop	{r7}
 800a854:	b004      	add	sp, #16
 800a856:	4770      	bx	lr

0800a858 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a868:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a86c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	b29a      	uxth	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr

0800a884 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a88c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a890:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a898:	b29a      	uxth	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	43db      	mvns	r3, r3
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr

0800a8d0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	f107 0014 	add.w	r0, r7, #20
 800a8de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	bc80      	pop	{r7}
 800a90c:	b004      	add	sp, #16
 800a90e:	4770      	bx	lr

0800a910 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a910:	b480      	push	{r7}
 800a912:	b09d      	sub	sp, #116	; 0x74
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a936:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	78db      	ldrb	r3, [r3, #3]
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d81f      	bhi.n	800a982 <USB_ActivateEndpoint+0x72>
 800a942:	a201      	add	r2, pc, #4	; (adr r2, 800a948 <USB_ActivateEndpoint+0x38>)
 800a944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a948:	0800a959 	.word	0x0800a959
 800a94c:	0800a975 	.word	0x0800a975
 800a950:	0800a98b 	.word	0x0800a98b
 800a954:	0800a967 	.word	0x0800a967
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a958:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a95c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a964:	e012      	b.n	800a98c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a96a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a96e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a972:	e00b      	b.n	800a98c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a974:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a978:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a97c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a980:	e004      	b.n	800a98c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a988:	e000      	b.n	800a98c <USB_ActivateEndpoint+0x7c>
      break;
 800a98a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	441a      	add	r2, r3
 800a996:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	441a      	add	r2, r3
 800a9dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a9e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	7b1b      	ldrb	r3, [r3, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 8178 	bne.w	800acee <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 8084 	beq.w	800ab10 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	61bb      	str	r3, [r7, #24]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	461a      	mov	r2, r3
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	4413      	add	r3, r2
 800aa1a:	61bb      	str	r3, [r7, #24]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	011a      	lsls	r2, r3, #4
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa2a:	617b      	str	r3, [r7, #20]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	88db      	ldrh	r3, [r3, #6]
 800aa30:	085b      	lsrs	r3, r3, #1
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	827b      	strh	r3, [r7, #18]
 800aa4a:	8a7b      	ldrh	r3, [r7, #18]
 800aa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01b      	beq.n	800aa8c <USB_ActivateEndpoint+0x17c>
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa6a:	823b      	strh	r3, [r7, #16]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	441a      	add	r2, r3
 800aa76:	8a3b      	ldrh	r3, [r7, #16]
 800aa78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	78db      	ldrb	r3, [r3, #3]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d020      	beq.n	800aad6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaaa:	81bb      	strh	r3, [r7, #12]
 800aaac:	89bb      	ldrh	r3, [r7, #12]
 800aaae:	f083 0320 	eor.w	r3, r3, #32
 800aab2:	81bb      	strh	r3, [r7, #12]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	441a      	add	r2, r3
 800aabe:	89bb      	ldrh	r3, [r7, #12]
 800aac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	8013      	strh	r3, [r2, #0]
 800aad4:	e2d5      	b.n	800b082 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaec:	81fb      	strh	r3, [r7, #14]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	441a      	add	r2, r3
 800aaf8:	89fb      	ldrh	r3, [r7, #14]
 800aafa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aafe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	8013      	strh	r3, [r2, #0]
 800ab0e:	e2b8      	b.n	800b082 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	633b      	str	r3, [r7, #48]	; 0x30
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	4413      	add	r3, r2
 800ab22:	633b      	str	r3, [r7, #48]	; 0x30
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	011a      	lsls	r2, r3, #4
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	88db      	ldrh	r3, [r3, #6]
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	4413      	add	r3, r2
 800ab56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	011a      	lsls	r2, r3, #4
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	4413      	add	r3, r2
 800ab62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	801a      	strh	r2, [r3, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	2b3e      	cmp	r3, #62	; 0x3e
 800ab7e:	d91d      	bls.n	800abbc <USB_ActivateEndpoint+0x2ac>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	095b      	lsrs	r3, r3, #5
 800ab86:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f003 031f 	and.w	r3, r3, #31
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d102      	bne.n	800ab9a <USB_ActivateEndpoint+0x28a>
 800ab94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab96:	3b01      	subs	r3, #1
 800ab98:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	029b      	lsls	r3, r3, #10
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	4313      	orrs	r3, r2
 800abaa:	b29b      	uxth	r3, r3
 800abac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	e026      	b.n	800ac0a <USB_ActivateEndpoint+0x2fa>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <USB_ActivateEndpoint+0x2ca>
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	e017      	b.n	800ac0a <USB_ActivateEndpoint+0x2fa>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	085b      	lsrs	r3, r3, #1
 800abe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <USB_ActivateEndpoint+0x2e4>
 800abee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abf0:	3301      	adds	r3, #1
 800abf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	029b      	lsls	r3, r3, #10
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4313      	orrs	r3, r2
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01b      	beq.n	800ac5a <USB_ActivateEndpoint+0x34a>
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac38:	843b      	strh	r3, [r7, #32]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	441a      	add	r2, r3
 800ac44:	8c3b      	ldrh	r3, [r7, #32]
 800ac46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d124      	bne.n	800acac <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac78:	83bb      	strh	r3, [r7, #28]
 800ac7a:	8bbb      	ldrh	r3, [r7, #28]
 800ac7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac80:	83bb      	strh	r3, [r7, #28]
 800ac82:	8bbb      	ldrh	r3, [r7, #28]
 800ac84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac88:	83bb      	strh	r3, [r7, #28]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	441a      	add	r2, r3
 800ac94:	8bbb      	ldrh	r3, [r7, #28]
 800ac96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	8013      	strh	r3, [r2, #0]
 800acaa:	e1ea      	b.n	800b082 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc2:	83fb      	strh	r3, [r7, #30]
 800acc4:	8bfb      	ldrh	r3, [r7, #30]
 800acc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acca:	83fb      	strh	r3, [r7, #30]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	441a      	add	r2, r3
 800acd6:	8bfb      	ldrh	r3, [r7, #30]
 800acd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ace0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ace4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace8:	b29b      	uxth	r3, r3
 800acea:	8013      	strh	r3, [r2, #0]
 800acec:	e1c9      	b.n	800b082 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	78db      	ldrb	r3, [r3, #3]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d11e      	bne.n	800ad34 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	441a      	add	r2, r3
 800ad1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad26:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ad2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	8013      	strh	r3, [r2, #0]
 800ad32:	e01d      	b.n	800ad70 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	441a      	add	r2, r3
 800ad58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad80:	4413      	add	r3, r2
 800ad82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	011a      	lsls	r2, r3, #4
 800ad8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad92:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	891b      	ldrh	r3, [r3, #8]
 800ad98:	085b      	lsrs	r3, r3, #1
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ada2:	801a      	strh	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	657b      	str	r3, [r7, #84]	; 0x54
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adae:	b29b      	uxth	r3, r3
 800adb0:	461a      	mov	r2, r3
 800adb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb4:	4413      	add	r3, r2
 800adb6:	657b      	str	r3, [r7, #84]	; 0x54
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	011a      	lsls	r2, r3, #4
 800adbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800adc6:	653b      	str	r3, [r7, #80]	; 0x50
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	895b      	ldrh	r3, [r3, #10]
 800adcc:	085b      	lsrs	r3, r3, #1
 800adce:	b29b      	uxth	r3, r3
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	b29a      	uxth	r2, r3
 800add4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f040 8093 	bne.w	800af08 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800adf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01b      	beq.n	800ae36 <USB_ActivateEndpoint+0x526>
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	441a      	add	r2, r3
 800ae20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d01b      	beq.n	800ae86 <USB_ActivateEndpoint+0x576>
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae64:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	441a      	add	r2, r3
 800ae70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9c:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aea4:	873b      	strh	r3, [r7, #56]	; 0x38
 800aea6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aea8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aeac:	873b      	strh	r3, [r7, #56]	; 0x38
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	441a      	add	r2, r3
 800aeb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aeba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	441a      	add	r2, r3
 800aef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aefa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af02:	b29b      	uxth	r3, r3
 800af04:	8013      	strh	r3, [r2, #0]
 800af06:	e0bc      	b.n	800b082 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800af18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d01d      	beq.n	800af60 <USB_ActivateEndpoint+0x650>
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	b29b      	uxth	r3, r3
 800af32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	441a      	add	r2, r3
 800af48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01d      	beq.n	800afb8 <USB_ActivateEndpoint+0x6a8>
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	441a      	add	r2, r3
 800afa0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800afa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	78db      	ldrb	r3, [r3, #3]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d024      	beq.n	800b00a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800afde:	f083 0320 	eor.w	r3, r3, #32
 800afe2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	441a      	add	r2, r3
 800aff0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800affc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b004:	b29b      	uxth	r3, r3
 800b006:	8013      	strh	r3, [r2, #0]
 800b008:	e01d      	b.n	800b046 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	b29b      	uxth	r3, r3
 800b018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b020:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	441a      	add	r2, r3
 800b02e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b03a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b042:	b29b      	uxth	r3, r3
 800b044:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	b29b      	uxth	r3, r3
 800b054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	441a      	add	r2, r3
 800b06a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b06e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07e:	b29b      	uxth	r3, r3
 800b080:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b082:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b086:	4618      	mov	r0, r3
 800b088:	3774      	adds	r7, #116	; 0x74
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr

0800b090 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b090:	b480      	push	{r7}
 800b092:	b08d      	sub	sp, #52	; 0x34
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	7b1b      	ldrb	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f040 808e 	bne.w	800b1c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d044      	beq.n	800b136 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	81bb      	strh	r3, [r7, #12]
 800b0ba:	89bb      	ldrh	r3, [r7, #12]
 800b0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01b      	beq.n	800b0fc <USB_DeactivateEndpoint+0x6c>
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0da:	817b      	strh	r3, [r7, #10]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	441a      	add	r2, r3
 800b0e6:	897b      	ldrh	r3, [r7, #10]
 800b0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b112:	813b      	strh	r3, [r7, #8]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	441a      	add	r2, r3
 800b11e:	893b      	ldrh	r3, [r7, #8]
 800b120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b130:	b29b      	uxth	r3, r3
 800b132:	8013      	strh	r3, [r2, #0]
 800b134:	e192      	b.n	800b45c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	827b      	strh	r3, [r7, #18]
 800b144:	8a7b      	ldrh	r3, [r7, #18]
 800b146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01b      	beq.n	800b186 <USB_DeactivateEndpoint+0xf6>
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b164:	823b      	strh	r3, [r7, #16]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	441a      	add	r2, r3
 800b170:	8a3b      	ldrh	r3, [r7, #16]
 800b172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b182:	b29b      	uxth	r3, r3
 800b184:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29b      	uxth	r3, r3
 800b194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19c:	81fb      	strh	r3, [r7, #14]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	441a      	add	r2, r3
 800b1a8:	89fb      	ldrh	r3, [r7, #14]
 800b1aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	8013      	strh	r3, [r2, #0]
 800b1be:	e14d      	b.n	800b45c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 80a5 	bne.w	800b314 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	843b      	strh	r3, [r7, #32]
 800b1d8:	8c3b      	ldrh	r3, [r7, #32]
 800b1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01b      	beq.n	800b21a <USB_DeactivateEndpoint+0x18a>
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f8:	83fb      	strh	r3, [r7, #30]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	441a      	add	r2, r3
 800b204:	8bfb      	ldrh	r3, [r7, #30]
 800b206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b20a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b20e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b216:	b29b      	uxth	r3, r3
 800b218:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	83bb      	strh	r3, [r7, #28]
 800b228:	8bbb      	ldrh	r3, [r7, #28]
 800b22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01b      	beq.n	800b26a <USB_DeactivateEndpoint+0x1da>
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b248:	837b      	strh	r3, [r7, #26]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	441a      	add	r2, r3
 800b254:	8b7b      	ldrh	r3, [r7, #26]
 800b256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b25a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b25e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b266:	b29b      	uxth	r3, r3
 800b268:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b27c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b280:	833b      	strh	r3, [r7, #24]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	441a      	add	r2, r3
 800b28c:	8b3b      	ldrh	r3, [r7, #24]
 800b28e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b29a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b8:	82fb      	strh	r3, [r7, #22]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	441a      	add	r2, r3
 800b2c4:	8afb      	ldrh	r3, [r7, #22]
 800b2c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f0:	82bb      	strh	r3, [r7, #20]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	441a      	add	r2, r3
 800b2fc:	8abb      	ldrh	r3, [r7, #20]
 800b2fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30e:	b29b      	uxth	r3, r3
 800b310:	8013      	strh	r3, [r2, #0]
 800b312:	e0a3      	b.n	800b45c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01b      	beq.n	800b364 <USB_DeactivateEndpoint+0x2d4>
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b342:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	441a      	add	r2, r3
 800b34e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b360:	b29b      	uxth	r3, r3
 800b362:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b372:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01b      	beq.n	800b3b4 <USB_DeactivateEndpoint+0x324>
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b392:	853b      	strh	r3, [r7, #40]	; 0x28
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	441a      	add	r2, r3
 800b39e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	441a      	add	r2, r3
 800b3d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b402:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	441a      	add	r2, r3
 800b40e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b41c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b420:	b29b      	uxth	r3, r3
 800b422:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	441a      	add	r2, r3
 800b446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b44c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b458:	b29b      	uxth	r3, r3
 800b45a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3734      	adds	r7, #52	; 0x34
 800b462:	46bd      	mov	sp, r7
 800b464:	bc80      	pop	{r7}
 800b466:	4770      	bx	lr

0800b468 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b0c2      	sub	sp, #264	; 0x108
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b476:	6018      	str	r0, [r3, #0]
 800b478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b480:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	f040 86b7 	bne.w	800c202 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699a      	ldr	r2, [r3, #24]
 800b4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d908      	bls.n	800b4c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b4c0:	e007      	b.n	800b4d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	7b1b      	ldrb	r3, [r3, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d13a      	bne.n	800b558 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6959      	ldr	r1, [r3, #20]
 800b4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	88da      	ldrh	r2, [r3, #6]
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b504:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b508:	6800      	ldr	r0, [r0, #0]
 800b50a:	f001 fc9c 	bl	800ce46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	613b      	str	r3, [r7, #16]
 800b51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b528:	b29b      	uxth	r3, r3
 800b52a:	461a      	mov	r2, r3
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	4413      	add	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
 800b532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	011a      	lsls	r2, r3, #4
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	4413      	add	r3, r2
 800b544:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54e:	b29a      	uxth	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	801a      	strh	r2, [r3, #0]
 800b554:	f000 be1f 	b.w	800c196 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	78db      	ldrb	r3, [r3, #3]
 800b564:	2b02      	cmp	r3, #2
 800b566:	f040 8462 	bne.w	800be2e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6a1a      	ldr	r2, [r3, #32]
 800b576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	429a      	cmp	r2, r3
 800b584:	f240 83df 	bls.w	800bd46 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	881b      	ldrh	r3, [r3, #0]
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	441a      	add	r2, r3
 800b5cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	6a1a      	ldr	r2, [r3, #32]
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f4:	1ad2      	subs	r2, r2, r3
 800b5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 81c7 	beq.w	800b9b8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	633b      	str	r3, [r7, #48]	; 0x30
 800b636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	785b      	ldrb	r3, [r3, #1]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d177      	bne.n	800b736 <USB_EPStartXfer+0x2ce>
 800b646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
 800b652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b660:	b29b      	uxth	r3, r3
 800b662:	461a      	mov	r2, r3
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	4413      	add	r3, r2
 800b668:	62bb      	str	r3, [r7, #40]	; 0x28
 800b66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b66e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	011a      	lsls	r2, r3, #4
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	4413      	add	r3, r2
 800b67c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	801a      	strh	r2, [r3, #0]
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b696:	2b3e      	cmp	r3, #62	; 0x3e
 800b698:	d921      	bls.n	800b6de <USB_EPStartXfer+0x276>
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	095b      	lsrs	r3, r3, #5
 800b6a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a8:	f003 031f 	and.w	r3, r3, #31
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <USB_EPStartXfer+0x252>
 800b6b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	029b      	lsls	r3, r3, #10
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	801a      	strh	r2, [r3, #0]
 800b6dc:	e050      	b.n	800b780 <USB_EPStartXfer+0x318>
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <USB_EPStartXfer+0x294>
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	e041      	b.n	800b780 <USB_EPStartXfer+0x318>
 800b6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b700:	085b      	lsrs	r3, r3, #1
 800b702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d004      	beq.n	800b71c <USB_EPStartXfer+0x2b4>
 800b712:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b716:	3301      	adds	r3, #1
 800b718:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	b29a      	uxth	r2, r3
 800b722:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b726:	b29b      	uxth	r3, r3
 800b728:	029b      	lsls	r3, r3, #10
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4313      	orrs	r3, r2
 800b72e:	b29a      	uxth	r2, r3
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e024      	b.n	800b780 <USB_EPStartXfer+0x318>
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	785b      	ldrb	r3, [r3, #1]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d11c      	bne.n	800b780 <USB_EPStartXfer+0x318>
 800b746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b754:	b29b      	uxth	r3, r3
 800b756:	461a      	mov	r2, r3
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	4413      	add	r3, r2
 800b75c:	633b      	str	r3, [r7, #48]	; 0x30
 800b75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	011a      	lsls	r2, r3, #4
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	4413      	add	r3, r2
 800b770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	895b      	ldrh	r3, [r3, #10]
 800b78c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6959      	ldr	r1, [r3, #20]
 800b79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b7a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7ae:	6800      	ldr	r0, [r0, #0]
 800b7b0:	f001 fb49 	bl	800ce46 <USB_WritePMA>
            ep->xfer_buff += len;
 800b7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	695a      	ldr	r2, [r3, #20]
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c4:	441a      	add	r2, r3
 800b7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6a1a      	ldr	r2, [r3, #32]
 800b7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d90f      	bls.n	800b80e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6a1a      	ldr	r2, [r3, #32]
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	621a      	str	r2, [r3, #32]
 800b80c:	e00e      	b.n	800b82c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2200      	movs	r2, #0
 800b82a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	785b      	ldrb	r3, [r3, #1]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d177      	bne.n	800b92c <USB_EPStartXfer+0x4c4>
 800b83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	61bb      	str	r3, [r7, #24]
 800b848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b856:	b29b      	uxth	r3, r3
 800b858:	461a      	mov	r2, r3
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	4413      	add	r3, r2
 800b85e:	61bb      	str	r3, [r7, #24]
 800b860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	011a      	lsls	r2, r3, #4
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	4413      	add	r3, r2
 800b872:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b882:	b29a      	uxth	r2, r3
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	801a      	strh	r2, [r3, #0]
 800b888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88c:	2b3e      	cmp	r3, #62	; 0x3e
 800b88e:	d921      	bls.n	800b8d4 <USB_EPStartXfer+0x46c>
 800b890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b894:	095b      	lsrs	r3, r3, #5
 800b896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89e:	f003 031f 	and.w	r3, r3, #31
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d104      	bne.n	800b8b0 <USB_EPStartXfer+0x448>
 800b8a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	029b      	lsls	r3, r3, #10
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8cc:	b29a      	uxth	r2, r3
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	801a      	strh	r2, [r3, #0]
 800b8d2:	e056      	b.n	800b982 <USB_EPStartXfer+0x51a>
 800b8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <USB_EPStartXfer+0x48a>
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	801a      	strh	r2, [r3, #0]
 800b8f0:	e047      	b.n	800b982 <USB_EPStartXfer+0x51a>
 800b8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f6:	085b      	lsrs	r3, r3, #1
 800b8f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <USB_EPStartXfer+0x4aa>
 800b908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b90c:	3301      	adds	r3, #1
 800b90e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	b29a      	uxth	r2, r3
 800b918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	029b      	lsls	r3, r3, #10
 800b920:	b29b      	uxth	r3, r3
 800b922:	4313      	orrs	r3, r2
 800b924:	b29a      	uxth	r2, r3
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	801a      	strh	r2, [r3, #0]
 800b92a:	e02a      	b.n	800b982 <USB_EPStartXfer+0x51a>
 800b92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	785b      	ldrb	r3, [r3, #1]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d122      	bne.n	800b982 <USB_EPStartXfer+0x51a>
 800b93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	623b      	str	r3, [r7, #32]
 800b948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b956:	b29b      	uxth	r3, r3
 800b958:	461a      	mov	r2, r3
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	4413      	add	r3, r2
 800b95e:	623b      	str	r3, [r7, #32]
 800b960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	011a      	lsls	r2, r3, #4
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	4413      	add	r3, r2
 800b972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	891b      	ldrh	r3, [r3, #8]
 800b98e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	6959      	ldr	r1, [r3, #20]
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9b0:	6800      	ldr	r0, [r0, #0]
 800b9b2:	f001 fa48 	bl	800ce46 <USB_WritePMA>
 800b9b6:	e3ee      	b.n	800c196 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	785b      	ldrb	r3, [r3, #1]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d177      	bne.n	800bab8 <USB_EPStartXfer+0x650>
 800b9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9e8:	4413      	add	r3, r2
 800b9ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	011a      	lsls	r2, r3, #4
 800b9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba02:	647b      	str	r3, [r7, #68]	; 0x44
 800ba04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba12:	801a      	strh	r2, [r3, #0]
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	2b3e      	cmp	r3, #62	; 0x3e
 800ba1a:	d921      	bls.n	800ba60 <USB_EPStartXfer+0x5f8>
 800ba1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba20:	095b      	lsrs	r3, r3, #5
 800ba22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2a:	f003 031f 	and.w	r3, r3, #31
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d104      	bne.n	800ba3c <USB_EPStartXfer+0x5d4>
 800ba32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba36:	3b01      	subs	r3, #1
 800ba38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	029b      	lsls	r3, r3, #10
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5c:	801a      	strh	r2, [r3, #0]
 800ba5e:	e056      	b.n	800bb0e <USB_EPStartXfer+0x6a6>
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10a      	bne.n	800ba7e <USB_EPStartXfer+0x616>
 800ba68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7a:	801a      	strh	r2, [r3, #0]
 800ba7c:	e047      	b.n	800bb0e <USB_EPStartXfer+0x6a6>
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba82:	085b      	lsrs	r3, r3, #1
 800ba84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d004      	beq.n	800ba9e <USB_EPStartXfer+0x636>
 800ba94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba98:	3301      	adds	r3, #1
 800ba9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	029b      	lsls	r3, r3, #10
 800baac:	b29b      	uxth	r3, r3
 800baae:	4313      	orrs	r3, r2
 800bab0:	b29a      	uxth	r2, r3
 800bab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bab4:	801a      	strh	r2, [r3, #0]
 800bab6:	e02a      	b.n	800bb0e <USB_EPStartXfer+0x6a6>
 800bab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800babc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	785b      	ldrb	r3, [r3, #1]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d122      	bne.n	800bb0e <USB_EPStartXfer+0x6a6>
 800bac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bacc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	653b      	str	r3, [r7, #80]	; 0x50
 800bad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae8:	4413      	add	r3, r2
 800baea:	653b      	str	r3, [r7, #80]	; 0x50
 800baec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	011a      	lsls	r2, r3, #4
 800bafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bafc:	4413      	add	r3, r2
 800bafe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bb0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	891b      	ldrh	r3, [r3, #8]
 800bb1a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6959      	ldr	r1, [r3, #20]
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb34:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb38:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb3c:	6800      	ldr	r0, [r0, #0]
 800bb3e:	f001 f982 	bl	800ce46 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	695a      	ldr	r2, [r3, #20]
 800bb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb52:	441a      	add	r2, r3
 800bb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6a1a      	ldr	r2, [r3, #32]
 800bb6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d90f      	bls.n	800bb9c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bb7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6a1a      	ldr	r2, [r3, #32]
 800bb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8c:	1ad2      	subs	r2, r2, r3
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	621a      	str	r2, [r3, #32]
 800bb9a:	e00e      	b.n	800bbba <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bb9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bbac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	785b      	ldrb	r3, [r3, #1]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d177      	bne.n	800bcc6 <USB_EPStartXfer+0x85e>
 800bbd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	4413      	add	r3, r2
 800bbf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	011a      	lsls	r2, r3, #4
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	4413      	add	r3, r2
 800bc0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
 800bc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	801a      	strh	r2, [r3, #0]
 800bc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc26:	2b3e      	cmp	r3, #62	; 0x3e
 800bc28:	d921      	bls.n	800bc6e <USB_EPStartXfer+0x806>
 800bc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2e:	095b      	lsrs	r3, r3, #5
 800bc30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc38:	f003 031f 	and.w	r3, r3, #31
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d104      	bne.n	800bc4a <USB_EPStartXfer+0x7e2>
 800bc40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc44:	3b01      	subs	r3, #1
 800bc46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	029b      	lsls	r3, r3, #10
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6a:	801a      	strh	r2, [r3, #0]
 800bc6c:	e050      	b.n	800bd10 <USB_EPStartXfer+0x8a8>
 800bc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <USB_EPStartXfer+0x824>
 800bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc88:	801a      	strh	r2, [r3, #0]
 800bc8a:	e041      	b.n	800bd10 <USB_EPStartXfer+0x8a8>
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc90:	085b      	lsrs	r3, r3, #1
 800bc92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d004      	beq.n	800bcac <USB_EPStartXfer+0x844>
 800bca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca6:	3301      	adds	r3, #1
 800bca8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	029b      	lsls	r3, r3, #10
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc2:	801a      	strh	r2, [r3, #0]
 800bcc4:	e024      	b.n	800bd10 <USB_EPStartXfer+0x8a8>
 800bcc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	785b      	ldrb	r3, [r3, #1]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d11c      	bne.n	800bd10 <USB_EPStartXfer+0x8a8>
 800bcd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcea:	4413      	add	r3, r2
 800bcec:	643b      	str	r3, [r7, #64]	; 0x40
 800bcee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	011a      	lsls	r2, r3, #4
 800bcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcfe:	4413      	add	r3, r2
 800bd00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bd04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bd10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	895b      	ldrh	r3, [r3, #10]
 800bd1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	6959      	ldr	r1, [r3, #20]
 800bd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd3e:	6800      	ldr	r0, [r0, #0]
 800bd40:	f001 f881 	bl	800ce46 <USB_WritePMA>
 800bd44:	e227      	b.n	800c196 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bd46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bd56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bd78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	441a      	add	r2, r3
 800bd9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bd9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bda2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bda6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd2:	4413      	add	r3, r2
 800bdd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	011a      	lsls	r2, r3, #4
 800bde4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bde6:	4413      	add	r3, r2
 800bde8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bdec:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdf6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	891b      	ldrh	r3, [r3, #8]
 800be04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6959      	ldr	r1, [r3, #20]
 800be14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be18:	b29b      	uxth	r3, r3
 800be1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be26:	6800      	ldr	r0, [r0, #0]
 800be28:	f001 f80d 	bl	800ce46 <USB_WritePMA>
 800be2c:	e1b3      	b.n	800c196 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800be2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6a1a      	ldr	r2, [r3, #32]
 800be3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 80c6 	beq.w	800c000 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	673b      	str	r3, [r7, #112]	; 0x70
 800be80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	785b      	ldrb	r3, [r3, #1]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d177      	bne.n	800bf80 <USB_EPStartXfer+0xb18>
 800be90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800be9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beaa:	b29b      	uxth	r3, r3
 800beac:	461a      	mov	r2, r3
 800beae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beb0:	4413      	add	r3, r2
 800beb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800beb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	011a      	lsls	r2, r3, #4
 800bec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec4:	4413      	add	r3, r2
 800bec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800beca:	667b      	str	r3, [r7, #100]	; 0x64
 800becc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beda:	801a      	strh	r2, [r3, #0]
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee0:	2b3e      	cmp	r3, #62	; 0x3e
 800bee2:	d921      	bls.n	800bf28 <USB_EPStartXfer+0xac0>
 800bee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee8:	095b      	lsrs	r3, r3, #5
 800beea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800beee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef2:	f003 031f 	and.w	r3, r3, #31
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d104      	bne.n	800bf04 <USB_EPStartXfer+0xa9c>
 800befa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800befe:	3b01      	subs	r3, #1
 800bf00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	029b      	lsls	r3, r3, #10
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	4313      	orrs	r3, r2
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf24:	801a      	strh	r2, [r3, #0]
 800bf26:	e050      	b.n	800bfca <USB_EPStartXfer+0xb62>
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10a      	bne.n	800bf46 <USB_EPStartXfer+0xade>
 800bf30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf42:	801a      	strh	r2, [r3, #0]
 800bf44:	e041      	b.n	800bfca <USB_EPStartXfer+0xb62>
 800bf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4a:	085b      	lsrs	r3, r3, #1
 800bf4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf54:	f003 0301 	and.w	r3, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d004      	beq.n	800bf66 <USB_EPStartXfer+0xafe>
 800bf5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf60:	3301      	adds	r3, #1
 800bf62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	029b      	lsls	r3, r3, #10
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	4313      	orrs	r3, r2
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf7c:	801a      	strh	r2, [r3, #0]
 800bf7e:	e024      	b.n	800bfca <USB_EPStartXfer+0xb62>
 800bf80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d11c      	bne.n	800bfca <USB_EPStartXfer+0xb62>
 800bf90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfa4:	4413      	add	r3, r2
 800bfa6:	673b      	str	r3, [r7, #112]	; 0x70
 800bfa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	011a      	lsls	r2, r3, #4
 800bfb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfb8:	4413      	add	r3, r2
 800bfba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bfca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	895b      	ldrh	r3, [r3, #10]
 800bfd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	6959      	ldr	r1, [r3, #20]
 800bfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bff0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bff4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bff8:	6800      	ldr	r0, [r0, #0]
 800bffa:	f000 ff24 	bl	800ce46 <USB_WritePMA>
 800bffe:	e0ca      	b.n	800c196 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d177      	bne.n	800c100 <USB_EPStartXfer+0xc98>
 800c010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	461a      	mov	r2, r3
 800c02e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c030:	4413      	add	r3, r2
 800c032:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	011a      	lsls	r2, r3, #4
 800c042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c044:	4413      	add	r3, r2
 800c046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c04a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c04c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	b29b      	uxth	r3, r3
 800c052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c056:	b29a      	uxth	r2, r3
 800c058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c05a:	801a      	strh	r2, [r3, #0]
 800c05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c060:	2b3e      	cmp	r3, #62	; 0x3e
 800c062:	d921      	bls.n	800c0a8 <USB_EPStartXfer+0xc40>
 800c064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c068:	095b      	lsrs	r3, r3, #5
 800c06a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c072:	f003 031f 	and.w	r3, r3, #31
 800c076:	2b00      	cmp	r3, #0
 800c078:	d104      	bne.n	800c084 <USB_EPStartXfer+0xc1c>
 800c07a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c07e:	3b01      	subs	r3, #1
 800c080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	b29a      	uxth	r2, r3
 800c08a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c08e:	b29b      	uxth	r3, r3
 800c090:	029b      	lsls	r3, r3, #10
 800c092:	b29b      	uxth	r3, r3
 800c094:	4313      	orrs	r3, r2
 800c096:	b29b      	uxth	r3, r3
 800c098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a4:	801a      	strh	r2, [r3, #0]
 800c0a6:	e05c      	b.n	800c162 <USB_EPStartXfer+0xcfa>
 800c0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10a      	bne.n	800c0c6 <USB_EPStartXfer+0xc5e>
 800c0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c2:	801a      	strh	r2, [r3, #0]
 800c0c4:	e04d      	b.n	800c162 <USB_EPStartXfer+0xcfa>
 800c0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ca:	085b      	lsrs	r3, r3, #1
 800c0cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <USB_EPStartXfer+0xc7e>
 800c0dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	029b      	lsls	r3, r3, #10
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0fc:	801a      	strh	r2, [r3, #0]
 800c0fe:	e030      	b.n	800c162 <USB_EPStartXfer+0xcfa>
 800c100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d128      	bne.n	800c162 <USB_EPStartXfer+0xcfa>
 800c110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	461a      	mov	r2, r3
 800c130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c134:	4413      	add	r3, r2
 800c136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c13e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	011a      	lsls	r2, r3, #4
 800c148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c14c:	4413      	add	r3, r2
 800c14e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c160:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	891b      	ldrh	r3, [r3, #8]
 800c16e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6959      	ldr	r1, [r3, #20]
 800c17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c182:	b29b      	uxth	r3, r3
 800c184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c188:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c18c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c190:	6800      	ldr	r0, [r0, #0]
 800c192:	f000 fe58 	bl	800ce46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c19a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1bc:	817b      	strh	r3, [r7, #10]
 800c1be:	897b      	ldrh	r3, [r7, #10]
 800c1c0:	f083 0310 	eor.w	r3, r3, #16
 800c1c4:	817b      	strh	r3, [r7, #10]
 800c1c6:	897b      	ldrh	r3, [r7, #10]
 800c1c8:	f083 0320 	eor.w	r3, r3, #32
 800c1cc:	817b      	strh	r3, [r7, #10]
 800c1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	441a      	add	r2, r3
 800c1e8:	897b      	ldrh	r3, [r7, #10]
 800c1ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	8013      	strh	r3, [r2, #0]
 800c1fe:	f000 bcde 	b.w	800cbbe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	7b1b      	ldrb	r3, [r3, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f040 80bb 	bne.w	800c38a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	699a      	ldr	r2, [r3, #24]
 800c220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d917      	bls.n	800c260 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	699a      	ldr	r2, [r3, #24]
 800c24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c250:	1ad2      	subs	r2, r2, r3
 800c252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	619a      	str	r2, [r3, #24]
 800c25e:	e00e      	b.n	800c27e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	461a      	mov	r2, r3
 800c29e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	011a      	lsls	r2, r3, #4
 800c2b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c2c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2d6:	801a      	strh	r2, [r3, #0]
 800c2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2dc:	2b3e      	cmp	r3, #62	; 0x3e
 800c2de:	d924      	bls.n	800c32a <USB_EPStartXfer+0xec2>
 800c2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e4:	095b      	lsrs	r3, r3, #5
 800c2e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ee:	f003 031f 	and.w	r3, r3, #31
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d104      	bne.n	800c300 <USB_EPStartXfer+0xe98>
 800c2f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	b29a      	uxth	r2, r3
 800c308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	029b      	lsls	r3, r3, #10
 800c310:	b29b      	uxth	r3, r3
 800c312:	4313      	orrs	r3, r2
 800c314:	b29b      	uxth	r3, r3
 800c316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c31a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c31e:	b29a      	uxth	r2, r3
 800c320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c324:	801a      	strh	r2, [r3, #0]
 800c326:	f000 bc10 	b.w	800cb4a <USB_EPStartXfer+0x16e2>
 800c32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10c      	bne.n	800c34c <USB_EPStartXfer+0xee4>
 800c332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c33e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c342:	b29a      	uxth	r2, r3
 800c344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c348:	801a      	strh	r2, [r3, #0]
 800c34a:	e3fe      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
 800c34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c350:	085b      	lsrs	r3, r3, #1
 800c352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <USB_EPStartXfer+0xf04>
 800c362:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c366:	3301      	adds	r3, #1
 800c368:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c36c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	b29a      	uxth	r2, r3
 800c374:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c378:	b29b      	uxth	r3, r3
 800c37a:	029b      	lsls	r3, r3, #10
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	4313      	orrs	r3, r2
 800c380:	b29a      	uxth	r2, r3
 800c382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c386:	801a      	strh	r2, [r3, #0]
 800c388:	e3df      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c38e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	78db      	ldrb	r3, [r3, #3]
 800c396:	2b02      	cmp	r3, #2
 800c398:	f040 8218 	bne.w	800c7cc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f040 809d 	bne.w	800c4e8 <USB_EPStartXfer+0x1080>
 800c3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	011a      	lsls	r2, r3, #4
 800c3e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c3f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c400:	b29a      	uxth	r2, r3
 800c402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c406:	801a      	strh	r2, [r3, #0]
 800c408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	2b3e      	cmp	r3, #62	; 0x3e
 800c416:	d92b      	bls.n	800c470 <USB_EPStartXfer+0x1008>
 800c418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	095b      	lsrs	r3, r3, #5
 800c426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	f003 031f 	and.w	r3, r3, #31
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d104      	bne.n	800c448 <USB_EPStartXfer+0xfe0>
 800c43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c442:	3b01      	subs	r3, #1
 800c444:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	b29a      	uxth	r2, r3
 800c450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c454:	b29b      	uxth	r3, r3
 800c456:	029b      	lsls	r3, r3, #10
 800c458:	b29b      	uxth	r3, r3
 800c45a:	4313      	orrs	r3, r2
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c466:	b29a      	uxth	r2, r3
 800c468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c46c:	801a      	strh	r2, [r3, #0]
 800c46e:	e070      	b.n	800c552 <USB_EPStartXfer+0x10ea>
 800c470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10c      	bne.n	800c49a <USB_EPStartXfer+0x1032>
 800c480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	b29b      	uxth	r3, r3
 800c488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c48c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c490:	b29a      	uxth	r2, r3
 800c492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c496:	801a      	strh	r2, [r3, #0]
 800c498:	e05b      	b.n	800c552 <USB_EPStartXfer+0x10ea>
 800c49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	085b      	lsrs	r3, r3, #1
 800c4a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <USB_EPStartXfer+0x1062>
 800c4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	029b      	lsls	r3, r3, #10
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4e4:	801a      	strh	r2, [r3, #0]
 800c4e6:	e034      	b.n	800c552 <USB_EPStartXfer+0x10ea>
 800c4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	785b      	ldrb	r3, [r3, #1]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d12c      	bne.n	800c552 <USB_EPStartXfer+0x10ea>
 800c4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c50a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c514:	b29b      	uxth	r3, r3
 800c516:	461a      	mov	r2, r3
 800c518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c51c:	4413      	add	r3, r2
 800c51e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	011a      	lsls	r2, r3, #4
 800c530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c534:	4413      	add	r3, r2
 800c536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c53a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c550:	801a      	strh	r2, [r3, #0]
 800c552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	785b      	ldrb	r3, [r3, #1]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f040 809d 	bne.w	800c6ac <USB_EPStartXfer+0x1244>
 800c572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c58e:	b29b      	uxth	r3, r3
 800c590:	461a      	mov	r2, r3
 800c592:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c596:	4413      	add	r3, r2
 800c598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	011a      	lsls	r2, r3, #4
 800c5aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c5b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ca:	801a      	strh	r2, [r3, #0]
 800c5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	2b3e      	cmp	r3, #62	; 0x3e
 800c5da:	d92b      	bls.n	800c634 <USB_EPStartXfer+0x11cc>
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	095b      	lsrs	r3, r3, #5
 800c5ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	f003 031f 	and.w	r3, r3, #31
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d104      	bne.n	800c60c <USB_EPStartXfer+0x11a4>
 800c602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c606:	3b01      	subs	r3, #1
 800c608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c60c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29a      	uxth	r2, r3
 800c614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c618:	b29b      	uxth	r3, r3
 800c61a:	029b      	lsls	r3, r3, #10
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	4313      	orrs	r3, r2
 800c620:	b29b      	uxth	r3, r3
 800c622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c630:	801a      	strh	r2, [r3, #0]
 800c632:	e069      	b.n	800c708 <USB_EPStartXfer+0x12a0>
 800c634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10c      	bne.n	800c65e <USB_EPStartXfer+0x11f6>
 800c644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c654:	b29a      	uxth	r2, r3
 800c656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c65a:	801a      	strh	r2, [r3, #0]
 800c65c:	e054      	b.n	800c708 <USB_EPStartXfer+0x12a0>
 800c65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	085b      	lsrs	r3, r3, #1
 800c66c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b00      	cmp	r3, #0
 800c682:	d004      	beq.n	800c68e <USB_EPStartXfer+0x1226>
 800c684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c688:	3301      	adds	r3, #1
 800c68a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c68e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	b29a      	uxth	r2, r3
 800c696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	029b      	lsls	r3, r3, #10
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6a8:	801a      	strh	r2, [r3, #0]
 800c6aa:	e02d      	b.n	800c708 <USB_EPStartXfer+0x12a0>
 800c6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	785b      	ldrb	r3, [r3, #1]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d125      	bne.n	800c708 <USB_EPStartXfer+0x12a0>
 800c6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	011a      	lsls	r2, r3, #4
 800c6e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c6f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c6f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	b29a      	uxth	r2, r3
 800c702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c706:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8218 	beq.w	800cb4a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c73a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c73e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c742:	2b00      	cmp	r3, #0
 800c744:	d005      	beq.n	800c752 <USB_EPStartXfer+0x12ea>
 800c746:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10d      	bne.n	800c76e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f040 81f5 	bne.w	800cb4a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c760:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f040 81ee 	bne.w	800cb4a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c794:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c79c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	441a      	add	r2, r3
 800c7b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c7b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	8013      	strh	r3, [r2, #0]
 800c7ca:	e1be      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	78db      	ldrb	r3, [r3, #3]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	f040 81b4 	bne.w	800cb46 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	699a      	ldr	r2, [r3, #24]
 800c7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d917      	bls.n	800c82a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	699a      	ldr	r2, [r3, #24]
 800c816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81a:	1ad2      	subs	r2, r2, r3
 800c81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	619a      	str	r2, [r3, #24]
 800c828:	e00e      	b.n	800c848 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2200      	movs	r2, #0
 800c846:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c84c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f040 8085 	bne.w	800c964 <USB_EPStartXfer+0x14fc>
 800c85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c85e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c876:	b29b      	uxth	r3, r3
 800c878:	461a      	mov	r2, r3
 800c87a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c87e:	4413      	add	r3, r2
 800c880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	011a      	lsls	r2, r3, #4
 800c892:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c896:	4413      	add	r3, r2
 800c898:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c89c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8b2:	801a      	strh	r2, [r3, #0]
 800c8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8b8:	2b3e      	cmp	r3, #62	; 0x3e
 800c8ba:	d923      	bls.n	800c904 <USB_EPStartXfer+0x149c>
 800c8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c0:	095b      	lsrs	r3, r3, #5
 800c8c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ca:	f003 031f 	and.w	r3, r3, #31
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d104      	bne.n	800c8dc <USB_EPStartXfer+0x1474>
 800c8d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	029b      	lsls	r3, r3, #10
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c900:	801a      	strh	r2, [r3, #0]
 800c902:	e060      	b.n	800c9c6 <USB_EPStartXfer+0x155e>
 800c904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10c      	bne.n	800c926 <USB_EPStartXfer+0x14be>
 800c90c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c922:	801a      	strh	r2, [r3, #0]
 800c924:	e04f      	b.n	800c9c6 <USB_EPStartXfer+0x155e>
 800c926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92a:	085b      	lsrs	r3, r3, #1
 800c92c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <USB_EPStartXfer+0x14de>
 800c93c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c940:	3301      	adds	r3, #1
 800c942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c952:	b29b      	uxth	r3, r3
 800c954:	029b      	lsls	r3, r3, #10
 800c956:	b29b      	uxth	r3, r3
 800c958:	4313      	orrs	r3, r2
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c960:	801a      	strh	r2, [r3, #0]
 800c962:	e030      	b.n	800c9c6 <USB_EPStartXfer+0x155e>
 800c964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	785b      	ldrb	r3, [r3, #1]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d128      	bne.n	800c9c6 <USB_EPStartXfer+0x155e>
 800c974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c990:	b29b      	uxth	r3, r3
 800c992:	461a      	mov	r2, r3
 800c994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c998:	4413      	add	r3, r2
 800c99a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	011a      	lsls	r2, r3, #4
 800c9ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c9b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c9c4:	801a      	strh	r2, [r3, #0]
 800c9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	785b      	ldrb	r3, [r3, #1]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f040 8085 	bne.w	800caf0 <USB_EPStartXfer+0x1688>
 800c9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	011a      	lsls	r2, r3, #4
 800ca1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca22:	4413      	add	r3, r2
 800ca24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ca28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca30:	881b      	ldrh	r3, [r3, #0]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca38:	b29a      	uxth	r2, r3
 800ca3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca3e:	801a      	strh	r2, [r3, #0]
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca44:	2b3e      	cmp	r3, #62	; 0x3e
 800ca46:	d923      	bls.n	800ca90 <USB_EPStartXfer+0x1628>
 800ca48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca4c:	095b      	lsrs	r3, r3, #5
 800ca4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca56:	f003 031f 	and.w	r3, r3, #31
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d104      	bne.n	800ca68 <USB_EPStartXfer+0x1600>
 800ca5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca62:	3b01      	subs	r3, #1
 800ca64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	029b      	lsls	r3, r3, #10
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca8c:	801a      	strh	r2, [r3, #0]
 800ca8e:	e05c      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
 800ca90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <USB_EPStartXfer+0x164a>
 800ca98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caae:	801a      	strh	r2, [r3, #0]
 800cab0:	e04b      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
 800cab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab6:	085b      	lsrs	r3, r3, #1
 800cab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d004      	beq.n	800cad2 <USB_EPStartXfer+0x166a>
 800cac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cacc:	3301      	adds	r3, #1
 800cace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cad6:	881b      	ldrh	r3, [r3, #0]
 800cad8:	b29a      	uxth	r2, r3
 800cada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cade:	b29b      	uxth	r3, r3
 800cae0:	029b      	lsls	r3, r3, #10
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	4313      	orrs	r3, r2
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caec:	801a      	strh	r2, [r3, #0]
 800caee:	e02c      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
 800caf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	785b      	ldrb	r3, [r3, #1]
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d124      	bne.n	800cb4a <USB_EPStartXfer+0x16e2>
 800cb00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	461a      	mov	r2, r3
 800cb12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb16:	4413      	add	r3, r2
 800cb18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	011a      	lsls	r2, r3, #4
 800cb2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb2e:	4413      	add	r3, r2
 800cb30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cb34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb42:	801a      	strh	r2, [r3, #0]
 800cb44:	e001      	b.n	800cb4a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e03a      	b.n	800cbc0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	441a      	add	r2, r3
 800cba6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cbaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b085      	sub	sp, #20
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	785b      	ldrb	r3, [r3, #1]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d020      	beq.n	800cc1e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbf2:	81bb      	strh	r3, [r7, #12]
 800cbf4:	89bb      	ldrh	r3, [r7, #12]
 800cbf6:	f083 0310 	eor.w	r3, r3, #16
 800cbfa:	81bb      	strh	r3, [r7, #12]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	441a      	add	r2, r3
 800cc06:	89bb      	ldrh	r3, [r7, #12]
 800cc08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	8013      	strh	r3, [r2, #0]
 800cc1c:	e01f      	b.n	800cc5e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc34:	81fb      	strh	r3, [r7, #14]
 800cc36:	89fb      	ldrh	r3, [r7, #14]
 800cc38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc3c:	81fb      	strh	r3, [r7, #14]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	441a      	add	r2, r3
 800cc48:	89fb      	ldrh	r3, [r7, #14]
 800cc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc5e:	2300      	movs	r3, #0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bc80      	pop	{r7}
 800cc68:	4770      	bx	lr

0800cc6a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b087      	sub	sp, #28
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	7b1b      	ldrb	r3, [r3, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f040 809d 	bne.w	800cdb8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	785b      	ldrb	r3, [r3, #1]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d04c      	beq.n	800cd20 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4413      	add	r3, r2
 800cc90:	881b      	ldrh	r3, [r3, #0]
 800cc92:	823b      	strh	r3, [r7, #16]
 800cc94:	8a3b      	ldrh	r3, [r7, #16]
 800cc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d01b      	beq.n	800ccd6 <USB_EPClearStall+0x6c>
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	881b      	ldrh	r3, [r3, #0]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccb4:	81fb      	strh	r3, [r7, #14]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	441a      	add	r2, r3
 800ccc0:	89fb      	ldrh	r3, [r7, #14]
 800ccc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	78db      	ldrb	r3, [r3, #3]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d06c      	beq.n	800cdb8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	881b      	ldrh	r3, [r3, #0]
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccf4:	81bb      	strh	r3, [r7, #12]
 800ccf6:	89bb      	ldrh	r3, [r7, #12]
 800ccf8:	f083 0320 	eor.w	r3, r3, #32
 800ccfc:	81bb      	strh	r3, [r7, #12]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	441a      	add	r2, r3
 800cd08:	89bb      	ldrh	r3, [r7, #12]
 800cd0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	8013      	strh	r3, [r2, #0]
 800cd1e:	e04b      	b.n	800cdb8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	82fb      	strh	r3, [r7, #22]
 800cd2e:	8afb      	ldrh	r3, [r7, #22]
 800cd30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01b      	beq.n	800cd70 <USB_EPClearStall+0x106>
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4e:	82bb      	strh	r3, [r7, #20]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	441a      	add	r2, r3
 800cd5a:	8abb      	ldrh	r3, [r7, #20]
 800cd5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd86:	827b      	strh	r3, [r7, #18]
 800cd88:	8a7b      	ldrh	r3, [r7, #18]
 800cd8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd8e:	827b      	strh	r3, [r7, #18]
 800cd90:	8a7b      	ldrh	r3, [r7, #18]
 800cd92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cd96:	827b      	strh	r3, [r7, #18]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	441a      	add	r2, r3
 800cda2:	8a7b      	ldrh	r3, [r7, #18]
 800cda4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cda8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bc80      	pop	{r7}
 800cdc2:	4770      	bx	lr

0800cdc4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d103      	bne.n	800cdde <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2280      	movs	r2, #128	; 0x80
 800cdda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bc80      	pop	{r7}
 800cde8:	4770      	bx	lr

0800cdea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bc80      	pop	{r7}
 800cdfc:	4770      	bx	lr

0800cdfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bc80      	pop	{r7}
 800ce10:	4770      	bx	lr

0800ce12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b085      	sub	sp, #20
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce24:	68fb      	ldr	r3, [r7, #12]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bc80      	pop	{r7}
 800ce2e:	4770      	bx	lr

0800ce30 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bc80      	pop	{r7}
 800ce44:	4770      	bx	lr

0800ce46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b08b      	sub	sp, #44	; 0x2c
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	4611      	mov	r1, r2
 800ce52:	461a      	mov	r2, r3
 800ce54:	460b      	mov	r3, r1
 800ce56:	80fb      	strh	r3, [r7, #6]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce5c:	88bb      	ldrh	r3, [r7, #4]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	085b      	lsrs	r3, r3, #1
 800ce62:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce6c:	88fb      	ldrh	r3, [r7, #6]
 800ce6e:	005a      	lsls	r2, r3, #1
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	4413      	add	r3, r2
 800ce74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce78:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce7e:	e01e      	b.n	800cebe <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	021b      	lsls	r3, r3, #8
 800ce8e:	b21a      	sxth	r2, r3
 800ce90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	b21b      	sxth	r3, r3
 800ce98:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	8a7a      	ldrh	r2, [r7, #18]
 800ce9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	3302      	adds	r3, #2
 800cea4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	3302      	adds	r3, #2
 800ceaa:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	3b01      	subs	r3, #1
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1dd      	bne.n	800ce80 <USB_WritePMA+0x3a>
  }
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop
 800cec8:	372c      	adds	r7, #44	; 0x2c
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bc80      	pop	{r7}
 800cece:	4770      	bx	lr

0800ced0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b08b      	sub	sp, #44	; 0x2c
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	4611      	mov	r1, r2
 800cedc:	461a      	mov	r2, r3
 800cede:	460b      	mov	r3, r1
 800cee0:	80fb      	strh	r3, [r7, #6]
 800cee2:	4613      	mov	r3, r2
 800cee4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cee6:	88bb      	ldrh	r3, [r7, #4]
 800cee8:	085b      	lsrs	r3, r3, #1
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cef6:	88fb      	ldrh	r3, [r7, #6]
 800cef8:	005a      	lsls	r2, r3, #1
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf02:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
 800cf08:	e01b      	b.n	800cf42 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	3302      	adds	r3, #2
 800cf16:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	3301      	adds	r3, #1
 800cf24:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	0a1b      	lsrs	r3, r3, #8
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	3301      	adds	r3, #1
 800cf34:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	3302      	adds	r3, #2
 800cf3a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	627b      	str	r3, [r7, #36]	; 0x24
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1e0      	bne.n	800cf0a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cf48:	88bb      	ldrh	r3, [r7, #4]
 800cf4a:	f003 0301 	and.w	r3, r3, #1
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d007      	beq.n	800cf64 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	69fb      	ldr	r3, [r7, #28]
 800cf62:	701a      	strb	r2, [r3, #0]
  }
}
 800cf64:	bf00      	nop
 800cf66:	372c      	adds	r7, #44	; 0x2c
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bc80      	pop	{r7}
 800cf6c:	4770      	bx	lr
	...

0800cf70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cf74:	4904      	ldr	r1, [pc, #16]	; (800cf88 <MX_FATFS_Init+0x18>)
 800cf76:	4805      	ldr	r0, [pc, #20]	; (800cf8c <MX_FATFS_Init+0x1c>)
 800cf78:	f004 f866 	bl	8011048 <FATFS_LinkDriver>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4b03      	ldr	r3, [pc, #12]	; (800cf90 <MX_FATFS_Init+0x20>)
 800cf82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cf84:	bf00      	nop
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	20000e64 	.word	0x20000e64
 800cf8c:	0802dea4 	.word	0x0802dea4
 800cf90:	20000e60 	.word	0x20000e60

0800cf94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cf98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bc80      	pop	{r7}
 800cfa0:	4770      	bx	lr
	...

0800cfa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cfae:	f000 f879 	bl	800d0a4 <BSP_SD_IsDetected>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d001      	beq.n	800cfbc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e012      	b.n	800cfe2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cfbc:	480b      	ldr	r0, [pc, #44]	; (800cfec <BSP_SD_Init+0x48>)
 800cfbe:	f7fa fd59 	bl	8007a74 <HAL_SD_Init>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d109      	bne.n	800cfe0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cfcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cfd0:	4806      	ldr	r0, [pc, #24]	; (800cfec <BSP_SD_Init+0x48>)
 800cfd2:	f7fb fb33 	bl	800863c <HAL_SD_ConfigWideBusOperation>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cfe0:	79fb      	ldrb	r3, [r7, #7]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20000c88 	.word	0x20000c88

0800cff0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
 800cffc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	68f9      	ldr	r1, [r7, #12]
 800d00c:	4806      	ldr	r0, [pc, #24]	; (800d028 <BSP_SD_ReadBlocks+0x38>)
 800d00e:	f7fa fde1 	bl	8007bd4 <HAL_SD_ReadBlocks>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d01c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	20000c88 	.word	0x20000c88

0800d02c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af02      	add	r7, sp, #8
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	68f9      	ldr	r1, [r7, #12]
 800d048:	4806      	ldr	r0, [pc, #24]	; (800d064 <BSP_SD_WriteBlocks+0x38>)
 800d04a:	f7fa ffa1 	bl	8007f90 <HAL_SD_WriteBlocks>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d058:	7dfb      	ldrb	r3, [r7, #23]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	20000c88 	.word	0x20000c88

0800d068 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d06c:	4805      	ldr	r0, [pc, #20]	; (800d084 <BSP_SD_GetCardState+0x1c>)
 800d06e:	f7fb fb7f 	bl	8008770 <HAL_SD_GetCardState>
 800d072:	4603      	mov	r3, r0
 800d074:	2b04      	cmp	r3, #4
 800d076:	bf14      	ite	ne
 800d078:	2301      	movne	r3, #1
 800d07a:	2300      	moveq	r3, #0
 800d07c:	b2db      	uxtb	r3, r3
}
 800d07e:	4618      	mov	r0, r3
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000c88 	.word	0x20000c88

0800d088 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d090:	6879      	ldr	r1, [r7, #4]
 800d092:	4803      	ldr	r0, [pc, #12]	; (800d0a0 <BSP_SD_GetCardInfo+0x18>)
 800d094:	f7fb faa6 	bl	80085e4 <HAL_SD_GetCardInfo>
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	20000c88 	.word	0x20000c88

0800d0a4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d0ae:	79fb      	ldrb	r3, [r7, #7]
 800d0b0:	b2db      	uxtb	r3, r3
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bc80      	pop	{r7}
 800d0ba:	4770      	bx	lr

0800d0bc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800d0c8:	2304      	movs	r3, #4
 800d0ca:	2203      	movs	r2, #3
 800d0cc:	2181      	movs	r1, #129	; 0x81
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f004 fb11 	bl	80116f6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800d0da:	2010      	movs	r0, #16
 800d0dc:	f004 fc20 	bl	8011920 <USBD_static_malloc>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e005      	b.n	800d102 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b082      	sub	sp, #8
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800d116:	2181      	movs	r1, #129	; 0x81
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f004 fb12 	bl	8011742 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d009      	beq.n	800d142 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d134:	4618      	mov	r0, r3
 800d136:	f004 fbff 	bl	8011938 <USBD_static_free>
    pdev->pClassData = NULL;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d15c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800d15e:	2300      	movs	r3, #0
 800d160:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800d166:	2300      	movs	r3, #0
 800d168:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d176:	2b00      	cmp	r3, #0
 800d178:	d045      	beq.n	800d206 <USBD_HID_Setup+0xba>
 800d17a:	2b20      	cmp	r3, #32
 800d17c:	f040 80d3 	bne.w	800d326 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	3b02      	subs	r3, #2
 800d186:	2b09      	cmp	r3, #9
 800d188:	d835      	bhi.n	800d1f6 <USBD_HID_Setup+0xaa>
 800d18a:	a201      	add	r2, pc, #4	; (adr r2, 800d190 <USBD_HID_Setup+0x44>)
 800d18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d190:	0800d1e7 	.word	0x0800d1e7
 800d194:	0800d1c7 	.word	0x0800d1c7
 800d198:	0800d1f7 	.word	0x0800d1f7
 800d19c:	0800d1f7 	.word	0x0800d1f7
 800d1a0:	0800d1f7 	.word	0x0800d1f7
 800d1a4:	0800d1f7 	.word	0x0800d1f7
 800d1a8:	0800d1f7 	.word	0x0800d1f7
 800d1ac:	0800d1f7 	.word	0x0800d1f7
 800d1b0:	0800d1d5 	.word	0x0800d1d5
 800d1b4:	0800d1b9 	.word	0x0800d1b9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	885b      	ldrh	r3, [r3, #2]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	461a      	mov	r2, r3
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	601a      	str	r2, [r3, #0]
          break;
 800d1c4:	e01e      	b.n	800d204 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f001 f944 	bl	800e45a <USBD_CtlSendData>
          break;
 800d1d2:	e017      	b.n	800d204 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	885b      	ldrh	r3, [r3, #2]
 800d1d8:	0a1b      	lsrs	r3, r3, #8
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	605a      	str	r2, [r3, #4]
          break;
 800d1e4:	e00e      	b.n	800d204 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f001 f933 	bl	800e45a <USBD_CtlSendData>
          break;
 800d1f4:	e006      	b.n	800d204 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f001 f8c4 	bl	800e386 <USBD_CtlError>
          ret = USBD_FAIL;
 800d1fe:	2302      	movs	r3, #2
 800d200:	75fb      	strb	r3, [r7, #23]
          break;
 800d202:	bf00      	nop
      }
      break;
 800d204:	e096      	b.n	800d334 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	785b      	ldrb	r3, [r3, #1]
 800d20a:	2b0b      	cmp	r3, #11
 800d20c:	f200 8083 	bhi.w	800d316 <USBD_HID_Setup+0x1ca>
 800d210:	a201      	add	r2, pc, #4	; (adr r2, 800d218 <USBD_HID_Setup+0xcc>)
 800d212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d216:	bf00      	nop
 800d218:	0800d249 	.word	0x0800d249
 800d21c:	0800d317 	.word	0x0800d317
 800d220:	0800d317 	.word	0x0800d317
 800d224:	0800d317 	.word	0x0800d317
 800d228:	0800d317 	.word	0x0800d317
 800d22c:	0800d317 	.word	0x0800d317
 800d230:	0800d271 	.word	0x0800d271
 800d234:	0800d317 	.word	0x0800d317
 800d238:	0800d317 	.word	0x0800d317
 800d23c:	0800d317 	.word	0x0800d317
 800d240:	0800d2c9 	.word	0x0800d2c9
 800d244:	0800d2f1 	.word	0x0800d2f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d24e:	2b03      	cmp	r3, #3
 800d250:	d107      	bne.n	800d262 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d252:	f107 030e 	add.w	r3, r7, #14
 800d256:	2202      	movs	r2, #2
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f001 f8fd 	bl	800e45a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d260:	e060      	b.n	800d324 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f001 f88e 	bl	800e386 <USBD_CtlError>
            ret = USBD_FAIL;
 800d26a:	2302      	movs	r3, #2
 800d26c:	75fb      	strb	r3, [r7, #23]
          break;
 800d26e:	e059      	b.n	800d324 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	885b      	ldrh	r3, [r3, #2]
 800d274:	0a1b      	lsrs	r3, r3, #8
 800d276:	b29b      	uxth	r3, r3
 800d278:	2b22      	cmp	r3, #34	; 0x22
 800d27a:	d108      	bne.n	800d28e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	88db      	ldrh	r3, [r3, #6]
 800d280:	2b3f      	cmp	r3, #63	; 0x3f
 800d282:	bf28      	it	cs
 800d284:	233f      	movcs	r3, #63	; 0x3f
 800d286:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800d288:	4b2d      	ldr	r3, [pc, #180]	; (800d340 <USBD_HID_Setup+0x1f4>)
 800d28a:	61bb      	str	r3, [r7, #24]
 800d28c:	e015      	b.n	800d2ba <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	885b      	ldrh	r3, [r3, #2]
 800d292:	0a1b      	lsrs	r3, r3, #8
 800d294:	b29b      	uxth	r3, r3
 800d296:	2b21      	cmp	r3, #33	; 0x21
 800d298:	d108      	bne.n	800d2ac <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800d29a:	4b2a      	ldr	r3, [pc, #168]	; (800d344 <USBD_HID_Setup+0x1f8>)
 800d29c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	88db      	ldrh	r3, [r3, #6]
 800d2a2:	2b09      	cmp	r3, #9
 800d2a4:	bf28      	it	cs
 800d2a6:	2309      	movcs	r3, #9
 800d2a8:	83fb      	strh	r3, [r7, #30]
 800d2aa:	e006      	b.n	800d2ba <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f001 f869 	bl	800e386 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	75fb      	strb	r3, [r7, #23]
            break;
 800d2b8:	e034      	b.n	800d324 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800d2ba:	8bfb      	ldrh	r3, [r7, #30]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	69b9      	ldr	r1, [r7, #24]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f001 f8ca 	bl	800e45a <USBD_CtlSendData>
          break;
 800d2c6:	e02d      	b.n	800d324 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d107      	bne.n	800d2e2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f001 f8bd 	bl	800e45a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2e0:	e020      	b.n	800d324 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f001 f84e 	bl	800e386 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800d2ee:	e019      	b.n	800d324 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d106      	bne.n	800d308 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	885b      	ldrh	r3, [r3, #2]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	461a      	mov	r2, r3
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d306:	e00d      	b.n	800d324 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f001 f83b 	bl	800e386 <USBD_CtlError>
            ret = USBD_FAIL;
 800d310:	2302      	movs	r3, #2
 800d312:	75fb      	strb	r3, [r7, #23]
          break;
 800d314:	e006      	b.n	800d324 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800d316:	6839      	ldr	r1, [r7, #0]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f001 f834 	bl	800e386 <USBD_CtlError>
          ret = USBD_FAIL;
 800d31e:	2302      	movs	r3, #2
 800d320:	75fb      	strb	r3, [r7, #23]
          break;
 800d322:	bf00      	nop
      }
      break;
 800d324:	e006      	b.n	800d334 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f001 f82c 	bl	800e386 <USBD_CtlError>
      ret = USBD_FAIL;
 800d32e:	2302      	movs	r3, #2
 800d330:	75fb      	strb	r3, [r7, #23]
      break;
 800d332:	bf00      	nop
  }

  return ret;
 800d334:	7dfb      	ldrb	r3, [r7, #23]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	200000d8 	.word	0x200000d8
 800d344:	200000c0 	.word	0x200000c0

0800d348 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	4613      	mov	r3, r2
 800d354:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d35c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d364:	2b03      	cmp	r3, #3
 800d366:	d10c      	bne.n	800d382 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	7b1b      	ldrb	r3, [r3, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d108      	bne.n	800d382 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	2201      	movs	r2, #1
 800d374:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800d376:	88fb      	ldrh	r3, [r7, #6]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	2181      	movs	r1, #129	; 0x81
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f004 fa88 	bl	8011892 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2222      	movs	r2, #34	; 0x22
 800d398:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800d39a:	4b03      	ldr	r3, [pc, #12]	; (800d3a8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bc80      	pop	{r7}
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	20000054 	.word	0x20000054

0800d3ac <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2222      	movs	r2, #34	; 0x22
 800d3b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bc80      	pop	{r7}
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	20000078 	.word	0x20000078

0800d3cc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2222      	movs	r2, #34	; 0x22
 800d3d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bc80      	pop	{r7}
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	2000009c 	.word	0x2000009c

0800d3ec <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3fe:	2200      	movs	r2, #0
 800d400:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	bc80      	pop	{r7}
 800d40c:	4770      	bx	lr
	...

0800d410 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	220a      	movs	r2, #10
 800d41c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800d41e:	4b03      	ldr	r3, [pc, #12]	; (800d42c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	bc80      	pop	{r7}
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	200000cc 	.word	0x200000cc

0800d430 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	4613      	mov	r3, r2
 800d43c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d444:	2302      	movs	r3, #2
 800d446:	e01a      	b.n	800d47e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d003      	beq.n	800d468 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	79fa      	ldrb	r2, [r7, #7]
 800d474:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f004 f8da 	bl	8011630 <USBD_LL_Init>

  return USBD_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d006      	beq.n	800d4a8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	73fb      	strb	r3, [r7, #15]
 800d4a6:	e001      	b.n	800d4ac <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3714      	adds	r7, #20
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bc80      	pop	{r7}
 800d4b6:	4770      	bx	lr

0800d4b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f004 f8fd 	bl	80116c0 <USBD_LL_Start>

  return USBD_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bc80      	pop	{r7}
 800d4e2:	4770      	bx	lr

0800d4e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00c      	beq.n	800d518 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	78fa      	ldrb	r2, [r7, #3]
 800d508:	4611      	mov	r1, r2
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	4798      	blx	r3
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	460b      	mov	r3, r1
 800d52c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	78fa      	ldrb	r2, [r7, #3]
 800d538:	4611      	mov	r1, r2
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	4798      	blx	r3

  return USBD_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f000 fed7 	bl	800e30e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d56e:	461a      	mov	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d57c:	f003 031f 	and.w	r3, r3, #31
 800d580:	2b02      	cmp	r3, #2
 800d582:	d016      	beq.n	800d5b2 <USBD_LL_SetupStage+0x6a>
 800d584:	2b02      	cmp	r3, #2
 800d586:	d81c      	bhi.n	800d5c2 <USBD_LL_SetupStage+0x7a>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d002      	beq.n	800d592 <USBD_LL_SetupStage+0x4a>
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d008      	beq.n	800d5a2 <USBD_LL_SetupStage+0x5a>
 800d590:	e017      	b.n	800d5c2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d598:	4619      	mov	r1, r3
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 f9ca 	bl	800d934 <USBD_StdDevReq>
      break;
 800d5a0:	e01a      	b.n	800d5d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fa2c 	bl	800da08 <USBD_StdItfReq>
      break;
 800d5b0:	e012      	b.n	800d5d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fa6c 	bl	800da98 <USBD_StdEPReq>
      break;
 800d5c0:	e00a      	b.n	800d5d8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d5c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f004 f8d5 	bl	8011780 <USBD_LL_StallEP>
      break;
 800d5d6:	bf00      	nop
  }

  return USBD_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b086      	sub	sp, #24
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	607a      	str	r2, [r7, #4]
 800d5ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d5f0:	7afb      	ldrb	r3, [r7, #11]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d14b      	bne.n	800d68e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d5fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d604:	2b03      	cmp	r3, #3
 800d606:	d134      	bne.n	800d672 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	68da      	ldr	r2, [r3, #12]
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	429a      	cmp	r2, r3
 800d612:	d919      	bls.n	800d648 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	68da      	ldr	r2, [r3, #12]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	1ad2      	subs	r2, r2, r3
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	68da      	ldr	r2, [r3, #12]
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d203      	bcs.n	800d636 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d632:	b29b      	uxth	r3, r3
 800d634:	e002      	b.n	800d63c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	461a      	mov	r2, r3
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 ff38 	bl	800e4b6 <USBD_CtlContinueRx>
 800d646:	e038      	b.n	800d6ba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00a      	beq.n	800d66a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d105      	bne.n	800d66a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f000 ff35 	bl	800e4da <USBD_CtlSendStatus>
 800d670:	e023      	b.n	800d6ba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d678:	2b05      	cmp	r3, #5
 800d67a:	d11e      	bne.n	800d6ba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d684:	2100      	movs	r1, #0
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f004 f87a 	bl	8011780 <USBD_LL_StallEP>
 800d68c:	e015      	b.n	800d6ba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00d      	beq.n	800d6b6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d6a0:	2b03      	cmp	r3, #3
 800d6a2:	d108      	bne.n	800d6b6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	7afa      	ldrb	r2, [r7, #11]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	68f8      	ldr	r0, [r7, #12]
 800d6b2:	4798      	blx	r3
 800d6b4:	e001      	b.n	800d6ba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d6b6:	2302      	movs	r3, #2
 800d6b8:	e000      	b.n	800d6bc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	607a      	str	r2, [r7, #4]
 800d6d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d6d2:	7afb      	ldrb	r3, [r7, #11]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d17f      	bne.n	800d7d8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	3314      	adds	r3, #20
 800d6dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d15c      	bne.n	800d7a2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d915      	bls.n	800d720 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	68da      	ldr	r2, [r3, #12]
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	1ad2      	subs	r2, r2, r3
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	b29b      	uxth	r3, r3
 800d708:	461a      	mov	r2, r3
 800d70a:	6879      	ldr	r1, [r7, #4]
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 fec0 	bl	800e492 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d712:	2300      	movs	r3, #0
 800d714:	2200      	movs	r2, #0
 800d716:	2100      	movs	r1, #0
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f004 f8dd 	bl	80118d8 <USBD_LL_PrepareReceive>
 800d71e:	e04e      	b.n	800d7be <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	6912      	ldr	r2, [r2, #16]
 800d728:	fbb3 f1f2 	udiv	r1, r3, r2
 800d72c:	fb01 f202 	mul.w	r2, r1, r2
 800d730:	1a9b      	subs	r3, r3, r2
 800d732:	2b00      	cmp	r3, #0
 800d734:	d11c      	bne.n	800d770 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	689a      	ldr	r2, [r3, #8]
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d73e:	429a      	cmp	r2, r3
 800d740:	d316      	bcc.n	800d770 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	689a      	ldr	r2, [r3, #8]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d20f      	bcs.n	800d770 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d750:	2200      	movs	r2, #0
 800d752:	2100      	movs	r1, #0
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f000 fe9c 	bl	800e492 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d762:	2300      	movs	r3, #0
 800d764:	2200      	movs	r2, #0
 800d766:	2100      	movs	r1, #0
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f004 f8b5 	bl	80118d8 <USBD_LL_PrepareReceive>
 800d76e:	e026      	b.n	800d7be <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d782:	2b03      	cmp	r3, #3
 800d784:	d105      	bne.n	800d792 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d792:	2180      	movs	r1, #128	; 0x80
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f003 fff3 	bl	8011780 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f000 feb0 	bl	800e500 <USBD_CtlReceiveStatus>
 800d7a0:	e00d      	b.n	800d7be <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7a8:	2b04      	cmp	r3, #4
 800d7aa:	d004      	beq.n	800d7b6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d103      	bne.n	800d7be <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d7b6:	2180      	movs	r1, #128	; 0x80
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f003 ffe1 	bl	8011780 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d11d      	bne.n	800d804 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f7ff fe81 	bl	800d4d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d7d6:	e015      	b.n	800d804 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7de:	695b      	ldr	r3, [r3, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00d      	beq.n	800d800 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d108      	bne.n	800d800 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7f4:	695b      	ldr	r3, [r3, #20]
 800d7f6:	7afa      	ldrb	r2, [r7, #11]
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	4798      	blx	r3
 800d7fe:	e001      	b.n	800d804 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d800:	2302      	movs	r3, #2
 800d802:	e000      	b.n	800d806 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d816:	2340      	movs	r3, #64	; 0x40
 800d818:	2200      	movs	r2, #0
 800d81a:	2100      	movs	r1, #0
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f003 ff6a 	bl	80116f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2240      	movs	r2, #64	; 0x40
 800d82e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d832:	2340      	movs	r3, #64	; 0x40
 800d834:	2200      	movs	r2, #0
 800d836:	2180      	movs	r1, #128	; 0x80
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f003 ff5c 	bl	80116f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2240      	movs	r2, #64	; 0x40
 800d848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d009      	beq.n	800d886 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	6852      	ldr	r2, [r2, #4]
 800d87e:	b2d2      	uxtb	r2, r2
 800d880:	4611      	mov	r1, r2
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	4798      	blx	r3
  }

  return USBD_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	78fa      	ldrb	r2, [r7, #3]
 800d8a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bc80      	pop	{r7}
 800d8ac:	4770      	bx	lr

0800d8ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b083      	sub	sp, #12
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bc80      	pop	{r7}
 800d8d4:	4770      	bx	lr

0800d8d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	d105      	bne.n	800d8f4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bc80      	pop	{r7}
 800d8fe:	4770      	bx	lr

0800d900 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d10b      	bne.n	800d92a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d92a:	2300      	movs	r3, #0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d94a:	2b40      	cmp	r3, #64	; 0x40
 800d94c:	d005      	beq.n	800d95a <USBD_StdDevReq+0x26>
 800d94e:	2b40      	cmp	r3, #64	; 0x40
 800d950:	d84f      	bhi.n	800d9f2 <USBD_StdDevReq+0xbe>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d009      	beq.n	800d96a <USBD_StdDevReq+0x36>
 800d956:	2b20      	cmp	r3, #32
 800d958:	d14b      	bne.n	800d9f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	6839      	ldr	r1, [r7, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	4798      	blx	r3
      break;
 800d968:	e048      	b.n	800d9fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	785b      	ldrb	r3, [r3, #1]
 800d96e:	2b09      	cmp	r3, #9
 800d970:	d839      	bhi.n	800d9e6 <USBD_StdDevReq+0xb2>
 800d972:	a201      	add	r2, pc, #4	; (adr r2, 800d978 <USBD_StdDevReq+0x44>)
 800d974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d978:	0800d9c9 	.word	0x0800d9c9
 800d97c:	0800d9dd 	.word	0x0800d9dd
 800d980:	0800d9e7 	.word	0x0800d9e7
 800d984:	0800d9d3 	.word	0x0800d9d3
 800d988:	0800d9e7 	.word	0x0800d9e7
 800d98c:	0800d9ab 	.word	0x0800d9ab
 800d990:	0800d9a1 	.word	0x0800d9a1
 800d994:	0800d9e7 	.word	0x0800d9e7
 800d998:	0800d9bf 	.word	0x0800d9bf
 800d99c:	0800d9b5 	.word	0x0800d9b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 f9dc 	bl	800dd60 <USBD_GetDescriptor>
          break;
 800d9a8:	e022      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d9aa:	6839      	ldr	r1, [r7, #0]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fb3f 	bl	800e030 <USBD_SetAddress>
          break;
 800d9b2:	e01d      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 fb7e 	bl	800e0b8 <USBD_SetConfig>
          break;
 800d9bc:	e018      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d9be:	6839      	ldr	r1, [r7, #0]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 fc07 	bl	800e1d4 <USBD_GetConfig>
          break;
 800d9c6:	e013      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fc37 	bl	800e23e <USBD_GetStatus>
          break;
 800d9d0:	e00e      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fc65 	bl	800e2a4 <USBD_SetFeature>
          break;
 800d9da:	e009      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fc74 	bl	800e2cc <USBD_ClrFeature>
          break;
 800d9e4:	e004      	b.n	800d9f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 fccc 	bl	800e386 <USBD_CtlError>
          break;
 800d9ee:	bf00      	nop
      }
      break;
 800d9f0:	e004      	b.n	800d9fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fcc6 	bl	800e386 <USBD_CtlError>
      break;
 800d9fa:	bf00      	nop
  }

  return ret;
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop

0800da08 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da1e:	2b40      	cmp	r3, #64	; 0x40
 800da20:	d005      	beq.n	800da2e <USBD_StdItfReq+0x26>
 800da22:	2b40      	cmp	r3, #64	; 0x40
 800da24:	d82e      	bhi.n	800da84 <USBD_StdItfReq+0x7c>
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <USBD_StdItfReq+0x26>
 800da2a:	2b20      	cmp	r3, #32
 800da2c:	d12a      	bne.n	800da84 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da34:	3b01      	subs	r3, #1
 800da36:	2b02      	cmp	r3, #2
 800da38:	d81d      	bhi.n	800da76 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	889b      	ldrh	r3, [r3, #4]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	2b01      	cmp	r3, #1
 800da42:	d813      	bhi.n	800da6c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	4798      	blx	r3
 800da52:	4603      	mov	r3, r0
 800da54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	88db      	ldrh	r3, [r3, #6]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d110      	bne.n	800da80 <USBD_StdItfReq+0x78>
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10d      	bne.n	800da80 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 fd38 	bl	800e4da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800da6a:	e009      	b.n	800da80 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fc89 	bl	800e386 <USBD_CtlError>
          break;
 800da74:	e004      	b.n	800da80 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800da76:	6839      	ldr	r1, [r7, #0]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 fc84 	bl	800e386 <USBD_CtlError>
          break;
 800da7e:	e000      	b.n	800da82 <USBD_StdItfReq+0x7a>
          break;
 800da80:	bf00      	nop
      }
      break;
 800da82:	e004      	b.n	800da8e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fc7d 	bl	800e386 <USBD_CtlError>
      break;
 800da8c:	bf00      	nop
  }

  return USBD_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	889b      	ldrh	r3, [r3, #4]
 800daaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dab4:	2b40      	cmp	r3, #64	; 0x40
 800dab6:	d007      	beq.n	800dac8 <USBD_StdEPReq+0x30>
 800dab8:	2b40      	cmp	r3, #64	; 0x40
 800daba:	f200 8146 	bhi.w	800dd4a <USBD_StdEPReq+0x2b2>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00a      	beq.n	800dad8 <USBD_StdEPReq+0x40>
 800dac2:	2b20      	cmp	r3, #32
 800dac4:	f040 8141 	bne.w	800dd4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	6839      	ldr	r1, [r7, #0]
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	4798      	blx	r3
      break;
 800dad6:	e13d      	b.n	800dd54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	d10a      	bne.n	800dafa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	6839      	ldr	r1, [r7, #0]
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	4798      	blx	r3
 800daf2:	4603      	mov	r3, r0
 800daf4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
 800daf8:	e12d      	b.n	800dd56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d007      	beq.n	800db12 <USBD_StdEPReq+0x7a>
 800db02:	2b03      	cmp	r3, #3
 800db04:	f300 811b 	bgt.w	800dd3e <USBD_StdEPReq+0x2a6>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d072      	beq.n	800dbf2 <USBD_StdEPReq+0x15a>
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d03a      	beq.n	800db86 <USBD_StdEPReq+0xee>
 800db10:	e115      	b.n	800dd3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d002      	beq.n	800db22 <USBD_StdEPReq+0x8a>
 800db1c:	2b03      	cmp	r3, #3
 800db1e:	d015      	beq.n	800db4c <USBD_StdEPReq+0xb4>
 800db20:	e02b      	b.n	800db7a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db22:	7bbb      	ldrb	r3, [r7, #14]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00c      	beq.n	800db42 <USBD_StdEPReq+0xaa>
 800db28:	7bbb      	ldrb	r3, [r7, #14]
 800db2a:	2b80      	cmp	r3, #128	; 0x80
 800db2c:	d009      	beq.n	800db42 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f003 fe24 	bl	8011780 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800db38:	2180      	movs	r1, #128	; 0x80
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f003 fe20 	bl	8011780 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db40:	e020      	b.n	800db84 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 fc1e 	bl	800e386 <USBD_CtlError>
              break;
 800db4a:	e01b      	b.n	800db84 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	885b      	ldrh	r3, [r3, #2]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10e      	bne.n	800db72 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800db54:	7bbb      	ldrb	r3, [r7, #14]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00b      	beq.n	800db72 <USBD_StdEPReq+0xda>
 800db5a:	7bbb      	ldrb	r3, [r7, #14]
 800db5c:	2b80      	cmp	r3, #128	; 0x80
 800db5e:	d008      	beq.n	800db72 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	88db      	ldrh	r3, [r3, #6]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d104      	bne.n	800db72 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800db68:	7bbb      	ldrb	r3, [r7, #14]
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f003 fe07 	bl	8011780 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fcb1 	bl	800e4da <USBD_CtlSendStatus>

              break;
 800db78:	e004      	b.n	800db84 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fc02 	bl	800e386 <USBD_CtlError>
              break;
 800db82:	bf00      	nop
          }
          break;
 800db84:	e0e0      	b.n	800dd48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d002      	beq.n	800db96 <USBD_StdEPReq+0xfe>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d015      	beq.n	800dbc0 <USBD_StdEPReq+0x128>
 800db94:	e026      	b.n	800dbe4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db96:	7bbb      	ldrb	r3, [r7, #14]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00c      	beq.n	800dbb6 <USBD_StdEPReq+0x11e>
 800db9c:	7bbb      	ldrb	r3, [r7, #14]
 800db9e:	2b80      	cmp	r3, #128	; 0x80
 800dba0:	d009      	beq.n	800dbb6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dba2:	7bbb      	ldrb	r3, [r7, #14]
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f003 fdea 	bl	8011780 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dbac:	2180      	movs	r1, #128	; 0x80
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f003 fde6 	bl	8011780 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbb4:	e01c      	b.n	800dbf0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fbe4 	bl	800e386 <USBD_CtlError>
              break;
 800dbbe:	e017      	b.n	800dbf0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	885b      	ldrh	r3, [r3, #2]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d112      	bne.n	800dbee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d004      	beq.n	800dbdc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dbd2:	7bbb      	ldrb	r3, [r7, #14]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f003 fdf1 	bl	80117be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fc7c 	bl	800e4da <USBD_CtlSendStatus>
              }
              break;
 800dbe2:	e004      	b.n	800dbee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fbcd 	bl	800e386 <USBD_CtlError>
              break;
 800dbec:	e000      	b.n	800dbf0 <USBD_StdEPReq+0x158>
              break;
 800dbee:	bf00      	nop
          }
          break;
 800dbf0:	e0aa      	b.n	800dd48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf8:	2b02      	cmp	r3, #2
 800dbfa:	d002      	beq.n	800dc02 <USBD_StdEPReq+0x16a>
 800dbfc:	2b03      	cmp	r3, #3
 800dbfe:	d032      	beq.n	800dc66 <USBD_StdEPReq+0x1ce>
 800dc00:	e097      	b.n	800dd32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d007      	beq.n	800dc18 <USBD_StdEPReq+0x180>
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
 800dc0a:	2b80      	cmp	r3, #128	; 0x80
 800dc0c:	d004      	beq.n	800dc18 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fbb8 	bl	800e386 <USBD_CtlError>
                break;
 800dc16:	e091      	b.n	800dd3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	da0b      	bge.n	800dc38 <USBD_StdEPReq+0x1a0>
 800dc20:	7bbb      	ldrb	r3, [r7, #14]
 800dc22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc26:	4613      	mov	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	3310      	adds	r3, #16
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	4413      	add	r3, r2
 800dc34:	3304      	adds	r3, #4
 800dc36:	e00b      	b.n	800dc50 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc3e:	4613      	mov	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	3304      	adds	r3, #4
 800dc50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2200      	movs	r2, #0
 800dc56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fbfb 	bl	800e45a <USBD_CtlSendData>
              break;
 800dc64:	e06a      	b.n	800dd3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dc66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	da11      	bge.n	800dc92 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dc6e:	7bbb      	ldrb	r3, [r7, #14]
 800dc70:	f003 020f 	and.w	r2, r3, #15
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	4613      	mov	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4413      	add	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	440b      	add	r3, r1
 800dc80:	3318      	adds	r3, #24
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d117      	bne.n	800dcb8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fb7b 	bl	800e386 <USBD_CtlError>
                  break;
 800dc90:	e054      	b.n	800dd3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	f003 020f 	and.w	r2, r3, #15
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	4413      	add	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	440b      	add	r3, r1
 800dca4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d104      	bne.n	800dcb8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fb68 	bl	800e386 <USBD_CtlError>
                  break;
 800dcb6:	e041      	b.n	800dd3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	da0b      	bge.n	800dcd8 <USBD_StdEPReq+0x240>
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
 800dcc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	3310      	adds	r3, #16
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	e00b      	b.n	800dcf0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcd8:	7bbb      	ldrb	r3, [r7, #14]
 800dcda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcde:	4613      	mov	r3, r2
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	4413      	add	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	4413      	add	r3, r2
 800dcee:	3304      	adds	r3, #4
 800dcf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <USBD_StdEPReq+0x266>
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	2b80      	cmp	r3, #128	; 0x80
 800dcfc:	d103      	bne.n	800dd06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	e00e      	b.n	800dd24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f003 fd76 	bl	80117fc <USBD_LL_IsStallEP>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d003      	beq.n	800dd1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	601a      	str	r2, [r3, #0]
 800dd1c:	e002      	b.n	800dd24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2202      	movs	r2, #2
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fb95 	bl	800e45a <USBD_CtlSendData>
              break;
 800dd30:	e004      	b.n	800dd3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fb26 	bl	800e386 <USBD_CtlError>
              break;
 800dd3a:	bf00      	nop
          }
          break;
 800dd3c:	e004      	b.n	800dd48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fb20 	bl	800e386 <USBD_CtlError>
          break;
 800dd46:	bf00      	nop
      }
      break;
 800dd48:	e004      	b.n	800dd54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fb1a 	bl	800e386 <USBD_CtlError>
      break;
 800dd52:	bf00      	nop
  }

  return ret;
 800dd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
	...

0800dd60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dd72:	2300      	movs	r3, #0
 800dd74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	885b      	ldrh	r3, [r3, #2]
 800dd7a:	0a1b      	lsrs	r3, r3, #8
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	2b06      	cmp	r3, #6
 800dd82:	f200 8128 	bhi.w	800dfd6 <USBD_GetDescriptor+0x276>
 800dd86:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <USBD_GetDescriptor+0x2c>)
 800dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8c:	0800dda9 	.word	0x0800dda9
 800dd90:	0800ddc1 	.word	0x0800ddc1
 800dd94:	0800de01 	.word	0x0800de01
 800dd98:	0800dfd7 	.word	0x0800dfd7
 800dd9c:	0800dfd7 	.word	0x0800dfd7
 800dda0:	0800df77 	.word	0x0800df77
 800dda4:	0800dfa3 	.word	0x0800dfa3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	7c12      	ldrb	r2, [r2, #16]
 800ddb4:	f107 0108 	add.w	r1, r7, #8
 800ddb8:	4610      	mov	r0, r2
 800ddba:	4798      	blx	r3
 800ddbc:	60f8      	str	r0, [r7, #12]
      break;
 800ddbe:	e112      	b.n	800dfe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7c1b      	ldrb	r3, [r3, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10d      	bne.n	800dde4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd0:	f107 0208 	add.w	r2, r7, #8
 800ddd4:	4610      	mov	r0, r2
 800ddd6:	4798      	blx	r3
 800ddd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3301      	adds	r3, #1
 800ddde:	2202      	movs	r2, #2
 800dde0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dde2:	e100      	b.n	800dfe6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddec:	f107 0208 	add.w	r2, r7, #8
 800ddf0:	4610      	mov	r0, r2
 800ddf2:	4798      	blx	r3
 800ddf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	701a      	strb	r2, [r3, #0]
      break;
 800ddfe:	e0f2      	b.n	800dfe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	885b      	ldrh	r3, [r3, #2]
 800de04:	b2db      	uxtb	r3, r3
 800de06:	2b05      	cmp	r3, #5
 800de08:	f200 80ac 	bhi.w	800df64 <USBD_GetDescriptor+0x204>
 800de0c:	a201      	add	r2, pc, #4	; (adr r2, 800de14 <USBD_GetDescriptor+0xb4>)
 800de0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de12:	bf00      	nop
 800de14:	0800de2d 	.word	0x0800de2d
 800de18:	0800de61 	.word	0x0800de61
 800de1c:	0800de95 	.word	0x0800de95
 800de20:	0800dec9 	.word	0x0800dec9
 800de24:	0800defd 	.word	0x0800defd
 800de28:	0800df31 	.word	0x0800df31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00b      	beq.n	800de50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	7c12      	ldrb	r2, [r2, #16]
 800de44:	f107 0108 	add.w	r1, r7, #8
 800de48:	4610      	mov	r0, r2
 800de4a:	4798      	blx	r3
 800de4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de4e:	e091      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fa97 	bl	800e386 <USBD_CtlError>
            err++;
 800de58:	7afb      	ldrb	r3, [r7, #11]
 800de5a:	3301      	adds	r3, #1
 800de5c:	72fb      	strb	r3, [r7, #11]
          break;
 800de5e:	e089      	b.n	800df74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00b      	beq.n	800de84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	7c12      	ldrb	r2, [r2, #16]
 800de78:	f107 0108 	add.w	r1, r7, #8
 800de7c:	4610      	mov	r0, r2
 800de7e:	4798      	blx	r3
 800de80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de82:	e077      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de84:	6839      	ldr	r1, [r7, #0]
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fa7d 	bl	800e386 <USBD_CtlError>
            err++;
 800de8c:	7afb      	ldrb	r3, [r7, #11]
 800de8e:	3301      	adds	r3, #1
 800de90:	72fb      	strb	r3, [r7, #11]
          break;
 800de92:	e06f      	b.n	800df74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00b      	beq.n	800deb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	7c12      	ldrb	r2, [r2, #16]
 800deac:	f107 0108 	add.w	r1, r7, #8
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
 800deb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800deb6:	e05d      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fa63 	bl	800e386 <USBD_CtlError>
            err++;
 800dec0:	7afb      	ldrb	r3, [r7, #11]
 800dec2:	3301      	adds	r3, #1
 800dec4:	72fb      	strb	r3, [r7, #11]
          break;
 800dec6:	e055      	b.n	800df74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00b      	beq.n	800deec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	7c12      	ldrb	r2, [r2, #16]
 800dee0:	f107 0108 	add.w	r1, r7, #8
 800dee4:	4610      	mov	r0, r2
 800dee6:	4798      	blx	r3
 800dee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800deea:	e043      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fa49 	bl	800e386 <USBD_CtlError>
            err++;
 800def4:	7afb      	ldrb	r3, [r7, #11]
 800def6:	3301      	adds	r3, #1
 800def8:	72fb      	strb	r3, [r7, #11]
          break;
 800defa:	e03b      	b.n	800df74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00b      	beq.n	800df20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	7c12      	ldrb	r2, [r2, #16]
 800df14:	f107 0108 	add.w	r1, r7, #8
 800df18:	4610      	mov	r0, r2
 800df1a:	4798      	blx	r3
 800df1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df1e:	e029      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df20:	6839      	ldr	r1, [r7, #0]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fa2f 	bl	800e386 <USBD_CtlError>
            err++;
 800df28:	7afb      	ldrb	r3, [r7, #11]
 800df2a:	3301      	adds	r3, #1
 800df2c:	72fb      	strb	r3, [r7, #11]
          break;
 800df2e:	e021      	b.n	800df74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00b      	beq.n	800df54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df42:	699b      	ldr	r3, [r3, #24]
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	7c12      	ldrb	r2, [r2, #16]
 800df48:	f107 0108 	add.w	r1, r7, #8
 800df4c:	4610      	mov	r0, r2
 800df4e:	4798      	blx	r3
 800df50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df52:	e00f      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fa15 	bl	800e386 <USBD_CtlError>
            err++;
 800df5c:	7afb      	ldrb	r3, [r7, #11]
 800df5e:	3301      	adds	r3, #1
 800df60:	72fb      	strb	r3, [r7, #11]
          break;
 800df62:	e007      	b.n	800df74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 fa0d 	bl	800e386 <USBD_CtlError>
          err++;
 800df6c:	7afb      	ldrb	r3, [r7, #11]
 800df6e:	3301      	adds	r3, #1
 800df70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800df72:	e038      	b.n	800dfe6 <USBD_GetDescriptor+0x286>
 800df74:	e037      	b.n	800dfe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7c1b      	ldrb	r3, [r3, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d109      	bne.n	800df92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df86:	f107 0208 	add.w	r2, r7, #8
 800df8a:	4610      	mov	r0, r2
 800df8c:	4798      	blx	r3
 800df8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df90:	e029      	b.n	800dfe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f9f6 	bl	800e386 <USBD_CtlError>
        err++;
 800df9a:	7afb      	ldrb	r3, [r7, #11]
 800df9c:	3301      	adds	r3, #1
 800df9e:	72fb      	strb	r3, [r7, #11]
      break;
 800dfa0:	e021      	b.n	800dfe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7c1b      	ldrb	r3, [r3, #16]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10d      	bne.n	800dfc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb2:	f107 0208 	add.w	r2, r7, #8
 800dfb6:	4610      	mov	r0, r2
 800dfb8:	4798      	blx	r3
 800dfba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	2207      	movs	r2, #7
 800dfc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfc4:	e00f      	b.n	800dfe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dfc6:	6839      	ldr	r1, [r7, #0]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f9dc 	bl	800e386 <USBD_CtlError>
        err++;
 800dfce:	7afb      	ldrb	r3, [r7, #11]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	72fb      	strb	r3, [r7, #11]
      break;
 800dfd4:	e007      	b.n	800dfe6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f9d4 	bl	800e386 <USBD_CtlError>
      err++;
 800dfde:	7afb      	ldrb	r3, [r7, #11]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	72fb      	strb	r3, [r7, #11]
      break;
 800dfe4:	bf00      	nop
  }

  if (err != 0U)
 800dfe6:	7afb      	ldrb	r3, [r7, #11]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d11c      	bne.n	800e026 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800dfec:	893b      	ldrh	r3, [r7, #8]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d011      	beq.n	800e016 <USBD_GetDescriptor+0x2b6>
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	88db      	ldrh	r3, [r3, #6]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00d      	beq.n	800e016 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	88da      	ldrh	r2, [r3, #6]
 800dffe:	893b      	ldrh	r3, [r7, #8]
 800e000:	4293      	cmp	r3, r2
 800e002:	bf28      	it	cs
 800e004:	4613      	movcs	r3, r2
 800e006:	b29b      	uxth	r3, r3
 800e008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e00a:	893b      	ldrh	r3, [r7, #8]
 800e00c:	461a      	mov	r2, r3
 800e00e:	68f9      	ldr	r1, [r7, #12]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fa22 	bl	800e45a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	88db      	ldrh	r3, [r3, #6]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d104      	bne.n	800e028 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fa5b 	bl	800e4da <USBD_CtlSendStatus>
 800e024:	e000      	b.n	800e028 <USBD_GetDescriptor+0x2c8>
    return;
 800e026:	bf00      	nop
    }
  }
}
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop

0800e030 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	889b      	ldrh	r3, [r3, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d130      	bne.n	800e0a4 <USBD_SetAddress+0x74>
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	88db      	ldrh	r3, [r3, #6]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d12c      	bne.n	800e0a4 <USBD_SetAddress+0x74>
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	885b      	ldrh	r3, [r3, #2]
 800e04e:	2b7f      	cmp	r3, #127	; 0x7f
 800e050:	d828      	bhi.n	800e0a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	885b      	ldrh	r3, [r3, #2]
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e05c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e064:	2b03      	cmp	r3, #3
 800e066:	d104      	bne.n	800e072 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f98b 	bl	800e386 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e070:	e01d      	b.n	800e0ae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	7bfa      	ldrb	r2, [r7, #15]
 800e076:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f003 fbe8 	bl	8011854 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fa28 	bl	800e4da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d004      	beq.n	800e09a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2202      	movs	r2, #2
 800e094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e098:	e009      	b.n	800e0ae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0a2:	e004      	b.n	800e0ae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f96d 	bl	800e386 <USBD_CtlError>
  }
}
 800e0ac:	bf00      	nop
 800e0ae:	bf00      	nop
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	885b      	ldrh	r3, [r3, #2]
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	4b41      	ldr	r3, [pc, #260]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e0ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e0cc:	4b40      	ldr	r3, [pc, #256]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d904      	bls.n	800e0de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f955 	bl	800e386 <USBD_CtlError>
 800e0dc:	e075      	b.n	800e1ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d002      	beq.n	800e0ee <USBD_SetConfig+0x36>
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d023      	beq.n	800e134 <USBD_SetConfig+0x7c>
 800e0ec:	e062      	b.n	800e1b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e0ee:	4b38      	ldr	r3, [pc, #224]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d01a      	beq.n	800e12c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e0f6:	4b36      	ldr	r3, [pc, #216]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2203      	movs	r2, #3
 800e104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e108:	4b31      	ldr	r3, [pc, #196]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	4619      	mov	r1, r3
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff f9e8 	bl	800d4e4 <USBD_SetClassConfig>
 800e114:	4603      	mov	r3, r0
 800e116:	2b02      	cmp	r3, #2
 800e118:	d104      	bne.n	800e124 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f932 	bl	800e386 <USBD_CtlError>
            return;
 800e122:	e052      	b.n	800e1ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 f9d8 	bl	800e4da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e12a:	e04e      	b.n	800e1ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f9d4 	bl	800e4da <USBD_CtlSendStatus>
        break;
 800e132:	e04a      	b.n	800e1ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e134:	4b26      	ldr	r3, [pc, #152]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d112      	bne.n	800e162 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e144:	4b22      	ldr	r3, [pc, #136]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	461a      	mov	r2, r3
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e14e:	4b20      	ldr	r3, [pc, #128]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff f9e4 	bl	800d522 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f9bd 	bl	800e4da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e160:	e033      	b.n	800e1ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e162:	4b1b      	ldr	r3, [pc, #108]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d01d      	beq.n	800e1ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	b2db      	uxtb	r3, r3
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff f9d2 	bl	800d522 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e17e:	4b14      	ldr	r3, [pc, #80]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	461a      	mov	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e188:	4b11      	ldr	r3, [pc, #68]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff f9a8 	bl	800d4e4 <USBD_SetClassConfig>
 800e194:	4603      	mov	r3, r0
 800e196:	2b02      	cmp	r3, #2
 800e198:	d104      	bne.n	800e1a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f8f2 	bl	800e386 <USBD_CtlError>
            return;
 800e1a2:	e012      	b.n	800e1ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f998 	bl	800e4da <USBD_CtlSendStatus>
        break;
 800e1aa:	e00e      	b.n	800e1ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 f994 	bl	800e4da <USBD_CtlSendStatus>
        break;
 800e1b2:	e00a      	b.n	800e1ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f8e5 	bl	800e386 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e1bc:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <USBD_SetConfig+0x118>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7ff f9ad 	bl	800d522 <USBD_ClrClassConfig>
        break;
 800e1c8:	bf00      	nop
    }
  }
}
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20000e68 	.word	0x20000e68

0800e1d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	88db      	ldrh	r3, [r3, #6]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d004      	beq.n	800e1f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 f8cc 	bl	800e386 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e1ee:	e022      	b.n	800e236 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1f6:	2b02      	cmp	r3, #2
 800e1f8:	dc02      	bgt.n	800e200 <USBD_GetConfig+0x2c>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dc03      	bgt.n	800e206 <USBD_GetConfig+0x32>
 800e1fe:	e015      	b.n	800e22c <USBD_GetConfig+0x58>
 800e200:	2b03      	cmp	r3, #3
 800e202:	d00b      	beq.n	800e21c <USBD_GetConfig+0x48>
 800e204:	e012      	b.n	800e22c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3308      	adds	r3, #8
 800e210:	2201      	movs	r2, #1
 800e212:	4619      	mov	r1, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 f920 	bl	800e45a <USBD_CtlSendData>
        break;
 800e21a:	e00c      	b.n	800e236 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	3304      	adds	r3, #4
 800e220:	2201      	movs	r2, #1
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f918 	bl	800e45a <USBD_CtlSendData>
        break;
 800e22a:	e004      	b.n	800e236 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f8a9 	bl	800e386 <USBD_CtlError>
        break;
 800e234:	bf00      	nop
}
 800e236:	bf00      	nop
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b082      	sub	sp, #8
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
 800e246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e24e:	3b01      	subs	r3, #1
 800e250:	2b02      	cmp	r3, #2
 800e252:	d81e      	bhi.n	800e292 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	88db      	ldrh	r3, [r3, #6]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d004      	beq.n	800e266 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e25c:	6839      	ldr	r1, [r7, #0]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f891 	bl	800e386 <USBD_CtlError>
        break;
 800e264:	e01a      	b.n	800e29c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e272:	2b00      	cmp	r3, #0
 800e274:	d005      	beq.n	800e282 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	f043 0202 	orr.w	r2, r3, #2
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	330c      	adds	r3, #12
 800e286:	2202      	movs	r2, #2
 800e288:	4619      	mov	r1, r3
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 f8e5 	bl	800e45a <USBD_CtlSendData>
      break;
 800e290:	e004      	b.n	800e29c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 f876 	bl	800e386 <USBD_CtlError>
      break;
 800e29a:	bf00      	nop
  }
}
 800e29c:	bf00      	nop
 800e29e:	3708      	adds	r7, #8
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	885b      	ldrh	r3, [r3, #2]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d106      	bne.n	800e2c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 f90b 	bl	800e4da <USBD_CtlSendStatus>
  }
}
 800e2c4:	bf00      	nop
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	d80b      	bhi.n	800e2fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d10c      	bne.n	800e304 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f8f1 	bl	800e4da <USBD_CtlSendStatus>
      }
      break;
 800e2f8:	e004      	b.n	800e304 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 f842 	bl	800e386 <USBD_CtlError>
      break;
 800e302:	e000      	b.n	800e306 <USBD_ClrFeature+0x3a>
      break;
 800e304:	bf00      	nop
  }
}
 800e306:	bf00      	nop
 800e308:	3708      	adds	r7, #8
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	781a      	ldrb	r2, [r3, #0]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	785a      	ldrb	r2, [r3, #1]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	3302      	adds	r3, #2
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	b29a      	uxth	r2, r3
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	3303      	adds	r3, #3
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	b29b      	uxth	r3, r3
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	4413      	add	r3, r2
 800e33e:	b29a      	uxth	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	3304      	adds	r3, #4
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	3305      	adds	r3, #5
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b29b      	uxth	r3, r3
 800e354:	021b      	lsls	r3, r3, #8
 800e356:	b29b      	uxth	r3, r3
 800e358:	4413      	add	r3, r2
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	3306      	adds	r3, #6
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	b29a      	uxth	r2, r3
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	3307      	adds	r3, #7
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	021b      	lsls	r3, r3, #8
 800e372:	b29b      	uxth	r3, r3
 800e374:	4413      	add	r3, r2
 800e376:	b29a      	uxth	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	80da      	strh	r2, [r3, #6]

}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	bc80      	pop	{r7}
 800e384:	4770      	bx	lr

0800e386 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b082      	sub	sp, #8
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e390:	2180      	movs	r1, #128	; 0x80
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f003 f9f4 	bl	8011780 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e398:	2100      	movs	r1, #0
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f003 f9f0 	bl	8011780 <USBD_LL_StallEP>
}
 800e3a0:	bf00      	nop
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d032      	beq.n	800e424 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f834 	bl	800e42c <USBD_GetLen>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	75fa      	strb	r2, [r7, #23]
 800e3d8:	461a      	mov	r2, r3
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	4413      	add	r3, r2
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	7812      	ldrb	r2, [r2, #0]
 800e3e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e3e4:	7dfb      	ldrb	r3, [r7, #23]
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	75fa      	strb	r2, [r7, #23]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	2203      	movs	r2, #3
 800e3f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e3f4:	e012      	b.n	800e41c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	1c5a      	adds	r2, r3, #1
 800e3fa:	60fa      	str	r2, [r7, #12]
 800e3fc:	7dfa      	ldrb	r2, [r7, #23]
 800e3fe:	1c51      	adds	r1, r2, #1
 800e400:	75f9      	strb	r1, [r7, #23]
 800e402:	4611      	mov	r1, r2
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	440a      	add	r2, r1
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	75fa      	strb	r2, [r7, #23]
 800e412:	461a      	mov	r2, r3
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	4413      	add	r3, r2
 800e418:	2200      	movs	r2, #0
 800e41a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1e8      	bne.n	800e3f6 <USBD_GetString+0x4e>
    }
  }
}
 800e424:	bf00      	nop
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e434:	2300      	movs	r3, #0
 800e436:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e438:	e005      	b.n	800e446 <USBD_GetLen+0x1a>
  {
    len++;
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	3301      	adds	r3, #1
 800e43e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	3301      	adds	r3, #1
 800e444:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1f5      	bne.n	800e43a <USBD_GetLen+0xe>
  }

  return len;
 800e44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	bc80      	pop	{r7}
 800e458:	4770      	bx	lr

0800e45a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b084      	sub	sp, #16
 800e45e:	af00      	add	r7, sp, #0
 800e460:	60f8      	str	r0, [r7, #12]
 800e462:	60b9      	str	r1, [r7, #8]
 800e464:	4613      	mov	r3, r2
 800e466:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2202      	movs	r2, #2
 800e46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e470:	88fa      	ldrh	r2, [r7, #6]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e476:	88fa      	ldrh	r2, [r7, #6]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e47c:	88fb      	ldrh	r3, [r7, #6]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	2100      	movs	r1, #0
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f003 fa05 	bl	8011892 <USBD_LL_Transmit>

  return USBD_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b084      	sub	sp, #16
 800e496:	af00      	add	r7, sp, #0
 800e498:	60f8      	str	r0, [r7, #12]
 800e49a:	60b9      	str	r1, [r7, #8]
 800e49c:	4613      	mov	r3, r2
 800e49e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e4a0:	88fb      	ldrh	r3, [r7, #6]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f003 f9f3 	bl	8011892 <USBD_LL_Transmit>

  return USBD_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b084      	sub	sp, #16
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	60f8      	str	r0, [r7, #12]
 800e4be:	60b9      	str	r1, [r7, #8]
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4c4:	88fb      	ldrh	r3, [r7, #6]
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f003 fa04 	bl	80118d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2204      	movs	r2, #4
 800e4e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f003 f9ce 	bl	8011892 <USBD_LL_Transmit>

  return USBD_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2205      	movs	r2, #5
 800e50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e510:	2300      	movs	r3, #0
 800e512:	2200      	movs	r2, #0
 800e514:	2100      	movs	r1, #0
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f003 f9de 	bl	80118d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	4a08      	ldr	r2, [pc, #32]	; (800e558 <disk_status+0x30>)
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4413      	add	r3, r2
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	79fa      	ldrb	r2, [r7, #7]
 800e540:	4905      	ldr	r1, [pc, #20]	; (800e558 <disk_status+0x30>)
 800e542:	440a      	add	r2, r1
 800e544:	7a12      	ldrb	r2, [r2, #8]
 800e546:	4610      	mov	r0, r2
 800e548:	4798      	blx	r3
 800e54a:	4603      	mov	r3, r0
 800e54c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20000e8c 	.word	0x20000e8c

0800e55c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	4603      	mov	r3, r0
 800e564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e566:	2300      	movs	r3, #0
 800e568:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	4a0d      	ldr	r2, [pc, #52]	; (800e5a4 <disk_initialize+0x48>)
 800e56e:	5cd3      	ldrb	r3, [r2, r3]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d111      	bne.n	800e598 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800e574:	79fb      	ldrb	r3, [r7, #7]
 800e576:	4a0b      	ldr	r2, [pc, #44]	; (800e5a4 <disk_initialize+0x48>)
 800e578:	2101      	movs	r1, #1
 800e57a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e57c:	79fb      	ldrb	r3, [r7, #7]
 800e57e:	4a09      	ldr	r2, [pc, #36]	; (800e5a4 <disk_initialize+0x48>)
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	4413      	add	r3, r2
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	79fa      	ldrb	r2, [r7, #7]
 800e58a:	4906      	ldr	r1, [pc, #24]	; (800e5a4 <disk_initialize+0x48>)
 800e58c:	440a      	add	r2, r1
 800e58e:	7a12      	ldrb	r2, [r2, #8]
 800e590:	4610      	mov	r0, r2
 800e592:	4798      	blx	r3
 800e594:	4603      	mov	r3, r0
 800e596:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e598:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000e8c 	.word	0x20000e8c

0800e5a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e5a8:	b590      	push	{r4, r7, lr}
 800e5aa:	b087      	sub	sp, #28
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60b9      	str	r1, [r7, #8]
 800e5b0:	607a      	str	r2, [r7, #4]
 800e5b2:	603b      	str	r3, [r7, #0]
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ba:	4a0a      	ldr	r2, [pc, #40]	; (800e5e4 <disk_read+0x3c>)
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	689c      	ldr	r4, [r3, #8]
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	4a07      	ldr	r2, [pc, #28]	; (800e5e4 <disk_read+0x3c>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	7a18      	ldrb	r0, [r3, #8]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	68b9      	ldr	r1, [r7, #8]
 800e5d2:	47a0      	blx	r4
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	371c      	adds	r7, #28
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd90      	pop	{r4, r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20000e8c 	.word	0x20000e8c

0800e5e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e5e8:	b590      	push	{r4, r7, lr}
 800e5ea:	b087      	sub	sp, #28
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60b9      	str	r1, [r7, #8]
 800e5f0:	607a      	str	r2, [r7, #4]
 800e5f2:	603b      	str	r3, [r7, #0]
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	4a0a      	ldr	r2, [pc, #40]	; (800e624 <disk_write+0x3c>)
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	68dc      	ldr	r4, [r3, #12]
 800e604:	7bfb      	ldrb	r3, [r7, #15]
 800e606:	4a07      	ldr	r2, [pc, #28]	; (800e624 <disk_write+0x3c>)
 800e608:	4413      	add	r3, r2
 800e60a:	7a18      	ldrb	r0, [r3, #8]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	47a0      	blx	r4
 800e614:	4603      	mov	r3, r0
 800e616:	75fb      	strb	r3, [r7, #23]
  return res;
 800e618:	7dfb      	ldrb	r3, [r7, #23]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	371c      	adds	r7, #28
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd90      	pop	{r4, r7, pc}
 800e622:	bf00      	nop
 800e624:	20000e8c 	.word	0x20000e8c

0800e628 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	4603      	mov	r3, r0
 800e630:	603a      	str	r2, [r7, #0]
 800e632:	71fb      	strb	r3, [r7, #7]
 800e634:	460b      	mov	r3, r1
 800e636:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e638:	79fb      	ldrb	r3, [r7, #7]
 800e63a:	4a09      	ldr	r2, [pc, #36]	; (800e660 <disk_ioctl+0x38>)
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	79fa      	ldrb	r2, [r7, #7]
 800e646:	4906      	ldr	r1, [pc, #24]	; (800e660 <disk_ioctl+0x38>)
 800e648:	440a      	add	r2, r1
 800e64a:	7a10      	ldrb	r0, [r2, #8]
 800e64c:	79b9      	ldrb	r1, [r7, #6]
 800e64e:	683a      	ldr	r2, [r7, #0]
 800e650:	4798      	blx	r3
 800e652:	4603      	mov	r3, r0
 800e654:	73fb      	strb	r3, [r7, #15]
  return res;
 800e656:	7bfb      	ldrb	r3, [r7, #15]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20000e8c 	.word	0x20000e8c

0800e664 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e664:	b480      	push	{r7}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800e678:	e007      	b.n	800e68a <mem_cpy+0x26>
		*d++ = *s++;
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	1c53      	adds	r3, r2, #1
 800e67e:	613b      	str	r3, [r7, #16]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	1c59      	adds	r1, r3, #1
 800e684:	6179      	str	r1, [r7, #20]
 800e686:	7812      	ldrb	r2, [r2, #0]
 800e688:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	1e5a      	subs	r2, r3, #1
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1f2      	bne.n	800e67a <mem_cpy+0x16>
}
 800e694:	bf00      	nop
 800e696:	bf00      	nop
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bc80      	pop	{r7}
 800e69e:	4770      	bx	lr

0800e6a0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e6a0:	b480      	push	{r7}
 800e6a2:	b087      	sub	sp, #28
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800e6b0:	e005      	b.n	800e6be <mem_set+0x1e>
		*d++ = (BYTE)val;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	617a      	str	r2, [r7, #20]
 800e6b8:	68ba      	ldr	r2, [r7, #8]
 800e6ba:	b2d2      	uxtb	r2, r2
 800e6bc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	1e5a      	subs	r2, r3, #1
 800e6c2:	607a      	str	r2, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1f4      	bne.n	800e6b2 <mem_set+0x12>
}
 800e6c8:	bf00      	nop
 800e6ca:	bf00      	nop
 800e6cc:	371c      	adds	r7, #28
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bc80      	pop	{r7}
 800e6d2:	4770      	bx	lr

0800e6d4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800e6d4:	b480      	push	{r7}
 800e6d6:	b089      	sub	sp, #36	; 0x24
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	61fb      	str	r3, [r7, #28]
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800e6ec:	bf00      	nop
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	1e5a      	subs	r2, r3, #1
 800e6f2:	607a      	str	r2, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00d      	beq.n	800e714 <mem_cmp+0x40>
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	61fa      	str	r2, [r7, #28]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	4619      	mov	r1, r3
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	61ba      	str	r2, [r7, #24]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	1acb      	subs	r3, r1, r3
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0ec      	beq.n	800e6ee <mem_cmp+0x1a>
	return r;
 800e714:	697b      	ldr	r3, [r7, #20]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3724      	adds	r7, #36	; 0x24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bc80      	pop	{r7}
 800e71e:	4770      	bx	lr

0800e720 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e72a:	e002      	b.n	800e732 <chk_chr+0x12>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3301      	adds	r3, #1
 800e730:	607b      	str	r3, [r7, #4]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d005      	beq.n	800e746 <chk_chr+0x26>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	461a      	mov	r2, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	4293      	cmp	r3, r2
 800e744:	d1f2      	bne.n	800e72c <chk_chr+0xc>
	return *str;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	781b      	ldrb	r3, [r3, #0]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	bc80      	pop	{r7}
 800e752:	4770      	bx	lr

0800e754 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e75e:	2300      	movs	r3, #0
 800e760:	60bb      	str	r3, [r7, #8]
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	e038      	b.n	800e7da <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800e768:	492f      	ldr	r1, [pc, #188]	; (800e828 <chk_lock+0xd4>)
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	4613      	mov	r3, r2
 800e76e:	005b      	lsls	r3, r3, #1
 800e770:	4413      	add	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	440b      	add	r3, r1
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d029      	beq.n	800e7d0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e77c:	492a      	ldr	r1, [pc, #168]	; (800e828 <chk_lock+0xd4>)
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	4613      	mov	r3, r2
 800e782:	005b      	lsls	r3, r3, #1
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	440b      	add	r3, r1
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e792:	429a      	cmp	r2, r3
 800e794:	d11e      	bne.n	800e7d4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800e796:	4924      	ldr	r1, [pc, #144]	; (800e828 <chk_lock+0xd4>)
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	4613      	mov	r3, r2
 800e79c:	005b      	lsls	r3, r3, #1
 800e79e:	4413      	add	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	440b      	add	r3, r1
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d110      	bne.n	800e7d4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e7b2:	491d      	ldr	r1, [pc, #116]	; (800e828 <chk_lock+0xd4>)
 800e7b4:	68fa      	ldr	r2, [r7, #12]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	4413      	add	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	440b      	add	r3, r1
 800e7c0:	3308      	adds	r3, #8
 800e7c2:	881a      	ldrh	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d102      	bne.n	800e7d4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e7ce:	e007      	b.n	800e7e0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d9c3      	bls.n	800e768 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d109      	bne.n	800e7fa <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d102      	bne.n	800e7f2 <chk_lock+0x9e>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d101      	bne.n	800e7f6 <chk_lock+0xa2>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	e013      	b.n	800e81e <chk_lock+0xca>
 800e7f6:	2312      	movs	r3, #18
 800e7f8:	e011      	b.n	800e81e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10b      	bne.n	800e818 <chk_lock+0xc4>
 800e800:	4909      	ldr	r1, [pc, #36]	; (800e828 <chk_lock+0xd4>)
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4613      	mov	r3, r2
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	4413      	add	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	440b      	add	r3, r1
 800e80e:	330a      	adds	r3, #10
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e816:	d101      	bne.n	800e81c <chk_lock+0xc8>
 800e818:	2310      	movs	r3, #16
 800e81a:	e000      	b.n	800e81e <chk_lock+0xca>
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3714      	adds	r7, #20
 800e822:	46bd      	mov	sp, r7
 800e824:	bc80      	pop	{r7}
 800e826:	4770      	bx	lr
 800e828:	20000e74 	.word	0x20000e74

0800e82c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e832:	2300      	movs	r3, #0
 800e834:	607b      	str	r3, [r7, #4]
 800e836:	e002      	b.n	800e83e <enq_lock+0x12>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	3301      	adds	r3, #1
 800e83c:	607b      	str	r3, [r7, #4]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d809      	bhi.n	800e858 <enq_lock+0x2c>
 800e844:	490a      	ldr	r1, [pc, #40]	; (800e870 <enq_lock+0x44>)
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	4613      	mov	r3, r2
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	4413      	add	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	440b      	add	r3, r1
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1ef      	bne.n	800e838 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2b02      	cmp	r3, #2
 800e85c:	bf14      	ite	ne
 800e85e:	2301      	movne	r3, #1
 800e860:	2300      	moveq	r3, #0
 800e862:	b2db      	uxtb	r3, r3
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	bc80      	pop	{r7}
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000e74 	.word	0x20000e74

0800e874 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e87e:	2300      	movs	r3, #0
 800e880:	60fb      	str	r3, [r7, #12]
 800e882:	e02b      	b.n	800e8dc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800e884:	4955      	ldr	r1, [pc, #340]	; (800e9dc <inc_lock+0x168>)
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	440b      	add	r3, r1
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d11b      	bne.n	800e8d6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800e89e:	494f      	ldr	r1, [pc, #316]	; (800e9dc <inc_lock+0x168>)
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	4413      	add	r3, r2
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	440b      	add	r3, r1
 800e8ac:	3304      	adds	r3, #4
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d10d      	bne.n	800e8d6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800e8ba:	4948      	ldr	r1, [pc, #288]	; (800e9dc <inc_lock+0x168>)
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	440b      	add	r3, r1
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	881a      	ldrh	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d006      	beq.n	800e8e4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d9d0      	bls.n	800e884 <inc_lock+0x10>
 800e8e2:	e000      	b.n	800e8e6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800e8e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d145      	bne.n	800e978 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	e002      	b.n	800e8f8 <inc_lock+0x84>
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	60fb      	str	r3, [r7, #12]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d809      	bhi.n	800e912 <inc_lock+0x9e>
 800e8fe:	4937      	ldr	r1, [pc, #220]	; (800e9dc <inc_lock+0x168>)
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	4613      	mov	r3, r2
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	4413      	add	r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	440b      	add	r3, r1
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1ef      	bne.n	800e8f2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2b02      	cmp	r3, #2
 800e916:	d101      	bne.n	800e91c <inc_lock+0xa8>
 800e918:	2300      	movs	r3, #0
 800e91a:	e05a      	b.n	800e9d2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800e922:	482e      	ldr	r0, [pc, #184]	; (800e9dc <inc_lock+0x168>)
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	4613      	mov	r3, r2
 800e928:	005b      	lsls	r3, r3, #1
 800e92a:	4413      	add	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4403      	add	r3, r0
 800e930:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800e938:	4828      	ldr	r0, [pc, #160]	; (800e9dc <inc_lock+0x168>)
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	4613      	mov	r3, r2
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	4413      	add	r3, r2
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	4403      	add	r3, r0
 800e946:	3304      	adds	r3, #4
 800e948:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800e950:	4922      	ldr	r1, [pc, #136]	; (800e9dc <inc_lock+0x168>)
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	4613      	mov	r3, r2
 800e956:	005b      	lsls	r3, r3, #1
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	440b      	add	r3, r1
 800e95e:	3308      	adds	r3, #8
 800e960:	4602      	mov	r2, r0
 800e962:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800e964:	491d      	ldr	r1, [pc, #116]	; (800e9dc <inc_lock+0x168>)
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	4613      	mov	r3, r2
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	4413      	add	r3, r2
 800e96e:	009b      	lsls	r3, r3, #2
 800e970:	440b      	add	r3, r1
 800e972:	330a      	adds	r3, #10
 800e974:	2200      	movs	r2, #0
 800e976:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00c      	beq.n	800e998 <inc_lock+0x124>
 800e97e:	4917      	ldr	r1, [pc, #92]	; (800e9dc <inc_lock+0x168>)
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	4613      	mov	r3, r2
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	4413      	add	r3, r2
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	440b      	add	r3, r1
 800e98c:	330a      	adds	r3, #10
 800e98e:	881b      	ldrh	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <inc_lock+0x124>
 800e994:	2300      	movs	r3, #0
 800e996:	e01c      	b.n	800e9d2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10b      	bne.n	800e9b6 <inc_lock+0x142>
 800e99e:	490f      	ldr	r1, [pc, #60]	; (800e9dc <inc_lock+0x168>)
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	4413      	add	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	440b      	add	r3, r1
 800e9ac:	330a      	adds	r3, #10
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	b299      	uxth	r1, r3
 800e9b4:	e001      	b.n	800e9ba <inc_lock+0x146>
 800e9b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9ba:	4808      	ldr	r0, [pc, #32]	; (800e9dc <inc_lock+0x168>)
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	4403      	add	r3, r0
 800e9c8:	330a      	adds	r3, #10
 800e9ca:	460a      	mov	r2, r1
 800e9cc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	3301      	adds	r3, #1
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3714      	adds	r7, #20
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bc80      	pop	{r7}
 800e9da:	4770      	bx	lr
 800e9dc:	20000e74 	.word	0x20000e74

0800e9e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	607b      	str	r3, [r7, #4]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d82e      	bhi.n	800ea52 <dec_lock+0x72>
		n = Files[i].ctr;
 800e9f4:	491b      	ldr	r1, [pc, #108]	; (800ea64 <dec_lock+0x84>)
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	005b      	lsls	r3, r3, #1
 800e9fc:	4413      	add	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	440b      	add	r3, r1
 800ea02:	330a      	adds	r3, #10
 800ea04:	881b      	ldrh	r3, [r3, #0]
 800ea06:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ea08:	89fb      	ldrh	r3, [r7, #14]
 800ea0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea0e:	d101      	bne.n	800ea14 <dec_lock+0x34>
 800ea10:	2300      	movs	r3, #0
 800ea12:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800ea14:	89fb      	ldrh	r3, [r7, #14]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d002      	beq.n	800ea20 <dec_lock+0x40>
 800ea1a:	89fb      	ldrh	r3, [r7, #14]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ea20:	4910      	ldr	r1, [pc, #64]	; (800ea64 <dec_lock+0x84>)
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	4613      	mov	r3, r2
 800ea26:	005b      	lsls	r3, r3, #1
 800ea28:	4413      	add	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	440b      	add	r3, r1
 800ea2e:	330a      	adds	r3, #10
 800ea30:	89fa      	ldrh	r2, [r7, #14]
 800ea32:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea34:	89fb      	ldrh	r3, [r7, #14]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d108      	bne.n	800ea4c <dec_lock+0x6c>
 800ea3a:	490a      	ldr	r1, [pc, #40]	; (800ea64 <dec_lock+0x84>)
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	005b      	lsls	r3, r3, #1
 800ea42:	4413      	add	r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	440b      	add	r3, r1
 800ea48:	2200      	movs	r2, #0
 800ea4a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	737b      	strb	r3, [r7, #13]
 800ea50:	e001      	b.n	800ea56 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea52:	2302      	movs	r3, #2
 800ea54:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ea56:	7b7b      	ldrb	r3, [r7, #13]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bc80      	pop	{r7}
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20000e74 	.word	0x20000e74

0800ea68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ea70:	2300      	movs	r3, #0
 800ea72:	60fb      	str	r3, [r7, #12]
 800ea74:	e016      	b.n	800eaa4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ea76:	4910      	ldr	r1, [pc, #64]	; (800eab8 <clear_lock+0x50>)
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	4413      	add	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	440b      	add	r3, r1
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d108      	bne.n	800ea9e <clear_lock+0x36>
 800ea8c:	490a      	ldr	r1, [pc, #40]	; (800eab8 <clear_lock+0x50>)
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	4613      	mov	r3, r2
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	4413      	add	r3, r2
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	440b      	add	r3, r1
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d9e5      	bls.n	800ea76 <clear_lock+0xe>
	}
}
 800eaaa:	bf00      	nop
 800eaac:	bf00      	nop
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bc80      	pop	{r7}
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	20000e74 	.word	0x20000e74

0800eabc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eac4:	2300      	movs	r3, #0
 800eac6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d038      	beq.n	800eb44 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ead8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	2301      	movs	r3, #1
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	f7ff fd7f 	bl	800e5e8 <disk_write>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	73fb      	strb	r3, [r7, #15]
 800eaf4:	e026      	b.n	800eb44 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	1ad2      	subs	r2, r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d218      	bcs.n	800eb44 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800eb18:	613b      	str	r3, [r7, #16]
 800eb1a:	e010      	b.n	800eb3e <sync_window+0x82>
					wsect += fs->fsize;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	4413      	add	r3, r2
 800eb26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	2301      	movs	r3, #1
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	f7ff fd58 	bl	800e5e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	613b      	str	r3, [r7, #16]
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d8eb      	bhi.n	800eb1c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3718      	adds	r7, #24
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b084      	sub	sp, #16
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d01b      	beq.n	800eba0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7ff ffa7 	bl	800eabc <sync_window>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d113      	bne.n	800eba0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eb7e:	6879      	ldr	r1, [r7, #4]
 800eb80:	2301      	movs	r3, #1
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	f7ff fd10 	bl	800e5a8 <disk_read>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d004      	beq.n	800eb98 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb92:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	683a      	ldr	r2, [r7, #0]
 800eb9c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b084      	sub	sp, #16
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff ff82 	bl	800eabc <sync_window>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f040 809b 	bne.w	800ecfa <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ebca:	2b03      	cmp	r3, #3
 800ebcc:	f040 8088 	bne.w	800ece0 <sync_fs+0x136>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	f040 8082 	bne.w	800ece0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7ff fd5b 	bl	800e6a0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2255      	movs	r2, #85	; 0x55
 800ebee:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	22aa      	movs	r2, #170	; 0xaa
 800ebf6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2252      	movs	r2, #82	; 0x52
 800ebfe:	701a      	strb	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2252      	movs	r2, #82	; 0x52
 800ec04:	705a      	strb	r2, [r3, #1]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2261      	movs	r2, #97	; 0x61
 800ec0a:	709a      	strb	r2, [r3, #2]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2241      	movs	r2, #65	; 0x41
 800ec10:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2272      	movs	r2, #114	; 0x72
 800ec16:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2272      	movs	r2, #114	; 0x72
 800ec1e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2241      	movs	r2, #65	; 0x41
 800ec26:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2261      	movs	r2, #97	; 0x61
 800ec2e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	0a1b      	lsrs	r3, r3, #8
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec5a:	0c1b      	lsrs	r3, r3, #16
 800ec5c:	b2da      	uxtb	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec6a:	0e1b      	lsrs	r3, r3, #24
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	0a1b      	lsrs	r3, r3, #8
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ec9c:	0c1b      	lsrs	r3, r3, #16
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ecac:	0e1b      	lsrs	r3, r3, #24
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ecca:	6879      	ldr	r1, [r7, #4]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	f7ff fc88 	bl	800e5e8 <disk_write>
			fs->fsi_flag = 0;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ece6:	2200      	movs	r2, #0
 800ece8:	2100      	movs	r1, #0
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff fc9c 	bl	800e628 <disk_ioctl>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <sync_fs+0x150>
			res = FR_DISK_ERR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ecfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	3b02      	subs	r3, #2
 800ed12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed1a:	3b02      	subs	r3, #2
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d301      	bcc.n	800ed26 <clust2sect+0x22>
 800ed22:	2300      	movs	r3, #0
 800ed24:	e00a      	b.n	800ed3c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	fb03 f202 	mul.w	r2, r3, r2
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800ed3a:	4413      	add	r3, r2
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bc80      	pop	{r7}
 800ed44:	4770      	bx	lr

0800ed46 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b086      	sub	sp, #24
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d905      	bls.n	800ed62 <get_fat+0x1c>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d302      	bcc.n	800ed68 <get_fat+0x22>
		val = 1;	/* Internal error */
 800ed62:	2301      	movs	r3, #1
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	e0a3      	b.n	800eeb0 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ed68:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ed74:	2b03      	cmp	r3, #3
 800ed76:	d068      	beq.n	800ee4a <get_fat+0x104>
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	f300 808f 	bgt.w	800ee9c <get_fat+0x156>
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d002      	beq.n	800ed88 <get_fat+0x42>
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d040      	beq.n	800ee08 <get_fat+0xc2>
 800ed86:	e089      	b.n	800ee9c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	085b      	lsrs	r3, r3, #1
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	4413      	add	r3, r2
 800ed94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	0a5b      	lsrs	r3, r3, #9
 800eda0:	4413      	add	r3, r2
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff fed2 	bl	800eb4e <move_window>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d178      	bne.n	800eea2 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	60fa      	str	r2, [r7, #12]
 800edb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	5cd3      	ldrb	r3, [r2, r3]
 800edbe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	0a5b      	lsrs	r3, r3, #9
 800edca:	4413      	add	r3, r2
 800edcc:	4619      	mov	r1, r3
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7ff febd 	bl	800eb4e <move_window>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d165      	bne.n	800eea6 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	5cd3      	ldrb	r3, [r2, r3]
 800ede4:	021b      	lsls	r3, r3, #8
 800ede6:	461a      	mov	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	4313      	orrs	r3, r2
 800edec:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	f003 0301 	and.w	r3, r3, #1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d002      	beq.n	800edfe <get_fat+0xb8>
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	091b      	lsrs	r3, r3, #4
 800edfc:	e002      	b.n	800ee04 <get_fat+0xbe>
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee04:	617b      	str	r3, [r7, #20]
			break;
 800ee06:	e053      	b.n	800eeb0 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	0a1b      	lsrs	r3, r3, #8
 800ee12:	4413      	add	r3, r2
 800ee14:	4619      	mov	r1, r3
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7ff fe99 	bl	800eb4e <move_window>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d143      	bne.n	800eeaa <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	3301      	adds	r3, #1
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	021b      	lsls	r3, r3, #8
 800ee38:	b21a      	sxth	r2, r3
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	b21b      	sxth	r3, r3
 800ee40:	4313      	orrs	r3, r2
 800ee42:	b21b      	sxth	r3, r3
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	617b      	str	r3, [r7, #20]
			break;
 800ee48:	e032      	b.n	800eeb0 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	09db      	lsrs	r3, r3, #7
 800ee54:	4413      	add	r3, r2
 800ee56:	4619      	mov	r1, r3
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f7ff fe78 	bl	800eb4e <move_window>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d124      	bne.n	800eeae <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	4413      	add	r3, r2
 800ee70:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	3303      	adds	r3, #3
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	061a      	lsls	r2, r3, #24
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	3302      	adds	r3, #2
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	041b      	lsls	r3, r3, #16
 800ee82:	4313      	orrs	r3, r2
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	3201      	adds	r2, #1
 800ee88:	7812      	ldrb	r2, [r2, #0]
 800ee8a:	0212      	lsls	r2, r2, #8
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	693a      	ldr	r2, [r7, #16]
 800ee90:	7812      	ldrb	r2, [r2, #0]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ee98:	617b      	str	r3, [r7, #20]
			break;
 800ee9a:	e009      	b.n	800eeb0 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	617b      	str	r3, [r7, #20]
 800eea0:	e006      	b.n	800eeb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eea2:	bf00      	nop
 800eea4:	e004      	b.n	800eeb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eea6:	bf00      	nop
 800eea8:	e002      	b.n	800eeb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eeaa:	bf00      	nop
 800eeac:	e000      	b.n	800eeb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eeae:	bf00      	nop
		}
	}

	return val;
 800eeb0:	697b      	ldr	r3, [r7, #20]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b088      	sub	sp, #32
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	60f8      	str	r0, [r7, #12]
 800eec2:	60b9      	str	r1, [r7, #8]
 800eec4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d905      	bls.n	800eed8 <put_fat+0x1e>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d302      	bcc.n	800eede <put_fat+0x24>
		res = FR_INT_ERR;
 800eed8:	2302      	movs	r3, #2
 800eeda:	77fb      	strb	r3, [r7, #31]
 800eedc:	e0f6      	b.n	800f0cc <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eee4:	2b03      	cmp	r3, #3
 800eee6:	f000 809e 	beq.w	800f026 <put_fat+0x16c>
 800eeea:	2b03      	cmp	r3, #3
 800eeec:	f300 80e4 	bgt.w	800f0b8 <put_fat+0x1fe>
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d002      	beq.n	800eefa <put_fat+0x40>
 800eef4:	2b02      	cmp	r3, #2
 800eef6:	d06f      	beq.n	800efd8 <put_fat+0x11e>
 800eef8:	e0de      	b.n	800f0b8 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	617b      	str	r3, [r7, #20]
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	085b      	lsrs	r3, r3, #1
 800ef02:	697a      	ldr	r2, [r7, #20]
 800ef04:	4413      	add	r3, r2
 800ef06:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	0a5b      	lsrs	r3, r3, #9
 800ef12:	4413      	add	r3, r2
 800ef14:	4619      	mov	r1, r3
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7ff fe19 	bl	800eb4e <move_window>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef20:	7ffb      	ldrb	r3, [r7, #31]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f040 80cb 	bne.w	800f0be <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	1c5a      	adds	r2, r3, #1
 800ef2c:	617a      	str	r2, [r7, #20]
 800ef2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	4413      	add	r3, r2
 800ef36:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00d      	beq.n	800ef5e <put_fat+0xa4>
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	b25b      	sxtb	r3, r3
 800ef48:	f003 030f 	and.w	r3, r3, #15
 800ef4c:	b25a      	sxtb	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	011b      	lsls	r3, r3, #4
 800ef54:	b25b      	sxtb	r3, r3
 800ef56:	4313      	orrs	r3, r2
 800ef58:	b25b      	sxtb	r3, r3
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	e001      	b.n	800ef62 <put_fat+0xa8>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	69ba      	ldr	r2, [r7, #24]
 800ef64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	0a5b      	lsrs	r3, r3, #9
 800ef78:	4413      	add	r3, r2
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f7ff fde6 	bl	800eb4e <move_window>
 800ef82:	4603      	mov	r3, r0
 800ef84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef86:	7ffb      	ldrb	r3, [r7, #31]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f040 809a 	bne.w	800f0c2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	f003 0301 	and.w	r3, r3, #1
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d003      	beq.n	800efac <put_fat+0xf2>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	091b      	lsrs	r3, r3, #4
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	e00e      	b.n	800efca <put_fat+0x110>
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	b25b      	sxtb	r3, r3
 800efb2:	f023 030f 	bic.w	r3, r3, #15
 800efb6:	b25a      	sxtb	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	0a1b      	lsrs	r3, r3, #8
 800efbc:	b25b      	sxtb	r3, r3
 800efbe:	f003 030f 	and.w	r3, r3, #15
 800efc2:	b25b      	sxtb	r3, r3
 800efc4:	4313      	orrs	r3, r2
 800efc6:	b25b      	sxtb	r3, r3
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2201      	movs	r2, #1
 800efd2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800efd6:	e079      	b.n	800f0cc <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	0a1b      	lsrs	r3, r3, #8
 800efe2:	4413      	add	r3, r2
 800efe4:	4619      	mov	r1, r3
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f7ff fdb1 	bl	800eb4e <move_window>
 800efec:	4603      	mov	r3, r0
 800efee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eff0:	7ffb      	ldrb	r3, [r7, #31]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d167      	bne.n	800f0c6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	4413      	add	r3, r2
 800f002:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	b2da      	uxtb	r2, r3
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	701a      	strb	r2, [r3, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	0a1b      	lsrs	r3, r3, #8
 800f012:	b29a      	uxth	r2, r3
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	3301      	adds	r3, #1
 800f018:	b2d2      	uxtb	r2, r2
 800f01a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800f024:	e052      	b.n	800f0cc <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	09db      	lsrs	r3, r3, #7
 800f030:	4413      	add	r3, r2
 800f032:	4619      	mov	r1, r3
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff fd8a 	bl	800eb4e <move_window>
 800f03a:	4603      	mov	r3, r0
 800f03c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f03e:	7ffb      	ldrb	r3, [r7, #31]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d142      	bne.n	800f0ca <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	4413      	add	r3, r2
 800f050:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	3303      	adds	r3, #3
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	061a      	lsls	r2, r3, #24
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	3302      	adds	r3, #2
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	041b      	lsls	r3, r3, #16
 800f062:	4313      	orrs	r3, r2
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	3201      	adds	r2, #1
 800f068:	7812      	ldrb	r2, [r2, #0]
 800f06a:	0212      	lsls	r2, r2, #8
 800f06c:	4313      	orrs	r3, r2
 800f06e:	69ba      	ldr	r2, [r7, #24]
 800f070:	7812      	ldrb	r2, [r2, #0]
 800f072:	4313      	orrs	r3, r2
 800f074:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	b2da      	uxtb	r2, r3
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	701a      	strb	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	3301      	adds	r3, #1
 800f092:	b2d2      	uxtb	r2, r2
 800f094:	701a      	strb	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	0c1a      	lsrs	r2, r3, #16
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	3302      	adds	r3, #2
 800f09e:	b2d2      	uxtb	r2, r2
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	0e1a      	lsrs	r2, r3, #24
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	3303      	adds	r3, #3
 800f0aa:	b2d2      	uxtb	r2, r2
 800f0ac:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800f0b6:	e009      	b.n	800f0cc <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800f0b8:	2302      	movs	r3, #2
 800f0ba:	77fb      	strb	r3, [r7, #31]
 800f0bc:	e006      	b.n	800f0cc <put_fat+0x212>
			if (res != FR_OK) break;
 800f0be:	bf00      	nop
 800f0c0:	e004      	b.n	800f0cc <put_fat+0x212>
			if (res != FR_OK) break;
 800f0c2:	bf00      	nop
 800f0c4:	e002      	b.n	800f0cc <put_fat+0x212>
			if (res != FR_OK) break;
 800f0c6:	bf00      	nop
 800f0c8:	e000      	b.n	800f0cc <put_fat+0x212>
			if (res != FR_OK) break;
 800f0ca:	bf00      	nop
		}
	}

	return res;
 800f0cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3720      	adds	r7, #32
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b084      	sub	sp, #16
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d905      	bls.n	800f0f2 <remove_chain+0x1c>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f0ec:	683a      	ldr	r2, [r7, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d302      	bcc.n	800f0f8 <remove_chain+0x22>
		res = FR_INT_ERR;
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	73fb      	strb	r3, [r7, #15]
 800f0f6:	e043      	b.n	800f180 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f0fc:	e036      	b.n	800f16c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff fe20 	bl	800ed46 <get_fat>
 800f106:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d035      	beq.n	800f17a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d102      	bne.n	800f11a <remove_chain+0x44>
 800f114:	2302      	movs	r3, #2
 800f116:	73fb      	strb	r3, [r7, #15]
 800f118:	e032      	b.n	800f180 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f120:	d102      	bne.n	800f128 <remove_chain+0x52>
 800f122:	2301      	movs	r3, #1
 800f124:	73fb      	strb	r3, [r7, #15]
 800f126:	e02b      	b.n	800f180 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800f128:	2200      	movs	r2, #0
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff fec4 	bl	800eeba <put_fat>
 800f132:	4603      	mov	r3, r0
 800f134:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f136:	7bfb      	ldrb	r3, [r7, #15]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d120      	bne.n	800f17e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f146:	d00f      	beq.n	800f168 <remove_chain+0x92>
				fs->free_clust++;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f14e:	1c5a      	adds	r2, r3, #1
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800f15c:	f043 0301 	orr.w	r3, r3, #1
 800f160:	b2da      	uxtb	r2, r3
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	429a      	cmp	r2, r3
 800f176:	d3c2      	bcc.n	800f0fe <remove_chain+0x28>
 800f178:	e002      	b.n	800f180 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800f17a:	bf00      	nop
 800f17c:	e000      	b.n	800f180 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800f17e:	bf00      	nop
		}
	}

	return res;
 800f180:	7bfb      	ldrb	r3, [r7, #15]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}

0800f18a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b086      	sub	sp, #24
 800f18e:	af00      	add	r7, sp, #0
 800f190:	6078      	str	r0, [r7, #4]
 800f192:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10f      	bne.n	800f1ba <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f1a0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d005      	beq.n	800f1b4 <create_chain+0x2a>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1ae:	693a      	ldr	r2, [r7, #16]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d31c      	bcc.n	800f1ee <create_chain+0x64>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	613b      	str	r3, [r7, #16]
 800f1b8:	e019      	b.n	800f1ee <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7ff fdc2 	bl	800ed46 <get_fat>
 800f1c2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d801      	bhi.n	800f1ce <create_chain+0x44>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e076      	b.n	800f2bc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d4:	d101      	bne.n	800f1da <create_chain+0x50>
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	e070      	b.n	800f2bc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d201      	bcs.n	800f1ea <create_chain+0x60>
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	e068      	b.n	800f2bc <create_chain+0x132>
		scl = clst;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	429a      	cmp	r2, r3
 800f202:	d307      	bcc.n	800f214 <create_chain+0x8a>
			ncl = 2;
 800f204:	2302      	movs	r3, #2
 800f206:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800f208:	697a      	ldr	r2, [r7, #20]
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d901      	bls.n	800f214 <create_chain+0x8a>
 800f210:	2300      	movs	r3, #0
 800f212:	e053      	b.n	800f2bc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800f214:	6979      	ldr	r1, [r7, #20]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff fd95 	bl	800ed46 <get_fat>
 800f21c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00e      	beq.n	800f242 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f22a:	d002      	beq.n	800f232 <create_chain+0xa8>
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d101      	bne.n	800f236 <create_chain+0xac>
			return cs;
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	e042      	b.n	800f2bc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d1d9      	bne.n	800f1f2 <create_chain+0x68>
 800f23e:	2300      	movs	r3, #0
 800f240:	e03c      	b.n	800f2bc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800f242:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800f244:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800f248:	6979      	ldr	r1, [r7, #20]
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fe35 	bl	800eeba <put_fat>
 800f250:	4603      	mov	r3, r0
 800f252:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d109      	bne.n	800f26e <create_chain+0xe4>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d006      	beq.n	800f26e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff fe28 	bl	800eeba <put_fat>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d11a      	bne.n	800f2aa <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	697a      	ldr	r2, [r7, #20]
 800f278:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f286:	d018      	beq.n	800f2ba <create_chain+0x130>
			fs->free_clust--;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f28e:	1e5a      	subs	r2, r3, #1
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800f29c:	f043 0301 	orr.w	r3, r3, #1
 800f2a0:	b2da      	uxtb	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800f2a8:	e007      	b.n	800f2ba <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d102      	bne.n	800f2b6 <create_chain+0x12c>
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b4:	e000      	b.n	800f2b8 <create_chain+0x12e>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800f2ba:	697b      	ldr	r3, [r7, #20]
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3718      	adds	r7, #24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b087      	sub	sp, #28
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	0a5b      	lsrs	r3, r3, #9
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f2e2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800f2e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	1d1a      	adds	r2, r3, #4
 800f2f0:	613a      	str	r2, [r7, #16]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d101      	bne.n	800f300 <clmt_clust+0x3c>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	e010      	b.n	800f322 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	429a      	cmp	r2, r3
 800f306:	d307      	bcc.n	800f318 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	617b      	str	r3, [r7, #20]
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	3304      	adds	r3, #4
 800f314:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f316:	e7e9      	b.n	800f2ec <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800f318:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	4413      	add	r3, r2
}
 800f322:	4618      	mov	r0, r3
 800f324:	371c      	adds	r7, #28
 800f326:	46bd      	mov	sp, r7
 800f328:	bc80      	pop	{r7}
 800f32a:	4770      	bx	lr

0800f32c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	b29a      	uxth	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800f346:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d007      	beq.n	800f35e <dir_sdi+0x32>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f358:	697a      	ldr	r2, [r7, #20]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d301      	bcc.n	800f362 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f35e:	2302      	movs	r3, #2
 800f360:	e074      	b.n	800f44c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10c      	bne.n	800f382 <dir_sdi+0x56>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f36e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f372:	2b03      	cmp	r3, #3
 800f374:	d105      	bne.n	800f382 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f37c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f380:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d111      	bne.n	800f3ac <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f38e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f392:	461a      	mov	r2, r3
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	4293      	cmp	r3, r2
 800f398:	d301      	bcc.n	800f39e <dir_sdi+0x72>
			return FR_INT_ERR;
 800f39a:	2302      	movs	r3, #2
 800f39c:	e056      	b.n	800f44c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3a4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f3a8:	613b      	str	r3, [r7, #16]
 800f3aa:	e032      	b.n	800f412 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3b2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f3b6:	011b      	lsls	r3, r3, #4
 800f3b8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800f3ba:	e01e      	b.n	800f3fa <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3c2:	6979      	ldr	r1, [r7, #20]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fcbe 	bl	800ed46 <get_fat>
 800f3ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d2:	d101      	bne.n	800f3d8 <dir_sdi+0xac>
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e039      	b.n	800f44c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d907      	bls.n	800f3ee <dir_sdi+0xc2>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f3e8:	697a      	ldr	r2, [r7, #20]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d301      	bcc.n	800f3f2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	e02c      	b.n	800f44c <dir_sdi+0x120>
			idx -= ic;
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800f3fa:	683a      	ldr	r2, [r7, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d2dc      	bcs.n	800f3bc <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f408:	6979      	ldr	r1, [r7, #20]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff fc7a 	bl	800ed04 <clust2sect>
 800f410:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	697a      	ldr	r2, [r7, #20]
 800f416:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d101      	bne.n	800f424 <dir_sdi+0xf8>
 800f420:	2302      	movs	r3, #2
 800f422:	e013      	b.n	800f44c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	091a      	lsrs	r2, r3, #4
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	441a      	add	r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f438:	461a      	mov	r2, r3
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	f003 030f 	and.w	r3, r3, #15
 800f440:	015b      	lsls	r3, r3, #5
 800f442:	441a      	add	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f454:	b590      	push	{r4, r7, lr}
 800f456:	b087      	sub	sp, #28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800f464:	3301      	adds	r3, #1
 800f466:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d004      	beq.n	800f47a <dir_next+0x26>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <dir_next+0x2a>
		return FR_NO_FILE;
 800f47a:	2304      	movs	r3, #4
 800f47c:	e0dd      	b.n	800f63a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f003 030f 	and.w	r3, r3, #15
 800f484:	2b00      	cmp	r3, #0
 800f486:	f040 80c6 	bne.w	800f616 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d10b      	bne.n	800f4ba <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f4a8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	f0c0 80b0 	bcc.w	800f616 <dir_next+0x1c2>
				return FR_NO_FILE;
 800f4b6:	2304      	movs	r3, #4
 800f4b8:	e0bf      	b.n	800f63a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	091b      	lsrs	r3, r3, #4
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f4c4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800f4c8:	3a01      	subs	r2, #1
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f040 80a2 	bne.w	800f616 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f4de:	4619      	mov	r1, r3
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	f7ff fc30 	bl	800ed46 <get_fat>
 800f4e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d801      	bhi.n	800f4f2 <dir_next+0x9e>
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	e0a3      	b.n	800f63a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f8:	d101      	bne.n	800f4fe <dir_next+0xaa>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e09d      	b.n	800f63a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f504:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f508:	697a      	ldr	r2, [r7, #20]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d374      	bcc.n	800f5f8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d101      	bne.n	800f518 <dir_next+0xc4>
 800f514:	2304      	movs	r3, #4
 800f516:	e090      	b.n	800f63a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7ff fe2f 	bl	800f18a <create_chain>
 800f52c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <dir_next+0xe4>
 800f534:	2307      	movs	r3, #7
 800f536:	e080      	b.n	800f63a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d101      	bne.n	800f542 <dir_next+0xee>
 800f53e:	2302      	movs	r3, #2
 800f540:	e07b      	b.n	800f63a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f548:	d101      	bne.n	800f54e <dir_next+0xfa>
 800f54a:	2301      	movs	r3, #1
 800f54c:	e075      	b.n	800f63a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f554:	4618      	mov	r0, r3
 800f556:	f7ff fab1 	bl	800eabc <sync_window>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <dir_next+0x110>
 800f560:	2301      	movs	r3, #1
 800f562:	e06a      	b.n	800f63a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f56a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f56e:	2100      	movs	r1, #0
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff f895 	bl	800e6a0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800f582:	6979      	ldr	r1, [r7, #20]
 800f584:	4610      	mov	r0, r2
 800f586:	f7ff fbbd 	bl	800ed04 <clust2sect>
 800f58a:	4603      	mov	r3, r0
 800f58c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f590:	2300      	movs	r3, #0
 800f592:	613b      	str	r3, [r7, #16]
 800f594:	e01b      	b.n	800f5ce <dir_next+0x17a>
						dp->fs->wflag = 1;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f59c:	2201      	movs	r2, #1
 800f59e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff fa87 	bl	800eabc <sync_window>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <dir_next+0x164>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e040      	b.n	800f63a <dir_next+0x1e6>
						dp->fs->winsect++;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5be:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800f5c2:	3201      	adds	r2, #1
 800f5c4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	613b      	str	r3, [r7, #16]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5d4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f5d8:	461a      	mov	r2, r3
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d3da      	bcc.n	800f596 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5e6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	1a8a      	subs	r2, r1, r2
 800f5f4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	697a      	ldr	r2, [r7, #20]
 800f5fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f606:	6979      	ldr	r1, [r7, #20]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fb7b 	bl	800ed04 <clust2sect>
 800f60e:	4602      	mov	r2, r0
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	b29a      	uxth	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f626:	461a      	mov	r2, r3
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f003 030f 	and.w	r3, r3, #15
 800f62e:	015b      	lsls	r3, r3, #5
 800f630:	441a      	add	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	371c      	adds	r7, #28
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd90      	pop	{r4, r7, pc}

0800f642 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800f64c:	2100      	movs	r1, #0
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff fe6c 	bl	800f32c <dir_sdi>
 800f654:	4603      	mov	r3, r0
 800f656:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d131      	bne.n	800f6c2 <dir_alloc+0x80>
		n = 0;
 800f65e:	2300      	movs	r3, #0
 800f660:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f66e:	4619      	mov	r1, r3
 800f670:	4610      	mov	r0, r2
 800f672:	f7ff fa6c 	bl	800eb4e <move_window>
 800f676:	4603      	mov	r3, r0
 800f678:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d11f      	bne.n	800f6c0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	2be5      	cmp	r3, #229	; 0xe5
 800f68a:	d005      	beq.n	800f698 <dir_alloc+0x56>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d107      	bne.n	800f6a8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	3301      	adds	r3, #1
 800f69c:	60bb      	str	r3, [r7, #8]
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d102      	bne.n	800f6ac <dir_alloc+0x6a>
 800f6a6:	e00c      	b.n	800f6c2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7ff fed0 	bl	800f454 <dir_next>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800f6b8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d0d1      	beq.n	800f662 <dir_alloc+0x20>
 800f6be:	e000      	b.n	800f6c2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800f6c0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f6c2:	7bfb      	ldrb	r3, [r7, #15]
 800f6c4:	2b04      	cmp	r3, #4
 800f6c6:	d101      	bne.n	800f6cc <dir_alloc+0x8a>
 800f6c8:	2307      	movs	r3, #7
 800f6ca:	73fb      	strb	r3, [r7, #15]
	return res;
 800f6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b085      	sub	sp, #20
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	331b      	adds	r3, #27
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	021b      	lsls	r3, r3, #8
 800f6e8:	b21a      	sxth	r2, r3
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	331a      	adds	r3, #26
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	b21b      	sxth	r3, r3
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	b21b      	sxth	r3, r3
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f700:	2b03      	cmp	r3, #3
 800f702:	d10f      	bne.n	800f724 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	3315      	adds	r3, #21
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	021b      	lsls	r3, r3, #8
 800f70c:	b21a      	sxth	r2, r3
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	3314      	adds	r3, #20
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	b21b      	sxth	r3, r3
 800f716:	4313      	orrs	r3, r2
 800f718:	b21b      	sxth	r3, r3
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	041b      	lsls	r3, r3, #16
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	4313      	orrs	r3, r2
 800f722:	60fb      	str	r3, [r7, #12]

	return cl;
 800f724:	68fb      	ldr	r3, [r7, #12]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bc80      	pop	{r7}
 800f72e:	4770      	bx	lr

0800f730 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	331a      	adds	r3, #26
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	b2d2      	uxtb	r2, r2
 800f742:	701a      	strb	r2, [r3, #0]
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	b29b      	uxth	r3, r3
 800f748:	0a1b      	lsrs	r3, r3, #8
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	331b      	adds	r3, #27
 800f750:	b2d2      	uxtb	r2, r2
 800f752:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	0c1a      	lsrs	r2, r3, #16
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	3314      	adds	r3, #20
 800f75c:	b2d2      	uxtb	r2, r2
 800f75e:	701a      	strb	r2, [r3, #0]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	0c1b      	lsrs	r3, r3, #16
 800f764:	b29b      	uxth	r3, r3
 800f766:	0a1b      	lsrs	r3, r3, #8
 800f768:	b29a      	uxth	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	3315      	adds	r3, #21
 800f76e:	b2d2      	uxtb	r2, r2
 800f770:	701a      	strb	r2, [r3, #0]
}
 800f772:	bf00      	nop
 800f774:	370c      	adds	r7, #12
 800f776:	46bd      	mov	sp, r7
 800f778:	bc80      	pop	{r7}
 800f77a:	4770      	bx	lr

0800f77c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b086      	sub	sp, #24
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f784:	2100      	movs	r1, #0
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff fdd0 	bl	800f32c <dir_sdi>
 800f78c:	4603      	mov	r3, r0
 800f78e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f790:	7dfb      	ldrb	r3, [r7, #23]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d001      	beq.n	800f79a <dir_find+0x1e>
 800f796:	7dfb      	ldrb	r3, [r7, #23]
 800f798:	e03b      	b.n	800f812 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4610      	mov	r0, r2
 800f7aa:	f7ff f9d0 	bl	800eb4e <move_window>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f7b2:	7dfb      	ldrb	r3, [r7, #23]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d128      	bne.n	800f80a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f7be:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f7c6:	7bfb      	ldrb	r3, [r7, #15]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d102      	bne.n	800f7d2 <dir_find+0x56>
 800f7cc:	2304      	movs	r3, #4
 800f7ce:	75fb      	strb	r3, [r7, #23]
 800f7d0:	e01e      	b.n	800f810 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	330b      	adds	r3, #11
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f003 0308 	and.w	r3, r3, #8
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10a      	bne.n	800f7f6 <dir_find+0x7a>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f7e6:	220b      	movs	r2, #11
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	6938      	ldr	r0, [r7, #16]
 800f7ec:	f7fe ff72 	bl	800e6d4 <mem_cmp>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00b      	beq.n	800f80e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff fe2b 	bl	800f454 <dir_next>
 800f7fe:	4603      	mov	r3, r0
 800f800:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f802:	7dfb      	ldrb	r3, [r7, #23]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d0c8      	beq.n	800f79a <dir_find+0x1e>
 800f808:	e002      	b.n	800f810 <dir_find+0x94>
		if (res != FR_OK) break;
 800f80a:	bf00      	nop
 800f80c:	e000      	b.n	800f810 <dir_find+0x94>
			break;
 800f80e:	bf00      	nop

	return res;
 800f810:	7dfb      	ldrb	r3, [r7, #23]
}
 800f812:	4618      	mov	r0, r3
 800f814:	3718      	adds	r7, #24
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b084      	sub	sp, #16
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f822:	2101      	movs	r1, #1
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7ff ff0c 	bl	800f642 <dir_alloc>
 800f82a:	4603      	mov	r3, r0
 800f82c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800f82e:	7bfb      	ldrb	r3, [r7, #15]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d126      	bne.n	800f882 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f840:	4619      	mov	r1, r3
 800f842:	4610      	mov	r0, r2
 800f844:	f7ff f983 	bl	800eb4e <move_window>
 800f848:	4603      	mov	r3, r0
 800f84a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d117      	bne.n	800f882 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f858:	2220      	movs	r2, #32
 800f85a:	2100      	movs	r1, #0
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe ff1f 	bl	800e6a0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f86e:	220b      	movs	r2, #11
 800f870:	4619      	mov	r1, r3
 800f872:	f7fe fef7 	bl	800e664 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f87c:	2201      	movs	r2, #1
 800f87e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800f882:	7bfb      	ldrb	r3, [r7, #15]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b088      	sub	sp, #32
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	e002      	b.n	800f8a4 <create_name+0x18>
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	60fb      	str	r3, [r7, #12]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b2f      	cmp	r3, #47	; 0x2f
 800f8aa:	d0f8      	beq.n	800f89e <create_name+0x12>
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f8b2:	d0f4      	beq.n	800f89e <create_name+0x12>
	sfn = dp->fn;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f8ba:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f8bc:	220b      	movs	r2, #11
 800f8be:	2120      	movs	r1, #32
 800f8c0:	68b8      	ldr	r0, [r7, #8]
 800f8c2:	f7fe feed 	bl	800e6a0 <mem_set>
	si = i = b = 0; ni = 8;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	77fb      	strb	r3, [r7, #31]
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	613b      	str	r3, [r7, #16]
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	617b      	str	r3, [r7, #20]
 800f8d2:	2308      	movs	r3, #8
 800f8d4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	617a      	str	r2, [r7, #20]
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	4413      	add	r3, r2
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800f8e4:	7fbb      	ldrb	r3, [r7, #30]
 800f8e6:	2b20      	cmp	r3, #32
 800f8e8:	d953      	bls.n	800f992 <create_name+0x106>
 800f8ea:	7fbb      	ldrb	r3, [r7, #30]
 800f8ec:	2b2f      	cmp	r3, #47	; 0x2f
 800f8ee:	d050      	beq.n	800f992 <create_name+0x106>
 800f8f0:	7fbb      	ldrb	r3, [r7, #30]
 800f8f2:	2b5c      	cmp	r3, #92	; 0x5c
 800f8f4:	d04d      	beq.n	800f992 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800f8f6:	7fbb      	ldrb	r3, [r7, #30]
 800f8f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8fa:	d003      	beq.n	800f904 <create_name+0x78>
 800f8fc:	693a      	ldr	r2, [r7, #16]
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	429a      	cmp	r2, r3
 800f902:	d30f      	bcc.n	800f924 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800f904:	69bb      	ldr	r3, [r7, #24]
 800f906:	2b08      	cmp	r3, #8
 800f908:	d102      	bne.n	800f910 <create_name+0x84>
 800f90a:	7fbb      	ldrb	r3, [r7, #30]
 800f90c:	2b2e      	cmp	r3, #46	; 0x2e
 800f90e:	d001      	beq.n	800f914 <create_name+0x88>
 800f910:	2306      	movs	r3, #6
 800f912:	e073      	b.n	800f9fc <create_name+0x170>
			i = 8; ni = 11;
 800f914:	2308      	movs	r3, #8
 800f916:	613b      	str	r3, [r7, #16]
 800f918:	230b      	movs	r3, #11
 800f91a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800f91c:	7ffb      	ldrb	r3, [r7, #31]
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	77fb      	strb	r3, [r7, #31]
 800f922:	e035      	b.n	800f990 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f924:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	da08      	bge.n	800f93e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800f92c:	7ffb      	ldrb	r3, [r7, #31]
 800f92e:	f043 0303 	orr.w	r3, r3, #3
 800f932:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f934:	7fbb      	ldrb	r3, [r7, #30]
 800f936:	3b80      	subs	r3, #128	; 0x80
 800f938:	4a32      	ldr	r2, [pc, #200]	; (800fa04 <create_name+0x178>)
 800f93a:	5cd3      	ldrb	r3, [r2, r3]
 800f93c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800f93e:	7fbb      	ldrb	r3, [r7, #30]
 800f940:	4619      	mov	r1, r3
 800f942:	4831      	ldr	r0, [pc, #196]	; (800fa08 <create_name+0x17c>)
 800f944:	f7fe feec 	bl	800e720 <chk_chr>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <create_name+0xc6>
				return FR_INVALID_NAME;
 800f94e:	2306      	movs	r3, #6
 800f950:	e054      	b.n	800f9fc <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800f952:	7fbb      	ldrb	r3, [r7, #30]
 800f954:	2b40      	cmp	r3, #64	; 0x40
 800f956:	d907      	bls.n	800f968 <create_name+0xdc>
 800f958:	7fbb      	ldrb	r3, [r7, #30]
 800f95a:	2b5a      	cmp	r3, #90	; 0x5a
 800f95c:	d804      	bhi.n	800f968 <create_name+0xdc>
				b |= 2;
 800f95e:	7ffb      	ldrb	r3, [r7, #31]
 800f960:	f043 0302 	orr.w	r3, r3, #2
 800f964:	77fb      	strb	r3, [r7, #31]
 800f966:	e00c      	b.n	800f982 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800f968:	7fbb      	ldrb	r3, [r7, #30]
 800f96a:	2b60      	cmp	r3, #96	; 0x60
 800f96c:	d909      	bls.n	800f982 <create_name+0xf6>
 800f96e:	7fbb      	ldrb	r3, [r7, #30]
 800f970:	2b7a      	cmp	r3, #122	; 0x7a
 800f972:	d806      	bhi.n	800f982 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800f974:	7ffb      	ldrb	r3, [r7, #31]
 800f976:	f043 0301 	orr.w	r3, r3, #1
 800f97a:	77fb      	strb	r3, [r7, #31]
 800f97c:	7fbb      	ldrb	r3, [r7, #30]
 800f97e:	3b20      	subs	r3, #32
 800f980:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	613a      	str	r2, [r7, #16]
 800f988:	68ba      	ldr	r2, [r7, #8]
 800f98a:	4413      	add	r3, r2
 800f98c:	7fba      	ldrb	r2, [r7, #30]
 800f98e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f990:	e7a1      	b.n	800f8d6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	441a      	add	r2, r3
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f99c:	7fbb      	ldrb	r3, [r7, #30]
 800f99e:	2b20      	cmp	r3, #32
 800f9a0:	d801      	bhi.n	800f9a6 <create_name+0x11a>
 800f9a2:	2304      	movs	r3, #4
 800f9a4:	e000      	b.n	800f9a8 <create_name+0x11c>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d101      	bne.n	800f9b4 <create_name+0x128>
 800f9b0:	2306      	movs	r3, #6
 800f9b2:	e023      	b.n	800f9fc <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2be5      	cmp	r3, #229	; 0xe5
 800f9ba:	d102      	bne.n	800f9c2 <create_name+0x136>
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	2205      	movs	r2, #5
 800f9c0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	2b08      	cmp	r3, #8
 800f9c6:	d102      	bne.n	800f9ce <create_name+0x142>
 800f9c8:	7ffb      	ldrb	r3, [r7, #31]
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800f9ce:	7ffb      	ldrb	r3, [r7, #31]
 800f9d0:	f003 0303 	and.w	r3, r3, #3
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d103      	bne.n	800f9e0 <create_name+0x154>
 800f9d8:	7fbb      	ldrb	r3, [r7, #30]
 800f9da:	f043 0310 	orr.w	r3, r3, #16
 800f9de:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800f9e0:	7ffb      	ldrb	r3, [r7, #31]
 800f9e2:	f003 030c 	and.w	r3, r3, #12
 800f9e6:	2b04      	cmp	r3, #4
 800f9e8:	d103      	bne.n	800f9f2 <create_name+0x166>
 800f9ea:	7fbb      	ldrb	r3, [r7, #30]
 800f9ec:	f043 0308 	orr.w	r3, r3, #8
 800f9f0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	330b      	adds	r3, #11
 800f9f6:	7fba      	ldrb	r2, [r7, #30]
 800f9f8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f9fa:	2300      	movs	r3, #0
#endif
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3720      	adds	r7, #32
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	0802de24 	.word	0x0802de24
 800fa08:	08014b6c 	.word	0x08014b6c

0800fa0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	2b2f      	cmp	r3, #47	; 0x2f
 800fa1c:	d003      	beq.n	800fa26 <follow_path+0x1a>
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	2b5c      	cmp	r3, #92	; 0x5c
 800fa24:	d102      	bne.n	800fa2c <follow_path+0x20>
		path++;
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b1f      	cmp	r3, #31
 800fa3a:	d80a      	bhi.n	800fa52 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f7ff fc74 	bl	800f32c <dir_sdi>
 800fa44:	4603      	mov	r3, r0
 800fa46:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800fa50:	e045      	b.n	800fade <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa52:	463b      	mov	r3, r7
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff ff18 	bl	800f88c <create_name>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fa60:	7bfb      	ldrb	r3, [r7, #15]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d136      	bne.n	800fad4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7ff fe88 	bl	800f77c <dir_find>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fa76:	7adb      	ldrb	r3, [r3, #11]
 800fa78:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800fa7a:	7bfb      	ldrb	r3, [r7, #15]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00a      	beq.n	800fa96 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	2b04      	cmp	r3, #4
 800fa84:	d128      	bne.n	800fad8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fa86:	7bbb      	ldrb	r3, [r7, #14]
 800fa88:	f003 0304 	and.w	r3, r3, #4
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d123      	bne.n	800fad8 <follow_path+0xcc>
 800fa90:	2305      	movs	r3, #5
 800fa92:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800fa94:	e020      	b.n	800fad8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa96:	7bbb      	ldrb	r3, [r7, #14]
 800fa98:	f003 0304 	and.w	r3, r3, #4
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d11d      	bne.n	800fadc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800faa6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	330b      	adds	r3, #11
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f003 0310 	and.w	r3, r3, #16
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d102      	bne.n	800fabc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800fab6:	2305      	movs	r3, #5
 800fab8:	73fb      	strb	r3, [r7, #15]
 800faba:	e010      	b.n	800fade <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fac2:	68b9      	ldr	r1, [r7, #8]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff fe06 	bl	800f6d6 <ld_clust>
 800faca:	4602      	mov	r2, r0
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fad2:	e7be      	b.n	800fa52 <follow_path+0x46>
			if (res != FR_OK) break;
 800fad4:	bf00      	nop
 800fad6:	e002      	b.n	800fade <follow_path+0xd2>
				break;
 800fad8:	bf00      	nop
 800fada:	e000      	b.n	800fade <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fadc:	bf00      	nop
		}
	}

	return res;
 800fade:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3710      	adds	r7, #16
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fae8:	b480      	push	{r7}
 800faea:	b087      	sub	sp, #28
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800faf0:	f04f 33ff 	mov.w	r3, #4294967295
 800faf4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d031      	beq.n	800fb62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	617b      	str	r3, [r7, #20]
 800fb04:	e002      	b.n	800fb0c <get_ldnumber+0x24>
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	617b      	str	r3, [r7, #20]
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	2b20      	cmp	r3, #32
 800fb12:	d903      	bls.n	800fb1c <get_ldnumber+0x34>
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	2b3a      	cmp	r3, #58	; 0x3a
 800fb1a:	d1f4      	bne.n	800fb06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	2b3a      	cmp	r3, #58	; 0x3a
 800fb22:	d11c      	bne.n	800fb5e <get_ldnumber+0x76>
			tp = *path;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	60fa      	str	r2, [r7, #12]
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	3b30      	subs	r3, #48	; 0x30
 800fb34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	2b09      	cmp	r3, #9
 800fb3a:	d80e      	bhi.n	800fb5a <get_ldnumber+0x72>
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d10a      	bne.n	800fb5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d107      	bne.n	800fb5a <get_ldnumber+0x72>
					vol = (int)i;
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	3301      	adds	r3, #1
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	e002      	b.n	800fb64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb5e:	2300      	movs	r3, #0
 800fb60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb62:	693b      	ldr	r3, [r7, #16]
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	371c      	adds	r7, #28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bc80      	pop	{r7}
 800fb6c:	4770      	bx	lr
	...

0800fb70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f04f 32ff 	mov.w	r2, #4294967295
 800fb88:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7fe ffdd 	bl	800eb4e <move_window>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <check_fs+0x2e>
		return 3;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	e04a      	b.n	800fc34 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fba4:	3301      	adds	r3, #1
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	021b      	lsls	r3, r3, #8
 800fbaa:	b21a      	sxth	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800fbb2:	b21b      	sxth	r3, r3
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	b21b      	sxth	r3, r3
 800fbb8:	4a20      	ldr	r2, [pc, #128]	; (800fc3c <check_fs+0xcc>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d001      	beq.n	800fbc2 <check_fs+0x52>
		return 2;
 800fbbe:	2302      	movs	r3, #2
 800fbc0:	e038      	b.n	800fc34 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	3336      	adds	r3, #54	; 0x36
 800fbc6:	3303      	adds	r3, #3
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	061a      	lsls	r2, r3, #24
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3336      	adds	r3, #54	; 0x36
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	041b      	lsls	r3, r3, #16
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	3236      	adds	r2, #54	; 0x36
 800fbdc:	3201      	adds	r2, #1
 800fbde:	7812      	ldrb	r2, [r2, #0]
 800fbe0:	0212      	lsls	r2, r2, #8
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800fbea:	4313      	orrs	r3, r2
 800fbec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fbf0:	4a13      	ldr	r2, [pc, #76]	; (800fc40 <check_fs+0xd0>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d101      	bne.n	800fbfa <check_fs+0x8a>
		return 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e01c      	b.n	800fc34 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	3352      	adds	r3, #82	; 0x52
 800fbfe:	3303      	adds	r3, #3
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	061a      	lsls	r2, r3, #24
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	3352      	adds	r3, #82	; 0x52
 800fc08:	3302      	adds	r3, #2
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	041b      	lsls	r3, r3, #16
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	3252      	adds	r2, #82	; 0x52
 800fc14:	3201      	adds	r2, #1
 800fc16:	7812      	ldrb	r2, [r2, #0]
 800fc18:	0212      	lsls	r2, r2, #8
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800fc22:	4313      	orrs	r3, r2
 800fc24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc28:	4a05      	ldr	r2, [pc, #20]	; (800fc40 <check_fs+0xd0>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d101      	bne.n	800fc32 <check_fs+0xc2>
		return 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e000      	b.n	800fc34 <check_fs+0xc4>

	return 1;
 800fc32:	2301      	movs	r3, #1
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	ffffaa55 	.word	0xffffaa55
 800fc40:	00544146 	.word	0x00544146

0800fc44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b096      	sub	sp, #88	; 0x58
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fc58:	68b8      	ldr	r0, [r7, #8]
 800fc5a:	f7ff ff45 	bl	800fae8 <get_ldnumber>
 800fc5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	da01      	bge.n	800fc6a <find_volume+0x26>
 800fc66:	230b      	movs	r3, #11
 800fc68:	e2a8      	b.n	80101bc <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fc6a:	4a9d      	ldr	r2, [pc, #628]	; (800fee0 <find_volume+0x29c>)
 800fc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <find_volume+0x3a>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	e29e      	b.n	80101bc <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc82:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800fc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d01b      	beq.n	800fcc6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fe fc47 	bl	800e528 <disk_status>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fca0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fca4:	f003 0301 	and.w	r3, r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d10c      	bne.n	800fcc6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800fcac:	79fb      	ldrb	r3, [r7, #7]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d007      	beq.n	800fcc2 <find_volume+0x7e>
 800fcb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcb6:	f003 0304 	and.w	r3, r3, #4
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d001      	beq.n	800fcc2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800fcbe:	230a      	movs	r3, #10
 800fcc0:	e27c      	b.n	80101bc <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	e27a      	b.n	80101bc <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcda:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fc3c 	bl	800e55c <disk_initialize>
 800fce4:	4603      	mov	r3, r0
 800fce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800fcea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d001      	beq.n	800fcfa <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fcf6:	2303      	movs	r3, #3
 800fcf8:	e260      	b.n	80101bc <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d007      	beq.n	800fd10 <find_volume+0xcc>
 800fd00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd04:	f003 0304 	and.w	r3, r3, #4
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800fd0c:	230a      	movs	r3, #10
 800fd0e:	e255      	b.n	80101bc <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800fd10:	2300      	movs	r3, #0
 800fd12:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800fd14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd18:	f7ff ff2a 	bl	800fb70 <check_fs>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800fd22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d153      	bne.n	800fdd2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	643b      	str	r3, [r7, #64]	; 0x40
 800fd2e:	e028      	b.n	800fd82 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800fd30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd34:	011b      	lsls	r3, r3, #4
 800fd36:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fd3a:	4413      	add	r3, r2
 800fd3c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	3304      	adds	r3, #4
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d012      	beq.n	800fd6e <find_volume+0x12a>
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	330b      	adds	r3, #11
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	061a      	lsls	r2, r3, #24
 800fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd52:	330a      	adds	r3, #10
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	041b      	lsls	r3, r3, #16
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd5c:	3209      	adds	r2, #9
 800fd5e:	7812      	ldrb	r2, [r2, #0]
 800fd60:	0212      	lsls	r2, r2, #8
 800fd62:	4313      	orrs	r3, r2
 800fd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd66:	3208      	adds	r2, #8
 800fd68:	7812      	ldrb	r2, [r2, #0]
 800fd6a:	431a      	orrs	r2, r3
 800fd6c:	e000      	b.n	800fd70 <find_volume+0x12c>
 800fd6e:	2200      	movs	r2, #0
 800fd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd72:	009b      	lsls	r3, r3, #2
 800fd74:	3358      	adds	r3, #88	; 0x58
 800fd76:	443b      	add	r3, r7
 800fd78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800fd7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7e:	3301      	adds	r3, #1
 800fd80:	643b      	str	r3, [r7, #64]	; 0x40
 800fd82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd84:	2b03      	cmp	r3, #3
 800fd86:	d9d3      	bls.n	800fd30 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800fd88:	2300      	movs	r3, #0
 800fd8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fd8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d002      	beq.n	800fd98 <find_volume+0x154>
 800fd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd94:	3b01      	subs	r3, #1
 800fd96:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800fd98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	3358      	adds	r3, #88	; 0x58
 800fd9e:	443b      	add	r3, r7
 800fda0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fda4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800fda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d005      	beq.n	800fdb8 <find_volume+0x174>
 800fdac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdb0:	f7ff fede 	bl	800fb70 <check_fs>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	e000      	b.n	800fdba <find_volume+0x176>
 800fdb8:	2302      	movs	r3, #2
 800fdba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800fdbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d005      	beq.n	800fdd2 <find_volume+0x18e>
 800fdc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdc8:	3301      	adds	r3, #1
 800fdca:	643b      	str	r3, [r7, #64]	; 0x40
 800fdcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	d9e2      	bls.n	800fd98 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fdd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d101      	bne.n	800fdde <find_volume+0x19a>
 800fdda:	2301      	movs	r3, #1
 800fddc:	e1ee      	b.n	80101bc <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800fdde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d001      	beq.n	800fdea <find_volume+0x1a6>
 800fde6:	230d      	movs	r3, #13
 800fde8:	e1e8      	b.n	80101bc <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	7b1b      	ldrb	r3, [r3, #12]
 800fdee:	021b      	lsls	r3, r3, #8
 800fdf0:	b21a      	sxth	r2, r3
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	7adb      	ldrb	r3, [r3, #11]
 800fdf6:	b21b      	sxth	r3, r3
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	b21b      	sxth	r3, r3
 800fdfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe00:	d001      	beq.n	800fe06 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800fe02:	230d      	movs	r3, #13
 800fe04:	e1da      	b.n	80101bc <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	7ddb      	ldrb	r3, [r3, #23]
 800fe0a:	021b      	lsls	r3, r3, #8
 800fe0c:	b21a      	sxth	r2, r3
 800fe0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe10:	7d9b      	ldrb	r3, [r3, #22]
 800fe12:	b21b      	sxth	r3, r3
 800fe14:	4313      	orrs	r3, r2
 800fe16:	b21b      	sxth	r3, r3
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800fe1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d112      	bne.n	800fe48 <find_volume+0x204>
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800fe28:	061a      	lsls	r2, r3, #24
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe30:	041b      	lsls	r3, r3, #16
 800fe32:	4313      	orrs	r3, r2
 800fe34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe36:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800fe3a:	0212      	lsls	r2, r2, #8
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe40:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800fe44:	4313      	orrs	r3, r2
 800fe46:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	7c1a      	ldrb	r2, [r3, #16]
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	d006      	beq.n	800fe72 <find_volume+0x22e>
 800fe64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe66:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d001      	beq.n	800fe72 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800fe6e:	230d      	movs	r3, #13
 800fe70:	e1a4      	b.n	80101bc <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fe78:	461a      	mov	r2, r3
 800fe7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe7c:	fb02 f303 	mul.w	r3, r2, r3
 800fe80:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	7b5a      	ldrb	r2, [r3, #13]
 800fe86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe88:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800fe8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe8e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00a      	beq.n	800feac <find_volume+0x268>
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800fea4:	3b01      	subs	r3, #1
 800fea6:	4013      	ands	r3, r2
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d001      	beq.n	800feb0 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800feac:	230d      	movs	r3, #13
 800feae:	e185      	b.n	80101bc <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800feb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb2:	7c9b      	ldrb	r3, [r3, #18]
 800feb4:	021b      	lsls	r3, r3, #8
 800feb6:	b21a      	sxth	r2, r3
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	7c5b      	ldrb	r3, [r3, #17]
 800febc:	b21b      	sxth	r3, r3
 800febe:	4313      	orrs	r3, r2
 800fec0:	b21b      	sxth	r3, r3
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800fed0:	f003 030f 	and.w	r3, r3, #15
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800feda:	230d      	movs	r3, #13
 800fedc:	e16e      	b.n	80101bc <find_volume+0x578>
 800fede:	bf00      	nop
 800fee0:	20000e6c 	.word	0x20000e6c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	7d1b      	ldrb	r3, [r3, #20]
 800fee8:	021b      	lsls	r3, r3, #8
 800feea:	b21a      	sxth	r2, r3
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	7cdb      	ldrb	r3, [r3, #19]
 800fef0:	b21b      	sxth	r3, r3
 800fef2:	4313      	orrs	r3, r2
 800fef4:	b21b      	sxth	r3, r3
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800fefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d112      	bne.n	800ff26 <find_volume+0x2e2>
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ff06:	061a      	lsls	r2, r3, #24
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ff0e:	041b      	lsls	r3, r3, #16
 800ff10:	4313      	orrs	r3, r2
 800ff12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff14:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ff18:	0212      	lsls	r2, r2, #8
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff28:	7bdb      	ldrb	r3, [r3, #15]
 800ff2a:	021b      	lsls	r3, r3, #8
 800ff2c:	b21a      	sxth	r2, r3
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	7b9b      	ldrb	r3, [r3, #14]
 800ff32:	b21b      	sxth	r3, r3
 800ff34:	4313      	orrs	r3, r2
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800ff3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d101      	bne.n	800ff44 <find_volume+0x300>
 800ff40:	230d      	movs	r3, #13
 800ff42:	e13b      	b.n	80101bc <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800ff44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff48:	4413      	add	r3, r2
 800ff4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff4c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800ff50:	0912      	lsrs	r2, r2, #4
 800ff52:	b292      	uxth	r2, r2
 800ff54:	4413      	add	r3, r2
 800ff56:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d201      	bcs.n	800ff64 <find_volume+0x320>
 800ff60:	230d      	movs	r3, #13
 800ff62:	e12b      	b.n	80101bc <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800ff64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff6c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ff70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff74:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ff76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <find_volume+0x33c>
 800ff7c:	230d      	movs	r3, #13
 800ff7e:	e11d      	b.n	80101bc <find_volume+0x578>
	fmt = FS_FAT12;
 800ff80:	2301      	movs	r3, #1
 800ff82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d902      	bls.n	800ff96 <find_volume+0x352>
 800ff90:	2302      	movs	r3, #2
 800ff92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d902      	bls.n	800ffa6 <find_volume+0x362>
 800ffa0:	2303      	movs	r3, #3
 800ffa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa8:	1c9a      	adds	r2, r3, #2
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ffb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffbc:	441a      	add	r2, r3
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800ffc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc8:	441a      	add	r2, r3
 800ffca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffcc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800ffd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffd4:	2b03      	cmp	r3, #3
 800ffd6:	d121      	bne.n	801001c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <find_volume+0x3a2>
 800ffe2:	230d      	movs	r3, #13
 800ffe4:	e0ea      	b.n	80101bc <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ffec:	061a      	lsls	r2, r3, #24
 800ffee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fff4:	041b      	lsls	r3, r3, #16
 800fff6:	4313      	orrs	r3, r2
 800fff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fffa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800fffe:	0212      	lsls	r2, r2, #8
 8010000:	4313      	orrs	r3, r2
 8010002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010004:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8010008:	431a      	orrs	r2, r3
 801000a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	647b      	str	r3, [r7, #68]	; 0x44
 801001a:	e025      	b.n	8010068 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <find_volume+0x3e6>
 8010026:	230d      	movs	r3, #13
 8010028:	e0c8      	b.n	80101bc <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010032:	441a      	add	r2, r3
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801003a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801003e:	2b02      	cmp	r3, #2
 8010040:	d104      	bne.n	801004c <find_volume+0x408>
 8010042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010048:	005b      	lsls	r3, r3, #1
 801004a:	e00c      	b.n	8010066 <find_volume+0x422>
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010052:	4613      	mov	r3, r2
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	4413      	add	r3, r2
 8010058:	085a      	lsrs	r2, r3, #1
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010060:	f003 0301 	and.w	r3, r3, #1
 8010064:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010066:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801006e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010070:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010074:	0a5b      	lsrs	r3, r3, #9
 8010076:	429a      	cmp	r2, r3
 8010078:	d201      	bcs.n	801007e <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 801007a:	230d      	movs	r3, #13
 801007c:	e09e      	b.n	80101bc <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	f04f 32ff 	mov.w	r2, #4294967295
 8010084:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801008e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010090:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	2280      	movs	r2, #128	; 0x80
 8010098:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 801009c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100a0:	2b03      	cmp	r3, #3
 80100a2:	d177      	bne.n	8010194 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100aa:	021b      	lsls	r3, r3, #8
 80100ac:	b21a      	sxth	r2, r3
 80100ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100b4:	b21b      	sxth	r3, r3
 80100b6:	4313      	orrs	r3, r2
 80100b8:	b21b      	sxth	r3, r3
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d16a      	bne.n	8010194 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80100be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c0:	3301      	adds	r3, #1
 80100c2:	4619      	mov	r1, r3
 80100c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100c6:	f7fe fd42 	bl	800eb4e <move_window>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d161      	bne.n	8010194 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	2200      	movs	r2, #0
 80100d4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80100d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100da:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80100de:	021b      	lsls	r3, r3, #8
 80100e0:	b21a      	sxth	r2, r3
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80100e8:	b21b      	sxth	r3, r3
 80100ea:	4313      	orrs	r3, r2
 80100ec:	b21b      	sxth	r3, r3
 80100ee:	4a35      	ldr	r2, [pc, #212]	; (80101c4 <find_volume+0x580>)
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d14f      	bne.n	8010194 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80100f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f6:	78db      	ldrb	r3, [r3, #3]
 80100f8:	061a      	lsls	r2, r3, #24
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	789b      	ldrb	r3, [r3, #2]
 80100fe:	041b      	lsls	r3, r3, #16
 8010100:	4313      	orrs	r3, r2
 8010102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010104:	7852      	ldrb	r2, [r2, #1]
 8010106:	0212      	lsls	r2, r2, #8
 8010108:	4313      	orrs	r3, r2
 801010a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801010c:	7812      	ldrb	r2, [r2, #0]
 801010e:	4313      	orrs	r3, r2
 8010110:	4a2d      	ldr	r2, [pc, #180]	; (80101c8 <find_volume+0x584>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d13e      	bne.n	8010194 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010118:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 801011c:	061a      	lsls	r2, r3, #24
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8010124:	041b      	lsls	r3, r3, #16
 8010126:	4313      	orrs	r3, r2
 8010128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801012a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 801012e:	0212      	lsls	r2, r2, #8
 8010130:	4313      	orrs	r3, r2
 8010132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010134:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8010138:	4313      	orrs	r3, r2
 801013a:	4a24      	ldr	r2, [pc, #144]	; (80101cc <find_volume+0x588>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d129      	bne.n	8010194 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010142:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8010146:	061a      	lsls	r2, r3, #24
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801014e:	041b      	lsls	r3, r3, #16
 8010150:	4313      	orrs	r3, r2
 8010152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010154:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8010158:	0212      	lsls	r2, r2, #8
 801015a:	4313      	orrs	r3, r2
 801015c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8010162:	431a      	orrs	r2, r3
 8010164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010166:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 801016a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8010170:	061a      	lsls	r2, r3, #24
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8010178:	041b      	lsls	r3, r3, #16
 801017a:	4313      	orrs	r3, r2
 801017c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801017e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8010182:	0212      	lsls	r2, r2, #8
 8010184:	4313      	orrs	r3, r2
 8010186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010188:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 801018c:	431a      	orrs	r2, r3
 801018e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010190:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801019a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 801019e:	4b0c      	ldr	r3, [pc, #48]	; (80101d0 <find_volume+0x58c>)
 80101a0:	881b      	ldrh	r3, [r3, #0]
 80101a2:	3301      	adds	r3, #1
 80101a4:	b29a      	uxth	r2, r3
 80101a6:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <find_volume+0x58c>)
 80101a8:	801a      	strh	r2, [r3, #0]
 80101aa:	4b09      	ldr	r3, [pc, #36]	; (80101d0 <find_volume+0x58c>)
 80101ac:	881a      	ldrh	r2, [r3, #0]
 80101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80101b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101b6:	f7fe fc57 	bl	800ea68 <clear_lock>
#endif

	return FR_OK;
 80101ba:	2300      	movs	r3, #0
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3758      	adds	r7, #88	; 0x58
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	ffffaa55 	.word	0xffffaa55
 80101c8:	41615252 	.word	0x41615252
 80101cc:	61417272 	.word	0x61417272
 80101d0:	20000e70 	.word	0x20000e70

080101d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d022      	beq.n	801022c <validate+0x58>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d01d      	beq.n	801022c <validate+0x58>
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80101f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d016      	beq.n	801022c <validate+0x58>
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010204:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 801020e:	429a      	cmp	r2, r3
 8010210:	d10c      	bne.n	801022c <validate+0x58>
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010218:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801021c:	4618      	mov	r0, r3
 801021e:	f7fe f983 	bl	800e528 <disk_status>
 8010222:	4603      	mov	r3, r0
 8010224:	f003 0301 	and.w	r3, r3, #1
 8010228:	2b00      	cmp	r3, #0
 801022a:	d001      	beq.n	8010230 <validate+0x5c>
		return FR_INVALID_OBJECT;
 801022c:	2309      	movs	r3, #9
 801022e:	e000      	b.n	8010232 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801024e:	f107 0310 	add.w	r3, r7, #16
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff fc48 	bl	800fae8 <get_ldnumber>
 8010258:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	2b00      	cmp	r3, #0
 801025e:	da01      	bge.n	8010264 <f_mount+0x28>
 8010260:	230b      	movs	r3, #11
 8010262:	e02d      	b.n	80102c0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010264:	4a18      	ldr	r2, [pc, #96]	; (80102c8 <f_mount+0x8c>)
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801026c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d006      	beq.n	8010282 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8010274:	69b8      	ldr	r0, [r7, #24]
 8010276:	f7fe fbf7 	bl	800ea68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	2200      	movs	r2, #0
 801027e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d003      	beq.n	8010290 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2200      	movs	r2, #0
 801028c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	490d      	ldr	r1, [pc, #52]	; (80102c8 <f_mount+0x8c>)
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <f_mount+0x6a>
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d001      	beq.n	80102aa <f_mount+0x6e>
 80102a6:	2300      	movs	r3, #0
 80102a8:	e00a      	b.n	80102c0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80102aa:	f107 0108 	add.w	r1, r7, #8
 80102ae:	f107 030c 	add.w	r3, r7, #12
 80102b2:	2200      	movs	r2, #0
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff fcc5 	bl	800fc44 <find_volume>
 80102ba:	4603      	mov	r3, r0
 80102bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80102be:	7dfb      	ldrb	r3, [r7, #23]
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3720      	adds	r7, #32
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	20000e6c 	.word	0x20000e6c

080102cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80102d8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80102dc:	6018      	str	r0, [r3, #0]
 80102de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80102e2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80102e6:	6019      	str	r1, [r3, #0]
 80102e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80102ec:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80102f0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80102f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80102f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d101      	bne.n	8010304 <f_open+0x38>
 8010300:	2309      	movs	r3, #9
 8010302:	e257      	b.n	80107b4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8010304:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010308:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2200      	movs	r2, #0
 8010310:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8010314:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010318:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801031c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8010320:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010324:	7812      	ldrb	r2, [r2, #0]
 8010326:	f002 021f 	and.w	r2, r2, #31
 801032a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801032c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010330:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	f023 0301 	bic.w	r3, r3, #1
 801033a:	b2da      	uxtb	r2, r3
 801033c:	f107 0108 	add.w	r1, r7, #8
 8010340:	f107 0320 	add.w	r3, r7, #32
 8010344:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010348:	4618      	mov	r0, r3
 801034a:	f7ff fc7b 	bl	800fc44 <find_volume>
 801034e:	4603      	mov	r3, r0
 8010350:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010354:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010358:	2b00      	cmp	r3, #0
 801035a:	f040 8229 	bne.w	80107b0 <f_open+0x4e4>
		INIT_BUF(dj);
 801035e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010362:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010366:	f107 0214 	add.w	r2, r7, #20
 801036a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 801036e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010372:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	f107 0320 	add.w	r3, r7, #32
 801037c:	4611      	mov	r1, r2
 801037e:	4618      	mov	r0, r3
 8010380:	f7ff fb44 	bl	800fa0c <follow_path>
 8010384:	4603      	mov	r3, r0
 8010386:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 801038a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801038e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010396:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801039a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d11d      	bne.n	80103de <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80103a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d103      	bne.n	80103b2 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80103aa:	2306      	movs	r3, #6
 80103ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80103b0:	e015      	b.n	80103de <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80103b6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	f023 0301 	bic.w	r3, r3, #1
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	bf14      	ite	ne
 80103c4:	2301      	movne	r3, #1
 80103c6:	2300      	moveq	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	461a      	mov	r2, r3
 80103cc:	f107 0320 	add.w	r3, r7, #32
 80103d0:	4611      	mov	r1, r2
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe f9be 	bl	800e754 <chk_lock>
 80103d8:	4603      	mov	r3, r0
 80103da:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80103de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80103e2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	f003 031c 	and.w	r3, r3, #28
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 80e6 	beq.w	80105be <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80103f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d027      	beq.n	801044a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80103fa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80103fe:	2b04      	cmp	r3, #4
 8010400:	d10e      	bne.n	8010420 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010402:	f7fe fa13 	bl	800e82c <enq_lock>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d006      	beq.n	801041a <f_open+0x14e>
 801040c:	f107 0320 	add.w	r3, r7, #32
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fa02 	bl	800f81a <dir_register>
 8010416:	4603      	mov	r3, r0
 8010418:	e000      	b.n	801041c <f_open+0x150>
 801041a:	2312      	movs	r3, #18
 801041c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010424:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010428:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801042c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010430:	7812      	ldrb	r2, [r2, #0]
 8010432:	f042 0208 	orr.w	r2, r2, #8
 8010436:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8010438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801043c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010440:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010444:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8010448:	e017      	b.n	801047a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801044a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801044e:	330b      	adds	r3, #11
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	f003 0311 	and.w	r3, r3, #17
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <f_open+0x196>
					res = FR_DENIED;
 801045a:	2307      	movs	r3, #7
 801045c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8010460:	e00b      	b.n	801047a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8010462:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010466:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <f_open+0x1ae>
						res = FR_EXIST;
 8010474:	2308      	movs	r3, #8
 8010476:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801047a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801047e:	2b00      	cmp	r3, #0
 8010480:	f040 80c1 	bne.w	8010606 <f_open+0x33a>
 8010484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010488:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 0308 	and.w	r3, r3, #8
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 80b7 	beq.w	8010606 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8010498:	f7fc fd7c 	bl	800cf94 <get_fattime>
 801049c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80104a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104a4:	330e      	adds	r3, #14
 80104a6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80104aa:	b2d2      	uxtb	r2, r2
 80104ac:	701a      	strb	r2, [r3, #0]
 80104ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	0a1b      	lsrs	r3, r3, #8
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104bc:	330f      	adds	r3, #15
 80104be:	b2d2      	uxtb	r2, r2
 80104c0:	701a      	strb	r2, [r3, #0]
 80104c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104c6:	0c1a      	lsrs	r2, r3, #16
 80104c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104cc:	3310      	adds	r3, #16
 80104ce:	b2d2      	uxtb	r2, r2
 80104d0:	701a      	strb	r2, [r3, #0]
 80104d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104d6:	0e1a      	lsrs	r2, r3, #24
 80104d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104dc:	3311      	adds	r3, #17
 80104de:	b2d2      	uxtb	r2, r2
 80104e0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80104e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104e6:	330b      	adds	r3, #11
 80104e8:	2200      	movs	r2, #0
 80104ea:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80104ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104f0:	331c      	adds	r3, #28
 80104f2:	2200      	movs	r2, #0
 80104f4:	701a      	strb	r2, [r3, #0]
 80104f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104fa:	331d      	adds	r3, #29
 80104fc:	2200      	movs	r2, #0
 80104fe:	701a      	strb	r2, [r3, #0]
 8010500:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010504:	331e      	adds	r3, #30
 8010506:	2200      	movs	r2, #0
 8010508:	701a      	strb	r2, [r3, #0]
 801050a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801050e:	331f      	adds	r3, #31
 8010510:	2200      	movs	r2, #0
 8010512:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8010514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010518:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801051c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010520:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff f8d6 	bl	800f6d6 <ld_clust>
 801052a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 801052e:	2100      	movs	r1, #0
 8010530:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8010534:	f7ff f8fc 	bl	800f730 <st_clust>
				dj.fs->wflag = 1;
 8010538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801053c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010544:	2201      	movs	r2, #1
 8010546:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801054a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801054e:	2b00      	cmp	r3, #0
 8010550:	d059      	beq.n	8010606 <f_open+0x33a>
					dw = dj.fs->winsect;
 8010552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010556:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801055a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801055e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010562:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8010566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801056a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801056e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010572:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe fdad 	bl	800f0d6 <remove_chain>
 801057c:	4603      	mov	r3, r0
 801057e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8010582:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010586:	2b00      	cmp	r3, #0
 8010588:	d13d      	bne.n	8010606 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801058a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801058e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010592:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010596:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801059a:	3a01      	subs	r2, #1
 801059c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80105a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80105a4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80105a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105ac:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fe facc 	bl	800eb4e <move_window>
 80105b6:	4603      	mov	r3, r0
 80105b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80105bc:	e023      	b.n	8010606 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80105be:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d11f      	bne.n	8010606 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80105c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80105ca:	330b      	adds	r3, #11
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	f003 0310 	and.w	r3, r3, #16
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d003      	beq.n	80105de <f_open+0x312>
					res = FR_NO_FILE;
 80105d6:	2304      	movs	r3, #4
 80105d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80105dc:	e013      	b.n	8010606 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80105de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80105e2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 0302 	and.w	r3, r3, #2
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00a      	beq.n	8010606 <f_open+0x33a>
 80105f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80105f4:	330b      	adds	r3, #11
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <f_open+0x33a>
						res = FR_DENIED;
 8010600:	2307      	movs	r3, #7
 8010602:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8010606:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801060a:	2b00      	cmp	r3, #0
 801060c:	d153      	bne.n	80106b6 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801060e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010612:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	f003 0308 	and.w	r3, r3, #8
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00b      	beq.n	8010638 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8010620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010624:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010628:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801062c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010630:	7812      	ldrb	r2, [r2, #0]
 8010632:	f042 0220 	orr.w	r2, r2, #32
 8010636:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8010638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801063c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010644:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8010648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801064c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8010656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801065a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010664:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801066c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	f023 0301 	bic.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	bf14      	ite	ne
 801067a:	2301      	movne	r3, #1
 801067c:	2300      	moveq	r3, #0
 801067e:	b2db      	uxtb	r3, r3
 8010680:	461a      	mov	r2, r3
 8010682:	f107 0320 	add.w	r3, r7, #32
 8010686:	4611      	mov	r1, r2
 8010688:	4618      	mov	r0, r3
 801068a:	f7fe f8f3 	bl	800e874 <inc_lock>
 801068e:	4602      	mov	r2, r0
 8010690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010694:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801069e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106a2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d102      	bne.n	80106b6 <f_open+0x3ea>
 80106b0:	2302      	movs	r3, #2
 80106b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80106b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d178      	bne.n	80107b0 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80106be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80106cc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80106d0:	7812      	ldrb	r2, [r2, #0]
 80106d2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80106d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80106e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106ea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80106ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106f2:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fe ffed 	bl	800f6d6 <ld_clust>
 80106fc:	4602      	mov	r2, r0
 80106fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010702:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 801070c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010710:	331f      	adds	r3, #31
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	061a      	lsls	r2, r3, #24
 8010716:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801071a:	331e      	adds	r3, #30
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	041b      	lsls	r3, r3, #16
 8010720:	4313      	orrs	r3, r2
 8010722:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010726:	321d      	adds	r2, #29
 8010728:	7812      	ldrb	r2, [r2, #0]
 801072a:	0212      	lsls	r2, r2, #8
 801072c:	4313      	orrs	r3, r2
 801072e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010732:	321c      	adds	r2, #28
 8010734:	7812      	ldrb	r2, [r2, #0]
 8010736:	431a      	orrs	r2, r3
 8010738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801073c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8010746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801074a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2200      	movs	r2, #0
 8010752:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8010756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801075a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2200      	movs	r2, #0
 8010762:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8010766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801076a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2200      	movs	r2, #0
 8010772:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8010776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801077a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801077e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010786:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8010790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010794:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801079e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80107a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80107a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80107b0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b08c      	sub	sp, #48	; 0x30
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	60f8      	str	r0, [r7, #12]
 80107c6:	60b9      	str	r1, [r7, #8]
 80107c8:	607a      	str	r2, [r7, #4]
 80107ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f7ff fcfc 	bl	80101d4 <validate>
 80107dc:	4603      	mov	r3, r0
 80107de:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80107e0:	7ffb      	ldrb	r3, [r7, #31]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d001      	beq.n	80107ea <f_read+0x2c>
 80107e6:	7ffb      	ldrb	r3, [r7, #31]
 80107e8:	e150      	b.n	8010a8c <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d003      	beq.n	80107fc <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80107fa:	e147      	b.n	8010a8c <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	2b00      	cmp	r3, #0
 8010808:	d101      	bne.n	801080e <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 801080a:	2307      	movs	r3, #7
 801080c:	e13e      	b.n	8010a8c <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	429a      	cmp	r2, r3
 8010824:	f240 812d 	bls.w	8010a82 <f_read+0x2c4>
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801082c:	e129      	b.n	8010a82 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010838:	2b00      	cmp	r3, #0
 801083a:	f040 80f2 	bne.w	8010a22 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010844:	0a5b      	lsrs	r3, r3, #9
 8010846:	b2da      	uxtb	r2, r3
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801084e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010852:	3b01      	subs	r3, #1
 8010854:	b2db      	uxtb	r3, r3
 8010856:	4013      	ands	r3, r2
 8010858:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 801085a:	7dfb      	ldrb	r3, [r7, #23]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d139      	bne.n	80108d4 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010866:	2b00      	cmp	r3, #0
 8010868:	d104      	bne.n	8010874 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010872:	e018      	b.n	80108a6 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801087a:	2b00      	cmp	r3, #0
 801087c:	d008      	beq.n	8010890 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010884:	4619      	mov	r1, r3
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f7fe fd1c 	bl	800f2c4 <clmt_clust>
 801088c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801088e:	e00a      	b.n	80108a6 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801089c:	4619      	mov	r1, r3
 801089e:	4610      	mov	r0, r2
 80108a0:	f7fe fa51 	bl	800ed46 <get_fat>
 80108a4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80108a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d805      	bhi.n	80108b8 <f_read+0xfa>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2202      	movs	r2, #2
 80108b0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80108b4:	2302      	movs	r3, #2
 80108b6:	e0e9      	b.n	8010a8c <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80108b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108be:	d105      	bne.n	80108cc <f_read+0x10e>
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2201      	movs	r2, #1
 80108c4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80108c8:	2301      	movs	r3, #1
 80108ca:	e0df      	b.n	8010a8c <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80108e0:	4619      	mov	r1, r3
 80108e2:	4610      	mov	r0, r2
 80108e4:	f7fe fa0e 	bl	800ed04 <clust2sect>
 80108e8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d105      	bne.n	80108fc <f_read+0x13e>
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2202      	movs	r2, #2
 80108f4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80108f8:	2302      	movs	r3, #2
 80108fa:	e0c7      	b.n	8010a8c <f_read+0x2ce>
			sect += csect;
 80108fc:	7dfb      	ldrb	r3, [r7, #23]
 80108fe:	693a      	ldr	r2, [r7, #16]
 8010900:	4413      	add	r3, r2
 8010902:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	0a5b      	lsrs	r3, r3, #9
 8010908:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	2b00      	cmp	r3, #0
 801090e:	d046      	beq.n	801099e <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010910:	7dfa      	ldrb	r2, [r7, #23]
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	4413      	add	r3, r2
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801091c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010920:	4293      	cmp	r3, r2
 8010922:	d908      	bls.n	8010936 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801092a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801092e:	461a      	mov	r2, r3
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801093c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	693a      	ldr	r2, [r7, #16]
 8010944:	6a39      	ldr	r1, [r7, #32]
 8010946:	f7fd fe2f 	bl	800e5a8 <disk_read>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d005      	beq.n	801095c <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2201      	movs	r2, #1
 8010954:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010958:	2301      	movs	r3, #1
 801095a:	e097      	b.n	8010a8c <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010966:	2b00      	cmp	r3, #0
 8010968:	d015      	beq.n	8010996 <f_read+0x1d8>
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010976:	429a      	cmp	r2, r3
 8010978:	d90d      	bls.n	8010996 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	025b      	lsls	r3, r3, #9
 8010986:	6a3a      	ldr	r2, [r7, #32]
 8010988:	4413      	add	r3, r2
 801098a:	68f9      	ldr	r1, [r7, #12]
 801098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010990:	4618      	mov	r0, r3
 8010992:	f7fd fe67 	bl	800e664 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	025b      	lsls	r3, r3, #9
 801099a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 801099c:	e05b      	b.n	8010a56 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80109a4:	693a      	ldr	r2, [r7, #16]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d037      	beq.n	8010a1a <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80109b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d01d      	beq.n	80109f4 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109be:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80109c2:	68f9      	ldr	r1, [r7, #12]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80109ca:	2301      	movs	r3, #1
 80109cc:	f7fd fe0c 	bl	800e5e8 <disk_write>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d005      	beq.n	80109e2 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2201      	movs	r2, #1
 80109da:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80109de:	2301      	movs	r3, #1
 80109e0:	e054      	b.n	8010a8c <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80109e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109fa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80109fe:	68f9      	ldr	r1, [r7, #12]
 8010a00:	2301      	movs	r3, #1
 8010a02:	693a      	ldr	r2, [r7, #16]
 8010a04:	f7fd fdd0 	bl	800e5a8 <disk_read>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d005      	beq.n	8010a1a <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2201      	movs	r2, #1
 8010a12:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010a16:	2301      	movs	r3, #1
 8010a18:	e038      	b.n	8010a8c <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010a30:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8010a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d901      	bls.n	8010a3e <f_read+0x280>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a4e:	4619      	mov	r1, r3
 8010a50:	6a38      	ldr	r0, [r7, #32]
 8010a52:	f7fd fe07 	bl	800e664 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a56:	6a3a      	ldr	r2, [r7, #32]
 8010a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5a:	4413      	add	r3, r2
 8010a5c:	623b      	str	r3, [r7, #32]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a66:	441a      	add	r2, r3
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a74:	441a      	add	r2, r3
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f47f aed2 	bne.w	801082e <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3730      	adds	r7, #48	; 0x30
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08a      	sub	sp, #40	; 0x28
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	607a      	str	r2, [r7, #4]
 8010aa0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f7ff fb91 	bl	80101d4 <validate>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <f_write+0x2c>
 8010abc:	7dfb      	ldrb	r3, [r7, #23]
 8010abe:	e192      	b.n	8010de6 <f_write+0x352>
	if (fp->err)							/* Check error */
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d003      	beq.n	8010ad2 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8010ad0:	e189      	b.n	8010de6 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010ad8:	f003 0302 	and.w	r3, r3, #2
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d101      	bne.n	8010ae4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8010ae0:	2307      	movs	r3, #7
 8010ae2:	e180      	b.n	8010de6 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	441a      	add	r2, r3
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010af4:	429a      	cmp	r2, r3
 8010af6:	f080 8158 	bcs.w	8010daa <f_write+0x316>
 8010afa:	2300      	movs	r3, #0
 8010afc:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8010afe:	e154      	b.n	8010daa <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f040 8114 	bne.w	8010d38 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b16:	0a5b      	lsrs	r3, r3, #9
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b20:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010b24:	3b01      	subs	r3, #1
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	4013      	ands	r3, r2
 8010b2a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8010b2c:	7dbb      	ldrb	r3, [r7, #22]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d151      	bne.n	8010bd6 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10f      	bne.n	8010b5c <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b42:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8010b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d121      	bne.n	8010b8e <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b50:	2100      	movs	r1, #0
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe fb19 	bl	800f18a <create_chain>
 8010b58:	6278      	str	r0, [r7, #36]	; 0x24
 8010b5a:	e018      	b.n	8010b8e <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d008      	beq.n	8010b78 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f7fe fba8 	bl	800f2c4 <clmt_clust>
 8010b74:	6278      	str	r0, [r7, #36]	; 0x24
 8010b76:	e00a      	b.n	8010b8e <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b84:	4619      	mov	r1, r3
 8010b86:	4610      	mov	r0, r2
 8010b88:	f7fe faff 	bl	800f18a <create_chain>
 8010b8c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f000 810f 	beq.w	8010db4 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8010b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d105      	bne.n	8010ba8 <f_write+0x114>
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010ba4:	2302      	movs	r3, #2
 8010ba6:	e11e      	b.n	8010de6 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bae:	d105      	bne.n	8010bbc <f_write+0x128>
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e114      	b.n	8010de6 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d103      	bne.n	8010bd6 <f_write+0x142>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d01d      	beq.n	8010c20 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010bea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010bee:	68f9      	ldr	r1, [r7, #12]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	f7fd fcf6 	bl	800e5e8 <disk_write>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d005      	beq.n	8010c0e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2201      	movs	r2, #1
 8010c06:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e0eb      	b.n	8010de6 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	4610      	mov	r0, r2
 8010c30:	f7fe f868 	bl	800ed04 <clust2sect>
 8010c34:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d105      	bne.n	8010c48 <f_write+0x1b4>
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2202      	movs	r2, #2
 8010c40:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010c44:	2302      	movs	r3, #2
 8010c46:	e0ce      	b.n	8010de6 <f_write+0x352>
			sect += csect;
 8010c48:	7dbb      	ldrb	r3, [r7, #22]
 8010c4a:	693a      	ldr	r2, [r7, #16]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	0a5b      	lsrs	r3, r3, #9
 8010c54:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d048      	beq.n	8010cee <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010c5c:	7dba      	ldrb	r2, [r7, #22]
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	4413      	add	r3, r2
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010c68:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d908      	bls.n	8010c82 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c76:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	7dbb      	ldrb	r3, [r7, #22]
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c88:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	69b9      	ldr	r1, [r7, #24]
 8010c92:	f7fd fca9 	bl	800e5e8 <disk_write>
 8010c96:	4603      	mov	r3, r0
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d005      	beq.n	8010ca8 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2201      	movs	r2, #1
 8010ca0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e09e      	b.n	8010de6 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	69fa      	ldr	r2, [r7, #28]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d916      	bls.n	8010ce6 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	025b      	lsls	r3, r3, #9
 8010cc6:	69ba      	ldr	r2, [r7, #24]
 8010cc8:	4413      	add	r3, r2
 8010cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cce:	4619      	mov	r1, r3
 8010cd0:	f7fd fcc8 	bl	800e664 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cde:	b2da      	uxtb	r2, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	025b      	lsls	r3, r3, #9
 8010cea:	623b      	str	r3, [r7, #32]
				continue;
 8010cec:	e047      	b.n	8010d7e <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d01a      	beq.n	8010d30 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d212      	bcs.n	8010d30 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d10:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010d14:	68f9      	ldr	r1, [r7, #12]
 8010d16:	2301      	movs	r3, #1
 8010d18:	693a      	ldr	r2, [r7, #16]
 8010d1a:	f7fd fc45 	bl	800e5a8 <disk_read>
 8010d1e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d005      	beq.n	8010d30 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	e05a      	b.n	8010de6 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	693a      	ldr	r2, [r7, #16]
 8010d34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d42:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d46:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8010d48:	6a3a      	ldr	r2, [r7, #32]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d901      	bls.n	8010d54 <f_write+0x2c0>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	4413      	add	r3, r2
 8010d62:	6a3a      	ldr	r2, [r7, #32]
 8010d64:	69b9      	ldr	r1, [r7, #24]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fd fc7c 	bl	800e664 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	6a3b      	ldr	r3, [r7, #32]
 8010d82:	4413      	add	r3, r2
 8010d84:	61bb      	str	r3, [r7, #24]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	441a      	add	r2, r3
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	681a      	ldr	r2, [r3, #0]
 8010d9a:	6a3b      	ldr	r3, [r7, #32]
 8010d9c:	441a      	add	r2, r3
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	6a3b      	ldr	r3, [r7, #32]
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f47f aea7 	bne.w	8010b00 <f_write+0x6c>
 8010db2:	e000      	b.n	8010db6 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010db4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d905      	bls.n	8010dd2 <f_write+0x33e>
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010dd8:	f043 0320 	orr.w	r3, r3, #32
 8010ddc:	b2da      	uxtb	r2, r3
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3728      	adds	r7, #40	; 0x28
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b086      	sub	sp, #24
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7ff f9ec 	bl	80101d4 <validate>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e00:	7dfb      	ldrb	r3, [r7, #23]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f040 80a8 	bne.w	8010f58 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010e0e:	f003 0320 	and.w	r3, r3, #32
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 80a0 	beq.w	8010f58 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d019      	beq.n	8010e5a <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e2c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010e30:	6879      	ldr	r1, [r7, #4]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010e38:	2301      	movs	r3, #1
 8010e3a:	f7fd fbd5 	bl	800e5e8 <disk_write>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d001      	beq.n	8010e48 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8010e44:	2301      	movs	r3, #1
 8010e46:	e088      	b.n	8010f5a <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010e66:	4619      	mov	r1, r3
 8010e68:	4610      	mov	r0, r2
 8010e6a:	f7fd fe70 	bl	800eb4e <move_window>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010e72:	7dfb      	ldrb	r3, [r7, #23]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d16f      	bne.n	8010f58 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010e7e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	330b      	adds	r3, #11
 8010e84:	781a      	ldrb	r2, [r3, #0]
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	330b      	adds	r3, #11
 8010e8a:	f042 0220 	orr.w	r2, r2, #32
 8010e8e:	b2d2      	uxtb	r2, r2
 8010e90:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	331c      	adds	r3, #28
 8010e9c:	b2d2      	uxtb	r2, r2
 8010e9e:	701a      	strb	r2, [r3, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	0a1b      	lsrs	r3, r3, #8
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	331d      	adds	r3, #29
 8010eb0:	b2d2      	uxtb	r2, r2
 8010eb2:	701a      	strb	r2, [r3, #0]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010eba:	0c1a      	lsrs	r2, r3, #16
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	331e      	adds	r3, #30
 8010ec0:	b2d2      	uxtb	r2, r2
 8010ec2:	701a      	strb	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010eca:	0e1a      	lsrs	r2, r3, #24
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	331f      	adds	r3, #31
 8010ed0:	b2d2      	uxtb	r2, r2
 8010ed2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010eda:	4619      	mov	r1, r3
 8010edc:	6938      	ldr	r0, [r7, #16]
 8010ede:	f7fe fc27 	bl	800f730 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8010ee2:	f7fc f857 	bl	800cf94 <get_fattime>
 8010ee6:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	3316      	adds	r3, #22
 8010eec:	68fa      	ldr	r2, [r7, #12]
 8010eee:	b2d2      	uxtb	r2, r2
 8010ef0:	701a      	strb	r2, [r3, #0]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	0a1b      	lsrs	r3, r3, #8
 8010ef8:	b29a      	uxth	r2, r3
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	3317      	adds	r3, #23
 8010efe:	b2d2      	uxtb	r2, r2
 8010f00:	701a      	strb	r2, [r3, #0]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	0c1a      	lsrs	r2, r3, #16
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	3318      	adds	r3, #24
 8010f0a:	b2d2      	uxtb	r2, r2
 8010f0c:	701a      	strb	r2, [r3, #0]
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	0e1a      	lsrs	r2, r3, #24
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	3319      	adds	r3, #25
 8010f16:	b2d2      	uxtb	r2, r2
 8010f18:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	3312      	adds	r3, #18
 8010f1e:	2200      	movs	r2, #0
 8010f20:	701a      	strb	r2, [r3, #0]
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	3313      	adds	r3, #19
 8010f26:	2200      	movs	r2, #0
 8010f28:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010f30:	f023 0320 	bic.w	r3, r3, #32
 8010f34:	b2da      	uxtb	r2, r3
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f42:	2201      	movs	r2, #1
 8010f44:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fd fe2b 	bl	800ebaa <sync_fs>
 8010f54:	4603      	mov	r3, r0
 8010f56:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8010f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b084      	sub	sp, #16
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7ff ff3f 	bl	8010dee <f_sync>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d116      	bne.n	8010fa8 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f7ff f92a 	bl	80101d4 <validate>
 8010f80:	4603      	mov	r3, r0
 8010f82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f84:	7bfb      	ldrb	r3, [r7, #15]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10e      	bne.n	8010fa8 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fd fd25 	bl	800e9e0 <dec_lock>
 8010f96:	4603      	mov	r3, r0
 8010f98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010f9a:	7bfb      	ldrb	r3, [r7, #15]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d103      	bne.n	8010fa8 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
	...

08010fb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b087      	sub	sp, #28
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8010fca:	4b1e      	ldr	r3, [pc, #120]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010fcc:	7a5b      	ldrb	r3, [r3, #9]
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d831      	bhi.n	8011038 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010fd4:	4b1b      	ldr	r3, [pc, #108]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010fd6:	7a5b      	ldrb	r3, [r3, #9]
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	461a      	mov	r2, r3
 8010fdc:	4b19      	ldr	r3, [pc, #100]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010fde:	2100      	movs	r1, #0
 8010fe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8010fe2:	4b18      	ldr	r3, [pc, #96]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010fe4:	7a5b      	ldrb	r3, [r3, #9]
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	4a16      	ldr	r2, [pc, #88]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	4413      	add	r3, r2
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8010ff2:	4b14      	ldr	r3, [pc, #80]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010ff4:	7a5b      	ldrb	r3, [r3, #9]
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	4b12      	ldr	r3, [pc, #72]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8010ffc:	4413      	add	r3, r2
 8010ffe:	79fa      	ldrb	r2, [r7, #7]
 8011000:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011002:	4b10      	ldr	r3, [pc, #64]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 8011004:	7a5b      	ldrb	r3, [r3, #9]
 8011006:	b2db      	uxtb	r3, r3
 8011008:	1c5a      	adds	r2, r3, #1
 801100a:	b2d1      	uxtb	r1, r2
 801100c:	4a0d      	ldr	r2, [pc, #52]	; (8011044 <FATFS_LinkDriverEx+0x90>)
 801100e:	7251      	strb	r1, [r2, #9]
 8011010:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011012:	7dbb      	ldrb	r3, [r7, #22]
 8011014:	3330      	adds	r3, #48	; 0x30
 8011016:	b2da      	uxtb	r2, r3
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	3301      	adds	r3, #1
 8011020:	223a      	movs	r2, #58	; 0x3a
 8011022:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	3302      	adds	r3, #2
 8011028:	222f      	movs	r2, #47	; 0x2f
 801102a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	3303      	adds	r3, #3
 8011030:	2200      	movs	r2, #0
 8011032:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8011038:	7dfb      	ldrb	r3, [r7, #23]
}
 801103a:	4618      	mov	r0, r3
 801103c:	371c      	adds	r7, #28
 801103e:	46bd      	mov	sp, r7
 8011040:	bc80      	pop	{r7}
 8011042:	4770      	bx	lr
 8011044:	20000e8c 	.word	0x20000e8c

08011048 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011052:	2200      	movs	r2, #0
 8011054:	6839      	ldr	r1, [r7, #0]
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f7ff ffac 	bl	8010fb4 <FATFS_LinkDriverEx>
 801105c:	4603      	mov	r3, r0
}
 801105e:	4618      	mov	r0, r3
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
	...

08011068 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	4603      	mov	r3, r0
 8011070:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011072:	4b0b      	ldr	r3, [pc, #44]	; (80110a0 <SD_initialize+0x38>)
 8011074:	2201      	movs	r2, #1
 8011076:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8011078:	f7fb ff94 	bl	800cfa4 <BSP_SD_Init>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d107      	bne.n	8011092 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011082:	4b07      	ldr	r3, [pc, #28]	; (80110a0 <SD_initialize+0x38>)
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	b2db      	uxtb	r3, r3
 8011088:	f023 0301 	bic.w	r3, r3, #1
 801108c:	b2da      	uxtb	r2, r3
 801108e:	4b04      	ldr	r3, [pc, #16]	; (80110a0 <SD_initialize+0x38>)
 8011090:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011092:	4b03      	ldr	r3, [pc, #12]	; (80110a0 <SD_initialize+0x38>)
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	b2db      	uxtb	r3, r3
}
 8011098:	4618      	mov	r0, r3
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	20000117 	.word	0x20000117

080110a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	4603      	mov	r3, r0
 80110ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80110ae:	4b0b      	ldr	r3, [pc, #44]	; (80110dc <SD_status+0x38>)
 80110b0:	2201      	movs	r2, #1
 80110b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80110b4:	f7fb ffd8 	bl	800d068 <BSP_SD_GetCardState>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d107      	bne.n	80110ce <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80110be:	4b07      	ldr	r3, [pc, #28]	; (80110dc <SD_status+0x38>)
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	f023 0301 	bic.w	r3, r3, #1
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	4b04      	ldr	r3, [pc, #16]	; (80110dc <SD_status+0x38>)
 80110cc:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80110ce:	4b03      	ldr	r3, [pc, #12]	; (80110dc <SD_status+0x38>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	b2db      	uxtb	r3, r3
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	20000117 	.word	0x20000117

080110e0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60b9      	str	r1, [r7, #8]
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80110f0:	2301      	movs	r3, #1
 80110f2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80110f4:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <SD_read+0x54>)
 80110f6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80110f8:	4b0f      	ldr	r3, [pc, #60]	; (8011138 <SD_read+0x58>)
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	6879      	ldr	r1, [r7, #4]
 80110fe:	68b8      	ldr	r0, [r7, #8]
 8011100:	f7fb ff76 	bl	800cff0 <BSP_SD_ReadBlocks>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10e      	bne.n	8011128 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801110a:	e006      	b.n	801111a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	1e5a      	subs	r2, r3, #1
 8011110:	613a      	str	r2, [r7, #16]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <SD_read+0x3a>
      {
        return RES_ERROR;
 8011116:	2301      	movs	r3, #1
 8011118:	e007      	b.n	801112a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801111a:	f7fb ffa5 	bl	800d068 <BSP_SD_GetCardState>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d1f3      	bne.n	801110c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8011124:	2300      	movs	r3, #0
 8011126:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011128:	7dfb      	ldrb	r3, [r7, #23]
}
 801112a:	4618      	mov	r0, r3
 801112c:	3718      	adds	r7, #24
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	000186a0 	.word	0x000186a0
 8011138:	05f5e100 	.word	0x05f5e100

0801113c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b086      	sub	sp, #24
 8011140:	af00      	add	r7, sp, #0
 8011142:	60b9      	str	r1, [r7, #8]
 8011144:	607a      	str	r2, [r7, #4]
 8011146:	603b      	str	r3, [r7, #0]
 8011148:	4603      	mov	r3, r0
 801114a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801114c:	2301      	movs	r3, #1
 801114e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011150:	4b0f      	ldr	r3, [pc, #60]	; (8011190 <SD_write+0x54>)
 8011152:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8011154:	4b0f      	ldr	r3, [pc, #60]	; (8011194 <SD_write+0x58>)
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	6879      	ldr	r1, [r7, #4]
 801115a:	68b8      	ldr	r0, [r7, #8]
 801115c:	f7fb ff66 	bl	800d02c <BSP_SD_WriteBlocks>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10e      	bne.n	8011184 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011166:	e006      	b.n	8011176 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	1e5a      	subs	r2, r3, #1
 801116c:	613a      	str	r2, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <SD_write+0x3a>
      {
        return RES_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e007      	b.n	8011186 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011176:	f7fb ff77 	bl	800d068 <BSP_SD_GetCardState>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1f3      	bne.n	8011168 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011184:	7dfb      	ldrb	r3, [r7, #23]
}
 8011186:	4618      	mov	r0, r3
 8011188:	3718      	adds	r7, #24
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	000186a0 	.word	0x000186a0
 8011194:	05f5e100 	.word	0x05f5e100

08011198 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b08c      	sub	sp, #48	; 0x30
 801119c:	af00      	add	r7, sp, #0
 801119e:	4603      	mov	r3, r0
 80111a0:	603a      	str	r2, [r7, #0]
 80111a2:	71fb      	strb	r3, [r7, #7]
 80111a4:	460b      	mov	r3, r1
 80111a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80111a8:	2301      	movs	r3, #1
 80111aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80111ae:	4b24      	ldr	r3, [pc, #144]	; (8011240 <SD_ioctl+0xa8>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	f003 0301 	and.w	r3, r3, #1
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d001      	beq.n	80111c0 <SD_ioctl+0x28>
 80111bc:	2303      	movs	r3, #3
 80111be:	e03b      	b.n	8011238 <SD_ioctl+0xa0>
  
  switch (cmd)
 80111c0:	79bb      	ldrb	r3, [r7, #6]
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	d833      	bhi.n	801122e <SD_ioctl+0x96>
 80111c6:	a201      	add	r2, pc, #4	; (adr r2, 80111cc <SD_ioctl+0x34>)
 80111c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111cc:	080111dd 	.word	0x080111dd
 80111d0:	080111e5 	.word	0x080111e5
 80111d4:	080111fd 	.word	0x080111fd
 80111d8:	08011217 	.word	0x08011217
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80111dc:	2300      	movs	r3, #0
 80111de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80111e2:	e027      	b.n	8011234 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80111e4:	f107 030c 	add.w	r3, r7, #12
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fb ff4d 	bl	800d088 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80111ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80111f4:	2300      	movs	r3, #0
 80111f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80111fa:	e01b      	b.n	8011234 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80111fc:	f107 030c 	add.w	r3, r7, #12
 8011200:	4618      	mov	r0, r3
 8011202:	f7fb ff41 	bl	800d088 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011208:	b29a      	uxth	r2, r3
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011214:	e00e      	b.n	8011234 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011216:	f107 030c 	add.w	r3, r7, #12
 801121a:	4618      	mov	r0, r3
 801121c:	f7fb ff34 	bl	800d088 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8011220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801122c:	e002      	b.n	8011234 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 801122e:	2304      	movs	r3, #4
 8011230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8011234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011238:	4618      	mov	r0, r3
 801123a:	3730      	adds	r7, #48	; 0x30
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	20000117 	.word	0x20000117

08011244 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011248:	2200      	movs	r2, #0
 801124a:	490e      	ldr	r1, [pc, #56]	; (8011284 <MX_USB_DEVICE_Init+0x40>)
 801124c:	480e      	ldr	r0, [pc, #56]	; (8011288 <MX_USB_DEVICE_Init+0x44>)
 801124e:	f7fc f8ef 	bl	800d430 <USBD_Init>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d001      	beq.n	801125c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011258:	f7f1 ffca 	bl	80031f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 801125c:	490b      	ldr	r1, [pc, #44]	; (801128c <MX_USB_DEVICE_Init+0x48>)
 801125e:	480a      	ldr	r0, [pc, #40]	; (8011288 <MX_USB_DEVICE_Init+0x44>)
 8011260:	f7fc f911 	bl	800d486 <USBD_RegisterClass>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801126a:	f7f1 ffc1 	bl	80031f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801126e:	4806      	ldr	r0, [pc, #24]	; (8011288 <MX_USB_DEVICE_Init+0x44>)
 8011270:	f7fc f922 	bl	800d4b8 <USBD_Start>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d001      	beq.n	801127e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 801127a:	f7f1 ffb9 	bl	80031f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801127e:	bf00      	nop
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	20000118 	.word	0x20000118
 8011288:	20000e98 	.word	0x20000e98
 801128c:	2000001c 	.word	0x2000001c

08011290 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	6039      	str	r1, [r7, #0]
 801129a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	2212      	movs	r2, #18
 80112a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80112a2:	4b03      	ldr	r3, [pc, #12]	; (80112b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	370c      	adds	r7, #12
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bc80      	pop	{r7}
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	20000134 	.word	0x20000134

080112b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	6039      	str	r1, [r7, #0]
 80112be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	2204      	movs	r2, #4
 80112c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80112c6:	4b03      	ldr	r3, [pc, #12]	; (80112d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bc80      	pop	{r7}
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	20000148 	.word	0x20000148

080112d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	4603      	mov	r3, r0
 80112e0:	6039      	str	r1, [r7, #0]
 80112e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80112e4:	79fb      	ldrb	r3, [r7, #7]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d105      	bne.n	80112f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	4907      	ldr	r1, [pc, #28]	; (801130c <USBD_FS_ProductStrDescriptor+0x34>)
 80112ee:	4808      	ldr	r0, [pc, #32]	; (8011310 <USBD_FS_ProductStrDescriptor+0x38>)
 80112f0:	f7fd f85a 	bl	800e3a8 <USBD_GetString>
 80112f4:	e004      	b.n	8011300 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80112f6:	683a      	ldr	r2, [r7, #0]
 80112f8:	4904      	ldr	r1, [pc, #16]	; (801130c <USBD_FS_ProductStrDescriptor+0x34>)
 80112fa:	4805      	ldr	r0, [pc, #20]	; (8011310 <USBD_FS_ProductStrDescriptor+0x38>)
 80112fc:	f7fd f854 	bl	800e3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011300:	4b02      	ldr	r3, [pc, #8]	; (801130c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011302:	4618      	mov	r0, r3
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	2000115c 	.word	0x2000115c
 8011310:	08014bb0 	.word	0x08014bb0

08011314 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	4603      	mov	r3, r0
 801131c:	6039      	str	r1, [r7, #0]
 801131e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	4904      	ldr	r1, [pc, #16]	; (8011334 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011324:	4804      	ldr	r0, [pc, #16]	; (8011338 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011326:	f7fd f83f 	bl	800e3a8 <USBD_GetString>
  return USBD_StrDesc;
 801132a:	4b02      	ldr	r3, [pc, #8]	; (8011334 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801132c:	4618      	mov	r0, r3
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	2000115c 	.word	0x2000115c
 8011338:	08014bc8 	.word	0x08014bc8

0801133c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	6039      	str	r1, [r7, #0]
 8011346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	221a      	movs	r2, #26
 801134c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801134e:	f000 f843 	bl	80113d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011352:	4b02      	ldr	r3, [pc, #8]	; (801135c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011354:	4618      	mov	r0, r3
 8011356:	3708      	adds	r7, #8
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}
 801135c:	2000014c 	.word	0x2000014c

08011360 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	4603      	mov	r3, r0
 8011368:	6039      	str	r1, [r7, #0]
 801136a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d105      	bne.n	801137e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011372:	683a      	ldr	r2, [r7, #0]
 8011374:	4907      	ldr	r1, [pc, #28]	; (8011394 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011376:	4808      	ldr	r0, [pc, #32]	; (8011398 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011378:	f7fd f816 	bl	800e3a8 <USBD_GetString>
 801137c:	e004      	b.n	8011388 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801137e:	683a      	ldr	r2, [r7, #0]
 8011380:	4904      	ldr	r1, [pc, #16]	; (8011394 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011382:	4805      	ldr	r0, [pc, #20]	; (8011398 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011384:	f7fd f810 	bl	800e3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011388:	4b02      	ldr	r3, [pc, #8]	; (8011394 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801138a:	4618      	mov	r0, r3
 801138c:	3708      	adds	r7, #8
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	2000115c 	.word	0x2000115c
 8011398:	08014bdc 	.word	0x08014bdc

0801139c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	4603      	mov	r3, r0
 80113a4:	6039      	str	r1, [r7, #0]
 80113a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113a8:	79fb      	ldrb	r3, [r7, #7]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d105      	bne.n	80113ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80113ae:	683a      	ldr	r2, [r7, #0]
 80113b0:	4907      	ldr	r1, [pc, #28]	; (80113d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80113b2:	4808      	ldr	r0, [pc, #32]	; (80113d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80113b4:	f7fc fff8 	bl	800e3a8 <USBD_GetString>
 80113b8:	e004      	b.n	80113c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	4904      	ldr	r1, [pc, #16]	; (80113d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80113be:	4805      	ldr	r0, [pc, #20]	; (80113d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80113c0:	f7fc fff2 	bl	800e3a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113c4:	4b02      	ldr	r3, [pc, #8]	; (80113d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3708      	adds	r7, #8
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	2000115c 	.word	0x2000115c
 80113d4:	08014be8 	.word	0x08014be8

080113d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80113de:	4b0f      	ldr	r3, [pc, #60]	; (801141c <Get_SerialNum+0x44>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80113e4:	4b0e      	ldr	r3, [pc, #56]	; (8011420 <Get_SerialNum+0x48>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80113ea:	4b0e      	ldr	r3, [pc, #56]	; (8011424 <Get_SerialNum+0x4c>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4413      	add	r3, r2
 80113f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d009      	beq.n	8011412 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80113fe:	2208      	movs	r2, #8
 8011400:	4909      	ldr	r1, [pc, #36]	; (8011428 <Get_SerialNum+0x50>)
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f000 f814 	bl	8011430 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011408:	2204      	movs	r2, #4
 801140a:	4908      	ldr	r1, [pc, #32]	; (801142c <Get_SerialNum+0x54>)
 801140c:	68b8      	ldr	r0, [r7, #8]
 801140e:	f000 f80f 	bl	8011430 <IntToUnicode>
  }
}
 8011412:	bf00      	nop
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	1ffff7e8 	.word	0x1ffff7e8
 8011420:	1ffff7ec 	.word	0x1ffff7ec
 8011424:	1ffff7f0 	.word	0x1ffff7f0
 8011428:	2000014e 	.word	0x2000014e
 801142c:	2000015e 	.word	0x2000015e

08011430 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011430:	b480      	push	{r7}
 8011432:	b087      	sub	sp, #28
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	4613      	mov	r3, r2
 801143c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801143e:	2300      	movs	r3, #0
 8011440:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011442:	2300      	movs	r3, #0
 8011444:	75fb      	strb	r3, [r7, #23]
 8011446:	e027      	b.n	8011498 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	0f1b      	lsrs	r3, r3, #28
 801144c:	2b09      	cmp	r3, #9
 801144e:	d80b      	bhi.n	8011468 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	0f1b      	lsrs	r3, r3, #28
 8011454:	b2da      	uxtb	r2, r3
 8011456:	7dfb      	ldrb	r3, [r7, #23]
 8011458:	005b      	lsls	r3, r3, #1
 801145a:	4619      	mov	r1, r3
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	440b      	add	r3, r1
 8011460:	3230      	adds	r2, #48	; 0x30
 8011462:	b2d2      	uxtb	r2, r2
 8011464:	701a      	strb	r2, [r3, #0]
 8011466:	e00a      	b.n	801147e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	0f1b      	lsrs	r3, r3, #28
 801146c:	b2da      	uxtb	r2, r3
 801146e:	7dfb      	ldrb	r3, [r7, #23]
 8011470:	005b      	lsls	r3, r3, #1
 8011472:	4619      	mov	r1, r3
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	440b      	add	r3, r1
 8011478:	3237      	adds	r2, #55	; 0x37
 801147a:	b2d2      	uxtb	r2, r2
 801147c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	011b      	lsls	r3, r3, #4
 8011482:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011484:	7dfb      	ldrb	r3, [r7, #23]
 8011486:	005b      	lsls	r3, r3, #1
 8011488:	3301      	adds	r3, #1
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	4413      	add	r3, r2
 801148e:	2200      	movs	r2, #0
 8011490:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011492:	7dfb      	ldrb	r3, [r7, #23]
 8011494:	3301      	adds	r3, #1
 8011496:	75fb      	strb	r3, [r7, #23]
 8011498:	7dfa      	ldrb	r2, [r7, #23]
 801149a:	79fb      	ldrb	r3, [r7, #7]
 801149c:	429a      	cmp	r2, r3
 801149e:	d3d3      	bcc.n	8011448 <IntToUnicode+0x18>
  }
}
 80114a0:	bf00      	nop
 80114a2:	bf00      	nop
 80114a4:	371c      	adds	r7, #28
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bc80      	pop	{r7}
 80114aa:	4770      	bx	lr

080114ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a0d      	ldr	r2, [pc, #52]	; (80114f0 <HAL_PCD_MspInit+0x44>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d113      	bne.n	80114e6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80114be:	4b0d      	ldr	r3, [pc, #52]	; (80114f4 <HAL_PCD_MspInit+0x48>)
 80114c0:	69db      	ldr	r3, [r3, #28]
 80114c2:	4a0c      	ldr	r2, [pc, #48]	; (80114f4 <HAL_PCD_MspInit+0x48>)
 80114c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80114c8:	61d3      	str	r3, [r2, #28]
 80114ca:	4b0a      	ldr	r3, [pc, #40]	; (80114f4 <HAL_PCD_MspInit+0x48>)
 80114cc:	69db      	ldr	r3, [r3, #28]
 80114ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80114d2:	60fb      	str	r3, [r7, #12]
 80114d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80114d6:	2200      	movs	r2, #0
 80114d8:	2100      	movs	r1, #0
 80114da:	2014      	movs	r0, #20
 80114dc:	f7f2 ff8d 	bl	80043fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80114e0:	2014      	movs	r0, #20
 80114e2:	f7f2 ffa6 	bl	8004432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80114e6:	bf00      	nop
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	40005c00 	.word	0x40005c00
 80114f4:	40021000 	.word	0x40021000

080114f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801150c:	4619      	mov	r1, r3
 801150e:	4610      	mov	r0, r2
 8011510:	f7fc f81a 	bl	800d548 <USBD_LL_SetupStage>
}
 8011514:	bf00      	nop
 8011516:	3708      	adds	r7, #8
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801152e:	78fa      	ldrb	r2, [r7, #3]
 8011530:	6879      	ldr	r1, [r7, #4]
 8011532:	4613      	mov	r3, r2
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	4413      	add	r3, r2
 8011538:	00db      	lsls	r3, r3, #3
 801153a:	440b      	add	r3, r1
 801153c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	78fb      	ldrb	r3, [r7, #3]
 8011544:	4619      	mov	r1, r3
 8011546:	f7fc f84c 	bl	800d5e2 <USBD_LL_DataOutStage>
}
 801154a:	bf00      	nop
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}

08011552 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011552:	b580      	push	{r7, lr}
 8011554:	b082      	sub	sp, #8
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
 801155a:	460b      	mov	r3, r1
 801155c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8011564:	78fa      	ldrb	r2, [r7, #3]
 8011566:	6879      	ldr	r1, [r7, #4]
 8011568:	4613      	mov	r3, r2
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	4413      	add	r3, r2
 801156e:	00db      	lsls	r3, r3, #3
 8011570:	440b      	add	r3, r1
 8011572:	333c      	adds	r3, #60	; 0x3c
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	78fb      	ldrb	r3, [r7, #3]
 8011578:	4619      	mov	r1, r3
 801157a:	f7fc f8a3 	bl	800d6c4 <USBD_LL_DataInStage>
}
 801157e:	bf00      	nop
 8011580:	3708      	adds	r7, #8
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011594:	4618      	mov	r0, r3
 8011596:	f7fc f9b3 	bl	800d900 <USBD_LL_SOF>
}
 801159a:	bf00      	nop
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b084      	sub	sp, #16
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80115aa:	2301      	movs	r3, #1
 80115ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	689b      	ldr	r3, [r3, #8]
 80115b2:	2b02      	cmp	r3, #2
 80115b4:	d001      	beq.n	80115ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80115b6:	f7f1 fe1b 	bl	80031f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80115c0:	7bfa      	ldrb	r2, [r7, #15]
 80115c2:	4611      	mov	r1, r2
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fc f963 	bl	800d890 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7fc f91c 	bl	800d80e <USBD_LL_Reset>
}
 80115d6:	bf00      	nop
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
	...

080115e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fc f95d 	bl	800d8ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	699b      	ldr	r3, [r3, #24]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d005      	beq.n	8011608 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80115fc:	4b04      	ldr	r3, [pc, #16]	; (8011610 <HAL_PCD_SuspendCallback+0x30>)
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	4a03      	ldr	r2, [pc, #12]	; (8011610 <HAL_PCD_SuspendCallback+0x30>)
 8011602:	f043 0306 	orr.w	r3, r3, #6
 8011606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011608:	bf00      	nop
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	e000ed00 	.word	0xe000ed00

08011614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011622:	4618      	mov	r0, r3
 8011624:	f7fc f957 	bl	800d8d6 <USBD_LL_Resume>
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011638:	4a1f      	ldr	r2, [pc, #124]	; (80116b8 <USBD_LL_Init+0x88>)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	4a1d      	ldr	r2, [pc, #116]	; (80116b8 <USBD_LL_Init+0x88>)
 8011644:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8011648:	4b1b      	ldr	r3, [pc, #108]	; (80116b8 <USBD_LL_Init+0x88>)
 801164a:	4a1c      	ldr	r2, [pc, #112]	; (80116bc <USBD_LL_Init+0x8c>)
 801164c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801164e:	4b1a      	ldr	r3, [pc, #104]	; (80116b8 <USBD_LL_Init+0x88>)
 8011650:	2208      	movs	r2, #8
 8011652:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011654:	4b18      	ldr	r3, [pc, #96]	; (80116b8 <USBD_LL_Init+0x88>)
 8011656:	2202      	movs	r2, #2
 8011658:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801165a:	4b17      	ldr	r3, [pc, #92]	; (80116b8 <USBD_LL_Init+0x88>)
 801165c:	2200      	movs	r2, #0
 801165e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011660:	4b15      	ldr	r3, [pc, #84]	; (80116b8 <USBD_LL_Init+0x88>)
 8011662:	2200      	movs	r2, #0
 8011664:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011666:	4b14      	ldr	r3, [pc, #80]	; (80116b8 <USBD_LL_Init+0x88>)
 8011668:	2200      	movs	r2, #0
 801166a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801166c:	4812      	ldr	r0, [pc, #72]	; (80116b8 <USBD_LL_Init+0x88>)
 801166e:	f7f3 fff7 	bl	8005660 <HAL_PCD_Init>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d001      	beq.n	801167c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8011678:	f7f1 fdba 	bl	80031f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8011682:	2318      	movs	r3, #24
 8011684:	2200      	movs	r2, #0
 8011686:	2100      	movs	r1, #0
 8011688:	f7f5 fcff 	bl	800708a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8011692:	2358      	movs	r3, #88	; 0x58
 8011694:	2200      	movs	r2, #0
 8011696:	2180      	movs	r1, #128	; 0x80
 8011698:	f7f5 fcf7 	bl	800708a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80116a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116a6:	2200      	movs	r2, #0
 80116a8:	2181      	movs	r1, #129	; 0x81
 80116aa:	f7f5 fcee 	bl	800708a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	2000135c 	.word	0x2000135c
 80116bc:	40005c00 	.word	0x40005c00

080116c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116c8:	2300      	movs	r3, #0
 80116ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116cc:	2300      	movs	r3, #0
 80116ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7f4 f8c1 	bl	800585e <HAL_PCD_Start>
 80116dc:	4603      	mov	r3, r0
 80116de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f000 f93c 	bl	8011960 <USBD_Get_USB_Status>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
 80116fe:	4608      	mov	r0, r1
 8011700:	4611      	mov	r1, r2
 8011702:	461a      	mov	r2, r3
 8011704:	4603      	mov	r3, r0
 8011706:	70fb      	strb	r3, [r7, #3]
 8011708:	460b      	mov	r3, r1
 801170a:	70bb      	strb	r3, [r7, #2]
 801170c:	4613      	mov	r3, r2
 801170e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011710:	2300      	movs	r3, #0
 8011712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011714:	2300      	movs	r3, #0
 8011716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801171e:	78bb      	ldrb	r3, [r7, #2]
 8011720:	883a      	ldrh	r2, [r7, #0]
 8011722:	78f9      	ldrb	r1, [r7, #3]
 8011724:	f7f4 fa16 	bl	8005b54 <HAL_PCD_EP_Open>
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 f916 	bl	8011960 <USBD_Get_USB_Status>
 8011734:	4603      	mov	r3, r0
 8011736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011738:	7bbb      	ldrb	r3, [r7, #14]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b084      	sub	sp, #16
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
 801174a:	460b      	mov	r3, r1
 801174c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801174e:	2300      	movs	r3, #0
 8011750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801175c:	78fa      	ldrb	r2, [r7, #3]
 801175e:	4611      	mov	r1, r2
 8011760:	4618      	mov	r0, r3
 8011762:	f7f4 fa54 	bl	8005c0e <HAL_PCD_EP_Close>
 8011766:	4603      	mov	r3, r0
 8011768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	4618      	mov	r0, r3
 801176e:	f000 f8f7 	bl	8011960 <USBD_Get_USB_Status>
 8011772:	4603      	mov	r3, r0
 8011774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011776:	7bbb      	ldrb	r3, [r7, #14]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	460b      	mov	r3, r1
 801178a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801179a:	78fa      	ldrb	r2, [r7, #3]
 801179c:	4611      	mov	r1, r2
 801179e:	4618      	mov	r0, r3
 80117a0:	f7f4 fae5 	bl	8005d6e <HAL_PCD_EP_SetStall>
 80117a4:	4603      	mov	r3, r0
 80117a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117a8:	7bfb      	ldrb	r3, [r7, #15]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f000 f8d8 	bl	8011960 <USBD_Get_USB_Status>
 80117b0:	4603      	mov	r3, r0
 80117b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3710      	adds	r7, #16
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
 80117c6:	460b      	mov	r3, r1
 80117c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ce:	2300      	movs	r3, #0
 80117d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117d8:	78fa      	ldrb	r2, [r7, #3]
 80117da:	4611      	mov	r1, r2
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f4 fb26 	bl	8005e2e <HAL_PCD_EP_ClrStall>
 80117e2:	4603      	mov	r3, r0
 80117e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117e6:	7bfb      	ldrb	r3, [r7, #15]
 80117e8:	4618      	mov	r0, r3
 80117ea:	f000 f8b9 	bl	8011960 <USBD_Get_USB_Status>
 80117ee:	4603      	mov	r3, r0
 80117f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b085      	sub	sp, #20
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801180e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011814:	2b00      	cmp	r3, #0
 8011816:	da0c      	bge.n	8011832 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011818:	78fb      	ldrb	r3, [r7, #3]
 801181a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801181e:	68f9      	ldr	r1, [r7, #12]
 8011820:	1c5a      	adds	r2, r3, #1
 8011822:	4613      	mov	r3, r2
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	4413      	add	r3, r2
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	440b      	add	r3, r1
 801182c:	3302      	adds	r3, #2
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	e00b      	b.n	801184a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011832:	78fb      	ldrb	r3, [r7, #3]
 8011834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011838:	68f9      	ldr	r1, [r7, #12]
 801183a:	4613      	mov	r3, r2
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4413      	add	r3, r2
 8011840:	00db      	lsls	r3, r3, #3
 8011842:	440b      	add	r3, r1
 8011844:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011848:	781b      	ldrb	r3, [r3, #0]
  }
}
 801184a:	4618      	mov	r0, r3
 801184c:	3714      	adds	r7, #20
 801184e:	46bd      	mov	sp, r7
 8011850:	bc80      	pop	{r7}
 8011852:	4770      	bx	lr

08011854 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	460b      	mov	r3, r1
 801185e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011860:	2300      	movs	r3, #0
 8011862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801186e:	78fa      	ldrb	r2, [r7, #3]
 8011870:	4611      	mov	r1, r2
 8011872:	4618      	mov	r0, r3
 8011874:	f7f4 f949 	bl	8005b0a <HAL_PCD_SetAddress>
 8011878:	4603      	mov	r3, r0
 801187a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801187c:	7bfb      	ldrb	r3, [r7, #15]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f86e 	bl	8011960 <USBD_Get_USB_Status>
 8011884:	4603      	mov	r3, r0
 8011886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011888:	7bbb      	ldrb	r3, [r7, #14]
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011892:	b580      	push	{r7, lr}
 8011894:	b086      	sub	sp, #24
 8011896:	af00      	add	r7, sp, #0
 8011898:	60f8      	str	r0, [r7, #12]
 801189a:	607a      	str	r2, [r7, #4]
 801189c:	461a      	mov	r2, r3
 801189e:	460b      	mov	r3, r1
 80118a0:	72fb      	strb	r3, [r7, #11]
 80118a2:	4613      	mov	r3, r2
 80118a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118aa:	2300      	movs	r3, #0
 80118ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80118b4:	893b      	ldrh	r3, [r7, #8]
 80118b6:	7af9      	ldrb	r1, [r7, #11]
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	f7f4 fa21 	bl	8005d00 <HAL_PCD_EP_Transmit>
 80118be:	4603      	mov	r3, r0
 80118c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
 80118c4:	4618      	mov	r0, r3
 80118c6:	f000 f84b 	bl	8011960 <USBD_Get_USB_Status>
 80118ca:	4603      	mov	r3, r0
 80118cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80118ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3718      	adds	r7, #24
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b086      	sub	sp, #24
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	607a      	str	r2, [r7, #4]
 80118e2:	461a      	mov	r2, r3
 80118e4:	460b      	mov	r3, r1
 80118e6:	72fb      	strb	r3, [r7, #11]
 80118e8:	4613      	mov	r3, r2
 80118ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118ec:	2300      	movs	r3, #0
 80118ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80118fa:	893b      	ldrh	r3, [r7, #8]
 80118fc:	7af9      	ldrb	r1, [r7, #11]
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	f7f4 f9cd 	bl	8005c9e <HAL_PCD_EP_Receive>
 8011904:	4603      	mov	r3, r0
 8011906:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011908:	7dfb      	ldrb	r3, [r7, #23]
 801190a:	4618      	mov	r0, r3
 801190c:	f000 f828 	bl	8011960 <USBD_Get_USB_Status>
 8011910:	4603      	mov	r3, r0
 8011912:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011914:	7dbb      	ldrb	r3, [r7, #22]
}
 8011916:	4618      	mov	r0, r3
 8011918:	3718      	adds	r7, #24
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
	...

08011920 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011928:	4b02      	ldr	r3, [pc, #8]	; (8011934 <USBD_static_malloc+0x14>)
}
 801192a:	4618      	mov	r0, r3
 801192c:	370c      	adds	r7, #12
 801192e:	46bd      	mov	sp, r7
 8011930:	bc80      	pop	{r7}
 8011932:	4770      	bx	lr
 8011934:	2000164c 	.word	0x2000164c

08011938 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]

}
 8011940:	bf00      	nop
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	bc80      	pop	{r7}
 8011948:	4770      	bx	lr

0801194a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801194a:	b480      	push	{r7}
 801194c:	b083      	sub	sp, #12
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	460b      	mov	r3, r1
 8011954:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8011956:	bf00      	nop
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	bc80      	pop	{r7}
 801195e:	4770      	bx	lr

08011960 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011960:	b480      	push	{r7}
 8011962:	b085      	sub	sp, #20
 8011964:	af00      	add	r7, sp, #0
 8011966:	4603      	mov	r3, r0
 8011968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801196a:	2300      	movs	r3, #0
 801196c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	2b03      	cmp	r3, #3
 8011972:	d817      	bhi.n	80119a4 <USBD_Get_USB_Status+0x44>
 8011974:	a201      	add	r2, pc, #4	; (adr r2, 801197c <USBD_Get_USB_Status+0x1c>)
 8011976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801197a:	bf00      	nop
 801197c:	0801198d 	.word	0x0801198d
 8011980:	08011993 	.word	0x08011993
 8011984:	08011999 	.word	0x08011999
 8011988:	0801199f 	.word	0x0801199f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801198c:	2300      	movs	r3, #0
 801198e:	73fb      	strb	r3, [r7, #15]
    break;
 8011990:	e00b      	b.n	80119aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011992:	2302      	movs	r3, #2
 8011994:	73fb      	strb	r3, [r7, #15]
    break;
 8011996:	e008      	b.n	80119aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011998:	2301      	movs	r3, #1
 801199a:	73fb      	strb	r3, [r7, #15]
    break;
 801199c:	e005      	b.n	80119aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801199e:	2302      	movs	r3, #2
 80119a0:	73fb      	strb	r3, [r7, #15]
    break;
 80119a2:	e002      	b.n	80119aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80119a4:	2302      	movs	r3, #2
 80119a6:	73fb      	strb	r3, [r7, #15]
    break;
 80119a8:	bf00      	nop
  }
  return usb_status;
 80119aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3714      	adds	r7, #20
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bc80      	pop	{r7}
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop

080119b8 <__errno>:
 80119b8:	4b01      	ldr	r3, [pc, #4]	; (80119c0 <__errno+0x8>)
 80119ba:	6818      	ldr	r0, [r3, #0]
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	20000168 	.word	0x20000168

080119c4 <__libc_init_array>:
 80119c4:	b570      	push	{r4, r5, r6, lr}
 80119c6:	2600      	movs	r6, #0
 80119c8:	4d0c      	ldr	r5, [pc, #48]	; (80119fc <__libc_init_array+0x38>)
 80119ca:	4c0d      	ldr	r4, [pc, #52]	; (8011a00 <__libc_init_array+0x3c>)
 80119cc:	1b64      	subs	r4, r4, r5
 80119ce:	10a4      	asrs	r4, r4, #2
 80119d0:	42a6      	cmp	r6, r4
 80119d2:	d109      	bne.n	80119e8 <__libc_init_array+0x24>
 80119d4:	f003 f832 	bl	8014a3c <_init>
 80119d8:	2600      	movs	r6, #0
 80119da:	4d0a      	ldr	r5, [pc, #40]	; (8011a04 <__libc_init_array+0x40>)
 80119dc:	4c0a      	ldr	r4, [pc, #40]	; (8011a08 <__libc_init_array+0x44>)
 80119de:	1b64      	subs	r4, r4, r5
 80119e0:	10a4      	asrs	r4, r4, #2
 80119e2:	42a6      	cmp	r6, r4
 80119e4:	d105      	bne.n	80119f2 <__libc_init_array+0x2e>
 80119e6:	bd70      	pop	{r4, r5, r6, pc}
 80119e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80119ec:	4798      	blx	r3
 80119ee:	3601      	adds	r6, #1
 80119f0:	e7ee      	b.n	80119d0 <__libc_init_array+0xc>
 80119f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80119f6:	4798      	blx	r3
 80119f8:	3601      	adds	r6, #1
 80119fa:	e7f2      	b.n	80119e2 <__libc_init_array+0x1e>
 80119fc:	0802e294 	.word	0x0802e294
 8011a00:	0802e294 	.word	0x0802e294
 8011a04:	0802e294 	.word	0x0802e294
 8011a08:	0802e298 	.word	0x0802e298

08011a0c <malloc>:
 8011a0c:	4b02      	ldr	r3, [pc, #8]	; (8011a18 <malloc+0xc>)
 8011a0e:	4601      	mov	r1, r0
 8011a10:	6818      	ldr	r0, [r3, #0]
 8011a12:	f000 b87b 	b.w	8011b0c <_malloc_r>
 8011a16:	bf00      	nop
 8011a18:	20000168 	.word	0x20000168

08011a1c <free>:
 8011a1c:	4b02      	ldr	r3, [pc, #8]	; (8011a28 <free+0xc>)
 8011a1e:	4601      	mov	r1, r0
 8011a20:	6818      	ldr	r0, [r3, #0]
 8011a22:	f000 b80b 	b.w	8011a3c <_free_r>
 8011a26:	bf00      	nop
 8011a28:	20000168 	.word	0x20000168

08011a2c <memset>:
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	4402      	add	r2, r0
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d100      	bne.n	8011a36 <memset+0xa>
 8011a34:	4770      	bx	lr
 8011a36:	f803 1b01 	strb.w	r1, [r3], #1
 8011a3a:	e7f9      	b.n	8011a30 <memset+0x4>

08011a3c <_free_r>:
 8011a3c:	b538      	push	{r3, r4, r5, lr}
 8011a3e:	4605      	mov	r5, r0
 8011a40:	2900      	cmp	r1, #0
 8011a42:	d040      	beq.n	8011ac6 <_free_r+0x8a>
 8011a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a48:	1f0c      	subs	r4, r1, #4
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	bfb8      	it	lt
 8011a4e:	18e4      	addlt	r4, r4, r3
 8011a50:	f001 fc14 	bl	801327c <__malloc_lock>
 8011a54:	4a1c      	ldr	r2, [pc, #112]	; (8011ac8 <_free_r+0x8c>)
 8011a56:	6813      	ldr	r3, [r2, #0]
 8011a58:	b933      	cbnz	r3, 8011a68 <_free_r+0x2c>
 8011a5a:	6063      	str	r3, [r4, #4]
 8011a5c:	6014      	str	r4, [r2, #0]
 8011a5e:	4628      	mov	r0, r5
 8011a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a64:	f001 bc10 	b.w	8013288 <__malloc_unlock>
 8011a68:	42a3      	cmp	r3, r4
 8011a6a:	d908      	bls.n	8011a7e <_free_r+0x42>
 8011a6c:	6820      	ldr	r0, [r4, #0]
 8011a6e:	1821      	adds	r1, r4, r0
 8011a70:	428b      	cmp	r3, r1
 8011a72:	bf01      	itttt	eq
 8011a74:	6819      	ldreq	r1, [r3, #0]
 8011a76:	685b      	ldreq	r3, [r3, #4]
 8011a78:	1809      	addeq	r1, r1, r0
 8011a7a:	6021      	streq	r1, [r4, #0]
 8011a7c:	e7ed      	b.n	8011a5a <_free_r+0x1e>
 8011a7e:	461a      	mov	r2, r3
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	b10b      	cbz	r3, 8011a88 <_free_r+0x4c>
 8011a84:	42a3      	cmp	r3, r4
 8011a86:	d9fa      	bls.n	8011a7e <_free_r+0x42>
 8011a88:	6811      	ldr	r1, [r2, #0]
 8011a8a:	1850      	adds	r0, r2, r1
 8011a8c:	42a0      	cmp	r0, r4
 8011a8e:	d10b      	bne.n	8011aa8 <_free_r+0x6c>
 8011a90:	6820      	ldr	r0, [r4, #0]
 8011a92:	4401      	add	r1, r0
 8011a94:	1850      	adds	r0, r2, r1
 8011a96:	4283      	cmp	r3, r0
 8011a98:	6011      	str	r1, [r2, #0]
 8011a9a:	d1e0      	bne.n	8011a5e <_free_r+0x22>
 8011a9c:	6818      	ldr	r0, [r3, #0]
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	4401      	add	r1, r0
 8011aa2:	6011      	str	r1, [r2, #0]
 8011aa4:	6053      	str	r3, [r2, #4]
 8011aa6:	e7da      	b.n	8011a5e <_free_r+0x22>
 8011aa8:	d902      	bls.n	8011ab0 <_free_r+0x74>
 8011aaa:	230c      	movs	r3, #12
 8011aac:	602b      	str	r3, [r5, #0]
 8011aae:	e7d6      	b.n	8011a5e <_free_r+0x22>
 8011ab0:	6820      	ldr	r0, [r4, #0]
 8011ab2:	1821      	adds	r1, r4, r0
 8011ab4:	428b      	cmp	r3, r1
 8011ab6:	bf01      	itttt	eq
 8011ab8:	6819      	ldreq	r1, [r3, #0]
 8011aba:	685b      	ldreq	r3, [r3, #4]
 8011abc:	1809      	addeq	r1, r1, r0
 8011abe:	6021      	streq	r1, [r4, #0]
 8011ac0:	6063      	str	r3, [r4, #4]
 8011ac2:	6054      	str	r4, [r2, #4]
 8011ac4:	e7cb      	b.n	8011a5e <_free_r+0x22>
 8011ac6:	bd38      	pop	{r3, r4, r5, pc}
 8011ac8:	20001660 	.word	0x20001660

08011acc <sbrk_aligned>:
 8011acc:	b570      	push	{r4, r5, r6, lr}
 8011ace:	4e0e      	ldr	r6, [pc, #56]	; (8011b08 <sbrk_aligned+0x3c>)
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	6831      	ldr	r1, [r6, #0]
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	b911      	cbnz	r1, 8011ade <sbrk_aligned+0x12>
 8011ad8:	f000 fcec 	bl	80124b4 <_sbrk_r>
 8011adc:	6030      	str	r0, [r6, #0]
 8011ade:	4621      	mov	r1, r4
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f000 fce7 	bl	80124b4 <_sbrk_r>
 8011ae6:	1c43      	adds	r3, r0, #1
 8011ae8:	d00a      	beq.n	8011b00 <sbrk_aligned+0x34>
 8011aea:	1cc4      	adds	r4, r0, #3
 8011aec:	f024 0403 	bic.w	r4, r4, #3
 8011af0:	42a0      	cmp	r0, r4
 8011af2:	d007      	beq.n	8011b04 <sbrk_aligned+0x38>
 8011af4:	1a21      	subs	r1, r4, r0
 8011af6:	4628      	mov	r0, r5
 8011af8:	f000 fcdc 	bl	80124b4 <_sbrk_r>
 8011afc:	3001      	adds	r0, #1
 8011afe:	d101      	bne.n	8011b04 <sbrk_aligned+0x38>
 8011b00:	f04f 34ff 	mov.w	r4, #4294967295
 8011b04:	4620      	mov	r0, r4
 8011b06:	bd70      	pop	{r4, r5, r6, pc}
 8011b08:	20001664 	.word	0x20001664

08011b0c <_malloc_r>:
 8011b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b10:	1ccd      	adds	r5, r1, #3
 8011b12:	f025 0503 	bic.w	r5, r5, #3
 8011b16:	3508      	adds	r5, #8
 8011b18:	2d0c      	cmp	r5, #12
 8011b1a:	bf38      	it	cc
 8011b1c:	250c      	movcc	r5, #12
 8011b1e:	2d00      	cmp	r5, #0
 8011b20:	4607      	mov	r7, r0
 8011b22:	db01      	blt.n	8011b28 <_malloc_r+0x1c>
 8011b24:	42a9      	cmp	r1, r5
 8011b26:	d905      	bls.n	8011b34 <_malloc_r+0x28>
 8011b28:	230c      	movs	r3, #12
 8011b2a:	2600      	movs	r6, #0
 8011b2c:	603b      	str	r3, [r7, #0]
 8011b2e:	4630      	mov	r0, r6
 8011b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b34:	4e2e      	ldr	r6, [pc, #184]	; (8011bf0 <_malloc_r+0xe4>)
 8011b36:	f001 fba1 	bl	801327c <__malloc_lock>
 8011b3a:	6833      	ldr	r3, [r6, #0]
 8011b3c:	461c      	mov	r4, r3
 8011b3e:	bb34      	cbnz	r4, 8011b8e <_malloc_r+0x82>
 8011b40:	4629      	mov	r1, r5
 8011b42:	4638      	mov	r0, r7
 8011b44:	f7ff ffc2 	bl	8011acc <sbrk_aligned>
 8011b48:	1c43      	adds	r3, r0, #1
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	d14d      	bne.n	8011bea <_malloc_r+0xde>
 8011b4e:	6834      	ldr	r4, [r6, #0]
 8011b50:	4626      	mov	r6, r4
 8011b52:	2e00      	cmp	r6, #0
 8011b54:	d140      	bne.n	8011bd8 <_malloc_r+0xcc>
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	4631      	mov	r1, r6
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	eb04 0803 	add.w	r8, r4, r3
 8011b60:	f000 fca8 	bl	80124b4 <_sbrk_r>
 8011b64:	4580      	cmp	r8, r0
 8011b66:	d13a      	bne.n	8011bde <_malloc_r+0xd2>
 8011b68:	6821      	ldr	r1, [r4, #0]
 8011b6a:	3503      	adds	r5, #3
 8011b6c:	1a6d      	subs	r5, r5, r1
 8011b6e:	f025 0503 	bic.w	r5, r5, #3
 8011b72:	3508      	adds	r5, #8
 8011b74:	2d0c      	cmp	r5, #12
 8011b76:	bf38      	it	cc
 8011b78:	250c      	movcc	r5, #12
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	f7ff ffa5 	bl	8011acc <sbrk_aligned>
 8011b82:	3001      	adds	r0, #1
 8011b84:	d02b      	beq.n	8011bde <_malloc_r+0xd2>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	442b      	add	r3, r5
 8011b8a:	6023      	str	r3, [r4, #0]
 8011b8c:	e00e      	b.n	8011bac <_malloc_r+0xa0>
 8011b8e:	6822      	ldr	r2, [r4, #0]
 8011b90:	1b52      	subs	r2, r2, r5
 8011b92:	d41e      	bmi.n	8011bd2 <_malloc_r+0xc6>
 8011b94:	2a0b      	cmp	r2, #11
 8011b96:	d916      	bls.n	8011bc6 <_malloc_r+0xba>
 8011b98:	1961      	adds	r1, r4, r5
 8011b9a:	42a3      	cmp	r3, r4
 8011b9c:	6025      	str	r5, [r4, #0]
 8011b9e:	bf18      	it	ne
 8011ba0:	6059      	strne	r1, [r3, #4]
 8011ba2:	6863      	ldr	r3, [r4, #4]
 8011ba4:	bf08      	it	eq
 8011ba6:	6031      	streq	r1, [r6, #0]
 8011ba8:	5162      	str	r2, [r4, r5]
 8011baa:	604b      	str	r3, [r1, #4]
 8011bac:	4638      	mov	r0, r7
 8011bae:	f104 060b 	add.w	r6, r4, #11
 8011bb2:	f001 fb69 	bl	8013288 <__malloc_unlock>
 8011bb6:	f026 0607 	bic.w	r6, r6, #7
 8011bba:	1d23      	adds	r3, r4, #4
 8011bbc:	1af2      	subs	r2, r6, r3
 8011bbe:	d0b6      	beq.n	8011b2e <_malloc_r+0x22>
 8011bc0:	1b9b      	subs	r3, r3, r6
 8011bc2:	50a3      	str	r3, [r4, r2]
 8011bc4:	e7b3      	b.n	8011b2e <_malloc_r+0x22>
 8011bc6:	6862      	ldr	r2, [r4, #4]
 8011bc8:	42a3      	cmp	r3, r4
 8011bca:	bf0c      	ite	eq
 8011bcc:	6032      	streq	r2, [r6, #0]
 8011bce:	605a      	strne	r2, [r3, #4]
 8011bd0:	e7ec      	b.n	8011bac <_malloc_r+0xa0>
 8011bd2:	4623      	mov	r3, r4
 8011bd4:	6864      	ldr	r4, [r4, #4]
 8011bd6:	e7b2      	b.n	8011b3e <_malloc_r+0x32>
 8011bd8:	4634      	mov	r4, r6
 8011bda:	6876      	ldr	r6, [r6, #4]
 8011bdc:	e7b9      	b.n	8011b52 <_malloc_r+0x46>
 8011bde:	230c      	movs	r3, #12
 8011be0:	4638      	mov	r0, r7
 8011be2:	603b      	str	r3, [r7, #0]
 8011be4:	f001 fb50 	bl	8013288 <__malloc_unlock>
 8011be8:	e7a1      	b.n	8011b2e <_malloc_r+0x22>
 8011bea:	6025      	str	r5, [r4, #0]
 8011bec:	e7de      	b.n	8011bac <_malloc_r+0xa0>
 8011bee:	bf00      	nop
 8011bf0:	20001660 	.word	0x20001660

08011bf4 <__cvt>:
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bfa:	461f      	mov	r7, r3
 8011bfc:	bfbb      	ittet	lt
 8011bfe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011c02:	461f      	movlt	r7, r3
 8011c04:	2300      	movge	r3, #0
 8011c06:	232d      	movlt	r3, #45	; 0x2d
 8011c08:	b088      	sub	sp, #32
 8011c0a:	4614      	mov	r4, r2
 8011c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011c10:	7013      	strb	r3, [r2, #0]
 8011c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c14:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011c18:	f023 0820 	bic.w	r8, r3, #32
 8011c1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c20:	d005      	beq.n	8011c2e <__cvt+0x3a>
 8011c22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011c26:	d100      	bne.n	8011c2a <__cvt+0x36>
 8011c28:	3501      	adds	r5, #1
 8011c2a:	2302      	movs	r3, #2
 8011c2c:	e000      	b.n	8011c30 <__cvt+0x3c>
 8011c2e:	2303      	movs	r3, #3
 8011c30:	aa07      	add	r2, sp, #28
 8011c32:	9204      	str	r2, [sp, #16]
 8011c34:	aa06      	add	r2, sp, #24
 8011c36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011c3a:	e9cd 3500 	strd	r3, r5, [sp]
 8011c3e:	4622      	mov	r2, r4
 8011c40:	463b      	mov	r3, r7
 8011c42:	f000 fd0d 	bl	8012660 <_dtoa_r>
 8011c46:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	d102      	bne.n	8011c54 <__cvt+0x60>
 8011c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c50:	07db      	lsls	r3, r3, #31
 8011c52:	d522      	bpl.n	8011c9a <__cvt+0xa6>
 8011c54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c58:	eb06 0905 	add.w	r9, r6, r5
 8011c5c:	d110      	bne.n	8011c80 <__cvt+0x8c>
 8011c5e:	7833      	ldrb	r3, [r6, #0]
 8011c60:	2b30      	cmp	r3, #48	; 0x30
 8011c62:	d10a      	bne.n	8011c7a <__cvt+0x86>
 8011c64:	2200      	movs	r2, #0
 8011c66:	2300      	movs	r3, #0
 8011c68:	4620      	mov	r0, r4
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	f7ee ff08 	bl	8000a80 <__aeabi_dcmpeq>
 8011c70:	b918      	cbnz	r0, 8011c7a <__cvt+0x86>
 8011c72:	f1c5 0501 	rsb	r5, r5, #1
 8011c76:	f8ca 5000 	str.w	r5, [sl]
 8011c7a:	f8da 3000 	ldr.w	r3, [sl]
 8011c7e:	4499      	add	r9, r3
 8011c80:	2200      	movs	r2, #0
 8011c82:	2300      	movs	r3, #0
 8011c84:	4620      	mov	r0, r4
 8011c86:	4639      	mov	r1, r7
 8011c88:	f7ee fefa 	bl	8000a80 <__aeabi_dcmpeq>
 8011c8c:	b108      	cbz	r0, 8011c92 <__cvt+0x9e>
 8011c8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8011c92:	2230      	movs	r2, #48	; 0x30
 8011c94:	9b07      	ldr	r3, [sp, #28]
 8011c96:	454b      	cmp	r3, r9
 8011c98:	d307      	bcc.n	8011caa <__cvt+0xb6>
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	9b07      	ldr	r3, [sp, #28]
 8011c9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011ca0:	1b9b      	subs	r3, r3, r6
 8011ca2:	6013      	str	r3, [r2, #0]
 8011ca4:	b008      	add	sp, #32
 8011ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011caa:	1c59      	adds	r1, r3, #1
 8011cac:	9107      	str	r1, [sp, #28]
 8011cae:	701a      	strb	r2, [r3, #0]
 8011cb0:	e7f0      	b.n	8011c94 <__cvt+0xa0>

08011cb2 <__exponent>:
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cb6:	2900      	cmp	r1, #0
 8011cb8:	f803 2b02 	strb.w	r2, [r3], #2
 8011cbc:	bfb6      	itet	lt
 8011cbe:	222d      	movlt	r2, #45	; 0x2d
 8011cc0:	222b      	movge	r2, #43	; 0x2b
 8011cc2:	4249      	neglt	r1, r1
 8011cc4:	2909      	cmp	r1, #9
 8011cc6:	7042      	strb	r2, [r0, #1]
 8011cc8:	dd2b      	ble.n	8011d22 <__exponent+0x70>
 8011cca:	f10d 0407 	add.w	r4, sp, #7
 8011cce:	46a4      	mov	ip, r4
 8011cd0:	270a      	movs	r7, #10
 8011cd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8011cd6:	460a      	mov	r2, r1
 8011cd8:	46a6      	mov	lr, r4
 8011cda:	fb07 1516 	mls	r5, r7, r6, r1
 8011cde:	2a63      	cmp	r2, #99	; 0x63
 8011ce0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8011ce4:	4631      	mov	r1, r6
 8011ce6:	f104 34ff 	add.w	r4, r4, #4294967295
 8011cea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011cee:	dcf0      	bgt.n	8011cd2 <__exponent+0x20>
 8011cf0:	3130      	adds	r1, #48	; 0x30
 8011cf2:	f1ae 0502 	sub.w	r5, lr, #2
 8011cf6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011cfa:	4629      	mov	r1, r5
 8011cfc:	1c44      	adds	r4, r0, #1
 8011cfe:	4561      	cmp	r1, ip
 8011d00:	d30a      	bcc.n	8011d18 <__exponent+0x66>
 8011d02:	f10d 0209 	add.w	r2, sp, #9
 8011d06:	eba2 020e 	sub.w	r2, r2, lr
 8011d0a:	4565      	cmp	r5, ip
 8011d0c:	bf88      	it	hi
 8011d0e:	2200      	movhi	r2, #0
 8011d10:	4413      	add	r3, r2
 8011d12:	1a18      	subs	r0, r3, r0
 8011d14:	b003      	add	sp, #12
 8011d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d1c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011d20:	e7ed      	b.n	8011cfe <__exponent+0x4c>
 8011d22:	2330      	movs	r3, #48	; 0x30
 8011d24:	3130      	adds	r1, #48	; 0x30
 8011d26:	7083      	strb	r3, [r0, #2]
 8011d28:	70c1      	strb	r1, [r0, #3]
 8011d2a:	1d03      	adds	r3, r0, #4
 8011d2c:	e7f1      	b.n	8011d12 <__exponent+0x60>
	...

08011d30 <_printf_float>:
 8011d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d34:	b091      	sub	sp, #68	; 0x44
 8011d36:	460c      	mov	r4, r1
 8011d38:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011d3c:	4616      	mov	r6, r2
 8011d3e:	461f      	mov	r7, r3
 8011d40:	4605      	mov	r5, r0
 8011d42:	f001 fa7b 	bl	801323c <_localeconv_r>
 8011d46:	6803      	ldr	r3, [r0, #0]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d4c:	f7ee fa6c 	bl	8000228 <strlen>
 8011d50:	2300      	movs	r3, #0
 8011d52:	930e      	str	r3, [sp, #56]	; 0x38
 8011d54:	f8d8 3000 	ldr.w	r3, [r8]
 8011d58:	900a      	str	r0, [sp, #40]	; 0x28
 8011d5a:	3307      	adds	r3, #7
 8011d5c:	f023 0307 	bic.w	r3, r3, #7
 8011d60:	f103 0208 	add.w	r2, r3, #8
 8011d64:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011d68:	f8d4 b000 	ldr.w	fp, [r4]
 8011d6c:	f8c8 2000 	str.w	r2, [r8]
 8011d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011d78:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011d7c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d82:	f04f 32ff 	mov.w	r2, #4294967295
 8011d86:	4640      	mov	r0, r8
 8011d88:	4b9c      	ldr	r3, [pc, #624]	; (8011ffc <_printf_float+0x2cc>)
 8011d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d8c:	f7ee feaa 	bl	8000ae4 <__aeabi_dcmpun>
 8011d90:	bb70      	cbnz	r0, 8011df0 <_printf_float+0xc0>
 8011d92:	f04f 32ff 	mov.w	r2, #4294967295
 8011d96:	4640      	mov	r0, r8
 8011d98:	4b98      	ldr	r3, [pc, #608]	; (8011ffc <_printf_float+0x2cc>)
 8011d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d9c:	f7ee fe84 	bl	8000aa8 <__aeabi_dcmple>
 8011da0:	bb30      	cbnz	r0, 8011df0 <_printf_float+0xc0>
 8011da2:	2200      	movs	r2, #0
 8011da4:	2300      	movs	r3, #0
 8011da6:	4640      	mov	r0, r8
 8011da8:	4651      	mov	r1, sl
 8011daa:	f7ee fe73 	bl	8000a94 <__aeabi_dcmplt>
 8011dae:	b110      	cbz	r0, 8011db6 <_printf_float+0x86>
 8011db0:	232d      	movs	r3, #45	; 0x2d
 8011db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011db6:	4b92      	ldr	r3, [pc, #584]	; (8012000 <_printf_float+0x2d0>)
 8011db8:	4892      	ldr	r0, [pc, #584]	; (8012004 <_printf_float+0x2d4>)
 8011dba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011dbe:	bf94      	ite	ls
 8011dc0:	4698      	movls	r8, r3
 8011dc2:	4680      	movhi	r8, r0
 8011dc4:	2303      	movs	r3, #3
 8011dc6:	f04f 0a00 	mov.w	sl, #0
 8011dca:	6123      	str	r3, [r4, #16]
 8011dcc:	f02b 0304 	bic.w	r3, fp, #4
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	4633      	mov	r3, r6
 8011dd4:	4621      	mov	r1, r4
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	9700      	str	r7, [sp, #0]
 8011dda:	aa0f      	add	r2, sp, #60	; 0x3c
 8011ddc:	f000 f9d4 	bl	8012188 <_printf_common>
 8011de0:	3001      	adds	r0, #1
 8011de2:	f040 8090 	bne.w	8011f06 <_printf_float+0x1d6>
 8011de6:	f04f 30ff 	mov.w	r0, #4294967295
 8011dea:	b011      	add	sp, #68	; 0x44
 8011dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df0:	4642      	mov	r2, r8
 8011df2:	4653      	mov	r3, sl
 8011df4:	4640      	mov	r0, r8
 8011df6:	4651      	mov	r1, sl
 8011df8:	f7ee fe74 	bl	8000ae4 <__aeabi_dcmpun>
 8011dfc:	b148      	cbz	r0, 8011e12 <_printf_float+0xe2>
 8011dfe:	f1ba 0f00 	cmp.w	sl, #0
 8011e02:	bfb8      	it	lt
 8011e04:	232d      	movlt	r3, #45	; 0x2d
 8011e06:	4880      	ldr	r0, [pc, #512]	; (8012008 <_printf_float+0x2d8>)
 8011e08:	bfb8      	it	lt
 8011e0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011e0e:	4b7f      	ldr	r3, [pc, #508]	; (801200c <_printf_float+0x2dc>)
 8011e10:	e7d3      	b.n	8011dba <_printf_float+0x8a>
 8011e12:	6863      	ldr	r3, [r4, #4]
 8011e14:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011e18:	1c5a      	adds	r2, r3, #1
 8011e1a:	d142      	bne.n	8011ea2 <_printf_float+0x172>
 8011e1c:	2306      	movs	r3, #6
 8011e1e:	6063      	str	r3, [r4, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	9206      	str	r2, [sp, #24]
 8011e24:	aa0e      	add	r2, sp, #56	; 0x38
 8011e26:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011e2a:	aa0d      	add	r2, sp, #52	; 0x34
 8011e2c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011e30:	9203      	str	r2, [sp, #12]
 8011e32:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011e36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011e3a:	6023      	str	r3, [r4, #0]
 8011e3c:	6863      	ldr	r3, [r4, #4]
 8011e3e:	4642      	mov	r2, r8
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	4628      	mov	r0, r5
 8011e44:	4653      	mov	r3, sl
 8011e46:	910b      	str	r1, [sp, #44]	; 0x2c
 8011e48:	f7ff fed4 	bl	8011bf4 <__cvt>
 8011e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e4e:	4680      	mov	r8, r0
 8011e50:	2947      	cmp	r1, #71	; 0x47
 8011e52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011e54:	d108      	bne.n	8011e68 <_printf_float+0x138>
 8011e56:	1cc8      	adds	r0, r1, #3
 8011e58:	db02      	blt.n	8011e60 <_printf_float+0x130>
 8011e5a:	6863      	ldr	r3, [r4, #4]
 8011e5c:	4299      	cmp	r1, r3
 8011e5e:	dd40      	ble.n	8011ee2 <_printf_float+0x1b2>
 8011e60:	f1a9 0902 	sub.w	r9, r9, #2
 8011e64:	fa5f f989 	uxtb.w	r9, r9
 8011e68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011e6c:	d81f      	bhi.n	8011eae <_printf_float+0x17e>
 8011e6e:	464a      	mov	r2, r9
 8011e70:	3901      	subs	r1, #1
 8011e72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011e76:	910d      	str	r1, [sp, #52]	; 0x34
 8011e78:	f7ff ff1b 	bl	8011cb2 <__exponent>
 8011e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e7e:	4682      	mov	sl, r0
 8011e80:	1813      	adds	r3, r2, r0
 8011e82:	2a01      	cmp	r2, #1
 8011e84:	6123      	str	r3, [r4, #16]
 8011e86:	dc02      	bgt.n	8011e8e <_printf_float+0x15e>
 8011e88:	6822      	ldr	r2, [r4, #0]
 8011e8a:	07d2      	lsls	r2, r2, #31
 8011e8c:	d501      	bpl.n	8011e92 <_printf_float+0x162>
 8011e8e:	3301      	adds	r3, #1
 8011e90:	6123      	str	r3, [r4, #16]
 8011e92:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d09b      	beq.n	8011dd2 <_printf_float+0xa2>
 8011e9a:	232d      	movs	r3, #45	; 0x2d
 8011e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ea0:	e797      	b.n	8011dd2 <_printf_float+0xa2>
 8011ea2:	2947      	cmp	r1, #71	; 0x47
 8011ea4:	d1bc      	bne.n	8011e20 <_printf_float+0xf0>
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d1ba      	bne.n	8011e20 <_printf_float+0xf0>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e7b7      	b.n	8011e1e <_printf_float+0xee>
 8011eae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011eb2:	d118      	bne.n	8011ee6 <_printf_float+0x1b6>
 8011eb4:	2900      	cmp	r1, #0
 8011eb6:	6863      	ldr	r3, [r4, #4]
 8011eb8:	dd0b      	ble.n	8011ed2 <_printf_float+0x1a2>
 8011eba:	6121      	str	r1, [r4, #16]
 8011ebc:	b913      	cbnz	r3, 8011ec4 <_printf_float+0x194>
 8011ebe:	6822      	ldr	r2, [r4, #0]
 8011ec0:	07d0      	lsls	r0, r2, #31
 8011ec2:	d502      	bpl.n	8011eca <_printf_float+0x19a>
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	440b      	add	r3, r1
 8011ec8:	6123      	str	r3, [r4, #16]
 8011eca:	f04f 0a00 	mov.w	sl, #0
 8011ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8011ed0:	e7df      	b.n	8011e92 <_printf_float+0x162>
 8011ed2:	b913      	cbnz	r3, 8011eda <_printf_float+0x1aa>
 8011ed4:	6822      	ldr	r2, [r4, #0]
 8011ed6:	07d2      	lsls	r2, r2, #31
 8011ed8:	d501      	bpl.n	8011ede <_printf_float+0x1ae>
 8011eda:	3302      	adds	r3, #2
 8011edc:	e7f4      	b.n	8011ec8 <_printf_float+0x198>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e7f2      	b.n	8011ec8 <_printf_float+0x198>
 8011ee2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ee8:	4299      	cmp	r1, r3
 8011eea:	db05      	blt.n	8011ef8 <_printf_float+0x1c8>
 8011eec:	6823      	ldr	r3, [r4, #0]
 8011eee:	6121      	str	r1, [r4, #16]
 8011ef0:	07d8      	lsls	r0, r3, #31
 8011ef2:	d5ea      	bpl.n	8011eca <_printf_float+0x19a>
 8011ef4:	1c4b      	adds	r3, r1, #1
 8011ef6:	e7e7      	b.n	8011ec8 <_printf_float+0x198>
 8011ef8:	2900      	cmp	r1, #0
 8011efa:	bfcc      	ite	gt
 8011efc:	2201      	movgt	r2, #1
 8011efe:	f1c1 0202 	rsble	r2, r1, #2
 8011f02:	4413      	add	r3, r2
 8011f04:	e7e0      	b.n	8011ec8 <_printf_float+0x198>
 8011f06:	6823      	ldr	r3, [r4, #0]
 8011f08:	055a      	lsls	r2, r3, #21
 8011f0a:	d407      	bmi.n	8011f1c <_printf_float+0x1ec>
 8011f0c:	6923      	ldr	r3, [r4, #16]
 8011f0e:	4642      	mov	r2, r8
 8011f10:	4631      	mov	r1, r6
 8011f12:	4628      	mov	r0, r5
 8011f14:	47b8      	blx	r7
 8011f16:	3001      	adds	r0, #1
 8011f18:	d12b      	bne.n	8011f72 <_printf_float+0x242>
 8011f1a:	e764      	b.n	8011de6 <_printf_float+0xb6>
 8011f1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f20:	f240 80dd 	bls.w	80120de <_printf_float+0x3ae>
 8011f24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f28:	2200      	movs	r2, #0
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f7ee fda8 	bl	8000a80 <__aeabi_dcmpeq>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d033      	beq.n	8011f9c <_printf_float+0x26c>
 8011f34:	2301      	movs	r3, #1
 8011f36:	4631      	mov	r1, r6
 8011f38:	4628      	mov	r0, r5
 8011f3a:	4a35      	ldr	r2, [pc, #212]	; (8012010 <_printf_float+0x2e0>)
 8011f3c:	47b8      	blx	r7
 8011f3e:	3001      	adds	r0, #1
 8011f40:	f43f af51 	beq.w	8011de6 <_printf_float+0xb6>
 8011f44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	db02      	blt.n	8011f52 <_printf_float+0x222>
 8011f4c:	6823      	ldr	r3, [r4, #0]
 8011f4e:	07d8      	lsls	r0, r3, #31
 8011f50:	d50f      	bpl.n	8011f72 <_printf_float+0x242>
 8011f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f56:	4631      	mov	r1, r6
 8011f58:	4628      	mov	r0, r5
 8011f5a:	47b8      	blx	r7
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	f43f af42 	beq.w	8011de6 <_printf_float+0xb6>
 8011f62:	f04f 0800 	mov.w	r8, #0
 8011f66:	f104 091a 	add.w	r9, r4, #26
 8011f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f6c:	3b01      	subs	r3, #1
 8011f6e:	4543      	cmp	r3, r8
 8011f70:	dc09      	bgt.n	8011f86 <_printf_float+0x256>
 8011f72:	6823      	ldr	r3, [r4, #0]
 8011f74:	079b      	lsls	r3, r3, #30
 8011f76:	f100 8102 	bmi.w	801217e <_printf_float+0x44e>
 8011f7a:	68e0      	ldr	r0, [r4, #12]
 8011f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f7e:	4298      	cmp	r0, r3
 8011f80:	bfb8      	it	lt
 8011f82:	4618      	movlt	r0, r3
 8011f84:	e731      	b.n	8011dea <_printf_float+0xba>
 8011f86:	2301      	movs	r3, #1
 8011f88:	464a      	mov	r2, r9
 8011f8a:	4631      	mov	r1, r6
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	47b8      	blx	r7
 8011f90:	3001      	adds	r0, #1
 8011f92:	f43f af28 	beq.w	8011de6 <_printf_float+0xb6>
 8011f96:	f108 0801 	add.w	r8, r8, #1
 8011f9a:	e7e6      	b.n	8011f6a <_printf_float+0x23a>
 8011f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	dc38      	bgt.n	8012014 <_printf_float+0x2e4>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	4631      	mov	r1, r6
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	4a19      	ldr	r2, [pc, #100]	; (8012010 <_printf_float+0x2e0>)
 8011faa:	47b8      	blx	r7
 8011fac:	3001      	adds	r0, #1
 8011fae:	f43f af1a 	beq.w	8011de6 <_printf_float+0xb6>
 8011fb2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	d102      	bne.n	8011fc0 <_printf_float+0x290>
 8011fba:	6823      	ldr	r3, [r4, #0]
 8011fbc:	07d9      	lsls	r1, r3, #31
 8011fbe:	d5d8      	bpl.n	8011f72 <_printf_float+0x242>
 8011fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011fc4:	4631      	mov	r1, r6
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	47b8      	blx	r7
 8011fca:	3001      	adds	r0, #1
 8011fcc:	f43f af0b 	beq.w	8011de6 <_printf_float+0xb6>
 8011fd0:	f04f 0900 	mov.w	r9, #0
 8011fd4:	f104 0a1a 	add.w	sl, r4, #26
 8011fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fda:	425b      	negs	r3, r3
 8011fdc:	454b      	cmp	r3, r9
 8011fde:	dc01      	bgt.n	8011fe4 <_printf_float+0x2b4>
 8011fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fe2:	e794      	b.n	8011f0e <_printf_float+0x1de>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	4652      	mov	r2, sl
 8011fe8:	4631      	mov	r1, r6
 8011fea:	4628      	mov	r0, r5
 8011fec:	47b8      	blx	r7
 8011fee:	3001      	adds	r0, #1
 8011ff0:	f43f aef9 	beq.w	8011de6 <_printf_float+0xb6>
 8011ff4:	f109 0901 	add.w	r9, r9, #1
 8011ff8:	e7ee      	b.n	8011fd8 <_printf_float+0x2a8>
 8011ffa:	bf00      	nop
 8011ffc:	7fefffff 	.word	0x7fefffff
 8012000:	0802debc 	.word	0x0802debc
 8012004:	0802dec0 	.word	0x0802dec0
 8012008:	0802dec8 	.word	0x0802dec8
 801200c:	0802dec4 	.word	0x0802dec4
 8012010:	0802decc 	.word	0x0802decc
 8012014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012018:	429a      	cmp	r2, r3
 801201a:	bfa8      	it	ge
 801201c:	461a      	movge	r2, r3
 801201e:	2a00      	cmp	r2, #0
 8012020:	4691      	mov	r9, r2
 8012022:	dc37      	bgt.n	8012094 <_printf_float+0x364>
 8012024:	f04f 0b00 	mov.w	fp, #0
 8012028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801202c:	f104 021a 	add.w	r2, r4, #26
 8012030:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012034:	ebaa 0309 	sub.w	r3, sl, r9
 8012038:	455b      	cmp	r3, fp
 801203a:	dc33      	bgt.n	80120a4 <_printf_float+0x374>
 801203c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012040:	429a      	cmp	r2, r3
 8012042:	db3b      	blt.n	80120bc <_printf_float+0x38c>
 8012044:	6823      	ldr	r3, [r4, #0]
 8012046:	07da      	lsls	r2, r3, #31
 8012048:	d438      	bmi.n	80120bc <_printf_float+0x38c>
 801204a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801204c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801204e:	eba3 020a 	sub.w	r2, r3, sl
 8012052:	eba3 0901 	sub.w	r9, r3, r1
 8012056:	4591      	cmp	r9, r2
 8012058:	bfa8      	it	ge
 801205a:	4691      	movge	r9, r2
 801205c:	f1b9 0f00 	cmp.w	r9, #0
 8012060:	dc34      	bgt.n	80120cc <_printf_float+0x39c>
 8012062:	f04f 0800 	mov.w	r8, #0
 8012066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801206a:	f104 0a1a 	add.w	sl, r4, #26
 801206e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012072:	1a9b      	subs	r3, r3, r2
 8012074:	eba3 0309 	sub.w	r3, r3, r9
 8012078:	4543      	cmp	r3, r8
 801207a:	f77f af7a 	ble.w	8011f72 <_printf_float+0x242>
 801207e:	2301      	movs	r3, #1
 8012080:	4652      	mov	r2, sl
 8012082:	4631      	mov	r1, r6
 8012084:	4628      	mov	r0, r5
 8012086:	47b8      	blx	r7
 8012088:	3001      	adds	r0, #1
 801208a:	f43f aeac 	beq.w	8011de6 <_printf_float+0xb6>
 801208e:	f108 0801 	add.w	r8, r8, #1
 8012092:	e7ec      	b.n	801206e <_printf_float+0x33e>
 8012094:	4613      	mov	r3, r2
 8012096:	4631      	mov	r1, r6
 8012098:	4642      	mov	r2, r8
 801209a:	4628      	mov	r0, r5
 801209c:	47b8      	blx	r7
 801209e:	3001      	adds	r0, #1
 80120a0:	d1c0      	bne.n	8012024 <_printf_float+0x2f4>
 80120a2:	e6a0      	b.n	8011de6 <_printf_float+0xb6>
 80120a4:	2301      	movs	r3, #1
 80120a6:	4631      	mov	r1, r6
 80120a8:	4628      	mov	r0, r5
 80120aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80120ac:	47b8      	blx	r7
 80120ae:	3001      	adds	r0, #1
 80120b0:	f43f ae99 	beq.w	8011de6 <_printf_float+0xb6>
 80120b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120b6:	f10b 0b01 	add.w	fp, fp, #1
 80120ba:	e7b9      	b.n	8012030 <_printf_float+0x300>
 80120bc:	4631      	mov	r1, r6
 80120be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120c2:	4628      	mov	r0, r5
 80120c4:	47b8      	blx	r7
 80120c6:	3001      	adds	r0, #1
 80120c8:	d1bf      	bne.n	801204a <_printf_float+0x31a>
 80120ca:	e68c      	b.n	8011de6 <_printf_float+0xb6>
 80120cc:	464b      	mov	r3, r9
 80120ce:	4631      	mov	r1, r6
 80120d0:	4628      	mov	r0, r5
 80120d2:	eb08 020a 	add.w	r2, r8, sl
 80120d6:	47b8      	blx	r7
 80120d8:	3001      	adds	r0, #1
 80120da:	d1c2      	bne.n	8012062 <_printf_float+0x332>
 80120dc:	e683      	b.n	8011de6 <_printf_float+0xb6>
 80120de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80120e0:	2a01      	cmp	r2, #1
 80120e2:	dc01      	bgt.n	80120e8 <_printf_float+0x3b8>
 80120e4:	07db      	lsls	r3, r3, #31
 80120e6:	d537      	bpl.n	8012158 <_printf_float+0x428>
 80120e8:	2301      	movs	r3, #1
 80120ea:	4642      	mov	r2, r8
 80120ec:	4631      	mov	r1, r6
 80120ee:	4628      	mov	r0, r5
 80120f0:	47b8      	blx	r7
 80120f2:	3001      	adds	r0, #1
 80120f4:	f43f ae77 	beq.w	8011de6 <_printf_float+0xb6>
 80120f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120fc:	4631      	mov	r1, r6
 80120fe:	4628      	mov	r0, r5
 8012100:	47b8      	blx	r7
 8012102:	3001      	adds	r0, #1
 8012104:	f43f ae6f 	beq.w	8011de6 <_printf_float+0xb6>
 8012108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801210c:	2200      	movs	r2, #0
 801210e:	2300      	movs	r3, #0
 8012110:	f7ee fcb6 	bl	8000a80 <__aeabi_dcmpeq>
 8012114:	b9d8      	cbnz	r0, 801214e <_printf_float+0x41e>
 8012116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012118:	f108 0201 	add.w	r2, r8, #1
 801211c:	3b01      	subs	r3, #1
 801211e:	4631      	mov	r1, r6
 8012120:	4628      	mov	r0, r5
 8012122:	47b8      	blx	r7
 8012124:	3001      	adds	r0, #1
 8012126:	d10e      	bne.n	8012146 <_printf_float+0x416>
 8012128:	e65d      	b.n	8011de6 <_printf_float+0xb6>
 801212a:	2301      	movs	r3, #1
 801212c:	464a      	mov	r2, r9
 801212e:	4631      	mov	r1, r6
 8012130:	4628      	mov	r0, r5
 8012132:	47b8      	blx	r7
 8012134:	3001      	adds	r0, #1
 8012136:	f43f ae56 	beq.w	8011de6 <_printf_float+0xb6>
 801213a:	f108 0801 	add.w	r8, r8, #1
 801213e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012140:	3b01      	subs	r3, #1
 8012142:	4543      	cmp	r3, r8
 8012144:	dcf1      	bgt.n	801212a <_printf_float+0x3fa>
 8012146:	4653      	mov	r3, sl
 8012148:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801214c:	e6e0      	b.n	8011f10 <_printf_float+0x1e0>
 801214e:	f04f 0800 	mov.w	r8, #0
 8012152:	f104 091a 	add.w	r9, r4, #26
 8012156:	e7f2      	b.n	801213e <_printf_float+0x40e>
 8012158:	2301      	movs	r3, #1
 801215a:	4642      	mov	r2, r8
 801215c:	e7df      	b.n	801211e <_printf_float+0x3ee>
 801215e:	2301      	movs	r3, #1
 8012160:	464a      	mov	r2, r9
 8012162:	4631      	mov	r1, r6
 8012164:	4628      	mov	r0, r5
 8012166:	47b8      	blx	r7
 8012168:	3001      	adds	r0, #1
 801216a:	f43f ae3c 	beq.w	8011de6 <_printf_float+0xb6>
 801216e:	f108 0801 	add.w	r8, r8, #1
 8012172:	68e3      	ldr	r3, [r4, #12]
 8012174:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012176:	1a5b      	subs	r3, r3, r1
 8012178:	4543      	cmp	r3, r8
 801217a:	dcf0      	bgt.n	801215e <_printf_float+0x42e>
 801217c:	e6fd      	b.n	8011f7a <_printf_float+0x24a>
 801217e:	f04f 0800 	mov.w	r8, #0
 8012182:	f104 0919 	add.w	r9, r4, #25
 8012186:	e7f4      	b.n	8012172 <_printf_float+0x442>

08012188 <_printf_common>:
 8012188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801218c:	4616      	mov	r6, r2
 801218e:	4699      	mov	r9, r3
 8012190:	688a      	ldr	r2, [r1, #8]
 8012192:	690b      	ldr	r3, [r1, #16]
 8012194:	4607      	mov	r7, r0
 8012196:	4293      	cmp	r3, r2
 8012198:	bfb8      	it	lt
 801219a:	4613      	movlt	r3, r2
 801219c:	6033      	str	r3, [r6, #0]
 801219e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80121a2:	460c      	mov	r4, r1
 80121a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80121a8:	b10a      	cbz	r2, 80121ae <_printf_common+0x26>
 80121aa:	3301      	adds	r3, #1
 80121ac:	6033      	str	r3, [r6, #0]
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	0699      	lsls	r1, r3, #26
 80121b2:	bf42      	ittt	mi
 80121b4:	6833      	ldrmi	r3, [r6, #0]
 80121b6:	3302      	addmi	r3, #2
 80121b8:	6033      	strmi	r3, [r6, #0]
 80121ba:	6825      	ldr	r5, [r4, #0]
 80121bc:	f015 0506 	ands.w	r5, r5, #6
 80121c0:	d106      	bne.n	80121d0 <_printf_common+0x48>
 80121c2:	f104 0a19 	add.w	sl, r4, #25
 80121c6:	68e3      	ldr	r3, [r4, #12]
 80121c8:	6832      	ldr	r2, [r6, #0]
 80121ca:	1a9b      	subs	r3, r3, r2
 80121cc:	42ab      	cmp	r3, r5
 80121ce:	dc28      	bgt.n	8012222 <_printf_common+0x9a>
 80121d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80121d4:	1e13      	subs	r3, r2, #0
 80121d6:	6822      	ldr	r2, [r4, #0]
 80121d8:	bf18      	it	ne
 80121da:	2301      	movne	r3, #1
 80121dc:	0692      	lsls	r2, r2, #26
 80121de:	d42d      	bmi.n	801223c <_printf_common+0xb4>
 80121e0:	4649      	mov	r1, r9
 80121e2:	4638      	mov	r0, r7
 80121e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121e8:	47c0      	blx	r8
 80121ea:	3001      	adds	r0, #1
 80121ec:	d020      	beq.n	8012230 <_printf_common+0xa8>
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	68e5      	ldr	r5, [r4, #12]
 80121f2:	f003 0306 	and.w	r3, r3, #6
 80121f6:	2b04      	cmp	r3, #4
 80121f8:	bf18      	it	ne
 80121fa:	2500      	movne	r5, #0
 80121fc:	6832      	ldr	r2, [r6, #0]
 80121fe:	f04f 0600 	mov.w	r6, #0
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	bf08      	it	eq
 8012206:	1aad      	subeq	r5, r5, r2
 8012208:	6922      	ldr	r2, [r4, #16]
 801220a:	bf08      	it	eq
 801220c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012210:	4293      	cmp	r3, r2
 8012212:	bfc4      	itt	gt
 8012214:	1a9b      	subgt	r3, r3, r2
 8012216:	18ed      	addgt	r5, r5, r3
 8012218:	341a      	adds	r4, #26
 801221a:	42b5      	cmp	r5, r6
 801221c:	d11a      	bne.n	8012254 <_printf_common+0xcc>
 801221e:	2000      	movs	r0, #0
 8012220:	e008      	b.n	8012234 <_printf_common+0xac>
 8012222:	2301      	movs	r3, #1
 8012224:	4652      	mov	r2, sl
 8012226:	4649      	mov	r1, r9
 8012228:	4638      	mov	r0, r7
 801222a:	47c0      	blx	r8
 801222c:	3001      	adds	r0, #1
 801222e:	d103      	bne.n	8012238 <_printf_common+0xb0>
 8012230:	f04f 30ff 	mov.w	r0, #4294967295
 8012234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012238:	3501      	adds	r5, #1
 801223a:	e7c4      	b.n	80121c6 <_printf_common+0x3e>
 801223c:	2030      	movs	r0, #48	; 0x30
 801223e:	18e1      	adds	r1, r4, r3
 8012240:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012244:	1c5a      	adds	r2, r3, #1
 8012246:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801224a:	4422      	add	r2, r4
 801224c:	3302      	adds	r3, #2
 801224e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012252:	e7c5      	b.n	80121e0 <_printf_common+0x58>
 8012254:	2301      	movs	r3, #1
 8012256:	4622      	mov	r2, r4
 8012258:	4649      	mov	r1, r9
 801225a:	4638      	mov	r0, r7
 801225c:	47c0      	blx	r8
 801225e:	3001      	adds	r0, #1
 8012260:	d0e6      	beq.n	8012230 <_printf_common+0xa8>
 8012262:	3601      	adds	r6, #1
 8012264:	e7d9      	b.n	801221a <_printf_common+0x92>
	...

08012268 <_printf_i>:
 8012268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801226c:	7e0f      	ldrb	r7, [r1, #24]
 801226e:	4691      	mov	r9, r2
 8012270:	2f78      	cmp	r7, #120	; 0x78
 8012272:	4680      	mov	r8, r0
 8012274:	460c      	mov	r4, r1
 8012276:	469a      	mov	sl, r3
 8012278:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801227a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801227e:	d807      	bhi.n	8012290 <_printf_i+0x28>
 8012280:	2f62      	cmp	r7, #98	; 0x62
 8012282:	d80a      	bhi.n	801229a <_printf_i+0x32>
 8012284:	2f00      	cmp	r7, #0
 8012286:	f000 80d9 	beq.w	801243c <_printf_i+0x1d4>
 801228a:	2f58      	cmp	r7, #88	; 0x58
 801228c:	f000 80a4 	beq.w	80123d8 <_printf_i+0x170>
 8012290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012298:	e03a      	b.n	8012310 <_printf_i+0xa8>
 801229a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801229e:	2b15      	cmp	r3, #21
 80122a0:	d8f6      	bhi.n	8012290 <_printf_i+0x28>
 80122a2:	a101      	add	r1, pc, #4	; (adr r1, 80122a8 <_printf_i+0x40>)
 80122a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80122a8:	08012301 	.word	0x08012301
 80122ac:	08012315 	.word	0x08012315
 80122b0:	08012291 	.word	0x08012291
 80122b4:	08012291 	.word	0x08012291
 80122b8:	08012291 	.word	0x08012291
 80122bc:	08012291 	.word	0x08012291
 80122c0:	08012315 	.word	0x08012315
 80122c4:	08012291 	.word	0x08012291
 80122c8:	08012291 	.word	0x08012291
 80122cc:	08012291 	.word	0x08012291
 80122d0:	08012291 	.word	0x08012291
 80122d4:	08012423 	.word	0x08012423
 80122d8:	08012345 	.word	0x08012345
 80122dc:	08012405 	.word	0x08012405
 80122e0:	08012291 	.word	0x08012291
 80122e4:	08012291 	.word	0x08012291
 80122e8:	08012445 	.word	0x08012445
 80122ec:	08012291 	.word	0x08012291
 80122f0:	08012345 	.word	0x08012345
 80122f4:	08012291 	.word	0x08012291
 80122f8:	08012291 	.word	0x08012291
 80122fc:	0801240d 	.word	0x0801240d
 8012300:	682b      	ldr	r3, [r5, #0]
 8012302:	1d1a      	adds	r2, r3, #4
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	602a      	str	r2, [r5, #0]
 8012308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801230c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012310:	2301      	movs	r3, #1
 8012312:	e0a4      	b.n	801245e <_printf_i+0x1f6>
 8012314:	6820      	ldr	r0, [r4, #0]
 8012316:	6829      	ldr	r1, [r5, #0]
 8012318:	0606      	lsls	r6, r0, #24
 801231a:	f101 0304 	add.w	r3, r1, #4
 801231e:	d50a      	bpl.n	8012336 <_printf_i+0xce>
 8012320:	680e      	ldr	r6, [r1, #0]
 8012322:	602b      	str	r3, [r5, #0]
 8012324:	2e00      	cmp	r6, #0
 8012326:	da03      	bge.n	8012330 <_printf_i+0xc8>
 8012328:	232d      	movs	r3, #45	; 0x2d
 801232a:	4276      	negs	r6, r6
 801232c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012330:	230a      	movs	r3, #10
 8012332:	485e      	ldr	r0, [pc, #376]	; (80124ac <_printf_i+0x244>)
 8012334:	e019      	b.n	801236a <_printf_i+0x102>
 8012336:	680e      	ldr	r6, [r1, #0]
 8012338:	f010 0f40 	tst.w	r0, #64	; 0x40
 801233c:	602b      	str	r3, [r5, #0]
 801233e:	bf18      	it	ne
 8012340:	b236      	sxthne	r6, r6
 8012342:	e7ef      	b.n	8012324 <_printf_i+0xbc>
 8012344:	682b      	ldr	r3, [r5, #0]
 8012346:	6820      	ldr	r0, [r4, #0]
 8012348:	1d19      	adds	r1, r3, #4
 801234a:	6029      	str	r1, [r5, #0]
 801234c:	0601      	lsls	r1, r0, #24
 801234e:	d501      	bpl.n	8012354 <_printf_i+0xec>
 8012350:	681e      	ldr	r6, [r3, #0]
 8012352:	e002      	b.n	801235a <_printf_i+0xf2>
 8012354:	0646      	lsls	r6, r0, #25
 8012356:	d5fb      	bpl.n	8012350 <_printf_i+0xe8>
 8012358:	881e      	ldrh	r6, [r3, #0]
 801235a:	2f6f      	cmp	r7, #111	; 0x6f
 801235c:	bf0c      	ite	eq
 801235e:	2308      	moveq	r3, #8
 8012360:	230a      	movne	r3, #10
 8012362:	4852      	ldr	r0, [pc, #328]	; (80124ac <_printf_i+0x244>)
 8012364:	2100      	movs	r1, #0
 8012366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801236a:	6865      	ldr	r5, [r4, #4]
 801236c:	2d00      	cmp	r5, #0
 801236e:	bfa8      	it	ge
 8012370:	6821      	ldrge	r1, [r4, #0]
 8012372:	60a5      	str	r5, [r4, #8]
 8012374:	bfa4      	itt	ge
 8012376:	f021 0104 	bicge.w	r1, r1, #4
 801237a:	6021      	strge	r1, [r4, #0]
 801237c:	b90e      	cbnz	r6, 8012382 <_printf_i+0x11a>
 801237e:	2d00      	cmp	r5, #0
 8012380:	d04d      	beq.n	801241e <_printf_i+0x1b6>
 8012382:	4615      	mov	r5, r2
 8012384:	fbb6 f1f3 	udiv	r1, r6, r3
 8012388:	fb03 6711 	mls	r7, r3, r1, r6
 801238c:	5dc7      	ldrb	r7, [r0, r7]
 801238e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012392:	4637      	mov	r7, r6
 8012394:	42bb      	cmp	r3, r7
 8012396:	460e      	mov	r6, r1
 8012398:	d9f4      	bls.n	8012384 <_printf_i+0x11c>
 801239a:	2b08      	cmp	r3, #8
 801239c:	d10b      	bne.n	80123b6 <_printf_i+0x14e>
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	07de      	lsls	r6, r3, #31
 80123a2:	d508      	bpl.n	80123b6 <_printf_i+0x14e>
 80123a4:	6923      	ldr	r3, [r4, #16]
 80123a6:	6861      	ldr	r1, [r4, #4]
 80123a8:	4299      	cmp	r1, r3
 80123aa:	bfde      	ittt	le
 80123ac:	2330      	movle	r3, #48	; 0x30
 80123ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80123b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80123b6:	1b52      	subs	r2, r2, r5
 80123b8:	6122      	str	r2, [r4, #16]
 80123ba:	464b      	mov	r3, r9
 80123bc:	4621      	mov	r1, r4
 80123be:	4640      	mov	r0, r8
 80123c0:	f8cd a000 	str.w	sl, [sp]
 80123c4:	aa03      	add	r2, sp, #12
 80123c6:	f7ff fedf 	bl	8012188 <_printf_common>
 80123ca:	3001      	adds	r0, #1
 80123cc:	d14c      	bne.n	8012468 <_printf_i+0x200>
 80123ce:	f04f 30ff 	mov.w	r0, #4294967295
 80123d2:	b004      	add	sp, #16
 80123d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d8:	4834      	ldr	r0, [pc, #208]	; (80124ac <_printf_i+0x244>)
 80123da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80123de:	6829      	ldr	r1, [r5, #0]
 80123e0:	6823      	ldr	r3, [r4, #0]
 80123e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80123e6:	6029      	str	r1, [r5, #0]
 80123e8:	061d      	lsls	r5, r3, #24
 80123ea:	d514      	bpl.n	8012416 <_printf_i+0x1ae>
 80123ec:	07df      	lsls	r7, r3, #31
 80123ee:	bf44      	itt	mi
 80123f0:	f043 0320 	orrmi.w	r3, r3, #32
 80123f4:	6023      	strmi	r3, [r4, #0]
 80123f6:	b91e      	cbnz	r6, 8012400 <_printf_i+0x198>
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	f023 0320 	bic.w	r3, r3, #32
 80123fe:	6023      	str	r3, [r4, #0]
 8012400:	2310      	movs	r3, #16
 8012402:	e7af      	b.n	8012364 <_printf_i+0xfc>
 8012404:	6823      	ldr	r3, [r4, #0]
 8012406:	f043 0320 	orr.w	r3, r3, #32
 801240a:	6023      	str	r3, [r4, #0]
 801240c:	2378      	movs	r3, #120	; 0x78
 801240e:	4828      	ldr	r0, [pc, #160]	; (80124b0 <_printf_i+0x248>)
 8012410:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012414:	e7e3      	b.n	80123de <_printf_i+0x176>
 8012416:	0659      	lsls	r1, r3, #25
 8012418:	bf48      	it	mi
 801241a:	b2b6      	uxthmi	r6, r6
 801241c:	e7e6      	b.n	80123ec <_printf_i+0x184>
 801241e:	4615      	mov	r5, r2
 8012420:	e7bb      	b.n	801239a <_printf_i+0x132>
 8012422:	682b      	ldr	r3, [r5, #0]
 8012424:	6826      	ldr	r6, [r4, #0]
 8012426:	1d18      	adds	r0, r3, #4
 8012428:	6961      	ldr	r1, [r4, #20]
 801242a:	6028      	str	r0, [r5, #0]
 801242c:	0635      	lsls	r5, r6, #24
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	d501      	bpl.n	8012436 <_printf_i+0x1ce>
 8012432:	6019      	str	r1, [r3, #0]
 8012434:	e002      	b.n	801243c <_printf_i+0x1d4>
 8012436:	0670      	lsls	r0, r6, #25
 8012438:	d5fb      	bpl.n	8012432 <_printf_i+0x1ca>
 801243a:	8019      	strh	r1, [r3, #0]
 801243c:	2300      	movs	r3, #0
 801243e:	4615      	mov	r5, r2
 8012440:	6123      	str	r3, [r4, #16]
 8012442:	e7ba      	b.n	80123ba <_printf_i+0x152>
 8012444:	682b      	ldr	r3, [r5, #0]
 8012446:	2100      	movs	r1, #0
 8012448:	1d1a      	adds	r2, r3, #4
 801244a:	602a      	str	r2, [r5, #0]
 801244c:	681d      	ldr	r5, [r3, #0]
 801244e:	6862      	ldr	r2, [r4, #4]
 8012450:	4628      	mov	r0, r5
 8012452:	f000 fef7 	bl	8013244 <memchr>
 8012456:	b108      	cbz	r0, 801245c <_printf_i+0x1f4>
 8012458:	1b40      	subs	r0, r0, r5
 801245a:	6060      	str	r0, [r4, #4]
 801245c:	6863      	ldr	r3, [r4, #4]
 801245e:	6123      	str	r3, [r4, #16]
 8012460:	2300      	movs	r3, #0
 8012462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012466:	e7a8      	b.n	80123ba <_printf_i+0x152>
 8012468:	462a      	mov	r2, r5
 801246a:	4649      	mov	r1, r9
 801246c:	4640      	mov	r0, r8
 801246e:	6923      	ldr	r3, [r4, #16]
 8012470:	47d0      	blx	sl
 8012472:	3001      	adds	r0, #1
 8012474:	d0ab      	beq.n	80123ce <_printf_i+0x166>
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	079b      	lsls	r3, r3, #30
 801247a:	d413      	bmi.n	80124a4 <_printf_i+0x23c>
 801247c:	68e0      	ldr	r0, [r4, #12]
 801247e:	9b03      	ldr	r3, [sp, #12]
 8012480:	4298      	cmp	r0, r3
 8012482:	bfb8      	it	lt
 8012484:	4618      	movlt	r0, r3
 8012486:	e7a4      	b.n	80123d2 <_printf_i+0x16a>
 8012488:	2301      	movs	r3, #1
 801248a:	4632      	mov	r2, r6
 801248c:	4649      	mov	r1, r9
 801248e:	4640      	mov	r0, r8
 8012490:	47d0      	blx	sl
 8012492:	3001      	adds	r0, #1
 8012494:	d09b      	beq.n	80123ce <_printf_i+0x166>
 8012496:	3501      	adds	r5, #1
 8012498:	68e3      	ldr	r3, [r4, #12]
 801249a:	9903      	ldr	r1, [sp, #12]
 801249c:	1a5b      	subs	r3, r3, r1
 801249e:	42ab      	cmp	r3, r5
 80124a0:	dcf2      	bgt.n	8012488 <_printf_i+0x220>
 80124a2:	e7eb      	b.n	801247c <_printf_i+0x214>
 80124a4:	2500      	movs	r5, #0
 80124a6:	f104 0619 	add.w	r6, r4, #25
 80124aa:	e7f5      	b.n	8012498 <_printf_i+0x230>
 80124ac:	0802dece 	.word	0x0802dece
 80124b0:	0802dedf 	.word	0x0802dedf

080124b4 <_sbrk_r>:
 80124b4:	b538      	push	{r3, r4, r5, lr}
 80124b6:	2300      	movs	r3, #0
 80124b8:	4d05      	ldr	r5, [pc, #20]	; (80124d0 <_sbrk_r+0x1c>)
 80124ba:	4604      	mov	r4, r0
 80124bc:	4608      	mov	r0, r1
 80124be:	602b      	str	r3, [r5, #0]
 80124c0:	f7f1 f9fe 	bl	80038c0 <_sbrk>
 80124c4:	1c43      	adds	r3, r0, #1
 80124c6:	d102      	bne.n	80124ce <_sbrk_r+0x1a>
 80124c8:	682b      	ldr	r3, [r5, #0]
 80124ca:	b103      	cbz	r3, 80124ce <_sbrk_r+0x1a>
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	bd38      	pop	{r3, r4, r5, pc}
 80124d0:	20001668 	.word	0x20001668

080124d4 <_vsniprintf_r>:
 80124d4:	b530      	push	{r4, r5, lr}
 80124d6:	4614      	mov	r4, r2
 80124d8:	2c00      	cmp	r4, #0
 80124da:	4605      	mov	r5, r0
 80124dc:	461a      	mov	r2, r3
 80124de:	b09b      	sub	sp, #108	; 0x6c
 80124e0:	da05      	bge.n	80124ee <_vsniprintf_r+0x1a>
 80124e2:	238b      	movs	r3, #139	; 0x8b
 80124e4:	6003      	str	r3, [r0, #0]
 80124e6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ea:	b01b      	add	sp, #108	; 0x6c
 80124ec:	bd30      	pop	{r4, r5, pc}
 80124ee:	f44f 7302 	mov.w	r3, #520	; 0x208
 80124f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80124f6:	bf0c      	ite	eq
 80124f8:	4623      	moveq	r3, r4
 80124fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80124fe:	9302      	str	r3, [sp, #8]
 8012500:	9305      	str	r3, [sp, #20]
 8012502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012506:	9100      	str	r1, [sp, #0]
 8012508:	9104      	str	r1, [sp, #16]
 801250a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801250e:	4669      	mov	r1, sp
 8012510:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012512:	f001 fab1 	bl	8013a78 <_svfiprintf_r>
 8012516:	1c43      	adds	r3, r0, #1
 8012518:	bfbc      	itt	lt
 801251a:	238b      	movlt	r3, #139	; 0x8b
 801251c:	602b      	strlt	r3, [r5, #0]
 801251e:	2c00      	cmp	r4, #0
 8012520:	d0e3      	beq.n	80124ea <_vsniprintf_r+0x16>
 8012522:	2200      	movs	r2, #0
 8012524:	9b00      	ldr	r3, [sp, #0]
 8012526:	701a      	strb	r2, [r3, #0]
 8012528:	e7df      	b.n	80124ea <_vsniprintf_r+0x16>
	...

0801252c <vsniprintf>:
 801252c:	b507      	push	{r0, r1, r2, lr}
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	4613      	mov	r3, r2
 8012532:	460a      	mov	r2, r1
 8012534:	4601      	mov	r1, r0
 8012536:	4803      	ldr	r0, [pc, #12]	; (8012544 <vsniprintf+0x18>)
 8012538:	6800      	ldr	r0, [r0, #0]
 801253a:	f7ff ffcb 	bl	80124d4 <_vsniprintf_r>
 801253e:	b003      	add	sp, #12
 8012540:	f85d fb04 	ldr.w	pc, [sp], #4
 8012544:	20000168 	.word	0x20000168

08012548 <quorem>:
 8012548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	6903      	ldr	r3, [r0, #16]
 801254e:	690c      	ldr	r4, [r1, #16]
 8012550:	4607      	mov	r7, r0
 8012552:	42a3      	cmp	r3, r4
 8012554:	f2c0 8082 	blt.w	801265c <quorem+0x114>
 8012558:	3c01      	subs	r4, #1
 801255a:	f100 0514 	add.w	r5, r0, #20
 801255e:	f101 0814 	add.w	r8, r1, #20
 8012562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012566:	9301      	str	r3, [sp, #4]
 8012568:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801256c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012570:	3301      	adds	r3, #1
 8012572:	429a      	cmp	r2, r3
 8012574:	fbb2 f6f3 	udiv	r6, r2, r3
 8012578:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801257c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012580:	d331      	bcc.n	80125e6 <quorem+0x9e>
 8012582:	f04f 0e00 	mov.w	lr, #0
 8012586:	4640      	mov	r0, r8
 8012588:	46ac      	mov	ip, r5
 801258a:	46f2      	mov	sl, lr
 801258c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012590:	b293      	uxth	r3, r2
 8012592:	fb06 e303 	mla	r3, r6, r3, lr
 8012596:	0c12      	lsrs	r2, r2, #16
 8012598:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801259c:	b29b      	uxth	r3, r3
 801259e:	fb06 e202 	mla	r2, r6, r2, lr
 80125a2:	ebaa 0303 	sub.w	r3, sl, r3
 80125a6:	f8dc a000 	ldr.w	sl, [ip]
 80125aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80125ae:	fa1f fa8a 	uxth.w	sl, sl
 80125b2:	4453      	add	r3, sl
 80125b4:	f8dc a000 	ldr.w	sl, [ip]
 80125b8:	b292      	uxth	r2, r2
 80125ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80125be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125c8:	4581      	cmp	r9, r0
 80125ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80125ce:	f84c 3b04 	str.w	r3, [ip], #4
 80125d2:	d2db      	bcs.n	801258c <quorem+0x44>
 80125d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80125d8:	b92b      	cbnz	r3, 80125e6 <quorem+0x9e>
 80125da:	9b01      	ldr	r3, [sp, #4]
 80125dc:	3b04      	subs	r3, #4
 80125de:	429d      	cmp	r5, r3
 80125e0:	461a      	mov	r2, r3
 80125e2:	d32f      	bcc.n	8012644 <quorem+0xfc>
 80125e4:	613c      	str	r4, [r7, #16]
 80125e6:	4638      	mov	r0, r7
 80125e8:	f001 f8d2 	bl	8013790 <__mcmp>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	db25      	blt.n	801263c <quorem+0xf4>
 80125f0:	4628      	mov	r0, r5
 80125f2:	f04f 0c00 	mov.w	ip, #0
 80125f6:	3601      	adds	r6, #1
 80125f8:	f858 1b04 	ldr.w	r1, [r8], #4
 80125fc:	f8d0 e000 	ldr.w	lr, [r0]
 8012600:	b28b      	uxth	r3, r1
 8012602:	ebac 0303 	sub.w	r3, ip, r3
 8012606:	fa1f f28e 	uxth.w	r2, lr
 801260a:	4413      	add	r3, r2
 801260c:	0c0a      	lsrs	r2, r1, #16
 801260e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012616:	b29b      	uxth	r3, r3
 8012618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801261c:	45c1      	cmp	r9, r8
 801261e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012622:	f840 3b04 	str.w	r3, [r0], #4
 8012626:	d2e7      	bcs.n	80125f8 <quorem+0xb0>
 8012628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801262c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012630:	b922      	cbnz	r2, 801263c <quorem+0xf4>
 8012632:	3b04      	subs	r3, #4
 8012634:	429d      	cmp	r5, r3
 8012636:	461a      	mov	r2, r3
 8012638:	d30a      	bcc.n	8012650 <quorem+0x108>
 801263a:	613c      	str	r4, [r7, #16]
 801263c:	4630      	mov	r0, r6
 801263e:	b003      	add	sp, #12
 8012640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012644:	6812      	ldr	r2, [r2, #0]
 8012646:	3b04      	subs	r3, #4
 8012648:	2a00      	cmp	r2, #0
 801264a:	d1cb      	bne.n	80125e4 <quorem+0x9c>
 801264c:	3c01      	subs	r4, #1
 801264e:	e7c6      	b.n	80125de <quorem+0x96>
 8012650:	6812      	ldr	r2, [r2, #0]
 8012652:	3b04      	subs	r3, #4
 8012654:	2a00      	cmp	r2, #0
 8012656:	d1f0      	bne.n	801263a <quorem+0xf2>
 8012658:	3c01      	subs	r4, #1
 801265a:	e7eb      	b.n	8012634 <quorem+0xec>
 801265c:	2000      	movs	r0, #0
 801265e:	e7ee      	b.n	801263e <quorem+0xf6>

08012660 <_dtoa_r>:
 8012660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	4616      	mov	r6, r2
 8012666:	461f      	mov	r7, r3
 8012668:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801266a:	b099      	sub	sp, #100	; 0x64
 801266c:	4605      	mov	r5, r0
 801266e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012672:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8012676:	b974      	cbnz	r4, 8012696 <_dtoa_r+0x36>
 8012678:	2010      	movs	r0, #16
 801267a:	f7ff f9c7 	bl	8011a0c <malloc>
 801267e:	4602      	mov	r2, r0
 8012680:	6268      	str	r0, [r5, #36]	; 0x24
 8012682:	b920      	cbnz	r0, 801268e <_dtoa_r+0x2e>
 8012684:	21ea      	movs	r1, #234	; 0xea
 8012686:	4ba8      	ldr	r3, [pc, #672]	; (8012928 <_dtoa_r+0x2c8>)
 8012688:	48a8      	ldr	r0, [pc, #672]	; (801292c <_dtoa_r+0x2cc>)
 801268a:	f001 faf5 	bl	8013c78 <__assert_func>
 801268e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012692:	6004      	str	r4, [r0, #0]
 8012694:	60c4      	str	r4, [r0, #12]
 8012696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012698:	6819      	ldr	r1, [r3, #0]
 801269a:	b151      	cbz	r1, 80126b2 <_dtoa_r+0x52>
 801269c:	685a      	ldr	r2, [r3, #4]
 801269e:	2301      	movs	r3, #1
 80126a0:	4093      	lsls	r3, r2
 80126a2:	604a      	str	r2, [r1, #4]
 80126a4:	608b      	str	r3, [r1, #8]
 80126a6:	4628      	mov	r0, r5
 80126a8:	f000 fe34 	bl	8013314 <_Bfree>
 80126ac:	2200      	movs	r2, #0
 80126ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126b0:	601a      	str	r2, [r3, #0]
 80126b2:	1e3b      	subs	r3, r7, #0
 80126b4:	bfaf      	iteee	ge
 80126b6:	2300      	movge	r3, #0
 80126b8:	2201      	movlt	r2, #1
 80126ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126be:	9305      	strlt	r3, [sp, #20]
 80126c0:	bfa8      	it	ge
 80126c2:	f8c8 3000 	strge.w	r3, [r8]
 80126c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80126ca:	4b99      	ldr	r3, [pc, #612]	; (8012930 <_dtoa_r+0x2d0>)
 80126cc:	bfb8      	it	lt
 80126ce:	f8c8 2000 	strlt.w	r2, [r8]
 80126d2:	ea33 0309 	bics.w	r3, r3, r9
 80126d6:	d119      	bne.n	801270c <_dtoa_r+0xac>
 80126d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80126dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80126de:	6013      	str	r3, [r2, #0]
 80126e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126e4:	4333      	orrs	r3, r6
 80126e6:	f000 857f 	beq.w	80131e8 <_dtoa_r+0xb88>
 80126ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80126ec:	b953      	cbnz	r3, 8012704 <_dtoa_r+0xa4>
 80126ee:	4b91      	ldr	r3, [pc, #580]	; (8012934 <_dtoa_r+0x2d4>)
 80126f0:	e022      	b.n	8012738 <_dtoa_r+0xd8>
 80126f2:	4b91      	ldr	r3, [pc, #580]	; (8012938 <_dtoa_r+0x2d8>)
 80126f4:	9303      	str	r3, [sp, #12]
 80126f6:	3308      	adds	r3, #8
 80126f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80126fa:	6013      	str	r3, [r2, #0]
 80126fc:	9803      	ldr	r0, [sp, #12]
 80126fe:	b019      	add	sp, #100	; 0x64
 8012700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012704:	4b8b      	ldr	r3, [pc, #556]	; (8012934 <_dtoa_r+0x2d4>)
 8012706:	9303      	str	r3, [sp, #12]
 8012708:	3303      	adds	r3, #3
 801270a:	e7f5      	b.n	80126f8 <_dtoa_r+0x98>
 801270c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012710:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8012714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012718:	2200      	movs	r2, #0
 801271a:	2300      	movs	r3, #0
 801271c:	f7ee f9b0 	bl	8000a80 <__aeabi_dcmpeq>
 8012720:	4680      	mov	r8, r0
 8012722:	b158      	cbz	r0, 801273c <_dtoa_r+0xdc>
 8012724:	2301      	movs	r3, #1
 8012726:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012728:	6013      	str	r3, [r2, #0]
 801272a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801272c:	2b00      	cmp	r3, #0
 801272e:	f000 8558 	beq.w	80131e2 <_dtoa_r+0xb82>
 8012732:	4882      	ldr	r0, [pc, #520]	; (801293c <_dtoa_r+0x2dc>)
 8012734:	6018      	str	r0, [r3, #0]
 8012736:	1e43      	subs	r3, r0, #1
 8012738:	9303      	str	r3, [sp, #12]
 801273a:	e7df      	b.n	80126fc <_dtoa_r+0x9c>
 801273c:	ab16      	add	r3, sp, #88	; 0x58
 801273e:	9301      	str	r3, [sp, #4]
 8012740:	ab17      	add	r3, sp, #92	; 0x5c
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	4628      	mov	r0, r5
 8012746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801274a:	f001 f8c9 	bl	80138e0 <__d2b>
 801274e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012752:	4683      	mov	fp, r0
 8012754:	2c00      	cmp	r4, #0
 8012756:	d07f      	beq.n	8012858 <_dtoa_r+0x1f8>
 8012758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801275c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801275e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012766:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801276a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801276e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8012772:	2200      	movs	r2, #0
 8012774:	4b72      	ldr	r3, [pc, #456]	; (8012940 <_dtoa_r+0x2e0>)
 8012776:	f7ed fd63 	bl	8000240 <__aeabi_dsub>
 801277a:	a365      	add	r3, pc, #404	; (adr r3, 8012910 <_dtoa_r+0x2b0>)
 801277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012780:	f7ed ff16 	bl	80005b0 <__aeabi_dmul>
 8012784:	a364      	add	r3, pc, #400	; (adr r3, 8012918 <_dtoa_r+0x2b8>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed fd5b 	bl	8000244 <__adddf3>
 801278e:	4606      	mov	r6, r0
 8012790:	4620      	mov	r0, r4
 8012792:	460f      	mov	r7, r1
 8012794:	f7ed fea2 	bl	80004dc <__aeabi_i2d>
 8012798:	a361      	add	r3, pc, #388	; (adr r3, 8012920 <_dtoa_r+0x2c0>)
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	f7ed ff07 	bl	80005b0 <__aeabi_dmul>
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4630      	mov	r0, r6
 80127a8:	4639      	mov	r1, r7
 80127aa:	f7ed fd4b 	bl	8000244 <__adddf3>
 80127ae:	4606      	mov	r6, r0
 80127b0:	460f      	mov	r7, r1
 80127b2:	f7ee f9ad 	bl	8000b10 <__aeabi_d2iz>
 80127b6:	2200      	movs	r2, #0
 80127b8:	4682      	mov	sl, r0
 80127ba:	2300      	movs	r3, #0
 80127bc:	4630      	mov	r0, r6
 80127be:	4639      	mov	r1, r7
 80127c0:	f7ee f968 	bl	8000a94 <__aeabi_dcmplt>
 80127c4:	b148      	cbz	r0, 80127da <_dtoa_r+0x17a>
 80127c6:	4650      	mov	r0, sl
 80127c8:	f7ed fe88 	bl	80004dc <__aeabi_i2d>
 80127cc:	4632      	mov	r2, r6
 80127ce:	463b      	mov	r3, r7
 80127d0:	f7ee f956 	bl	8000a80 <__aeabi_dcmpeq>
 80127d4:	b908      	cbnz	r0, 80127da <_dtoa_r+0x17a>
 80127d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127da:	f1ba 0f16 	cmp.w	sl, #22
 80127de:	d858      	bhi.n	8012892 <_dtoa_r+0x232>
 80127e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80127e4:	4b57      	ldr	r3, [pc, #348]	; (8012944 <_dtoa_r+0x2e4>)
 80127e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	f7ee f951 	bl	8000a94 <__aeabi_dcmplt>
 80127f2:	2800      	cmp	r0, #0
 80127f4:	d04f      	beq.n	8012896 <_dtoa_r+0x236>
 80127f6:	2300      	movs	r3, #0
 80127f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80127fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012800:	1b1c      	subs	r4, r3, r4
 8012802:	1e63      	subs	r3, r4, #1
 8012804:	9309      	str	r3, [sp, #36]	; 0x24
 8012806:	bf49      	itett	mi
 8012808:	f1c4 0301 	rsbmi	r3, r4, #1
 801280c:	2300      	movpl	r3, #0
 801280e:	9306      	strmi	r3, [sp, #24]
 8012810:	2300      	movmi	r3, #0
 8012812:	bf54      	ite	pl
 8012814:	9306      	strpl	r3, [sp, #24]
 8012816:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012818:	f1ba 0f00 	cmp.w	sl, #0
 801281c:	db3d      	blt.n	801289a <_dtoa_r+0x23a>
 801281e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012820:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012824:	4453      	add	r3, sl
 8012826:	9309      	str	r3, [sp, #36]	; 0x24
 8012828:	2300      	movs	r3, #0
 801282a:	930a      	str	r3, [sp, #40]	; 0x28
 801282c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801282e:	2b09      	cmp	r3, #9
 8012830:	f200 808c 	bhi.w	801294c <_dtoa_r+0x2ec>
 8012834:	2b05      	cmp	r3, #5
 8012836:	bfc4      	itt	gt
 8012838:	3b04      	subgt	r3, #4
 801283a:	9322      	strgt	r3, [sp, #136]	; 0x88
 801283c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801283e:	bfc8      	it	gt
 8012840:	2400      	movgt	r4, #0
 8012842:	f1a3 0302 	sub.w	r3, r3, #2
 8012846:	bfd8      	it	le
 8012848:	2401      	movle	r4, #1
 801284a:	2b03      	cmp	r3, #3
 801284c:	f200 808a 	bhi.w	8012964 <_dtoa_r+0x304>
 8012850:	e8df f003 	tbb	[pc, r3]
 8012854:	5b4d4f2d 	.word	0x5b4d4f2d
 8012858:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801285c:	441c      	add	r4, r3
 801285e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8012862:	2b20      	cmp	r3, #32
 8012864:	bfc3      	ittte	gt
 8012866:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801286a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801286e:	fa09 f303 	lslgt.w	r3, r9, r3
 8012872:	f1c3 0320 	rsble	r3, r3, #32
 8012876:	bfc6      	itte	gt
 8012878:	fa26 f000 	lsrgt.w	r0, r6, r0
 801287c:	4318      	orrgt	r0, r3
 801287e:	fa06 f003 	lslle.w	r0, r6, r3
 8012882:	f7ed fe1b 	bl	80004bc <__aeabi_ui2d>
 8012886:	2301      	movs	r3, #1
 8012888:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801288c:	3c01      	subs	r4, #1
 801288e:	9313      	str	r3, [sp, #76]	; 0x4c
 8012890:	e76f      	b.n	8012772 <_dtoa_r+0x112>
 8012892:	2301      	movs	r3, #1
 8012894:	e7b2      	b.n	80127fc <_dtoa_r+0x19c>
 8012896:	900f      	str	r0, [sp, #60]	; 0x3c
 8012898:	e7b1      	b.n	80127fe <_dtoa_r+0x19e>
 801289a:	9b06      	ldr	r3, [sp, #24]
 801289c:	eba3 030a 	sub.w	r3, r3, sl
 80128a0:	9306      	str	r3, [sp, #24]
 80128a2:	f1ca 0300 	rsb	r3, sl, #0
 80128a6:	930a      	str	r3, [sp, #40]	; 0x28
 80128a8:	2300      	movs	r3, #0
 80128aa:	930e      	str	r3, [sp, #56]	; 0x38
 80128ac:	e7be      	b.n	801282c <_dtoa_r+0x1cc>
 80128ae:	2300      	movs	r3, #0
 80128b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80128b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	dc58      	bgt.n	801296a <_dtoa_r+0x30a>
 80128b8:	f04f 0901 	mov.w	r9, #1
 80128bc:	464b      	mov	r3, r9
 80128be:	f8cd 9020 	str.w	r9, [sp, #32]
 80128c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80128c6:	2200      	movs	r2, #0
 80128c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80128ca:	6042      	str	r2, [r0, #4]
 80128cc:	2204      	movs	r2, #4
 80128ce:	f102 0614 	add.w	r6, r2, #20
 80128d2:	429e      	cmp	r6, r3
 80128d4:	6841      	ldr	r1, [r0, #4]
 80128d6:	d94e      	bls.n	8012976 <_dtoa_r+0x316>
 80128d8:	4628      	mov	r0, r5
 80128da:	f000 fcdb 	bl	8013294 <_Balloc>
 80128de:	9003      	str	r0, [sp, #12]
 80128e0:	2800      	cmp	r0, #0
 80128e2:	d14c      	bne.n	801297e <_dtoa_r+0x31e>
 80128e4:	4602      	mov	r2, r0
 80128e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80128ea:	4b17      	ldr	r3, [pc, #92]	; (8012948 <_dtoa_r+0x2e8>)
 80128ec:	e6cc      	b.n	8012688 <_dtoa_r+0x28>
 80128ee:	2301      	movs	r3, #1
 80128f0:	e7de      	b.n	80128b0 <_dtoa_r+0x250>
 80128f2:	2300      	movs	r3, #0
 80128f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80128f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80128f8:	eb0a 0903 	add.w	r9, sl, r3
 80128fc:	f109 0301 	add.w	r3, r9, #1
 8012900:	2b01      	cmp	r3, #1
 8012902:	9308      	str	r3, [sp, #32]
 8012904:	bfb8      	it	lt
 8012906:	2301      	movlt	r3, #1
 8012908:	e7dd      	b.n	80128c6 <_dtoa_r+0x266>
 801290a:	2301      	movs	r3, #1
 801290c:	e7f2      	b.n	80128f4 <_dtoa_r+0x294>
 801290e:	bf00      	nop
 8012910:	636f4361 	.word	0x636f4361
 8012914:	3fd287a7 	.word	0x3fd287a7
 8012918:	8b60c8b3 	.word	0x8b60c8b3
 801291c:	3fc68a28 	.word	0x3fc68a28
 8012920:	509f79fb 	.word	0x509f79fb
 8012924:	3fd34413 	.word	0x3fd34413
 8012928:	0802defd 	.word	0x0802defd
 801292c:	0802df14 	.word	0x0802df14
 8012930:	7ff00000 	.word	0x7ff00000
 8012934:	0802def9 	.word	0x0802def9
 8012938:	0802def0 	.word	0x0802def0
 801293c:	0802decd 	.word	0x0802decd
 8012940:	3ff80000 	.word	0x3ff80000
 8012944:	0802e008 	.word	0x0802e008
 8012948:	0802df6f 	.word	0x0802df6f
 801294c:	2401      	movs	r4, #1
 801294e:	2300      	movs	r3, #0
 8012950:	940b      	str	r4, [sp, #44]	; 0x2c
 8012952:	9322      	str	r3, [sp, #136]	; 0x88
 8012954:	f04f 39ff 	mov.w	r9, #4294967295
 8012958:	2200      	movs	r2, #0
 801295a:	2312      	movs	r3, #18
 801295c:	f8cd 9020 	str.w	r9, [sp, #32]
 8012960:	9223      	str	r2, [sp, #140]	; 0x8c
 8012962:	e7b0      	b.n	80128c6 <_dtoa_r+0x266>
 8012964:	2301      	movs	r3, #1
 8012966:	930b      	str	r3, [sp, #44]	; 0x2c
 8012968:	e7f4      	b.n	8012954 <_dtoa_r+0x2f4>
 801296a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801296e:	464b      	mov	r3, r9
 8012970:	f8cd 9020 	str.w	r9, [sp, #32]
 8012974:	e7a7      	b.n	80128c6 <_dtoa_r+0x266>
 8012976:	3101      	adds	r1, #1
 8012978:	6041      	str	r1, [r0, #4]
 801297a:	0052      	lsls	r2, r2, #1
 801297c:	e7a7      	b.n	80128ce <_dtoa_r+0x26e>
 801297e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012980:	9a03      	ldr	r2, [sp, #12]
 8012982:	601a      	str	r2, [r3, #0]
 8012984:	9b08      	ldr	r3, [sp, #32]
 8012986:	2b0e      	cmp	r3, #14
 8012988:	f200 80a8 	bhi.w	8012adc <_dtoa_r+0x47c>
 801298c:	2c00      	cmp	r4, #0
 801298e:	f000 80a5 	beq.w	8012adc <_dtoa_r+0x47c>
 8012992:	f1ba 0f00 	cmp.w	sl, #0
 8012996:	dd34      	ble.n	8012a02 <_dtoa_r+0x3a2>
 8012998:	4a9a      	ldr	r2, [pc, #616]	; (8012c04 <_dtoa_r+0x5a4>)
 801299a:	f00a 030f 	and.w	r3, sl, #15
 801299e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80129a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80129ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80129b2:	d016      	beq.n	80129e2 <_dtoa_r+0x382>
 80129b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129b8:	4b93      	ldr	r3, [pc, #588]	; (8012c08 <_dtoa_r+0x5a8>)
 80129ba:	2703      	movs	r7, #3
 80129bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80129c0:	f7ed ff20 	bl	8000804 <__aeabi_ddiv>
 80129c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129c8:	f004 040f 	and.w	r4, r4, #15
 80129cc:	4e8e      	ldr	r6, [pc, #568]	; (8012c08 <_dtoa_r+0x5a8>)
 80129ce:	b954      	cbnz	r4, 80129e6 <_dtoa_r+0x386>
 80129d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80129d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129d8:	f7ed ff14 	bl	8000804 <__aeabi_ddiv>
 80129dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129e0:	e029      	b.n	8012a36 <_dtoa_r+0x3d6>
 80129e2:	2702      	movs	r7, #2
 80129e4:	e7f2      	b.n	80129cc <_dtoa_r+0x36c>
 80129e6:	07e1      	lsls	r1, r4, #31
 80129e8:	d508      	bpl.n	80129fc <_dtoa_r+0x39c>
 80129ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80129ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80129f2:	f7ed fddd 	bl	80005b0 <__aeabi_dmul>
 80129f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80129fa:	3701      	adds	r7, #1
 80129fc:	1064      	asrs	r4, r4, #1
 80129fe:	3608      	adds	r6, #8
 8012a00:	e7e5      	b.n	80129ce <_dtoa_r+0x36e>
 8012a02:	f000 80a5 	beq.w	8012b50 <_dtoa_r+0x4f0>
 8012a06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a0a:	f1ca 0400 	rsb	r4, sl, #0
 8012a0e:	4b7d      	ldr	r3, [pc, #500]	; (8012c04 <_dtoa_r+0x5a4>)
 8012a10:	f004 020f 	and.w	r2, r4, #15
 8012a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	f7ed fdc8 	bl	80005b0 <__aeabi_dmul>
 8012a20:	2702      	movs	r7, #2
 8012a22:	2300      	movs	r3, #0
 8012a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a28:	4e77      	ldr	r6, [pc, #476]	; (8012c08 <_dtoa_r+0x5a8>)
 8012a2a:	1124      	asrs	r4, r4, #4
 8012a2c:	2c00      	cmp	r4, #0
 8012a2e:	f040 8084 	bne.w	8012b3a <_dtoa_r+0x4da>
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d1d2      	bne.n	80129dc <_dtoa_r+0x37c>
 8012a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f000 808b 	beq.w	8012b54 <_dtoa_r+0x4f4>
 8012a3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012a42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012a46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	4b6f      	ldr	r3, [pc, #444]	; (8012c0c <_dtoa_r+0x5ac>)
 8012a4e:	f7ee f821 	bl	8000a94 <__aeabi_dcmplt>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d07e      	beq.n	8012b54 <_dtoa_r+0x4f4>
 8012a56:	9b08      	ldr	r3, [sp, #32]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d07b      	beq.n	8012b54 <_dtoa_r+0x4f4>
 8012a5c:	f1b9 0f00 	cmp.w	r9, #0
 8012a60:	dd38      	ble.n	8012ad4 <_dtoa_r+0x474>
 8012a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a66:	2200      	movs	r2, #0
 8012a68:	4b69      	ldr	r3, [pc, #420]	; (8012c10 <_dtoa_r+0x5b0>)
 8012a6a:	f7ed fda1 	bl	80005b0 <__aeabi_dmul>
 8012a6e:	464c      	mov	r4, r9
 8012a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8012a78:	3701      	adds	r7, #1
 8012a7a:	4638      	mov	r0, r7
 8012a7c:	f7ed fd2e 	bl	80004dc <__aeabi_i2d>
 8012a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a84:	f7ed fd94 	bl	80005b0 <__aeabi_dmul>
 8012a88:	2200      	movs	r2, #0
 8012a8a:	4b62      	ldr	r3, [pc, #392]	; (8012c14 <_dtoa_r+0x5b4>)
 8012a8c:	f7ed fbda 	bl	8000244 <__adddf3>
 8012a90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012a94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012a98:	9611      	str	r6, [sp, #68]	; 0x44
 8012a9a:	2c00      	cmp	r4, #0
 8012a9c:	d15d      	bne.n	8012b5a <_dtoa_r+0x4fa>
 8012a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	4b5c      	ldr	r3, [pc, #368]	; (8012c18 <_dtoa_r+0x5b8>)
 8012aa6:	f7ed fbcb 	bl	8000240 <__aeabi_dsub>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ab2:	4633      	mov	r3, r6
 8012ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ab6:	f7ee f80b 	bl	8000ad0 <__aeabi_dcmpgt>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	f040 829c 	bne.w	8012ff8 <_dtoa_r+0x998>
 8012ac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ac6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012aca:	f7ed ffe3 	bl	8000a94 <__aeabi_dcmplt>
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	f040 8290 	bne.w	8012ff4 <_dtoa_r+0x994>
 8012ad4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012ad8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f2c0 8152 	blt.w	8012d88 <_dtoa_r+0x728>
 8012ae4:	f1ba 0f0e 	cmp.w	sl, #14
 8012ae8:	f300 814e 	bgt.w	8012d88 <_dtoa_r+0x728>
 8012aec:	4b45      	ldr	r3, [pc, #276]	; (8012c04 <_dtoa_r+0x5a4>)
 8012aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012af2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012af6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8012afa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f280 80db 	bge.w	8012cb8 <_dtoa_r+0x658>
 8012b02:	9b08      	ldr	r3, [sp, #32]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f300 80d7 	bgt.w	8012cb8 <_dtoa_r+0x658>
 8012b0a:	f040 8272 	bne.w	8012ff2 <_dtoa_r+0x992>
 8012b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b12:	2200      	movs	r2, #0
 8012b14:	4b40      	ldr	r3, [pc, #256]	; (8012c18 <_dtoa_r+0x5b8>)
 8012b16:	f7ed fd4b 	bl	80005b0 <__aeabi_dmul>
 8012b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b1e:	f7ed ffcd 	bl	8000abc <__aeabi_dcmpge>
 8012b22:	9c08      	ldr	r4, [sp, #32]
 8012b24:	4626      	mov	r6, r4
 8012b26:	2800      	cmp	r0, #0
 8012b28:	f040 8248 	bne.w	8012fbc <_dtoa_r+0x95c>
 8012b2c:	2331      	movs	r3, #49	; 0x31
 8012b2e:	9f03      	ldr	r7, [sp, #12]
 8012b30:	f10a 0a01 	add.w	sl, sl, #1
 8012b34:	f807 3b01 	strb.w	r3, [r7], #1
 8012b38:	e244      	b.n	8012fc4 <_dtoa_r+0x964>
 8012b3a:	07e2      	lsls	r2, r4, #31
 8012b3c:	d505      	bpl.n	8012b4a <_dtoa_r+0x4ea>
 8012b3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012b42:	f7ed fd35 	bl	80005b0 <__aeabi_dmul>
 8012b46:	2301      	movs	r3, #1
 8012b48:	3701      	adds	r7, #1
 8012b4a:	1064      	asrs	r4, r4, #1
 8012b4c:	3608      	adds	r6, #8
 8012b4e:	e76d      	b.n	8012a2c <_dtoa_r+0x3cc>
 8012b50:	2702      	movs	r7, #2
 8012b52:	e770      	b.n	8012a36 <_dtoa_r+0x3d6>
 8012b54:	46d0      	mov	r8, sl
 8012b56:	9c08      	ldr	r4, [sp, #32]
 8012b58:	e78f      	b.n	8012a7a <_dtoa_r+0x41a>
 8012b5a:	9903      	ldr	r1, [sp, #12]
 8012b5c:	4b29      	ldr	r3, [pc, #164]	; (8012c04 <_dtoa_r+0x5a4>)
 8012b5e:	4421      	add	r1, r4
 8012b60:	9112      	str	r1, [sp, #72]	; 0x48
 8012b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012b6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b70:	2900      	cmp	r1, #0
 8012b72:	d055      	beq.n	8012c20 <_dtoa_r+0x5c0>
 8012b74:	2000      	movs	r0, #0
 8012b76:	4929      	ldr	r1, [pc, #164]	; (8012c1c <_dtoa_r+0x5bc>)
 8012b78:	f7ed fe44 	bl	8000804 <__aeabi_ddiv>
 8012b7c:	463b      	mov	r3, r7
 8012b7e:	4632      	mov	r2, r6
 8012b80:	f7ed fb5e 	bl	8000240 <__aeabi_dsub>
 8012b84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012b88:	9f03      	ldr	r7, [sp, #12]
 8012b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b8e:	f7ed ffbf 	bl	8000b10 <__aeabi_d2iz>
 8012b92:	4604      	mov	r4, r0
 8012b94:	f7ed fca2 	bl	80004dc <__aeabi_i2d>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ba0:	f7ed fb4e 	bl	8000240 <__aeabi_dsub>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	3430      	adds	r4, #48	; 0x30
 8012baa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bb2:	f807 4b01 	strb.w	r4, [r7], #1
 8012bb6:	f7ed ff6d 	bl	8000a94 <__aeabi_dcmplt>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d174      	bne.n	8012ca8 <_dtoa_r+0x648>
 8012bbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bc2:	2000      	movs	r0, #0
 8012bc4:	4911      	ldr	r1, [pc, #68]	; (8012c0c <_dtoa_r+0x5ac>)
 8012bc6:	f7ed fb3b 	bl	8000240 <__aeabi_dsub>
 8012bca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bce:	f7ed ff61 	bl	8000a94 <__aeabi_dcmplt>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	f040 80b7 	bne.w	8012d46 <_dtoa_r+0x6e6>
 8012bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012bda:	429f      	cmp	r7, r3
 8012bdc:	f43f af7a 	beq.w	8012ad4 <_dtoa_r+0x474>
 8012be0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012be4:	2200      	movs	r2, #0
 8012be6:	4b0a      	ldr	r3, [pc, #40]	; (8012c10 <_dtoa_r+0x5b0>)
 8012be8:	f7ed fce2 	bl	80005b0 <__aeabi_dmul>
 8012bec:	2200      	movs	r2, #0
 8012bee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bf6:	4b06      	ldr	r3, [pc, #24]	; (8012c10 <_dtoa_r+0x5b0>)
 8012bf8:	f7ed fcda 	bl	80005b0 <__aeabi_dmul>
 8012bfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c00:	e7c3      	b.n	8012b8a <_dtoa_r+0x52a>
 8012c02:	bf00      	nop
 8012c04:	0802e008 	.word	0x0802e008
 8012c08:	0802dfe0 	.word	0x0802dfe0
 8012c0c:	3ff00000 	.word	0x3ff00000
 8012c10:	40240000 	.word	0x40240000
 8012c14:	401c0000 	.word	0x401c0000
 8012c18:	40140000 	.word	0x40140000
 8012c1c:	3fe00000 	.word	0x3fe00000
 8012c20:	4630      	mov	r0, r6
 8012c22:	4639      	mov	r1, r7
 8012c24:	f7ed fcc4 	bl	80005b0 <__aeabi_dmul>
 8012c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012c2e:	9c03      	ldr	r4, [sp, #12]
 8012c30:	9314      	str	r3, [sp, #80]	; 0x50
 8012c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c36:	f7ed ff6b 	bl	8000b10 <__aeabi_d2iz>
 8012c3a:	9015      	str	r0, [sp, #84]	; 0x54
 8012c3c:	f7ed fc4e 	bl	80004dc <__aeabi_i2d>
 8012c40:	4602      	mov	r2, r0
 8012c42:	460b      	mov	r3, r1
 8012c44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c48:	f7ed fafa 	bl	8000240 <__aeabi_dsub>
 8012c4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c4e:	4606      	mov	r6, r0
 8012c50:	3330      	adds	r3, #48	; 0x30
 8012c52:	f804 3b01 	strb.w	r3, [r4], #1
 8012c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c58:	460f      	mov	r7, r1
 8012c5a:	429c      	cmp	r4, r3
 8012c5c:	f04f 0200 	mov.w	r2, #0
 8012c60:	d124      	bne.n	8012cac <_dtoa_r+0x64c>
 8012c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c66:	4bb0      	ldr	r3, [pc, #704]	; (8012f28 <_dtoa_r+0x8c8>)
 8012c68:	f7ed faec 	bl	8000244 <__adddf3>
 8012c6c:	4602      	mov	r2, r0
 8012c6e:	460b      	mov	r3, r1
 8012c70:	4630      	mov	r0, r6
 8012c72:	4639      	mov	r1, r7
 8012c74:	f7ed ff2c 	bl	8000ad0 <__aeabi_dcmpgt>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d163      	bne.n	8012d44 <_dtoa_r+0x6e4>
 8012c7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012c80:	2000      	movs	r0, #0
 8012c82:	49a9      	ldr	r1, [pc, #676]	; (8012f28 <_dtoa_r+0x8c8>)
 8012c84:	f7ed fadc 	bl	8000240 <__aeabi_dsub>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	4639      	mov	r1, r7
 8012c90:	f7ed ff00 	bl	8000a94 <__aeabi_dcmplt>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	f43f af1d 	beq.w	8012ad4 <_dtoa_r+0x474>
 8012c9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012c9c:	1e7b      	subs	r3, r7, #1
 8012c9e:	9314      	str	r3, [sp, #80]	; 0x50
 8012ca0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012ca4:	2b30      	cmp	r3, #48	; 0x30
 8012ca6:	d0f8      	beq.n	8012c9a <_dtoa_r+0x63a>
 8012ca8:	46c2      	mov	sl, r8
 8012caa:	e03b      	b.n	8012d24 <_dtoa_r+0x6c4>
 8012cac:	4b9f      	ldr	r3, [pc, #636]	; (8012f2c <_dtoa_r+0x8cc>)
 8012cae:	f7ed fc7f 	bl	80005b0 <__aeabi_dmul>
 8012cb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012cb6:	e7bc      	b.n	8012c32 <_dtoa_r+0x5d2>
 8012cb8:	9f03      	ldr	r7, [sp, #12]
 8012cba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012cbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cc2:	4640      	mov	r0, r8
 8012cc4:	4649      	mov	r1, r9
 8012cc6:	f7ed fd9d 	bl	8000804 <__aeabi_ddiv>
 8012cca:	f7ed ff21 	bl	8000b10 <__aeabi_d2iz>
 8012cce:	4604      	mov	r4, r0
 8012cd0:	f7ed fc04 	bl	80004dc <__aeabi_i2d>
 8012cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cd8:	f7ed fc6a 	bl	80005b0 <__aeabi_dmul>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	460b      	mov	r3, r1
 8012ce0:	4640      	mov	r0, r8
 8012ce2:	4649      	mov	r1, r9
 8012ce4:	f7ed faac 	bl	8000240 <__aeabi_dsub>
 8012ce8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012cec:	f807 6b01 	strb.w	r6, [r7], #1
 8012cf0:	9e03      	ldr	r6, [sp, #12]
 8012cf2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012cf6:	1bbe      	subs	r6, r7, r6
 8012cf8:	45b4      	cmp	ip, r6
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	d136      	bne.n	8012d6e <_dtoa_r+0x70e>
 8012d00:	f7ed faa0 	bl	8000244 <__adddf3>
 8012d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d08:	4680      	mov	r8, r0
 8012d0a:	4689      	mov	r9, r1
 8012d0c:	f7ed fee0 	bl	8000ad0 <__aeabi_dcmpgt>
 8012d10:	bb58      	cbnz	r0, 8012d6a <_dtoa_r+0x70a>
 8012d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d16:	4640      	mov	r0, r8
 8012d18:	4649      	mov	r1, r9
 8012d1a:	f7ed feb1 	bl	8000a80 <__aeabi_dcmpeq>
 8012d1e:	b108      	cbz	r0, 8012d24 <_dtoa_r+0x6c4>
 8012d20:	07e1      	lsls	r1, r4, #31
 8012d22:	d422      	bmi.n	8012d6a <_dtoa_r+0x70a>
 8012d24:	4628      	mov	r0, r5
 8012d26:	4659      	mov	r1, fp
 8012d28:	f000 faf4 	bl	8013314 <_Bfree>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	703b      	strb	r3, [r7, #0]
 8012d30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012d32:	f10a 0001 	add.w	r0, sl, #1
 8012d36:	6018      	str	r0, [r3, #0]
 8012d38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	f43f acde 	beq.w	80126fc <_dtoa_r+0x9c>
 8012d40:	601f      	str	r7, [r3, #0]
 8012d42:	e4db      	b.n	80126fc <_dtoa_r+0x9c>
 8012d44:	4627      	mov	r7, r4
 8012d46:	463b      	mov	r3, r7
 8012d48:	461f      	mov	r7, r3
 8012d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d4e:	2a39      	cmp	r2, #57	; 0x39
 8012d50:	d107      	bne.n	8012d62 <_dtoa_r+0x702>
 8012d52:	9a03      	ldr	r2, [sp, #12]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d1f7      	bne.n	8012d48 <_dtoa_r+0x6e8>
 8012d58:	2230      	movs	r2, #48	; 0x30
 8012d5a:	9903      	ldr	r1, [sp, #12]
 8012d5c:	f108 0801 	add.w	r8, r8, #1
 8012d60:	700a      	strb	r2, [r1, #0]
 8012d62:	781a      	ldrb	r2, [r3, #0]
 8012d64:	3201      	adds	r2, #1
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	e79e      	b.n	8012ca8 <_dtoa_r+0x648>
 8012d6a:	46d0      	mov	r8, sl
 8012d6c:	e7eb      	b.n	8012d46 <_dtoa_r+0x6e6>
 8012d6e:	2200      	movs	r2, #0
 8012d70:	4b6e      	ldr	r3, [pc, #440]	; (8012f2c <_dtoa_r+0x8cc>)
 8012d72:	f7ed fc1d 	bl	80005b0 <__aeabi_dmul>
 8012d76:	2200      	movs	r2, #0
 8012d78:	2300      	movs	r3, #0
 8012d7a:	4680      	mov	r8, r0
 8012d7c:	4689      	mov	r9, r1
 8012d7e:	f7ed fe7f 	bl	8000a80 <__aeabi_dcmpeq>
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d09b      	beq.n	8012cbe <_dtoa_r+0x65e>
 8012d86:	e7cd      	b.n	8012d24 <_dtoa_r+0x6c4>
 8012d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d8a:	2a00      	cmp	r2, #0
 8012d8c:	f000 80d0 	beq.w	8012f30 <_dtoa_r+0x8d0>
 8012d90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012d92:	2a01      	cmp	r2, #1
 8012d94:	f300 80ae 	bgt.w	8012ef4 <_dtoa_r+0x894>
 8012d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d9a:	2a00      	cmp	r2, #0
 8012d9c:	f000 80a6 	beq.w	8012eec <_dtoa_r+0x88c>
 8012da0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012da4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012da6:	9f06      	ldr	r7, [sp, #24]
 8012da8:	9a06      	ldr	r2, [sp, #24]
 8012daa:	2101      	movs	r1, #1
 8012dac:	441a      	add	r2, r3
 8012dae:	9206      	str	r2, [sp, #24]
 8012db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012db2:	4628      	mov	r0, r5
 8012db4:	441a      	add	r2, r3
 8012db6:	9209      	str	r2, [sp, #36]	; 0x24
 8012db8:	f000 fb62 	bl	8013480 <__i2b>
 8012dbc:	4606      	mov	r6, r0
 8012dbe:	2f00      	cmp	r7, #0
 8012dc0:	dd0c      	ble.n	8012ddc <_dtoa_r+0x77c>
 8012dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	dd09      	ble.n	8012ddc <_dtoa_r+0x77c>
 8012dc8:	42bb      	cmp	r3, r7
 8012dca:	bfa8      	it	ge
 8012dcc:	463b      	movge	r3, r7
 8012dce:	9a06      	ldr	r2, [sp, #24]
 8012dd0:	1aff      	subs	r7, r7, r3
 8012dd2:	1ad2      	subs	r2, r2, r3
 8012dd4:	9206      	str	r2, [sp, #24]
 8012dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dd8:	1ad3      	subs	r3, r2, r3
 8012dda:	9309      	str	r3, [sp, #36]	; 0x24
 8012ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dde:	b1f3      	cbz	r3, 8012e1e <_dtoa_r+0x7be>
 8012de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f000 80a8 	beq.w	8012f38 <_dtoa_r+0x8d8>
 8012de8:	2c00      	cmp	r4, #0
 8012dea:	dd10      	ble.n	8012e0e <_dtoa_r+0x7ae>
 8012dec:	4631      	mov	r1, r6
 8012dee:	4622      	mov	r2, r4
 8012df0:	4628      	mov	r0, r5
 8012df2:	f000 fc03 	bl	80135fc <__pow5mult>
 8012df6:	465a      	mov	r2, fp
 8012df8:	4601      	mov	r1, r0
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f000 fb55 	bl	80134ac <__multiply>
 8012e02:	4680      	mov	r8, r0
 8012e04:	4659      	mov	r1, fp
 8012e06:	4628      	mov	r0, r5
 8012e08:	f000 fa84 	bl	8013314 <_Bfree>
 8012e0c:	46c3      	mov	fp, r8
 8012e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e10:	1b1a      	subs	r2, r3, r4
 8012e12:	d004      	beq.n	8012e1e <_dtoa_r+0x7be>
 8012e14:	4659      	mov	r1, fp
 8012e16:	4628      	mov	r0, r5
 8012e18:	f000 fbf0 	bl	80135fc <__pow5mult>
 8012e1c:	4683      	mov	fp, r0
 8012e1e:	2101      	movs	r1, #1
 8012e20:	4628      	mov	r0, r5
 8012e22:	f000 fb2d 	bl	8013480 <__i2b>
 8012e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e28:	4604      	mov	r4, r0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f340 8086 	ble.w	8012f3c <_dtoa_r+0x8dc>
 8012e30:	461a      	mov	r2, r3
 8012e32:	4601      	mov	r1, r0
 8012e34:	4628      	mov	r0, r5
 8012e36:	f000 fbe1 	bl	80135fc <__pow5mult>
 8012e3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e3c:	4604      	mov	r4, r0
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	dd7f      	ble.n	8012f42 <_dtoa_r+0x8e2>
 8012e42:	f04f 0800 	mov.w	r8, #0
 8012e46:	6923      	ldr	r3, [r4, #16]
 8012e48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e4c:	6918      	ldr	r0, [r3, #16]
 8012e4e:	f000 fac9 	bl	80133e4 <__hi0bits>
 8012e52:	f1c0 0020 	rsb	r0, r0, #32
 8012e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e58:	4418      	add	r0, r3
 8012e5a:	f010 001f 	ands.w	r0, r0, #31
 8012e5e:	f000 8092 	beq.w	8012f86 <_dtoa_r+0x926>
 8012e62:	f1c0 0320 	rsb	r3, r0, #32
 8012e66:	2b04      	cmp	r3, #4
 8012e68:	f340 808a 	ble.w	8012f80 <_dtoa_r+0x920>
 8012e6c:	f1c0 001c 	rsb	r0, r0, #28
 8012e70:	9b06      	ldr	r3, [sp, #24]
 8012e72:	4407      	add	r7, r0
 8012e74:	4403      	add	r3, r0
 8012e76:	9306      	str	r3, [sp, #24]
 8012e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e7a:	4403      	add	r3, r0
 8012e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e7e:	9b06      	ldr	r3, [sp, #24]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	dd05      	ble.n	8012e90 <_dtoa_r+0x830>
 8012e84:	4659      	mov	r1, fp
 8012e86:	461a      	mov	r2, r3
 8012e88:	4628      	mov	r0, r5
 8012e8a:	f000 fc11 	bl	80136b0 <__lshift>
 8012e8e:	4683      	mov	fp, r0
 8012e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	dd05      	ble.n	8012ea2 <_dtoa_r+0x842>
 8012e96:	4621      	mov	r1, r4
 8012e98:	461a      	mov	r2, r3
 8012e9a:	4628      	mov	r0, r5
 8012e9c:	f000 fc08 	bl	80136b0 <__lshift>
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d070      	beq.n	8012f8a <_dtoa_r+0x92a>
 8012ea8:	4621      	mov	r1, r4
 8012eaa:	4658      	mov	r0, fp
 8012eac:	f000 fc70 	bl	8013790 <__mcmp>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	da6a      	bge.n	8012f8a <_dtoa_r+0x92a>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	4659      	mov	r1, fp
 8012eb8:	220a      	movs	r2, #10
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f000 fa4c 	bl	8013358 <__multadd>
 8012ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ec2:	4683      	mov	fp, r0
 8012ec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	f000 8194 	beq.w	80131f6 <_dtoa_r+0xb96>
 8012ece:	4631      	mov	r1, r6
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	220a      	movs	r2, #10
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	f000 fa3f 	bl	8013358 <__multadd>
 8012eda:	f1b9 0f00 	cmp.w	r9, #0
 8012ede:	4606      	mov	r6, r0
 8012ee0:	f300 8093 	bgt.w	801300a <_dtoa_r+0x9aa>
 8012ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ee6:	2b02      	cmp	r3, #2
 8012ee8:	dc57      	bgt.n	8012f9a <_dtoa_r+0x93a>
 8012eea:	e08e      	b.n	801300a <_dtoa_r+0x9aa>
 8012eec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ef2:	e757      	b.n	8012da4 <_dtoa_r+0x744>
 8012ef4:	9b08      	ldr	r3, [sp, #32]
 8012ef6:	1e5c      	subs	r4, r3, #1
 8012ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012efa:	42a3      	cmp	r3, r4
 8012efc:	bfb7      	itett	lt
 8012efe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012f00:	1b1c      	subge	r4, r3, r4
 8012f02:	1ae2      	sublt	r2, r4, r3
 8012f04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012f06:	bfbe      	ittt	lt
 8012f08:	940a      	strlt	r4, [sp, #40]	; 0x28
 8012f0a:	189b      	addlt	r3, r3, r2
 8012f0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012f0e:	9b08      	ldr	r3, [sp, #32]
 8012f10:	bfb8      	it	lt
 8012f12:	2400      	movlt	r4, #0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	bfbb      	ittet	lt
 8012f18:	9b06      	ldrlt	r3, [sp, #24]
 8012f1a:	9a08      	ldrlt	r2, [sp, #32]
 8012f1c:	9f06      	ldrge	r7, [sp, #24]
 8012f1e:	1a9f      	sublt	r7, r3, r2
 8012f20:	bfac      	ite	ge
 8012f22:	9b08      	ldrge	r3, [sp, #32]
 8012f24:	2300      	movlt	r3, #0
 8012f26:	e73f      	b.n	8012da8 <_dtoa_r+0x748>
 8012f28:	3fe00000 	.word	0x3fe00000
 8012f2c:	40240000 	.word	0x40240000
 8012f30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012f32:	9f06      	ldr	r7, [sp, #24]
 8012f34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012f36:	e742      	b.n	8012dbe <_dtoa_r+0x75e>
 8012f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f3a:	e76b      	b.n	8012e14 <_dtoa_r+0x7b4>
 8012f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	dc19      	bgt.n	8012f76 <_dtoa_r+0x916>
 8012f42:	9b04      	ldr	r3, [sp, #16]
 8012f44:	b9bb      	cbnz	r3, 8012f76 <_dtoa_r+0x916>
 8012f46:	9b05      	ldr	r3, [sp, #20]
 8012f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f4c:	b99b      	cbnz	r3, 8012f76 <_dtoa_r+0x916>
 8012f4e:	9b05      	ldr	r3, [sp, #20]
 8012f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f54:	0d1b      	lsrs	r3, r3, #20
 8012f56:	051b      	lsls	r3, r3, #20
 8012f58:	b183      	cbz	r3, 8012f7c <_dtoa_r+0x91c>
 8012f5a:	f04f 0801 	mov.w	r8, #1
 8012f5e:	9b06      	ldr	r3, [sp, #24]
 8012f60:	3301      	adds	r3, #1
 8012f62:	9306      	str	r3, [sp, #24]
 8012f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f66:	3301      	adds	r3, #1
 8012f68:	9309      	str	r3, [sp, #36]	; 0x24
 8012f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f47f af6a 	bne.w	8012e46 <_dtoa_r+0x7e6>
 8012f72:	2001      	movs	r0, #1
 8012f74:	e76f      	b.n	8012e56 <_dtoa_r+0x7f6>
 8012f76:	f04f 0800 	mov.w	r8, #0
 8012f7a:	e7f6      	b.n	8012f6a <_dtoa_r+0x90a>
 8012f7c:	4698      	mov	r8, r3
 8012f7e:	e7f4      	b.n	8012f6a <_dtoa_r+0x90a>
 8012f80:	f43f af7d 	beq.w	8012e7e <_dtoa_r+0x81e>
 8012f84:	4618      	mov	r0, r3
 8012f86:	301c      	adds	r0, #28
 8012f88:	e772      	b.n	8012e70 <_dtoa_r+0x810>
 8012f8a:	9b08      	ldr	r3, [sp, #32]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	dc36      	bgt.n	8012ffe <_dtoa_r+0x99e>
 8012f90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f92:	2b02      	cmp	r3, #2
 8012f94:	dd33      	ble.n	8012ffe <_dtoa_r+0x99e>
 8012f96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f9a:	f1b9 0f00 	cmp.w	r9, #0
 8012f9e:	d10d      	bne.n	8012fbc <_dtoa_r+0x95c>
 8012fa0:	4621      	mov	r1, r4
 8012fa2:	464b      	mov	r3, r9
 8012fa4:	2205      	movs	r2, #5
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f000 f9d6 	bl	8013358 <__multadd>
 8012fac:	4601      	mov	r1, r0
 8012fae:	4604      	mov	r4, r0
 8012fb0:	4658      	mov	r0, fp
 8012fb2:	f000 fbed 	bl	8013790 <__mcmp>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	f73f adb8 	bgt.w	8012b2c <_dtoa_r+0x4cc>
 8012fbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012fbe:	9f03      	ldr	r7, [sp, #12]
 8012fc0:	ea6f 0a03 	mvn.w	sl, r3
 8012fc4:	f04f 0800 	mov.w	r8, #0
 8012fc8:	4621      	mov	r1, r4
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f000 f9a2 	bl	8013314 <_Bfree>
 8012fd0:	2e00      	cmp	r6, #0
 8012fd2:	f43f aea7 	beq.w	8012d24 <_dtoa_r+0x6c4>
 8012fd6:	f1b8 0f00 	cmp.w	r8, #0
 8012fda:	d005      	beq.n	8012fe8 <_dtoa_r+0x988>
 8012fdc:	45b0      	cmp	r8, r6
 8012fde:	d003      	beq.n	8012fe8 <_dtoa_r+0x988>
 8012fe0:	4641      	mov	r1, r8
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	f000 f996 	bl	8013314 <_Bfree>
 8012fe8:	4631      	mov	r1, r6
 8012fea:	4628      	mov	r0, r5
 8012fec:	f000 f992 	bl	8013314 <_Bfree>
 8012ff0:	e698      	b.n	8012d24 <_dtoa_r+0x6c4>
 8012ff2:	2400      	movs	r4, #0
 8012ff4:	4626      	mov	r6, r4
 8012ff6:	e7e1      	b.n	8012fbc <_dtoa_r+0x95c>
 8012ff8:	46c2      	mov	sl, r8
 8012ffa:	4626      	mov	r6, r4
 8012ffc:	e596      	b.n	8012b2c <_dtoa_r+0x4cc>
 8012ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013004:	2b00      	cmp	r3, #0
 8013006:	f000 80fd 	beq.w	8013204 <_dtoa_r+0xba4>
 801300a:	2f00      	cmp	r7, #0
 801300c:	dd05      	ble.n	801301a <_dtoa_r+0x9ba>
 801300e:	4631      	mov	r1, r6
 8013010:	463a      	mov	r2, r7
 8013012:	4628      	mov	r0, r5
 8013014:	f000 fb4c 	bl	80136b0 <__lshift>
 8013018:	4606      	mov	r6, r0
 801301a:	f1b8 0f00 	cmp.w	r8, #0
 801301e:	d05c      	beq.n	80130da <_dtoa_r+0xa7a>
 8013020:	4628      	mov	r0, r5
 8013022:	6871      	ldr	r1, [r6, #4]
 8013024:	f000 f936 	bl	8013294 <_Balloc>
 8013028:	4607      	mov	r7, r0
 801302a:	b928      	cbnz	r0, 8013038 <_dtoa_r+0x9d8>
 801302c:	4602      	mov	r2, r0
 801302e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013032:	4b7f      	ldr	r3, [pc, #508]	; (8013230 <_dtoa_r+0xbd0>)
 8013034:	f7ff bb28 	b.w	8012688 <_dtoa_r+0x28>
 8013038:	6932      	ldr	r2, [r6, #16]
 801303a:	f106 010c 	add.w	r1, r6, #12
 801303e:	3202      	adds	r2, #2
 8013040:	0092      	lsls	r2, r2, #2
 8013042:	300c      	adds	r0, #12
 8013044:	f000 f90c 	bl	8013260 <memcpy>
 8013048:	2201      	movs	r2, #1
 801304a:	4639      	mov	r1, r7
 801304c:	4628      	mov	r0, r5
 801304e:	f000 fb2f 	bl	80136b0 <__lshift>
 8013052:	46b0      	mov	r8, r6
 8013054:	4606      	mov	r6, r0
 8013056:	9b03      	ldr	r3, [sp, #12]
 8013058:	3301      	adds	r3, #1
 801305a:	9308      	str	r3, [sp, #32]
 801305c:	9b03      	ldr	r3, [sp, #12]
 801305e:	444b      	add	r3, r9
 8013060:	930a      	str	r3, [sp, #40]	; 0x28
 8013062:	9b04      	ldr	r3, [sp, #16]
 8013064:	f003 0301 	and.w	r3, r3, #1
 8013068:	9309      	str	r3, [sp, #36]	; 0x24
 801306a:	9b08      	ldr	r3, [sp, #32]
 801306c:	4621      	mov	r1, r4
 801306e:	3b01      	subs	r3, #1
 8013070:	4658      	mov	r0, fp
 8013072:	9304      	str	r3, [sp, #16]
 8013074:	f7ff fa68 	bl	8012548 <quorem>
 8013078:	4603      	mov	r3, r0
 801307a:	4641      	mov	r1, r8
 801307c:	3330      	adds	r3, #48	; 0x30
 801307e:	9006      	str	r0, [sp, #24]
 8013080:	4658      	mov	r0, fp
 8013082:	930b      	str	r3, [sp, #44]	; 0x2c
 8013084:	f000 fb84 	bl	8013790 <__mcmp>
 8013088:	4632      	mov	r2, r6
 801308a:	4681      	mov	r9, r0
 801308c:	4621      	mov	r1, r4
 801308e:	4628      	mov	r0, r5
 8013090:	f000 fb9a 	bl	80137c8 <__mdiff>
 8013094:	68c2      	ldr	r2, [r0, #12]
 8013096:	4607      	mov	r7, r0
 8013098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801309a:	bb02      	cbnz	r2, 80130de <_dtoa_r+0xa7e>
 801309c:	4601      	mov	r1, r0
 801309e:	4658      	mov	r0, fp
 80130a0:	f000 fb76 	bl	8013790 <__mcmp>
 80130a4:	4602      	mov	r2, r0
 80130a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130a8:	4639      	mov	r1, r7
 80130aa:	4628      	mov	r0, r5
 80130ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80130b0:	f000 f930 	bl	8013314 <_Bfree>
 80130b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80130b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130b8:	9f08      	ldr	r7, [sp, #32]
 80130ba:	ea43 0102 	orr.w	r1, r3, r2
 80130be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130c0:	430b      	orrs	r3, r1
 80130c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130c4:	d10d      	bne.n	80130e2 <_dtoa_r+0xa82>
 80130c6:	2b39      	cmp	r3, #57	; 0x39
 80130c8:	d029      	beq.n	801311e <_dtoa_r+0xabe>
 80130ca:	f1b9 0f00 	cmp.w	r9, #0
 80130ce:	dd01      	ble.n	80130d4 <_dtoa_r+0xa74>
 80130d0:	9b06      	ldr	r3, [sp, #24]
 80130d2:	3331      	adds	r3, #49	; 0x31
 80130d4:	9a04      	ldr	r2, [sp, #16]
 80130d6:	7013      	strb	r3, [r2, #0]
 80130d8:	e776      	b.n	8012fc8 <_dtoa_r+0x968>
 80130da:	4630      	mov	r0, r6
 80130dc:	e7b9      	b.n	8013052 <_dtoa_r+0x9f2>
 80130de:	2201      	movs	r2, #1
 80130e0:	e7e2      	b.n	80130a8 <_dtoa_r+0xa48>
 80130e2:	f1b9 0f00 	cmp.w	r9, #0
 80130e6:	db06      	blt.n	80130f6 <_dtoa_r+0xa96>
 80130e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80130ea:	ea41 0909 	orr.w	r9, r1, r9
 80130ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130f0:	ea59 0101 	orrs.w	r1, r9, r1
 80130f4:	d120      	bne.n	8013138 <_dtoa_r+0xad8>
 80130f6:	2a00      	cmp	r2, #0
 80130f8:	ddec      	ble.n	80130d4 <_dtoa_r+0xa74>
 80130fa:	4659      	mov	r1, fp
 80130fc:	2201      	movs	r2, #1
 80130fe:	4628      	mov	r0, r5
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	f000 fad5 	bl	80136b0 <__lshift>
 8013106:	4621      	mov	r1, r4
 8013108:	4683      	mov	fp, r0
 801310a:	f000 fb41 	bl	8013790 <__mcmp>
 801310e:	2800      	cmp	r0, #0
 8013110:	9b08      	ldr	r3, [sp, #32]
 8013112:	dc02      	bgt.n	801311a <_dtoa_r+0xaba>
 8013114:	d1de      	bne.n	80130d4 <_dtoa_r+0xa74>
 8013116:	07da      	lsls	r2, r3, #31
 8013118:	d5dc      	bpl.n	80130d4 <_dtoa_r+0xa74>
 801311a:	2b39      	cmp	r3, #57	; 0x39
 801311c:	d1d8      	bne.n	80130d0 <_dtoa_r+0xa70>
 801311e:	2339      	movs	r3, #57	; 0x39
 8013120:	9a04      	ldr	r2, [sp, #16]
 8013122:	7013      	strb	r3, [r2, #0]
 8013124:	463b      	mov	r3, r7
 8013126:	461f      	mov	r7, r3
 8013128:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801312c:	3b01      	subs	r3, #1
 801312e:	2a39      	cmp	r2, #57	; 0x39
 8013130:	d050      	beq.n	80131d4 <_dtoa_r+0xb74>
 8013132:	3201      	adds	r2, #1
 8013134:	701a      	strb	r2, [r3, #0]
 8013136:	e747      	b.n	8012fc8 <_dtoa_r+0x968>
 8013138:	2a00      	cmp	r2, #0
 801313a:	dd03      	ble.n	8013144 <_dtoa_r+0xae4>
 801313c:	2b39      	cmp	r3, #57	; 0x39
 801313e:	d0ee      	beq.n	801311e <_dtoa_r+0xabe>
 8013140:	3301      	adds	r3, #1
 8013142:	e7c7      	b.n	80130d4 <_dtoa_r+0xa74>
 8013144:	9a08      	ldr	r2, [sp, #32]
 8013146:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013148:	f802 3c01 	strb.w	r3, [r2, #-1]
 801314c:	428a      	cmp	r2, r1
 801314e:	d02a      	beq.n	80131a6 <_dtoa_r+0xb46>
 8013150:	4659      	mov	r1, fp
 8013152:	2300      	movs	r3, #0
 8013154:	220a      	movs	r2, #10
 8013156:	4628      	mov	r0, r5
 8013158:	f000 f8fe 	bl	8013358 <__multadd>
 801315c:	45b0      	cmp	r8, r6
 801315e:	4683      	mov	fp, r0
 8013160:	f04f 0300 	mov.w	r3, #0
 8013164:	f04f 020a 	mov.w	r2, #10
 8013168:	4641      	mov	r1, r8
 801316a:	4628      	mov	r0, r5
 801316c:	d107      	bne.n	801317e <_dtoa_r+0xb1e>
 801316e:	f000 f8f3 	bl	8013358 <__multadd>
 8013172:	4680      	mov	r8, r0
 8013174:	4606      	mov	r6, r0
 8013176:	9b08      	ldr	r3, [sp, #32]
 8013178:	3301      	adds	r3, #1
 801317a:	9308      	str	r3, [sp, #32]
 801317c:	e775      	b.n	801306a <_dtoa_r+0xa0a>
 801317e:	f000 f8eb 	bl	8013358 <__multadd>
 8013182:	4631      	mov	r1, r6
 8013184:	4680      	mov	r8, r0
 8013186:	2300      	movs	r3, #0
 8013188:	220a      	movs	r2, #10
 801318a:	4628      	mov	r0, r5
 801318c:	f000 f8e4 	bl	8013358 <__multadd>
 8013190:	4606      	mov	r6, r0
 8013192:	e7f0      	b.n	8013176 <_dtoa_r+0xb16>
 8013194:	f1b9 0f00 	cmp.w	r9, #0
 8013198:	bfcc      	ite	gt
 801319a:	464f      	movgt	r7, r9
 801319c:	2701      	movle	r7, #1
 801319e:	f04f 0800 	mov.w	r8, #0
 80131a2:	9a03      	ldr	r2, [sp, #12]
 80131a4:	4417      	add	r7, r2
 80131a6:	4659      	mov	r1, fp
 80131a8:	2201      	movs	r2, #1
 80131aa:	4628      	mov	r0, r5
 80131ac:	9308      	str	r3, [sp, #32]
 80131ae:	f000 fa7f 	bl	80136b0 <__lshift>
 80131b2:	4621      	mov	r1, r4
 80131b4:	4683      	mov	fp, r0
 80131b6:	f000 faeb 	bl	8013790 <__mcmp>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	dcb2      	bgt.n	8013124 <_dtoa_r+0xac4>
 80131be:	d102      	bne.n	80131c6 <_dtoa_r+0xb66>
 80131c0:	9b08      	ldr	r3, [sp, #32]
 80131c2:	07db      	lsls	r3, r3, #31
 80131c4:	d4ae      	bmi.n	8013124 <_dtoa_r+0xac4>
 80131c6:	463b      	mov	r3, r7
 80131c8:	461f      	mov	r7, r3
 80131ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131ce:	2a30      	cmp	r2, #48	; 0x30
 80131d0:	d0fa      	beq.n	80131c8 <_dtoa_r+0xb68>
 80131d2:	e6f9      	b.n	8012fc8 <_dtoa_r+0x968>
 80131d4:	9a03      	ldr	r2, [sp, #12]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d1a5      	bne.n	8013126 <_dtoa_r+0xac6>
 80131da:	2331      	movs	r3, #49	; 0x31
 80131dc:	f10a 0a01 	add.w	sl, sl, #1
 80131e0:	e779      	b.n	80130d6 <_dtoa_r+0xa76>
 80131e2:	4b14      	ldr	r3, [pc, #80]	; (8013234 <_dtoa_r+0xbd4>)
 80131e4:	f7ff baa8 	b.w	8012738 <_dtoa_r+0xd8>
 80131e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	f47f aa81 	bne.w	80126f2 <_dtoa_r+0x92>
 80131f0:	4b11      	ldr	r3, [pc, #68]	; (8013238 <_dtoa_r+0xbd8>)
 80131f2:	f7ff baa1 	b.w	8012738 <_dtoa_r+0xd8>
 80131f6:	f1b9 0f00 	cmp.w	r9, #0
 80131fa:	dc03      	bgt.n	8013204 <_dtoa_r+0xba4>
 80131fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80131fe:	2b02      	cmp	r3, #2
 8013200:	f73f aecb 	bgt.w	8012f9a <_dtoa_r+0x93a>
 8013204:	9f03      	ldr	r7, [sp, #12]
 8013206:	4621      	mov	r1, r4
 8013208:	4658      	mov	r0, fp
 801320a:	f7ff f99d 	bl	8012548 <quorem>
 801320e:	9a03      	ldr	r2, [sp, #12]
 8013210:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013214:	f807 3b01 	strb.w	r3, [r7], #1
 8013218:	1aba      	subs	r2, r7, r2
 801321a:	4591      	cmp	r9, r2
 801321c:	ddba      	ble.n	8013194 <_dtoa_r+0xb34>
 801321e:	4659      	mov	r1, fp
 8013220:	2300      	movs	r3, #0
 8013222:	220a      	movs	r2, #10
 8013224:	4628      	mov	r0, r5
 8013226:	f000 f897 	bl	8013358 <__multadd>
 801322a:	4683      	mov	fp, r0
 801322c:	e7eb      	b.n	8013206 <_dtoa_r+0xba6>
 801322e:	bf00      	nop
 8013230:	0802df6f 	.word	0x0802df6f
 8013234:	0802decc 	.word	0x0802decc
 8013238:	0802def0 	.word	0x0802def0

0801323c <_localeconv_r>:
 801323c:	4800      	ldr	r0, [pc, #0]	; (8013240 <_localeconv_r+0x4>)
 801323e:	4770      	bx	lr
 8013240:	200002bc 	.word	0x200002bc

08013244 <memchr>:
 8013244:	4603      	mov	r3, r0
 8013246:	b510      	push	{r4, lr}
 8013248:	b2c9      	uxtb	r1, r1
 801324a:	4402      	add	r2, r0
 801324c:	4293      	cmp	r3, r2
 801324e:	4618      	mov	r0, r3
 8013250:	d101      	bne.n	8013256 <memchr+0x12>
 8013252:	2000      	movs	r0, #0
 8013254:	e003      	b.n	801325e <memchr+0x1a>
 8013256:	7804      	ldrb	r4, [r0, #0]
 8013258:	3301      	adds	r3, #1
 801325a:	428c      	cmp	r4, r1
 801325c:	d1f6      	bne.n	801324c <memchr+0x8>
 801325e:	bd10      	pop	{r4, pc}

08013260 <memcpy>:
 8013260:	440a      	add	r2, r1
 8013262:	4291      	cmp	r1, r2
 8013264:	f100 33ff 	add.w	r3, r0, #4294967295
 8013268:	d100      	bne.n	801326c <memcpy+0xc>
 801326a:	4770      	bx	lr
 801326c:	b510      	push	{r4, lr}
 801326e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013272:	4291      	cmp	r1, r2
 8013274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013278:	d1f9      	bne.n	801326e <memcpy+0xe>
 801327a:	bd10      	pop	{r4, pc}

0801327c <__malloc_lock>:
 801327c:	4801      	ldr	r0, [pc, #4]	; (8013284 <__malloc_lock+0x8>)
 801327e:	f000 bd2c 	b.w	8013cda <__retarget_lock_acquire_recursive>
 8013282:	bf00      	nop
 8013284:	2000166c 	.word	0x2000166c

08013288 <__malloc_unlock>:
 8013288:	4801      	ldr	r0, [pc, #4]	; (8013290 <__malloc_unlock+0x8>)
 801328a:	f000 bd27 	b.w	8013cdc <__retarget_lock_release_recursive>
 801328e:	bf00      	nop
 8013290:	2000166c 	.word	0x2000166c

08013294 <_Balloc>:
 8013294:	b570      	push	{r4, r5, r6, lr}
 8013296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013298:	4604      	mov	r4, r0
 801329a:	460d      	mov	r5, r1
 801329c:	b976      	cbnz	r6, 80132bc <_Balloc+0x28>
 801329e:	2010      	movs	r0, #16
 80132a0:	f7fe fbb4 	bl	8011a0c <malloc>
 80132a4:	4602      	mov	r2, r0
 80132a6:	6260      	str	r0, [r4, #36]	; 0x24
 80132a8:	b920      	cbnz	r0, 80132b4 <_Balloc+0x20>
 80132aa:	2166      	movs	r1, #102	; 0x66
 80132ac:	4b17      	ldr	r3, [pc, #92]	; (801330c <_Balloc+0x78>)
 80132ae:	4818      	ldr	r0, [pc, #96]	; (8013310 <_Balloc+0x7c>)
 80132b0:	f000 fce2 	bl	8013c78 <__assert_func>
 80132b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132b8:	6006      	str	r6, [r0, #0]
 80132ba:	60c6      	str	r6, [r0, #12]
 80132bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132be:	68f3      	ldr	r3, [r6, #12]
 80132c0:	b183      	cbz	r3, 80132e4 <_Balloc+0x50>
 80132c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132ca:	b9b8      	cbnz	r0, 80132fc <_Balloc+0x68>
 80132cc:	2101      	movs	r1, #1
 80132ce:	fa01 f605 	lsl.w	r6, r1, r5
 80132d2:	1d72      	adds	r2, r6, #5
 80132d4:	4620      	mov	r0, r4
 80132d6:	0092      	lsls	r2, r2, #2
 80132d8:	f000 fb5e 	bl	8013998 <_calloc_r>
 80132dc:	b160      	cbz	r0, 80132f8 <_Balloc+0x64>
 80132de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132e2:	e00e      	b.n	8013302 <_Balloc+0x6e>
 80132e4:	2221      	movs	r2, #33	; 0x21
 80132e6:	2104      	movs	r1, #4
 80132e8:	4620      	mov	r0, r4
 80132ea:	f000 fb55 	bl	8013998 <_calloc_r>
 80132ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132f0:	60f0      	str	r0, [r6, #12]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d1e4      	bne.n	80132c2 <_Balloc+0x2e>
 80132f8:	2000      	movs	r0, #0
 80132fa:	bd70      	pop	{r4, r5, r6, pc}
 80132fc:	6802      	ldr	r2, [r0, #0]
 80132fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013302:	2300      	movs	r3, #0
 8013304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013308:	e7f7      	b.n	80132fa <_Balloc+0x66>
 801330a:	bf00      	nop
 801330c:	0802defd 	.word	0x0802defd
 8013310:	0802df80 	.word	0x0802df80

08013314 <_Bfree>:
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013318:	4605      	mov	r5, r0
 801331a:	460c      	mov	r4, r1
 801331c:	b976      	cbnz	r6, 801333c <_Bfree+0x28>
 801331e:	2010      	movs	r0, #16
 8013320:	f7fe fb74 	bl	8011a0c <malloc>
 8013324:	4602      	mov	r2, r0
 8013326:	6268      	str	r0, [r5, #36]	; 0x24
 8013328:	b920      	cbnz	r0, 8013334 <_Bfree+0x20>
 801332a:	218a      	movs	r1, #138	; 0x8a
 801332c:	4b08      	ldr	r3, [pc, #32]	; (8013350 <_Bfree+0x3c>)
 801332e:	4809      	ldr	r0, [pc, #36]	; (8013354 <_Bfree+0x40>)
 8013330:	f000 fca2 	bl	8013c78 <__assert_func>
 8013334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013338:	6006      	str	r6, [r0, #0]
 801333a:	60c6      	str	r6, [r0, #12]
 801333c:	b13c      	cbz	r4, 801334e <_Bfree+0x3a>
 801333e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013340:	6862      	ldr	r2, [r4, #4]
 8013342:	68db      	ldr	r3, [r3, #12]
 8013344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013348:	6021      	str	r1, [r4, #0]
 801334a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801334e:	bd70      	pop	{r4, r5, r6, pc}
 8013350:	0802defd 	.word	0x0802defd
 8013354:	0802df80 	.word	0x0802df80

08013358 <__multadd>:
 8013358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801335c:	4607      	mov	r7, r0
 801335e:	460c      	mov	r4, r1
 8013360:	461e      	mov	r6, r3
 8013362:	2000      	movs	r0, #0
 8013364:	690d      	ldr	r5, [r1, #16]
 8013366:	f101 0c14 	add.w	ip, r1, #20
 801336a:	f8dc 3000 	ldr.w	r3, [ip]
 801336e:	3001      	adds	r0, #1
 8013370:	b299      	uxth	r1, r3
 8013372:	fb02 6101 	mla	r1, r2, r1, r6
 8013376:	0c1e      	lsrs	r6, r3, #16
 8013378:	0c0b      	lsrs	r3, r1, #16
 801337a:	fb02 3306 	mla	r3, r2, r6, r3
 801337e:	b289      	uxth	r1, r1
 8013380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013384:	4285      	cmp	r5, r0
 8013386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801338a:	f84c 1b04 	str.w	r1, [ip], #4
 801338e:	dcec      	bgt.n	801336a <__multadd+0x12>
 8013390:	b30e      	cbz	r6, 80133d6 <__multadd+0x7e>
 8013392:	68a3      	ldr	r3, [r4, #8]
 8013394:	42ab      	cmp	r3, r5
 8013396:	dc19      	bgt.n	80133cc <__multadd+0x74>
 8013398:	6861      	ldr	r1, [r4, #4]
 801339a:	4638      	mov	r0, r7
 801339c:	3101      	adds	r1, #1
 801339e:	f7ff ff79 	bl	8013294 <_Balloc>
 80133a2:	4680      	mov	r8, r0
 80133a4:	b928      	cbnz	r0, 80133b2 <__multadd+0x5a>
 80133a6:	4602      	mov	r2, r0
 80133a8:	21b5      	movs	r1, #181	; 0xb5
 80133aa:	4b0c      	ldr	r3, [pc, #48]	; (80133dc <__multadd+0x84>)
 80133ac:	480c      	ldr	r0, [pc, #48]	; (80133e0 <__multadd+0x88>)
 80133ae:	f000 fc63 	bl	8013c78 <__assert_func>
 80133b2:	6922      	ldr	r2, [r4, #16]
 80133b4:	f104 010c 	add.w	r1, r4, #12
 80133b8:	3202      	adds	r2, #2
 80133ba:	0092      	lsls	r2, r2, #2
 80133bc:	300c      	adds	r0, #12
 80133be:	f7ff ff4f 	bl	8013260 <memcpy>
 80133c2:	4621      	mov	r1, r4
 80133c4:	4638      	mov	r0, r7
 80133c6:	f7ff ffa5 	bl	8013314 <_Bfree>
 80133ca:	4644      	mov	r4, r8
 80133cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133d0:	3501      	adds	r5, #1
 80133d2:	615e      	str	r6, [r3, #20]
 80133d4:	6125      	str	r5, [r4, #16]
 80133d6:	4620      	mov	r0, r4
 80133d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133dc:	0802df6f 	.word	0x0802df6f
 80133e0:	0802df80 	.word	0x0802df80

080133e4 <__hi0bits>:
 80133e4:	0c02      	lsrs	r2, r0, #16
 80133e6:	0412      	lsls	r2, r2, #16
 80133e8:	4603      	mov	r3, r0
 80133ea:	b9ca      	cbnz	r2, 8013420 <__hi0bits+0x3c>
 80133ec:	0403      	lsls	r3, r0, #16
 80133ee:	2010      	movs	r0, #16
 80133f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80133f4:	bf04      	itt	eq
 80133f6:	021b      	lsleq	r3, r3, #8
 80133f8:	3008      	addeq	r0, #8
 80133fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80133fe:	bf04      	itt	eq
 8013400:	011b      	lsleq	r3, r3, #4
 8013402:	3004      	addeq	r0, #4
 8013404:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013408:	bf04      	itt	eq
 801340a:	009b      	lsleq	r3, r3, #2
 801340c:	3002      	addeq	r0, #2
 801340e:	2b00      	cmp	r3, #0
 8013410:	db05      	blt.n	801341e <__hi0bits+0x3a>
 8013412:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013416:	f100 0001 	add.w	r0, r0, #1
 801341a:	bf08      	it	eq
 801341c:	2020      	moveq	r0, #32
 801341e:	4770      	bx	lr
 8013420:	2000      	movs	r0, #0
 8013422:	e7e5      	b.n	80133f0 <__hi0bits+0xc>

08013424 <__lo0bits>:
 8013424:	6803      	ldr	r3, [r0, #0]
 8013426:	4602      	mov	r2, r0
 8013428:	f013 0007 	ands.w	r0, r3, #7
 801342c:	d00b      	beq.n	8013446 <__lo0bits+0x22>
 801342e:	07d9      	lsls	r1, r3, #31
 8013430:	d421      	bmi.n	8013476 <__lo0bits+0x52>
 8013432:	0798      	lsls	r0, r3, #30
 8013434:	bf49      	itett	mi
 8013436:	085b      	lsrmi	r3, r3, #1
 8013438:	089b      	lsrpl	r3, r3, #2
 801343a:	2001      	movmi	r0, #1
 801343c:	6013      	strmi	r3, [r2, #0]
 801343e:	bf5c      	itt	pl
 8013440:	2002      	movpl	r0, #2
 8013442:	6013      	strpl	r3, [r2, #0]
 8013444:	4770      	bx	lr
 8013446:	b299      	uxth	r1, r3
 8013448:	b909      	cbnz	r1, 801344e <__lo0bits+0x2a>
 801344a:	2010      	movs	r0, #16
 801344c:	0c1b      	lsrs	r3, r3, #16
 801344e:	b2d9      	uxtb	r1, r3
 8013450:	b909      	cbnz	r1, 8013456 <__lo0bits+0x32>
 8013452:	3008      	adds	r0, #8
 8013454:	0a1b      	lsrs	r3, r3, #8
 8013456:	0719      	lsls	r1, r3, #28
 8013458:	bf04      	itt	eq
 801345a:	091b      	lsreq	r3, r3, #4
 801345c:	3004      	addeq	r0, #4
 801345e:	0799      	lsls	r1, r3, #30
 8013460:	bf04      	itt	eq
 8013462:	089b      	lsreq	r3, r3, #2
 8013464:	3002      	addeq	r0, #2
 8013466:	07d9      	lsls	r1, r3, #31
 8013468:	d403      	bmi.n	8013472 <__lo0bits+0x4e>
 801346a:	085b      	lsrs	r3, r3, #1
 801346c:	f100 0001 	add.w	r0, r0, #1
 8013470:	d003      	beq.n	801347a <__lo0bits+0x56>
 8013472:	6013      	str	r3, [r2, #0]
 8013474:	4770      	bx	lr
 8013476:	2000      	movs	r0, #0
 8013478:	4770      	bx	lr
 801347a:	2020      	movs	r0, #32
 801347c:	4770      	bx	lr
	...

08013480 <__i2b>:
 8013480:	b510      	push	{r4, lr}
 8013482:	460c      	mov	r4, r1
 8013484:	2101      	movs	r1, #1
 8013486:	f7ff ff05 	bl	8013294 <_Balloc>
 801348a:	4602      	mov	r2, r0
 801348c:	b928      	cbnz	r0, 801349a <__i2b+0x1a>
 801348e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013492:	4b04      	ldr	r3, [pc, #16]	; (80134a4 <__i2b+0x24>)
 8013494:	4804      	ldr	r0, [pc, #16]	; (80134a8 <__i2b+0x28>)
 8013496:	f000 fbef 	bl	8013c78 <__assert_func>
 801349a:	2301      	movs	r3, #1
 801349c:	6144      	str	r4, [r0, #20]
 801349e:	6103      	str	r3, [r0, #16]
 80134a0:	bd10      	pop	{r4, pc}
 80134a2:	bf00      	nop
 80134a4:	0802df6f 	.word	0x0802df6f
 80134a8:	0802df80 	.word	0x0802df80

080134ac <__multiply>:
 80134ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b0:	4691      	mov	r9, r2
 80134b2:	690a      	ldr	r2, [r1, #16]
 80134b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134b8:	460c      	mov	r4, r1
 80134ba:	429a      	cmp	r2, r3
 80134bc:	bfbe      	ittt	lt
 80134be:	460b      	movlt	r3, r1
 80134c0:	464c      	movlt	r4, r9
 80134c2:	4699      	movlt	r9, r3
 80134c4:	6927      	ldr	r7, [r4, #16]
 80134c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134ca:	68a3      	ldr	r3, [r4, #8]
 80134cc:	6861      	ldr	r1, [r4, #4]
 80134ce:	eb07 060a 	add.w	r6, r7, sl
 80134d2:	42b3      	cmp	r3, r6
 80134d4:	b085      	sub	sp, #20
 80134d6:	bfb8      	it	lt
 80134d8:	3101      	addlt	r1, #1
 80134da:	f7ff fedb 	bl	8013294 <_Balloc>
 80134de:	b930      	cbnz	r0, 80134ee <__multiply+0x42>
 80134e0:	4602      	mov	r2, r0
 80134e2:	f240 115d 	movw	r1, #349	; 0x15d
 80134e6:	4b43      	ldr	r3, [pc, #268]	; (80135f4 <__multiply+0x148>)
 80134e8:	4843      	ldr	r0, [pc, #268]	; (80135f8 <__multiply+0x14c>)
 80134ea:	f000 fbc5 	bl	8013c78 <__assert_func>
 80134ee:	f100 0514 	add.w	r5, r0, #20
 80134f2:	462b      	mov	r3, r5
 80134f4:	2200      	movs	r2, #0
 80134f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80134fa:	4543      	cmp	r3, r8
 80134fc:	d321      	bcc.n	8013542 <__multiply+0x96>
 80134fe:	f104 0314 	add.w	r3, r4, #20
 8013502:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013506:	f109 0314 	add.w	r3, r9, #20
 801350a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801350e:	9202      	str	r2, [sp, #8]
 8013510:	1b3a      	subs	r2, r7, r4
 8013512:	3a15      	subs	r2, #21
 8013514:	f022 0203 	bic.w	r2, r2, #3
 8013518:	3204      	adds	r2, #4
 801351a:	f104 0115 	add.w	r1, r4, #21
 801351e:	428f      	cmp	r7, r1
 8013520:	bf38      	it	cc
 8013522:	2204      	movcc	r2, #4
 8013524:	9201      	str	r2, [sp, #4]
 8013526:	9a02      	ldr	r2, [sp, #8]
 8013528:	9303      	str	r3, [sp, #12]
 801352a:	429a      	cmp	r2, r3
 801352c:	d80c      	bhi.n	8013548 <__multiply+0x9c>
 801352e:	2e00      	cmp	r6, #0
 8013530:	dd03      	ble.n	801353a <__multiply+0x8e>
 8013532:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013536:	2b00      	cmp	r3, #0
 8013538:	d059      	beq.n	80135ee <__multiply+0x142>
 801353a:	6106      	str	r6, [r0, #16]
 801353c:	b005      	add	sp, #20
 801353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013542:	f843 2b04 	str.w	r2, [r3], #4
 8013546:	e7d8      	b.n	80134fa <__multiply+0x4e>
 8013548:	f8b3 a000 	ldrh.w	sl, [r3]
 801354c:	f1ba 0f00 	cmp.w	sl, #0
 8013550:	d023      	beq.n	801359a <__multiply+0xee>
 8013552:	46a9      	mov	r9, r5
 8013554:	f04f 0c00 	mov.w	ip, #0
 8013558:	f104 0e14 	add.w	lr, r4, #20
 801355c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013560:	f8d9 1000 	ldr.w	r1, [r9]
 8013564:	fa1f fb82 	uxth.w	fp, r2
 8013568:	b289      	uxth	r1, r1
 801356a:	fb0a 110b 	mla	r1, sl, fp, r1
 801356e:	4461      	add	r1, ip
 8013570:	f8d9 c000 	ldr.w	ip, [r9]
 8013574:	0c12      	lsrs	r2, r2, #16
 8013576:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801357a:	fb0a c202 	mla	r2, sl, r2, ip
 801357e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013582:	b289      	uxth	r1, r1
 8013584:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013588:	4577      	cmp	r7, lr
 801358a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801358e:	f849 1b04 	str.w	r1, [r9], #4
 8013592:	d8e3      	bhi.n	801355c <__multiply+0xb0>
 8013594:	9a01      	ldr	r2, [sp, #4]
 8013596:	f845 c002 	str.w	ip, [r5, r2]
 801359a:	9a03      	ldr	r2, [sp, #12]
 801359c:	3304      	adds	r3, #4
 801359e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80135a2:	f1b9 0f00 	cmp.w	r9, #0
 80135a6:	d020      	beq.n	80135ea <__multiply+0x13e>
 80135a8:	46ae      	mov	lr, r5
 80135aa:	f04f 0a00 	mov.w	sl, #0
 80135ae:	6829      	ldr	r1, [r5, #0]
 80135b0:	f104 0c14 	add.w	ip, r4, #20
 80135b4:	f8bc b000 	ldrh.w	fp, [ip]
 80135b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80135bc:	b289      	uxth	r1, r1
 80135be:	fb09 220b 	mla	r2, r9, fp, r2
 80135c2:	4492      	add	sl, r2
 80135c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80135c8:	f84e 1b04 	str.w	r1, [lr], #4
 80135cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80135d0:	f8be 1000 	ldrh.w	r1, [lr]
 80135d4:	0c12      	lsrs	r2, r2, #16
 80135d6:	fb09 1102 	mla	r1, r9, r2, r1
 80135da:	4567      	cmp	r7, ip
 80135dc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80135e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80135e4:	d8e6      	bhi.n	80135b4 <__multiply+0x108>
 80135e6:	9a01      	ldr	r2, [sp, #4]
 80135e8:	50a9      	str	r1, [r5, r2]
 80135ea:	3504      	adds	r5, #4
 80135ec:	e79b      	b.n	8013526 <__multiply+0x7a>
 80135ee:	3e01      	subs	r6, #1
 80135f0:	e79d      	b.n	801352e <__multiply+0x82>
 80135f2:	bf00      	nop
 80135f4:	0802df6f 	.word	0x0802df6f
 80135f8:	0802df80 	.word	0x0802df80

080135fc <__pow5mult>:
 80135fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013600:	4615      	mov	r5, r2
 8013602:	f012 0203 	ands.w	r2, r2, #3
 8013606:	4606      	mov	r6, r0
 8013608:	460f      	mov	r7, r1
 801360a:	d007      	beq.n	801361c <__pow5mult+0x20>
 801360c:	4c25      	ldr	r4, [pc, #148]	; (80136a4 <__pow5mult+0xa8>)
 801360e:	3a01      	subs	r2, #1
 8013610:	2300      	movs	r3, #0
 8013612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013616:	f7ff fe9f 	bl	8013358 <__multadd>
 801361a:	4607      	mov	r7, r0
 801361c:	10ad      	asrs	r5, r5, #2
 801361e:	d03d      	beq.n	801369c <__pow5mult+0xa0>
 8013620:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013622:	b97c      	cbnz	r4, 8013644 <__pow5mult+0x48>
 8013624:	2010      	movs	r0, #16
 8013626:	f7fe f9f1 	bl	8011a0c <malloc>
 801362a:	4602      	mov	r2, r0
 801362c:	6270      	str	r0, [r6, #36]	; 0x24
 801362e:	b928      	cbnz	r0, 801363c <__pow5mult+0x40>
 8013630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013634:	4b1c      	ldr	r3, [pc, #112]	; (80136a8 <__pow5mult+0xac>)
 8013636:	481d      	ldr	r0, [pc, #116]	; (80136ac <__pow5mult+0xb0>)
 8013638:	f000 fb1e 	bl	8013c78 <__assert_func>
 801363c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013640:	6004      	str	r4, [r0, #0]
 8013642:	60c4      	str	r4, [r0, #12]
 8013644:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801364c:	b94c      	cbnz	r4, 8013662 <__pow5mult+0x66>
 801364e:	f240 2171 	movw	r1, #625	; 0x271
 8013652:	4630      	mov	r0, r6
 8013654:	f7ff ff14 	bl	8013480 <__i2b>
 8013658:	2300      	movs	r3, #0
 801365a:	4604      	mov	r4, r0
 801365c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013660:	6003      	str	r3, [r0, #0]
 8013662:	f04f 0900 	mov.w	r9, #0
 8013666:	07eb      	lsls	r3, r5, #31
 8013668:	d50a      	bpl.n	8013680 <__pow5mult+0x84>
 801366a:	4639      	mov	r1, r7
 801366c:	4622      	mov	r2, r4
 801366e:	4630      	mov	r0, r6
 8013670:	f7ff ff1c 	bl	80134ac <__multiply>
 8013674:	4680      	mov	r8, r0
 8013676:	4639      	mov	r1, r7
 8013678:	4630      	mov	r0, r6
 801367a:	f7ff fe4b 	bl	8013314 <_Bfree>
 801367e:	4647      	mov	r7, r8
 8013680:	106d      	asrs	r5, r5, #1
 8013682:	d00b      	beq.n	801369c <__pow5mult+0xa0>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	b938      	cbnz	r0, 8013698 <__pow5mult+0x9c>
 8013688:	4622      	mov	r2, r4
 801368a:	4621      	mov	r1, r4
 801368c:	4630      	mov	r0, r6
 801368e:	f7ff ff0d 	bl	80134ac <__multiply>
 8013692:	6020      	str	r0, [r4, #0]
 8013694:	f8c0 9000 	str.w	r9, [r0]
 8013698:	4604      	mov	r4, r0
 801369a:	e7e4      	b.n	8013666 <__pow5mult+0x6a>
 801369c:	4638      	mov	r0, r7
 801369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136a2:	bf00      	nop
 80136a4:	0802e0d0 	.word	0x0802e0d0
 80136a8:	0802defd 	.word	0x0802defd
 80136ac:	0802df80 	.word	0x0802df80

080136b0 <__lshift>:
 80136b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136b4:	460c      	mov	r4, r1
 80136b6:	4607      	mov	r7, r0
 80136b8:	4691      	mov	r9, r2
 80136ba:	6923      	ldr	r3, [r4, #16]
 80136bc:	6849      	ldr	r1, [r1, #4]
 80136be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136c2:	68a3      	ldr	r3, [r4, #8]
 80136c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136c8:	f108 0601 	add.w	r6, r8, #1
 80136cc:	42b3      	cmp	r3, r6
 80136ce:	db0b      	blt.n	80136e8 <__lshift+0x38>
 80136d0:	4638      	mov	r0, r7
 80136d2:	f7ff fddf 	bl	8013294 <_Balloc>
 80136d6:	4605      	mov	r5, r0
 80136d8:	b948      	cbnz	r0, 80136ee <__lshift+0x3e>
 80136da:	4602      	mov	r2, r0
 80136dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80136e0:	4b29      	ldr	r3, [pc, #164]	; (8013788 <__lshift+0xd8>)
 80136e2:	482a      	ldr	r0, [pc, #168]	; (801378c <__lshift+0xdc>)
 80136e4:	f000 fac8 	bl	8013c78 <__assert_func>
 80136e8:	3101      	adds	r1, #1
 80136ea:	005b      	lsls	r3, r3, #1
 80136ec:	e7ee      	b.n	80136cc <__lshift+0x1c>
 80136ee:	2300      	movs	r3, #0
 80136f0:	f100 0114 	add.w	r1, r0, #20
 80136f4:	f100 0210 	add.w	r2, r0, #16
 80136f8:	4618      	mov	r0, r3
 80136fa:	4553      	cmp	r3, sl
 80136fc:	db37      	blt.n	801376e <__lshift+0xbe>
 80136fe:	6920      	ldr	r0, [r4, #16]
 8013700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013704:	f104 0314 	add.w	r3, r4, #20
 8013708:	f019 091f 	ands.w	r9, r9, #31
 801370c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013710:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013714:	d02f      	beq.n	8013776 <__lshift+0xc6>
 8013716:	468a      	mov	sl, r1
 8013718:	f04f 0c00 	mov.w	ip, #0
 801371c:	f1c9 0e20 	rsb	lr, r9, #32
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	fa02 f209 	lsl.w	r2, r2, r9
 8013726:	ea42 020c 	orr.w	r2, r2, ip
 801372a:	f84a 2b04 	str.w	r2, [sl], #4
 801372e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013732:	4298      	cmp	r0, r3
 8013734:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013738:	d8f2      	bhi.n	8013720 <__lshift+0x70>
 801373a:	1b03      	subs	r3, r0, r4
 801373c:	3b15      	subs	r3, #21
 801373e:	f023 0303 	bic.w	r3, r3, #3
 8013742:	3304      	adds	r3, #4
 8013744:	f104 0215 	add.w	r2, r4, #21
 8013748:	4290      	cmp	r0, r2
 801374a:	bf38      	it	cc
 801374c:	2304      	movcc	r3, #4
 801374e:	f841 c003 	str.w	ip, [r1, r3]
 8013752:	f1bc 0f00 	cmp.w	ip, #0
 8013756:	d001      	beq.n	801375c <__lshift+0xac>
 8013758:	f108 0602 	add.w	r6, r8, #2
 801375c:	3e01      	subs	r6, #1
 801375e:	4638      	mov	r0, r7
 8013760:	4621      	mov	r1, r4
 8013762:	612e      	str	r6, [r5, #16]
 8013764:	f7ff fdd6 	bl	8013314 <_Bfree>
 8013768:	4628      	mov	r0, r5
 801376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801376e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013772:	3301      	adds	r3, #1
 8013774:	e7c1      	b.n	80136fa <__lshift+0x4a>
 8013776:	3904      	subs	r1, #4
 8013778:	f853 2b04 	ldr.w	r2, [r3], #4
 801377c:	4298      	cmp	r0, r3
 801377e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013782:	d8f9      	bhi.n	8013778 <__lshift+0xc8>
 8013784:	e7ea      	b.n	801375c <__lshift+0xac>
 8013786:	bf00      	nop
 8013788:	0802df6f 	.word	0x0802df6f
 801378c:	0802df80 	.word	0x0802df80

08013790 <__mcmp>:
 8013790:	4603      	mov	r3, r0
 8013792:	690a      	ldr	r2, [r1, #16]
 8013794:	6900      	ldr	r0, [r0, #16]
 8013796:	b530      	push	{r4, r5, lr}
 8013798:	1a80      	subs	r0, r0, r2
 801379a:	d10d      	bne.n	80137b8 <__mcmp+0x28>
 801379c:	3314      	adds	r3, #20
 801379e:	3114      	adds	r1, #20
 80137a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80137a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80137a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80137ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80137b0:	4295      	cmp	r5, r2
 80137b2:	d002      	beq.n	80137ba <__mcmp+0x2a>
 80137b4:	d304      	bcc.n	80137c0 <__mcmp+0x30>
 80137b6:	2001      	movs	r0, #1
 80137b8:	bd30      	pop	{r4, r5, pc}
 80137ba:	42a3      	cmp	r3, r4
 80137bc:	d3f4      	bcc.n	80137a8 <__mcmp+0x18>
 80137be:	e7fb      	b.n	80137b8 <__mcmp+0x28>
 80137c0:	f04f 30ff 	mov.w	r0, #4294967295
 80137c4:	e7f8      	b.n	80137b8 <__mcmp+0x28>
	...

080137c8 <__mdiff>:
 80137c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	460d      	mov	r5, r1
 80137ce:	4607      	mov	r7, r0
 80137d0:	4611      	mov	r1, r2
 80137d2:	4628      	mov	r0, r5
 80137d4:	4614      	mov	r4, r2
 80137d6:	f7ff ffdb 	bl	8013790 <__mcmp>
 80137da:	1e06      	subs	r6, r0, #0
 80137dc:	d111      	bne.n	8013802 <__mdiff+0x3a>
 80137de:	4631      	mov	r1, r6
 80137e0:	4638      	mov	r0, r7
 80137e2:	f7ff fd57 	bl	8013294 <_Balloc>
 80137e6:	4602      	mov	r2, r0
 80137e8:	b928      	cbnz	r0, 80137f6 <__mdiff+0x2e>
 80137ea:	f240 2132 	movw	r1, #562	; 0x232
 80137ee:	4b3a      	ldr	r3, [pc, #232]	; (80138d8 <__mdiff+0x110>)
 80137f0:	483a      	ldr	r0, [pc, #232]	; (80138dc <__mdiff+0x114>)
 80137f2:	f000 fa41 	bl	8013c78 <__assert_func>
 80137f6:	2301      	movs	r3, #1
 80137f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80137fc:	4610      	mov	r0, r2
 80137fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013802:	bfa4      	itt	ge
 8013804:	4623      	movge	r3, r4
 8013806:	462c      	movge	r4, r5
 8013808:	4638      	mov	r0, r7
 801380a:	6861      	ldr	r1, [r4, #4]
 801380c:	bfa6      	itte	ge
 801380e:	461d      	movge	r5, r3
 8013810:	2600      	movge	r6, #0
 8013812:	2601      	movlt	r6, #1
 8013814:	f7ff fd3e 	bl	8013294 <_Balloc>
 8013818:	4602      	mov	r2, r0
 801381a:	b918      	cbnz	r0, 8013824 <__mdiff+0x5c>
 801381c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013820:	4b2d      	ldr	r3, [pc, #180]	; (80138d8 <__mdiff+0x110>)
 8013822:	e7e5      	b.n	80137f0 <__mdiff+0x28>
 8013824:	f102 0814 	add.w	r8, r2, #20
 8013828:	46c2      	mov	sl, r8
 801382a:	f04f 0c00 	mov.w	ip, #0
 801382e:	6927      	ldr	r7, [r4, #16]
 8013830:	60c6      	str	r6, [r0, #12]
 8013832:	692e      	ldr	r6, [r5, #16]
 8013834:	f104 0014 	add.w	r0, r4, #20
 8013838:	f105 0914 	add.w	r9, r5, #20
 801383c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8013840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013844:	3410      	adds	r4, #16
 8013846:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801384a:	f859 3b04 	ldr.w	r3, [r9], #4
 801384e:	fa1f f18b 	uxth.w	r1, fp
 8013852:	448c      	add	ip, r1
 8013854:	b299      	uxth	r1, r3
 8013856:	0c1b      	lsrs	r3, r3, #16
 8013858:	ebac 0101 	sub.w	r1, ip, r1
 801385c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013860:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013864:	b289      	uxth	r1, r1
 8013866:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801386a:	454e      	cmp	r6, r9
 801386c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013870:	f84a 3b04 	str.w	r3, [sl], #4
 8013874:	d8e7      	bhi.n	8013846 <__mdiff+0x7e>
 8013876:	1b73      	subs	r3, r6, r5
 8013878:	3b15      	subs	r3, #21
 801387a:	f023 0303 	bic.w	r3, r3, #3
 801387e:	3515      	adds	r5, #21
 8013880:	3304      	adds	r3, #4
 8013882:	42ae      	cmp	r6, r5
 8013884:	bf38      	it	cc
 8013886:	2304      	movcc	r3, #4
 8013888:	4418      	add	r0, r3
 801388a:	4443      	add	r3, r8
 801388c:	461e      	mov	r6, r3
 801388e:	4605      	mov	r5, r0
 8013890:	4575      	cmp	r5, lr
 8013892:	d30e      	bcc.n	80138b2 <__mdiff+0xea>
 8013894:	f10e 0103 	add.w	r1, lr, #3
 8013898:	1a09      	subs	r1, r1, r0
 801389a:	f021 0103 	bic.w	r1, r1, #3
 801389e:	3803      	subs	r0, #3
 80138a0:	4586      	cmp	lr, r0
 80138a2:	bf38      	it	cc
 80138a4:	2100      	movcc	r1, #0
 80138a6:	4419      	add	r1, r3
 80138a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80138ac:	b18b      	cbz	r3, 80138d2 <__mdiff+0x10a>
 80138ae:	6117      	str	r7, [r2, #16]
 80138b0:	e7a4      	b.n	80137fc <__mdiff+0x34>
 80138b2:	f855 8b04 	ldr.w	r8, [r5], #4
 80138b6:	fa1f f188 	uxth.w	r1, r8
 80138ba:	4461      	add	r1, ip
 80138bc:	140c      	asrs	r4, r1, #16
 80138be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80138c2:	b289      	uxth	r1, r1
 80138c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80138c8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80138cc:	f846 1b04 	str.w	r1, [r6], #4
 80138d0:	e7de      	b.n	8013890 <__mdiff+0xc8>
 80138d2:	3f01      	subs	r7, #1
 80138d4:	e7e8      	b.n	80138a8 <__mdiff+0xe0>
 80138d6:	bf00      	nop
 80138d8:	0802df6f 	.word	0x0802df6f
 80138dc:	0802df80 	.word	0x0802df80

080138e0 <__d2b>:
 80138e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80138e4:	2101      	movs	r1, #1
 80138e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80138ea:	4690      	mov	r8, r2
 80138ec:	461d      	mov	r5, r3
 80138ee:	f7ff fcd1 	bl	8013294 <_Balloc>
 80138f2:	4604      	mov	r4, r0
 80138f4:	b930      	cbnz	r0, 8013904 <__d2b+0x24>
 80138f6:	4602      	mov	r2, r0
 80138f8:	f240 310a 	movw	r1, #778	; 0x30a
 80138fc:	4b24      	ldr	r3, [pc, #144]	; (8013990 <__d2b+0xb0>)
 80138fe:	4825      	ldr	r0, [pc, #148]	; (8013994 <__d2b+0xb4>)
 8013900:	f000 f9ba 	bl	8013c78 <__assert_func>
 8013904:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8013908:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801390c:	bb2d      	cbnz	r5, 801395a <__d2b+0x7a>
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	f1b8 0300 	subs.w	r3, r8, #0
 8013914:	d026      	beq.n	8013964 <__d2b+0x84>
 8013916:	4668      	mov	r0, sp
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	f7ff fd83 	bl	8013424 <__lo0bits>
 801391e:	9900      	ldr	r1, [sp, #0]
 8013920:	b1f0      	cbz	r0, 8013960 <__d2b+0x80>
 8013922:	9a01      	ldr	r2, [sp, #4]
 8013924:	f1c0 0320 	rsb	r3, r0, #32
 8013928:	fa02 f303 	lsl.w	r3, r2, r3
 801392c:	430b      	orrs	r3, r1
 801392e:	40c2      	lsrs	r2, r0
 8013930:	6163      	str	r3, [r4, #20]
 8013932:	9201      	str	r2, [sp, #4]
 8013934:	9b01      	ldr	r3, [sp, #4]
 8013936:	2b00      	cmp	r3, #0
 8013938:	bf14      	ite	ne
 801393a:	2102      	movne	r1, #2
 801393c:	2101      	moveq	r1, #1
 801393e:	61a3      	str	r3, [r4, #24]
 8013940:	6121      	str	r1, [r4, #16]
 8013942:	b1c5      	cbz	r5, 8013976 <__d2b+0x96>
 8013944:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013948:	4405      	add	r5, r0
 801394a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801394e:	603d      	str	r5, [r7, #0]
 8013950:	6030      	str	r0, [r6, #0]
 8013952:	4620      	mov	r0, r4
 8013954:	b002      	add	sp, #8
 8013956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801395e:	e7d6      	b.n	801390e <__d2b+0x2e>
 8013960:	6161      	str	r1, [r4, #20]
 8013962:	e7e7      	b.n	8013934 <__d2b+0x54>
 8013964:	a801      	add	r0, sp, #4
 8013966:	f7ff fd5d 	bl	8013424 <__lo0bits>
 801396a:	2101      	movs	r1, #1
 801396c:	9b01      	ldr	r3, [sp, #4]
 801396e:	6121      	str	r1, [r4, #16]
 8013970:	6163      	str	r3, [r4, #20]
 8013972:	3020      	adds	r0, #32
 8013974:	e7e5      	b.n	8013942 <__d2b+0x62>
 8013976:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801397a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801397e:	6038      	str	r0, [r7, #0]
 8013980:	6918      	ldr	r0, [r3, #16]
 8013982:	f7ff fd2f 	bl	80133e4 <__hi0bits>
 8013986:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801398a:	6031      	str	r1, [r6, #0]
 801398c:	e7e1      	b.n	8013952 <__d2b+0x72>
 801398e:	bf00      	nop
 8013990:	0802df6f 	.word	0x0802df6f
 8013994:	0802df80 	.word	0x0802df80

08013998 <_calloc_r>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	fba1 5402 	umull	r5, r4, r1, r2
 801399e:	b934      	cbnz	r4, 80139ae <_calloc_r+0x16>
 80139a0:	4629      	mov	r1, r5
 80139a2:	f7fe f8b3 	bl	8011b0c <_malloc_r>
 80139a6:	4606      	mov	r6, r0
 80139a8:	b928      	cbnz	r0, 80139b6 <_calloc_r+0x1e>
 80139aa:	4630      	mov	r0, r6
 80139ac:	bd70      	pop	{r4, r5, r6, pc}
 80139ae:	220c      	movs	r2, #12
 80139b0:	2600      	movs	r6, #0
 80139b2:	6002      	str	r2, [r0, #0]
 80139b4:	e7f9      	b.n	80139aa <_calloc_r+0x12>
 80139b6:	462a      	mov	r2, r5
 80139b8:	4621      	mov	r1, r4
 80139ba:	f7fe f837 	bl	8011a2c <memset>
 80139be:	e7f4      	b.n	80139aa <_calloc_r+0x12>

080139c0 <__ssputs_r>:
 80139c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c4:	688e      	ldr	r6, [r1, #8]
 80139c6:	4682      	mov	sl, r0
 80139c8:	429e      	cmp	r6, r3
 80139ca:	460c      	mov	r4, r1
 80139cc:	4690      	mov	r8, r2
 80139ce:	461f      	mov	r7, r3
 80139d0:	d838      	bhi.n	8013a44 <__ssputs_r+0x84>
 80139d2:	898a      	ldrh	r2, [r1, #12]
 80139d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80139d8:	d032      	beq.n	8013a40 <__ssputs_r+0x80>
 80139da:	6825      	ldr	r5, [r4, #0]
 80139dc:	6909      	ldr	r1, [r1, #16]
 80139de:	3301      	adds	r3, #1
 80139e0:	eba5 0901 	sub.w	r9, r5, r1
 80139e4:	6965      	ldr	r5, [r4, #20]
 80139e6:	444b      	add	r3, r9
 80139e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139f0:	106d      	asrs	r5, r5, #1
 80139f2:	429d      	cmp	r5, r3
 80139f4:	bf38      	it	cc
 80139f6:	461d      	movcc	r5, r3
 80139f8:	0553      	lsls	r3, r2, #21
 80139fa:	d531      	bpl.n	8013a60 <__ssputs_r+0xa0>
 80139fc:	4629      	mov	r1, r5
 80139fe:	f7fe f885 	bl	8011b0c <_malloc_r>
 8013a02:	4606      	mov	r6, r0
 8013a04:	b950      	cbnz	r0, 8013a1c <__ssputs_r+0x5c>
 8013a06:	230c      	movs	r3, #12
 8013a08:	f04f 30ff 	mov.w	r0, #4294967295
 8013a0c:	f8ca 3000 	str.w	r3, [sl]
 8013a10:	89a3      	ldrh	r3, [r4, #12]
 8013a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a16:	81a3      	strh	r3, [r4, #12]
 8013a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a1c:	464a      	mov	r2, r9
 8013a1e:	6921      	ldr	r1, [r4, #16]
 8013a20:	f7ff fc1e 	bl	8013260 <memcpy>
 8013a24:	89a3      	ldrh	r3, [r4, #12]
 8013a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a2e:	81a3      	strh	r3, [r4, #12]
 8013a30:	6126      	str	r6, [r4, #16]
 8013a32:	444e      	add	r6, r9
 8013a34:	6026      	str	r6, [r4, #0]
 8013a36:	463e      	mov	r6, r7
 8013a38:	6165      	str	r5, [r4, #20]
 8013a3a:	eba5 0509 	sub.w	r5, r5, r9
 8013a3e:	60a5      	str	r5, [r4, #8]
 8013a40:	42be      	cmp	r6, r7
 8013a42:	d900      	bls.n	8013a46 <__ssputs_r+0x86>
 8013a44:	463e      	mov	r6, r7
 8013a46:	4632      	mov	r2, r6
 8013a48:	4641      	mov	r1, r8
 8013a4a:	6820      	ldr	r0, [r4, #0]
 8013a4c:	f000 f959 	bl	8013d02 <memmove>
 8013a50:	68a3      	ldr	r3, [r4, #8]
 8013a52:	2000      	movs	r0, #0
 8013a54:	1b9b      	subs	r3, r3, r6
 8013a56:	60a3      	str	r3, [r4, #8]
 8013a58:	6823      	ldr	r3, [r4, #0]
 8013a5a:	4433      	add	r3, r6
 8013a5c:	6023      	str	r3, [r4, #0]
 8013a5e:	e7db      	b.n	8013a18 <__ssputs_r+0x58>
 8013a60:	462a      	mov	r2, r5
 8013a62:	f000 f968 	bl	8013d36 <_realloc_r>
 8013a66:	4606      	mov	r6, r0
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d1e1      	bne.n	8013a30 <__ssputs_r+0x70>
 8013a6c:	4650      	mov	r0, sl
 8013a6e:	6921      	ldr	r1, [r4, #16]
 8013a70:	f7fd ffe4 	bl	8011a3c <_free_r>
 8013a74:	e7c7      	b.n	8013a06 <__ssputs_r+0x46>
	...

08013a78 <_svfiprintf_r>:
 8013a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	4698      	mov	r8, r3
 8013a7e:	898b      	ldrh	r3, [r1, #12]
 8013a80:	4607      	mov	r7, r0
 8013a82:	061b      	lsls	r3, r3, #24
 8013a84:	460d      	mov	r5, r1
 8013a86:	4614      	mov	r4, r2
 8013a88:	b09d      	sub	sp, #116	; 0x74
 8013a8a:	d50e      	bpl.n	8013aaa <_svfiprintf_r+0x32>
 8013a8c:	690b      	ldr	r3, [r1, #16]
 8013a8e:	b963      	cbnz	r3, 8013aaa <_svfiprintf_r+0x32>
 8013a90:	2140      	movs	r1, #64	; 0x40
 8013a92:	f7fe f83b 	bl	8011b0c <_malloc_r>
 8013a96:	6028      	str	r0, [r5, #0]
 8013a98:	6128      	str	r0, [r5, #16]
 8013a9a:	b920      	cbnz	r0, 8013aa6 <_svfiprintf_r+0x2e>
 8013a9c:	230c      	movs	r3, #12
 8013a9e:	603b      	str	r3, [r7, #0]
 8013aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa4:	e0d1      	b.n	8013c4a <_svfiprintf_r+0x1d2>
 8013aa6:	2340      	movs	r3, #64	; 0x40
 8013aa8:	616b      	str	r3, [r5, #20]
 8013aaa:	2300      	movs	r3, #0
 8013aac:	9309      	str	r3, [sp, #36]	; 0x24
 8013aae:	2320      	movs	r3, #32
 8013ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ab4:	2330      	movs	r3, #48	; 0x30
 8013ab6:	f04f 0901 	mov.w	r9, #1
 8013aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8013abe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013c64 <_svfiprintf_r+0x1ec>
 8013ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ac6:	4623      	mov	r3, r4
 8013ac8:	469a      	mov	sl, r3
 8013aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ace:	b10a      	cbz	r2, 8013ad4 <_svfiprintf_r+0x5c>
 8013ad0:	2a25      	cmp	r2, #37	; 0x25
 8013ad2:	d1f9      	bne.n	8013ac8 <_svfiprintf_r+0x50>
 8013ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8013ad8:	d00b      	beq.n	8013af2 <_svfiprintf_r+0x7a>
 8013ada:	465b      	mov	r3, fp
 8013adc:	4622      	mov	r2, r4
 8013ade:	4629      	mov	r1, r5
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f7ff ff6d 	bl	80139c0 <__ssputs_r>
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	f000 80aa 	beq.w	8013c40 <_svfiprintf_r+0x1c8>
 8013aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013aee:	445a      	add	r2, fp
 8013af0:	9209      	str	r2, [sp, #36]	; 0x24
 8013af2:	f89a 3000 	ldrb.w	r3, [sl]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f000 80a2 	beq.w	8013c40 <_svfiprintf_r+0x1c8>
 8013afc:	2300      	movs	r3, #0
 8013afe:	f04f 32ff 	mov.w	r2, #4294967295
 8013b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b06:	f10a 0a01 	add.w	sl, sl, #1
 8013b0a:	9304      	str	r3, [sp, #16]
 8013b0c:	9307      	str	r3, [sp, #28]
 8013b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b12:	931a      	str	r3, [sp, #104]	; 0x68
 8013b14:	4654      	mov	r4, sl
 8013b16:	2205      	movs	r2, #5
 8013b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b1c:	4851      	ldr	r0, [pc, #324]	; (8013c64 <_svfiprintf_r+0x1ec>)
 8013b1e:	f7ff fb91 	bl	8013244 <memchr>
 8013b22:	9a04      	ldr	r2, [sp, #16]
 8013b24:	b9d8      	cbnz	r0, 8013b5e <_svfiprintf_r+0xe6>
 8013b26:	06d0      	lsls	r0, r2, #27
 8013b28:	bf44      	itt	mi
 8013b2a:	2320      	movmi	r3, #32
 8013b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b30:	0711      	lsls	r1, r2, #28
 8013b32:	bf44      	itt	mi
 8013b34:	232b      	movmi	r3, #43	; 0x2b
 8013b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b40:	d015      	beq.n	8013b6e <_svfiprintf_r+0xf6>
 8013b42:	4654      	mov	r4, sl
 8013b44:	2000      	movs	r0, #0
 8013b46:	f04f 0c0a 	mov.w	ip, #10
 8013b4a:	9a07      	ldr	r2, [sp, #28]
 8013b4c:	4621      	mov	r1, r4
 8013b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b52:	3b30      	subs	r3, #48	; 0x30
 8013b54:	2b09      	cmp	r3, #9
 8013b56:	d94e      	bls.n	8013bf6 <_svfiprintf_r+0x17e>
 8013b58:	b1b0      	cbz	r0, 8013b88 <_svfiprintf_r+0x110>
 8013b5a:	9207      	str	r2, [sp, #28]
 8013b5c:	e014      	b.n	8013b88 <_svfiprintf_r+0x110>
 8013b5e:	eba0 0308 	sub.w	r3, r0, r8
 8013b62:	fa09 f303 	lsl.w	r3, r9, r3
 8013b66:	4313      	orrs	r3, r2
 8013b68:	46a2      	mov	sl, r4
 8013b6a:	9304      	str	r3, [sp, #16]
 8013b6c:	e7d2      	b.n	8013b14 <_svfiprintf_r+0x9c>
 8013b6e:	9b03      	ldr	r3, [sp, #12]
 8013b70:	1d19      	adds	r1, r3, #4
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	9103      	str	r1, [sp, #12]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	bfbb      	ittet	lt
 8013b7a:	425b      	neglt	r3, r3
 8013b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8013b80:	9307      	strge	r3, [sp, #28]
 8013b82:	9307      	strlt	r3, [sp, #28]
 8013b84:	bfb8      	it	lt
 8013b86:	9204      	strlt	r2, [sp, #16]
 8013b88:	7823      	ldrb	r3, [r4, #0]
 8013b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8013b8c:	d10c      	bne.n	8013ba8 <_svfiprintf_r+0x130>
 8013b8e:	7863      	ldrb	r3, [r4, #1]
 8013b90:	2b2a      	cmp	r3, #42	; 0x2a
 8013b92:	d135      	bne.n	8013c00 <_svfiprintf_r+0x188>
 8013b94:	9b03      	ldr	r3, [sp, #12]
 8013b96:	3402      	adds	r4, #2
 8013b98:	1d1a      	adds	r2, r3, #4
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	9203      	str	r2, [sp, #12]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	bfb8      	it	lt
 8013ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ba6:	9305      	str	r3, [sp, #20]
 8013ba8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013c68 <_svfiprintf_r+0x1f0>
 8013bac:	2203      	movs	r2, #3
 8013bae:	4650      	mov	r0, sl
 8013bb0:	7821      	ldrb	r1, [r4, #0]
 8013bb2:	f7ff fb47 	bl	8013244 <memchr>
 8013bb6:	b140      	cbz	r0, 8013bca <_svfiprintf_r+0x152>
 8013bb8:	2340      	movs	r3, #64	; 0x40
 8013bba:	eba0 000a 	sub.w	r0, r0, sl
 8013bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8013bc2:	9b04      	ldr	r3, [sp, #16]
 8013bc4:	3401      	adds	r4, #1
 8013bc6:	4303      	orrs	r3, r0
 8013bc8:	9304      	str	r3, [sp, #16]
 8013bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bce:	2206      	movs	r2, #6
 8013bd0:	4826      	ldr	r0, [pc, #152]	; (8013c6c <_svfiprintf_r+0x1f4>)
 8013bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bd6:	f7ff fb35 	bl	8013244 <memchr>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	d038      	beq.n	8013c50 <_svfiprintf_r+0x1d8>
 8013bde:	4b24      	ldr	r3, [pc, #144]	; (8013c70 <_svfiprintf_r+0x1f8>)
 8013be0:	bb1b      	cbnz	r3, 8013c2a <_svfiprintf_r+0x1b2>
 8013be2:	9b03      	ldr	r3, [sp, #12]
 8013be4:	3307      	adds	r3, #7
 8013be6:	f023 0307 	bic.w	r3, r3, #7
 8013bea:	3308      	adds	r3, #8
 8013bec:	9303      	str	r3, [sp, #12]
 8013bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bf0:	4433      	add	r3, r6
 8013bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8013bf4:	e767      	b.n	8013ac6 <_svfiprintf_r+0x4e>
 8013bf6:	460c      	mov	r4, r1
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bfe:	e7a5      	b.n	8013b4c <_svfiprintf_r+0xd4>
 8013c00:	2300      	movs	r3, #0
 8013c02:	f04f 0c0a 	mov.w	ip, #10
 8013c06:	4619      	mov	r1, r3
 8013c08:	3401      	adds	r4, #1
 8013c0a:	9305      	str	r3, [sp, #20]
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c12:	3a30      	subs	r2, #48	; 0x30
 8013c14:	2a09      	cmp	r2, #9
 8013c16:	d903      	bls.n	8013c20 <_svfiprintf_r+0x1a8>
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d0c5      	beq.n	8013ba8 <_svfiprintf_r+0x130>
 8013c1c:	9105      	str	r1, [sp, #20]
 8013c1e:	e7c3      	b.n	8013ba8 <_svfiprintf_r+0x130>
 8013c20:	4604      	mov	r4, r0
 8013c22:	2301      	movs	r3, #1
 8013c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c28:	e7f0      	b.n	8013c0c <_svfiprintf_r+0x194>
 8013c2a:	ab03      	add	r3, sp, #12
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	462a      	mov	r2, r5
 8013c30:	4638      	mov	r0, r7
 8013c32:	4b10      	ldr	r3, [pc, #64]	; (8013c74 <_svfiprintf_r+0x1fc>)
 8013c34:	a904      	add	r1, sp, #16
 8013c36:	f7fe f87b 	bl	8011d30 <_printf_float>
 8013c3a:	1c42      	adds	r2, r0, #1
 8013c3c:	4606      	mov	r6, r0
 8013c3e:	d1d6      	bne.n	8013bee <_svfiprintf_r+0x176>
 8013c40:	89ab      	ldrh	r3, [r5, #12]
 8013c42:	065b      	lsls	r3, r3, #25
 8013c44:	f53f af2c 	bmi.w	8013aa0 <_svfiprintf_r+0x28>
 8013c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c4a:	b01d      	add	sp, #116	; 0x74
 8013c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c50:	ab03      	add	r3, sp, #12
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	462a      	mov	r2, r5
 8013c56:	4638      	mov	r0, r7
 8013c58:	4b06      	ldr	r3, [pc, #24]	; (8013c74 <_svfiprintf_r+0x1fc>)
 8013c5a:	a904      	add	r1, sp, #16
 8013c5c:	f7fe fb04 	bl	8012268 <_printf_i>
 8013c60:	e7eb      	b.n	8013c3a <_svfiprintf_r+0x1c2>
 8013c62:	bf00      	nop
 8013c64:	0802e0dc 	.word	0x0802e0dc
 8013c68:	0802e0e2 	.word	0x0802e0e2
 8013c6c:	0802e0e6 	.word	0x0802e0e6
 8013c70:	08011d31 	.word	0x08011d31
 8013c74:	080139c1 	.word	0x080139c1

08013c78 <__assert_func>:
 8013c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c7a:	4614      	mov	r4, r2
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	4b09      	ldr	r3, [pc, #36]	; (8013ca4 <__assert_func+0x2c>)
 8013c80:	4605      	mov	r5, r0
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	68d8      	ldr	r0, [r3, #12]
 8013c86:	b14c      	cbz	r4, 8013c9c <__assert_func+0x24>
 8013c88:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <__assert_func+0x30>)
 8013c8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c8e:	9100      	str	r1, [sp, #0]
 8013c90:	462b      	mov	r3, r5
 8013c92:	4906      	ldr	r1, [pc, #24]	; (8013cac <__assert_func+0x34>)
 8013c94:	f000 f80e 	bl	8013cb4 <fiprintf>
 8013c98:	f000 faa2 	bl	80141e0 <abort>
 8013c9c:	4b04      	ldr	r3, [pc, #16]	; (8013cb0 <__assert_func+0x38>)
 8013c9e:	461c      	mov	r4, r3
 8013ca0:	e7f3      	b.n	8013c8a <__assert_func+0x12>
 8013ca2:	bf00      	nop
 8013ca4:	20000168 	.word	0x20000168
 8013ca8:	0802e0ed 	.word	0x0802e0ed
 8013cac:	0802e0fa 	.word	0x0802e0fa
 8013cb0:	0802e128 	.word	0x0802e128

08013cb4 <fiprintf>:
 8013cb4:	b40e      	push	{r1, r2, r3}
 8013cb6:	b503      	push	{r0, r1, lr}
 8013cb8:	4601      	mov	r1, r0
 8013cba:	ab03      	add	r3, sp, #12
 8013cbc:	4805      	ldr	r0, [pc, #20]	; (8013cd4 <fiprintf+0x20>)
 8013cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cc2:	6800      	ldr	r0, [r0, #0]
 8013cc4:	9301      	str	r3, [sp, #4]
 8013cc6:	f000 f88d 	bl	8013de4 <_vfiprintf_r>
 8013cca:	b002      	add	sp, #8
 8013ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cd0:	b003      	add	sp, #12
 8013cd2:	4770      	bx	lr
 8013cd4:	20000168 	.word	0x20000168

08013cd8 <__retarget_lock_init_recursive>:
 8013cd8:	4770      	bx	lr

08013cda <__retarget_lock_acquire_recursive>:
 8013cda:	4770      	bx	lr

08013cdc <__retarget_lock_release_recursive>:
 8013cdc:	4770      	bx	lr

08013cde <__ascii_mbtowc>:
 8013cde:	b082      	sub	sp, #8
 8013ce0:	b901      	cbnz	r1, 8013ce4 <__ascii_mbtowc+0x6>
 8013ce2:	a901      	add	r1, sp, #4
 8013ce4:	b142      	cbz	r2, 8013cf8 <__ascii_mbtowc+0x1a>
 8013ce6:	b14b      	cbz	r3, 8013cfc <__ascii_mbtowc+0x1e>
 8013ce8:	7813      	ldrb	r3, [r2, #0]
 8013cea:	600b      	str	r3, [r1, #0]
 8013cec:	7812      	ldrb	r2, [r2, #0]
 8013cee:	1e10      	subs	r0, r2, #0
 8013cf0:	bf18      	it	ne
 8013cf2:	2001      	movne	r0, #1
 8013cf4:	b002      	add	sp, #8
 8013cf6:	4770      	bx	lr
 8013cf8:	4610      	mov	r0, r2
 8013cfa:	e7fb      	b.n	8013cf4 <__ascii_mbtowc+0x16>
 8013cfc:	f06f 0001 	mvn.w	r0, #1
 8013d00:	e7f8      	b.n	8013cf4 <__ascii_mbtowc+0x16>

08013d02 <memmove>:
 8013d02:	4288      	cmp	r0, r1
 8013d04:	b510      	push	{r4, lr}
 8013d06:	eb01 0402 	add.w	r4, r1, r2
 8013d0a:	d902      	bls.n	8013d12 <memmove+0x10>
 8013d0c:	4284      	cmp	r4, r0
 8013d0e:	4623      	mov	r3, r4
 8013d10:	d807      	bhi.n	8013d22 <memmove+0x20>
 8013d12:	1e43      	subs	r3, r0, #1
 8013d14:	42a1      	cmp	r1, r4
 8013d16:	d008      	beq.n	8013d2a <memmove+0x28>
 8013d18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d20:	e7f8      	b.n	8013d14 <memmove+0x12>
 8013d22:	4601      	mov	r1, r0
 8013d24:	4402      	add	r2, r0
 8013d26:	428a      	cmp	r2, r1
 8013d28:	d100      	bne.n	8013d2c <memmove+0x2a>
 8013d2a:	bd10      	pop	{r4, pc}
 8013d2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d34:	e7f7      	b.n	8013d26 <memmove+0x24>

08013d36 <_realloc_r>:
 8013d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3a:	4680      	mov	r8, r0
 8013d3c:	4614      	mov	r4, r2
 8013d3e:	460e      	mov	r6, r1
 8013d40:	b921      	cbnz	r1, 8013d4c <_realloc_r+0x16>
 8013d42:	4611      	mov	r1, r2
 8013d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d48:	f7fd bee0 	b.w	8011b0c <_malloc_r>
 8013d4c:	b92a      	cbnz	r2, 8013d5a <_realloc_r+0x24>
 8013d4e:	f7fd fe75 	bl	8011a3c <_free_r>
 8013d52:	4625      	mov	r5, r4
 8013d54:	4628      	mov	r0, r5
 8013d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d5a:	f000 fc61 	bl	8014620 <_malloc_usable_size_r>
 8013d5e:	4284      	cmp	r4, r0
 8013d60:	4607      	mov	r7, r0
 8013d62:	d802      	bhi.n	8013d6a <_realloc_r+0x34>
 8013d64:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013d68:	d812      	bhi.n	8013d90 <_realloc_r+0x5a>
 8013d6a:	4621      	mov	r1, r4
 8013d6c:	4640      	mov	r0, r8
 8013d6e:	f7fd fecd 	bl	8011b0c <_malloc_r>
 8013d72:	4605      	mov	r5, r0
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d0ed      	beq.n	8013d54 <_realloc_r+0x1e>
 8013d78:	42bc      	cmp	r4, r7
 8013d7a:	4622      	mov	r2, r4
 8013d7c:	4631      	mov	r1, r6
 8013d7e:	bf28      	it	cs
 8013d80:	463a      	movcs	r2, r7
 8013d82:	f7ff fa6d 	bl	8013260 <memcpy>
 8013d86:	4631      	mov	r1, r6
 8013d88:	4640      	mov	r0, r8
 8013d8a:	f7fd fe57 	bl	8011a3c <_free_r>
 8013d8e:	e7e1      	b.n	8013d54 <_realloc_r+0x1e>
 8013d90:	4635      	mov	r5, r6
 8013d92:	e7df      	b.n	8013d54 <_realloc_r+0x1e>

08013d94 <__sfputc_r>:
 8013d94:	6893      	ldr	r3, [r2, #8]
 8013d96:	b410      	push	{r4}
 8013d98:	3b01      	subs	r3, #1
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	6093      	str	r3, [r2, #8]
 8013d9e:	da07      	bge.n	8013db0 <__sfputc_r+0x1c>
 8013da0:	6994      	ldr	r4, [r2, #24]
 8013da2:	42a3      	cmp	r3, r4
 8013da4:	db01      	blt.n	8013daa <__sfputc_r+0x16>
 8013da6:	290a      	cmp	r1, #10
 8013da8:	d102      	bne.n	8013db0 <__sfputc_r+0x1c>
 8013daa:	bc10      	pop	{r4}
 8013dac:	f000 b94a 	b.w	8014044 <__swbuf_r>
 8013db0:	6813      	ldr	r3, [r2, #0]
 8013db2:	1c58      	adds	r0, r3, #1
 8013db4:	6010      	str	r0, [r2, #0]
 8013db6:	7019      	strb	r1, [r3, #0]
 8013db8:	4608      	mov	r0, r1
 8013dba:	bc10      	pop	{r4}
 8013dbc:	4770      	bx	lr

08013dbe <__sfputs_r>:
 8013dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	460f      	mov	r7, r1
 8013dc4:	4614      	mov	r4, r2
 8013dc6:	18d5      	adds	r5, r2, r3
 8013dc8:	42ac      	cmp	r4, r5
 8013dca:	d101      	bne.n	8013dd0 <__sfputs_r+0x12>
 8013dcc:	2000      	movs	r0, #0
 8013dce:	e007      	b.n	8013de0 <__sfputs_r+0x22>
 8013dd0:	463a      	mov	r2, r7
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dd8:	f7ff ffdc 	bl	8013d94 <__sfputc_r>
 8013ddc:	1c43      	adds	r3, r0, #1
 8013dde:	d1f3      	bne.n	8013dc8 <__sfputs_r+0xa>
 8013de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013de4 <_vfiprintf_r>:
 8013de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de8:	460d      	mov	r5, r1
 8013dea:	4614      	mov	r4, r2
 8013dec:	4698      	mov	r8, r3
 8013dee:	4606      	mov	r6, r0
 8013df0:	b09d      	sub	sp, #116	; 0x74
 8013df2:	b118      	cbz	r0, 8013dfc <_vfiprintf_r+0x18>
 8013df4:	6983      	ldr	r3, [r0, #24]
 8013df6:	b90b      	cbnz	r3, 8013dfc <_vfiprintf_r+0x18>
 8013df8:	f000 fb10 	bl	801441c <__sinit>
 8013dfc:	4b89      	ldr	r3, [pc, #548]	; (8014024 <_vfiprintf_r+0x240>)
 8013dfe:	429d      	cmp	r5, r3
 8013e00:	d11b      	bne.n	8013e3a <_vfiprintf_r+0x56>
 8013e02:	6875      	ldr	r5, [r6, #4]
 8013e04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e06:	07d9      	lsls	r1, r3, #31
 8013e08:	d405      	bmi.n	8013e16 <_vfiprintf_r+0x32>
 8013e0a:	89ab      	ldrh	r3, [r5, #12]
 8013e0c:	059a      	lsls	r2, r3, #22
 8013e0e:	d402      	bmi.n	8013e16 <_vfiprintf_r+0x32>
 8013e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e12:	f7ff ff62 	bl	8013cda <__retarget_lock_acquire_recursive>
 8013e16:	89ab      	ldrh	r3, [r5, #12]
 8013e18:	071b      	lsls	r3, r3, #28
 8013e1a:	d501      	bpl.n	8013e20 <_vfiprintf_r+0x3c>
 8013e1c:	692b      	ldr	r3, [r5, #16]
 8013e1e:	b9eb      	cbnz	r3, 8013e5c <_vfiprintf_r+0x78>
 8013e20:	4629      	mov	r1, r5
 8013e22:	4630      	mov	r0, r6
 8013e24:	f000 f96e 	bl	8014104 <__swsetup_r>
 8013e28:	b1c0      	cbz	r0, 8013e5c <_vfiprintf_r+0x78>
 8013e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e2c:	07dc      	lsls	r4, r3, #31
 8013e2e:	d50e      	bpl.n	8013e4e <_vfiprintf_r+0x6a>
 8013e30:	f04f 30ff 	mov.w	r0, #4294967295
 8013e34:	b01d      	add	sp, #116	; 0x74
 8013e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3a:	4b7b      	ldr	r3, [pc, #492]	; (8014028 <_vfiprintf_r+0x244>)
 8013e3c:	429d      	cmp	r5, r3
 8013e3e:	d101      	bne.n	8013e44 <_vfiprintf_r+0x60>
 8013e40:	68b5      	ldr	r5, [r6, #8]
 8013e42:	e7df      	b.n	8013e04 <_vfiprintf_r+0x20>
 8013e44:	4b79      	ldr	r3, [pc, #484]	; (801402c <_vfiprintf_r+0x248>)
 8013e46:	429d      	cmp	r5, r3
 8013e48:	bf08      	it	eq
 8013e4a:	68f5      	ldreq	r5, [r6, #12]
 8013e4c:	e7da      	b.n	8013e04 <_vfiprintf_r+0x20>
 8013e4e:	89ab      	ldrh	r3, [r5, #12]
 8013e50:	0598      	lsls	r0, r3, #22
 8013e52:	d4ed      	bmi.n	8013e30 <_vfiprintf_r+0x4c>
 8013e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e56:	f7ff ff41 	bl	8013cdc <__retarget_lock_release_recursive>
 8013e5a:	e7e9      	b.n	8013e30 <_vfiprintf_r+0x4c>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e60:	2320      	movs	r3, #32
 8013e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e66:	2330      	movs	r3, #48	; 0x30
 8013e68:	f04f 0901 	mov.w	r9, #1
 8013e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014030 <_vfiprintf_r+0x24c>
 8013e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e78:	4623      	mov	r3, r4
 8013e7a:	469a      	mov	sl, r3
 8013e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e80:	b10a      	cbz	r2, 8013e86 <_vfiprintf_r+0xa2>
 8013e82:	2a25      	cmp	r2, #37	; 0x25
 8013e84:	d1f9      	bne.n	8013e7a <_vfiprintf_r+0x96>
 8013e86:	ebba 0b04 	subs.w	fp, sl, r4
 8013e8a:	d00b      	beq.n	8013ea4 <_vfiprintf_r+0xc0>
 8013e8c:	465b      	mov	r3, fp
 8013e8e:	4622      	mov	r2, r4
 8013e90:	4629      	mov	r1, r5
 8013e92:	4630      	mov	r0, r6
 8013e94:	f7ff ff93 	bl	8013dbe <__sfputs_r>
 8013e98:	3001      	adds	r0, #1
 8013e9a:	f000 80aa 	beq.w	8013ff2 <_vfiprintf_r+0x20e>
 8013e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ea0:	445a      	add	r2, fp
 8013ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f000 80a2 	beq.w	8013ff2 <_vfiprintf_r+0x20e>
 8013eae:	2300      	movs	r3, #0
 8013eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013eb8:	f10a 0a01 	add.w	sl, sl, #1
 8013ebc:	9304      	str	r3, [sp, #16]
 8013ebe:	9307      	str	r3, [sp, #28]
 8013ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8013ec6:	4654      	mov	r4, sl
 8013ec8:	2205      	movs	r2, #5
 8013eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ece:	4858      	ldr	r0, [pc, #352]	; (8014030 <_vfiprintf_r+0x24c>)
 8013ed0:	f7ff f9b8 	bl	8013244 <memchr>
 8013ed4:	9a04      	ldr	r2, [sp, #16]
 8013ed6:	b9d8      	cbnz	r0, 8013f10 <_vfiprintf_r+0x12c>
 8013ed8:	06d1      	lsls	r1, r2, #27
 8013eda:	bf44      	itt	mi
 8013edc:	2320      	movmi	r3, #32
 8013ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ee2:	0713      	lsls	r3, r2, #28
 8013ee4:	bf44      	itt	mi
 8013ee6:	232b      	movmi	r3, #43	; 0x2b
 8013ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eec:	f89a 3000 	ldrb.w	r3, [sl]
 8013ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ef2:	d015      	beq.n	8013f20 <_vfiprintf_r+0x13c>
 8013ef4:	4654      	mov	r4, sl
 8013ef6:	2000      	movs	r0, #0
 8013ef8:	f04f 0c0a 	mov.w	ip, #10
 8013efc:	9a07      	ldr	r2, [sp, #28]
 8013efe:	4621      	mov	r1, r4
 8013f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f04:	3b30      	subs	r3, #48	; 0x30
 8013f06:	2b09      	cmp	r3, #9
 8013f08:	d94e      	bls.n	8013fa8 <_vfiprintf_r+0x1c4>
 8013f0a:	b1b0      	cbz	r0, 8013f3a <_vfiprintf_r+0x156>
 8013f0c:	9207      	str	r2, [sp, #28]
 8013f0e:	e014      	b.n	8013f3a <_vfiprintf_r+0x156>
 8013f10:	eba0 0308 	sub.w	r3, r0, r8
 8013f14:	fa09 f303 	lsl.w	r3, r9, r3
 8013f18:	4313      	orrs	r3, r2
 8013f1a:	46a2      	mov	sl, r4
 8013f1c:	9304      	str	r3, [sp, #16]
 8013f1e:	e7d2      	b.n	8013ec6 <_vfiprintf_r+0xe2>
 8013f20:	9b03      	ldr	r3, [sp, #12]
 8013f22:	1d19      	adds	r1, r3, #4
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	9103      	str	r1, [sp, #12]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	bfbb      	ittet	lt
 8013f2c:	425b      	neglt	r3, r3
 8013f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8013f32:	9307      	strge	r3, [sp, #28]
 8013f34:	9307      	strlt	r3, [sp, #28]
 8013f36:	bfb8      	it	lt
 8013f38:	9204      	strlt	r2, [sp, #16]
 8013f3a:	7823      	ldrb	r3, [r4, #0]
 8013f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f3e:	d10c      	bne.n	8013f5a <_vfiprintf_r+0x176>
 8013f40:	7863      	ldrb	r3, [r4, #1]
 8013f42:	2b2a      	cmp	r3, #42	; 0x2a
 8013f44:	d135      	bne.n	8013fb2 <_vfiprintf_r+0x1ce>
 8013f46:	9b03      	ldr	r3, [sp, #12]
 8013f48:	3402      	adds	r4, #2
 8013f4a:	1d1a      	adds	r2, r3, #4
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	9203      	str	r2, [sp, #12]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	bfb8      	it	lt
 8013f54:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f58:	9305      	str	r3, [sp, #20]
 8013f5a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8014034 <_vfiprintf_r+0x250>
 8013f5e:	2203      	movs	r2, #3
 8013f60:	4650      	mov	r0, sl
 8013f62:	7821      	ldrb	r1, [r4, #0]
 8013f64:	f7ff f96e 	bl	8013244 <memchr>
 8013f68:	b140      	cbz	r0, 8013f7c <_vfiprintf_r+0x198>
 8013f6a:	2340      	movs	r3, #64	; 0x40
 8013f6c:	eba0 000a 	sub.w	r0, r0, sl
 8013f70:	fa03 f000 	lsl.w	r0, r3, r0
 8013f74:	9b04      	ldr	r3, [sp, #16]
 8013f76:	3401      	adds	r4, #1
 8013f78:	4303      	orrs	r3, r0
 8013f7a:	9304      	str	r3, [sp, #16]
 8013f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f80:	2206      	movs	r2, #6
 8013f82:	482d      	ldr	r0, [pc, #180]	; (8014038 <_vfiprintf_r+0x254>)
 8013f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f88:	f7ff f95c 	bl	8013244 <memchr>
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d03f      	beq.n	8014010 <_vfiprintf_r+0x22c>
 8013f90:	4b2a      	ldr	r3, [pc, #168]	; (801403c <_vfiprintf_r+0x258>)
 8013f92:	bb1b      	cbnz	r3, 8013fdc <_vfiprintf_r+0x1f8>
 8013f94:	9b03      	ldr	r3, [sp, #12]
 8013f96:	3307      	adds	r3, #7
 8013f98:	f023 0307 	bic.w	r3, r3, #7
 8013f9c:	3308      	adds	r3, #8
 8013f9e:	9303      	str	r3, [sp, #12]
 8013fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa2:	443b      	add	r3, r7
 8013fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fa6:	e767      	b.n	8013e78 <_vfiprintf_r+0x94>
 8013fa8:	460c      	mov	r4, r1
 8013faa:	2001      	movs	r0, #1
 8013fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fb0:	e7a5      	b.n	8013efe <_vfiprintf_r+0x11a>
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	f04f 0c0a 	mov.w	ip, #10
 8013fb8:	4619      	mov	r1, r3
 8013fba:	3401      	adds	r4, #1
 8013fbc:	9305      	str	r3, [sp, #20]
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fc4:	3a30      	subs	r2, #48	; 0x30
 8013fc6:	2a09      	cmp	r2, #9
 8013fc8:	d903      	bls.n	8013fd2 <_vfiprintf_r+0x1ee>
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d0c5      	beq.n	8013f5a <_vfiprintf_r+0x176>
 8013fce:	9105      	str	r1, [sp, #20]
 8013fd0:	e7c3      	b.n	8013f5a <_vfiprintf_r+0x176>
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fda:	e7f0      	b.n	8013fbe <_vfiprintf_r+0x1da>
 8013fdc:	ab03      	add	r3, sp, #12
 8013fde:	9300      	str	r3, [sp, #0]
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	4b16      	ldr	r3, [pc, #88]	; (8014040 <_vfiprintf_r+0x25c>)
 8013fe6:	a904      	add	r1, sp, #16
 8013fe8:	f7fd fea2 	bl	8011d30 <_printf_float>
 8013fec:	4607      	mov	r7, r0
 8013fee:	1c78      	adds	r0, r7, #1
 8013ff0:	d1d6      	bne.n	8013fa0 <_vfiprintf_r+0x1bc>
 8013ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ff4:	07d9      	lsls	r1, r3, #31
 8013ff6:	d405      	bmi.n	8014004 <_vfiprintf_r+0x220>
 8013ff8:	89ab      	ldrh	r3, [r5, #12]
 8013ffa:	059a      	lsls	r2, r3, #22
 8013ffc:	d402      	bmi.n	8014004 <_vfiprintf_r+0x220>
 8013ffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014000:	f7ff fe6c 	bl	8013cdc <__retarget_lock_release_recursive>
 8014004:	89ab      	ldrh	r3, [r5, #12]
 8014006:	065b      	lsls	r3, r3, #25
 8014008:	f53f af12 	bmi.w	8013e30 <_vfiprintf_r+0x4c>
 801400c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801400e:	e711      	b.n	8013e34 <_vfiprintf_r+0x50>
 8014010:	ab03      	add	r3, sp, #12
 8014012:	9300      	str	r3, [sp, #0]
 8014014:	462a      	mov	r2, r5
 8014016:	4630      	mov	r0, r6
 8014018:	4b09      	ldr	r3, [pc, #36]	; (8014040 <_vfiprintf_r+0x25c>)
 801401a:	a904      	add	r1, sp, #16
 801401c:	f7fe f924 	bl	8012268 <_printf_i>
 8014020:	e7e4      	b.n	8013fec <_vfiprintf_r+0x208>
 8014022:	bf00      	nop
 8014024:	0802e254 	.word	0x0802e254
 8014028:	0802e274 	.word	0x0802e274
 801402c:	0802e234 	.word	0x0802e234
 8014030:	0802e0dc 	.word	0x0802e0dc
 8014034:	0802e0e2 	.word	0x0802e0e2
 8014038:	0802e0e6 	.word	0x0802e0e6
 801403c:	08011d31 	.word	0x08011d31
 8014040:	08013dbf 	.word	0x08013dbf

08014044 <__swbuf_r>:
 8014044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014046:	460e      	mov	r6, r1
 8014048:	4614      	mov	r4, r2
 801404a:	4605      	mov	r5, r0
 801404c:	b118      	cbz	r0, 8014056 <__swbuf_r+0x12>
 801404e:	6983      	ldr	r3, [r0, #24]
 8014050:	b90b      	cbnz	r3, 8014056 <__swbuf_r+0x12>
 8014052:	f000 f9e3 	bl	801441c <__sinit>
 8014056:	4b21      	ldr	r3, [pc, #132]	; (80140dc <__swbuf_r+0x98>)
 8014058:	429c      	cmp	r4, r3
 801405a:	d12b      	bne.n	80140b4 <__swbuf_r+0x70>
 801405c:	686c      	ldr	r4, [r5, #4]
 801405e:	69a3      	ldr	r3, [r4, #24]
 8014060:	60a3      	str	r3, [r4, #8]
 8014062:	89a3      	ldrh	r3, [r4, #12]
 8014064:	071a      	lsls	r2, r3, #28
 8014066:	d52f      	bpl.n	80140c8 <__swbuf_r+0x84>
 8014068:	6923      	ldr	r3, [r4, #16]
 801406a:	b36b      	cbz	r3, 80140c8 <__swbuf_r+0x84>
 801406c:	6923      	ldr	r3, [r4, #16]
 801406e:	6820      	ldr	r0, [r4, #0]
 8014070:	b2f6      	uxtb	r6, r6
 8014072:	1ac0      	subs	r0, r0, r3
 8014074:	6963      	ldr	r3, [r4, #20]
 8014076:	4637      	mov	r7, r6
 8014078:	4283      	cmp	r3, r0
 801407a:	dc04      	bgt.n	8014086 <__swbuf_r+0x42>
 801407c:	4621      	mov	r1, r4
 801407e:	4628      	mov	r0, r5
 8014080:	f000 f938 	bl	80142f4 <_fflush_r>
 8014084:	bb30      	cbnz	r0, 80140d4 <__swbuf_r+0x90>
 8014086:	68a3      	ldr	r3, [r4, #8]
 8014088:	3001      	adds	r0, #1
 801408a:	3b01      	subs	r3, #1
 801408c:	60a3      	str	r3, [r4, #8]
 801408e:	6823      	ldr	r3, [r4, #0]
 8014090:	1c5a      	adds	r2, r3, #1
 8014092:	6022      	str	r2, [r4, #0]
 8014094:	701e      	strb	r6, [r3, #0]
 8014096:	6963      	ldr	r3, [r4, #20]
 8014098:	4283      	cmp	r3, r0
 801409a:	d004      	beq.n	80140a6 <__swbuf_r+0x62>
 801409c:	89a3      	ldrh	r3, [r4, #12]
 801409e:	07db      	lsls	r3, r3, #31
 80140a0:	d506      	bpl.n	80140b0 <__swbuf_r+0x6c>
 80140a2:	2e0a      	cmp	r6, #10
 80140a4:	d104      	bne.n	80140b0 <__swbuf_r+0x6c>
 80140a6:	4621      	mov	r1, r4
 80140a8:	4628      	mov	r0, r5
 80140aa:	f000 f923 	bl	80142f4 <_fflush_r>
 80140ae:	b988      	cbnz	r0, 80140d4 <__swbuf_r+0x90>
 80140b0:	4638      	mov	r0, r7
 80140b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b4:	4b0a      	ldr	r3, [pc, #40]	; (80140e0 <__swbuf_r+0x9c>)
 80140b6:	429c      	cmp	r4, r3
 80140b8:	d101      	bne.n	80140be <__swbuf_r+0x7a>
 80140ba:	68ac      	ldr	r4, [r5, #8]
 80140bc:	e7cf      	b.n	801405e <__swbuf_r+0x1a>
 80140be:	4b09      	ldr	r3, [pc, #36]	; (80140e4 <__swbuf_r+0xa0>)
 80140c0:	429c      	cmp	r4, r3
 80140c2:	bf08      	it	eq
 80140c4:	68ec      	ldreq	r4, [r5, #12]
 80140c6:	e7ca      	b.n	801405e <__swbuf_r+0x1a>
 80140c8:	4621      	mov	r1, r4
 80140ca:	4628      	mov	r0, r5
 80140cc:	f000 f81a 	bl	8014104 <__swsetup_r>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	d0cb      	beq.n	801406c <__swbuf_r+0x28>
 80140d4:	f04f 37ff 	mov.w	r7, #4294967295
 80140d8:	e7ea      	b.n	80140b0 <__swbuf_r+0x6c>
 80140da:	bf00      	nop
 80140dc:	0802e254 	.word	0x0802e254
 80140e0:	0802e274 	.word	0x0802e274
 80140e4:	0802e234 	.word	0x0802e234

080140e8 <__ascii_wctomb>:
 80140e8:	4603      	mov	r3, r0
 80140ea:	4608      	mov	r0, r1
 80140ec:	b141      	cbz	r1, 8014100 <__ascii_wctomb+0x18>
 80140ee:	2aff      	cmp	r2, #255	; 0xff
 80140f0:	d904      	bls.n	80140fc <__ascii_wctomb+0x14>
 80140f2:	228a      	movs	r2, #138	; 0x8a
 80140f4:	f04f 30ff 	mov.w	r0, #4294967295
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	4770      	bx	lr
 80140fc:	2001      	movs	r0, #1
 80140fe:	700a      	strb	r2, [r1, #0]
 8014100:	4770      	bx	lr
	...

08014104 <__swsetup_r>:
 8014104:	4b32      	ldr	r3, [pc, #200]	; (80141d0 <__swsetup_r+0xcc>)
 8014106:	b570      	push	{r4, r5, r6, lr}
 8014108:	681d      	ldr	r5, [r3, #0]
 801410a:	4606      	mov	r6, r0
 801410c:	460c      	mov	r4, r1
 801410e:	b125      	cbz	r5, 801411a <__swsetup_r+0x16>
 8014110:	69ab      	ldr	r3, [r5, #24]
 8014112:	b913      	cbnz	r3, 801411a <__swsetup_r+0x16>
 8014114:	4628      	mov	r0, r5
 8014116:	f000 f981 	bl	801441c <__sinit>
 801411a:	4b2e      	ldr	r3, [pc, #184]	; (80141d4 <__swsetup_r+0xd0>)
 801411c:	429c      	cmp	r4, r3
 801411e:	d10f      	bne.n	8014140 <__swsetup_r+0x3c>
 8014120:	686c      	ldr	r4, [r5, #4]
 8014122:	89a3      	ldrh	r3, [r4, #12]
 8014124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014128:	0719      	lsls	r1, r3, #28
 801412a:	d42c      	bmi.n	8014186 <__swsetup_r+0x82>
 801412c:	06dd      	lsls	r5, r3, #27
 801412e:	d411      	bmi.n	8014154 <__swsetup_r+0x50>
 8014130:	2309      	movs	r3, #9
 8014132:	6033      	str	r3, [r6, #0]
 8014134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014138:	f04f 30ff 	mov.w	r0, #4294967295
 801413c:	81a3      	strh	r3, [r4, #12]
 801413e:	e03e      	b.n	80141be <__swsetup_r+0xba>
 8014140:	4b25      	ldr	r3, [pc, #148]	; (80141d8 <__swsetup_r+0xd4>)
 8014142:	429c      	cmp	r4, r3
 8014144:	d101      	bne.n	801414a <__swsetup_r+0x46>
 8014146:	68ac      	ldr	r4, [r5, #8]
 8014148:	e7eb      	b.n	8014122 <__swsetup_r+0x1e>
 801414a:	4b24      	ldr	r3, [pc, #144]	; (80141dc <__swsetup_r+0xd8>)
 801414c:	429c      	cmp	r4, r3
 801414e:	bf08      	it	eq
 8014150:	68ec      	ldreq	r4, [r5, #12]
 8014152:	e7e6      	b.n	8014122 <__swsetup_r+0x1e>
 8014154:	0758      	lsls	r0, r3, #29
 8014156:	d512      	bpl.n	801417e <__swsetup_r+0x7a>
 8014158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801415a:	b141      	cbz	r1, 801416e <__swsetup_r+0x6a>
 801415c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014160:	4299      	cmp	r1, r3
 8014162:	d002      	beq.n	801416a <__swsetup_r+0x66>
 8014164:	4630      	mov	r0, r6
 8014166:	f7fd fc69 	bl	8011a3c <_free_r>
 801416a:	2300      	movs	r3, #0
 801416c:	6363      	str	r3, [r4, #52]	; 0x34
 801416e:	89a3      	ldrh	r3, [r4, #12]
 8014170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014174:	81a3      	strh	r3, [r4, #12]
 8014176:	2300      	movs	r3, #0
 8014178:	6063      	str	r3, [r4, #4]
 801417a:	6923      	ldr	r3, [r4, #16]
 801417c:	6023      	str	r3, [r4, #0]
 801417e:	89a3      	ldrh	r3, [r4, #12]
 8014180:	f043 0308 	orr.w	r3, r3, #8
 8014184:	81a3      	strh	r3, [r4, #12]
 8014186:	6923      	ldr	r3, [r4, #16]
 8014188:	b94b      	cbnz	r3, 801419e <__swsetup_r+0x9a>
 801418a:	89a3      	ldrh	r3, [r4, #12]
 801418c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014194:	d003      	beq.n	801419e <__swsetup_r+0x9a>
 8014196:	4621      	mov	r1, r4
 8014198:	4630      	mov	r0, r6
 801419a:	f000 fa01 	bl	80145a0 <__smakebuf_r>
 801419e:	89a0      	ldrh	r0, [r4, #12]
 80141a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141a4:	f010 0301 	ands.w	r3, r0, #1
 80141a8:	d00a      	beq.n	80141c0 <__swsetup_r+0xbc>
 80141aa:	2300      	movs	r3, #0
 80141ac:	60a3      	str	r3, [r4, #8]
 80141ae:	6963      	ldr	r3, [r4, #20]
 80141b0:	425b      	negs	r3, r3
 80141b2:	61a3      	str	r3, [r4, #24]
 80141b4:	6923      	ldr	r3, [r4, #16]
 80141b6:	b943      	cbnz	r3, 80141ca <__swsetup_r+0xc6>
 80141b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80141bc:	d1ba      	bne.n	8014134 <__swsetup_r+0x30>
 80141be:	bd70      	pop	{r4, r5, r6, pc}
 80141c0:	0781      	lsls	r1, r0, #30
 80141c2:	bf58      	it	pl
 80141c4:	6963      	ldrpl	r3, [r4, #20]
 80141c6:	60a3      	str	r3, [r4, #8]
 80141c8:	e7f4      	b.n	80141b4 <__swsetup_r+0xb0>
 80141ca:	2000      	movs	r0, #0
 80141cc:	e7f7      	b.n	80141be <__swsetup_r+0xba>
 80141ce:	bf00      	nop
 80141d0:	20000168 	.word	0x20000168
 80141d4:	0802e254 	.word	0x0802e254
 80141d8:	0802e274 	.word	0x0802e274
 80141dc:	0802e234 	.word	0x0802e234

080141e0 <abort>:
 80141e0:	2006      	movs	r0, #6
 80141e2:	b508      	push	{r3, lr}
 80141e4:	f000 fa4c 	bl	8014680 <raise>
 80141e8:	2001      	movs	r0, #1
 80141ea:	f7ef faf6 	bl	80037da <_exit>
	...

080141f0 <__sflush_r>:
 80141f0:	898a      	ldrh	r2, [r1, #12]
 80141f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f4:	4605      	mov	r5, r0
 80141f6:	0710      	lsls	r0, r2, #28
 80141f8:	460c      	mov	r4, r1
 80141fa:	d457      	bmi.n	80142ac <__sflush_r+0xbc>
 80141fc:	684b      	ldr	r3, [r1, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	dc04      	bgt.n	801420c <__sflush_r+0x1c>
 8014202:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014204:	2b00      	cmp	r3, #0
 8014206:	dc01      	bgt.n	801420c <__sflush_r+0x1c>
 8014208:	2000      	movs	r0, #0
 801420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801420c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801420e:	2e00      	cmp	r6, #0
 8014210:	d0fa      	beq.n	8014208 <__sflush_r+0x18>
 8014212:	2300      	movs	r3, #0
 8014214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014218:	682f      	ldr	r7, [r5, #0]
 801421a:	602b      	str	r3, [r5, #0]
 801421c:	d032      	beq.n	8014284 <__sflush_r+0x94>
 801421e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014220:	89a3      	ldrh	r3, [r4, #12]
 8014222:	075a      	lsls	r2, r3, #29
 8014224:	d505      	bpl.n	8014232 <__sflush_r+0x42>
 8014226:	6863      	ldr	r3, [r4, #4]
 8014228:	1ac0      	subs	r0, r0, r3
 801422a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801422c:	b10b      	cbz	r3, 8014232 <__sflush_r+0x42>
 801422e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014230:	1ac0      	subs	r0, r0, r3
 8014232:	2300      	movs	r3, #0
 8014234:	4602      	mov	r2, r0
 8014236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014238:	4628      	mov	r0, r5
 801423a:	6a21      	ldr	r1, [r4, #32]
 801423c:	47b0      	blx	r6
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	89a3      	ldrh	r3, [r4, #12]
 8014242:	d106      	bne.n	8014252 <__sflush_r+0x62>
 8014244:	6829      	ldr	r1, [r5, #0]
 8014246:	291d      	cmp	r1, #29
 8014248:	d82c      	bhi.n	80142a4 <__sflush_r+0xb4>
 801424a:	4a29      	ldr	r2, [pc, #164]	; (80142f0 <__sflush_r+0x100>)
 801424c:	40ca      	lsrs	r2, r1
 801424e:	07d6      	lsls	r6, r2, #31
 8014250:	d528      	bpl.n	80142a4 <__sflush_r+0xb4>
 8014252:	2200      	movs	r2, #0
 8014254:	6062      	str	r2, [r4, #4]
 8014256:	6922      	ldr	r2, [r4, #16]
 8014258:	04d9      	lsls	r1, r3, #19
 801425a:	6022      	str	r2, [r4, #0]
 801425c:	d504      	bpl.n	8014268 <__sflush_r+0x78>
 801425e:	1c42      	adds	r2, r0, #1
 8014260:	d101      	bne.n	8014266 <__sflush_r+0x76>
 8014262:	682b      	ldr	r3, [r5, #0]
 8014264:	b903      	cbnz	r3, 8014268 <__sflush_r+0x78>
 8014266:	6560      	str	r0, [r4, #84]	; 0x54
 8014268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801426a:	602f      	str	r7, [r5, #0]
 801426c:	2900      	cmp	r1, #0
 801426e:	d0cb      	beq.n	8014208 <__sflush_r+0x18>
 8014270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014274:	4299      	cmp	r1, r3
 8014276:	d002      	beq.n	801427e <__sflush_r+0x8e>
 8014278:	4628      	mov	r0, r5
 801427a:	f7fd fbdf 	bl	8011a3c <_free_r>
 801427e:	2000      	movs	r0, #0
 8014280:	6360      	str	r0, [r4, #52]	; 0x34
 8014282:	e7c2      	b.n	801420a <__sflush_r+0x1a>
 8014284:	6a21      	ldr	r1, [r4, #32]
 8014286:	2301      	movs	r3, #1
 8014288:	4628      	mov	r0, r5
 801428a:	47b0      	blx	r6
 801428c:	1c41      	adds	r1, r0, #1
 801428e:	d1c7      	bne.n	8014220 <__sflush_r+0x30>
 8014290:	682b      	ldr	r3, [r5, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d0c4      	beq.n	8014220 <__sflush_r+0x30>
 8014296:	2b1d      	cmp	r3, #29
 8014298:	d001      	beq.n	801429e <__sflush_r+0xae>
 801429a:	2b16      	cmp	r3, #22
 801429c:	d101      	bne.n	80142a2 <__sflush_r+0xb2>
 801429e:	602f      	str	r7, [r5, #0]
 80142a0:	e7b2      	b.n	8014208 <__sflush_r+0x18>
 80142a2:	89a3      	ldrh	r3, [r4, #12]
 80142a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142a8:	81a3      	strh	r3, [r4, #12]
 80142aa:	e7ae      	b.n	801420a <__sflush_r+0x1a>
 80142ac:	690f      	ldr	r7, [r1, #16]
 80142ae:	2f00      	cmp	r7, #0
 80142b0:	d0aa      	beq.n	8014208 <__sflush_r+0x18>
 80142b2:	0793      	lsls	r3, r2, #30
 80142b4:	bf18      	it	ne
 80142b6:	2300      	movne	r3, #0
 80142b8:	680e      	ldr	r6, [r1, #0]
 80142ba:	bf08      	it	eq
 80142bc:	694b      	ldreq	r3, [r1, #20]
 80142be:	1bf6      	subs	r6, r6, r7
 80142c0:	600f      	str	r7, [r1, #0]
 80142c2:	608b      	str	r3, [r1, #8]
 80142c4:	2e00      	cmp	r6, #0
 80142c6:	dd9f      	ble.n	8014208 <__sflush_r+0x18>
 80142c8:	4633      	mov	r3, r6
 80142ca:	463a      	mov	r2, r7
 80142cc:	4628      	mov	r0, r5
 80142ce:	6a21      	ldr	r1, [r4, #32]
 80142d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80142d4:	47e0      	blx	ip
 80142d6:	2800      	cmp	r0, #0
 80142d8:	dc06      	bgt.n	80142e8 <__sflush_r+0xf8>
 80142da:	89a3      	ldrh	r3, [r4, #12]
 80142dc:	f04f 30ff 	mov.w	r0, #4294967295
 80142e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142e4:	81a3      	strh	r3, [r4, #12]
 80142e6:	e790      	b.n	801420a <__sflush_r+0x1a>
 80142e8:	4407      	add	r7, r0
 80142ea:	1a36      	subs	r6, r6, r0
 80142ec:	e7ea      	b.n	80142c4 <__sflush_r+0xd4>
 80142ee:	bf00      	nop
 80142f0:	20400001 	.word	0x20400001

080142f4 <_fflush_r>:
 80142f4:	b538      	push	{r3, r4, r5, lr}
 80142f6:	690b      	ldr	r3, [r1, #16]
 80142f8:	4605      	mov	r5, r0
 80142fa:	460c      	mov	r4, r1
 80142fc:	b913      	cbnz	r3, 8014304 <_fflush_r+0x10>
 80142fe:	2500      	movs	r5, #0
 8014300:	4628      	mov	r0, r5
 8014302:	bd38      	pop	{r3, r4, r5, pc}
 8014304:	b118      	cbz	r0, 801430e <_fflush_r+0x1a>
 8014306:	6983      	ldr	r3, [r0, #24]
 8014308:	b90b      	cbnz	r3, 801430e <_fflush_r+0x1a>
 801430a:	f000 f887 	bl	801441c <__sinit>
 801430e:	4b14      	ldr	r3, [pc, #80]	; (8014360 <_fflush_r+0x6c>)
 8014310:	429c      	cmp	r4, r3
 8014312:	d11b      	bne.n	801434c <_fflush_r+0x58>
 8014314:	686c      	ldr	r4, [r5, #4]
 8014316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d0ef      	beq.n	80142fe <_fflush_r+0xa>
 801431e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014320:	07d0      	lsls	r0, r2, #31
 8014322:	d404      	bmi.n	801432e <_fflush_r+0x3a>
 8014324:	0599      	lsls	r1, r3, #22
 8014326:	d402      	bmi.n	801432e <_fflush_r+0x3a>
 8014328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801432a:	f7ff fcd6 	bl	8013cda <__retarget_lock_acquire_recursive>
 801432e:	4628      	mov	r0, r5
 8014330:	4621      	mov	r1, r4
 8014332:	f7ff ff5d 	bl	80141f0 <__sflush_r>
 8014336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014338:	4605      	mov	r5, r0
 801433a:	07da      	lsls	r2, r3, #31
 801433c:	d4e0      	bmi.n	8014300 <_fflush_r+0xc>
 801433e:	89a3      	ldrh	r3, [r4, #12]
 8014340:	059b      	lsls	r3, r3, #22
 8014342:	d4dd      	bmi.n	8014300 <_fflush_r+0xc>
 8014344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014346:	f7ff fcc9 	bl	8013cdc <__retarget_lock_release_recursive>
 801434a:	e7d9      	b.n	8014300 <_fflush_r+0xc>
 801434c:	4b05      	ldr	r3, [pc, #20]	; (8014364 <_fflush_r+0x70>)
 801434e:	429c      	cmp	r4, r3
 8014350:	d101      	bne.n	8014356 <_fflush_r+0x62>
 8014352:	68ac      	ldr	r4, [r5, #8]
 8014354:	e7df      	b.n	8014316 <_fflush_r+0x22>
 8014356:	4b04      	ldr	r3, [pc, #16]	; (8014368 <_fflush_r+0x74>)
 8014358:	429c      	cmp	r4, r3
 801435a:	bf08      	it	eq
 801435c:	68ec      	ldreq	r4, [r5, #12]
 801435e:	e7da      	b.n	8014316 <_fflush_r+0x22>
 8014360:	0802e254 	.word	0x0802e254
 8014364:	0802e274 	.word	0x0802e274
 8014368:	0802e234 	.word	0x0802e234

0801436c <std>:
 801436c:	2300      	movs	r3, #0
 801436e:	b510      	push	{r4, lr}
 8014370:	4604      	mov	r4, r0
 8014372:	e9c0 3300 	strd	r3, r3, [r0]
 8014376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801437a:	6083      	str	r3, [r0, #8]
 801437c:	8181      	strh	r1, [r0, #12]
 801437e:	6643      	str	r3, [r0, #100]	; 0x64
 8014380:	81c2      	strh	r2, [r0, #14]
 8014382:	6183      	str	r3, [r0, #24]
 8014384:	4619      	mov	r1, r3
 8014386:	2208      	movs	r2, #8
 8014388:	305c      	adds	r0, #92	; 0x5c
 801438a:	f7fd fb4f 	bl	8011a2c <memset>
 801438e:	4b05      	ldr	r3, [pc, #20]	; (80143a4 <std+0x38>)
 8014390:	6224      	str	r4, [r4, #32]
 8014392:	6263      	str	r3, [r4, #36]	; 0x24
 8014394:	4b04      	ldr	r3, [pc, #16]	; (80143a8 <std+0x3c>)
 8014396:	62a3      	str	r3, [r4, #40]	; 0x28
 8014398:	4b04      	ldr	r3, [pc, #16]	; (80143ac <std+0x40>)
 801439a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801439c:	4b04      	ldr	r3, [pc, #16]	; (80143b0 <std+0x44>)
 801439e:	6323      	str	r3, [r4, #48]	; 0x30
 80143a0:	bd10      	pop	{r4, pc}
 80143a2:	bf00      	nop
 80143a4:	080146b9 	.word	0x080146b9
 80143a8:	080146db 	.word	0x080146db
 80143ac:	08014713 	.word	0x08014713
 80143b0:	08014737 	.word	0x08014737

080143b4 <_cleanup_r>:
 80143b4:	4901      	ldr	r1, [pc, #4]	; (80143bc <_cleanup_r+0x8>)
 80143b6:	f000 b8af 	b.w	8014518 <_fwalk_reent>
 80143ba:	bf00      	nop
 80143bc:	080142f5 	.word	0x080142f5

080143c0 <__sfmoreglue>:
 80143c0:	2268      	movs	r2, #104	; 0x68
 80143c2:	b570      	push	{r4, r5, r6, lr}
 80143c4:	1e4d      	subs	r5, r1, #1
 80143c6:	4355      	muls	r5, r2
 80143c8:	460e      	mov	r6, r1
 80143ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143ce:	f7fd fb9d 	bl	8011b0c <_malloc_r>
 80143d2:	4604      	mov	r4, r0
 80143d4:	b140      	cbz	r0, 80143e8 <__sfmoreglue+0x28>
 80143d6:	2100      	movs	r1, #0
 80143d8:	e9c0 1600 	strd	r1, r6, [r0]
 80143dc:	300c      	adds	r0, #12
 80143de:	60a0      	str	r0, [r4, #8]
 80143e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143e4:	f7fd fb22 	bl	8011a2c <memset>
 80143e8:	4620      	mov	r0, r4
 80143ea:	bd70      	pop	{r4, r5, r6, pc}

080143ec <__sfp_lock_acquire>:
 80143ec:	4801      	ldr	r0, [pc, #4]	; (80143f4 <__sfp_lock_acquire+0x8>)
 80143ee:	f7ff bc74 	b.w	8013cda <__retarget_lock_acquire_recursive>
 80143f2:	bf00      	nop
 80143f4:	2000166d 	.word	0x2000166d

080143f8 <__sfp_lock_release>:
 80143f8:	4801      	ldr	r0, [pc, #4]	; (8014400 <__sfp_lock_release+0x8>)
 80143fa:	f7ff bc6f 	b.w	8013cdc <__retarget_lock_release_recursive>
 80143fe:	bf00      	nop
 8014400:	2000166d 	.word	0x2000166d

08014404 <__sinit_lock_acquire>:
 8014404:	4801      	ldr	r0, [pc, #4]	; (801440c <__sinit_lock_acquire+0x8>)
 8014406:	f7ff bc68 	b.w	8013cda <__retarget_lock_acquire_recursive>
 801440a:	bf00      	nop
 801440c:	2000166e 	.word	0x2000166e

08014410 <__sinit_lock_release>:
 8014410:	4801      	ldr	r0, [pc, #4]	; (8014418 <__sinit_lock_release+0x8>)
 8014412:	f7ff bc63 	b.w	8013cdc <__retarget_lock_release_recursive>
 8014416:	bf00      	nop
 8014418:	2000166e 	.word	0x2000166e

0801441c <__sinit>:
 801441c:	b510      	push	{r4, lr}
 801441e:	4604      	mov	r4, r0
 8014420:	f7ff fff0 	bl	8014404 <__sinit_lock_acquire>
 8014424:	69a3      	ldr	r3, [r4, #24]
 8014426:	b11b      	cbz	r3, 8014430 <__sinit+0x14>
 8014428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801442c:	f7ff bff0 	b.w	8014410 <__sinit_lock_release>
 8014430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014434:	6523      	str	r3, [r4, #80]	; 0x50
 8014436:	4b13      	ldr	r3, [pc, #76]	; (8014484 <__sinit+0x68>)
 8014438:	4a13      	ldr	r2, [pc, #76]	; (8014488 <__sinit+0x6c>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	62a2      	str	r2, [r4, #40]	; 0x28
 801443e:	42a3      	cmp	r3, r4
 8014440:	bf08      	it	eq
 8014442:	2301      	moveq	r3, #1
 8014444:	4620      	mov	r0, r4
 8014446:	bf08      	it	eq
 8014448:	61a3      	streq	r3, [r4, #24]
 801444a:	f000 f81f 	bl	801448c <__sfp>
 801444e:	6060      	str	r0, [r4, #4]
 8014450:	4620      	mov	r0, r4
 8014452:	f000 f81b 	bl	801448c <__sfp>
 8014456:	60a0      	str	r0, [r4, #8]
 8014458:	4620      	mov	r0, r4
 801445a:	f000 f817 	bl	801448c <__sfp>
 801445e:	2200      	movs	r2, #0
 8014460:	2104      	movs	r1, #4
 8014462:	60e0      	str	r0, [r4, #12]
 8014464:	6860      	ldr	r0, [r4, #4]
 8014466:	f7ff ff81 	bl	801436c <std>
 801446a:	2201      	movs	r2, #1
 801446c:	2109      	movs	r1, #9
 801446e:	68a0      	ldr	r0, [r4, #8]
 8014470:	f7ff ff7c 	bl	801436c <std>
 8014474:	2202      	movs	r2, #2
 8014476:	2112      	movs	r1, #18
 8014478:	68e0      	ldr	r0, [r4, #12]
 801447a:	f7ff ff77 	bl	801436c <std>
 801447e:	2301      	movs	r3, #1
 8014480:	61a3      	str	r3, [r4, #24]
 8014482:	e7d1      	b.n	8014428 <__sinit+0xc>
 8014484:	0802deb8 	.word	0x0802deb8
 8014488:	080143b5 	.word	0x080143b5

0801448c <__sfp>:
 801448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448e:	4607      	mov	r7, r0
 8014490:	f7ff ffac 	bl	80143ec <__sfp_lock_acquire>
 8014494:	4b1e      	ldr	r3, [pc, #120]	; (8014510 <__sfp+0x84>)
 8014496:	681e      	ldr	r6, [r3, #0]
 8014498:	69b3      	ldr	r3, [r6, #24]
 801449a:	b913      	cbnz	r3, 80144a2 <__sfp+0x16>
 801449c:	4630      	mov	r0, r6
 801449e:	f7ff ffbd 	bl	801441c <__sinit>
 80144a2:	3648      	adds	r6, #72	; 0x48
 80144a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144a8:	3b01      	subs	r3, #1
 80144aa:	d503      	bpl.n	80144b4 <__sfp+0x28>
 80144ac:	6833      	ldr	r3, [r6, #0]
 80144ae:	b30b      	cbz	r3, 80144f4 <__sfp+0x68>
 80144b0:	6836      	ldr	r6, [r6, #0]
 80144b2:	e7f7      	b.n	80144a4 <__sfp+0x18>
 80144b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144b8:	b9d5      	cbnz	r5, 80144f0 <__sfp+0x64>
 80144ba:	4b16      	ldr	r3, [pc, #88]	; (8014514 <__sfp+0x88>)
 80144bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144c0:	60e3      	str	r3, [r4, #12]
 80144c2:	6665      	str	r5, [r4, #100]	; 0x64
 80144c4:	f7ff fc08 	bl	8013cd8 <__retarget_lock_init_recursive>
 80144c8:	f7ff ff96 	bl	80143f8 <__sfp_lock_release>
 80144cc:	2208      	movs	r2, #8
 80144ce:	4629      	mov	r1, r5
 80144d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144d8:	6025      	str	r5, [r4, #0]
 80144da:	61a5      	str	r5, [r4, #24]
 80144dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144e0:	f7fd faa4 	bl	8011a2c <memset>
 80144e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144ec:	4620      	mov	r0, r4
 80144ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f0:	3468      	adds	r4, #104	; 0x68
 80144f2:	e7d9      	b.n	80144a8 <__sfp+0x1c>
 80144f4:	2104      	movs	r1, #4
 80144f6:	4638      	mov	r0, r7
 80144f8:	f7ff ff62 	bl	80143c0 <__sfmoreglue>
 80144fc:	4604      	mov	r4, r0
 80144fe:	6030      	str	r0, [r6, #0]
 8014500:	2800      	cmp	r0, #0
 8014502:	d1d5      	bne.n	80144b0 <__sfp+0x24>
 8014504:	f7ff ff78 	bl	80143f8 <__sfp_lock_release>
 8014508:	230c      	movs	r3, #12
 801450a:	603b      	str	r3, [r7, #0]
 801450c:	e7ee      	b.n	80144ec <__sfp+0x60>
 801450e:	bf00      	nop
 8014510:	0802deb8 	.word	0x0802deb8
 8014514:	ffff0001 	.word	0xffff0001

08014518 <_fwalk_reent>:
 8014518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801451c:	4606      	mov	r6, r0
 801451e:	4688      	mov	r8, r1
 8014520:	2700      	movs	r7, #0
 8014522:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801452a:	f1b9 0901 	subs.w	r9, r9, #1
 801452e:	d505      	bpl.n	801453c <_fwalk_reent+0x24>
 8014530:	6824      	ldr	r4, [r4, #0]
 8014532:	2c00      	cmp	r4, #0
 8014534:	d1f7      	bne.n	8014526 <_fwalk_reent+0xe>
 8014536:	4638      	mov	r0, r7
 8014538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801453c:	89ab      	ldrh	r3, [r5, #12]
 801453e:	2b01      	cmp	r3, #1
 8014540:	d907      	bls.n	8014552 <_fwalk_reent+0x3a>
 8014542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014546:	3301      	adds	r3, #1
 8014548:	d003      	beq.n	8014552 <_fwalk_reent+0x3a>
 801454a:	4629      	mov	r1, r5
 801454c:	4630      	mov	r0, r6
 801454e:	47c0      	blx	r8
 8014550:	4307      	orrs	r7, r0
 8014552:	3568      	adds	r5, #104	; 0x68
 8014554:	e7e9      	b.n	801452a <_fwalk_reent+0x12>

08014556 <__swhatbuf_r>:
 8014556:	b570      	push	{r4, r5, r6, lr}
 8014558:	460e      	mov	r6, r1
 801455a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801455e:	4614      	mov	r4, r2
 8014560:	2900      	cmp	r1, #0
 8014562:	461d      	mov	r5, r3
 8014564:	b096      	sub	sp, #88	; 0x58
 8014566:	da08      	bge.n	801457a <__swhatbuf_r+0x24>
 8014568:	2200      	movs	r2, #0
 801456a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801456e:	602a      	str	r2, [r5, #0]
 8014570:	061a      	lsls	r2, r3, #24
 8014572:	d410      	bmi.n	8014596 <__swhatbuf_r+0x40>
 8014574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014578:	e00e      	b.n	8014598 <__swhatbuf_r+0x42>
 801457a:	466a      	mov	r2, sp
 801457c:	f000 f902 	bl	8014784 <_fstat_r>
 8014580:	2800      	cmp	r0, #0
 8014582:	dbf1      	blt.n	8014568 <__swhatbuf_r+0x12>
 8014584:	9a01      	ldr	r2, [sp, #4]
 8014586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801458a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801458e:	425a      	negs	r2, r3
 8014590:	415a      	adcs	r2, r3
 8014592:	602a      	str	r2, [r5, #0]
 8014594:	e7ee      	b.n	8014574 <__swhatbuf_r+0x1e>
 8014596:	2340      	movs	r3, #64	; 0x40
 8014598:	2000      	movs	r0, #0
 801459a:	6023      	str	r3, [r4, #0]
 801459c:	b016      	add	sp, #88	; 0x58
 801459e:	bd70      	pop	{r4, r5, r6, pc}

080145a0 <__smakebuf_r>:
 80145a0:	898b      	ldrh	r3, [r1, #12]
 80145a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145a4:	079d      	lsls	r5, r3, #30
 80145a6:	4606      	mov	r6, r0
 80145a8:	460c      	mov	r4, r1
 80145aa:	d507      	bpl.n	80145bc <__smakebuf_r+0x1c>
 80145ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	6123      	str	r3, [r4, #16]
 80145b4:	2301      	movs	r3, #1
 80145b6:	6163      	str	r3, [r4, #20]
 80145b8:	b002      	add	sp, #8
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
 80145bc:	466a      	mov	r2, sp
 80145be:	ab01      	add	r3, sp, #4
 80145c0:	f7ff ffc9 	bl	8014556 <__swhatbuf_r>
 80145c4:	9900      	ldr	r1, [sp, #0]
 80145c6:	4605      	mov	r5, r0
 80145c8:	4630      	mov	r0, r6
 80145ca:	f7fd fa9f 	bl	8011b0c <_malloc_r>
 80145ce:	b948      	cbnz	r0, 80145e4 <__smakebuf_r+0x44>
 80145d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145d4:	059a      	lsls	r2, r3, #22
 80145d6:	d4ef      	bmi.n	80145b8 <__smakebuf_r+0x18>
 80145d8:	f023 0303 	bic.w	r3, r3, #3
 80145dc:	f043 0302 	orr.w	r3, r3, #2
 80145e0:	81a3      	strh	r3, [r4, #12]
 80145e2:	e7e3      	b.n	80145ac <__smakebuf_r+0xc>
 80145e4:	4b0d      	ldr	r3, [pc, #52]	; (801461c <__smakebuf_r+0x7c>)
 80145e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80145e8:	89a3      	ldrh	r3, [r4, #12]
 80145ea:	6020      	str	r0, [r4, #0]
 80145ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145f0:	81a3      	strh	r3, [r4, #12]
 80145f2:	9b00      	ldr	r3, [sp, #0]
 80145f4:	6120      	str	r0, [r4, #16]
 80145f6:	6163      	str	r3, [r4, #20]
 80145f8:	9b01      	ldr	r3, [sp, #4]
 80145fa:	b15b      	cbz	r3, 8014614 <__smakebuf_r+0x74>
 80145fc:	4630      	mov	r0, r6
 80145fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014602:	f000 f8d1 	bl	80147a8 <_isatty_r>
 8014606:	b128      	cbz	r0, 8014614 <__smakebuf_r+0x74>
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	f023 0303 	bic.w	r3, r3, #3
 801460e:	f043 0301 	orr.w	r3, r3, #1
 8014612:	81a3      	strh	r3, [r4, #12]
 8014614:	89a0      	ldrh	r0, [r4, #12]
 8014616:	4305      	orrs	r5, r0
 8014618:	81a5      	strh	r5, [r4, #12]
 801461a:	e7cd      	b.n	80145b8 <__smakebuf_r+0x18>
 801461c:	080143b5 	.word	0x080143b5

08014620 <_malloc_usable_size_r>:
 8014620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014624:	1f18      	subs	r0, r3, #4
 8014626:	2b00      	cmp	r3, #0
 8014628:	bfbc      	itt	lt
 801462a:	580b      	ldrlt	r3, [r1, r0]
 801462c:	18c0      	addlt	r0, r0, r3
 801462e:	4770      	bx	lr

08014630 <_raise_r>:
 8014630:	291f      	cmp	r1, #31
 8014632:	b538      	push	{r3, r4, r5, lr}
 8014634:	4604      	mov	r4, r0
 8014636:	460d      	mov	r5, r1
 8014638:	d904      	bls.n	8014644 <_raise_r+0x14>
 801463a:	2316      	movs	r3, #22
 801463c:	6003      	str	r3, [r0, #0]
 801463e:	f04f 30ff 	mov.w	r0, #4294967295
 8014642:	bd38      	pop	{r3, r4, r5, pc}
 8014644:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014646:	b112      	cbz	r2, 801464e <_raise_r+0x1e>
 8014648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801464c:	b94b      	cbnz	r3, 8014662 <_raise_r+0x32>
 801464e:	4620      	mov	r0, r4
 8014650:	f000 f830 	bl	80146b4 <_getpid_r>
 8014654:	462a      	mov	r2, r5
 8014656:	4601      	mov	r1, r0
 8014658:	4620      	mov	r0, r4
 801465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801465e:	f000 b817 	b.w	8014690 <_kill_r>
 8014662:	2b01      	cmp	r3, #1
 8014664:	d00a      	beq.n	801467c <_raise_r+0x4c>
 8014666:	1c59      	adds	r1, r3, #1
 8014668:	d103      	bne.n	8014672 <_raise_r+0x42>
 801466a:	2316      	movs	r3, #22
 801466c:	6003      	str	r3, [r0, #0]
 801466e:	2001      	movs	r0, #1
 8014670:	e7e7      	b.n	8014642 <_raise_r+0x12>
 8014672:	2400      	movs	r4, #0
 8014674:	4628      	mov	r0, r5
 8014676:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801467a:	4798      	blx	r3
 801467c:	2000      	movs	r0, #0
 801467e:	e7e0      	b.n	8014642 <_raise_r+0x12>

08014680 <raise>:
 8014680:	4b02      	ldr	r3, [pc, #8]	; (801468c <raise+0xc>)
 8014682:	4601      	mov	r1, r0
 8014684:	6818      	ldr	r0, [r3, #0]
 8014686:	f7ff bfd3 	b.w	8014630 <_raise_r>
 801468a:	bf00      	nop
 801468c:	20000168 	.word	0x20000168

08014690 <_kill_r>:
 8014690:	b538      	push	{r3, r4, r5, lr}
 8014692:	2300      	movs	r3, #0
 8014694:	4d06      	ldr	r5, [pc, #24]	; (80146b0 <_kill_r+0x20>)
 8014696:	4604      	mov	r4, r0
 8014698:	4608      	mov	r0, r1
 801469a:	4611      	mov	r1, r2
 801469c:	602b      	str	r3, [r5, #0]
 801469e:	f7ef f88c 	bl	80037ba <_kill>
 80146a2:	1c43      	adds	r3, r0, #1
 80146a4:	d102      	bne.n	80146ac <_kill_r+0x1c>
 80146a6:	682b      	ldr	r3, [r5, #0]
 80146a8:	b103      	cbz	r3, 80146ac <_kill_r+0x1c>
 80146aa:	6023      	str	r3, [r4, #0]
 80146ac:	bd38      	pop	{r3, r4, r5, pc}
 80146ae:	bf00      	nop
 80146b0:	20001668 	.word	0x20001668

080146b4 <_getpid_r>:
 80146b4:	f7ef b87a 	b.w	80037ac <_getpid>

080146b8 <__sread>:
 80146b8:	b510      	push	{r4, lr}
 80146ba:	460c      	mov	r4, r1
 80146bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c0:	f000 f894 	bl	80147ec <_read_r>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	bfab      	itete	ge
 80146c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146ca:	89a3      	ldrhlt	r3, [r4, #12]
 80146cc:	181b      	addge	r3, r3, r0
 80146ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146d2:	bfac      	ite	ge
 80146d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80146d6:	81a3      	strhlt	r3, [r4, #12]
 80146d8:	bd10      	pop	{r4, pc}

080146da <__swrite>:
 80146da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146de:	461f      	mov	r7, r3
 80146e0:	898b      	ldrh	r3, [r1, #12]
 80146e2:	4605      	mov	r5, r0
 80146e4:	05db      	lsls	r3, r3, #23
 80146e6:	460c      	mov	r4, r1
 80146e8:	4616      	mov	r6, r2
 80146ea:	d505      	bpl.n	80146f8 <__swrite+0x1e>
 80146ec:	2302      	movs	r3, #2
 80146ee:	2200      	movs	r2, #0
 80146f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f4:	f000 f868 	bl	80147c8 <_lseek_r>
 80146f8:	89a3      	ldrh	r3, [r4, #12]
 80146fa:	4632      	mov	r2, r6
 80146fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014700:	81a3      	strh	r3, [r4, #12]
 8014702:	4628      	mov	r0, r5
 8014704:	463b      	mov	r3, r7
 8014706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801470a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801470e:	f000 b817 	b.w	8014740 <_write_r>

08014712 <__sseek>:
 8014712:	b510      	push	{r4, lr}
 8014714:	460c      	mov	r4, r1
 8014716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801471a:	f000 f855 	bl	80147c8 <_lseek_r>
 801471e:	1c43      	adds	r3, r0, #1
 8014720:	89a3      	ldrh	r3, [r4, #12]
 8014722:	bf15      	itete	ne
 8014724:	6560      	strne	r0, [r4, #84]	; 0x54
 8014726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801472a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801472e:	81a3      	strheq	r3, [r4, #12]
 8014730:	bf18      	it	ne
 8014732:	81a3      	strhne	r3, [r4, #12]
 8014734:	bd10      	pop	{r4, pc}

08014736 <__sclose>:
 8014736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801473a:	f000 b813 	b.w	8014764 <_close_r>
	...

08014740 <_write_r>:
 8014740:	b538      	push	{r3, r4, r5, lr}
 8014742:	4604      	mov	r4, r0
 8014744:	4608      	mov	r0, r1
 8014746:	4611      	mov	r1, r2
 8014748:	2200      	movs	r2, #0
 801474a:	4d05      	ldr	r5, [pc, #20]	; (8014760 <_write_r+0x20>)
 801474c:	602a      	str	r2, [r5, #0]
 801474e:	461a      	mov	r2, r3
 8014750:	f7ef f86a 	bl	8003828 <_write>
 8014754:	1c43      	adds	r3, r0, #1
 8014756:	d102      	bne.n	801475e <_write_r+0x1e>
 8014758:	682b      	ldr	r3, [r5, #0]
 801475a:	b103      	cbz	r3, 801475e <_write_r+0x1e>
 801475c:	6023      	str	r3, [r4, #0]
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	20001668 	.word	0x20001668

08014764 <_close_r>:
 8014764:	b538      	push	{r3, r4, r5, lr}
 8014766:	2300      	movs	r3, #0
 8014768:	4d05      	ldr	r5, [pc, #20]	; (8014780 <_close_r+0x1c>)
 801476a:	4604      	mov	r4, r0
 801476c:	4608      	mov	r0, r1
 801476e:	602b      	str	r3, [r5, #0]
 8014770:	f7ef f876 	bl	8003860 <_close>
 8014774:	1c43      	adds	r3, r0, #1
 8014776:	d102      	bne.n	801477e <_close_r+0x1a>
 8014778:	682b      	ldr	r3, [r5, #0]
 801477a:	b103      	cbz	r3, 801477e <_close_r+0x1a>
 801477c:	6023      	str	r3, [r4, #0]
 801477e:	bd38      	pop	{r3, r4, r5, pc}
 8014780:	20001668 	.word	0x20001668

08014784 <_fstat_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	2300      	movs	r3, #0
 8014788:	4d06      	ldr	r5, [pc, #24]	; (80147a4 <_fstat_r+0x20>)
 801478a:	4604      	mov	r4, r0
 801478c:	4608      	mov	r0, r1
 801478e:	4611      	mov	r1, r2
 8014790:	602b      	str	r3, [r5, #0]
 8014792:	f7ef f870 	bl	8003876 <_fstat>
 8014796:	1c43      	adds	r3, r0, #1
 8014798:	d102      	bne.n	80147a0 <_fstat_r+0x1c>
 801479a:	682b      	ldr	r3, [r5, #0]
 801479c:	b103      	cbz	r3, 80147a0 <_fstat_r+0x1c>
 801479e:	6023      	str	r3, [r4, #0]
 80147a0:	bd38      	pop	{r3, r4, r5, pc}
 80147a2:	bf00      	nop
 80147a4:	20001668 	.word	0x20001668

080147a8 <_isatty_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	2300      	movs	r3, #0
 80147ac:	4d05      	ldr	r5, [pc, #20]	; (80147c4 <_isatty_r+0x1c>)
 80147ae:	4604      	mov	r4, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	f7ef f86e 	bl	8003894 <_isatty>
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d102      	bne.n	80147c2 <_isatty_r+0x1a>
 80147bc:	682b      	ldr	r3, [r5, #0]
 80147be:	b103      	cbz	r3, 80147c2 <_isatty_r+0x1a>
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	bd38      	pop	{r3, r4, r5, pc}
 80147c4:	20001668 	.word	0x20001668

080147c8 <_lseek_r>:
 80147c8:	b538      	push	{r3, r4, r5, lr}
 80147ca:	4604      	mov	r4, r0
 80147cc:	4608      	mov	r0, r1
 80147ce:	4611      	mov	r1, r2
 80147d0:	2200      	movs	r2, #0
 80147d2:	4d05      	ldr	r5, [pc, #20]	; (80147e8 <_lseek_r+0x20>)
 80147d4:	602a      	str	r2, [r5, #0]
 80147d6:	461a      	mov	r2, r3
 80147d8:	f7ef f866 	bl	80038a8 <_lseek>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_lseek_r+0x1e>
 80147e0:	682b      	ldr	r3, [r5, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_lseek_r+0x1e>
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20001668 	.word	0x20001668

080147ec <_read_r>:
 80147ec:	b538      	push	{r3, r4, r5, lr}
 80147ee:	4604      	mov	r4, r0
 80147f0:	4608      	mov	r0, r1
 80147f2:	4611      	mov	r1, r2
 80147f4:	2200      	movs	r2, #0
 80147f6:	4d05      	ldr	r5, [pc, #20]	; (801480c <_read_r+0x20>)
 80147f8:	602a      	str	r2, [r5, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	f7ee fff7 	bl	80037ee <_read>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_read_r+0x1e>
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	b103      	cbz	r3, 801480a <_read_r+0x1e>
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	20001668 	.word	0x20001668

08014810 <fmin>:
 8014810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014812:	4604      	mov	r4, r0
 8014814:	460d      	mov	r5, r1
 8014816:	4616      	mov	r6, r2
 8014818:	461f      	mov	r7, r3
 801481a:	f000 f813 	bl	8014844 <__fpclassifyd>
 801481e:	b158      	cbz	r0, 8014838 <fmin+0x28>
 8014820:	4630      	mov	r0, r6
 8014822:	4639      	mov	r1, r7
 8014824:	f000 f80e 	bl	8014844 <__fpclassifyd>
 8014828:	b140      	cbz	r0, 801483c <fmin+0x2c>
 801482a:	4632      	mov	r2, r6
 801482c:	463b      	mov	r3, r7
 801482e:	4620      	mov	r0, r4
 8014830:	4629      	mov	r1, r5
 8014832:	f7ec f92f 	bl	8000a94 <__aeabi_dcmplt>
 8014836:	b908      	cbnz	r0, 801483c <fmin+0x2c>
 8014838:	4634      	mov	r4, r6
 801483a:	463d      	mov	r5, r7
 801483c:	4620      	mov	r0, r4
 801483e:	4629      	mov	r1, r5
 8014840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014844 <__fpclassifyd>:
 8014844:	b510      	push	{r4, lr}
 8014846:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801484a:	460b      	mov	r3, r1
 801484c:	d019      	beq.n	8014882 <__fpclassifyd+0x3e>
 801484e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8014852:	490e      	ldr	r1, [pc, #56]	; (801488c <__fpclassifyd+0x48>)
 8014854:	428a      	cmp	r2, r1
 8014856:	d90e      	bls.n	8014876 <__fpclassifyd+0x32>
 8014858:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801485c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8014860:	428a      	cmp	r2, r1
 8014862:	d908      	bls.n	8014876 <__fpclassifyd+0x32>
 8014864:	4a0a      	ldr	r2, [pc, #40]	; (8014890 <__fpclassifyd+0x4c>)
 8014866:	4213      	tst	r3, r2
 8014868:	d007      	beq.n	801487a <__fpclassifyd+0x36>
 801486a:	4294      	cmp	r4, r2
 801486c:	d107      	bne.n	801487e <__fpclassifyd+0x3a>
 801486e:	fab0 f080 	clz	r0, r0
 8014872:	0940      	lsrs	r0, r0, #5
 8014874:	bd10      	pop	{r4, pc}
 8014876:	2004      	movs	r0, #4
 8014878:	e7fc      	b.n	8014874 <__fpclassifyd+0x30>
 801487a:	2003      	movs	r0, #3
 801487c:	e7fa      	b.n	8014874 <__fpclassifyd+0x30>
 801487e:	2000      	movs	r0, #0
 8014880:	e7f8      	b.n	8014874 <__fpclassifyd+0x30>
 8014882:	2800      	cmp	r0, #0
 8014884:	d1ee      	bne.n	8014864 <__fpclassifyd+0x20>
 8014886:	2002      	movs	r0, #2
 8014888:	e7f4      	b.n	8014874 <__fpclassifyd+0x30>
 801488a:	bf00      	nop
 801488c:	7fdfffff 	.word	0x7fdfffff
 8014890:	7ff00000 	.word	0x7ff00000

08014894 <sqrt>:
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014896:	4606      	mov	r6, r0
 8014898:	460f      	mov	r7, r1
 801489a:	f000 f81f 	bl	80148dc <__ieee754_sqrt>
 801489e:	4632      	mov	r2, r6
 80148a0:	4604      	mov	r4, r0
 80148a2:	460d      	mov	r5, r1
 80148a4:	463b      	mov	r3, r7
 80148a6:	4630      	mov	r0, r6
 80148a8:	4639      	mov	r1, r7
 80148aa:	f7ec f91b 	bl	8000ae4 <__aeabi_dcmpun>
 80148ae:	b990      	cbnz	r0, 80148d6 <sqrt+0x42>
 80148b0:	2200      	movs	r2, #0
 80148b2:	2300      	movs	r3, #0
 80148b4:	4630      	mov	r0, r6
 80148b6:	4639      	mov	r1, r7
 80148b8:	f7ec f8ec 	bl	8000a94 <__aeabi_dcmplt>
 80148bc:	b158      	cbz	r0, 80148d6 <sqrt+0x42>
 80148be:	f7fd f87b 	bl	80119b8 <__errno>
 80148c2:	2321      	movs	r3, #33	; 0x21
 80148c4:	2200      	movs	r2, #0
 80148c6:	6003      	str	r3, [r0, #0]
 80148c8:	2300      	movs	r3, #0
 80148ca:	4610      	mov	r0, r2
 80148cc:	4619      	mov	r1, r3
 80148ce:	f7eb ff99 	bl	8000804 <__aeabi_ddiv>
 80148d2:	4604      	mov	r4, r0
 80148d4:	460d      	mov	r5, r1
 80148d6:	4620      	mov	r0, r4
 80148d8:	4629      	mov	r1, r5
 80148da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148dc <__ieee754_sqrt>:
 80148dc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8014a38 <__ieee754_sqrt+0x15c>
 80148e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e4:	ea3c 0c01 	bics.w	ip, ip, r1
 80148e8:	4606      	mov	r6, r0
 80148ea:	460d      	mov	r5, r1
 80148ec:	460c      	mov	r4, r1
 80148ee:	460a      	mov	r2, r1
 80148f0:	4607      	mov	r7, r0
 80148f2:	4603      	mov	r3, r0
 80148f4:	d10f      	bne.n	8014916 <__ieee754_sqrt+0x3a>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	f7eb fe59 	bl	80005b0 <__aeabi_dmul>
 80148fe:	4602      	mov	r2, r0
 8014900:	460b      	mov	r3, r1
 8014902:	4630      	mov	r0, r6
 8014904:	4629      	mov	r1, r5
 8014906:	f7eb fc9d 	bl	8000244 <__adddf3>
 801490a:	4606      	mov	r6, r0
 801490c:	460d      	mov	r5, r1
 801490e:	4630      	mov	r0, r6
 8014910:	4629      	mov	r1, r5
 8014912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014916:	2900      	cmp	r1, #0
 8014918:	dc0e      	bgt.n	8014938 <__ieee754_sqrt+0x5c>
 801491a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801491e:	ea5c 0707 	orrs.w	r7, ip, r7
 8014922:	d0f4      	beq.n	801490e <__ieee754_sqrt+0x32>
 8014924:	b141      	cbz	r1, 8014938 <__ieee754_sqrt+0x5c>
 8014926:	4602      	mov	r2, r0
 8014928:	460b      	mov	r3, r1
 801492a:	f7eb fc89 	bl	8000240 <__aeabi_dsub>
 801492e:	4602      	mov	r2, r0
 8014930:	460b      	mov	r3, r1
 8014932:	f7eb ff67 	bl	8000804 <__aeabi_ddiv>
 8014936:	e7e8      	b.n	801490a <__ieee754_sqrt+0x2e>
 8014938:	1521      	asrs	r1, r4, #20
 801493a:	d075      	beq.n	8014a28 <__ieee754_sqrt+0x14c>
 801493c:	07cc      	lsls	r4, r1, #31
 801493e:	f04f 0400 	mov.w	r4, #0
 8014942:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014946:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 801494a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801494e:	bf5e      	ittt	pl
 8014950:	0fd9      	lsrpl	r1, r3, #31
 8014952:	005b      	lslpl	r3, r3, #1
 8014954:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8014958:	0fd9      	lsrs	r1, r3, #31
 801495a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801495e:	2516      	movs	r5, #22
 8014960:	4620      	mov	r0, r4
 8014962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014966:	107f      	asrs	r7, r7, #1
 8014968:	005b      	lsls	r3, r3, #1
 801496a:	1846      	adds	r6, r0, r1
 801496c:	4296      	cmp	r6, r2
 801496e:	bfde      	ittt	le
 8014970:	1b92      	suble	r2, r2, r6
 8014972:	1870      	addle	r0, r6, r1
 8014974:	1864      	addle	r4, r4, r1
 8014976:	0052      	lsls	r2, r2, #1
 8014978:	3d01      	subs	r5, #1
 801497a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801497e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014986:	d1f0      	bne.n	801496a <__ieee754_sqrt+0x8e>
 8014988:	4629      	mov	r1, r5
 801498a:	f04f 0e20 	mov.w	lr, #32
 801498e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014992:	4282      	cmp	r2, r0
 8014994:	eb06 0c05 	add.w	ip, r6, r5
 8014998:	dc02      	bgt.n	80149a0 <__ieee754_sqrt+0xc4>
 801499a:	d113      	bne.n	80149c4 <__ieee754_sqrt+0xe8>
 801499c:	459c      	cmp	ip, r3
 801499e:	d811      	bhi.n	80149c4 <__ieee754_sqrt+0xe8>
 80149a0:	f1bc 0f00 	cmp.w	ip, #0
 80149a4:	eb0c 0506 	add.w	r5, ip, r6
 80149a8:	da43      	bge.n	8014a32 <__ieee754_sqrt+0x156>
 80149aa:	2d00      	cmp	r5, #0
 80149ac:	db41      	blt.n	8014a32 <__ieee754_sqrt+0x156>
 80149ae:	f100 0801 	add.w	r8, r0, #1
 80149b2:	1a12      	subs	r2, r2, r0
 80149b4:	4640      	mov	r0, r8
 80149b6:	459c      	cmp	ip, r3
 80149b8:	bf88      	it	hi
 80149ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80149be:	eba3 030c 	sub.w	r3, r3, ip
 80149c2:	4431      	add	r1, r6
 80149c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80149c8:	f1be 0e01 	subs.w	lr, lr, #1
 80149cc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80149d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80149d8:	d1db      	bne.n	8014992 <__ieee754_sqrt+0xb6>
 80149da:	4313      	orrs	r3, r2
 80149dc:	d006      	beq.n	80149ec <__ieee754_sqrt+0x110>
 80149de:	1c48      	adds	r0, r1, #1
 80149e0:	bf0b      	itete	eq
 80149e2:	4671      	moveq	r1, lr
 80149e4:	3101      	addne	r1, #1
 80149e6:	3401      	addeq	r4, #1
 80149e8:	f021 0101 	bicne.w	r1, r1, #1
 80149ec:	1063      	asrs	r3, r4, #1
 80149ee:	0849      	lsrs	r1, r1, #1
 80149f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80149f4:	07e2      	lsls	r2, r4, #31
 80149f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80149fa:	bf48      	it	mi
 80149fc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014a00:	460e      	mov	r6, r1
 8014a02:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014a06:	e782      	b.n	801490e <__ieee754_sqrt+0x32>
 8014a08:	0ada      	lsrs	r2, r3, #11
 8014a0a:	3815      	subs	r0, #21
 8014a0c:	055b      	lsls	r3, r3, #21
 8014a0e:	2a00      	cmp	r2, #0
 8014a10:	d0fa      	beq.n	8014a08 <__ieee754_sqrt+0x12c>
 8014a12:	02d5      	lsls	r5, r2, #11
 8014a14:	d50a      	bpl.n	8014a2c <__ieee754_sqrt+0x150>
 8014a16:	f1c1 0420 	rsb	r4, r1, #32
 8014a1a:	fa23 f404 	lsr.w	r4, r3, r4
 8014a1e:	1e4d      	subs	r5, r1, #1
 8014a20:	408b      	lsls	r3, r1
 8014a22:	4322      	orrs	r2, r4
 8014a24:	1b41      	subs	r1, r0, r5
 8014a26:	e789      	b.n	801493c <__ieee754_sqrt+0x60>
 8014a28:	4608      	mov	r0, r1
 8014a2a:	e7f0      	b.n	8014a0e <__ieee754_sqrt+0x132>
 8014a2c:	0052      	lsls	r2, r2, #1
 8014a2e:	3101      	adds	r1, #1
 8014a30:	e7ef      	b.n	8014a12 <__ieee754_sqrt+0x136>
 8014a32:	4680      	mov	r8, r0
 8014a34:	e7bd      	b.n	80149b2 <__ieee754_sqrt+0xd6>
 8014a36:	bf00      	nop
 8014a38:	7ff00000 	.word	0x7ff00000

08014a3c <_init>:
 8014a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a3e:	bf00      	nop
 8014a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a42:	bc08      	pop	{r3}
 8014a44:	469e      	mov	lr, r3
 8014a46:	4770      	bx	lr

08014a48 <_fini>:
 8014a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4a:	bf00      	nop
 8014a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a4e:	bc08      	pop	{r3}
 8014a50:	469e      	mov	lr, r3
 8014a52:	4770      	bx	lr
