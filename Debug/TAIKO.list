
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005234  08005234  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005234  08005234  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800523c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000078  080052b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080052b4  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce1b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fd  00000000  00000000  0002cebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0002f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  0002fe88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6b5  00000000  00000000  00030b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f54c  00000000  00000000  0004b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6af  00000000  00000000  0005a749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000f7e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08004b9c 	.word	0x08004b9c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08004b9c 	.word	0x08004b9c

08000224 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <ILI9341_Send_Command+0x34>)
 8000236:	f002 fa89 	bl	800274c <HAL_GPIO_WritePin>
	DC_COMMAND;
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <ILI9341_Send_Command+0x34>)
 8000242:	f002 fa83 	bl	800274c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f95d 	bl	8000508 <ILI9341_SPI_Send>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00

0800025c <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800026c:	4808      	ldr	r0, [pc, #32]	; (8000290 <ILI9341_Send_Data+0x34>)
 800026e:	f002 fa6d 	bl	800274c <HAL_GPIO_WritePin>
	DC_DATA;
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <ILI9341_Send_Data+0x34>)
 800027a:	f002 fa67 	bl	800274c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f941 	bl	8000508 <ILI9341_SPI_Send>
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40010c00 	.word	0x40010c00

08000294 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8000298:	f000 f900 	bl	800049c <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 800029c:	f000 f958 	bl	8000550 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffbf 	bl	8000224 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80002a6:	20cb      	movs	r0, #203	; 0xcb
 80002a8:	f7ff ffbc 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80002ac:	2039      	movs	r0, #57	; 0x39
 80002ae:	f7ff ffd5 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80002b2:	202c      	movs	r0, #44	; 0x2c
 80002b4:	f7ff ffd2 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f7ff ffcf 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80002be:	2034      	movs	r0, #52	; 0x34
 80002c0:	f7ff ffcc 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80002c4:	2002      	movs	r0, #2
 80002c6:	f7ff ffc9 	bl	800025c <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 80002ca:	20cf      	movs	r0, #207	; 0xcf
 80002cc:	f7ff ffaa 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f7ff ffc3 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80002d6:	20c1      	movs	r0, #193	; 0xc1
 80002d8:	f7ff ffc0 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80002dc:	2030      	movs	r0, #48	; 0x30
 80002de:	f7ff ffbd 	bl	800025c <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 80002e2:	20e8      	movs	r0, #232	; 0xe8
 80002e4:	f7ff ff9e 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80002e8:	2085      	movs	r0, #133	; 0x85
 80002ea:	f7ff ffb7 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ffb4 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80002f4:	2078      	movs	r0, #120	; 0x78
 80002f6:	f7ff ffb1 	bl	800025c <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80002fa:	20ea      	movs	r0, #234	; 0xea
 80002fc:	f7ff ff92 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000300:	2000      	movs	r0, #0
 8000302:	f7ff ffab 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000306:	2000      	movs	r0, #0
 8000308:	f7ff ffa8 	bl	800025c <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800030c:	20ed      	movs	r0, #237	; 0xed
 800030e:	f7ff ff89 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8000312:	2064      	movs	r0, #100	; 0x64
 8000314:	f7ff ffa2 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000318:	2003      	movs	r0, #3
 800031a:	f7ff ff9f 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800031e:	2012      	movs	r0, #18
 8000320:	f7ff ff9c 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000324:	2081      	movs	r0, #129	; 0x81
 8000326:	f7ff ff99 	bl	800025c <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 800032a:	20f7      	movs	r0, #247	; 0xf7
 800032c:	f7ff ff7a 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8000330:	2020      	movs	r0, #32
 8000332:	f7ff ff93 	bl	800025c <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8000336:	20c0      	movs	r0, #192	; 0xc0
 8000338:	f7ff ff74 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800033c:	2010      	movs	r0, #16
 800033e:	f7ff ff8d 	bl	800025c <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8000342:	20c1      	movs	r0, #193	; 0xc1
 8000344:	f7ff ff6e 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000348:	2010      	movs	r0, #16
 800034a:	f7ff ff87 	bl	800025c <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800034e:	20c5      	movs	r0, #197	; 0xc5
 8000350:	f7ff ff68 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000354:	203e      	movs	r0, #62	; 0x3e
 8000356:	f7ff ff81 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800035a:	2028      	movs	r0, #40	; 0x28
 800035c:	f7ff ff7e 	bl	800025c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8000360:	20c7      	movs	r0, #199	; 0xc7
 8000362:	f7ff ff5f 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8000366:	2086      	movs	r0, #134	; 0x86
 8000368:	f7ff ff78 	bl	800025c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 800036c:	2036      	movs	r0, #54	; 0x36
 800036e:	f7ff ff59 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8000372:	2048      	movs	r0, #72	; 0x48
 8000374:	f7ff ff72 	bl	800025c <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8000378:	203a      	movs	r0, #58	; 0x3a
 800037a:	f7ff ff53 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800037e:	2055      	movs	r0, #85	; 0x55
 8000380:	f7ff ff6c 	bl	800025c <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8000384:	20b1      	movs	r0, #177	; 0xb1
 8000386:	f7ff ff4d 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800038a:	2000      	movs	r0, #0
 800038c:	f7ff ff66 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000390:	2018      	movs	r0, #24
 8000392:	f7ff ff63 	bl	800025c <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8000396:	20b6      	movs	r0, #182	; 0xb6
 8000398:	f7ff ff44 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800039c:	2008      	movs	r0, #8
 800039e:	f7ff ff5d 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80003a2:	2082      	movs	r0, #130	; 0x82
 80003a4:	f7ff ff5a 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80003a8:	2027      	movs	r0, #39	; 0x27
 80003aa:	f7ff ff57 	bl	800025c <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80003ae:	20f2      	movs	r0, #242	; 0xf2
 80003b0:	f7ff ff38 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff51 	bl	800025c <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80003ba:	2026      	movs	r0, #38	; 0x26
 80003bc:	f7ff ff32 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80003c0:	2001      	movs	r0, #1
 80003c2:	f7ff ff4b 	bl	800025c <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 80003c6:	20e0      	movs	r0, #224	; 0xe0
 80003c8:	f7ff ff2c 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 80003cc:	200f      	movs	r0, #15
 80003ce:	f7ff ff45 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80003d2:	2031      	movs	r0, #49	; 0x31
 80003d4:	f7ff ff42 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 80003d8:	202b      	movs	r0, #43	; 0x2b
 80003da:	f7ff ff3f 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80003de:	200c      	movs	r0, #12
 80003e0:	f7ff ff3c 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80003e4:	200e      	movs	r0, #14
 80003e6:	f7ff ff39 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80003ea:	2008      	movs	r0, #8
 80003ec:	f7ff ff36 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80003f0:	204e      	movs	r0, #78	; 0x4e
 80003f2:	f7ff ff33 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80003f6:	20f1      	movs	r0, #241	; 0xf1
 80003f8:	f7ff ff30 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80003fc:	2037      	movs	r0, #55	; 0x37
 80003fe:	f7ff ff2d 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000402:	2007      	movs	r0, #7
 8000404:	f7ff ff2a 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000408:	2010      	movs	r0, #16
 800040a:	f7ff ff27 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800040e:	2003      	movs	r0, #3
 8000410:	f7ff ff24 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000414:	200e      	movs	r0, #14
 8000416:	f7ff ff21 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 800041a:	2009      	movs	r0, #9
 800041c:	f7ff ff1e 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ff1b 	bl	800025c <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8000426:	20e1      	movs	r0, #225	; 0xe1
 8000428:	f7ff fefc 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800042c:	2000      	movs	r0, #0
 800042e:	f7ff ff15 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000432:	200e      	movs	r0, #14
 8000434:	f7ff ff12 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8000438:	2014      	movs	r0, #20
 800043a:	f7ff ff0f 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800043e:	2003      	movs	r0, #3
 8000440:	f7ff ff0c 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000444:	2011      	movs	r0, #17
 8000446:	f7ff ff09 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800044a:	2007      	movs	r0, #7
 800044c:	f7ff ff06 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000450:	2031      	movs	r0, #49	; 0x31
 8000452:	f7ff ff03 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000456:	20c1      	movs	r0, #193	; 0xc1
 8000458:	f7ff ff00 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 800045c:	2048      	movs	r0, #72	; 0x48
 800045e:	f7ff fefd 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000462:	2008      	movs	r0, #8
 8000464:	f7ff fefa 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000468:	200f      	movs	r0, #15
 800046a:	f7ff fef7 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800046e:	200c      	movs	r0, #12
 8000470:	f7ff fef4 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000474:	2031      	movs	r0, #49	; 0x31
 8000476:	f7ff fef1 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800047a:	2036      	movs	r0, #54	; 0x36
 800047c:	f7ff feee 	bl	800025c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000480:	200f      	movs	r0, #15
 8000482:	f7ff feeb 	bl	800025c <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8000486:	2011      	movs	r0, #17
 8000488:	f7ff fecc 	bl	8000224 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800048c:	2029      	movs	r0, #41	; 0x29
 800048e:	f7ff fec9 	bl	8000224 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8000492:	202c      	movs	r0, #44	; 0x2c
 8000494:	f7ff fee2 	bl	800025c <ILI9341_Send_Data>
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004a2:	4a18      	ldr	r2, [pc, #96]	; (8000504 <ILI9341_SPI_Init+0x68>)
 80004a4:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 80004a6:	4b16      	ldr	r3, [pc, #88]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004ac:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004cc:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004dc:	2200      	movs	r2, #0
 80004de:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004e8:	220a      	movs	r2, #10
 80004ea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <ILI9341_SPI_Init+0x64>)
 80004ee:	f002 fdd9 	bl	80030a4 <HAL_SPI_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80004f8:	f000 fd22 	bl	8000f40 <Error_Handler>
	}
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000094 	.word	0x20000094
 8000504:	40003800 	.word	0x40003800

08000508 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	2301      	movs	r3, #1
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <ILI9341_SPI_Send+0x20>)
 800051a:	f002 fe47 	bl	80031ac <HAL_SPI_Transmit>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000094 	.word	0x20000094

0800052c <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	b29a      	uxth	r2, r3
 800053a:	230a      	movs	r3, #10
 800053c:	6879      	ldr	r1, [r7, #4]
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <ILI9341_SPI_Send_Multiple+0x20>)
 8000540:	f002 fe34 	bl	80031ac <HAL_SPI_Transmit>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000094 	.word	0x20000094

08000550 <ILI9341_Reset>:

void ILI9341_Reset() {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	RESET_ON;
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4810      	ldr	r0, [pc, #64]	; (800059c <ILI9341_Reset+0x4c>)
 800055c:	f002 f8f6 	bl	800274c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000560:	2032      	movs	r0, #50	; 0x32
 8000562:	f000 ff0f 	bl	8001384 <HAL_Delay>
	RESET_OFF;
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <ILI9341_Reset+0x4c>)
 800056e:	f002 f8ed 	bl	800274c <HAL_GPIO_WritePin>
	CS_ON;
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <ILI9341_Reset+0x4c>)
 800057a:	f002 f8e7 	bl	800274c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800057e:	2032      	movs	r0, #50	; 0x32
 8000580:	f000 ff00 	bl	8001384 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff fe4d 	bl	8000224 <ILI9341_Send_Command>
	CS_OFF;
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <ILI9341_Reset+0x4c>)
 8000592:	f002 f8db 	bl	800274c <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010c00 	.word	0x40010c00

080005a0 <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <ILI9341_SPI_Send_32+0x70>)
 80005b4:	f002 f8ca 	bl	800274c <HAL_GPIO_WritePin>
	DC_COMMAND;
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <ILI9341_SPI_Send_32+0x70>)
 80005c0:	f002 f8c4 	bl	800274c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff9e 	bl	8000508 <ILI9341_SPI_Send>

	DC_DATA;
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <ILI9341_SPI_Send_32+0x70>)
 80005d4:	f002 f8ba 	bl	800274c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	0e1b      	lsrs	r3, r3, #24
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff92 	bl	8000508 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff8c 	bl	8000508 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff86 	bl	8000508 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff81 	bl	8000508 <ILI9341_SPI_Send>

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40010c00 	.word	0x40010c00

08000614 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000634:	6979      	ldr	r1, [r7, #20]
 8000636:	202a      	movs	r0, #42	; 0x2a
 8000638:	f7ff ffb2 	bl	80005a0 <ILI9341_SPI_Send_32>
	t = y1;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	041b      	lsls	r3, r3, #16
 8000644:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	4313      	orrs	r3, r2
 800064c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800064e:	6979      	ldr	r1, [r7, #20]
 8000650:	202b      	movs	r0, #43	; 0x2b
 8000652:	f7ff ffa5 	bl	80005a0 <ILI9341_SPI_Send_32>
}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 800065e:	b590      	push	{r4, r7, lr}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	4604      	mov	r4, r0
 8000666:	4608      	mov	r0, r1
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	4623      	mov	r3, r4
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4603      	mov	r3, r0
 8000672:	80bb      	strh	r3, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
 8000678:	4613      	mov	r3, r2
 800067a:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 800067c:	88f8      	ldrh	r0, [r7, #6]
 800067e:	88b9      	ldrh	r1, [r7, #4]
 8000680:	88fa      	ldrh	r2, [r7, #6]
 8000682:	887b      	ldrh	r3, [r7, #2]
 8000684:	4413      	add	r3, r2
 8000686:	3b01      	subs	r3, #1
 8000688:	461c      	mov	r4, r3
 800068a:	88ba      	ldrh	r2, [r7, #4]
 800068c:	883b      	ldrh	r3, [r7, #0]
 800068e:	4413      	add	r3, r2
 8000690:	3b01      	subs	r3, #1
 8000692:	4622      	mov	r2, r4
 8000694:	f7ff ffbe 	bl	8000614 <ILI9341_Set_Address>
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 80006b0:	202c      	movs	r0, #44	; 0x2c
 80006b2:	f7ff fdb7 	bl	8000224 <ILI9341_Send_Command>

	CS_ON;
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006bc:	482a      	ldr	r0, [pc, #168]	; (8000768 <LCD_FillWindow+0xc8>)
 80006be:	f002 f845 	bl	800274c <HAL_GPIO_WritePin>
	DC_DATA;
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	4827      	ldr	r0, [pc, #156]	; (8000768 <LCD_FillWindow+0xc8>)
 80006ca:	f002 f83f 	bl	800274c <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a26      	ldr	r2, [pc, #152]	; (800076c <LCD_FillWindow+0xcc>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	08db      	lsrs	r3, r3, #3
 80006d8:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	2b3f      	cmp	r3, #63	; 0x3f
 80006de:	dc01      	bgt.n	80006e4 <LCD_FillWindow+0x44>
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	2bf0      	cmp	r3, #240	; 0xf0
 80006e8:	dd01      	ble.n	80006ee <LCD_FillWindow+0x4e>
 80006ea:	23f0      	movs	r3, #240	; 0xf0
 80006ec:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fd9d 	bl	8004244 <malloc>
 800070a:	4603      	mov	r3, r0
 800070c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	e009      	b.n	8000728 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	b292      	uxth	r2, r2
 8000720:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	3301      	adds	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbf1      	blt.n	8000714 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8000730:	e009      	b.n	8000746 <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4619      	mov	r1, r3
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fef7 	bl	800052c <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8f1      	bhi.n	8000732 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4619      	mov	r1, r3
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f7ff fee9 	bl	800052c <ILI9341_SPI_Send_Multiple>

	free(array);
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f003 fd7a 	bl	8004254 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40010c00 	.word	0x40010c00
 800076c:	cccccccd 	.word	0xcccccccd

08000770 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4604      	mov	r4, r0
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4623      	mov	r3, r4
 8000780:	80fb      	strh	r3, [r7, #6]
 8000782:	4603      	mov	r3, r0
 8000784:	80bb      	strh	r3, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	807b      	strh	r3, [r7, #2]
 800078a:	4613      	mov	r3, r2
 800078c:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800078e:	883b      	ldrh	r3, [r7, #0]
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	88b9      	ldrh	r1, [r7, #4]
 8000794:	88f8      	ldrh	r0, [r7, #6]
 8000796:	f7ff ff62 	bl	800065e <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	883a      	ldrh	r2, [r7, #0]
 800079e:	fb02 f303 	mul.w	r3, r2, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	8b3b      	ldrh	r3, [r7, #24]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4610      	mov	r0, r2
 80007aa:	f7ff ff79 	bl	80006a0 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd90      	pop	{r4, r7, pc}
	...

080007b8 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <LCD_FillScreen+0x2c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <LCD_FillScreen+0x30>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	b299      	uxth	r1, r3
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	460b      	mov	r3, r1
 80007d4:	2100      	movs	r1, #0
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ffca 	bl	8000770 <LCD_DrawFilledRectangle>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000004 	.word	0x20000004

080007ec <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
 80007f6:	460b      	mov	r3, r1
 80007f8:	80bb      	strh	r3, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	3b20      	subs	r3, #32
 8000802:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000804:	88b9      	ldrh	r1, [r7, #4]
 8000806:	88f8      	ldrh	r0, [r7, #6]
 8000808:	2310      	movs	r3, #16
 800080a:	2208      	movs	r2, #8
 800080c:	f7ff ff27 	bl	800065e <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8000810:	202c      	movs	r0, #44	; 0x2c
 8000812:	f7ff fd07 	bl	8000224 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8000816:	f44f 7080 	mov.w	r0, #256	; 0x100
 800081a:	f003 fd13 	bl	8004244 <malloc>
 800081e:	4603      	mov	r3, r0
 8000820:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000826:	2300      	movs	r3, #0
 8000828:	75bb      	strb	r3, [r7, #22]
 800082a:	e026      	b.n	800087a <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	7dbb      	ldrb	r3, [r7, #22]
 8000830:	491c      	ldr	r1, [pc, #112]	; (80008a4 <LCD_DrawChar+0xb8>)
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	440a      	add	r2, r1
 8000836:	4413      	add	r3, r2
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800083c:	2300      	movs	r3, #0
 800083e:	757b      	strb	r3, [r7, #21]
 8000840:	e015      	b.n	800086e <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	2200      	movs	r2, #0
 8000850:	801a      	strh	r2, [r3, #0]
 8000852:	e003      	b.n	800085c <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085a:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	75fb      	strb	r3, [r7, #23]
			pt++;
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3302      	adds	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	3301      	adds	r3, #1
 800086c:	757b      	strb	r3, [r7, #21]
 800086e:	7d7b      	ldrb	r3, [r7, #21]
 8000870:	2b07      	cmp	r3, #7
 8000872:	d9e6      	bls.n	8000842 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000874:	7dbb      	ldrb	r3, [r7, #22]
 8000876:	3301      	adds	r3, #1
 8000878:	75bb      	strb	r3, [r7, #22]
 800087a:	7dbb      	ldrb	r3, [r7, #22]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d9d5      	bls.n	800082c <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <LCD_DrawChar+0xbc>)
 8000888:	f001 ff60 	bl	800274c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 800088c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000890:	68b8      	ldr	r0, [r7, #8]
 8000892:	f7ff fe4b 	bl	800052c <ILI9341_SPI_Send_Multiple>
	free(array);
 8000896:	68b8      	ldr	r0, [r7, #8]
 8000898:	f003 fcdc 	bl	8004254 <free>
}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08004bec 	.word	0x08004bec
 80008a8:	40010c00 	.word	0x40010c00

080008ac <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	603a      	str	r2, [r7, #0]
 80008b6:	80fb      	strh	r3, [r7, #6]
 80008b8:	460b      	mov	r3, r1
 80008ba:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80008bc:	e01d      	b.n	80008fa <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80008c4:	d904      	bls.n	80008d0 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80008c6:	2300      	movs	r3, #0
 80008c8:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	3310      	adds	r3, #16
 80008ce:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80008d6:	d903      	bls.n	80008e0 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80008d8:	2300      	movs	r3, #0
 80008da:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80008dc:	2300      	movs	r3, #0
 80008de:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	88b9      	ldrh	r1, [r7, #4]
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff7f 	bl	80007ec <LCD_DrawChar>

		pStr ++;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	3308      	adds	r3, #8
 80008f8:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1dd      	bne.n	80008be <LCD_DrawString+0x12>

	}

}
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 800090c:	b40c      	push	{r2, r3}
 800090e:	b580      	push	{r7, lr}
 8000910:	b08e      	sub	sp, #56	; 0x38
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	460a      	mov	r2, r1
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	4613      	mov	r3, r2
 800091c:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 800091e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000922:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8000924:	f107 000c 	add.w	r0, r7, #12
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800092c:	2128      	movs	r1, #40	; 0x28
 800092e:	f003 fdb9 	bl	80044a4 <vsniprintf>
 8000932:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8000934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	b298      	uxth	r0, r3
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	b29b      	uxth	r3, r3
 8000946:	f107 020c 	add.w	r2, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	f7ff ffae 	bl	80008ac <LCD_DrawString>
 8000950:	e000      	b.n	8000954 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8000952:	bf00      	nop
}
 8000954:	3738      	adds	r7, #56	; 0x38
 8000956:	46bd      	mov	sp, r7
 8000958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095c:	b002      	add	sp, #8
 800095e:	4770      	bx	lr

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f000 fcab 	bl	80012c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f8c1 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 fa53 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000972:	f000 fa33 	bl	8000ddc <MX_DMA_Init>
  MX_SPI2_Init();
 8000976:	f000 f983 	bl	8000c80 <MX_SPI2_Init>
  MX_TIM3_Init();
 800097a:	f000 f9b7 	bl	8000cec <MX_TIM3_Init>
  MX_ADC1_Init();
 800097e:	f000 f915 	bl	8000bac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init();
 8000982:	f7ff fc87 	bl	8000294 <ILI9341_Init>
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 8000986:	2204      	movs	r2, #4
 8000988:	494e      	ldr	r1, [pc, #312]	; (8000ac4 <main+0x164>)
 800098a:	484f      	ldr	r0, [pc, #316]	; (8000ac8 <main+0x168>)
 800098c:	f000 fe08 	bl	80015a0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	484e      	ldr	r0, [pc, #312]	; (8000acc <main+0x16c>)
 8000994:	f002 fe9c 	bl	80036d0 <HAL_TIM_PWM_Start>

  LCD_FillScreen(PINK);
 8000998:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800099c:	f7ff ff0c 	bl	80007b8 <LCD_FillScreen>
//  LCD_DrawFilledRectangle(0, 0, 240, 320, RED);

  long last_ticks = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  long tft_last_ticks = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  long ticks = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  long num_hits = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  while (1)
  {

	  if (drum_sensor_values[0] > 300) {
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <main+0x164>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009b8:	d908      	bls.n	80009cc <main+0x6c>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	4844      	ldr	r0, [pc, #272]	; (8000ad0 <main+0x170>)
 80009c0:	f001 fec4 	bl	800274c <HAL_GPIO_WritePin>
		  num_hits += 1;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e004      	b.n	80009d6 <main+0x76>
	  } else {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	483f      	ldr	r0, [pc, #252]	; (8000ad0 <main+0x170>)
 80009d2:	f001 febb 	bl	800274c <HAL_GPIO_WritePin>
	  }

	  if (HAL_GetTick() - tft_last_ticks > 100) {
 80009d6:	f000 fccb 	bl	8001370 <HAL_GetTick>
 80009da:	4602      	mov	r2, r0
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	2b64      	cmp	r3, #100	; 0x64
 80009e2:	d94a      	bls.n	8000a7a <main+0x11a>

		  LCD_Print(0, 0, "%02ld:%02ld:%02ld.%03ld", HAL_GetTick() / (1000 * 60 * 60),
 80009e4:	f000 fcc4 	bl	8001370 <HAL_GetTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a3a      	ldr	r2, [pc, #232]	; (8000ad4 <main+0x174>)
 80009ec:	fba2 2303 	umull	r2, r3, r2, r3
 80009f0:	0d5e      	lsrs	r6, r3, #21
				  HAL_GetTick() / (1000 * 60), HAL_GetTick() / 1000, HAL_GetTick() % 1000);
 80009f2:	f000 fcbd 	bl	8001370 <HAL_GetTick>
 80009f6:	4603      	mov	r3, r0
		  LCD_Print(0, 0, "%02ld:%02ld:%02ld.%03ld", HAL_GetTick() / (1000 * 60 * 60),
 80009f8:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <main+0x178>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0b9c      	lsrs	r4, r3, #14
				  HAL_GetTick() / (1000 * 60), HAL_GetTick() / 1000, HAL_GetTick() % 1000);
 8000a00:	f000 fcb6 	bl	8001370 <HAL_GetTick>
 8000a04:	4603      	mov	r3, r0
		  LCD_Print(0, 0, "%02ld:%02ld:%02ld.%03ld", HAL_GetTick() / (1000 * 60 * 60),
 8000a06:	4a35      	ldr	r2, [pc, #212]	; (8000adc <main+0x17c>)
 8000a08:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0c:	099d      	lsrs	r5, r3, #6
				  HAL_GetTick() / (1000 * 60), HAL_GetTick() / 1000, HAL_GetTick() % 1000);
 8000a0e:	f000 fcaf 	bl	8001370 <HAL_GetTick>
 8000a12:	4602      	mov	r2, r0
		  LCD_Print(0, 0, "%02ld:%02ld:%02ld.%03ld", HAL_GetTick() / (1000 * 60 * 60),
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x17c>)
 8000a16:	fba3 1302 	umull	r1, r3, r3, r2
 8000a1a:	099b      	lsrs	r3, r3, #6
 8000a1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	9501      	str	r5, [sp, #4]
 8000a2a:	9400      	str	r4, [sp, #0]
 8000a2c:	4633      	mov	r3, r6
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <main+0x180>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ff6a 	bl	800090c <LCD_Print>

		  for (int i = 0; i < 4; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	e010      	b.n	8000a60 <main+0x100>
			  LCD_Print(0, i+1, "Analog %d: %05ld", i, drum_sensor_values[i]);
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	3301      	adds	r3, #1
 8000a44:	b299      	uxth	r1, r3
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <main+0x164>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <main+0x184>)
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ff59 	bl	800090c <LCD_Print>
		  for (int i = 0; i < 4; i++) {
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	ddeb      	ble.n	8000a3e <main+0xde>
		  }

		  LCD_Print(0, 5, "Hits: %03d", num_hits);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <main+0x188>)
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ff4d 	bl	800090c <LCD_Print>

		  tft_last_ticks = HAL_GetTick();
 8000a72:	f000 fc7d 	bl	8001370 <HAL_GetTick>
 8000a76:	4603      	mov	r3, r0
 8000a78:	613b      	str	r3, [r7, #16]
	  }

	  if (HAL_GetTick() - last_ticks > 400) {
 8000a7a:	f000 fc79 	bl	8001370 <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a88:	d992      	bls.n	80009b0 <main+0x50>

		  if ((HAL_GetTick() / 400) % 2 == 0) {
 8000a8a:	f000 fc71 	bl	8001370 <HAL_GetTick>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <main+0x18c>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	09db      	lsrs	r3, r3, #7
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d106      	bne.n	8000aae <main+0x14e>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <main+0x170>)
 8000aa8:	f001 fe50 	bl	800274c <HAL_GPIO_WritePin>
 8000aac:	e005      	b.n	8000aba <main+0x15a>
		  } else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <main+0x170>)
 8000ab6:	f001 fe49 	bl	800274c <HAL_GPIO_WritePin>
		  }

		  last_ticks = HAL_GetTick();
 8000aba:	f000 fc59 	bl	8001370 <HAL_GetTick>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	617b      	str	r3, [r7, #20]
	  if (drum_sensor_values[0] > 300) {
 8000ac2:	e775      	b.n	80009b0 <main+0x50>
 8000ac4:	20000200 	.word	0x20000200
 8000ac8:	200000ec 	.word	0x200000ec
 8000acc:	200001b8 	.word	0x200001b8
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	95217cb1 	.word	0x95217cb1
 8000ad8:	45e7b273 	.word	0x45e7b273
 8000adc:	10624dd3 	.word	0x10624dd3
 8000ae0:	08004bb4 	.word	0x08004bb4
 8000ae4:	08004bcc 	.word	0x08004bcc
 8000ae8:	08004be0 	.word	0x08004be0
 8000aec:	51eb851f 	.word	0x51eb851f

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b096      	sub	sp, #88	; 0x58
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afa:	2228      	movs	r2, #40	; 0x28
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fbb0 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b40:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fe16 	bl	800277c <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b56:	f000 f9f3 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2102      	movs	r1, #2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 f882 	bl	8002c80 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b82:	f000 f9dd 	bl	8000f40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b86:	2302      	movs	r3, #2
 8000b88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 f9d0 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b9e:	f000 f9cf 	bl	8000f40 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <MX_ADC1_Init+0xd0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000bd8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bea:	4823      	ldr	r0, [pc, #140]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000bec:	f000 fbee 	bl	80013cc <HAL_ADC_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bf6:	f000 f9a3 	bl	8000f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c02:	2307      	movs	r3, #7
 8000c04:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481b      	ldr	r0, [pc, #108]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000c0c:	f000 fdc2 	bl	8001794 <HAL_ADC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f993 	bl	8000f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000c28:	f000 fdb4 	bl	8001794 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c32:	f000 f985 	bl	8000f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000c44:	f000 fda6 	bl	8001794 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c4e:	f000 f977 	bl	8000f40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c52:	2303      	movs	r3, #3
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c56:	2304      	movs	r3, #4
 8000c58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_ADC1_Init+0xcc>)
 8000c60:	f000 fd98 	bl	8001794 <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c6a:	f000 f969 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000ec 	.word	0x200000ec
 8000c7c:	40012400 	.word	0x40012400

08000c80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <MX_SPI2_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI2_Init+0x64>)
 8000cd2:	f002 f9e7 	bl	80030a4 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f000 f930 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000160 	.word	0x20000160
 8000ce8:	40003800 	.word	0x40003800

08000cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <MX_TIM3_Init+0xec>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6500;
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d24:	f641 1264 	movw	r2, #6500	; 0x1964
 8000d28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000;
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d32:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d46:	f002 fc1b 	bl	8003580 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d50:	f000 f8f6 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d62:	f002 fe31 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d6c:	f000 f8e8 	bl	8000f40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d70:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d72:	f002 fc54 	bl	800361e <HAL_TIM_PWM_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d7c:	f000 f8e0 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000d90:	f003 f9c2 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d9a:	f000 f8d1 	bl	8000f40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	2360      	movs	r3, #96	; 0x60
 8000da0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3000;
 8000da2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	4619      	mov	r1, r3
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000db8:	f002 fd44 	bl	8003844 <HAL_TIM_PWM_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000dc2:	f000 f8bd 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <MX_TIM3_Init+0xe8>)
 8000dc8:	f000 f9b4 	bl	8001134 <HAL_TIM_MspPostInit>

}
 8000dcc:	bf00      	nop
 8000dce:	3738      	adds	r7, #56	; 0x38
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001b8 	.word	0x200001b8
 8000dd8:	40000400 	.word	0x40000400

08000ddc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_DMA_Init+0x38>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <MX_DMA_Init+0x38>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_DMA_Init+0x38>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	200b      	movs	r0, #11
 8000e00:	f000 ff99 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e04:	200b      	movs	r0, #11
 8000e06:	f000 ffb2 	bl	8001d6e <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a3f      	ldr	r2, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a39      	ldr	r2, [pc, #228]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x118>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8000e92:	4828      	ldr	r0, [pc, #160]	; (8000f34 <MX_GPIO_Init+0x11c>)
 8000e94:	f001 fc5a 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000e9e:	4826      	ldr	r0, [pc, #152]	; (8000f38 <MX_GPIO_Init+0x120>)
 8000ea0:	f001 fc54 	bl	800274c <HAL_GPIO_WritePin>
                          |T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000eaa:	4824      	ldr	r0, [pc, #144]	; (8000f3c <MX_GPIO_Init+0x124>)
 8000eac:	f001 fc4e 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <MX_GPIO_Init+0x11c>)
 8000eca:	f001 faab 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin T_DIN_Pin T_DO_Pin
                           T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 8000ece:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ed2:	613b      	str	r3, [r7, #16]
                          |T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_GPIO_Init+0x120>)
 8000ee8:	f001 fa9c 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8000eec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <MX_GPIO_Init+0x124>)
 8000f06:	f001 fa8d 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0x11c>)
 8000f22:	f001 fa7f 	bl	8002424 <HAL_GPIO_Init>

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40011800 	.word	0x40011800
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_MspInit+0x40>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_MspInit+0x40>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_MspInit+0x40>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_MspInit+0x40>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_MspInit+0x40>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_MspInit+0x40>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_ADC_MspInit+0xbc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d149      	bne.n	8001044 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_ADC_MspInit+0xc0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_ADC_MspInit+0xc0>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_ADC_MspInit+0xc0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <HAL_ADC_MspInit+0xc0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a20      	ldr	r2, [pc, #128]	; (8001050 <HAL_ADC_MspInit+0xc0>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_ADC_MspInit+0xc0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <HAL_ADC_MspInit+0xc4>)
 8000ff0:	f001 fa18 	bl	8002424 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_ADC_MspInit+0xcc>)
 8000ff8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 800100e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001012:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8001016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800101a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 800101e:	2220      	movs	r2, #32
 8001020:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 800102a:	f000 febb 	bl	8001da4 <HAL_DMA_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001034:	f7ff ff84 	bl	8000f40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_ADC_MspInit+0xc8>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800
 8001058:	2000011c 	.word	0x2000011c
 800105c:	40020008 	.word	0x40020008

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HAL_SPI_MspInit+0x8c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d131      	bne.n	80010e4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	61d3      	str	r3, [r2, #28]
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_SPI_MspInit+0x90>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80010b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <HAL_SPI_MspInit+0x94>)
 80010c6:	f001 f9ad 	bl	8002424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_SPI_MspInit+0x94>)
 80010e0:	f001 f9a0 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40003800 	.word	0x40003800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010c00 	.word	0x40010c00

080010f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_TIM_Base_MspInit+0x34>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10b      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40000400 	.word	0x40000400
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_TIM_MspPostInit+0x58>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d117      	bne.n	8001184 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_TIM_MspPostInit+0x5c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_TIM_MspPostInit+0x5c>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_TIM_MspPostInit+0x5c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_TIM_MspPostInit+0x60>)
 8001180:	f001 f950 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40000400 	.word	0x40000400
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 f8b5 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA1_Channel1_IRQHandler+0x10>)
 80011ee:	f000 feaf 	bl	8001f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000011c 	.word	0x2000011c

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f002 ffe0 	bl	80041f0 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20010000 	.word	0x20010000
 800125c:	00000400 	.word	0x00000400
 8001260:	20000210 	.word	0x20000210
 8001264:	20000228 	.word	0x20000228

08001268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001274:	f7ff fff8 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800127a:	490c      	ldr	r1, [pc, #48]	; (80012ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001290:	4c09      	ldr	r4, [pc, #36]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f002 ffad 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a2:	f7ff fb5d 	bl	8000960 <main>
  bx lr
 80012a6:	4770      	bx	lr
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012b0:	0800523c 	.word	0x0800523c
  ldr r2, =_sbss
 80012b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012b8:	20000228 	.word	0x20000228

080012bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_2_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x28>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x28>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 fd25 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fe36 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fd3d 	bl	8001d8a <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 fd05 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000008 	.word	0x20000008
 8001344:	20000010 	.word	0x20000010
 8001348:	2000000c 	.word	0x2000000c

0800134c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_IncTick+0x1c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x20>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_IncTick+0x20>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000010 	.word	0x20000010
 800136c:	20000214 	.word	0x20000214

08001370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b02      	ldr	r3, [pc, #8]	; (8001380 <HAL_GetTick+0x10>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000214 	.word	0x20000214

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fff0 	bl	8001370 <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffe0 	bl	8001370 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000010 	.word	0x20000010

080013cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0ce      	b.n	800158c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fdc0 	bl	8000f90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fb11 	bl	8001a38 <ADC_ConversionStop_Disable>
 8001416:	4603      	mov	r3, r0
 8001418:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 80a9 	bne.w	800157a <HAL_ADC_Init+0x1ae>
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 80a5 	bne.w	800157a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001438:	f023 0302 	bic.w	r3, r3, #2
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4951      	ldr	r1, [pc, #324]	; (8001594 <HAL_ADC_Init+0x1c8>)
 800144e:	428b      	cmp	r3, r1
 8001450:	d10a      	bne.n	8001468 <HAL_ADC_Init+0x9c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800145a:	d002      	beq.n	8001462 <HAL_ADC_Init+0x96>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	e004      	b.n	800146c <HAL_ADC_Init+0xa0>
 8001462:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001466:	e001      	b.n	800146c <HAL_ADC_Init+0xa0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800146c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b1b      	ldrb	r3, [r3, #12]
 8001472:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001474:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4313      	orrs	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001484:	d003      	beq.n	800148e <HAL_ADC_Init+0xc2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <HAL_ADC_Init+0xc8>
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	e000      	b.n	8001496 <HAL_ADC_Init+0xca>
 8001494:	2300      	movs	r3, #0
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7d1b      	ldrb	r3, [r3, #20]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d119      	bne.n	80014d8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7b1b      	ldrb	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	035a      	lsls	r2, r3, #13
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	e00b      	b.n	80014d8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f043 0220 	orr.w	r2, r3, #32
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_ADC_Init+0x1cc>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001508:	d003      	beq.n	8001512 <HAL_ADC_Init+0x146>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d104      	bne.n	800151c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	3b01      	subs	r3, #1
 8001518:	051b      	lsls	r3, r3, #20
 800151a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	430a      	orrs	r2, r1
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_ADC_Init+0x1d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	d10b      	bne.n	8001558 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001556:	e018      	b.n	800158a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f023 0312 	bic.w	r3, r3, #18
 8001560:	f043 0210 	orr.w	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001578:	e007      	b.n	800158a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f043 0210 	orr.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800158a:	7dfb      	ldrb	r3, [r7, #23]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40013c00 	.word	0x40013c00
 8001598:	ffe1f7fd 	.word	0xffe1f7fd
 800159c:	ff1f0efe 	.word	0xff1f0efe

080015a0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a64      	ldr	r2, [pc, #400]	; (8001748 <HAL_ADC_Start_DMA+0x1a8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d004      	beq.n	80015c4 <HAL_ADC_Start_DMA+0x24>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a63      	ldr	r2, [pc, #396]	; (800174c <HAL_ADC_Start_DMA+0x1ac>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d106      	bne.n	80015d2 <HAL_ADC_Start_DMA+0x32>
 80015c4:	4b60      	ldr	r3, [pc, #384]	; (8001748 <HAL_ADC_Start_DMA+0x1a8>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 80b3 	bne.w	8001738 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_Start_DMA+0x40>
 80015dc:	2302      	movs	r3, #2
 80015de:	e0ae      	b.n	800173e <HAL_ADC_Start_DMA+0x19e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f9cb 	bl	8001984 <ADC_Enable>
 80015ee:	4603      	mov	r3, r0
 80015f0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 809a 	bne.w	800172e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a4e      	ldr	r2, [pc, #312]	; (800174c <HAL_ADC_Start_DMA+0x1ac>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Start_DMA+0x84>
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_ADC_Start_DMA+0x1a8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d115      	bne.n	8001650 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	2b00      	cmp	r3, #0
 800163c:	d026      	beq.n	800168c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800164e:	e01d      	b.n	800168c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a39      	ldr	r2, [pc, #228]	; (8001748 <HAL_ADC_Start_DMA+0x1a8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d004      	beq.n	8001670 <HAL_ADC_Start_DMA+0xd0>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a38      	ldr	r2, [pc, #224]	; (800174c <HAL_ADC_Start_DMA+0x1ac>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d10d      	bne.n	800168c <HAL_ADC_Start_DMA+0xec>
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <HAL_ADC_Start_DMA+0x1a8>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001684:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	f023 0206 	bic.w	r2, r3, #6
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a4:	e002      	b.n	80016ac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_ADC_Start_DMA+0x1b0>)
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a24      	ldr	r2, [pc, #144]	; (8001754 <HAL_ADC_Start_DMA+0x1b4>)
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <HAL_ADC_Start_DMA+0x1b8>)
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0202 	mvn.w	r2, #2
 80016d4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a18      	ldr	r0, [r3, #32]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	334c      	adds	r3, #76	; 0x4c
 80016f0:	4619      	mov	r1, r3
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f000 fbcb 	bl	8001e90 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001704:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001708:	d108      	bne.n	800171c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001718:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800171a:	e00f      	b.n	800173c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800172a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800172c:	e006      	b.n	800173c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001736:	e001      	b.n	800173c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40012400 	.word	0x40012400
 800174c:	40012800 	.word	0x40012800
 8001750:	08001abb 	.word	0x08001abb
 8001754:	08001b37 	.word	0x08001b37
 8001758:	08001b53 	.word	0x08001b53

0800175c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x20>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0dc      	b.n	800196e <HAL_ADC_ConfigChannel+0x1da>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b06      	cmp	r3, #6
 80017c2:	d81c      	bhi.n	80017fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b05      	subs	r3, #5
 80017d6:	221f      	movs	r2, #31
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4019      	ands	r1, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b05      	subs	r3, #5
 80017f0:	fa00 f203 	lsl.w	r2, r0, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
 80017fc:	e03c      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d81c      	bhi.n	8001840 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b23      	subs	r3, #35	; 0x23
 8001818:	221f      	movs	r2, #31
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	4019      	ands	r1, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b23      	subs	r3, #35	; 0x23
 8001832:	fa00 f203 	lsl.w	r2, r0, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
 800183e:	e01b      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b41      	subs	r3, #65	; 0x41
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4019      	ands	r1, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	3b41      	subs	r3, #65	; 0x41
 800186c:	fa00 f203 	lsl.w	r2, r0, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d91c      	bls.n	80018ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3b1e      	subs	r3, #30
 8001892:	2207      	movs	r2, #7
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	4019      	ands	r1, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6898      	ldr	r0, [r3, #8]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	3b1e      	subs	r3, #30
 80018ac:	fa00 f203 	lsl.w	r2, r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	e019      	b.n	80018ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6919      	ldr	r1, [r3, #16]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	2207      	movs	r2, #7
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4019      	ands	r1, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6898      	ldr	r0, [r3, #8]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d003      	beq.n	80018fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d132      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_ADC_ConfigChannel+0x1e4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d125      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d126      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001924:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b10      	cmp	r3, #16
 800192c:	d11a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_ADC_ConfigChannel+0x1e8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <HAL_ADC_ConfigChannel+0x1ec>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0c9a      	lsrs	r2, r3, #18
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001944:	e002      	b.n	800194c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3b01      	subs	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f9      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x1b2>
 8001952:	e007      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40012400 	.word	0x40012400
 800197c:	20000008 	.word	0x20000008
 8001980:	431bde83 	.word	0x431bde83

08001984 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d040      	beq.n	8001a24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <ADC_Enable+0xac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <ADC_Enable+0xb0>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	0c9b      	lsrs	r3, r3, #18
 80019be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019c0:	e002      	b.n	80019c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019ce:	f7ff fccf 	bl	8001370 <HAL_GetTick>
 80019d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019d4:	e01f      	b.n	8001a16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019d6:	f7ff fccb 	bl	8001370 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d918      	bls.n	8001a16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d011      	beq.n	8001a16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f043 0210 	orr.w	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d1d8      	bne.n	80019d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d12e      	bne.n	8001ab0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a62:	f7ff fc85 	bl	8001370 <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a68:	e01b      	b.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a6a:	f7ff fc81 	bl	8001370 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d914      	bls.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10d      	bne.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e007      	b.n	8001ab2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d0dc      	beq.n	8001a6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d127      	bne.n	8001b24 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aee:	d115      	bne.n	8001b1c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7ff fe1d 	bl	800175c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b22:	e004      	b.n	8001b2e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fe12 	bl	800176e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f043 0204 	orr.w	r2, r3, #4
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fe01 	bl	8001780 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <__NVIC_EnableIRQ+0x34>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff90 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff2d 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff42 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff35 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e059      	b.n	8001e6e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_DMA_Init+0xd4>)
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d80f      	bhi.n	8001de6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_DMA_Init+0xd8>)
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <HAL_DMA_Init+0xdc>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	009a      	lsls	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_DMA_Init+0xe0>)
 8001de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001de4:	e00e      	b.n	8001e04 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_DMA_Init+0xe4>)
 8001dee:	4413      	add	r3, r2
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_DMA_Init+0xdc>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	009a      	lsls	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_DMA_Init+0xe8>)
 8001e02:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40020407 	.word	0x40020407
 8001e7c:	bffdfff8 	.word	0xbffdfff8
 8001e80:	cccccccd 	.word	0xcccccccd
 8001e84:	40020000 	.word	0x40020000
 8001e88:	bffdfbf8 	.word	0xbffdfbf8
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_DMA_Start_IT+0x20>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e04b      	b.n	8001f48 <HAL_DMA_Start_IT+0xb8>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d13a      	bne.n	8001f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0201 	bic.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fa6d 	bl	80023c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 020e 	orr.w	r2, r2, #14
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e00f      	b.n	8001f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 020a 	orr.w	r2, r2, #10
 8001f26:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e005      	b.n	8001f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f42:	2302      	movs	r3, #2
 8001f44:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80f1 	beq.w	800215c <HAL_DMA_IRQHandler+0x20c>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80eb 	beq.w	800215c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0204 	bic.w	r2, r2, #4
 8001fa2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_DMA_IRQHandler+0x1d8>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d958      	bls.n	8002062 <HAL_DMA_IRQHandler+0x112>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	; (800212c <HAL_DMA_IRQHandler+0x1dc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d04f      	beq.n	800205a <HAL_DMA_IRQHandler+0x10a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <HAL_DMA_IRQHandler+0x1e0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d048      	beq.n	8002056 <HAL_DMA_IRQHandler+0x106>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <HAL_DMA_IRQHandler+0x1e4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d040      	beq.n	8002050 <HAL_DMA_IRQHandler+0x100>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a59      	ldr	r2, [pc, #356]	; (8002138 <HAL_DMA_IRQHandler+0x1e8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d038      	beq.n	800204a <HAL_DMA_IRQHandler+0xfa>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_DMA_IRQHandler+0x1ec>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d030      	beq.n	8002044 <HAL_DMA_IRQHandler+0xf4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_DMA_IRQHandler+0x1f0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d028      	beq.n	800203e <HAL_DMA_IRQHandler+0xee>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a4d      	ldr	r2, [pc, #308]	; (8002128 <HAL_DMA_IRQHandler+0x1d8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d020      	beq.n	8002038 <HAL_DMA_IRQHandler+0xe8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_DMA_IRQHandler+0x1f4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d019      	beq.n	8002034 <HAL_DMA_IRQHandler+0xe4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_DMA_IRQHandler+0x1f8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xe0>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_DMA_IRQHandler+0x1fc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00a      	beq.n	800202a <HAL_DMA_IRQHandler+0xda>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_DMA_IRQHandler+0x200>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d102      	bne.n	8002024 <HAL_DMA_IRQHandler+0xd4>
 800201e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002022:	e01b      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002024:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002028:	e018      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 800202a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202e:	e015      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	e013      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002034:	2304      	movs	r3, #4
 8002036:	e011      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800203c:	e00e      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 800203e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002042:	e00b      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002048:	e008      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 800204a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800204e:	e005      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002054:	e002      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 8002056:	2340      	movs	r3, #64	; 0x40
 8002058:	e000      	b.n	800205c <HAL_DMA_IRQHandler+0x10c>
 800205a:	2304      	movs	r3, #4
 800205c:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <HAL_DMA_IRQHandler+0x204>)
 800205e:	6053      	str	r3, [r2, #4]
 8002060:	e057      	b.n	8002112 <HAL_DMA_IRQHandler+0x1c2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a31      	ldr	r2, [pc, #196]	; (800212c <HAL_DMA_IRQHandler+0x1dc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d04f      	beq.n	800210c <HAL_DMA_IRQHandler+0x1bc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2f      	ldr	r2, [pc, #188]	; (8002130 <HAL_DMA_IRQHandler+0x1e0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d048      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1b8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_DMA_IRQHandler+0x1e4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d040      	beq.n	8002102 <HAL_DMA_IRQHandler+0x1b2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2c      	ldr	r2, [pc, #176]	; (8002138 <HAL_DMA_IRQHandler+0x1e8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d038      	beq.n	80020fc <HAL_DMA_IRQHandler+0x1ac>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_DMA_IRQHandler+0x1ec>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d030      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x1a6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <HAL_DMA_IRQHandler+0x1f0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d028      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x1a0>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a21      	ldr	r2, [pc, #132]	; (8002128 <HAL_DMA_IRQHandler+0x1d8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d020      	beq.n	80020ea <HAL_DMA_IRQHandler+0x19a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a25      	ldr	r2, [pc, #148]	; (8002144 <HAL_DMA_IRQHandler+0x1f4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x196>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a24      	ldr	r2, [pc, #144]	; (8002148 <HAL_DMA_IRQHandler+0x1f8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d012      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x192>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a22      	ldr	r2, [pc, #136]	; (800214c <HAL_DMA_IRQHandler+0x1fc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00a      	beq.n	80020dc <HAL_DMA_IRQHandler+0x18c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <HAL_DMA_IRQHandler+0x200>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d102      	bne.n	80020d6 <HAL_DMA_IRQHandler+0x186>
 80020d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d4:	e01b      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020da:	e018      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e0:	e015      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020e2:	2340      	movs	r3, #64	; 0x40
 80020e4:	e013      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020e6:	2304      	movs	r3, #4
 80020e8:	e011      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020ee:	e00e      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020f4:	e00b      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020fa:	e008      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 80020fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002100:	e005      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	e002      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	e000      	b.n	800210e <HAL_DMA_IRQHandler+0x1be>
 800210c:	2304      	movs	r3, #4
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_DMA_IRQHandler+0x208>)
 8002110:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8136 	beq.w	8002388 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002124:	e130      	b.n	8002388 <HAL_DMA_IRQHandler+0x438>
 8002126:	bf00      	nop
 8002128:	40020080 	.word	0x40020080
 800212c:	40020008 	.word	0x40020008
 8002130:	4002001c 	.word	0x4002001c
 8002134:	40020030 	.word	0x40020030
 8002138:	40020044 	.word	0x40020044
 800213c:	40020058 	.word	0x40020058
 8002140:	4002006c 	.word	0x4002006c
 8002144:	40020408 	.word	0x40020408
 8002148:	4002041c 	.word	0x4002041c
 800214c:	40020430 	.word	0x40020430
 8002150:	40020444 	.word	0x40020444
 8002154:	40020400 	.word	0x40020400
 8002158:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2202      	movs	r2, #2
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80dd 	beq.w	8002328 <HAL_DMA_IRQHandler+0x3d8>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80d7 	beq.w	8002328 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020a 	bic.w	r2, r2, #10
 8002196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_DMA_IRQHandler+0x444>)
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d958      	bls.n	800225e <HAL_DMA_IRQHandler+0x30e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a79      	ldr	r2, [pc, #484]	; (8002398 <HAL_DMA_IRQHandler+0x448>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04f      	beq.n	8002256 <HAL_DMA_IRQHandler+0x306>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a78      	ldr	r2, [pc, #480]	; (800239c <HAL_DMA_IRQHandler+0x44c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d048      	beq.n	8002252 <HAL_DMA_IRQHandler+0x302>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a76      	ldr	r2, [pc, #472]	; (80023a0 <HAL_DMA_IRQHandler+0x450>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d040      	beq.n	800224c <HAL_DMA_IRQHandler+0x2fc>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a75      	ldr	r2, [pc, #468]	; (80023a4 <HAL_DMA_IRQHandler+0x454>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d038      	beq.n	8002246 <HAL_DMA_IRQHandler+0x2f6>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a73      	ldr	r2, [pc, #460]	; (80023a8 <HAL_DMA_IRQHandler+0x458>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d030      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2f0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a72      	ldr	r2, [pc, #456]	; (80023ac <HAL_DMA_IRQHandler+0x45c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d028      	beq.n	800223a <HAL_DMA_IRQHandler+0x2ea>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a69      	ldr	r2, [pc, #420]	; (8002394 <HAL_DMA_IRQHandler+0x444>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d020      	beq.n	8002234 <HAL_DMA_IRQHandler+0x2e4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6e      	ldr	r2, [pc, #440]	; (80023b0 <HAL_DMA_IRQHandler+0x460>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d019      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2e0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6c      	ldr	r2, [pc, #432]	; (80023b4 <HAL_DMA_IRQHandler+0x464>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d012      	beq.n	800222c <HAL_DMA_IRQHandler+0x2dc>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6b      	ldr	r2, [pc, #428]	; (80023b8 <HAL_DMA_IRQHandler+0x468>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00a      	beq.n	8002226 <HAL_DMA_IRQHandler+0x2d6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a69      	ldr	r2, [pc, #420]	; (80023bc <HAL_DMA_IRQHandler+0x46c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d102      	bne.n	8002220 <HAL_DMA_IRQHandler+0x2d0>
 800221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221e:	e01b      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	e018      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	e015      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 800222c:	2320      	movs	r3, #32
 800222e:	e013      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002230:	2302      	movs	r3, #2
 8002232:	e011      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002238:	e00e      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 800223a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800223e:	e00b      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002244:	e008      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224a:	e005      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	e002      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002252:	2320      	movs	r3, #32
 8002254:	e000      	b.n	8002258 <HAL_DMA_IRQHandler+0x308>
 8002256:	2302      	movs	r3, #2
 8002258:	4a59      	ldr	r2, [pc, #356]	; (80023c0 <HAL_DMA_IRQHandler+0x470>)
 800225a:	6053      	str	r3, [r2, #4]
 800225c:	e057      	b.n	800230e <HAL_DMA_IRQHandler+0x3be>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4d      	ldr	r2, [pc, #308]	; (8002398 <HAL_DMA_IRQHandler+0x448>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04f      	beq.n	8002308 <HAL_DMA_IRQHandler+0x3b8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a4b      	ldr	r2, [pc, #300]	; (800239c <HAL_DMA_IRQHandler+0x44c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d048      	beq.n	8002304 <HAL_DMA_IRQHandler+0x3b4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <HAL_DMA_IRQHandler+0x450>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d040      	beq.n	80022fe <HAL_DMA_IRQHandler+0x3ae>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_DMA_IRQHandler+0x454>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d038      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x3a8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <HAL_DMA_IRQHandler+0x458>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d030      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x3a2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a45      	ldr	r2, [pc, #276]	; (80023ac <HAL_DMA_IRQHandler+0x45c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d028      	beq.n	80022ec <HAL_DMA_IRQHandler+0x39c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <HAL_DMA_IRQHandler+0x444>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d020      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x396>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a41      	ldr	r2, [pc, #260]	; (80023b0 <HAL_DMA_IRQHandler+0x460>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x392>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a40      	ldr	r2, [pc, #256]	; (80023b4 <HAL_DMA_IRQHandler+0x464>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d012      	beq.n	80022de <HAL_DMA_IRQHandler+0x38e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3e      	ldr	r2, [pc, #248]	; (80023b8 <HAL_DMA_IRQHandler+0x468>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00a      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x388>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <HAL_DMA_IRQHandler+0x46c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <HAL_DMA_IRQHandler+0x382>
 80022cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d0:	e01b      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	e018      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022dc:	e015      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022de:	2320      	movs	r3, #32
 80022e0:	e013      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e011      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ea:	e00e      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f0:	e00b      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f6:	e008      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fc:	e005      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 80022fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002302:	e002      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 8002304:	2320      	movs	r3, #32
 8002306:	e000      	b.n	800230a <HAL_DMA_IRQHandler+0x3ba>
 8002308:	2302      	movs	r3, #2
 800230a:	4a2e      	ldr	r2, [pc, #184]	; (80023c4 <HAL_DMA_IRQHandler+0x474>)
 800230c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d034      	beq.n	8002388 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002326:	e02f      	b.n	8002388 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d028      	beq.n	800238a <HAL_DMA_IRQHandler+0x43a>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 020e 	bic.w	r2, r2, #14
 8002350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
    }
  }
  return;
 8002388:	bf00      	nop
 800238a:	bf00      	nop
}
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40020080 	.word	0x40020080
 8002398:	40020008 	.word	0x40020008
 800239c:	4002001c 	.word	0x4002001c
 80023a0:	40020030 	.word	0x40020030
 80023a4:	40020044 	.word	0x40020044
 80023a8:	40020058 	.word	0x40020058
 80023ac:	4002006c 	.word	0x4002006c
 80023b0:	40020408 	.word	0x40020408
 80023b4:	4002041c 	.word	0x4002041c
 80023b8:	40020430 	.word	0x40020430
 80023bc:	40020444 	.word	0x40020444
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020000 	.word	0x40020000

080023c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d108      	bne.n	8002408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002406:	e007      	b.n	8002418 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
	...

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b08b      	sub	sp, #44	; 0x2c
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002436:	e179      	b.n	800272c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002438:	2201      	movs	r2, #1
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8168 	bne.w	8002726 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4a96      	ldr	r2, [pc, #600]	; (80026b4 <HAL_GPIO_Init+0x290>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d05e      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002460:	4a94      	ldr	r2, [pc, #592]	; (80026b4 <HAL_GPIO_Init+0x290>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d875      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002466:	4a94      	ldr	r2, [pc, #592]	; (80026b8 <HAL_GPIO_Init+0x294>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d058      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 800246c:	4a92      	ldr	r2, [pc, #584]	; (80026b8 <HAL_GPIO_Init+0x294>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d86f      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002472:	4a92      	ldr	r2, [pc, #584]	; (80026bc <HAL_GPIO_Init+0x298>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d052      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002478:	4a90      	ldr	r2, [pc, #576]	; (80026bc <HAL_GPIO_Init+0x298>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d869      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800247e:	4a90      	ldr	r2, [pc, #576]	; (80026c0 <HAL_GPIO_Init+0x29c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04c      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002484:	4a8e      	ldr	r2, [pc, #568]	; (80026c0 <HAL_GPIO_Init+0x29c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d863      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800248a:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <HAL_GPIO_Init+0x2a0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d046      	beq.n	800251e <HAL_GPIO_Init+0xfa>
 8002490:	4a8c      	ldr	r2, [pc, #560]	; (80026c4 <HAL_GPIO_Init+0x2a0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d85d      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 8002496:	2b12      	cmp	r3, #18
 8002498:	d82a      	bhi.n	80024f0 <HAL_GPIO_Init+0xcc>
 800249a:	2b12      	cmp	r3, #18
 800249c:	d859      	bhi.n	8002552 <HAL_GPIO_Init+0x12e>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <HAL_GPIO_Init+0x80>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	0800251f 	.word	0x0800251f
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	0800250b 	.word	0x0800250b
 80024b0:	0800254d 	.word	0x0800254d
 80024b4:	08002553 	.word	0x08002553
 80024b8:	08002553 	.word	0x08002553
 80024bc:	08002553 	.word	0x08002553
 80024c0:	08002553 	.word	0x08002553
 80024c4:	08002553 	.word	0x08002553
 80024c8:	08002553 	.word	0x08002553
 80024cc:	08002553 	.word	0x08002553
 80024d0:	08002553 	.word	0x08002553
 80024d4:	08002553 	.word	0x08002553
 80024d8:	08002553 	.word	0x08002553
 80024dc:	08002553 	.word	0x08002553
 80024e0:	08002553 	.word	0x08002553
 80024e4:	08002553 	.word	0x08002553
 80024e8:	08002501 	.word	0x08002501
 80024ec:	08002515 	.word	0x08002515
 80024f0:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <HAL_GPIO_Init+0x2a4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024f6:	e02c      	b.n	8002552 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e029      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e024      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	3308      	adds	r3, #8
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e01f      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	330c      	adds	r3, #12
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	e01a      	b.n	8002554 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002526:	2304      	movs	r3, #4
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e013      	b.n	8002554 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002534:	2308      	movs	r3, #8
 8002536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	611a      	str	r2, [r3, #16]
          break;
 800253e:	e009      	b.n	8002554 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002540:	2308      	movs	r3, #8
 8002542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	615a      	str	r2, [r3, #20]
          break;
 800254a:	e003      	b.n	8002554 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x130>
          break;
 8002552:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2bff      	cmp	r3, #255	; 0xff
 8002558:	d801      	bhi.n	800255e <HAL_GPIO_Init+0x13a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_Init+0x13e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	d802      	bhi.n	8002570 <HAL_GPIO_Init+0x14c>
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x152>
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	3b08      	subs	r3, #8
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	210f      	movs	r1, #15
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	6a39      	ldr	r1, [r7, #32]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	431a      	orrs	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80c1 	beq.w	8002726 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_GPIO_Init+0x2a8>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2a8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <HAL_GPIO_Init+0x2a8>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025bc:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <HAL_GPIO_Init+0x2ac>)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	; (80026d4 <HAL_GPIO_Init+0x2b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01f      	beq.n	8002628 <HAL_GPIO_Init+0x204>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a3b      	ldr	r2, [pc, #236]	; (80026d8 <HAL_GPIO_Init+0x2b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d019      	beq.n	8002624 <HAL_GPIO_Init+0x200>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <HAL_GPIO_Init+0x2b8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_GPIO_Init+0x1fc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <HAL_GPIO_Init+0x2bc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_Init+0x1f8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_GPIO_Init+0x2c0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x1f4>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <HAL_GPIO_Init+0x2c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_Init+0x1f0>
 8002610:	2305      	movs	r3, #5
 8002612:	e00a      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002614:	2306      	movs	r3, #6
 8002616:	e008      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002618:	2304      	movs	r3, #4
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x206>
 800261c:	2303      	movs	r3, #3
 800261e:	e004      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002620:	2302      	movs	r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_GPIO_Init+0x206>
 8002628:	2300      	movs	r3, #0
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4093      	lsls	r3, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <HAL_GPIO_Init+0x2ac>)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4924      	ldr	r1, [pc, #144]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4920      	ldr	r1, [pc, #128]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800266c:	4013      	ands	r3, r2
 800266e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	491a      	ldr	r1, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	60cb      	str	r3, [r1, #12]
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	43db      	mvns	r3, r3
 8002692:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 8002694:	4013      	ands	r3, r2
 8002696:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d025      	beq.n	80026f0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	4910      	ldr	r1, [pc, #64]	; (80026ec <HAL_GPIO_Init+0x2c8>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	e025      	b.n	80026fe <HAL_GPIO_Init+0x2da>
 80026b2:	bf00      	nop
 80026b4:	10320000 	.word	0x10320000
 80026b8:	10310000 	.word	0x10310000
 80026bc:	10220000 	.word	0x10220000
 80026c0:	10210000 	.word	0x10210000
 80026c4:	10120000 	.word	0x10120000
 80026c8:	10110000 	.word	0x10110000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40010800 	.word	0x40010800
 80026d8:	40010c00 	.word	0x40010c00
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40011400 	.word	0x40011400
 80026e4:	40011800 	.word	0x40011800
 80026e8:	40011c00 	.word	0x40011c00
 80026ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_GPIO_Init+0x324>)
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4913      	ldr	r1, [pc, #76]	; (8002748 <HAL_GPIO_Init+0x324>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_GPIO_Init+0x324>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_GPIO_Init+0x324>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
 8002716:	e006      	b.n	8002726 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_GPIO_Init+0x324>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	43db      	mvns	r3, r3
 8002720:	4909      	ldr	r1, [pc, #36]	; (8002748 <HAL_GPIO_Init+0x324>)
 8002722:	4013      	ands	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f ae7e 	bne.w	8002438 <HAL_GPIO_Init+0x14>
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	372c      	adds	r7, #44	; 0x2c
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40010400 	.word	0x40010400

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	611a      	str	r2, [r3, #16]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e272      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8087 	beq.w	80028aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800279c:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d00c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a8:	4b8f      	ldr	r3, [pc, #572]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d112      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
 80027b4:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d10b      	bne.n	80027da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c2:	4b89      	ldr	r3, [pc, #548]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x12c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d168      	bne.n	80028a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e24c      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x76>
 80027e4:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a7f      	ldr	r2, [pc, #508]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e02e      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x98>
 80027fa:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b78      	ldr	r3, [pc, #480]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0xbc>
 800281e:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a71      	ldr	r2, [pc, #452]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xd4>
 8002838:	4b6b      	ldr	r3, [pc, #428]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6a      	ldr	r2, [pc, #424]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a67      	ldr	r2, [pc, #412]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fd8a 	bl	8001370 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fd86 	bl	8001370 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e200      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xe4>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fd76 	bl	8001370 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe fd72 	bl	8001370 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1ec      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x10c>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d063      	beq.n	800297e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b6:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028c2:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d11c      	bne.n	8002908 <HAL_RCC_OscConfig+0x18c>
 80028ce:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x176>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1c0      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4939      	ldr	r1, [pc, #228]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	e03a      	b.n	800297e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x270>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fd2b 	bl	8001370 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7fe fd27 	bl	8001370 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1a1      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4927      	ldr	r1, [pc, #156]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e015      	b.n	800297e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_RCC_OscConfig+0x270>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fd0a 	bl	8001370 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe fd06 	bl	8001370 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e180      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03a      	beq.n	8002a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d019      	beq.n	80029c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_RCC_OscConfig+0x274>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7fe fcea 	bl	8001370 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe fce6 	bl	8001370 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e160      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029be:	2001      	movs	r0, #1
 80029c0:	f000 fa9c 	bl	8002efc <RCC_Delay>
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fcd0 	bl	8001370 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d2:	e00f      	b.n	80029f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fccc 	bl	8001370 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d908      	bls.n	80029f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e146      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	42420000 	.word	0x42420000
 80029f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e9      	bne.n	80029d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a6 	beq.w	8002b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b85      	ldr	r3, [pc, #532]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d118      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b7f      	ldr	r3, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a7e      	ldr	r2, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fc8d 	bl	8001370 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe fc89 	bl	8001370 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b64      	cmp	r3, #100	; 0x64
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e103      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x4c8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x312>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6213      	str	r3, [r2, #32]
 8002a8c:	e02d      	b.n	8002aea <HAL_RCC_OscConfig+0x36e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x334>
 8002a96:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a66      	ldr	r2, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6213      	str	r3, [r2, #32]
 8002aae:	e01c      	b.n	8002aea <HAL_RCC_OscConfig+0x36e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x356>
 8002ab8:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	6213      	str	r3, [r2, #32]
 8002ac4:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a5d      	ldr	r2, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x36e>
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a5a      	ldr	r2, [pc, #360]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6213      	str	r3, [r2, #32]
 8002ade:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fc3d 	bl	8001370 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fc39 	bl	8001370 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e0b1      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCC_OscConfig+0x37e>
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fc27 	bl	8001370 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fc23 	bl	8001370 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e09b      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ee      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 8087 	beq.w	8002c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d061      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d146      	bne.n	8002c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fbf7 	bl	8001370 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe fbf3 	bl	8001370 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e06d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bac:	d108      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4921      	ldr	r1, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a19      	ldr	r1, [r3, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fbc7 	bl	8001370 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fbc3 	bl	8001370 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e03d      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x46a>
 8002c04:	e035      	b.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fbb0 	bl	8001370 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fbac 	bl	8001370 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e026      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x498>
 8002c32:	e01e      	b.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e019      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_OscConfig+0x500>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d0      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c94:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d910      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b67      	ldr	r3, [pc, #412]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4965      	ldr	r1, [pc, #404]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d040      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d115      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e073      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06b      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f023 0203 	bic.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4936      	ldr	r1, [pc, #216]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d70:	f7fe fafe 	bl	8001370 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d78:	f7fe fafa 	bl	8001370 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e053      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 020c 	and.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1eb      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da0:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d210      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4922      	ldr	r1, [pc, #136]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	; (8002e48 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1cc>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1d0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fa5c 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	080051dc 	.word	0x080051dc
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d002      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x30>
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x36>
 8002e82:	e027      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_RCC_GetSysClockFreq+0x98>)
 8002e86:	613b      	str	r3, [r7, #16]
      break;
 8002e88:	e027      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0c9b      	lsrs	r3, r3, #18
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e94:	5cd3      	ldrb	r3, [r2, r3]
 8002e96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0c5b      	lsrs	r3, r3, #17
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb6:	fb03 f202 	mul.w	r2, r3, r2
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e004      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed6:	613b      	str	r3, [r7, #16]
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	693b      	ldr	r3, [r7, #16]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	007a1200 	.word	0x007a1200
 8002ef0:	080051ec 	.word	0x080051ec
 8002ef4:	080051fc 	.word	0x080051fc
 8002ef8:	003d0900 	.word	0x003d0900

08002efc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <RCC_Delay+0x34>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <RCC_Delay+0x38>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0a5b      	lsrs	r3, r3, #9
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f18:	bf00      	nop
  }
  while (Delay --);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1e5a      	subs	r2, r3, #1
 8002f1e:	60fa      	str	r2, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f9      	bne.n	8002f18 <RCC_Delay+0x1c>
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	20000008 	.word	0x20000008
 8002f34:	10624dd3 	.word	0x10624dd3

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d07d      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10d      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
 8002f70:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d118      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a42      	ldr	r2, [pc, #264]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f98:	f7fe f9ea 	bl	8001370 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa0:	f7fe f9e6 	bl	8001370 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e06d      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fbe:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d02e      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d027      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fe6:	4b2e      	ldr	r3, [pc, #184]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fec:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d014      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fe f9b5 	bl	8001370 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe f9b1 	bl	8001370 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e036      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ee      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	4313      	orrs	r3, r2
 800303c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	490b      	ldr	r1, [pc, #44]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	4904      	ldr	r1, [pc, #16]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	42420440 	.word	0x42420440

080030a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e076      	b.n	80031a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d009      	beq.n	80030dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	61da      	str	r2, [r3, #28]
 80030ce:	e005      	b.n	80030dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd ffb2 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	ea42 0103 	orr.w	r1, r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	0c1a      	lsrs	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f002 0204 	and.w	r2, r2, #4
 8003182:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003192:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Transmit+0x22>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e12d      	b.n	800342a <HAL_SPI_Transmit+0x27e>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031d6:	f7fe f8cb 	bl	8001370 <HAL_GetTick>
 80031da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
 80031ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f0:	e116      	b.n	8003420 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_SPI_Transmit+0x52>
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003202:	e10d      	b.n	8003420 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2203      	movs	r2, #3
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	88fa      	ldrh	r2, [r7, #6]
 8003222:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	d10f      	bne.n	800326c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d007      	beq.n	800328a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	d14f      	bne.n	8003334 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Transmit+0xf6>
 800329c:	8afb      	ldrh	r3, [r7, #22]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d142      	bne.n	8003328 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032c6:	e02f      	b.n	8003328 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d112      	bne.n	80032fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80032fa:	e015      	b.n	8003328 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032fc:	f7fe f838 	bl	8001370 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d803      	bhi.n	8003314 <HAL_SPI_Transmit+0x168>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d102      	bne.n	800331a <HAL_SPI_Transmit+0x16e>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003326:	e07b      	b.n	8003420 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ca      	bne.n	80032c8 <HAL_SPI_Transmit+0x11c>
 8003332:	e050      	b.n	80033d6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_Transmit+0x196>
 800333c:	8afb      	ldrh	r3, [r7, #22]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d144      	bne.n	80033cc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003368:	e030      	b.n	80033cc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b02      	cmp	r3, #2
 8003376:	d113      	bne.n	80033a0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	86da      	strh	r2, [r3, #54]	; 0x36
 800339e:	e015      	b.n	80033cc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a0:	f7fd ffe6 	bl	8001370 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d803      	bhi.n	80033b8 <HAL_SPI_Transmit+0x20c>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Transmit+0x212>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033ca:	e029      	b.n	8003420 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1c9      	bne.n	800336a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8b2 	bl	8003544 <SPI_EndRxTxTransaction>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e003      	b.n	8003420 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003428:	7ffb      	ldrb	r3, [r7, #31]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003444:	f7fd ff94 	bl	8001370 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	4413      	add	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003454:	f7fd ff8c 	bl	8001370 <HAL_GetTick>
 8003458:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	015b      	lsls	r3, r3, #5
 8003460:	0d1b      	lsrs	r3, r3, #20
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346a:	e054      	b.n	8003516 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d050      	beq.n	8003516 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003474:	f7fd ff7c 	bl	8001370 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	429a      	cmp	r2, r3
 8003482:	d902      	bls.n	800348a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d13d      	bne.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003498:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a2:	d111      	bne.n	80034c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ac:	d004      	beq.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d107      	bne.n	80034c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d0:	d10f      	bne.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e017      	b.n	8003536 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3b01      	subs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4013      	ands	r3, r2
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	429a      	cmp	r2, r3
 8003532:	d19b      	bne.n	800346c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000008 	.word	0x20000008

08003544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2200      	movs	r2, #0
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff ff6a 	bl	8003434 <SPI_WaitFlagStateUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e000      	b.n	8003578 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e041      	b.n	8003616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fda6 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 faca 	bl	8003b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e041      	b.n	80036b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f839 	bl	80036bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f000 fa7b 	bl	8003b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_TIM_PWM_Start+0x24>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e022      	b.n	800373a <HAL_TIM_PWM_Start+0x6a>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d109      	bne.n	800370e <HAL_TIM_PWM_Start+0x3e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e015      	b.n	800373a <HAL_TIM_PWM_Start+0x6a>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d109      	bne.n	8003728 <HAL_TIM_PWM_Start+0x58>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e008      	b.n	800373a <HAL_TIM_PWM_Start+0x6a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e072      	b.n	8003828 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <HAL_TIM_PWM_Start+0x82>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	e013      	b.n	800377a <HAL_TIM_PWM_Start+0xaa>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0x92>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003760:	e00b      	b.n	800377a <HAL_TIM_PWM_Start+0xaa>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0xa2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003770:	e003      	b.n	800377a <HAL_TIM_PWM_Start+0xaa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fca4 	bl	80040d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a28      	ldr	r2, [pc, #160]	; (8003830 <HAL_TIM_PWM_Start+0x160>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_TIM_PWM_Start+0xcc>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a27      	ldr	r2, [pc, #156]	; (8003834 <HAL_TIM_PWM_Start+0x164>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_TIM_PWM_Start+0xd0>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_TIM_PWM_Start+0xd2>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_TIM_PWM_Start+0x160>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x122>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_TIM_PWM_Start+0x164>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x122>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d00e      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x122>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a17      	ldr	r2, [pc, #92]	; (8003838 <HAL_TIM_PWM_Start+0x168>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x122>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a16      	ldr	r2, [pc, #88]	; (800383c <HAL_TIM_PWM_Start+0x16c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_PWM_Start+0x122>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <HAL_TIM_PWM_Start+0x170>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d111      	bne.n	8003816 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b06      	cmp	r3, #6
 8003802:	d010      	beq.n	8003826 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003814:	e007      	b.n	8003826 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40013400 	.word	0x40013400
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00

08003844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800385e:	2302      	movs	r3, #2
 8003860:	e0ae      	b.n	80039c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f200 809f 	bhi.w	80039b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080039b1 	.word	0x080039b1
 8003880:	080039b1 	.word	0x080039b1
 8003884:	080039b1 	.word	0x080039b1
 8003888:	080038ed 	.word	0x080038ed
 800388c:	080039b1 	.word	0x080039b1
 8003890:	080039b1 	.word	0x080039b1
 8003894:	080039b1 	.word	0x080039b1
 8003898:	0800392f 	.word	0x0800392f
 800389c:	080039b1 	.word	0x080039b1
 80038a0:	080039b1 	.word	0x080039b1
 80038a4:	080039b1 	.word	0x080039b1
 80038a8:	0800396f 	.word	0x0800396f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f9ca 	bl	8003c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0208 	orr.w	r2, r2, #8
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6999      	ldr	r1, [r3, #24]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	619a      	str	r2, [r3, #24]
      break;
 80038ea:	e064      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fa1a 	bl	8003d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	021a      	lsls	r2, r3, #8
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	619a      	str	r2, [r3, #24]
      break;
 800392c:	e043      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fa6d 	bl	8003e14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0208 	orr.w	r2, r2, #8
 8003948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0204 	bic.w	r2, r2, #4
 8003958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	61da      	str	r2, [r3, #28]
      break;
 800396c:	e023      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fac1 	bl	8003efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	021a      	lsls	r2, r3, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	61da      	str	r2, [r3, #28]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
      break;
 80039b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0b4      	b.n	8003b4e <HAL_TIM_ConfigClockSource+0x186>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d03e      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0xd4>
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a22:	f200 8087 	bhi.w	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	f000 8086 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x172>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d87f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b70      	cmp	r3, #112	; 0x70
 8003a36:	d01a      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xa6>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d87b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b60      	cmp	r3, #96	; 0x60
 8003a3e:	d050      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d877      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b50      	cmp	r3, #80	; 0x50
 8003a46:	d03c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d873      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d058      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x13a>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d86f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b30      	cmp	r3, #48	; 0x30
 8003a56:	d064      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d86b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d060      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d867      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d05a      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	e062      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f000 fb08 	bl	8004092 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	609a      	str	r2, [r3, #8]
      break;
 8003a9a:	e04f      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6899      	ldr	r1, [r3, #8]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f000 faf1 	bl	8004092 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003abe:	609a      	str	r2, [r3, #8]
      break;
 8003ac0:	e03c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 fa68 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2150      	movs	r1, #80	; 0x50
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fabf 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e02c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f000 fa86 	bl	8004000 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2160      	movs	r1, #96	; 0x60
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 faaf 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003b00:	e01c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fa48 	bl	8003fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fa9f 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003b20:	e00c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f000 fa96 	bl	800405e <TIM_ITRx_SetConfig>
      break;
 8003b32:	e003      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e000      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a33      	ldr	r2, [pc, #204]	; (8003c38 <TIM_Base_SetConfig+0xe0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a32      	ldr	r2, [pc, #200]	; (8003c3c <TIM_Base_SetConfig+0xe4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00f      	beq.n	8003b98 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d00b      	beq.n	8003b98 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2f      	ldr	r2, [pc, #188]	; (8003c40 <TIM_Base_SetConfig+0xe8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_Base_SetConfig+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <TIM_Base_SetConfig+0xec>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0x40>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a2d      	ldr	r2, [pc, #180]	; (8003c48 <TIM_Base_SetConfig+0xf0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <TIM_Base_SetConfig+0xe0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <TIM_Base_SetConfig+0x82>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <TIM_Base_SetConfig+0xe4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00f      	beq.n	8003bda <TIM_Base_SetConfig+0x82>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d00b      	beq.n	8003bda <TIM_Base_SetConfig+0x82>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <TIM_Base_SetConfig+0xe8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0x82>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <TIM_Base_SetConfig+0xec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0x82>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <TIM_Base_SetConfig+0xf0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <TIM_Base_SetConfig+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_Base_SetConfig+0xc8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <TIM_Base_SetConfig+0xe4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40013400 	.word	0x40013400
 8003c40:	40000400 	.word	0x40000400
 8003c44:	40000800 	.word	0x40000800
 8003c48:	40000c00 	.word	0x40000c00

08003c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 0201 	bic.w	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 0302 	bic.w	r3, r3, #2
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a20      	ldr	r2, [pc, #128]	; (8003d24 <TIM_OC1_SetConfig+0xd8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC1_SetConfig+0x64>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <TIM_OC1_SetConfig+0xdc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10c      	bne.n	8003cca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0308 	bic.w	r3, r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <TIM_OC1_SetConfig+0xd8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC1_SetConfig+0x8e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <TIM_OC1_SetConfig+0xdc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d111      	bne.n	8003cfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40013400 	.word	0x40013400

08003d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 0210 	bic.w	r2, r3, #16
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0320 	bic.w	r3, r3, #32
 8003d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <TIM_OC2_SetConfig+0xe0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC2_SetConfig+0x68>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <TIM_OC2_SetConfig+0xe4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10d      	bne.n	8003db0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <TIM_OC2_SetConfig+0xe0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_OC2_SetConfig+0x94>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC2_SetConfig+0xe4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d113      	bne.n	8003de8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40013400 	.word	0x40013400

08003e14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <TIM_OC3_SetConfig+0xe0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_OC3_SetConfig+0x66>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <TIM_OC3_SetConfig+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10d      	bne.n	8003e96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <TIM_OC3_SetConfig+0xe0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC3_SetConfig+0x92>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <TIM_OC3_SetConfig+0xe4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d113      	bne.n	8003ece <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40013400 	.word	0x40013400

08003efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	031b      	lsls	r3, r3, #12
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <TIM_OC4_SetConfig+0xa0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC4_SetConfig+0x68>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <TIM_OC4_SetConfig+0xa4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d109      	bne.n	8003f78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40013400 	.word	0x40013400

08003fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 030a 	bic.w	r3, r3, #10
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0210 	bic.w	r2, r3, #16
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	031b      	lsls	r3, r3, #12
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800403c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	f043 0307 	orr.w	r3, r3, #7
 8004080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004092:	b480      	push	{r7}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	609a      	str	r2, [r3, #8]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	2201      	movs	r2, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	401a      	ands	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1a      	ldr	r2, [r3, #32]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e050      	b.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d00e      	beq.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a12      	ldr	r2, [pc, #72]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d10c      	bne.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40013400 	.word	0x40013400
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00

080041f0 <__errno>:
 80041f0:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <__errno+0x8>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000014 	.word	0x20000014

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	2600      	movs	r6, #0
 8004200:	4d0c      	ldr	r5, [pc, #48]	; (8004234 <__libc_init_array+0x38>)
 8004202:	4c0d      	ldr	r4, [pc, #52]	; (8004238 <__libc_init_array+0x3c>)
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	f000 fcc6 	bl	8004b9c <_init>
 8004210:	2600      	movs	r6, #0
 8004212:	4d0a      	ldr	r5, [pc, #40]	; (800423c <__libc_init_array+0x40>)
 8004214:	4c0a      	ldr	r4, [pc, #40]	; (8004240 <__libc_init_array+0x44>)
 8004216:	1b64      	subs	r4, r4, r5
 8004218:	10a4      	asrs	r4, r4, #2
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	08005234 	.word	0x08005234
 8004238:	08005234 	.word	0x08005234
 800423c:	08005234 	.word	0x08005234
 8004240:	08005238 	.word	0x08005238

08004244 <malloc>:
 8004244:	4b02      	ldr	r3, [pc, #8]	; (8004250 <malloc+0xc>)
 8004246:	4601      	mov	r1, r0
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	f000 b87b 	b.w	8004344 <_malloc_r>
 800424e:	bf00      	nop
 8004250:	20000014 	.word	0x20000014

08004254 <free>:
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <free+0xc>)
 8004256:	4601      	mov	r1, r0
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	f000 b80b 	b.w	8004274 <_free_r>
 800425e:	bf00      	nop
 8004260:	20000014 	.word	0x20000014

08004264 <memset>:
 8004264:	4603      	mov	r3, r0
 8004266:	4402      	add	r2, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <_free_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4605      	mov	r5, r0
 8004278:	2900      	cmp	r1, #0
 800427a:	d040      	beq.n	80042fe <_free_r+0x8a>
 800427c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004280:	1f0c      	subs	r4, r1, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	bfb8      	it	lt
 8004286:	18e4      	addlt	r4, r4, r3
 8004288:	f000 f91a 	bl	80044c0 <__malloc_lock>
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <_free_r+0x8c>)
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	b933      	cbnz	r3, 80042a0 <_free_r+0x2c>
 8004292:	6063      	str	r3, [r4, #4]
 8004294:	6014      	str	r4, [r2, #0]
 8004296:	4628      	mov	r0, r5
 8004298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800429c:	f000 b916 	b.w	80044cc <__malloc_unlock>
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d908      	bls.n	80042b6 <_free_r+0x42>
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	1821      	adds	r1, r4, r0
 80042a8:	428b      	cmp	r3, r1
 80042aa:	bf01      	itttt	eq
 80042ac:	6819      	ldreq	r1, [r3, #0]
 80042ae:	685b      	ldreq	r3, [r3, #4]
 80042b0:	1809      	addeq	r1, r1, r0
 80042b2:	6021      	streq	r1, [r4, #0]
 80042b4:	e7ed      	b.n	8004292 <_free_r+0x1e>
 80042b6:	461a      	mov	r2, r3
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	b10b      	cbz	r3, 80042c0 <_free_r+0x4c>
 80042bc:	42a3      	cmp	r3, r4
 80042be:	d9fa      	bls.n	80042b6 <_free_r+0x42>
 80042c0:	6811      	ldr	r1, [r2, #0]
 80042c2:	1850      	adds	r0, r2, r1
 80042c4:	42a0      	cmp	r0, r4
 80042c6:	d10b      	bne.n	80042e0 <_free_r+0x6c>
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	4401      	add	r1, r0
 80042cc:	1850      	adds	r0, r2, r1
 80042ce:	4283      	cmp	r3, r0
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	d1e0      	bne.n	8004296 <_free_r+0x22>
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4401      	add	r1, r0
 80042da:	6011      	str	r1, [r2, #0]
 80042dc:	6053      	str	r3, [r2, #4]
 80042de:	e7da      	b.n	8004296 <_free_r+0x22>
 80042e0:	d902      	bls.n	80042e8 <_free_r+0x74>
 80042e2:	230c      	movs	r3, #12
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	e7d6      	b.n	8004296 <_free_r+0x22>
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	1821      	adds	r1, r4, r0
 80042ec:	428b      	cmp	r3, r1
 80042ee:	bf01      	itttt	eq
 80042f0:	6819      	ldreq	r1, [r3, #0]
 80042f2:	685b      	ldreq	r3, [r3, #4]
 80042f4:	1809      	addeq	r1, r1, r0
 80042f6:	6021      	streq	r1, [r4, #0]
 80042f8:	6063      	str	r3, [r4, #4]
 80042fa:	6054      	str	r4, [r2, #4]
 80042fc:	e7cb      	b.n	8004296 <_free_r+0x22>
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	20000218 	.word	0x20000218

08004304 <sbrk_aligned>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	4e0e      	ldr	r6, [pc, #56]	; (8004340 <sbrk_aligned+0x3c>)
 8004308:	460c      	mov	r4, r1
 800430a:	6831      	ldr	r1, [r6, #0]
 800430c:	4605      	mov	r5, r0
 800430e:	b911      	cbnz	r1, 8004316 <sbrk_aligned+0x12>
 8004310:	f000 f88c 	bl	800442c <_sbrk_r>
 8004314:	6030      	str	r0, [r6, #0]
 8004316:	4621      	mov	r1, r4
 8004318:	4628      	mov	r0, r5
 800431a:	f000 f887 	bl	800442c <_sbrk_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	d00a      	beq.n	8004338 <sbrk_aligned+0x34>
 8004322:	1cc4      	adds	r4, r0, #3
 8004324:	f024 0403 	bic.w	r4, r4, #3
 8004328:	42a0      	cmp	r0, r4
 800432a:	d007      	beq.n	800433c <sbrk_aligned+0x38>
 800432c:	1a21      	subs	r1, r4, r0
 800432e:	4628      	mov	r0, r5
 8004330:	f000 f87c 	bl	800442c <_sbrk_r>
 8004334:	3001      	adds	r0, #1
 8004336:	d101      	bne.n	800433c <sbrk_aligned+0x38>
 8004338:	f04f 34ff 	mov.w	r4, #4294967295
 800433c:	4620      	mov	r0, r4
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	2000021c 	.word	0x2000021c

08004344 <_malloc_r>:
 8004344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004348:	1ccd      	adds	r5, r1, #3
 800434a:	f025 0503 	bic.w	r5, r5, #3
 800434e:	3508      	adds	r5, #8
 8004350:	2d0c      	cmp	r5, #12
 8004352:	bf38      	it	cc
 8004354:	250c      	movcc	r5, #12
 8004356:	2d00      	cmp	r5, #0
 8004358:	4607      	mov	r7, r0
 800435a:	db01      	blt.n	8004360 <_malloc_r+0x1c>
 800435c:	42a9      	cmp	r1, r5
 800435e:	d905      	bls.n	800436c <_malloc_r+0x28>
 8004360:	230c      	movs	r3, #12
 8004362:	2600      	movs	r6, #0
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	4630      	mov	r0, r6
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436c:	4e2e      	ldr	r6, [pc, #184]	; (8004428 <_malloc_r+0xe4>)
 800436e:	f000 f8a7 	bl	80044c0 <__malloc_lock>
 8004372:	6833      	ldr	r3, [r6, #0]
 8004374:	461c      	mov	r4, r3
 8004376:	bb34      	cbnz	r4, 80043c6 <_malloc_r+0x82>
 8004378:	4629      	mov	r1, r5
 800437a:	4638      	mov	r0, r7
 800437c:	f7ff ffc2 	bl	8004304 <sbrk_aligned>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	4604      	mov	r4, r0
 8004384:	d14d      	bne.n	8004422 <_malloc_r+0xde>
 8004386:	6834      	ldr	r4, [r6, #0]
 8004388:	4626      	mov	r6, r4
 800438a:	2e00      	cmp	r6, #0
 800438c:	d140      	bne.n	8004410 <_malloc_r+0xcc>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	4631      	mov	r1, r6
 8004392:	4638      	mov	r0, r7
 8004394:	eb04 0803 	add.w	r8, r4, r3
 8004398:	f000 f848 	bl	800442c <_sbrk_r>
 800439c:	4580      	cmp	r8, r0
 800439e:	d13a      	bne.n	8004416 <_malloc_r+0xd2>
 80043a0:	6821      	ldr	r1, [r4, #0]
 80043a2:	3503      	adds	r5, #3
 80043a4:	1a6d      	subs	r5, r5, r1
 80043a6:	f025 0503 	bic.w	r5, r5, #3
 80043aa:	3508      	adds	r5, #8
 80043ac:	2d0c      	cmp	r5, #12
 80043ae:	bf38      	it	cc
 80043b0:	250c      	movcc	r5, #12
 80043b2:	4638      	mov	r0, r7
 80043b4:	4629      	mov	r1, r5
 80043b6:	f7ff ffa5 	bl	8004304 <sbrk_aligned>
 80043ba:	3001      	adds	r0, #1
 80043bc:	d02b      	beq.n	8004416 <_malloc_r+0xd2>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	442b      	add	r3, r5
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	e00e      	b.n	80043e4 <_malloc_r+0xa0>
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	1b52      	subs	r2, r2, r5
 80043ca:	d41e      	bmi.n	800440a <_malloc_r+0xc6>
 80043cc:	2a0b      	cmp	r2, #11
 80043ce:	d916      	bls.n	80043fe <_malloc_r+0xba>
 80043d0:	1961      	adds	r1, r4, r5
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	6025      	str	r5, [r4, #0]
 80043d6:	bf18      	it	ne
 80043d8:	6059      	strne	r1, [r3, #4]
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	bf08      	it	eq
 80043de:	6031      	streq	r1, [r6, #0]
 80043e0:	5162      	str	r2, [r4, r5]
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	4638      	mov	r0, r7
 80043e6:	f104 060b 	add.w	r6, r4, #11
 80043ea:	f000 f86f 	bl	80044cc <__malloc_unlock>
 80043ee:	f026 0607 	bic.w	r6, r6, #7
 80043f2:	1d23      	adds	r3, r4, #4
 80043f4:	1af2      	subs	r2, r6, r3
 80043f6:	d0b6      	beq.n	8004366 <_malloc_r+0x22>
 80043f8:	1b9b      	subs	r3, r3, r6
 80043fa:	50a3      	str	r3, [r4, r2]
 80043fc:	e7b3      	b.n	8004366 <_malloc_r+0x22>
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	bf0c      	ite	eq
 8004404:	6032      	streq	r2, [r6, #0]
 8004406:	605a      	strne	r2, [r3, #4]
 8004408:	e7ec      	b.n	80043e4 <_malloc_r+0xa0>
 800440a:	4623      	mov	r3, r4
 800440c:	6864      	ldr	r4, [r4, #4]
 800440e:	e7b2      	b.n	8004376 <_malloc_r+0x32>
 8004410:	4634      	mov	r4, r6
 8004412:	6876      	ldr	r6, [r6, #4]
 8004414:	e7b9      	b.n	800438a <_malloc_r+0x46>
 8004416:	230c      	movs	r3, #12
 8004418:	4638      	mov	r0, r7
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	f000 f856 	bl	80044cc <__malloc_unlock>
 8004420:	e7a1      	b.n	8004366 <_malloc_r+0x22>
 8004422:	6025      	str	r5, [r4, #0]
 8004424:	e7de      	b.n	80043e4 <_malloc_r+0xa0>
 8004426:	bf00      	nop
 8004428:	20000218 	.word	0x20000218

0800442c <_sbrk_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	2300      	movs	r3, #0
 8004430:	4d05      	ldr	r5, [pc, #20]	; (8004448 <_sbrk_r+0x1c>)
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fc fee0 	bl	80011fc <_sbrk>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_sbrk_r+0x1a>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_sbrk_r+0x1a>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20000220 	.word	0x20000220

0800444c <_vsniprintf_r>:
 800444c:	b530      	push	{r4, r5, lr}
 800444e:	4614      	mov	r4, r2
 8004450:	2c00      	cmp	r4, #0
 8004452:	4605      	mov	r5, r0
 8004454:	461a      	mov	r2, r3
 8004456:	b09b      	sub	sp, #108	; 0x6c
 8004458:	da05      	bge.n	8004466 <_vsniprintf_r+0x1a>
 800445a:	238b      	movs	r3, #139	; 0x8b
 800445c:	6003      	str	r3, [r0, #0]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	b01b      	add	sp, #108	; 0x6c
 8004464:	bd30      	pop	{r4, r5, pc}
 8004466:	f44f 7302 	mov.w	r3, #520	; 0x208
 800446a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800446e:	bf0c      	ite	eq
 8004470:	4623      	moveq	r3, r4
 8004472:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	9305      	str	r3, [sp, #20]
 800447a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800447e:	9100      	str	r1, [sp, #0]
 8004480:	9104      	str	r1, [sp, #16]
 8004482:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004486:	4669      	mov	r1, sp
 8004488:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800448a:	f000 f881 	bl	8004590 <_svfiprintf_r>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	bfbc      	itt	lt
 8004492:	238b      	movlt	r3, #139	; 0x8b
 8004494:	602b      	strlt	r3, [r5, #0]
 8004496:	2c00      	cmp	r4, #0
 8004498:	d0e3      	beq.n	8004462 <_vsniprintf_r+0x16>
 800449a:	2200      	movs	r2, #0
 800449c:	9b00      	ldr	r3, [sp, #0]
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e7df      	b.n	8004462 <_vsniprintf_r+0x16>
	...

080044a4 <vsniprintf>:
 80044a4:	b507      	push	{r0, r1, r2, lr}
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	460a      	mov	r2, r1
 80044ac:	4601      	mov	r1, r0
 80044ae:	4803      	ldr	r0, [pc, #12]	; (80044bc <vsniprintf+0x18>)
 80044b0:	6800      	ldr	r0, [r0, #0]
 80044b2:	f7ff ffcb 	bl	800444c <_vsniprintf_r>
 80044b6:	b003      	add	sp, #12
 80044b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80044bc:	20000014 	.word	0x20000014

080044c0 <__malloc_lock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__malloc_lock+0x8>)
 80044c2:	f000 bafb 	b.w	8004abc <__retarget_lock_acquire_recursive>
 80044c6:	bf00      	nop
 80044c8:	20000224 	.word	0x20000224

080044cc <__malloc_unlock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <__malloc_unlock+0x8>)
 80044ce:	f000 baf6 	b.w	8004abe <__retarget_lock_release_recursive>
 80044d2:	bf00      	nop
 80044d4:	20000224 	.word	0x20000224

080044d8 <__ssputs_r>:
 80044d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	688e      	ldr	r6, [r1, #8]
 80044de:	4682      	mov	sl, r0
 80044e0:	429e      	cmp	r6, r3
 80044e2:	460c      	mov	r4, r1
 80044e4:	4690      	mov	r8, r2
 80044e6:	461f      	mov	r7, r3
 80044e8:	d838      	bhi.n	800455c <__ssputs_r+0x84>
 80044ea:	898a      	ldrh	r2, [r1, #12]
 80044ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044f0:	d032      	beq.n	8004558 <__ssputs_r+0x80>
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	6909      	ldr	r1, [r1, #16]
 80044f6:	3301      	adds	r3, #1
 80044f8:	eba5 0901 	sub.w	r9, r5, r1
 80044fc:	6965      	ldr	r5, [r4, #20]
 80044fe:	444b      	add	r3, r9
 8004500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004508:	106d      	asrs	r5, r5, #1
 800450a:	429d      	cmp	r5, r3
 800450c:	bf38      	it	cc
 800450e:	461d      	movcc	r5, r3
 8004510:	0553      	lsls	r3, r2, #21
 8004512:	d531      	bpl.n	8004578 <__ssputs_r+0xa0>
 8004514:	4629      	mov	r1, r5
 8004516:	f7ff ff15 	bl	8004344 <_malloc_r>
 800451a:	4606      	mov	r6, r0
 800451c:	b950      	cbnz	r0, 8004534 <__ssputs_r+0x5c>
 800451e:	230c      	movs	r3, #12
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	f8ca 3000 	str.w	r3, [sl]
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	464a      	mov	r2, r9
 8004536:	6921      	ldr	r1, [r4, #16]
 8004538:	f000 fad0 	bl	8004adc <memcpy>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	6126      	str	r6, [r4, #16]
 800454a:	444e      	add	r6, r9
 800454c:	6026      	str	r6, [r4, #0]
 800454e:	463e      	mov	r6, r7
 8004550:	6165      	str	r5, [r4, #20]
 8004552:	eba5 0509 	sub.w	r5, r5, r9
 8004556:	60a5      	str	r5, [r4, #8]
 8004558:	42be      	cmp	r6, r7
 800455a:	d900      	bls.n	800455e <__ssputs_r+0x86>
 800455c:	463e      	mov	r6, r7
 800455e:	4632      	mov	r2, r6
 8004560:	4641      	mov	r1, r8
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	f000 fac8 	bl	8004af8 <memmove>
 8004568:	68a3      	ldr	r3, [r4, #8]
 800456a:	2000      	movs	r0, #0
 800456c:	1b9b      	subs	r3, r3, r6
 800456e:	60a3      	str	r3, [r4, #8]
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	4433      	add	r3, r6
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	e7db      	b.n	8004530 <__ssputs_r+0x58>
 8004578:	462a      	mov	r2, r5
 800457a:	f000 fad7 	bl	8004b2c <_realloc_r>
 800457e:	4606      	mov	r6, r0
 8004580:	2800      	cmp	r0, #0
 8004582:	d1e1      	bne.n	8004548 <__ssputs_r+0x70>
 8004584:	4650      	mov	r0, sl
 8004586:	6921      	ldr	r1, [r4, #16]
 8004588:	f7ff fe74 	bl	8004274 <_free_r>
 800458c:	e7c7      	b.n	800451e <__ssputs_r+0x46>
	...

08004590 <_svfiprintf_r>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	4698      	mov	r8, r3
 8004596:	898b      	ldrh	r3, [r1, #12]
 8004598:	4607      	mov	r7, r0
 800459a:	061b      	lsls	r3, r3, #24
 800459c:	460d      	mov	r5, r1
 800459e:	4614      	mov	r4, r2
 80045a0:	b09d      	sub	sp, #116	; 0x74
 80045a2:	d50e      	bpl.n	80045c2 <_svfiprintf_r+0x32>
 80045a4:	690b      	ldr	r3, [r1, #16]
 80045a6:	b963      	cbnz	r3, 80045c2 <_svfiprintf_r+0x32>
 80045a8:	2140      	movs	r1, #64	; 0x40
 80045aa:	f7ff fecb 	bl	8004344 <_malloc_r>
 80045ae:	6028      	str	r0, [r5, #0]
 80045b0:	6128      	str	r0, [r5, #16]
 80045b2:	b920      	cbnz	r0, 80045be <_svfiprintf_r+0x2e>
 80045b4:	230c      	movs	r3, #12
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	e0d1      	b.n	8004762 <_svfiprintf_r+0x1d2>
 80045be:	2340      	movs	r3, #64	; 0x40
 80045c0:	616b      	str	r3, [r5, #20]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9309      	str	r3, [sp, #36]	; 0x24
 80045c6:	2320      	movs	r3, #32
 80045c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045cc:	2330      	movs	r3, #48	; 0x30
 80045ce:	f04f 0901 	mov.w	r9, #1
 80045d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800477c <_svfiprintf_r+0x1ec>
 80045da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045de:	4623      	mov	r3, r4
 80045e0:	469a      	mov	sl, r3
 80045e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045e6:	b10a      	cbz	r2, 80045ec <_svfiprintf_r+0x5c>
 80045e8:	2a25      	cmp	r2, #37	; 0x25
 80045ea:	d1f9      	bne.n	80045e0 <_svfiprintf_r+0x50>
 80045ec:	ebba 0b04 	subs.w	fp, sl, r4
 80045f0:	d00b      	beq.n	800460a <_svfiprintf_r+0x7a>
 80045f2:	465b      	mov	r3, fp
 80045f4:	4622      	mov	r2, r4
 80045f6:	4629      	mov	r1, r5
 80045f8:	4638      	mov	r0, r7
 80045fa:	f7ff ff6d 	bl	80044d8 <__ssputs_r>
 80045fe:	3001      	adds	r0, #1
 8004600:	f000 80aa 	beq.w	8004758 <_svfiprintf_r+0x1c8>
 8004604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004606:	445a      	add	r2, fp
 8004608:	9209      	str	r2, [sp, #36]	; 0x24
 800460a:	f89a 3000 	ldrb.w	r3, [sl]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80a2 	beq.w	8004758 <_svfiprintf_r+0x1c8>
 8004614:	2300      	movs	r3, #0
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800461e:	f10a 0a01 	add.w	sl, sl, #1
 8004622:	9304      	str	r3, [sp, #16]
 8004624:	9307      	str	r3, [sp, #28]
 8004626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800462a:	931a      	str	r3, [sp, #104]	; 0x68
 800462c:	4654      	mov	r4, sl
 800462e:	2205      	movs	r2, #5
 8004630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004634:	4851      	ldr	r0, [pc, #324]	; (800477c <_svfiprintf_r+0x1ec>)
 8004636:	f000 fa43 	bl	8004ac0 <memchr>
 800463a:	9a04      	ldr	r2, [sp, #16]
 800463c:	b9d8      	cbnz	r0, 8004676 <_svfiprintf_r+0xe6>
 800463e:	06d0      	lsls	r0, r2, #27
 8004640:	bf44      	itt	mi
 8004642:	2320      	movmi	r3, #32
 8004644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004648:	0711      	lsls	r1, r2, #28
 800464a:	bf44      	itt	mi
 800464c:	232b      	movmi	r3, #43	; 0x2b
 800464e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004652:	f89a 3000 	ldrb.w	r3, [sl]
 8004656:	2b2a      	cmp	r3, #42	; 0x2a
 8004658:	d015      	beq.n	8004686 <_svfiprintf_r+0xf6>
 800465a:	4654      	mov	r4, sl
 800465c:	2000      	movs	r0, #0
 800465e:	f04f 0c0a 	mov.w	ip, #10
 8004662:	9a07      	ldr	r2, [sp, #28]
 8004664:	4621      	mov	r1, r4
 8004666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800466a:	3b30      	subs	r3, #48	; 0x30
 800466c:	2b09      	cmp	r3, #9
 800466e:	d94e      	bls.n	800470e <_svfiprintf_r+0x17e>
 8004670:	b1b0      	cbz	r0, 80046a0 <_svfiprintf_r+0x110>
 8004672:	9207      	str	r2, [sp, #28]
 8004674:	e014      	b.n	80046a0 <_svfiprintf_r+0x110>
 8004676:	eba0 0308 	sub.w	r3, r0, r8
 800467a:	fa09 f303 	lsl.w	r3, r9, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	46a2      	mov	sl, r4
 8004682:	9304      	str	r3, [sp, #16]
 8004684:	e7d2      	b.n	800462c <_svfiprintf_r+0x9c>
 8004686:	9b03      	ldr	r3, [sp, #12]
 8004688:	1d19      	adds	r1, r3, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	9103      	str	r1, [sp, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	bfbb      	ittet	lt
 8004692:	425b      	neglt	r3, r3
 8004694:	f042 0202 	orrlt.w	r2, r2, #2
 8004698:	9307      	strge	r3, [sp, #28]
 800469a:	9307      	strlt	r3, [sp, #28]
 800469c:	bfb8      	it	lt
 800469e:	9204      	strlt	r2, [sp, #16]
 80046a0:	7823      	ldrb	r3, [r4, #0]
 80046a2:	2b2e      	cmp	r3, #46	; 0x2e
 80046a4:	d10c      	bne.n	80046c0 <_svfiprintf_r+0x130>
 80046a6:	7863      	ldrb	r3, [r4, #1]
 80046a8:	2b2a      	cmp	r3, #42	; 0x2a
 80046aa:	d135      	bne.n	8004718 <_svfiprintf_r+0x188>
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	3402      	adds	r4, #2
 80046b0:	1d1a      	adds	r2, r3, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	9203      	str	r2, [sp, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bfb8      	it	lt
 80046ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80046be:	9305      	str	r3, [sp, #20]
 80046c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004780 <_svfiprintf_r+0x1f0>
 80046c4:	2203      	movs	r2, #3
 80046c6:	4650      	mov	r0, sl
 80046c8:	7821      	ldrb	r1, [r4, #0]
 80046ca:	f000 f9f9 	bl	8004ac0 <memchr>
 80046ce:	b140      	cbz	r0, 80046e2 <_svfiprintf_r+0x152>
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	eba0 000a 	sub.w	r0, r0, sl
 80046d6:	fa03 f000 	lsl.w	r0, r3, r0
 80046da:	9b04      	ldr	r3, [sp, #16]
 80046dc:	3401      	adds	r4, #1
 80046de:	4303      	orrs	r3, r0
 80046e0:	9304      	str	r3, [sp, #16]
 80046e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e6:	2206      	movs	r2, #6
 80046e8:	4826      	ldr	r0, [pc, #152]	; (8004784 <_svfiprintf_r+0x1f4>)
 80046ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ee:	f000 f9e7 	bl	8004ac0 <memchr>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d038      	beq.n	8004768 <_svfiprintf_r+0x1d8>
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <_svfiprintf_r+0x1f8>)
 80046f8:	bb1b      	cbnz	r3, 8004742 <_svfiprintf_r+0x1b2>
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	3307      	adds	r3, #7
 80046fe:	f023 0307 	bic.w	r3, r3, #7
 8004702:	3308      	adds	r3, #8
 8004704:	9303      	str	r3, [sp, #12]
 8004706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004708:	4433      	add	r3, r6
 800470a:	9309      	str	r3, [sp, #36]	; 0x24
 800470c:	e767      	b.n	80045de <_svfiprintf_r+0x4e>
 800470e:	460c      	mov	r4, r1
 8004710:	2001      	movs	r0, #1
 8004712:	fb0c 3202 	mla	r2, ip, r2, r3
 8004716:	e7a5      	b.n	8004664 <_svfiprintf_r+0xd4>
 8004718:	2300      	movs	r3, #0
 800471a:	f04f 0c0a 	mov.w	ip, #10
 800471e:	4619      	mov	r1, r3
 8004720:	3401      	adds	r4, #1
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	4620      	mov	r0, r4
 8004726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800472a:	3a30      	subs	r2, #48	; 0x30
 800472c:	2a09      	cmp	r2, #9
 800472e:	d903      	bls.n	8004738 <_svfiprintf_r+0x1a8>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0c5      	beq.n	80046c0 <_svfiprintf_r+0x130>
 8004734:	9105      	str	r1, [sp, #20]
 8004736:	e7c3      	b.n	80046c0 <_svfiprintf_r+0x130>
 8004738:	4604      	mov	r4, r0
 800473a:	2301      	movs	r3, #1
 800473c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004740:	e7f0      	b.n	8004724 <_svfiprintf_r+0x194>
 8004742:	ab03      	add	r3, sp, #12
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	462a      	mov	r2, r5
 8004748:	4638      	mov	r0, r7
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <_svfiprintf_r+0x1fc>)
 800474c:	a904      	add	r1, sp, #16
 800474e:	f3af 8000 	nop.w
 8004752:	1c42      	adds	r2, r0, #1
 8004754:	4606      	mov	r6, r0
 8004756:	d1d6      	bne.n	8004706 <_svfiprintf_r+0x176>
 8004758:	89ab      	ldrh	r3, [r5, #12]
 800475a:	065b      	lsls	r3, r3, #25
 800475c:	f53f af2c 	bmi.w	80045b8 <_svfiprintf_r+0x28>
 8004760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004762:	b01d      	add	sp, #116	; 0x74
 8004764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004768:	ab03      	add	r3, sp, #12
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	462a      	mov	r2, r5
 800476e:	4638      	mov	r0, r7
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <_svfiprintf_r+0x1fc>)
 8004772:	a904      	add	r1, sp, #16
 8004774:	f000 f87c 	bl	8004870 <_printf_i>
 8004778:	e7eb      	b.n	8004752 <_svfiprintf_r+0x1c2>
 800477a:	bf00      	nop
 800477c:	080051fe 	.word	0x080051fe
 8004780:	08005204 	.word	0x08005204
 8004784:	08005208 	.word	0x08005208
 8004788:	00000000 	.word	0x00000000
 800478c:	080044d9 	.word	0x080044d9

08004790 <_printf_common>:
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	4616      	mov	r6, r2
 8004796:	4699      	mov	r9, r3
 8004798:	688a      	ldr	r2, [r1, #8]
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	4607      	mov	r7, r0
 800479e:	4293      	cmp	r3, r2
 80047a0:	bfb8      	it	lt
 80047a2:	4613      	movlt	r3, r2
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047aa:	460c      	mov	r4, r1
 80047ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b0:	b10a      	cbz	r2, 80047b6 <_printf_common+0x26>
 80047b2:	3301      	adds	r3, #1
 80047b4:	6033      	str	r3, [r6, #0]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	0699      	lsls	r1, r3, #26
 80047ba:	bf42      	ittt	mi
 80047bc:	6833      	ldrmi	r3, [r6, #0]
 80047be:	3302      	addmi	r3, #2
 80047c0:	6033      	strmi	r3, [r6, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	f015 0506 	ands.w	r5, r5, #6
 80047c8:	d106      	bne.n	80047d8 <_printf_common+0x48>
 80047ca:	f104 0a19 	add.w	sl, r4, #25
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	6832      	ldr	r2, [r6, #0]
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dc28      	bgt.n	800482a <_printf_common+0x9a>
 80047d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047dc:	1e13      	subs	r3, r2, #0
 80047de:	6822      	ldr	r2, [r4, #0]
 80047e0:	bf18      	it	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	0692      	lsls	r2, r2, #26
 80047e6:	d42d      	bmi.n	8004844 <_printf_common+0xb4>
 80047e8:	4649      	mov	r1, r9
 80047ea:	4638      	mov	r0, r7
 80047ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f0:	47c0      	blx	r8
 80047f2:	3001      	adds	r0, #1
 80047f4:	d020      	beq.n	8004838 <_printf_common+0xa8>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	68e5      	ldr	r5, [r4, #12]
 80047fa:	f003 0306 	and.w	r3, r3, #6
 80047fe:	2b04      	cmp	r3, #4
 8004800:	bf18      	it	ne
 8004802:	2500      	movne	r5, #0
 8004804:	6832      	ldr	r2, [r6, #0]
 8004806:	f04f 0600 	mov.w	r6, #0
 800480a:	68a3      	ldr	r3, [r4, #8]
 800480c:	bf08      	it	eq
 800480e:	1aad      	subeq	r5, r5, r2
 8004810:	6922      	ldr	r2, [r4, #16]
 8004812:	bf08      	it	eq
 8004814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004818:	4293      	cmp	r3, r2
 800481a:	bfc4      	itt	gt
 800481c:	1a9b      	subgt	r3, r3, r2
 800481e:	18ed      	addgt	r5, r5, r3
 8004820:	341a      	adds	r4, #26
 8004822:	42b5      	cmp	r5, r6
 8004824:	d11a      	bne.n	800485c <_printf_common+0xcc>
 8004826:	2000      	movs	r0, #0
 8004828:	e008      	b.n	800483c <_printf_common+0xac>
 800482a:	2301      	movs	r3, #1
 800482c:	4652      	mov	r2, sl
 800482e:	4649      	mov	r1, r9
 8004830:	4638      	mov	r0, r7
 8004832:	47c0      	blx	r8
 8004834:	3001      	adds	r0, #1
 8004836:	d103      	bne.n	8004840 <_printf_common+0xb0>
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	3501      	adds	r5, #1
 8004842:	e7c4      	b.n	80047ce <_printf_common+0x3e>
 8004844:	2030      	movs	r0, #48	; 0x30
 8004846:	18e1      	adds	r1, r4, r3
 8004848:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004852:	4422      	add	r2, r4
 8004854:	3302      	adds	r3, #2
 8004856:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800485a:	e7c5      	b.n	80047e8 <_printf_common+0x58>
 800485c:	2301      	movs	r3, #1
 800485e:	4622      	mov	r2, r4
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d0e6      	beq.n	8004838 <_printf_common+0xa8>
 800486a:	3601      	adds	r6, #1
 800486c:	e7d9      	b.n	8004822 <_printf_common+0x92>
	...

08004870 <_printf_i>:
 8004870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	7e0f      	ldrb	r7, [r1, #24]
 8004876:	4691      	mov	r9, r2
 8004878:	2f78      	cmp	r7, #120	; 0x78
 800487a:	4680      	mov	r8, r0
 800487c:	460c      	mov	r4, r1
 800487e:	469a      	mov	sl, r3
 8004880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004886:	d807      	bhi.n	8004898 <_printf_i+0x28>
 8004888:	2f62      	cmp	r7, #98	; 0x62
 800488a:	d80a      	bhi.n	80048a2 <_printf_i+0x32>
 800488c:	2f00      	cmp	r7, #0
 800488e:	f000 80d9 	beq.w	8004a44 <_printf_i+0x1d4>
 8004892:	2f58      	cmp	r7, #88	; 0x58
 8004894:	f000 80a4 	beq.w	80049e0 <_printf_i+0x170>
 8004898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800489c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a0:	e03a      	b.n	8004918 <_printf_i+0xa8>
 80048a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048a6:	2b15      	cmp	r3, #21
 80048a8:	d8f6      	bhi.n	8004898 <_printf_i+0x28>
 80048aa:	a101      	add	r1, pc, #4	; (adr r1, 80048b0 <_printf_i+0x40>)
 80048ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b0:	08004909 	.word	0x08004909
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	08004899 	.word	0x08004899
 80048bc:	08004899 	.word	0x08004899
 80048c0:	08004899 	.word	0x08004899
 80048c4:	08004899 	.word	0x08004899
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	08004899 	.word	0x08004899
 80048d0:	08004899 	.word	0x08004899
 80048d4:	08004899 	.word	0x08004899
 80048d8:	08004899 	.word	0x08004899
 80048dc:	08004a2b 	.word	0x08004a2b
 80048e0:	0800494d 	.word	0x0800494d
 80048e4:	08004a0d 	.word	0x08004a0d
 80048e8:	08004899 	.word	0x08004899
 80048ec:	08004899 	.word	0x08004899
 80048f0:	08004a4d 	.word	0x08004a4d
 80048f4:	08004899 	.word	0x08004899
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	08004899 	.word	0x08004899
 8004900:	08004899 	.word	0x08004899
 8004904:	08004a15 	.word	0x08004a15
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004918:	2301      	movs	r3, #1
 800491a:	e0a4      	b.n	8004a66 <_printf_i+0x1f6>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	6829      	ldr	r1, [r5, #0]
 8004920:	0606      	lsls	r6, r0, #24
 8004922:	f101 0304 	add.w	r3, r1, #4
 8004926:	d50a      	bpl.n	800493e <_printf_i+0xce>
 8004928:	680e      	ldr	r6, [r1, #0]
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	2e00      	cmp	r6, #0
 800492e:	da03      	bge.n	8004938 <_printf_i+0xc8>
 8004930:	232d      	movs	r3, #45	; 0x2d
 8004932:	4276      	negs	r6, r6
 8004934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004938:	230a      	movs	r3, #10
 800493a:	485e      	ldr	r0, [pc, #376]	; (8004ab4 <_printf_i+0x244>)
 800493c:	e019      	b.n	8004972 <_printf_i+0x102>
 800493e:	680e      	ldr	r6, [r1, #0]
 8004940:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	bf18      	it	ne
 8004948:	b236      	sxthne	r6, r6
 800494a:	e7ef      	b.n	800492c <_printf_i+0xbc>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	1d19      	adds	r1, r3, #4
 8004952:	6029      	str	r1, [r5, #0]
 8004954:	0601      	lsls	r1, r0, #24
 8004956:	d501      	bpl.n	800495c <_printf_i+0xec>
 8004958:	681e      	ldr	r6, [r3, #0]
 800495a:	e002      	b.n	8004962 <_printf_i+0xf2>
 800495c:	0646      	lsls	r6, r0, #25
 800495e:	d5fb      	bpl.n	8004958 <_printf_i+0xe8>
 8004960:	881e      	ldrh	r6, [r3, #0]
 8004962:	2f6f      	cmp	r7, #111	; 0x6f
 8004964:	bf0c      	ite	eq
 8004966:	2308      	moveq	r3, #8
 8004968:	230a      	movne	r3, #10
 800496a:	4852      	ldr	r0, [pc, #328]	; (8004ab4 <_printf_i+0x244>)
 800496c:	2100      	movs	r1, #0
 800496e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004972:	6865      	ldr	r5, [r4, #4]
 8004974:	2d00      	cmp	r5, #0
 8004976:	bfa8      	it	ge
 8004978:	6821      	ldrge	r1, [r4, #0]
 800497a:	60a5      	str	r5, [r4, #8]
 800497c:	bfa4      	itt	ge
 800497e:	f021 0104 	bicge.w	r1, r1, #4
 8004982:	6021      	strge	r1, [r4, #0]
 8004984:	b90e      	cbnz	r6, 800498a <_printf_i+0x11a>
 8004986:	2d00      	cmp	r5, #0
 8004988:	d04d      	beq.n	8004a26 <_printf_i+0x1b6>
 800498a:	4615      	mov	r5, r2
 800498c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004990:	fb03 6711 	mls	r7, r3, r1, r6
 8004994:	5dc7      	ldrb	r7, [r0, r7]
 8004996:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800499a:	4637      	mov	r7, r6
 800499c:	42bb      	cmp	r3, r7
 800499e:	460e      	mov	r6, r1
 80049a0:	d9f4      	bls.n	800498c <_printf_i+0x11c>
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d10b      	bne.n	80049be <_printf_i+0x14e>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	07de      	lsls	r6, r3, #31
 80049aa:	d508      	bpl.n	80049be <_printf_i+0x14e>
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	6861      	ldr	r1, [r4, #4]
 80049b0:	4299      	cmp	r1, r3
 80049b2:	bfde      	ittt	le
 80049b4:	2330      	movle	r3, #48	; 0x30
 80049b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049be:	1b52      	subs	r2, r2, r5
 80049c0:	6122      	str	r2, [r4, #16]
 80049c2:	464b      	mov	r3, r9
 80049c4:	4621      	mov	r1, r4
 80049c6:	4640      	mov	r0, r8
 80049c8:	f8cd a000 	str.w	sl, [sp]
 80049cc:	aa03      	add	r2, sp, #12
 80049ce:	f7ff fedf 	bl	8004790 <_printf_common>
 80049d2:	3001      	adds	r0, #1
 80049d4:	d14c      	bne.n	8004a70 <_printf_i+0x200>
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
 80049da:	b004      	add	sp, #16
 80049dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e0:	4834      	ldr	r0, [pc, #208]	; (8004ab4 <_printf_i+0x244>)
 80049e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049e6:	6829      	ldr	r1, [r5, #0]
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80049ee:	6029      	str	r1, [r5, #0]
 80049f0:	061d      	lsls	r5, r3, #24
 80049f2:	d514      	bpl.n	8004a1e <_printf_i+0x1ae>
 80049f4:	07df      	lsls	r7, r3, #31
 80049f6:	bf44      	itt	mi
 80049f8:	f043 0320 	orrmi.w	r3, r3, #32
 80049fc:	6023      	strmi	r3, [r4, #0]
 80049fe:	b91e      	cbnz	r6, 8004a08 <_printf_i+0x198>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	f023 0320 	bic.w	r3, r3, #32
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	2310      	movs	r3, #16
 8004a0a:	e7af      	b.n	800496c <_printf_i+0xfc>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	2378      	movs	r3, #120	; 0x78
 8004a16:	4828      	ldr	r0, [pc, #160]	; (8004ab8 <_printf_i+0x248>)
 8004a18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a1c:	e7e3      	b.n	80049e6 <_printf_i+0x176>
 8004a1e:	0659      	lsls	r1, r3, #25
 8004a20:	bf48      	it	mi
 8004a22:	b2b6      	uxthmi	r6, r6
 8004a24:	e7e6      	b.n	80049f4 <_printf_i+0x184>
 8004a26:	4615      	mov	r5, r2
 8004a28:	e7bb      	b.n	80049a2 <_printf_i+0x132>
 8004a2a:	682b      	ldr	r3, [r5, #0]
 8004a2c:	6826      	ldr	r6, [r4, #0]
 8004a2e:	1d18      	adds	r0, r3, #4
 8004a30:	6961      	ldr	r1, [r4, #20]
 8004a32:	6028      	str	r0, [r5, #0]
 8004a34:	0635      	lsls	r5, r6, #24
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	d501      	bpl.n	8004a3e <_printf_i+0x1ce>
 8004a3a:	6019      	str	r1, [r3, #0]
 8004a3c:	e002      	b.n	8004a44 <_printf_i+0x1d4>
 8004a3e:	0670      	lsls	r0, r6, #25
 8004a40:	d5fb      	bpl.n	8004a3a <_printf_i+0x1ca>
 8004a42:	8019      	strh	r1, [r3, #0]
 8004a44:	2300      	movs	r3, #0
 8004a46:	4615      	mov	r5, r2
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	e7ba      	b.n	80049c2 <_printf_i+0x152>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	602a      	str	r2, [r5, #0]
 8004a54:	681d      	ldr	r5, [r3, #0]
 8004a56:	6862      	ldr	r2, [r4, #4]
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 f831 	bl	8004ac0 <memchr>
 8004a5e:	b108      	cbz	r0, 8004a64 <_printf_i+0x1f4>
 8004a60:	1b40      	subs	r0, r0, r5
 8004a62:	6060      	str	r0, [r4, #4]
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6e:	e7a8      	b.n	80049c2 <_printf_i+0x152>
 8004a70:	462a      	mov	r2, r5
 8004a72:	4649      	mov	r1, r9
 8004a74:	4640      	mov	r0, r8
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	47d0      	blx	sl
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d0ab      	beq.n	80049d6 <_printf_i+0x166>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	079b      	lsls	r3, r3, #30
 8004a82:	d413      	bmi.n	8004aac <_printf_i+0x23c>
 8004a84:	68e0      	ldr	r0, [r4, #12]
 8004a86:	9b03      	ldr	r3, [sp, #12]
 8004a88:	4298      	cmp	r0, r3
 8004a8a:	bfb8      	it	lt
 8004a8c:	4618      	movlt	r0, r3
 8004a8e:	e7a4      	b.n	80049da <_printf_i+0x16a>
 8004a90:	2301      	movs	r3, #1
 8004a92:	4632      	mov	r2, r6
 8004a94:	4649      	mov	r1, r9
 8004a96:	4640      	mov	r0, r8
 8004a98:	47d0      	blx	sl
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d09b      	beq.n	80049d6 <_printf_i+0x166>
 8004a9e:	3501      	adds	r5, #1
 8004aa0:	68e3      	ldr	r3, [r4, #12]
 8004aa2:	9903      	ldr	r1, [sp, #12]
 8004aa4:	1a5b      	subs	r3, r3, r1
 8004aa6:	42ab      	cmp	r3, r5
 8004aa8:	dcf2      	bgt.n	8004a90 <_printf_i+0x220>
 8004aaa:	e7eb      	b.n	8004a84 <_printf_i+0x214>
 8004aac:	2500      	movs	r5, #0
 8004aae:	f104 0619 	add.w	r6, r4, #25
 8004ab2:	e7f5      	b.n	8004aa0 <_printf_i+0x230>
 8004ab4:	0800520f 	.word	0x0800520f
 8004ab8:	08005220 	.word	0x08005220

08004abc <__retarget_lock_acquire_recursive>:
 8004abc:	4770      	bx	lr

08004abe <__retarget_lock_release_recursive>:
 8004abe:	4770      	bx	lr

08004ac0 <memchr>:
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	b2c9      	uxtb	r1, r1
 8004ac6:	4402      	add	r2, r0
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	d101      	bne.n	8004ad2 <memchr+0x12>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e003      	b.n	8004ada <memchr+0x1a>
 8004ad2:	7804      	ldrb	r4, [r0, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	428c      	cmp	r4, r1
 8004ad8:	d1f6      	bne.n	8004ac8 <memchr+0x8>
 8004ada:	bd10      	pop	{r4, pc}

08004adc <memcpy>:
 8004adc:	440a      	add	r2, r1
 8004ade:	4291      	cmp	r1, r2
 8004ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae4:	d100      	bne.n	8004ae8 <memcpy+0xc>
 8004ae6:	4770      	bx	lr
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aee:	4291      	cmp	r1, r2
 8004af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af4:	d1f9      	bne.n	8004aea <memcpy+0xe>
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <memmove>:
 8004af8:	4288      	cmp	r0, r1
 8004afa:	b510      	push	{r4, lr}
 8004afc:	eb01 0402 	add.w	r4, r1, r2
 8004b00:	d902      	bls.n	8004b08 <memmove+0x10>
 8004b02:	4284      	cmp	r4, r0
 8004b04:	4623      	mov	r3, r4
 8004b06:	d807      	bhi.n	8004b18 <memmove+0x20>
 8004b08:	1e43      	subs	r3, r0, #1
 8004b0a:	42a1      	cmp	r1, r4
 8004b0c:	d008      	beq.n	8004b20 <memmove+0x28>
 8004b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b16:	e7f8      	b.n	8004b0a <memmove+0x12>
 8004b18:	4601      	mov	r1, r0
 8004b1a:	4402      	add	r2, r0
 8004b1c:	428a      	cmp	r2, r1
 8004b1e:	d100      	bne.n	8004b22 <memmove+0x2a>
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2a:	e7f7      	b.n	8004b1c <memmove+0x24>

08004b2c <_realloc_r>:
 8004b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b30:	4680      	mov	r8, r0
 8004b32:	4614      	mov	r4, r2
 8004b34:	460e      	mov	r6, r1
 8004b36:	b921      	cbnz	r1, 8004b42 <_realloc_r+0x16>
 8004b38:	4611      	mov	r1, r2
 8004b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	f7ff bc01 	b.w	8004344 <_malloc_r>
 8004b42:	b92a      	cbnz	r2, 8004b50 <_realloc_r+0x24>
 8004b44:	f7ff fb96 	bl	8004274 <_free_r>
 8004b48:	4625      	mov	r5, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	f000 f81b 	bl	8004b8a <_malloc_usable_size_r>
 8004b54:	4284      	cmp	r4, r0
 8004b56:	4607      	mov	r7, r0
 8004b58:	d802      	bhi.n	8004b60 <_realloc_r+0x34>
 8004b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b5e:	d812      	bhi.n	8004b86 <_realloc_r+0x5a>
 8004b60:	4621      	mov	r1, r4
 8004b62:	4640      	mov	r0, r8
 8004b64:	f7ff fbee 	bl	8004344 <_malloc_r>
 8004b68:	4605      	mov	r5, r0
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d0ed      	beq.n	8004b4a <_realloc_r+0x1e>
 8004b6e:	42bc      	cmp	r4, r7
 8004b70:	4622      	mov	r2, r4
 8004b72:	4631      	mov	r1, r6
 8004b74:	bf28      	it	cs
 8004b76:	463a      	movcs	r2, r7
 8004b78:	f7ff ffb0 	bl	8004adc <memcpy>
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4640      	mov	r0, r8
 8004b80:	f7ff fb78 	bl	8004274 <_free_r>
 8004b84:	e7e1      	b.n	8004b4a <_realloc_r+0x1e>
 8004b86:	4635      	mov	r5, r6
 8004b88:	e7df      	b.n	8004b4a <_realloc_r+0x1e>

08004b8a <_malloc_usable_size_r>:
 8004b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8e:	1f18      	subs	r0, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfbc      	itt	lt
 8004b94:	580b      	ldrlt	r3, [r1, r0]
 8004b96:	18c0      	addlt	r0, r0, r3
 8004b98:	4770      	bx	lr
	...

08004b9c <_init>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr

08004ba8 <_fini>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr
