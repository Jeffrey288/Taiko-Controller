
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001488c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001983c  08014a78  08014a78  00024a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e2b4  0802e2b4  00040338  2**0
                  CONTENTS
  4 .ARM          00000000  0802e2b4  0802e2b4  00040338  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802e2b4  0802e2b4  00040338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e2b4  0802e2b4  0003e2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e2b8  0802e2b8  0003e2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0802e2bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000338  0802e5f4  00040338  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001670  0802e5f4  00041670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024529  00000000  00000000  00040361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005766  00000000  00000000  0006488a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002010  00000000  00000000  00069ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d90  00000000  00000000  0006c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022166  00000000  00000000  0006dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002941b  00000000  00000000  0008fef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0394  00000000  00000000  000b9311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001696a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000990c  00000000  00000000  001696f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000338 	.word	0x20000338
 8000204:	00000000 	.word	0x00000000
 8000208:	08014a5c 	.word	0x08014a5c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000033c 	.word	0x2000033c
 8000224:	08014a5c 	.word	0x08014a5c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <AddDrum+0x38>)
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 800106e:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <AddDrum+0x3c>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8001078:	81bb      	strh	r3, [r7, #12]
 800107a:	2300      	movs	r3, #0
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001086:	f000 f809 	bl	800109c <AddTrack>
		.pos = 0
	});
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	08014c18 	.word	0x08014c18

0800109c <AddTrack>:

void AddTrack(AudioTrack track) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	463b      	mov	r3, r7
 80010a4:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <AddTrack+0x3c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	dc0d      	bgt.n	80010cc <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <AddTrack+0x3c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <AddTrack+0x3c>)
 80010b8:	600a      	str	r2, [r1, #0]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <AddTrack+0x40>)
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4413      	add	r3, r2
 80010c0:	463a      	mov	r2, r7
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010ca:	e000      	b.n	80010ce <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 80010cc:	bf00      	nop
}
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000078c 	.word	0x2000078c
 80010dc:	2000073c 	.word	0x2000073c

080010e0 <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <RemoveTrack+0x44>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd12      	ble.n	8001118 <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <RemoveTrack+0x44>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <RemoveTrack+0x44>)
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <RemoveTrack+0x44>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <RemoveTrack+0x48>)
 8001104:	4908      	ldr	r1, [pc, #32]	; (8001128 <RemoveTrack+0x48>)
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4403      	add	r3, r0
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	440a      	add	r2, r1
 800110e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001112:	e883 0003 	stmia.w	r3, {r0, r1}
 8001116:	e000      	b.n	800111a <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 8001118:	bf00      	nop
}
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000078c 	.word	0x2000078c
 8001128:	2000073c 	.word	0x2000073c

0800112c <PrecomputeMix>:

void PrecomputeMix() {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <PrecomputeMix+0x15c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc11      	bgt.n	800115e <PrecomputeMix+0x32>
		if (audio_dma_on) {
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <PrecomputeMix+0x160>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001142:	2100      	movs	r1, #0
 8001144:	4852      	ldr	r0, [pc, #328]	; (8001290 <PrecomputeMix+0x164>)
 8001146:	f003 fac7 	bl	80046d8 <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <PrecomputeMix+0x160>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8001150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001154:	2100      	movs	r1, #0
 8001156:	484f      	ldr	r0, [pc, #316]	; (8001294 <PrecomputeMix+0x168>)
 8001158:	f010 fc78 	bl	8011a4c <memset>
			}
		}

	}

}
 800115c:	e090      	b.n	8001280 <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <PrecomputeMix+0x160>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d126      	bne.n	80011b4 <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 8001166:	484c      	ldr	r0, [pc, #304]	; (8001298 <PrecomputeMix+0x16c>)
 8001168:	f008 f934 	bl	80093d4 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 800116c:	484b      	ldr	r0, [pc, #300]	; (800129c <PrecomputeMix+0x170>)
 800116e:	f008 f931 	bl	80093d4 <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8001172:	2304      	movs	r3, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <PrecomputeMix+0x168>)
 800117c:	2100      	movs	r1, #0
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <PrecomputeMix+0x164>)
 8001180:	f003 f9fa 	bl	8004578 <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <PrecomputeMix+0x174>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 8001192:	4842      	ldr	r0, [pc, #264]	; (800129c <PrecomputeMix+0x170>)
 8001194:	f008 f944 	bl	8009420 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8001198:	483f      	ldr	r0, [pc, #252]	; (8001298 <PrecomputeMix+0x16c>)
 800119a:	f008 f8c3 	bl	8009324 <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <PrecomputeMix+0x16c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <PrecomputeMix+0x16c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <PrecomputeMix+0x160>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e05e      	b.n	8001278 <PrecomputeMix+0x14c>
			int32_t sum = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
			int j = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 80011c2:	e033      	b.n	800122c <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 80011c4:	4a37      	ldr	r2, [pc, #220]	; (80012a4 <PrecomputeMix+0x178>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80011cc:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <PrecomputeMix+0x178>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	88da      	ldrh	r2, [r3, #6]
 80011d6:	1c53      	adds	r3, r2, #1
 80011d8:	b29c      	uxth	r4, r3
 80011da:	4832      	ldr	r0, [pc, #200]	; (80012a4 <PrecomputeMix+0x178>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4403      	add	r3, r0
 80011e2:	4620      	mov	r0, r4
 80011e4:	80d8      	strh	r0, [r3, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	440b      	add	r3, r1
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da00      	bge.n	80011f6 <PrecomputeMix+0xca>
 80011f4:	3303      	adds	r3, #3
 80011f6:	109b      	asrs	r3, r3, #2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <PrecomputeMix+0x178>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	88da      	ldrh	r2, [r3, #6]
 800120c:	4925      	ldr	r1, [pc, #148]	; (80012a4 <PrecomputeMix+0x178>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	889b      	ldrh	r3, [r3, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d905      	bls.n	8001226 <PrecomputeMix+0xfa>
					RemoveTrack(j);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff5e 	bl	80010e0 <RemoveTrack>
 8001224:	e002      	b.n	800122c <PrecomputeMix+0x100>
					j++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <PrecomputeMix+0x15c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbc6      	blt.n	80011c4 <PrecomputeMix+0x98>
			if (sum < -32768) {
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800123c:	da05      	bge.n	800124a <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <PrecomputeMix+0x168>)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2100      	movs	r1, #0
 8001244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001248:	e013      	b.n	8001272 <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001250:	db06      	blt.n	8001260 <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <PrecomputeMix+0x168>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800125a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800125e:	e008      	b.n	8001272 <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	b29b      	uxth	r3, r3
 8001264:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001268:	b299      	uxth	r1, r3
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <PrecomputeMix+0x168>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	db9c      	blt.n	80011ba <PrecomputeMix+0x8e>
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	2000078c 	.word	0x2000078c
 800128c:	20000790 	.word	0x20000790
 8001290:	20000b98 	.word	0x20000b98
 8001294:	20000354 	.word	0x20000354
 8001298:	20000d64 	.word	0x20000d64
 800129c:	20000df4 	.word	0x20000df4
 80012a0:	40000800 	.word	0x40000800
 80012a4:	2000073c 	.word	0x2000073c

080012a8 <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2110      	movs	r1, #16
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <ButtonPadInit+0x34>)
 80012b2:	f004 f870 	bl	8005396 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2120      	movs	r1, #32
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <ButtonPadInit+0x34>)
 80012bc:	f004 f86b 	bl	8005396 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <ButtonPadInit+0x34>)
 80012c6:	f004 f866 	bl	8005396 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <ButtonPadInit+0x38>)
 80012d2:	f004 f860 	bl	8005396 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40011800 	.word	0x40011800
 80012e0:	40011000 	.word	0x40011000

080012e4 <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <ButtonPadCallback+0x2c>)
 80012f4:	f004 f838 	bl	8005368 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 8001302:	f002 fba7 	bl	8003a54 <HAL_GetTick>
 8001306:	4603      	mov	r3, r0
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <ButtonPadCallback+0x30>)
 800130a:	6013      	str	r3, [r2, #0]
		return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e14c      	b.n	80015aa <ButtonPadCallback+0x2c6>
 8001310:	40011800 	.word	0x40011800
 8001314:	200007a4 	.word	0x200007a4
	}

	currentMillis = HAL_GetTick();
 8001318:	f002 fb9c 	bl	8003a54 <HAL_GetTick>
 800131c:	4603      	mov	r3, r0
 800131e:	4aa5      	ldr	r2, [pc, #660]	; (80015b4 <ButtonPadCallback+0x2d0>)
 8001320:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8001322:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8001328:	4ba2      	ldr	r3, [pc, #648]	; (80015b4 <ButtonPadCallback+0x2d0>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4ba3      	ldr	r3, [pc, #652]	; (80015bc <ButtonPadCallback+0x2d8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b14      	cmp	r3, #20
 8001334:	f240 8133 	bls.w	800159e <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8001338:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800133a:	220f      	movs	r2, #15
 800133c:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800133e:	4ba0      	ldr	r3, [pc, #640]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	4b9d      	ldr	r3, [pc, #628]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800134c:	2202      	movs	r2, #2
 800134e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001350:	499b      	ldr	r1, [pc, #620]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001352:	489c      	ldr	r0, [pc, #624]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001354:	f003 fe74 	bl	8005040 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001358:	2201      	movs	r2, #1
 800135a:	2110      	movs	r1, #16
 800135c:	4899      	ldr	r0, [pc, #612]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800135e:	f004 f81a 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2120      	movs	r1, #32
 8001366:	4897      	ldr	r0, [pc, #604]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001368:	f004 f815 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4894      	ldr	r0, [pc, #592]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001372:	f004 f810 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	4892      	ldr	r0, [pc, #584]	; (80015c8 <ButtonPadCallback+0x2e4>)
 800137e:	f004 f80a 	bl	8005396 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8001382:	2101      	movs	r1, #1
 8001384:	488f      	ldr	r0, [pc, #572]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001386:	f003 ffef 	bl	8005368 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <ButtonPadCallback+0xb8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <ButtonPadCallback+0xb8>
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001398:	2210      	movs	r2, #16
 800139a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 800139c:	2102      	movs	r1, #2
 800139e:	4889      	ldr	r0, [pc, #548]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013a0:	f003 ffe2 	bl	8005368 <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <ButtonPadCallback+0xd2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d102      	bne.n	80013b6 <ButtonPadCallback+0xd2>
 80013b0:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013b2:	220f      	movs	r2, #15
 80013b4:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 80013b6:	2104      	movs	r1, #4
 80013b8:	4882      	ldr	r0, [pc, #520]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013ba:	f003 ffd5 	bl	8005368 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <ButtonPadCallback+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d102      	bne.n	80013d0 <ButtonPadCallback+0xec>
 80013ca:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013cc:	220e      	movs	r2, #14
 80013ce:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 80013d0:	2108      	movs	r1, #8
 80013d2:	487c      	ldr	r0, [pc, #496]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013d4:	f003 ffc8 	bl	8005368 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <ButtonPadCallback+0x106>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d102      	bne.n	80013ea <ButtonPadCallback+0x106>
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013e6:	220d      	movs	r2, #13
 80013e8:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4875      	ldr	r0, [pc, #468]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013f0:	f003 ffd1 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2120      	movs	r1, #32
 80013f8:	4872      	ldr	r0, [pc, #456]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013fa:	f003 ffcc 	bl	8005396 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 80013fe:	2101      	movs	r1, #1
 8001400:	4870      	ldr	r0, [pc, #448]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001402:	f003 ffb1 	bl	8005368 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <ButtonPadCallback+0x134>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <ButtonPadCallback+0x134>
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001414:	220c      	movs	r2, #12
 8001416:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8001418:	2102      	movs	r1, #2
 800141a:	486a      	ldr	r0, [pc, #424]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800141c:	f003 ffa4 	bl	8005368 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <ButtonPadCallback+0x14e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d102      	bne.n	8001432 <ButtonPadCallback+0x14e>
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800142e:	220b      	movs	r2, #11
 8001430:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8001432:	2104      	movs	r1, #4
 8001434:	4863      	ldr	r0, [pc, #396]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001436:	f003 ff97 	bl	8005368 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <ButtonPadCallback+0x168>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d102      	bne.n	800144c <ButtonPadCallback+0x168>
 8001446:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001448:	220a      	movs	r2, #10
 800144a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 800144c:	2108      	movs	r1, #8
 800144e:	485d      	ldr	r0, [pc, #372]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001450:	f003 ff8a 	bl	8005368 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <ButtonPadCallback+0x182>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d102      	bne.n	8001466 <ButtonPadCallback+0x182>
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001462:	2209      	movs	r2, #9
 8001464:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	4856      	ldr	r0, [pc, #344]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800146c:	f003 ff93 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4853      	ldr	r0, [pc, #332]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001476:	f003 ff8e 	bl	8005396 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 800147a:	2101      	movs	r1, #1
 800147c:	4851      	ldr	r0, [pc, #324]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800147e:	f003 ff73 	bl	8005368 <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <ButtonPadCallback+0x1b0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <ButtonPadCallback+0x1b0>
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001490:	2208      	movs	r2, #8
 8001492:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8001494:	2102      	movs	r1, #2
 8001496:	484b      	ldr	r0, [pc, #300]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001498:	f003 ff66 	bl	8005368 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <ButtonPadCallback+0x1ca>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d102      	bne.n	80014ae <ButtonPadCallback+0x1ca>
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 80014ae:	2104      	movs	r1, #4
 80014b0:	4844      	ldr	r0, [pc, #272]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014b2:	f003 ff59 	bl	8005368 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <ButtonPadCallback+0x1e4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d102      	bne.n	80014c8 <ButtonPadCallback+0x1e4>
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014c4:	2206      	movs	r2, #6
 80014c6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 80014c8:	2108      	movs	r1, #8
 80014ca:	483e      	ldr	r0, [pc, #248]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014cc:	f003 ff4c 	bl	8005368 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <ButtonPadCallback+0x1fe>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d102      	bne.n	80014e2 <ButtonPadCallback+0x1fe>
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014de:	2205      	movs	r2, #5
 80014e0:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2140      	movs	r1, #64	; 0x40
 80014e6:	4837      	ldr	r0, [pc, #220]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014e8:	f003 ff55 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <ButtonPadCallback+0x2e4>)
 80014f4:	f003 ff4f 	bl	8005396 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 80014f8:	2101      	movs	r1, #1
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014fc:	f003 ff34 	bl	8005368 <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <ButtonPadCallback+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <ButtonPadCallback+0x22e>
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800150e:	2204      	movs	r2, #4
 8001510:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 8001512:	2102      	movs	r1, #2
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001516:	f003 ff27 	bl	8005368 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <ButtonPadCallback+0x248>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d102      	bne.n	800152c <ButtonPadCallback+0x248>
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001528:	2203      	movs	r2, #3
 800152a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 800152c:	2104      	movs	r1, #4
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001530:	f003 ff1a 	bl	8005368 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <ButtonPadCallback+0x262>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d102      	bne.n	8001546 <ButtonPadCallback+0x262>
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001542:	2202      	movs	r2, #2
 8001544:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 8001546:	2108      	movs	r1, #8
 8001548:	481e      	ldr	r0, [pc, #120]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800154a:	f003 ff0d 	bl	8005368 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <ButtonPadCallback+0x27c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b08      	cmp	r3, #8
 8001558:	d102      	bne.n	8001560 <ButtonPadCallback+0x27c>
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800155c:	2201      	movs	r2, #1
 800155e:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	2110      	movs	r1, #16
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001566:	f003 ff16 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2120      	movs	r1, #32
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001570:	f003 ff11 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800157a:	f003 ff0c 	bl	8005396 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <ButtonPadCallback+0x2e4>)
 8001586:	f003 ff06 	bl	8005396 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <ButtonPadCallback+0x2e8>)
 800158e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001592:	2202      	movs	r2, #2
 8001594:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800159a:	f003 fd51 	bl	8005040 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <ButtonPadCallback+0x2d0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <ButtonPadCallback+0x2d8>)
 80015a4:	6013      	str	r3, [r2, #0]
	return keyPressed;
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80015a8:	881b      	ldrh	r3, [r3, #0]

}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200007a8 	.word	0x200007a8
 80015b8:	200007ac 	.word	0x200007ac
 80015bc:	200007a4 	.word	0x200007a4
 80015c0:	20000794 	.word	0x20000794
 80015c4:	40011800 	.word	0x40011800
 80015c8:	40011000 	.word	0x40011000
 80015cc:	10310000 	.word	0x10310000

080015d0 <DrumInit>:
uint32_t drum_sensor_values[NUM_DRUMS];
DrumStruct drums[NUM_DRUMS];
DrumOutputDevice drum_output_device;
uint32_t drum_max_val[NUM_DRUMS] = {0};

void DrumInit() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80015d6:	af00      	add	r7, sp, #0

	// init ADC
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 80015d8:	2204      	movs	r2, #4
 80015da:	49c2      	ldr	r1, [pc, #776]	; (80018e4 <DrumInit+0x314>)
 80015dc:	48c2      	ldr	r0, [pc, #776]	; (80018e8 <DrumInit+0x318>)
 80015de:	f002 fb51 	bl	8003c84 <HAL_ADC_Start_DMA>

	// init drums struct
	drum_output_device = DRUM_OUTPUT_NONE;
 80015e2:	4bc2      	ldr	r3, [pc, #776]	; (80018ec <DrumInit+0x31c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
//	drum_output_callback = &DrumOutputDefault;
	for (int i = 0; i < NUM_DRUMS; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80015ee:	e070      	b.n	80016d2 <DrumInit+0x102>
		drums[i].type = i;
 80015f0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	49be      	ldr	r1, [pc, #760]	; (80018f0 <DrumInit+0x320>)
 80015f8:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	4602      	mov	r2, r0
 8001608:	701a      	strb	r2, [r3, #0]
		if (drums[i].type == DRUM_LEFT_KA || drums[i].type == DRUM_RIGHT_KA)
 800160a:	49b9      	ldr	r1, [pc, #740]	; (80018f0 <DrumInit+0x320>)
 800160c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	440b      	add	r3, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00a      	beq.n	8001636 <DrumInit+0x66>
 8001620:	49b3      	ldr	r1, [pc, #716]	; (80018f0 <DrumInit+0x320>)
 8001622:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	440b      	add	r3, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d10b      	bne.n	800164e <DrumInit+0x7e>
			drums[i].sound = DRUM_KA;
 8001636:	49ae      	ldr	r1, [pc, #696]	; (80018f0 <DrumInit+0x320>)
 8001638:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	440b      	add	r3, r1
 8001646:	3301      	adds	r3, #1
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e00a      	b.n	8001664 <DrumInit+0x94>
		else
			drums[i].sound = DRUM_DON;
 800164e:	49a8      	ldr	r1, [pc, #672]	; (80018f0 <DrumInit+0x320>)
 8001650:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	3301      	adds	r3, #1
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 8001664:	49a2      	ldr	r1, [pc, #648]	; (80018f0 <DrumInit+0x320>)
 8001666:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	440b      	add	r3, r1
 8001674:	3308      	adds	r3, #8
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 800167a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4a98      	ldr	r2, [pc, #608]	; (80018e4 <DrumInit+0x314>)
 8001682:	1899      	adds	r1, r3, r2
 8001684:	489a      	ldr	r0, [pc, #616]	; (80018f0 <DrumInit+0x320>)
 8001686:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4403      	add	r3, r0
 8001694:	3310      	adds	r3, #16
 8001696:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 8001698:	4995      	ldr	r1, [pc, #596]	; (80018f0 <DrumInit+0x320>)
 800169a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80016ae:	f002 f9d1 	bl	8003a54 <HAL_GetTick>
 80016b2:	4601      	mov	r1, r0
 80016b4:	488e      	ldr	r0, [pc, #568]	; (80018f0 <DrumInit+0x320>)
 80016b6:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4403      	add	r3, r0
 80016c4:	330c      	adds	r3, #12
 80016c6:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80016c8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80016cc:	3301      	adds	r3, #1
 80016ce:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80016d2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	dd8a      	ble.n	80015f0 <DrumInit+0x20>

	// deal with sd card stuff
	// Format: {drum[0], drum[1], drum[2], drum[3], checksum}
	FIL file;
	uint16_t temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80016da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016de:	2203      	movs	r2, #3
 80016e0:	4984      	ldr	r1, [pc, #528]	; (80018f4 <DrumInit+0x324>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00e fe02 	bl	80102ec <f_open>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	if (fresult == FR_OK) {
 80016ee:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 8090 	bne.w	8001818 <DrumInit+0x248>
		uint32_t buff[5];
		fresult = f_read(&file, buff, 5 * 4, &temp);
 80016f8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80016fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001700:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001704:	2214      	movs	r2, #20
 8001706:	f00f f86a 	bl	80107de <f_read>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		if (buff[0] + buff[1] + buff[2] + buff[3] == buff[4]) {
 8001710:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001714:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800171e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	441a      	add	r2, r3
 8001726:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800172a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	441a      	add	r2, r3
 8001732:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001736:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	441a      	add	r2, r3
 800173e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001742:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d11f      	bne.n	800178c <DrumInit+0x1bc>
			for (int i = 0; i < 4; i++) drums[i].sensor_thresh = buff[i];
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001752:	e016      	b.n	8001782 <DrumInit+0x1b2>
 8001754:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001758:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800175c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001764:	4862      	ldr	r0, [pc, #392]	; (80018f0 <DrumInit+0x320>)
 8001766:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4403      	add	r3, r0
 8001774:	3328      	adds	r3, #40	; 0x28
 8001776:	6019      	str	r1, [r3, #0]
 8001778:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800177c:	3301      	adds	r3, #1
 800177e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001782:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001786:	2b03      	cmp	r3, #3
 8001788:	dde4      	ble.n	8001754 <DrumInit+0x184>
 800178a:	e03d      	b.n	8001808 <DrumInit+0x238>
		} else {
			DrumCalibrate();
 800178c:	f000 f96c 	bl	8001a68 <DrumCalibrate>
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <DrumInit+0x320>)
 8001792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001794:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001798:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <DrumInit+0x320>)
 80017a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <DrumInit+0x320>)
 80017ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <DrumInit+0x320>)
 80017be:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80017c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017c6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017ca:	60da      	str	r2, [r3, #12]
					drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80017cc:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <DrumInit+0x320>)
 80017ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <DrumInit+0x320>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	441a      	add	r2, r3
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <DrumInit+0x320>)
 80017d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017dc:	441a      	add	r2, r3
 80017de:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <DrumInit+0x320>)
 80017e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80017e4:	441a      	add	r2, r3
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80017e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017ea:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017ee:	611a      	str	r2, [r3, #16]
			fresult = f_write(&file, buff, 5 * 4, &temp);
 80017f0:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80017f4:	f107 0114 	add.w	r1, r7, #20
 80017f8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80017fc:	2214      	movs	r2, #20
 80017fe:	f00f f959 	bl	8010ab4 <f_write>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		}
		LCD_Print(0, 19, "Success: Have file, reading... %d", fresult);
 8001808:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800180c:	4a3a      	ldr	r2, [pc, #232]	; (80018f8 <DrumInit+0x328>)
 800180e:	2113      	movs	r1, #19
 8001810:	2000      	movs	r0, #0
 8001812:	f000 ffeb 	bl	80027ec <LCD_Print>
 8001816:	e05a      	b.n	80018ce <DrumInit+0x2fe>
	} else if (fresult == FR_NO_FILE) {
 8001818:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800181c:	2b04      	cmp	r3, #4
 800181e:	d14e      	bne.n	80018be <DrumInit+0x2ee>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001824:	2206      	movs	r2, #6
 8001826:	4933      	ldr	r1, [pc, #204]	; (80018f4 <DrumInit+0x324>)
 8001828:	4618      	mov	r0, r3
 800182a:	f00e fd5f 	bl	80102ec <f_open>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		DrumCalibrate();
 8001834:	f000 f918 	bl	8001a68 <DrumCalibrate>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <DrumInit+0x320>)
 800183a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001840:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <DrumInit+0x320>)
 8001848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800184e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <DrumInit+0x320>)
 8001856:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800185a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800185e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <DrumInit+0x320>)
 8001866:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800186a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800186e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001872:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <DrumInit+0x320>)
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <DrumInit+0x320>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	441a      	add	r2, r3
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <DrumInit+0x320>)
 8001880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001884:	441a      	add	r2, r3
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <DrumInit+0x320>)
 8001888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800188c:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800188e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001892:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001896:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001898:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800189c:	4639      	mov	r1, r7
 800189e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80018a2:	2214      	movs	r2, #20
 80018a4:	f00f f906 	bl	8010ab4 <f_write>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		LCD_Print(0, 19, "Error: No file, calibrating... %d", fresult);
 80018ae:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <DrumInit+0x32c>)
 80018b4:	2113      	movs	r1, #19
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 ff98 	bl	80027ec <LCD_Print>
 80018bc:	e007      	b.n	80018ce <DrumInit+0x2fe>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 80018be:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <DrumInit+0x330>)
 80018c4:	2113      	movs	r1, #19
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 ff90 	bl	80027ec <LCD_Print>
 80018cc:	e7fe      	b.n	80018cc <DrumInit+0x2fc>
	}
	f_close(&file);
 80018ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00f fb55 	bl	8010f82 <f_close>

}
 80018d8:	bf00      	nop
 80018da:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200009e0 	.word	0x200009e0
 80018e8:	20000b24 	.word	0x20000b24
 80018ec:	20000ab0 	.word	0x20000ab0
 80018f0:	200009f0 	.word	0x200009f0
 80018f4:	08014a78 	.word	0x08014a78
 80018f8:	08014a84 	.word	0x08014a84
 80018fc:	08014aa8 	.word	0x08014aa8
 8001900:	08014acc 	.word	0x08014acc

08001904 <DrumThreshWrite>:

void DrumThreshWrite() {
 8001904:	b580      	push	{r7, lr}
 8001906:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800190a:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 800190c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001910:	2203      	movs	r2, #3
 8001912:	4952      	ldr	r1, [pc, #328]	; (8001a5c <DrumThreshWrite+0x158>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00e fce9 	bl	80102ec <f_open>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 8001920:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001924:	2b00      	cmp	r3, #0
 8001926:	d13c      	bne.n	80019a2 <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <DrumThreshWrite+0x15c>)
 800192a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001930:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800193a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800193e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800194a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800194e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001956:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800195a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800195e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001962:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001964:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <DrumThreshWrite+0x15c>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	441a      	add	r2, r3
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001974:	441a      	add	r2, r3
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800197c:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800197e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001982:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001986:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	f107 0118 	add.w	r1, r7, #24
 8001990:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001994:	2214      	movs	r2, #20
 8001996:	f00f f88d 	bl	8010ab4 <f_write>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80019a0:	e051      	b.n	8001a46 <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 80019a2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d145      	bne.n	8001a36 <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 80019aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ae:	2206      	movs	r2, #6
 80019b0:	492a      	ldr	r1, [pc, #168]	; (8001a5c <DrumThreshWrite+0x158>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00e fc9a 	bl	80102ec <f_open>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019ec:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80019f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019f8:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <DrumThreshWrite+0x15c>)
 80019fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	441a      	add	r2, r3
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	441a      	add	r2, r3
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <DrumThreshWrite+0x15c>)
 8001a0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001a12:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001a14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001a18:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001a1c:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	1d39      	adds	r1, r7, #4
 8001a24:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001a28:	2214      	movs	r2, #20
 8001a2a:	f00f f843 	bl	8010ab4 <f_write>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001a34:	e007      	b.n	8001a46 <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 8001a36:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <DrumThreshWrite+0x160>)
 8001a3c:	2113      	movs	r1, #19
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 fed4 	bl	80027ec <LCD_Print>
 8001a44:	e7fe      	b.n	8001a44 <DrumThreshWrite+0x140>
	}
	f_close(&file);
 8001a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00f fa99 	bl	8010f82 <f_close>
}
 8001a50:	bf00      	nop
 8001a52:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	08014a78 	.word	0x08014a78
 8001a60:	200009f0 	.word	0x200009f0
 8001a64:	08014acc 	.word	0x08014acc

08001a68 <DrumCalibrate>:

// Let's not touch this :D
void DrumCalibrate() {
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	b092      	sub	sp, #72	; 0x48
 8001a6e:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001a70:	f001 fff0 	bl	8003a54 <HAL_GetTick>
 8001a74:	6478      	str	r0, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 8001a76:	2010      	movs	r0, #16
 8001a78:	f00f ffd8 	bl	8011a2c <malloc>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
 8001a84:	e00c      	b.n	8001aa0 <DrumCalibrate+0x38>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 8001a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	18d4      	adds	r4, r2, r3
 8001a8e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a92:	f00f ffcb 	bl	8011a2c <malloc>
 8001a96:	4603      	mov	r3, r0
 8001a98:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8001aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	ddef      	ble.n	8001a86 <DrumCalibrate+0x1e>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aaa:	e023      	b.n	8001af4 <DrumCalibrate+0x8c>
		while (last_tick == HAL_GetTick()) {
 8001aac:	bf00      	nop
 8001aae:	f001 ffd1 	bl	8003a54 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d0f9      	beq.n	8001aae <DrumCalibrate+0x46>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001aba:	f001 ffcb 	bl	8003a54 <HAL_GetTick>
 8001abe:	6478      	str	r0, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac4:	e010      	b.n	8001ae8 <DrumCalibrate+0x80>
			values[j][i] = drum_sensor_values[j];
 8001ac6:	4a9c      	ldr	r2, [pc, #624]	; (8001d38 <DrumCalibrate+0x2d0>)
 8001ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	b28a      	uxth	r2, r1
 8001ae0:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	ddeb      	ble.n	8001ac6 <DrumCalibrate+0x5e>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af0:	3301      	adds	r3, #1
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001afa:	dbd7      	blt.n	8001aac <DrumCalibrate+0x44>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
 8001b00:	e0f2      	b.n	8001ce8 <DrumCalibrate+0x280>
		uint32_t sum = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	e026      	b.n	8001b5e <DrumCalibrate+0xf6>
			sum += values[i][j];
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4413      	add	r3, r2
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	4413      	add	r3, r2
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4413      	add	r3, r2
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d209      	bcs.n	8001b58 <DrumCalibrate+0xf0>
				max_val = values[i][j];
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b64:	dbd4      	blt.n	8001b10 <DrumCalibrate+0xa8>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 8001b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b68:	f7fe fca8 	bl	80004bc <__aeabi_ui2d>
 8001b6c:	a36e      	add	r3, pc, #440	; (adr r3, 8001d28 <DrumCalibrate+0x2c0>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fe47 	bl	8000804 <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e036      	b.n	8001bfe <DrumCalibrate+0x196>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4413      	add	r3, r2
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc9a 	bl	80004dc <__aeabi_i2d>
 8001ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bac:	f7fe fb48 	bl	8000240 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc86 	bl	80004dc <__aeabi_i2d>
 8001bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd4:	f7fe fb34 	bl	8000240 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fce6 	bl	80005b0 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bec:	f7fe fb2a 	bl	8000244 <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c04:	dbc4      	blt.n	8001b90 <DrumCalibrate+0x128>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 8001c06:	a34a      	add	r3, pc, #296	; (adr r3, 8001d30 <DrumCalibrate+0x2c8>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c10:	f7fe fdf8 	bl	8000804 <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f012 fe4a 	bl	80148b4 <sqrt>
 8001c20:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 8001c24:	4945      	ldr	r1, [pc, #276]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	440b      	add	r3, r1
 8001c32:	f103 0118 	add.w	r1, r3, #24
 8001c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c3a:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 8001c3e:	493f      	ldr	r1, [pc, #252]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3314      	adds	r3, #20
 8001c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c50:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 8001c52:	493a      	ldr	r1, [pc, #232]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	f103 0120 	add.w	r1, r3, #32
 8001c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c68:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <DrumCalibrate+0x2d8>)
 8001c72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c76:	f7fe fc9b 	bl	80005b0 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c86:	f7fe fadd 	bl	8000244 <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4699      	mov	r9, r3
 8001c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c94:	f7fe fc12 	bl	80004bc <__aeabi_ui2d>
 8001c98:	4604      	mov	r4, r0
 8001c9a:	460d      	mov	r5, r1
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <DrumCalibrate+0x2dc>)
 8001ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca6:	f7fe fc83 	bl	80005b0 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	f7fe fac7 	bl	8000244 <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4640      	mov	r0, r8
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	f012 fdb7 	bl	8014830 <fmin>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ff49 	bl	8000b60 <__aeabi_d2uiz>
 8001cce:	4601      	mov	r1, r0
 8001cd0:	481a      	ldr	r0, [pc, #104]	; (8001d3c <DrumCalibrate+0x2d4>)
 8001cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4403      	add	r3, r0
 8001cde:	3328      	adds	r3, #40	; 0x28
 8001ce0:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	f77f af09 	ble.w	8001b02 <DrumCalibrate+0x9a>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e00a      	b.n	8001d0c <DrumCalibrate+0x2a4>
		free(values[i]);
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00f fe9b 	bl	8011a3c <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	ddf1      	ble.n	8001cf6 <DrumCalibrate+0x28e>
	}
	free(values);
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f00f fe92 	bl	8011a3c <free>

}
 8001d18:	bf00      	nop
 8001d1a:	3748      	adds	r7, #72	; 0x48
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	4072c000 	.word	0x4072c000
 8001d30:	00000000 	.word	0x00000000
 8001d34:	4072b000 	.word	0x4072b000
 8001d38:	200009e0 	.word	0x200009e0
 8001d3c:	200009f0 	.word	0x200009f0
 8001d40:	401c0000 	.word	0x401c0000
 8001d44:	40140000 	.word	0x40140000

08001d48 <DrumUpdate>:

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d52:	b672      	cpsid	i
}
 8001d54:	bf00      	nop

	__disable_irq();

	int i = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <DrumUpdate+0xbc>)
 8001d5c:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 8001d5e:	e048      	b.n	8001df2 <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d807      	bhi.n	8001d7e <DrumUpdate+0x36>
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	fa42 f303 	asr.w	r3, r2, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d011      	beq.n	8001da2 <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	7a1b      	ldrb	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f966 	bl	800105c <AddDrum>
			}
			drum->state = DRUM_HIT;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2201      	movs	r2, #1
 8001d94:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 8001d96:	f001 fe5d 	bl	8003a54 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e011      	b.n	8001dc6 <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	7a1b      	ldrb	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2202      	movs	r2, #2
 8001dae:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 8001db0:	f001 fe50 	bl	8003a54 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 8001dbc:	2b14      	cmp	r3, #20
 8001dbe:	d902      	bls.n	8001dc6 <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <DrumUpdate+0xc0>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d906      	bls.n	8001de6 <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	490a      	ldr	r1, [pc, #40]	; (8001e08 <DrumUpdate+0xc0>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3330      	adds	r3, #48	; 0x30
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	ddb3      	ble.n	8001d60 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001df8:	b662      	cpsie	i
}
 8001dfa:	bf00      	nop
		}
	}

	__enable_irq();
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200009f0 	.word	0x200009f0
 8001e08:	20000ab4 	.word	0x20000ab4

08001e0c <LCD_DrumCalibration>:

uint16_t drum_calibrate_number = 0;
uint32_t drum_max_val_reset_ticks = 0;
void LCD_DrumCalibration(int* r) {
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0e:	b08d      	sub	sp, #52	; 0x34
 8001e10:	af06      	add	r7, sp, #24
 8001e12:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - drum_max_val_reset_ticks > 1500) {
 8001e14:	f001 fe1e 	bl	8003a54 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <LCD_DrumCalibration+0x150>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d912      	bls.n	8001e4e <LCD_DrumCalibration+0x42>
		for (int i = 0; i < NUM_DRUMS; i++) drum_max_val[i] = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e007      	b.n	8001e3e <LCD_DrumCalibration+0x32>
 8001e2e:	4a4c      	ldr	r2, [pc, #304]	; (8001f60 <LCD_DrumCalibration+0x154>)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2100      	movs	r1, #0
 8001e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	ddf4      	ble.n	8001e2e <LCD_DrumCalibration+0x22>
		drum_max_val_reset_ticks = HAL_GetTick();
 8001e44:	f001 fe06 	bl	8003a54 <HAL_GetTick>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a44      	ldr	r2, [pc, #272]	; (8001f5c <LCD_DrumCalibration+0x150>)
 8001e4c:	6013      	str	r3, [r2, #0]
	}

	LCD_Print(0, (*r)++, "cal: %2d | adc | hits | max", drum_calibrate_number);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1c59      	adds	r1, r3, #1
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6011      	str	r1, [r2, #0]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <LCD_DrumCalibration+0x158>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	4a42      	ldr	r2, [pc, #264]	; (8001f68 <LCD_DrumCalibration+0x15c>)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 fcc3 	bl	80027ec <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	e022      	b.n	8001eb2 <LCD_DrumCalibration+0xa6>
		LCD_Print(0, (*r)++, "Drum %d: %4ld | %4d | %4d", i,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	1c59      	adds	r1, r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6011      	str	r1, [r2, #0]
 8001e76:	b298      	uxth	r0, r3
 8001e78:	4a3c      	ldr	r2, [pc, #240]	; (8001f6c <LCD_DrumCalibration+0x160>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e80:	4c3b      	ldr	r4, [pc, #236]	; (8001f70 <LCD_DrumCalibration+0x164>)
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4423      	add	r3, r4
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4c33      	ldr	r4, [pc, #204]	; (8001f60 <LCD_DrumCalibration+0x154>)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	9100      	str	r1, [sp, #0]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <LCD_DrumCalibration+0x168>)
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 fca0 	bl	80027ec <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	ddd9      	ble.n	8001e6c <LCD_DrumCalibration+0x60>
				drum_sensor_values[i], drums[i].hit_count, drum_max_val[i]);
	}

	LCD_Print(0, (*r)++, "trsh | st. | avg | sd ");
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1c59      	adds	r1, r3, #1
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6011      	str	r1, [r2, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <LCD_DrumCalibration+0x16c>)
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f000 fc8f 	bl	80027ec <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	e03b      	b.n	8001f4c <LCD_DrumCalibration+0x140>
		LCD_Print(0, (*r)++, "%4d | %3d | %4.0f | %2.2f",
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6011      	str	r1, [r2, #0]
 8001ede:	b29c      	uxth	r4, r3
 8001ee0:	4923      	ldr	r1, [pc, #140]	; (8001f70 <LCD_DrumCalibration+0x164>)
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	440b      	add	r3, r1
 8001eee:	3328      	adds	r3, #40	; 0x28
 8001ef0:	681d      	ldr	r5, [r3, #0]
				drums[i].sensor_thresh, drums[i].state, drums[i].sensor_avg, drums[i].sensor_sd);
 8001ef2:	491f      	ldr	r1, [pc, #124]	; (8001f70 <LCD_DrumCalibration+0x164>)
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	3308      	adds	r3, #8
 8001f02:	781b      	ldrb	r3, [r3, #0]
		LCD_Print(0, (*r)++, "%4d | %3d | %4.0f | %2.2f",
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	491a      	ldr	r1, [pc, #104]	; (8001f70 <LCD_DrumCalibration+0x164>)
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	440b      	add	r3, r1
 8001f14:	3318      	adds	r3, #24
 8001f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1a:	4e15      	ldr	r6, [pc, #84]	; (8001f70 <LCD_DrumCalibration+0x164>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4433      	add	r3, r6
 8001f28:	3320      	adds	r3, #32
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <LCD_DrumCalibration+0x170>)
 8001f3e:	4621      	mov	r1, r4
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 fc53 	bl	80027ec <LCD_Print>
	for (int i = 0; i < 4; i++) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	ddc0      	ble.n	8001ed4 <LCD_DrumCalibration+0xc8>
	}

//	LCD_Print(0, (*r)++, "%3d", drums[0].state);

}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	20000ac8 	.word	0x20000ac8
 8001f60:	20000ab4 	.word	0x20000ab4
 8001f64:	20000ac4 	.word	0x20000ac4
 8001f68:	08014ae0 	.word	0x08014ae0
 8001f6c:	200009e0 	.word	0x200009e0
 8001f70:	200009f0 	.word	0x200009f0
 8001f74:	08014afc 	.word	0x08014afc
 8001f78:	08014b18 	.word	0x08014b18
 8001f7c:	08014b30 	.word	0x08014b30

08001f80 <ButtonPad_DrumCalibration>:

void ButtonPad_DrumCalibration(int keyPressed) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d866      	bhi.n	800205e <ButtonPad_DrumCalibration+0xde>
 8001f90:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <ButtonPad_DrumCalibration+0x18>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fb9 	.word	0x08001fb9
 8001f9c:	08001fc1 	.word	0x08001fc1
 8001fa0:	08001fc9 	.word	0x08001fc9
 8001fa4:	08001fd1 	.word	0x08001fd1
 8001fa8:	08001fd9 	.word	0x08001fd9
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	0800203d 	.word	0x0800203d
 8001fb4:	08002059 	.word	0x08002059
		case 1: AddDrum(DRUM_DON); break;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff f84f 	bl	800105c <AddDrum>
 8001fbe:	e04e      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f7ff f84b 	bl	800105c <AddDrum>
 8001fc6:	e04a      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff febd 	bl	8001d48 <DrumUpdate>
 8001fce:	e046      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff feb9 	bl	8001d48 <DrumUpdate>
 8001fd6:	e042      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <ButtonPad_DrumCalibration+0xe8>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <ButtonPad_DrumCalibration+0xec>)
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	440b      	add	r3, r1
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	3328      	adds	r3, #40	; 0x28
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <ButtonPad_DrumCalibration+0xe8>)
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f103 020a 	add.w	r2, r3, #10
 8001ff8:	491c      	ldr	r1, [pc, #112]	; (800206c <ButtonPad_DrumCalibration+0xec>)
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4403      	add	r3, r0
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	3328      	adds	r3, #40	; 0x28
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e029      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <ButtonPad_DrumCalibration+0xe8>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <ButtonPad_DrumCalibration+0xec>)
 8002012:	460b      	mov	r3, r1
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	440b      	add	r3, r1
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	3328      	adds	r3, #40	; 0x28
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <ButtonPad_DrumCalibration+0xe8>)
 8002022:	8812      	ldrh	r2, [r2, #0]
 8002024:	4610      	mov	r0, r2
 8002026:	f1a3 020a 	sub.w	r2, r3, #10
 800202a:	4910      	ldr	r1, [pc, #64]	; (800206c <ButtonPad_DrumCalibration+0xec>)
 800202c:	4603      	mov	r3, r0
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4403      	add	r3, r0
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	3328      	adds	r3, #40	; 0x28
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e010      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <ButtonPad_DrumCalibration+0xe8>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	425a      	negs	r2, r3
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	f002 0203 	and.w	r2, r2, #3
 800204c:	bf58      	it	pl
 800204e:	4253      	negpl	r3, r2
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <ButtonPad_DrumCalibration+0xe8>)
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	e002      	b.n	800205e <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 8002058:	f7ff fc54 	bl	8001904 <DrumThreshWrite>
 800205c:	bf00      	nop
	}
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000ac4 	.word	0x20000ac4
 800206c:	200009f0 	.word	0x200009f0

08002070 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <ILI9341_Send_Command+0x34>)
 8002082:	f003 f988 	bl	8005396 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <ILI9341_Send_Command+0x34>)
 800208e:	f003 f982 	bl	8005396 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f95d 	bl	8002354 <ILI9341_SPI_Send>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010c00 	.word	0x40010c00

080020a8 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b8:	4808      	ldr	r0, [pc, #32]	; (80020dc <ILI9341_Send_Data+0x34>)
 80020ba:	f003 f96c 	bl	8005396 <HAL_GPIO_WritePin>
	DC_DATA;
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <ILI9341_Send_Data+0x34>)
 80020c6:	f003 f966 	bl	8005396 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f941 	bl	8002354 <ILI9341_SPI_Send>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40010c00 	.word	0x40010c00

080020e0 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 80020e4:	f000 f900 	bl	80022e8 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 80020e8:	f000 f958 	bl	800239c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff ffbf 	bl	8002070 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80020f2:	20cb      	movs	r0, #203	; 0xcb
 80020f4:	f7ff ffbc 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80020f8:	2039      	movs	r0, #57	; 0x39
 80020fa:	f7ff ffd5 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80020fe:	202c      	movs	r0, #44	; 0x2c
 8002100:	f7ff ffd2 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff ffcf 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800210a:	2034      	movs	r0, #52	; 0x34
 800210c:	f7ff ffcc 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8002110:	2002      	movs	r0, #2
 8002112:	f7ff ffc9 	bl	80020a8 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8002116:	20cf      	movs	r0, #207	; 0xcf
 8002118:	f7ff ffaa 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff ffc3 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8002122:	20c1      	movs	r0, #193	; 0xc1
 8002124:	f7ff ffc0 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8002128:	2030      	movs	r0, #48	; 0x30
 800212a:	f7ff ffbd 	bl	80020a8 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800212e:	20e8      	movs	r0, #232	; 0xe8
 8002130:	f7ff ff9e 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8002134:	2085      	movs	r0, #133	; 0x85
 8002136:	f7ff ffb7 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff ffb4 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8002140:	2078      	movs	r0, #120	; 0x78
 8002142:	f7ff ffb1 	bl	80020a8 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8002146:	20ea      	movs	r0, #234	; 0xea
 8002148:	f7ff ff92 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff ffab 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff ffa8 	bl	80020a8 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8002158:	20ed      	movs	r0, #237	; 0xed
 800215a:	f7ff ff89 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800215e:	2064      	movs	r0, #100	; 0x64
 8002160:	f7ff ffa2 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8002164:	2003      	movs	r0, #3
 8002166:	f7ff ff9f 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800216a:	2012      	movs	r0, #18
 800216c:	f7ff ff9c 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8002170:	2081      	movs	r0, #129	; 0x81
 8002172:	f7ff ff99 	bl	80020a8 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8002176:	20f7      	movs	r0, #247	; 0xf7
 8002178:	f7ff ff7a 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 800217c:	2020      	movs	r0, #32
 800217e:	f7ff ff93 	bl	80020a8 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8002182:	20c0      	movs	r0, #192	; 0xc0
 8002184:	f7ff ff74 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8002188:	2010      	movs	r0, #16
 800218a:	f7ff ff8d 	bl	80020a8 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 800218e:	20c1      	movs	r0, #193	; 0xc1
 8002190:	f7ff ff6e 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8002194:	2010      	movs	r0, #16
 8002196:	f7ff ff87 	bl	80020a8 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800219a:	20c5      	movs	r0, #197	; 0xc5
 800219c:	f7ff ff68 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80021a0:	203e      	movs	r0, #62	; 0x3e
 80021a2:	f7ff ff81 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80021a6:	2028      	movs	r0, #40	; 0x28
 80021a8:	f7ff ff7e 	bl	80020a8 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80021ac:	20c7      	movs	r0, #199	; 0xc7
 80021ae:	f7ff ff5f 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80021b2:	2086      	movs	r0, #134	; 0x86
 80021b4:	f7ff ff78 	bl	80020a8 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80021b8:	2036      	movs	r0, #54	; 0x36
 80021ba:	f7ff ff59 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80021be:	2048      	movs	r0, #72	; 0x48
 80021c0:	f7ff ff72 	bl	80020a8 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80021c4:	203a      	movs	r0, #58	; 0x3a
 80021c6:	f7ff ff53 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80021ca:	2055      	movs	r0, #85	; 0x55
 80021cc:	f7ff ff6c 	bl	80020a8 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80021d0:	20b1      	movs	r0, #177	; 0xb1
 80021d2:	f7ff ff4d 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff ff66 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80021dc:	2018      	movs	r0, #24
 80021de:	f7ff ff63 	bl	80020a8 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80021e2:	20b6      	movs	r0, #182	; 0xb6
 80021e4:	f7ff ff44 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80021e8:	2008      	movs	r0, #8
 80021ea:	f7ff ff5d 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80021ee:	2082      	movs	r0, #130	; 0x82
 80021f0:	f7ff ff5a 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80021f4:	2027      	movs	r0, #39	; 0x27
 80021f6:	f7ff ff57 	bl	80020a8 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80021fa:	20f2      	movs	r0, #242	; 0xf2
 80021fc:	f7ff ff38 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff ff51 	bl	80020a8 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8002206:	2026      	movs	r0, #38	; 0x26
 8002208:	f7ff ff32 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff ff4b 	bl	80020a8 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8002212:	20e0      	movs	r0, #224	; 0xe0
 8002214:	f7ff ff2c 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8002218:	200f      	movs	r0, #15
 800221a:	f7ff ff45 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800221e:	2031      	movs	r0, #49	; 0x31
 8002220:	f7ff ff42 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8002224:	202b      	movs	r0, #43	; 0x2b
 8002226:	f7ff ff3f 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800222a:	200c      	movs	r0, #12
 800222c:	f7ff ff3c 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002230:	200e      	movs	r0, #14
 8002232:	f7ff ff39 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8002236:	2008      	movs	r0, #8
 8002238:	f7ff ff36 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 800223c:	204e      	movs	r0, #78	; 0x4e
 800223e:	f7ff ff33 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8002242:	20f1      	movs	r0, #241	; 0xf1
 8002244:	f7ff ff30 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8002248:	2037      	movs	r0, #55	; 0x37
 800224a:	f7ff ff2d 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800224e:	2007      	movs	r0, #7
 8002250:	f7ff ff2a 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8002254:	2010      	movs	r0, #16
 8002256:	f7ff ff27 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800225a:	2003      	movs	r0, #3
 800225c:	f7ff ff24 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002260:	200e      	movs	r0, #14
 8002262:	f7ff ff21 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8002266:	2009      	movs	r0, #9
 8002268:	f7ff ff1e 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff ff1b 	bl	80020a8 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8002272:	20e1      	movs	r0, #225	; 0xe1
 8002274:	f7ff fefc 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff ff15 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800227e:	200e      	movs	r0, #14
 8002280:	f7ff ff12 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8002284:	2014      	movs	r0, #20
 8002286:	f7ff ff0f 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800228a:	2003      	movs	r0, #3
 800228c:	f7ff ff0c 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8002290:	2011      	movs	r0, #17
 8002292:	f7ff ff09 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8002296:	2007      	movs	r0, #7
 8002298:	f7ff ff06 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800229c:	2031      	movs	r0, #49	; 0x31
 800229e:	f7ff ff03 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80022a2:	20c1      	movs	r0, #193	; 0xc1
 80022a4:	f7ff ff00 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80022a8:	2048      	movs	r0, #72	; 0x48
 80022aa:	f7ff fefd 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80022ae:	2008      	movs	r0, #8
 80022b0:	f7ff fefa 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80022b4:	200f      	movs	r0, #15
 80022b6:	f7ff fef7 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80022ba:	200c      	movs	r0, #12
 80022bc:	f7ff fef4 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80022c0:	2031      	movs	r0, #49	; 0x31
 80022c2:	f7ff fef1 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80022c6:	2036      	movs	r0, #54	; 0x36
 80022c8:	f7ff feee 	bl	80020a8 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80022cc:	200f      	movs	r0, #15
 80022ce:	f7ff feeb 	bl	80020a8 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80022d2:	2011      	movs	r0, #17
 80022d4:	f7ff fecc 	bl	8002070 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80022d8:	2029      	movs	r0, #41	; 0x29
 80022da:	f7ff fec9 	bl	8002070 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80022de:	202c      	movs	r0, #44	; 0x2c
 80022e0:	f7ff fee2 	bl	80020a8 <ILI9341_Send_Data>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <ILI9341_SPI_Init+0x64>)
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <ILI9341_SPI_Init+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <ILI9341_SPI_Init+0x64>)
 80022f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f8:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <ILI9341_SPI_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <ILI9341_SPI_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <ILI9341_SPI_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <ILI9341_SPI_Init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <ILI9341_SPI_Init+0x64>)
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <ILI9341_SPI_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <ILI9341_SPI_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <ILI9341_SPI_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <ILI9341_SPI_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <ILI9341_SPI_Init+0x64>)
 8002334:	220a      	movs	r2, #10
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <ILI9341_SPI_Init+0x64>)
 800233a:	f006 fd36 	bl	8008daa <HAL_SPI_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 8002344:	f000 ff64 	bl	8003210 <Error_Handler>
	}
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000acc 	.word	0x20000acc
 8002350:	40003800 	.word	0x40003800

08002354 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 800235e:	1df9      	adds	r1, r7, #7
 8002360:	2301      	movs	r3, #1
 8002362:	2201      	movs	r2, #1
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <ILI9341_SPI_Send+0x20>)
 8002366:	f006 fda4 	bl	8008eb2 <HAL_SPI_Transmit>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000acc 	.word	0x20000acc

08002378 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b29a      	uxth	r2, r3
 8002386:	230a      	movs	r3, #10
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <ILI9341_SPI_Send_Multiple+0x20>)
 800238c:	f006 fd91 	bl	8008eb2 <HAL_SPI_Transmit>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000acc 	.word	0x20000acc

0800239c <ILI9341_Reset>:

void ILI9341_Reset() {
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	RESET_ON;
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a6:	4810      	ldr	r0, [pc, #64]	; (80023e8 <ILI9341_Reset+0x4c>)
 80023a8:	f002 fff5 	bl	8005396 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80023ac:	2032      	movs	r0, #50	; 0x32
 80023ae:	f001 fb5b 	bl	8003a68 <HAL_Delay>
	RESET_OFF;
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <ILI9341_Reset+0x4c>)
 80023ba:	f002 ffec 	bl	8005396 <HAL_GPIO_WritePin>
	CS_ON;
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c4:	4808      	ldr	r0, [pc, #32]	; (80023e8 <ILI9341_Reset+0x4c>)
 80023c6:	f002 ffe6 	bl	8005396 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80023ca:	2032      	movs	r0, #50	; 0x32
 80023cc:	f001 fb4c 	bl	8003a68 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7ff fe4d 	bl	8002070 <ILI9341_Send_Command>
	CS_OFF;
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <ILI9341_Reset+0x4c>)
 80023de:	f002 ffda 	bl	8005396 <HAL_GPIO_WritePin>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40010c00 	.word	0x40010c00

080023ec <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 80023f6:	2036      	movs	r0, #54	; 0x36
 80023f8:	f7ff fe3a 	bl	8002070 <ILI9341_Send_Command>
	switch (rotation) {
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d836      	bhi.n	8002470 <ILI9341_Set_Rotation+0x84>
 8002402:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <ILI9341_Set_Rotation+0x1c>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	0800242f 	.word	0x0800242f
 8002410:	08002445 	.word	0x08002445
 8002414:	0800245b 	.word	0x0800245b
	case 0:
		ILI9341_Send_Data(0x48);
 8002418:	2048      	movs	r0, #72	; 0x48
 800241a:	f7ff fe45 	bl	80020a8 <ILI9341_Send_Data>
		X_SIZE = 240;
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <ILI9341_Set_Rotation+0x8c>)
 8002420:	22f0      	movs	r2, #240	; 0xf0
 8002422:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <ILI9341_Set_Rotation+0x90>)
 8002426:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800242a:	601a      	str	r2, [r3, #0]
		break;
 800242c:	e020      	b.n	8002470 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800242e:	2028      	movs	r0, #40	; 0x28
 8002430:	f7ff fe3a 	bl	80020a8 <ILI9341_Send_Data>
		X_SIZE = 320;
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <ILI9341_Set_Rotation+0x8c>)
 8002436:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800243a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <ILI9341_Set_Rotation+0x90>)
 800243e:	22f0      	movs	r2, #240	; 0xf0
 8002440:	601a      	str	r2, [r3, #0]
		break;
 8002442:	e015      	b.n	8002470 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 8002444:	2088      	movs	r0, #136	; 0x88
 8002446:	f7ff fe2f 	bl	80020a8 <ILI9341_Send_Data>
		X_SIZE = 240;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <ILI9341_Set_Rotation+0x8c>)
 800244c:	22f0      	movs	r2, #240	; 0xf0
 800244e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <ILI9341_Set_Rotation+0x90>)
 8002452:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002456:	601a      	str	r2, [r3, #0]
		break;
 8002458:	e00a      	b.n	8002470 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 800245a:	20e8      	movs	r0, #232	; 0xe8
 800245c:	f7ff fe24 	bl	80020a8 <ILI9341_Send_Data>
		X_SIZE = 320;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <ILI9341_Set_Rotation+0x8c>)
 8002462:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002466:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <ILI9341_Set_Rotation+0x90>)
 800246a:	22f0      	movs	r2, #240	; 0xf0
 800246c:	601a      	str	r2, [r3, #0]
		break;
 800246e:	bf00      	nop
	}
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000008 	.word	0x20000008
 800247c:	2000000c 	.word	0x2000000c

08002480 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002492:	4817      	ldr	r0, [pc, #92]	; (80024f0 <ILI9341_SPI_Send_32+0x70>)
 8002494:	f002 ff7f 	bl	8005396 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249e:	4814      	ldr	r0, [pc, #80]	; (80024f0 <ILI9341_SPI_Send_32+0x70>)
 80024a0:	f002 ff79 	bl	8005396 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff54 	bl	8002354 <ILI9341_SPI_Send>

	DC_DATA;
 80024ac:	2201      	movs	r2, #1
 80024ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b2:	480f      	ldr	r0, [pc, #60]	; (80024f0 <ILI9341_SPI_Send_32+0x70>)
 80024b4:	f002 ff6f 	bl	8005396 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	0e1b      	lsrs	r3, r3, #24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff48 	bl	8002354 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff42 	bl	8002354 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff3c 	bl	8002354 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff37 	bl	8002354 <ILI9341_SPI_Send>

}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40010c00 	.word	0x40010c00

080024f4 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	202a      	movs	r0, #42	; 0x2a
 8002518:	f7ff ffb2 	bl	8002480 <ILI9341_SPI_Send_32>
	t = y1;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	617b      	str	r3, [r7, #20]
	t |= y2;
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800252e:	6979      	ldr	r1, [r7, #20]
 8002530:	202b      	movs	r0, #43	; 0x2b
 8002532:	f7ff ffa5 	bl	8002480 <ILI9341_SPI_Send_32>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 800253e:	b590      	push	{r4, r7, lr}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	4604      	mov	r4, r0
 8002546:	4608      	mov	r0, r1
 8002548:	4611      	mov	r1, r2
 800254a:	461a      	mov	r2, r3
 800254c:	4623      	mov	r3, r4
 800254e:	80fb      	strh	r3, [r7, #6]
 8002550:	4603      	mov	r3, r0
 8002552:	80bb      	strh	r3, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
 8002558:	4613      	mov	r3, r2
 800255a:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 800255c:	88f8      	ldrh	r0, [r7, #6]
 800255e:	88b9      	ldrh	r1, [r7, #4]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	4413      	add	r3, r2
 8002566:	3b01      	subs	r3, #1
 8002568:	461c      	mov	r4, r3
 800256a:	88ba      	ldrh	r2, [r7, #4]
 800256c:	883b      	ldrh	r3, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	3b01      	subs	r3, #1
 8002572:	4622      	mov	r2, r4
 8002574:	f7ff ffbe 	bl	80024f4 <ILI9341_Set_Address>
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8002590:	202c      	movs	r0, #44	; 0x2c
 8002592:	f7ff fd6d 	bl	8002070 <ILI9341_Send_Command>

	CS_ON;
 8002596:	2200      	movs	r2, #0
 8002598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800259c:	482a      	ldr	r0, [pc, #168]	; (8002648 <LCD_FillWindow+0xc8>)
 800259e:	f002 fefa 	bl	8005396 <HAL_GPIO_WritePin>
	DC_DATA;
 80025a2:	2201      	movs	r2, #1
 80025a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a8:	4827      	ldr	r0, [pc, #156]	; (8002648 <LCD_FillWindow+0xc8>)
 80025aa:	f002 fef4 	bl	8005396 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <LCD_FillWindow+0xcc>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	08db      	lsrs	r3, r3, #3
 80025b8:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b3f      	cmp	r3, #63	; 0x3f
 80025be:	dc01      	bgt.n	80025c4 <LCD_FillWindow+0x44>
 80025c0:	2340      	movs	r3, #64	; 0x40
 80025c2:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2bf0      	cmp	r3, #240	; 0xf0
 80025c8:	dd01      	ble.n	80025ce <LCD_FillWindow+0x4e>
 80025ca:	23f0      	movs	r3, #240	; 0xf0
 80025cc:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 80025ce:	887b      	ldrh	r3, [r7, #2]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00f fa21 	bl	8011a2c <malloc>
 80025ea:	4603      	mov	r3, r0
 80025ec:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e009      	b.n	8002608 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	b292      	uxth	r2, r2
 8002600:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3301      	adds	r3, #1
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	429a      	cmp	r2, r3
 800260e:	dbf1      	blt.n	80025f4 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8002610:	e009      	b.n	8002626 <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4619      	mov	r1, r3
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff fead 	bl	8002378 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d8f1      	bhi.n	8002612 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4619      	mov	r1, r3
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff fe9f 	bl	8002378 <ILI9341_SPI_Send_Multiple>

	free(array);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f00f f9fe 	bl	8011a3c <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 8002640:	bf00      	nop
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40010c00 	.word	0x40010c00
 800264c:	cccccccd 	.word	0xcccccccd

08002650 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4604      	mov	r4, r0
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4623      	mov	r3, r4
 8002660:	80fb      	strh	r3, [r7, #6]
 8002662:	4603      	mov	r3, r0
 8002664:	80bb      	strh	r3, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	807b      	strh	r3, [r7, #2]
 800266a:	4613      	mov	r3, r2
 800266c:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800266e:	883b      	ldrh	r3, [r7, #0]
 8002670:	887a      	ldrh	r2, [r7, #2]
 8002672:	88b9      	ldrh	r1, [r7, #4]
 8002674:	88f8      	ldrh	r0, [r7, #6]
 8002676:	f7ff ff62 	bl	800253e <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	883a      	ldrh	r2, [r7, #0]
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	461a      	mov	r2, r3
 8002684:	8b3b      	ldrh	r3, [r7, #24]
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7ff ff79 	bl	8002580 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
	...

08002698 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af02      	add	r7, sp, #8
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <LCD_FillScreen+0x2c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <LCD_FillScreen+0x30>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b299      	uxth	r1, r3
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	460b      	mov	r3, r1
 80026b4:	2100      	movs	r1, #0
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff ffca 	bl	8002650 <LCD_DrawFilledRectangle>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000008 	.word	0x20000008
 80026c8:	2000000c 	.word	0x2000000c

080026cc <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
 80026d6:	460b      	mov	r3, r1
 80026d8:	80bb      	strh	r3, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	3b20      	subs	r3, #32
 80026e2:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80026e4:	88b9      	ldrh	r1, [r7, #4]
 80026e6:	88f8      	ldrh	r0, [r7, #6]
 80026e8:	2310      	movs	r3, #16
 80026ea:	2208      	movs	r2, #8
 80026ec:	f7ff ff27 	bl	800253e <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 80026f0:	202c      	movs	r0, #44	; 0x2c
 80026f2:	f7ff fcbd 	bl	8002070 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 80026f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026fa:	f00f f997 	bl	8011a2c <malloc>
 80026fe:	4603      	mov	r3, r0
 8002700:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002706:	2300      	movs	r3, #0
 8002708:	75bb      	strb	r3, [r7, #22]
 800270a:	e026      	b.n	800275a <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	7dbb      	ldrb	r3, [r7, #22]
 8002710:	491c      	ldr	r1, [pc, #112]	; (8002784 <LCD_DrawChar+0xb8>)
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	440a      	add	r2, r1
 8002716:	4413      	add	r3, r2
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800271c:	2300      	movs	r3, #0
 800271e:	757b      	strb	r3, [r7, #21]
 8002720:	e015      	b.n	800274e <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	e003      	b.n	800273c <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273a:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
			pt++;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3302      	adds	r3, #2
 8002746:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002748:	7d7b      	ldrb	r3, [r7, #21]
 800274a:	3301      	adds	r3, #1
 800274c:	757b      	strb	r3, [r7, #21]
 800274e:	7d7b      	ldrb	r3, [r7, #21]
 8002750:	2b07      	cmp	r3, #7
 8002752:	d9e6      	bls.n	8002722 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002754:	7dbb      	ldrb	r3, [r7, #22]
 8002756:	3301      	adds	r3, #1
 8002758:	75bb      	strb	r3, [r7, #22]
 800275a:	7dbb      	ldrb	r3, [r7, #22]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d9d5      	bls.n	800270c <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002766:	4808      	ldr	r0, [pc, #32]	; (8002788 <LCD_DrawChar+0xbc>)
 8002768:	f002 fe15 	bl	8005396 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 800276c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002770:	68b8      	ldr	r0, [r7, #8]
 8002772:	f7ff fe01 	bl	8002378 <ILI9341_SPI_Send_Multiple>
	free(array);
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	f00f f960 	bl	8011a3c <free>
}
 800277c:	bf00      	nop
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0802d828 	.word	0x0802d828
 8002788:	40010c00 	.word	0x40010c00

0800278c <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	603a      	str	r2, [r7, #0]
 8002796:	80fb      	strh	r3, [r7, #6]
 8002798:	460b      	mov	r3, r1
 800279a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800279c:	e01d      	b.n	80027da <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80027a4:	d904      	bls.n	80027b0 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027a6:	2300      	movs	r3, #0
 80027a8:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	3310      	adds	r3, #16
 80027ae:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80027b6:	d903      	bls.n	80027c0 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80027b8:	2300      	movs	r3, #0
 80027ba:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80027bc:	2300      	movs	r3, #0
 80027be:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	88b9      	ldrh	r1, [r7, #4]
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff7f 	bl	80026cc <LCD_DrawChar>

		pStr ++;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	3308      	adds	r3, #8
 80027d8:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1dd      	bne.n	800279e <LCD_DrawString+0x12>

	}

}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 80027ec:	b40c      	push	{r2, r3}
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b08e      	sub	sp, #56	; 0x38
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	460a      	mov	r2, r1
 80027f8:	80fb      	strh	r3, [r7, #6]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 80027fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002802:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8002804:	f107 000c 	add.w	r0, r7, #12
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800280c:	2128      	movs	r1, #40	; 0x28
 800280e:	f00f fe9d 	bl	801254c <vsniprintf>
 8002812:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	b298      	uxth	r0, r3
 8002820:	88bb      	ldrh	r3, [r7, #4]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	b29b      	uxth	r3, r3
 8002826:	f107 020c 	add.w	r2, r7, #12
 800282a:	4619      	mov	r1, r3
 800282c:	f7ff ffae 	bl	800278c <LCD_DrawString>
 8002830:	e000      	b.n	8002834 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8002832:	bf00      	nop
}
 8002834:	3738      	adds	r7, #56	; 0x38
 8002836:	46bd      	mov	sp, r7
 8002838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800283c:	b002      	add	sp, #8
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_PeriodElapsedCallback>:

uint32_t audio_interrupt_counts = 0;
uint32_t audio_interrupt_start_tick = 0;
uint32_t mix_interrupt_counts = 0;
uint32_t mix_interrupt_start_tick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d134      	bne.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x7a>
		drum_interrupt_counts++;
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002858:	6013      	str	r3, [r2, #0]
		DrumUpdate(0);
 800285a:	2000      	movs	r0, #0
 800285c:	f7ff fa74 	bl	8001d48 <DrumUpdate>

//		if (drum_interrupt_counts % 2 == 0) {

		keyboardhid.KEYCODE1 = drums[0].state >= DRUM_HIT ? 0x07 : 0x00;  // press 'd'
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002862:	7a1b      	ldrb	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8002868:	2207      	movs	r2, #7
 800286a:	e000      	b.n	800286e <HAL_TIM_PeriodElapsedCallback+0x2e>
 800286c:	2200      	movs	r2, #0
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002870:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = drums[1].state >= DRUM_HIT ? 0x09 : 0x00;  // press 'f'
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_TIM_PeriodElapsedCallback+0x40>
 800287c:	2209      	movs	r2, #9
 800287e:	e000      	b.n	8002882 <HAL_TIM_PeriodElapsedCallback+0x42>
 8002880:	2200      	movs	r2, #0
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002884:	70da      	strb	r2, [r3, #3]
		keyboardhid.KEYCODE3 = drums[2].state >= DRUM_HIT ? 0x0d : 0x00;  // press 'j'
 8002886:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002888:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_TIM_PeriodElapsedCallback+0x54>
 8002890:	220d      	movs	r2, #13
 8002892:	e000      	b.n	8002896 <HAL_TIM_PeriodElapsedCallback+0x56>
 8002894:	2200      	movs	r2, #0
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002898:	711a      	strb	r2, [r3, #4]
		keyboardhid.KEYCODE4 = drums[3].state >= DRUM_HIT ? 0x0e : 0x00;  // press 'k'
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800289c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_TIM_PeriodElapsedCallback+0x68>
 80028a4:	220e      	movs	r2, #14
 80028a6:	e000      	b.n	80028aa <HAL_TIM_PeriodElapsedCallback+0x6a>
 80028a8:	2200      	movs	r2, #0
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80028ac:	715a      	strb	r2, [r3, #5]
		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80028ae:	2208      	movs	r2, #8
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80028b2:	480d      	ldr	r0, [pc, #52]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80028b4:	f00a fd58 	bl	800d368 <USBD_HID_SendReport>

	else if (htim == &htim4) {
		mix_interrupt_counts++;
		PrecomputeMix();
	}
}
 80028b8:	e00a      	b.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0x90>
	else if (htim == &htim4) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0x90>
		mix_interrupt_counts++;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80028ca:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 80028cc:	f7fe fc2e 	bl	800112c <PrecomputeMix>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000dac 	.word	0x20000dac
 80028dc:	20000e40 	.word	0x20000e40
 80028e0:	200009f0 	.word	0x200009f0
 80028e4:	20000e44 	.word	0x20000e44
 80028e8:	20000e98 	.word	0x20000e98
 80028ec:	20000df4 	.word	0x20000df4
 80028f0:	20000e50 	.word	0x20000e50

080028f4 <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fcef 	bl	80012e4 <ButtonPadCallback>
 8002906:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fb39 	bl	8001f80 <ButtonPad_DrumCalibration>


}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800291c:	b090      	sub	sp, #64	; 0x40
 800291e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002920:	f001 f840 	bl	80039a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002924:	f000 f902 	bl	8002b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002928:	f000 fba4 	bl	8003074 <MX_GPIO_Init>
  MX_DMA_Init();
 800292c:	f000 fb68 	bl	8003000 <MX_DMA_Init>
  MX_SPI2_Init();
 8002930:	f000 fa48 	bl	8002dc4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002934:	f000 fac8 	bl	8002ec8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002938:	f000 f958 	bl	8002bec <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800293c:	f00e fc92 	bl	8011264 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8002940:	f000 fa20 	bl	8002d84 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002944:	f00a fb24 	bl	800cf90 <MX_FATFS_Init>
  MX_DAC_Init();
 8002948:	f000 f9ba 	bl	8002cc0 <MX_DAC_Init>
  MX_I2C1_Init();
 800294c:	f000 f9ec 	bl	8002d28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002950:	f000 fa6e 	bl	8002e30 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002954:	f000 fb04 	bl	8002f60 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	ButtonPadInit();
 8002958:	f7fe fca6 	bl	80012a8 <ButtonPadInit>

	ILI9341_Init();
 800295c:	f7ff fbc0 	bl	80020e0 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8002960:	2002      	movs	r0, #2
 8002962:	f7ff fd43 	bl	80023ec <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8002966:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800296a:	f7ff fe95 	bl	8002698 <LCD_FillScreen>


  	// Setting the clock divider somehow helps :D
  	FRESULT fresult = f_mount(&fs, "/", 1);
 800296e:	2201      	movs	r2, #1
 8002970:	495c      	ldr	r1, [pc, #368]	; (8002ae4 <main+0x1cc>)
 8002972:	485d      	ldr	r0, [pc, #372]	; (8002ae8 <main+0x1d0>)
 8002974:	f00d fc72 	bl	801025c <f_mount>
 8002978:	4603      	mov	r3, r0
 800297a:	76fb      	strb	r3, [r7, #27]
  	if (fresult != FR_OK) {
 800297c:	7efb      	ldrb	r3, [r7, #27]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <main+0x78>
  		LCD_Print(0, 19, "Error: f_mount (%d)", fresult); while (1);
 8002982:	7efb      	ldrb	r3, [r7, #27]
 8002984:	4a59      	ldr	r2, [pc, #356]	; (8002aec <main+0x1d4>)
 8002986:	2113      	movs	r1, #19
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff ff2f 	bl	80027ec <LCD_Print>
 800298e:	e7fe      	b.n	800298e <main+0x76>
  	}

	DrumInit();
 8002990:	f7fe fe1e 	bl	80015d0 <DrumInit>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002994:	2100      	movs	r1, #0
 8002996:	4856      	ldr	r0, [pc, #344]	; (8002af0 <main+0x1d8>)
 8002998:	f001 fd97 	bl	80044ca <HAL_DAC_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 800299c:	4855      	ldr	r0, [pc, #340]	; (8002af4 <main+0x1dc>)
 800299e:	f006 fd3f 	bl	8009420 <HAL_TIM_Base_Start_IT>
  	drum_interrupt_start_tick = HAL_GetTick();
 80029a2:	f001 f857 	bl	8003a54 <HAL_GetTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <main+0x1e0>)
 80029ac:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 80029ae:	4853      	ldr	r0, [pc, #332]	; (8002afc <main+0x1e4>)
 80029b0:	f006 fcb8 	bl	8009324 <HAL_TIM_Base_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <main+0x1e4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <main+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	60da      	str	r2, [r3, #12]
  	audio_interrupt_start_tick = HAL_GetTick();
 80029c4:	f001 f846 	bl	8003a54 <HAL_GetTick>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a4d      	ldr	r2, [pc, #308]	; (8002b00 <main+0x1e8>)
 80029cc:	6013      	str	r3, [r2, #0]

  	HAL_TIM_Base_Start_IT(&htim4);
 80029ce:	484d      	ldr	r0, [pc, #308]	; (8002b04 <main+0x1ec>)
 80029d0:	f006 fd26 	bl	8009420 <HAL_TIM_Base_Start_IT>
	mix_interrupt_start_tick = HAL_GetTick();
 80029d4:	f001 f83e 	bl	8003a54 <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a4b      	ldr	r2, [pc, #300]	; (8002b08 <main+0x1f0>)
 80029dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	long last_ticks = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
	long tft_last_ticks = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
	long ticks = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
	int num_hits = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
	int hit_state = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
//
//		switchhid.Button = 0x00;  // shift release
//		USBD_HID_SendReport(&hUsbDeviceFS,  (uint8_t*) &switchhid, sizeof (switchhid));
//		HAL_Delay (200);

		if (HAL_GetTick() - tft_last_ticks > 10) {
 80029f2:	f001 f82f 	bl	8003a54 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b0a      	cmp	r3, #10
 80029fe:	d9f8      	bls.n	80029f2 <main+0xda>

//			AddDrum((HAL_GetTick() / 1000) % 2);
			int r = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 8002a0e:	f001 f821 	bl	8003a54 <HAL_GetTick>
 8002a12:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a14:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <main+0x1f4>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 8002a1e:	f001 f819 	bl	8003a54 <HAL_GetTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <main+0x1f8>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a2c:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <main+0x1fc>)
 8002a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a32:	095c      	lsrs	r4, r3, #5
 8002a34:	4623      	mov	r3, r4
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1b1b      	subs	r3, r3, r4
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002a3e:	f001 f809 	bl	8003a54 <HAL_GetTick>
 8002a42:	4603      	mov	r3, r0
 8002a44:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <main+0x200>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <main+0x1fc>)
 8002a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a52:	095d      	lsrs	r5, r3, #5
 8002a54:	462b      	mov	r3, r5
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1b5b      	subs	r3, r3, r5
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002a5e:	f000 fff9 	bl	8003a54 <HAL_GetTick>
 8002a62:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002a64:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <main+0x200>)
 8002a66:	fba2 1203 	umull	r1, r2, r2, r3
 8002a6a:	0996      	lsrs	r6, r2, #6
 8002a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a70:	fb06 f202 	mul.w	r2, r6, r2
 8002a74:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <main+0x204>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f94a 	bl	8000d14 <__aeabi_i2f>
 8002a80:	4682      	mov	sl, r0
 8002a82:	f000 ffe7 	bl	8003a54 <HAL_GetTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <main+0x1e0>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe f93b 	bl	8000d0c <__aeabi_ui2f>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4650      	mov	r0, sl
 8002a9c:	f7fe fa42 	bl	8000f24 <__aeabi_fdiv>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	491f      	ldr	r1, [pc, #124]	; (8002b20 <main+0x208>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f989 	bl	8000dbc <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fd27 	bl	8000500 <__aeabi_f2d>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	491b      	ldr	r1, [pc, #108]	; (8002b24 <main+0x20c>)
 8002ab8:	6809      	ldr	r1, [r1, #0]
 8002aba:	9106      	str	r1, [sp, #24]
 8002abc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ac0:	9602      	str	r6, [sp, #8]
 8002ac2:	9501      	str	r5, [sp, #4]
 8002ac4:	9400      	str	r4, [sp, #0]
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <main+0x210>)
 8002aca:	4641      	mov	r1, r8
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7ff fe8d 	bl	80027ec <LCD_Print>
					num_tracks);
			LCD_DrumCalibration(&r);
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff f999 	bl	8001e0c <LCD_DrumCalibration>
			tft_last_ticks = HAL_GetTick();
 8002ada:	f000 ffbb 	bl	8003a54 <HAL_GetTick>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	61fb      	str	r3, [r7, #28]
		if (HAL_GetTick() - tft_last_ticks > 10) {
 8002ae2:	e786      	b.n	80029f2 <main+0xda>
 8002ae4:	08014b4c 	.word	0x08014b4c
 8002ae8:	200007b0 	.word	0x200007b0
 8002aec:	08014b50 	.word	0x08014b50
 8002af0:	20000b98 	.word	0x20000b98
 8002af4:	20000dac 	.word	0x20000dac
 8002af8:	20000e3c 	.word	0x20000e3c
 8002afc:	20000d64 	.word	0x20000d64
 8002b00:	20000e4c 	.word	0x20000e4c
 8002b04:	20000df4 	.word	0x20000df4
 8002b08:	20000e54 	.word	0x20000e54
 8002b0c:	95217cb1 	.word	0x95217cb1
 8002b10:	45e7b273 	.word	0x45e7b273
 8002b14:	88888889 	.word	0x88888889
 8002b18:	10624dd3 	.word	0x10624dd3
 8002b1c:	20000e40 	.word	0x20000e40
 8002b20:	447a0000 	.word	0x447a0000
 8002b24:	2000078c 	.word	0x2000078c
 8002b28:	08014b64 	.word	0x08014b64

08002b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b096      	sub	sp, #88	; 0x58
 8002b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b36:	2228      	movs	r2, #40	; 0x28
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00e ff86 	bl	8011a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b72:	2302      	movs	r3, #2
 8002b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fad2 	bl	8007130 <HAL_RCC_OscConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002b92:	f000 fb3d 	bl	8003210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b96:	230f      	movs	r3, #15
 8002b98:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f004 fd3e 	bl	8007634 <HAL_RCC_ClockConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002bbe:	f000 fb27 	bl	8003210 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002bc2:	2312      	movs	r3, #18
 8002bc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 fea8 	bl	8007928 <HAL_RCCEx_PeriphCLKConfig>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002bde:	f000 fb17 	bl	8003210 <Error_Handler>
  }
}
 8002be2:	bf00      	nop
 8002be4:	3758      	adds	r7, #88	; 0x58
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bfc:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002bfe:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <MX_ADC1_Init+0xd0>)
 8002c00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c18:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c26:	2204      	movs	r2, #4
 8002c28:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c2a:	4823      	ldr	r0, [pc, #140]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c2c:	f000 ff40 	bl	8003ab0 <HAL_ADC_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002c36:	f000 faeb 	bl	8003210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002c42:	2307      	movs	r3, #7
 8002c44:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	481b      	ldr	r0, [pc, #108]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c4c:	f001 f914 	bl	8003e78 <HAL_ADC_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002c56:	f000 fadb 	bl	8003210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c68:	f001 f906 	bl	8003e78 <HAL_ADC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002c72:	f000 facd 	bl	8003210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c76:	2302      	movs	r3, #2
 8002c78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002c84:	f001 f8f8 	bl	8003e78 <HAL_ADC_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002c8e:	f000 fabf 	bl	8003210 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c92:	2303      	movs	r3, #3
 8002c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c96:	2304      	movs	r3, #4
 8002c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_ADC1_Init+0xcc>)
 8002ca0:	f001 f8ea 	bl	8003e78 <HAL_ADC_ConfigChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002caa:	f000 fab1 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000b24 	.word	0x20000b24
 8002cbc:	40012400 	.word	0x40012400

08002cc0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_DAC_Init+0x60>)
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <MX_DAC_Init+0x64>)
 8002cd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002cd4:	4812      	ldr	r0, [pc, #72]	; (8002d20 <MX_DAC_Init+0x60>)
 8002cd6:	f001 fbd6 	bl	8004486 <HAL_DAC_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002ce0:	f000 fa96 	bl	8003210 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002ce4:	2324      	movs	r3, #36	; 0x24
 8002ce6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002cec:	463b      	mov	r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480b      	ldr	r0, [pc, #44]	; (8002d20 <MX_DAC_Init+0x60>)
 8002cf4:	f001 fd48 	bl	8004788 <HAL_DAC_ConfigChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002cfe:	f000 fa87 	bl	8003210 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002d02:	463b      	mov	r3, r7
 8002d04:	2210      	movs	r2, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_DAC_Init+0x60>)
 8002d0a:	f001 fd3d 	bl	8004788 <HAL_DAC_ConfigChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002d14:	f000 fa7c 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000b98 	.word	0x20000b98
 8002d24:	40007400 	.word	0x40007400

08002d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <MX_I2C1_Init+0x54>)
 8002d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <MX_I2C1_Init+0x58>)
 8002d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <MX_I2C1_Init+0x50>)
 8002d66:	f002 fb47 	bl	80053f8 <HAL_I2C_Init>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d70:	f000 fa4e 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000c34 	.word	0x20000c34
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	000186a0 	.word	0x000186a0

08002d84 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <MX_SDIO_SD_Init+0x3c>)
 8002d8c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <MX_SDIO_SD_Init+0x38>)
 8002dae:	2264      	movs	r2, #100	; 0x64
 8002db0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000c88 	.word	0x20000c88
 8002dc0:	40018000 	.word	0x40018000

08002dc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <MX_SPI2_Init+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002e10:	220a      	movs	r2, #10
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <MX_SPI2_Init+0x64>)
 8002e16:	f005 ffc8 	bl	8008daa <HAL_SPI_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e20:	f000 f9f6 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000d0c 	.word	0x20000d0c
 8002e2c:	40003800 	.word	0x40003800

08002e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e44:	463b      	mov	r3, r7
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e62:	f240 52db 	movw	r2, #1499	; 0x5db
 8002e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e74:	4813      	ldr	r0, [pc, #76]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e76:	f006 fa05 	bl	8009284 <HAL_TIM_Base_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e80:	f000 f9c6 	bl	8003210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002e92:	f006 fc2d 	bl	80096f0 <HAL_TIM_ConfigClockSource>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e9c:	f000 f9b8 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_TIM2_Init+0x94>)
 8002eae:	f006 feef 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002eb8:	f000 f9aa 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000d64 	.word	0x20000d64

08002ec8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002edc:	463b      	mov	r3, r7
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50; // 719;
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002eec:	2232      	movs	r2, #50	; 0x32
 8002eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002ef8:	2231      	movs	r2, #49	; 0x31
 8002efa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002f0a:	f006 f9bb 	bl	8009284 <HAL_TIM_Base_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002f14:	f000 f97c 	bl	8003210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4619      	mov	r1, r3
 8002f24:	480c      	ldr	r0, [pc, #48]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002f26:	f006 fbe3 	bl	80096f0 <HAL_TIM_ConfigClockSource>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002f30:	f000 f96e 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_TIM3_Init+0x90>)
 8002f42:	f006 fea5 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002f4c:	f000 f960 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000dac 	.word	0x20000dac
 8002f5c:	40000400 	.word	0x40000400

08002f60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <MX_TIM4_Init+0x9c>)
 8002f82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002f92:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fa4:	4814      	ldr	r0, [pc, #80]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002fa6:	f006 f96d 	bl	8009284 <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002fb0:	f000 f92e 	bl	8003210 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002fb4:	2305      	movs	r3, #5
 8002fb6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002fb8:	2310      	movs	r3, #16
 8002fba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002fc4:	f006 fc5b 	bl	800987e <HAL_TIM_SlaveConfigSynchro>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002fce:	f000 f91f 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4806      	ldr	r0, [pc, #24]	; (8002ff8 <MX_TIM4_Init+0x98>)
 8002fe0:	f006 fe56 	bl	8009c90 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002fea:	f000 f911 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000df4 	.word	0x20000df4
 8002ffc:	40000800 	.word	0x40000800

08003000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <MX_DMA_Init+0x70>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4a19      	ldr	r2, [pc, #100]	; (8003070 <MX_DMA_Init+0x70>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6153      	str	r3, [r2, #20]
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <MX_DMA_Init+0x70>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <MX_DMA_Init+0x70>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <MX_DMA_Init+0x70>)
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	6153      	str	r3, [r2, #20]
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_DMA_Init+0x70>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	200b      	movs	r0, #11
 800303c:	f001 f9ed 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003040:	200b      	movs	r0, #11
 8003042:	f001 fa06 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	203a      	movs	r0, #58	; 0x3a
 800304c:	f001 f9e5 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003050:	203a      	movs	r0, #58	; 0x3a
 8003052:	f001 f9fe 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2100      	movs	r1, #0
 800305a:	203b      	movs	r0, #59	; 0x3b
 800305c:	f001 f9dd 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8003060:	203b      	movs	r0, #59	; 0x3b
 8003062:	f001 f9f6 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000

08003074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307a:	f107 0318 	add.w	r3, r7, #24
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003088:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <MX_GPIO_Init+0x188>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <MX_GPIO_Init+0x188>)
 800308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <MX_GPIO_Init+0x188>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a0:	4b56      	ldr	r3, [pc, #344]	; (80031fc <MX_GPIO_Init+0x188>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a55      	ldr	r2, [pc, #340]	; (80031fc <MX_GPIO_Init+0x188>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <MX_GPIO_Init+0x188>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <MX_GPIO_Init+0x188>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	; (80031fc <MX_GPIO_Init+0x188>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b4d      	ldr	r3, [pc, #308]	; (80031fc <MX_GPIO_Init+0x188>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d0:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <MX_GPIO_Init+0x188>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a49      	ldr	r2, [pc, #292]	; (80031fc <MX_GPIO_Init+0x188>)
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b47      	ldr	r3, [pc, #284]	; (80031fc <MX_GPIO_Init+0x188>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e8:	4b44      	ldr	r3, [pc, #272]	; (80031fc <MX_GPIO_Init+0x188>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a43      	ldr	r2, [pc, #268]	; (80031fc <MX_GPIO_Init+0x188>)
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b41      	ldr	r3, [pc, #260]	; (80031fc <MX_GPIO_Init+0x188>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8003100:	2200      	movs	r2, #0
 8003102:	f64f 0170 	movw	r1, #63600	; 0xf870
 8003106:	483e      	ldr	r0, [pc, #248]	; (8003200 <MX_GPIO_Init+0x18c>)
 8003108:	f002 f945 	bl	8005396 <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 800310c:	2200      	movs	r2, #0
 800310e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8003112:	483c      	ldr	r0, [pc, #240]	; (8003204 <MX_GPIO_Init+0x190>)
 8003114:	f002 f93f 	bl	8005396 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800311e:	483a      	ldr	r0, [pc, #232]	; (8003208 <MX_GPIO_Init+0x194>)
 8003120:	f002 f939 	bl	8005396 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003124:	230f      	movs	r3, #15
 8003126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <MX_GPIO_Init+0x198>)
 800312a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	4619      	mov	r1, r3
 8003136:	4832      	ldr	r0, [pc, #200]	; (8003200 <MX_GPIO_Init+0x18c>)
 8003138:	f001 ff82 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 800313c:	f64f 0370 	movw	r3, #63600	; 0xf870
 8003140:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003142:	2301      	movs	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2302      	movs	r3, #2
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	4619      	mov	r1, r3
 8003154:	482a      	ldr	r0, [pc, #168]	; (8003200 <MX_GPIO_Init+0x18c>)
 8003156:	f001 ff73 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800315a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800315e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003160:	2301      	movs	r3, #1
 8003162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2302      	movs	r3, #2
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800316c:	f107 0318 	add.w	r3, r7, #24
 8003170:	4619      	mov	r1, r3
 8003172:	4824      	ldr	r0, [pc, #144]	; (8003204 <MX_GPIO_Init+0x190>)
 8003174:	f001 ff64 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8003178:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800317c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2302      	movs	r3, #2
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	f107 0318 	add.w	r3, r7, #24
 800318e:	4619      	mov	r1, r3
 8003190:	481d      	ldr	r0, [pc, #116]	; (8003208 <MX_GPIO_Init+0x194>)
 8003192:	f001 ff55 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 0318 	add.w	r3, r7, #24
 80031aa:	4619      	mov	r1, r3
 80031ac:	4815      	ldr	r0, [pc, #84]	; (8003204 <MX_GPIO_Init+0x190>)
 80031ae:	f001 ff47 	bl	8005040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	2006      	movs	r0, #6
 80031b8:	f001 f92f 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031bc:	2006      	movs	r0, #6
 80031be:	f001 f948 	bl	8004452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	2007      	movs	r0, #7
 80031c8:	f001 f927 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031cc:	2007      	movs	r0, #7
 80031ce:	f001 f940 	bl	8004452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	2008      	movs	r0, #8
 80031d8:	f001 f91f 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031dc:	2008      	movs	r0, #8
 80031de:	f001 f938 	bl	8004452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2009      	movs	r0, #9
 80031e8:	f001 f917 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80031ec:	2009      	movs	r0, #9
 80031ee:	f001 f930 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 80031f2:	bf00      	nop
 80031f4:	3728      	adds	r7, #40	; 0x28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	40011800 	.word	0x40011800
 8003204:	40011000 	.word	0x40011000
 8003208:	40010c00 	.word	0x40010c00
 800320c:	10310000 	.word	0x10310000

08003210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003214:	b672      	cpsid	i
}
 8003216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003218:	e7fe      	b.n	8003218 <Error_Handler+0x8>
	...

0800321c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_MspInit+0x40>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_MspInit+0x40>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6193      	str	r3, [r2, #24]
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_MspInit+0x40>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_MspInit+0x40>)
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_MspInit+0x40>)
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	61d3      	str	r3, [r2, #28]
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_MspInit+0x40>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_ADC_MspInit+0xbc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d149      	bne.n	8003314 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003280:	4b27      	ldr	r3, [pc, #156]	; (8003320 <HAL_ADC_MspInit+0xc0>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4a26      	ldr	r2, [pc, #152]	; (8003320 <HAL_ADC_MspInit+0xc0>)
 8003286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328a:	6193      	str	r3, [r2, #24]
 800328c:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_ADC_MspInit+0xc0>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_ADC_MspInit+0xc0>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_ADC_MspInit+0xc0>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_ADC_MspInit+0xc0>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032b0:	230f      	movs	r3, #15
 80032b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b4:	2303      	movs	r3, #3
 80032b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	4619      	mov	r1, r3
 80032be:	4819      	ldr	r0, [pc, #100]	; (8003324 <HAL_ADC_MspInit+0xc4>)
 80032c0:	f001 febe 	bl	8005040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032c6:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_ADC_MspInit+0xcc>)
 80032c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d0:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032ee:	2220      	movs	r2, #32
 80032f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032f8:	480b      	ldr	r0, [pc, #44]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 80032fa:	f001 fb25 	bl	8004948 <HAL_DMA_Init>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003304:	f7ff ff84 	bl	8003210 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 800330c:	621a      	str	r2, [r3, #32]
 800330e:	4a06      	ldr	r2, [pc, #24]	; (8003328 <HAL_ADC_MspInit+0xc8>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003314:	bf00      	nop
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40012400 	.word	0x40012400
 8003320:	40021000 	.word	0x40021000
 8003324:	40010800 	.word	0x40010800
 8003328:	20000b54 	.word	0x20000b54
 800332c:	40020008 	.word	0x40020008

08003330 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 0310 	add.w	r3, r7, #16
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3d      	ldr	r2, [pc, #244]	; (8003440 <HAL_DAC_MspInit+0x110>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d172      	bne.n	8003436 <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003350:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <HAL_DAC_MspInit+0x114>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_DAC_MspInit+0x114>)
 8003356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800335a:	61d3      	str	r3, [r2, #28]
 800335c:	4b39      	ldr	r3, [pc, #228]	; (8003444 <HAL_DAC_MspInit+0x114>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <HAL_DAC_MspInit+0x114>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4a35      	ldr	r2, [pc, #212]	; (8003444 <HAL_DAC_MspInit+0x114>)
 800336e:	f043 0304 	orr.w	r3, r3, #4
 8003372:	6193      	str	r3, [r2, #24]
 8003374:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_DAC_MspInit+0x114>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003380:	2330      	movs	r3, #48	; 0x30
 8003382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003384:	2303      	movs	r3, #3
 8003386:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	4619      	mov	r1, r3
 800338e:	482e      	ldr	r0, [pc, #184]	; (8003448 <HAL_DAC_MspInit+0x118>)
 8003390:	f001 fe56 	bl	8005040 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_DAC_MspInit+0x11c>)
 8003396:	4a2e      	ldr	r2, [pc, #184]	; (8003450 <HAL_DAC_MspInit+0x120>)
 8003398:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800339a:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_DAC_MspInit+0x11c>)
 800339c:	2210      	movs	r2, #16
 800339e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ba:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033be:	2220      	movs	r2, #32
 80033c0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033c2:	4b22      	ldr	r3, [pc, #136]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80033c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80033ca:	4820      	ldr	r0, [pc, #128]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033cc:	f001 fabc 	bl	8004948 <HAL_DMA_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 80033d6:	f7ff ff1b 	bl	8003210 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	4a1a      	ldr	r2, [pc, #104]	; (800344c <HAL_DAC_MspInit+0x11c>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_DAC_MspInit+0x124>)
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_DAC_MspInit+0x128>)
 80033ea:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_DAC_MspInit+0x124>)
 80033ee:	2210      	movs	r2, #16
 80033f0:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_DAC_MspInit+0x124>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_DAC_MspInit+0x124>)
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_DAC_MspInit+0x124>)
 8003400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003404:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_DAC_MspInit+0x124>)
 8003408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800340c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_DAC_MspInit+0x124>)
 8003410:	2220      	movs	r2, #32
 8003412:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_DAC_MspInit+0x124>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800341a:	480e      	ldr	r0, [pc, #56]	; (8003454 <HAL_DAC_MspInit+0x124>)
 800341c:	f001 fa94 	bl	8004948 <HAL_DMA_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8003426:	f7ff fef3 	bl	8003210 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_DAC_MspInit+0x124>)
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_DAC_MspInit+0x124>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40007400 	.word	0x40007400
 8003444:	40021000 	.word	0x40021000
 8003448:	40010800 	.word	0x40010800
 800344c:	20000bac 	.word	0x20000bac
 8003450:	40020430 	.word	0x40020430
 8003454:	20000bf0 	.word	0x20000bf0
 8003458:	40020444 	.word	0x40020444

0800345c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a15      	ldr	r2, [pc, #84]	; (80034cc <HAL_I2C_MspInit+0x70>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d123      	bne.n	80034c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_I2C_MspInit+0x74>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_I2C_MspInit+0x74>)
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	6193      	str	r3, [r2, #24]
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_I2C_MspInit+0x74>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003494:	23c0      	movs	r3, #192	; 0xc0
 8003496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003498:	2312      	movs	r3, #18
 800349a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	4619      	mov	r1, r3
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <HAL_I2C_MspInit+0x78>)
 80034a8:	f001 fdca 	bl	8005040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_I2C_MspInit+0x74>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <HAL_I2C_MspInit+0x74>)
 80034b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034b6:	61d3      	str	r3, [r2, #28]
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_I2C_MspInit+0x74>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40005400 	.word	0x40005400
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40010c00 	.word	0x40010c00

080034d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0318 	add.w	r3, r7, #24
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_SD_MspInit+0xa4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d13c      	bne.n	8003572 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_SD_MspInit+0xa8>)
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4a20      	ldr	r2, [pc, #128]	; (8003580 <HAL_SD_MspInit+0xa8>)
 80034fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003502:	6153      	str	r3, [r2, #20]
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_SD_MspInit+0xa8>)
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_SD_MspInit+0xa8>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_SD_MspInit+0xa8>)
 8003516:	f043 0310 	orr.w	r3, r3, #16
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_SD_MspInit+0xa8>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_SD_MspInit+0xa8>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <HAL_SD_MspInit+0xa8>)
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_SD_MspInit+0xa8>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003540:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003544:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354e:	f107 0318 	add.w	r3, r7, #24
 8003552:	4619      	mov	r1, r3
 8003554:	480b      	ldr	r0, [pc, #44]	; (8003584 <HAL_SD_MspInit+0xac>)
 8003556:	f001 fd73 	bl	8005040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800355a:	2304      	movs	r3, #4
 800355c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	4619      	mov	r1, r3
 800356c:	4806      	ldr	r0, [pc, #24]	; (8003588 <HAL_SD_MspInit+0xb0>)
 800356e:	f001 fd67 	bl	8005040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	3728      	adds	r7, #40	; 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40018000 	.word	0x40018000
 8003580:	40021000 	.word	0x40021000
 8003584:	40011000 	.word	0x40011000
 8003588:	40011400 	.word	0x40011400

0800358c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_SPI_MspInit+0x8c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d131      	bne.n	8003610 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_SPI_MspInit+0x90>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_SPI_MspInit+0x90>)
 80035b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b6:	61d3      	str	r3, [r2, #28]
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_SPI_MspInit+0x90>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_SPI_MspInit+0x90>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_SPI_MspInit+0x90>)
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	6193      	str	r3, [r2, #24]
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_SPI_MspInit+0x90>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80035dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80035e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e6:	2303      	movs	r3, #3
 80035e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ea:	f107 0310 	add.w	r3, r7, #16
 80035ee:	4619      	mov	r1, r3
 80035f0:	480b      	ldr	r0, [pc, #44]	; (8003620 <HAL_SPI_MspInit+0x94>)
 80035f2:	f001 fd25 	bl	8005040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80035f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	4619      	mov	r1, r3
 800360a:	4805      	ldr	r0, [pc, #20]	; (8003620 <HAL_SPI_MspInit+0x94>)
 800360c:	f001 fd18 	bl	8005040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40003800 	.word	0x40003800
 800361c:	40021000 	.word	0x40021000
 8003620:	40010c00 	.word	0x40010c00

08003624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d10c      	bne.n	8003650 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	61d3      	str	r3, [r2, #28]
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800364e:	e032      	b.n	80036b6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_TIM_Base_MspInit+0xa0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d114      	bne.n	8003684 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	61d3      	str	r3, [r2, #28]
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2100      	movs	r1, #0
 8003676:	201d      	movs	r0, #29
 8003678:	f000 fecf 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800367c:	201d      	movs	r0, #29
 800367e:	f000 fee8 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 8003682:	e018      	b.n	80036b6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_TIM_Base_MspInit+0xa4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d113      	bne.n	80036b6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	61d3      	str	r3, [r2, #28]
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_TIM_Base_MspInit+0x9c>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2100      	movs	r1, #0
 80036aa:	201e      	movs	r0, #30
 80036ac:	f000 feb5 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036b0:	201e      	movs	r0, #30
 80036b2:	f000 fece 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800

080036cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <NMI_Handler+0x4>

080036d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d6:	e7fe      	b.n	80036d6 <HardFault_Handler+0x4>

080036d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036dc:	e7fe      	b.n	80036dc <MemManage_Handler+0x4>

080036de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <BusFault_Handler+0x4>

080036e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <UsageFault_Handler+0x4>

080036ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003712:	f000 f98d 	bl	8003a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}

0800371a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800371e:	2001      	movs	r0, #1
 8003720:	f001 fe52 	bl	80053c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}

08003728 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800372c:	2002      	movs	r0, #2
 800372e:	f001 fe4b 	bl	80053c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}

08003736 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800373a:	2004      	movs	r0, #4
 800373c:	f001 fe44 	bl	80053c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}

08003744 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003748:	2008      	movs	r0, #8
 800374a:	f001 fe3d 	bl	80053c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <DMA1_Channel1_IRQHandler+0x10>)
 800375a:	f001 fa07 	bl	8004b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000b54 	.word	0x20000b54

08003768 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800376e:	f002 f8ac 	bl	80058ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000135c 	.word	0x2000135c

0800377c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <TIM3_IRQHandler+0x10>)
 8003782:	f005 fead 	bl	80094e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000dac 	.word	0x20000dac

08003790 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <TIM4_IRQHandler+0x10>)
 8003796:	f005 fea3 	bl	80094e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000df4 	.word	0x20000df4

080037a4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80037a8:	4802      	ldr	r0, [pc, #8]	; (80037b4 <DMA2_Channel3_IRQHandler+0x10>)
 80037aa:	f001 f9df 	bl	8004b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000bac 	.word	0x20000bac

080037b8 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <DMA2_Channel4_5_IRQHandler+0x10>)
 80037be:	f001 f9d5 	bl	8004b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000bf0 	.word	0x20000bf0

080037cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
	return 1;
 80037d0:	2301      	movs	r3, #1
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <_kill>:

int _kill(int pid, int sig)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037e4:	f00e f8f8 	bl	80119d8 <__errno>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2216      	movs	r2, #22
 80037ec:	601a      	str	r2, [r3, #0]
	return -1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <_exit>:

void _exit (int status)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003802:	f04f 31ff 	mov.w	r1, #4294967295
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffe7 	bl	80037da <_kill>
	while (1) {}		/* Make sure we hang here */
 800380c:	e7fe      	b.n	800380c <_exit+0x12>

0800380e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e00a      	b.n	8003836 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003820:	f3af 8000 	nop.w
 8003824:	4601      	mov	r1, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	60ba      	str	r2, [r7, #8]
 800382c:	b2ca      	uxtb	r2, r1
 800382e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	dbf0      	blt.n	8003820 <_read+0x12>
	}

return len;
 800383e:	687b      	ldr	r3, [r7, #4]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e009      	b.n	800386e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	60ba      	str	r2, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3301      	adds	r3, #1
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	dbf1      	blt.n	800385a <_write+0x12>
	}
	return len;
 8003876:	687b      	ldr	r3, [r7, #4]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_close>:

int _close(int file)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	return -1;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038a6:	605a      	str	r2, [r3, #4]
	return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <_isatty>:

int _isatty(int file)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	return 1;
 80038bc:	2301      	movs	r3, #1
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
	return 0;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <_sbrk+0x5c>)
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <_sbrk+0x60>)
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038f4:	4b13      	ldr	r3, [pc, #76]	; (8003944 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <_sbrk+0x64>)
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <_sbrk+0x68>)
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d207      	bcs.n	8003920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003910:	f00e f862 	bl	80119d8 <__errno>
 8003914:	4603      	mov	r3, r0
 8003916:	220c      	movs	r2, #12
 8003918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e009      	b.n	8003934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <_sbrk+0x64>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <_sbrk+0x64>)
 8003930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20010000 	.word	0x20010000
 8003940:	00000400 	.word	0x00000400
 8003944:	20000e58 	.word	0x20000e58
 8003948:	20001670 	.word	0x20001670

0800394c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003958:	f7ff fff8 	bl	800394c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800395c:	480b      	ldr	r0, [pc, #44]	; (800398c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800395e:	490c      	ldr	r1, [pc, #48]	; (8003990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003964:	e002      	b.n	800396c <LoopCopyDataInit>

08003966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396a:	3304      	adds	r3, #4

0800396c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800396c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800396e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003970:	d3f9      	bcc.n	8003966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003974:	4c09      	ldr	r4, [pc, #36]	; (800399c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003978:	e001      	b.n	800397e <LoopFillZerobss>

0800397a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800397c:	3204      	adds	r2, #4

0800397e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800397e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003980:	d3fb      	bcc.n	800397a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003982:	f00e f82f 	bl	80119e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003986:	f7fe ffc7 	bl	8002918 <main>
  bx lr
 800398a:	4770      	bx	lr
  ldr r0, =_sdata
 800398c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003990:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003994:	0802e2bc 	.word	0x0802e2bc
  ldr r2, =_sbss
 8003998:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 800399c:	20001670 	.word	0x20001670

080039a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039a0:	e7fe      	b.n	80039a0 <ADC1_2_IRQHandler>
	...

080039a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_Init+0x28>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_Init+0x28>)
 80039ae:	f043 0310 	orr.w	r3, r3, #16
 80039b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b4:	2003      	movs	r0, #3
 80039b6:	f000 fd25 	bl	8004404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ba:	2000      	movs	r0, #0
 80039bc:	f000 f808 	bl	80039d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c0:	f7ff fc2c 	bl	800321c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40022000 	.word	0x40022000

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_InitTick+0x54>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_InitTick+0x58>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fd3d 	bl	800446e <HAL_SYSTICK_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00e      	b.n	8003a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d80a      	bhi.n	8003a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f000 fd05 	bl	800441a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a10:	4a06      	ldr	r2, [pc, #24]	; (8003a2c <HAL_InitTick+0x5c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000010 	.word	0x20000010
 8003a28:	20000018 	.word	0x20000018
 8003a2c:	20000014 	.word	0x20000014

08003a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_IncTick+0x1c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_IncTick+0x20>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <HAL_IncTick+0x20>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	20000018 	.word	0x20000018
 8003a50:	20000e5c 	.word	0x20000e5c

08003a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return uwTick;
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <HAL_GetTick+0x10>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	20000e5c 	.word	0x20000e5c

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_Delay+0x44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffe0 	bl	8003a54 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000018 	.word	0x20000018

08003ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0ce      	b.n	8003c70 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fbb6 	bl	8003260 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fb11 	bl	800411c <ADC_ConversionStop_Disable>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 80a9 	bne.w	8003c5e <HAL_ADC_Init+0x1ae>
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 80a5 	bne.w	8003c5e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
 8003b20:	f043 0202 	orr.w	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4951      	ldr	r1, [pc, #324]	; (8003c78 <HAL_ADC_Init+0x1c8>)
 8003b32:	428b      	cmp	r3, r1
 8003b34:	d10a      	bne.n	8003b4c <HAL_ADC_Init+0x9c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b3e:	d002      	beq.n	8003b46 <HAL_ADC_Init+0x96>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	e004      	b.n	8003b50 <HAL_ADC_Init+0xa0>
 8003b46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b4a:	e001      	b.n	8003b50 <HAL_ADC_Init+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7b1b      	ldrb	r3, [r3, #12]
 8003b56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b68:	d003      	beq.n	8003b72 <HAL_ADC_Init+0xc2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_ADC_Init+0xc8>
 8003b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b76:	e000      	b.n	8003b7a <HAL_ADC_Init+0xca>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7d1b      	ldrb	r3, [r3, #20]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d119      	bne.n	8003bbc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7b1b      	ldrb	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	035a      	lsls	r2, r3, #13
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e00b      	b.n	8003bbc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_ADC_Init+0x1cc>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bec:	d003      	beq.n	8003bf6 <HAL_ADC_Init+0x146>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d104      	bne.n	8003c00 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	051b      	lsls	r3, r3, #20
 8003bfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_ADC_Init+0x1d0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d10b      	bne.n	8003c3c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c3a:	e018      	b.n	8003c6e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	f023 0312 	bic.w	r3, r3, #18
 8003c44:	f043 0210 	orr.w	r2, r3, #16
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c5c:	e007      	b.n	8003c6e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40013c00 	.word	0x40013c00
 8003c7c:	ffe1f7fd 	.word	0xffe1f7fd
 8003c80:	ff1f0efe 	.word	0xff1f0efe

08003c84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a64      	ldr	r2, [pc, #400]	; (8003e2c <HAL_ADC_Start_DMA+0x1a8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_Start_DMA+0x24>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a63      	ldr	r2, [pc, #396]	; (8003e30 <HAL_ADC_Start_DMA+0x1ac>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d106      	bne.n	8003cb6 <HAL_ADC_Start_DMA+0x32>
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <HAL_ADC_Start_DMA+0x1a8>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f040 80b3 	bne.w	8003e1c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_Start_DMA+0x40>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0ae      	b.n	8003e22 <HAL_ADC_Start_DMA+0x19e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f9cb 	bl	8004068 <ADC_Enable>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 809a 	bne.w	8003e12 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <HAL_ADC_Start_DMA+0x1ac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d105      	bne.n	8003d08 <HAL_ADC_Start_DMA+0x84>
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_ADC_Start_DMA+0x1a8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d115      	bne.n	8003d34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d026      	beq.n	8003d70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d32:	e01d      	b.n	8003d70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <HAL_ADC_Start_DMA+0x1a8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_ADC_Start_DMA+0xd0>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <HAL_ADC_Start_DMA+0x1ac>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10d      	bne.n	8003d70 <HAL_ADC_Start_DMA+0xec>
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <HAL_ADC_Start_DMA+0x1a8>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	f023 0206 	bic.w	r2, r3, #6
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d88:	e002      	b.n	8003d90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <HAL_ADC_Start_DMA+0x1b0>)
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <HAL_ADC_Start_DMA+0x1b4>)
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_ADC_Start_DMA+0x1b8>)
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0202 	mvn.w	r2, #2
 8003db8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a18      	ldr	r0, [r3, #32]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	334c      	adds	r3, #76	; 0x4c
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f000 fe2b 	bl	8004a34 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003de8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003dec:	d108      	bne.n	8003e00 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003dfc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003dfe:	e00f      	b.n	8003e20 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e0e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003e10:	e006      	b.n	8003e20 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003e1a:	e001      	b.n	8003e20 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40012400 	.word	0x40012400
 8003e30:	40012800 	.word	0x40012800
 8003e34:	0800419f 	.word	0x0800419f
 8003e38:	0800421b 	.word	0x0800421b
 8003e3c:	08004237 	.word	0x08004237

08003e40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x20>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e0dc      	b.n	8004052 <HAL_ADC_ConfigChannel+0x1da>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b06      	cmp	r3, #6
 8003ea6:	d81c      	bhi.n	8003ee2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3b05      	subs	r3, #5
 8003eba:	221f      	movs	r2, #31
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	4019      	ands	r1, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3b05      	subs	r3, #5
 8003ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34
 8003ee0:	e03c      	b.n	8003f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d81c      	bhi.n	8003f24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	3b23      	subs	r3, #35	; 0x23
 8003efc:	221f      	movs	r2, #31
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	4019      	ands	r1, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	3b23      	subs	r3, #35	; 0x23
 8003f16:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
 8003f22:	e01b      	b.n	8003f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b41      	subs	r3, #65	; 0x41
 8003f36:	221f      	movs	r2, #31
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	4019      	ands	r1, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3b41      	subs	r3, #65	; 0x41
 8003f50:	fa00 f203 	lsl.w	r2, r0, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d91c      	bls.n	8003f9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68d9      	ldr	r1, [r3, #12]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	3b1e      	subs	r3, #30
 8003f76:	2207      	movs	r2, #7
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	4019      	ands	r1, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6898      	ldr	r0, [r3, #8]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3b1e      	subs	r3, #30
 8003f90:	fa00 f203 	lsl.w	r2, r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e019      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6919      	ldr	r1, [r3, #16]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	2207      	movs	r2, #7
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	4019      	ands	r1, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6898      	ldr	r0, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d003      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fde:	2b11      	cmp	r3, #17
 8003fe0:	d132      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_ADC_ConfigChannel+0x1e4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d125      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d126      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004008:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b10      	cmp	r3, #16
 8004010:	d11a      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <HAL_ADC_ConfigChannel+0x1e8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_ADC_ConfigChannel+0x1ec>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	0c9a      	lsrs	r2, r3, #18
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004028:	e002      	b.n	8004030 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3b01      	subs	r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f9      	bne.n	800402a <HAL_ADC_ConfigChannel+0x1b2>
 8004036:	e007      	b.n	8004048 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012400 	.word	0x40012400
 8004060:	20000010 	.word	0x20000010
 8004064:	431bde83 	.word	0x431bde83

08004068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d040      	beq.n	8004108 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <ADC_Enable+0xac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <ADC_Enable+0xb0>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	0c9b      	lsrs	r3, r3, #18
 80040a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040a4:	e002      	b.n	80040ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f9      	bne.n	80040a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040b2:	f7ff fccf 	bl	8003a54 <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040b8:	e01f      	b.n	80040fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040ba:	f7ff fccb 	bl	8003a54 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d918      	bls.n	80040fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d011      	beq.n	80040fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e007      	b.n	800410a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d1d8      	bne.n	80040ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000010 	.word	0x20000010
 8004118:	431bde83 	.word	0x431bde83

0800411c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d12e      	bne.n	8004194 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004146:	f7ff fc85 	bl	8003a54 <HAL_GetTick>
 800414a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800414c:	e01b      	b.n	8004186 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800414e:	f7ff fc81 	bl	8003a54 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d914      	bls.n	8004186 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10d      	bne.n	8004186 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f043 0210 	orr.w	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f043 0201 	orr.w	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e007      	b.n	8004196 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b01      	cmp	r3, #1
 8004192:	d0dc      	beq.n	800414e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d127      	bne.n	8004208 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80041ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041d2:	d115      	bne.n	8004200 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fe1d 	bl	8003e40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004206:	e004      	b.n	8004212 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fe12 	bl	8003e52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f043 0204 	orr.w	r2, r3, #4
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff fe01 	bl	8003e64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <__NVIC_SetPriorityGrouping+0x44>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004288:	4013      	ands	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429e:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <__NVIC_SetPriorityGrouping+0x44>)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	60d3      	str	r3, [r2, #12]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b8:	4b04      	ldr	r3, [pc, #16]	; (80042cc <__NVIC_GetPriorityGrouping+0x18>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	f003 0307 	and.w	r3, r3, #7
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db0b      	blt.n	80042fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4906      	ldr	r1, [pc, #24]	; (8004304 <__NVIC_EnableIRQ+0x34>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2001      	movs	r0, #1
 80042f2:	fa00 f202 	lsl.w	r2, r0, r2
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	; (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	; 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	bf28      	it	cs
 800437a:	2304      	movcs	r3, #4
 800437c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3304      	adds	r3, #4
 8004382:	2b06      	cmp	r3, #6
 8004384:	d902      	bls.n	800438c <NVIC_EncodePriority+0x30>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3b03      	subs	r3, #3
 800438a:	e000      	b.n	800438e <NVIC_EncodePriority+0x32>
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43d9      	mvns	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	4313      	orrs	r3, r2
         );
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3724      	adds	r7, #36	; 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d0:	d301      	bcc.n	80043d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <SysTick_Config+0x40>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043de:	210f      	movs	r1, #15
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	f7ff ff90 	bl	8004308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <SysTick_Config+0x40>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <SysTick_Config+0x40>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ff2d 	bl	800426c <__NVIC_SetPriorityGrouping>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff ff42 	bl	80042b4 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff90 	bl	800435c <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff5f 	bl	8004308 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff35 	bl	80042d0 <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ffa2 	bl	80043c0 <SysTick_Config>
 800447c:	4603      	mov	r3, r0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e014      	b.n	80044c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	791b      	ldrb	r3, [r3, #4]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fe ff41 	bl	8003330 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e046      	b.n	800456c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	795b      	ldrb	r3, [r3, #5]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_DAC_Start+0x20>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e040      	b.n	800456c <HAL_DAC_Start+0xa2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2201      	movs	r2, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800451e:	2b3c      	cmp	r3, #60	; 0x3c
 8004520:	d11d      	bne.n	800455e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e014      	b.n	800455e <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	213c      	movs	r1, #60	; 0x3c
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	429a      	cmp	r2, r3
 800454c:	d107      	bne.n	800455e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0202 	orr.w	r2, r2, #2
 800455c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
	...

08004578 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e092      	b.n	80046b6 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	795b      	ldrb	r3, [r3, #5]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_DAC_Start_DMA+0x24>
 8004598:	2302      	movs	r3, #2
 800459a:	e08c      	b.n	80046b6 <HAL_DAC_Start_DMA+0x13e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2202      	movs	r2, #2
 80045a6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d129      	bne.n	8004602 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4a43      	ldr	r2, [pc, #268]	; (80046c0 <HAL_DAC_Start_DMA+0x148>)
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4a42      	ldr	r2, [pc, #264]	; (80046c4 <HAL_DAC_Start_DMA+0x14c>)
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4a41      	ldr	r2, [pc, #260]	; (80046c8 <HAL_DAC_Start_DMA+0x150>)
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_DAC_Start_DMA+0x6c>
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d005      	beq.n	80045ee <HAL_DAC_Start_DMA+0x76>
 80045e2:	e009      	b.n	80045f8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	613b      	str	r3, [r7, #16]
        break;
 80045ec:	e033      	b.n	8004656 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	613b      	str	r3, [r7, #16]
        break;
 80045f6:	e02e      	b.n	8004656 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3310      	adds	r3, #16
 80045fe:	613b      	str	r3, [r7, #16]
        break;
 8004600:	e029      	b.n	8004656 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	4a31      	ldr	r2, [pc, #196]	; (80046cc <HAL_DAC_Start_DMA+0x154>)
 8004608:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_DAC_Start_DMA+0x158>)
 8004610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <HAL_DAC_Start_DMA+0x15c>)
 8004618:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_DAC_Start_DMA+0xc0>
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d005      	beq.n	8004642 <HAL_DAC_Start_DMA+0xca>
 8004636:	e009      	b.n	800464c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3314      	adds	r3, #20
 800463e:	613b      	str	r3, [r7, #16]
        break;
 8004640:	e009      	b.n	8004656 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3318      	adds	r3, #24
 8004648:	613b      	str	r3, [r7, #16]
        break;
 800464a:	e004      	b.n	8004656 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	331c      	adds	r3, #28
 8004652:	613b      	str	r3, [r7, #16]
        break;
 8004654:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6898      	ldr	r0, [r3, #8]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	f000 f9e5 	bl	8004a34 <HAL_DMA_Start_IT>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]
 800466e:	e008      	b.n	8004682 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68d8      	ldr	r0, [r3, #12]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	f000 f9db 	bl	8004a34 <HAL_DMA_Start_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e005      	b.n	80046b4 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f043 0204 	orr.w	r2, r3, #4
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	08004839 	.word	0x08004839
 80046c4:	0800485b 	.word	0x0800485b
 80046c8:	08004877 	.word	0x08004877
 80046cc:	080048db 	.word	0x080048db
 80046d0:	080048fd 	.word	0x080048fd
 80046d4:	08004919 	.word	0x08004919

080046d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02e      	b.n	800474a <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43da      	mvns	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	400a      	ands	r2, r1
 8004708:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2201      	movs	r2, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43da      	mvns	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	400a      	ands	r2, r1
 8004724:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d105      	bne.n	8004738 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f9df 	bl	8004af4 <HAL_DMA_Abort>
 8004736:	e004      	b.n	8004742 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f9d9 	bl	8004af4 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_DAC_ConfigChannel+0x1c>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e042      	b.n	800482e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	795b      	ldrb	r3, [r3, #5]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_DAC_ConfigChannel+0x2c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e03c      	b.n	800482e <HAL_DAC_ConfigChannel+0xa6>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2202      	movs	r2, #2
 80047be:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	22c0      	movs	r2, #192	; 0xc0
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43da      	mvns	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	400a      	ands	r2, r1
 800481e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800482c:	7ffb      	ldrb	r3, [r7, #31]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff ff83 	bl	8004752 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	711a      	strb	r2, [r3, #4]
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff7b 	bl	8004764 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f043 0204 	orr.w	r2, r3, #4
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff ff70 	bl	8004776 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	711a      	strb	r2, [r3, #4]
}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff ffdb 	bl	80048a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	711a      	strb	r2, [r3, #4]
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff ffd3 	bl	80048b6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f043 0204 	orr.w	r2, r3, #4
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff ffc8 	bl	80048c8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	711a      	strb	r2, [r3, #4]
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e059      	b.n	8004a12 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_DMA_Init+0xd4>)
 8004966:	429a      	cmp	r2, r3
 8004968:	d80f      	bhi.n	800498a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_DMA_Init+0xd8>)
 8004972:	4413      	add	r3, r2
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <HAL_DMA_Init+0xdc>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	009a      	lsls	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a28      	ldr	r2, [pc, #160]	; (8004a28 <HAL_DMA_Init+0xe0>)
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c
 8004988:	e00e      	b.n	80049a8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_DMA_Init+0xe4>)
 8004992:	4413      	add	r3, r2
 8004994:	4a23      	ldr	r2, [pc, #140]	; (8004a24 <HAL_DMA_Init+0xdc>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	009a      	lsls	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_DMA_Init+0xe8>)
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40020407 	.word	0x40020407
 8004a20:	bffdfff8 	.word	0xbffdfff8
 8004a24:	cccccccd 	.word	0xcccccccd
 8004a28:	40020000 	.word	0x40020000
 8004a2c:	bffdfbf8 	.word	0xbffdfbf8
 8004a30:	40020400 	.word	0x40020400

08004a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_DMA_Start_IT+0x20>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e04b      	b.n	8004aec <HAL_DMA_Start_IT+0xb8>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d13a      	bne.n	8004ade <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 faa9 	bl	8004fe4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 020e 	orr.w	r2, r2, #14
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e00f      	b.n	8004acc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0204 	bic.w	r2, r2, #4
 8004aba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 020a 	orr.w	r2, r2, #10
 8004aca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e005      	b.n	8004aea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d008      	beq.n	8004b1e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e020      	b.n	8004b60 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 020e 	bic.w	r2, r2, #14
 8004b2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
	...

08004b6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	2204      	movs	r2, #4
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80f1 	beq.w	8004d78 <HAL_DMA_IRQHandler+0x20c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80eb 	beq.w	8004d78 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0204 	bic.w	r2, r2, #4
 8004bbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b5f      	ldr	r3, [pc, #380]	; (8004d44 <HAL_DMA_IRQHandler+0x1d8>)
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d958      	bls.n	8004c7e <HAL_DMA_IRQHandler+0x112>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5d      	ldr	r2, [pc, #372]	; (8004d48 <HAL_DMA_IRQHandler+0x1dc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d04f      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x10a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5c      	ldr	r2, [pc, #368]	; (8004d4c <HAL_DMA_IRQHandler+0x1e0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d048      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x106>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a5a      	ldr	r2, [pc, #360]	; (8004d50 <HAL_DMA_IRQHandler+0x1e4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d040      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x100>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a59      	ldr	r2, [pc, #356]	; (8004d54 <HAL_DMA_IRQHandler+0x1e8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d038      	beq.n	8004c66 <HAL_DMA_IRQHandler+0xfa>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a57      	ldr	r2, [pc, #348]	; (8004d58 <HAL_DMA_IRQHandler+0x1ec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d030      	beq.n	8004c60 <HAL_DMA_IRQHandler+0xf4>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a56      	ldr	r2, [pc, #344]	; (8004d5c <HAL_DMA_IRQHandler+0x1f0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d028      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xee>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4d      	ldr	r2, [pc, #308]	; (8004d44 <HAL_DMA_IRQHandler+0x1d8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d020      	beq.n	8004c54 <HAL_DMA_IRQHandler+0xe8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a52      	ldr	r2, [pc, #328]	; (8004d60 <HAL_DMA_IRQHandler+0x1f4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d019      	beq.n	8004c50 <HAL_DMA_IRQHandler+0xe4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a50      	ldr	r2, [pc, #320]	; (8004d64 <HAL_DMA_IRQHandler+0x1f8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d012      	beq.n	8004c4c <HAL_DMA_IRQHandler+0xe0>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a4f      	ldr	r2, [pc, #316]	; (8004d68 <HAL_DMA_IRQHandler+0x1fc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00a      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xda>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a4d      	ldr	r2, [pc, #308]	; (8004d6c <HAL_DMA_IRQHandler+0x200>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d102      	bne.n	8004c40 <HAL_DMA_IRQHandler+0xd4>
 8004c3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c3e:	e01b      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c44:	e018      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c4a:	e015      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	e013      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c50:	2304      	movs	r3, #4
 8004c52:	e011      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c58:	e00e      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c5e:	e00b      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c64:	e008      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c6a:	e005      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c70:	e002      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	e000      	b.n	8004c78 <HAL_DMA_IRQHandler+0x10c>
 8004c76:	2304      	movs	r3, #4
 8004c78:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <HAL_DMA_IRQHandler+0x204>)
 8004c7a:	6053      	str	r3, [r2, #4]
 8004c7c:	e057      	b.n	8004d2e <HAL_DMA_IRQHandler+0x1c2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a31      	ldr	r2, [pc, #196]	; (8004d48 <HAL_DMA_IRQHandler+0x1dc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04f      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x1bc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2f      	ldr	r2, [pc, #188]	; (8004d4c <HAL_DMA_IRQHandler+0x1e0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d048      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x1b8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a2e      	ldr	r2, [pc, #184]	; (8004d50 <HAL_DMA_IRQHandler+0x1e4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x1b2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	; (8004d54 <HAL_DMA_IRQHandler+0x1e8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d038      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x1ac>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_DMA_IRQHandler+0x1ec>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d030      	beq.n	8004d12 <HAL_DMA_IRQHandler+0x1a6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <HAL_DMA_IRQHandler+0x1f0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d028      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x1a0>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a21      	ldr	r2, [pc, #132]	; (8004d44 <HAL_DMA_IRQHandler+0x1d8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d020      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x19a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <HAL_DMA_IRQHandler+0x1f4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d019      	beq.n	8004d02 <HAL_DMA_IRQHandler+0x196>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_DMA_IRQHandler+0x1f8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d012      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x192>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a22      	ldr	r2, [pc, #136]	; (8004d68 <HAL_DMA_IRQHandler+0x1fc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x18c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <HAL_DMA_IRQHandler+0x200>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d102      	bne.n	8004cf2 <HAL_DMA_IRQHandler+0x186>
 8004cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cf0:	e01b      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004cf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cf6:	e018      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfc:	e015      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004cfe:	2340      	movs	r3, #64	; 0x40
 8004d00:	e013      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d02:	2304      	movs	r3, #4
 8004d04:	e011      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d0a:	e00e      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d10:	e00b      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d16:	e008      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d1c:	e005      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d22:	e002      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d24:	2340      	movs	r3, #64	; 0x40
 8004d26:	e000      	b.n	8004d2a <HAL_DMA_IRQHandler+0x1be>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <HAL_DMA_IRQHandler+0x208>)
 8004d2c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8136 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d40:	e130      	b.n	8004fa4 <HAL_DMA_IRQHandler+0x438>
 8004d42:	bf00      	nop
 8004d44:	40020080 	.word	0x40020080
 8004d48:	40020008 	.word	0x40020008
 8004d4c:	4002001c 	.word	0x4002001c
 8004d50:	40020030 	.word	0x40020030
 8004d54:	40020044 	.word	0x40020044
 8004d58:	40020058 	.word	0x40020058
 8004d5c:	4002006c 	.word	0x4002006c
 8004d60:	40020408 	.word	0x40020408
 8004d64:	4002041c 	.word	0x4002041c
 8004d68:	40020430 	.word	0x40020430
 8004d6c:	40020444 	.word	0x40020444
 8004d70:	40020400 	.word	0x40020400
 8004d74:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80dd 	beq.w	8004f44 <HAL_DMA_IRQHandler+0x3d8>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80d7 	beq.w	8004f44 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 020a 	bic.w	r2, r2, #10
 8004db2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <HAL_DMA_IRQHandler+0x444>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d958      	bls.n	8004e7a <HAL_DMA_IRQHandler+0x30e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a79      	ldr	r2, [pc, #484]	; (8004fb4 <HAL_DMA_IRQHandler+0x448>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d04f      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x306>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a78      	ldr	r2, [pc, #480]	; (8004fb8 <HAL_DMA_IRQHandler+0x44c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d048      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x302>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a76      	ldr	r2, [pc, #472]	; (8004fbc <HAL_DMA_IRQHandler+0x450>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d040      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x2fc>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a75      	ldr	r2, [pc, #468]	; (8004fc0 <HAL_DMA_IRQHandler+0x454>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d038      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x2f6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a73      	ldr	r2, [pc, #460]	; (8004fc4 <HAL_DMA_IRQHandler+0x458>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d030      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x2f0>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a72      	ldr	r2, [pc, #456]	; (8004fc8 <HAL_DMA_IRQHandler+0x45c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d028      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x2ea>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a69      	ldr	r2, [pc, #420]	; (8004fb0 <HAL_DMA_IRQHandler+0x444>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d020      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x2e4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6e      	ldr	r2, [pc, #440]	; (8004fcc <HAL_DMA_IRQHandler+0x460>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d019      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x2e0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6c      	ldr	r2, [pc, #432]	; (8004fd0 <HAL_DMA_IRQHandler+0x464>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d012      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x2dc>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6b      	ldr	r2, [pc, #428]	; (8004fd4 <HAL_DMA_IRQHandler+0x468>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00a      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2d6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a69      	ldr	r2, [pc, #420]	; (8004fd8 <HAL_DMA_IRQHandler+0x46c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d102      	bne.n	8004e3c <HAL_DMA_IRQHandler+0x2d0>
 8004e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e3a:	e01b      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e40:	e018      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e46:	e015      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e013      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e011      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e54:	e00e      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e5a:	e00b      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e60:	e008      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e66:	e005      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e6c:	e002      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e6e:	2320      	movs	r3, #32
 8004e70:	e000      	b.n	8004e74 <HAL_DMA_IRQHandler+0x308>
 8004e72:	2302      	movs	r3, #2
 8004e74:	4a59      	ldr	r2, [pc, #356]	; (8004fdc <HAL_DMA_IRQHandler+0x470>)
 8004e76:	6053      	str	r3, [r2, #4]
 8004e78:	e057      	b.n	8004f2a <HAL_DMA_IRQHandler+0x3be>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4d      	ldr	r2, [pc, #308]	; (8004fb4 <HAL_DMA_IRQHandler+0x448>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d04f      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x3b8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a4b      	ldr	r2, [pc, #300]	; (8004fb8 <HAL_DMA_IRQHandler+0x44c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d048      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x3b4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4a      	ldr	r2, [pc, #296]	; (8004fbc <HAL_DMA_IRQHandler+0x450>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d040      	beq.n	8004f1a <HAL_DMA_IRQHandler+0x3ae>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a48      	ldr	r2, [pc, #288]	; (8004fc0 <HAL_DMA_IRQHandler+0x454>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d038      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x3a8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a47      	ldr	r2, [pc, #284]	; (8004fc4 <HAL_DMA_IRQHandler+0x458>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d030      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x3a2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a45      	ldr	r2, [pc, #276]	; (8004fc8 <HAL_DMA_IRQHandler+0x45c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d028      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x39c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a3d      	ldr	r2, [pc, #244]	; (8004fb0 <HAL_DMA_IRQHandler+0x444>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d020      	beq.n	8004f02 <HAL_DMA_IRQHandler+0x396>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a41      	ldr	r2, [pc, #260]	; (8004fcc <HAL_DMA_IRQHandler+0x460>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d019      	beq.n	8004efe <HAL_DMA_IRQHandler+0x392>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <HAL_DMA_IRQHandler+0x464>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d012      	beq.n	8004efa <HAL_DMA_IRQHandler+0x38e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3e      	ldr	r2, [pc, #248]	; (8004fd4 <HAL_DMA_IRQHandler+0x468>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00a      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x388>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a3d      	ldr	r2, [pc, #244]	; (8004fd8 <HAL_DMA_IRQHandler+0x46c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d102      	bne.n	8004eee <HAL_DMA_IRQHandler+0x382>
 8004ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eec:	e01b      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	e018      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef8:	e015      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004efa:	2320      	movs	r3, #32
 8004efc:	e013      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e011      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f06:	e00e      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f0c:	e00b      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f12:	e008      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f18:	e005      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f1e:	e002      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f20:	2320      	movs	r3, #32
 8004f22:	e000      	b.n	8004f26 <HAL_DMA_IRQHandler+0x3ba>
 8004f24:	2302      	movs	r3, #2
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <HAL_DMA_IRQHandler+0x474>)
 8004f28:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d034      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f42:	e02f      	b.n	8004fa4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2208      	movs	r2, #8
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d028      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x43a>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d023      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 020e 	bic.w	r2, r2, #14
 8004f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f76:	2101      	movs	r1, #1
 8004f78:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
    }
  }
  return;
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
}
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40020080 	.word	0x40020080
 8004fb4:	40020008 	.word	0x40020008
 8004fb8:	4002001c 	.word	0x4002001c
 8004fbc:	40020030 	.word	0x40020030
 8004fc0:	40020044 	.word	0x40020044
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	4002006c 	.word	0x4002006c
 8004fcc:	40020408 	.word	0x40020408
 8004fd0:	4002041c 	.word	0x4002041c
 8004fd4:	40020430 	.word	0x40020430
 8004fd8:	40020444 	.word	0x40020444
 8004fdc:	40020400 	.word	0x40020400
 8004fe0:	40020000 	.word	0x40020000

08004fe4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8005000:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b10      	cmp	r3, #16
 8005010:	d108      	bne.n	8005024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005022:	e007      	b.n	8005034 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
	...

08005040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005040:	b480      	push	{r7}
 8005042:	b08b      	sub	sp, #44	; 0x2c
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005052:	e179      	b.n	8005348 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005054:	2201      	movs	r2, #1
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	f040 8168 	bne.w	8005342 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4a96      	ldr	r2, [pc, #600]	; (80052d0 <HAL_GPIO_Init+0x290>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d05e      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 800507c:	4a94      	ldr	r2, [pc, #592]	; (80052d0 <HAL_GPIO_Init+0x290>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d875      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 8005082:	4a94      	ldr	r2, [pc, #592]	; (80052d4 <HAL_GPIO_Init+0x294>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d058      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 8005088:	4a92      	ldr	r2, [pc, #584]	; (80052d4 <HAL_GPIO_Init+0x294>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d86f      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 800508e:	4a92      	ldr	r2, [pc, #584]	; (80052d8 <HAL_GPIO_Init+0x298>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d052      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 8005094:	4a90      	ldr	r2, [pc, #576]	; (80052d8 <HAL_GPIO_Init+0x298>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d869      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 800509a:	4a90      	ldr	r2, [pc, #576]	; (80052dc <HAL_GPIO_Init+0x29c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04c      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 80050a0:	4a8e      	ldr	r2, [pc, #568]	; (80052dc <HAL_GPIO_Init+0x29c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d863      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 80050a6:	4a8e      	ldr	r2, [pc, #568]	; (80052e0 <HAL_GPIO_Init+0x2a0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d046      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 80050ac:	4a8c      	ldr	r2, [pc, #560]	; (80052e0 <HAL_GPIO_Init+0x2a0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d85d      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 80050b2:	2b12      	cmp	r3, #18
 80050b4:	d82a      	bhi.n	800510c <HAL_GPIO_Init+0xcc>
 80050b6:	2b12      	cmp	r3, #18
 80050b8:	d859      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_GPIO_Init+0x80>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	0800513b 	.word	0x0800513b
 80050c4:	08005115 	.word	0x08005115
 80050c8:	08005127 	.word	0x08005127
 80050cc:	08005169 	.word	0x08005169
 80050d0:	0800516f 	.word	0x0800516f
 80050d4:	0800516f 	.word	0x0800516f
 80050d8:	0800516f 	.word	0x0800516f
 80050dc:	0800516f 	.word	0x0800516f
 80050e0:	0800516f 	.word	0x0800516f
 80050e4:	0800516f 	.word	0x0800516f
 80050e8:	0800516f 	.word	0x0800516f
 80050ec:	0800516f 	.word	0x0800516f
 80050f0:	0800516f 	.word	0x0800516f
 80050f4:	0800516f 	.word	0x0800516f
 80050f8:	0800516f 	.word	0x0800516f
 80050fc:	0800516f 	.word	0x0800516f
 8005100:	0800516f 	.word	0x0800516f
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005131 	.word	0x08005131
 800510c:	4a75      	ldr	r2, [pc, #468]	; (80052e4 <HAL_GPIO_Init+0x2a4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005112:	e02c      	b.n	800516e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	623b      	str	r3, [r7, #32]
          break;
 800511a:	e029      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	623b      	str	r3, [r7, #32]
          break;
 8005124:	e024      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	3308      	adds	r3, #8
 800512c:	623b      	str	r3, [r7, #32]
          break;
 800512e:	e01f      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	330c      	adds	r3, #12
 8005136:	623b      	str	r3, [r7, #32]
          break;
 8005138:	e01a      	b.n	8005170 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005142:	2304      	movs	r3, #4
 8005144:	623b      	str	r3, [r7, #32]
          break;
 8005146:	e013      	b.n	8005170 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005150:	2308      	movs	r3, #8
 8005152:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	611a      	str	r2, [r3, #16]
          break;
 800515a:	e009      	b.n	8005170 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800515c:	2308      	movs	r3, #8
 800515e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	615a      	str	r2, [r3, #20]
          break;
 8005166:	e003      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
          break;
 800516c:	e000      	b.n	8005170 <HAL_GPIO_Init+0x130>
          break;
 800516e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2bff      	cmp	r3, #255	; 0xff
 8005174:	d801      	bhi.n	800517a <HAL_GPIO_Init+0x13a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	e001      	b.n	800517e <HAL_GPIO_Init+0x13e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	2bff      	cmp	r3, #255	; 0xff
 8005184:	d802      	bhi.n	800518c <HAL_GPIO_Init+0x14c>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	e002      	b.n	8005192 <HAL_GPIO_Init+0x152>
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	3b08      	subs	r3, #8
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	210f      	movs	r1, #15
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	431a      	orrs	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80c1 	beq.w	8005342 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80051c0:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <HAL_GPIO_Init+0x2a8>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	4a48      	ldr	r2, [pc, #288]	; (80052e8 <HAL_GPIO_Init+0x2a8>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6193      	str	r3, [r2, #24]
 80051cc:	4b46      	ldr	r3, [pc, #280]	; (80052e8 <HAL_GPIO_Init+0x2a8>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80051d8:	4a44      	ldr	r2, [pc, #272]	; (80052ec <HAL_GPIO_Init+0x2ac>)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	3302      	adds	r3, #2
 80051e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	220f      	movs	r2, #15
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <HAL_GPIO_Init+0x2b0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01f      	beq.n	8005244 <HAL_GPIO_Init+0x204>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <HAL_GPIO_Init+0x2b4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d019      	beq.n	8005240 <HAL_GPIO_Init+0x200>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_GPIO_Init+0x2b8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_GPIO_Init+0x1fc>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a39      	ldr	r2, [pc, #228]	; (80052fc <HAL_GPIO_Init+0x2bc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00d      	beq.n	8005238 <HAL_GPIO_Init+0x1f8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a38      	ldr	r2, [pc, #224]	; (8005300 <HAL_GPIO_Init+0x2c0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <HAL_GPIO_Init+0x1f4>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a37      	ldr	r2, [pc, #220]	; (8005304 <HAL_GPIO_Init+0x2c4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d101      	bne.n	8005230 <HAL_GPIO_Init+0x1f0>
 800522c:	2305      	movs	r3, #5
 800522e:	e00a      	b.n	8005246 <HAL_GPIO_Init+0x206>
 8005230:	2306      	movs	r3, #6
 8005232:	e008      	b.n	8005246 <HAL_GPIO_Init+0x206>
 8005234:	2304      	movs	r3, #4
 8005236:	e006      	b.n	8005246 <HAL_GPIO_Init+0x206>
 8005238:	2303      	movs	r3, #3
 800523a:	e004      	b.n	8005246 <HAL_GPIO_Init+0x206>
 800523c:	2302      	movs	r3, #2
 800523e:	e002      	b.n	8005246 <HAL_GPIO_Init+0x206>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_GPIO_Init+0x206>
 8005244:	2300      	movs	r3, #0
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	f002 0203 	and.w	r2, r2, #3
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	4093      	lsls	r3, r2
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005256:	4925      	ldr	r1, [pc, #148]	; (80052ec <HAL_GPIO_Init+0x2ac>)
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005270:	4b25      	ldr	r3, [pc, #148]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	4924      	ldr	r1, [pc, #144]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]
 800527c:	e006      	b.n	800528c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	43db      	mvns	r3, r3
 8005286:	4920      	ldr	r1, [pc, #128]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 8005288:	4013      	ands	r3, r2
 800528a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	491a      	ldr	r1, [pc, #104]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60cb      	str	r3, [r1, #12]
 80052a4:	e006      	b.n	80052b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	4916      	ldr	r1, [pc, #88]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d025      	beq.n	800530c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052c0:	4b11      	ldr	r3, [pc, #68]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4910      	ldr	r1, [pc, #64]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]
 80052cc:	e025      	b.n	800531a <HAL_GPIO_Init+0x2da>
 80052ce:	bf00      	nop
 80052d0:	10320000 	.word	0x10320000
 80052d4:	10310000 	.word	0x10310000
 80052d8:	10220000 	.word	0x10220000
 80052dc:	10210000 	.word	0x10210000
 80052e0:	10120000 	.word	0x10120000
 80052e4:	10110000 	.word	0x10110000
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40010800 	.word	0x40010800
 80052f4:	40010c00 	.word	0x40010c00
 80052f8:	40011000 	.word	0x40011000
 80052fc:	40011400 	.word	0x40011400
 8005300:	40011800 	.word	0x40011800
 8005304:	40011c00 	.word	0x40011c00
 8005308:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800530c:	4b15      	ldr	r3, [pc, #84]	; (8005364 <HAL_GPIO_Init+0x324>)
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	43db      	mvns	r3, r3
 8005314:	4913      	ldr	r1, [pc, #76]	; (8005364 <HAL_GPIO_Init+0x324>)
 8005316:	4013      	ands	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_GPIO_Init+0x324>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	490e      	ldr	r1, [pc, #56]	; (8005364 <HAL_GPIO_Init+0x324>)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
 8005332:	e006      	b.n	8005342 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_GPIO_Init+0x324>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	43db      	mvns	r3, r3
 800533c:	4909      	ldr	r1, [pc, #36]	; (8005364 <HAL_GPIO_Init+0x324>)
 800533e:	4013      	ands	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	3301      	adds	r3, #1
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f47f ae7e 	bne.w	8005054 <HAL_GPIO_Init+0x14>
  }
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	372c      	adds	r7, #44	; 0x2c
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	40010400 	.word	0x40010400

08005368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	887b      	ldrh	r3, [r7, #2]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e001      	b.n	800538a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	807b      	strh	r3, [r7, #2]
 80053a2:	4613      	mov	r3, r2
 80053a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053a6:	787b      	ldrb	r3, [r7, #1]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ac:	887a      	ldrh	r2, [r7, #2]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80053b2:	e003      	b.n	80053bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	041a      	lsls	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053de:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fd fa84 	bl	80028f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40010400 	.word	0x40010400

080053f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e12b      	b.n	8005662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fe f81c 	bl	800345c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800544a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800545a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800545c:	f002 fa32 	bl	80078c4 <HAL_RCC_GetPCLK1Freq>
 8005460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4a81      	ldr	r2, [pc, #516]	; (800566c <HAL_I2C_Init+0x274>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d807      	bhi.n	800547c <HAL_I2C_Init+0x84>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a80      	ldr	r2, [pc, #512]	; (8005670 <HAL_I2C_Init+0x278>)
 8005470:	4293      	cmp	r3, r2
 8005472:	bf94      	ite	ls
 8005474:	2301      	movls	r3, #1
 8005476:	2300      	movhi	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e006      	b.n	800548a <HAL_I2C_Init+0x92>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a7d      	ldr	r2, [pc, #500]	; (8005674 <HAL_I2C_Init+0x27c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	bf94      	ite	ls
 8005484:	2301      	movls	r3, #1
 8005486:	2300      	movhi	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0e7      	b.n	8005662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a78      	ldr	r2, [pc, #480]	; (8005678 <HAL_I2C_Init+0x280>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0c9b      	lsrs	r3, r3, #18
 800549c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a6a      	ldr	r2, [pc, #424]	; (800566c <HAL_I2C_Init+0x274>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <HAL_I2C_Init+0xd4>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3301      	adds	r3, #1
 80054ca:	e009      	b.n	80054e0 <HAL_I2C_Init+0xe8>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	4a69      	ldr	r2, [pc, #420]	; (800567c <HAL_I2C_Init+0x284>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	3301      	adds	r3, #1
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	495c      	ldr	r1, [pc, #368]	; (800566c <HAL_I2C_Init+0x274>)
 80054fc:	428b      	cmp	r3, r1
 80054fe:	d819      	bhi.n	8005534 <HAL_I2C_Init+0x13c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1e59      	subs	r1, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fbb1 f3f3 	udiv	r3, r1, r3
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005514:	400b      	ands	r3, r1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_I2C_Init+0x138>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1e59      	subs	r1, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fbb1 f3f3 	udiv	r3, r1, r3
 8005528:	3301      	adds	r3, #1
 800552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552e:	e051      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 8005530:	2304      	movs	r3, #4
 8005532:	e04f      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d111      	bne.n	8005560 <HAL_I2C_Init+0x168>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e58      	subs	r0, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	440b      	add	r3, r1
 800554a:	fbb0 f3f3 	udiv	r3, r0, r3
 800554e:	3301      	adds	r3, #1
 8005550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e012      	b.n	8005586 <HAL_I2C_Init+0x18e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1e58      	subs	r0, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	0099      	lsls	r1, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	fbb0 f3f3 	udiv	r3, r0, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Init+0x196>
 800558a:	2301      	movs	r3, #1
 800558c:	e022      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10e      	bne.n	80055b4 <HAL_I2C_Init+0x1bc>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1e58      	subs	r0, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b2:	e00f      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1e58      	subs	r0, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	0099      	lsls	r1, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	6809      	ldr	r1, [r1, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6911      	ldr	r1, [r2, #16]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68d2      	ldr	r2, [r2, #12]
 800560e:	4311      	orrs	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	430b      	orrs	r3, r1
 8005616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	000186a0 	.word	0x000186a0
 8005670:	001e847f 	.word	0x001e847f
 8005674:	003d08ff 	.word	0x003d08ff
 8005678:	431bde83 	.word	0x431bde83
 800567c:	10624dd3 	.word	0x10624dd3

08005680 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005682:	b08b      	sub	sp, #44	; 0x2c
 8005684:	af06      	add	r7, sp, #24
 8005686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0f1      	b.n	8005876 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f00b ff10 	bl	80114cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2203      	movs	r2, #3
 80056b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f005 f8f3 	bl	800a8a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	687e      	ldr	r6, [r7, #4]
 80056c6:	466d      	mov	r5, sp
 80056c8:	f106 0410 	add.w	r4, r6, #16
 80056cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	1d33      	adds	r3, r6, #4
 80056d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d8:	6838      	ldr	r0, [r7, #0]
 80056da:	f005 f8bd 	bl	800a858 <USB_CoreInit>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0c2      	b.n	8005876 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 f8ee 	bl	800a8d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e040      	b.n	8005784 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	3301      	adds	r3, #1
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	440b      	add	r3, r1
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	440b      	add	r3, r1
 800573c:	3303      	adds	r3, #3
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005742:	7bfa      	ldrb	r2, [r7, #15]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	440b      	add	r3, r1
 8005750:	3338      	adds	r3, #56	; 0x38
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	440b      	add	r3, r1
 8005764:	333c      	adds	r3, #60	; 0x3c
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	440b      	add	r3, r1
 8005778:	3340      	adds	r3, #64	; 0x40
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	3301      	adds	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	7bfa      	ldrb	r2, [r7, #15]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d3b9      	bcc.n	8005702 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e044      	b.n	800581e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	440b      	add	r3, r1
 80057b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	440b      	add	r3, r1
 80057ce:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	440b      	add	r3, r1
 80057e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	440b      	add	r3, r1
 80057fa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	440b      	add	r3, r1
 8005810:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	3301      	adds	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
 800581e:	7bfa      	ldrb	r2, [r7, #15]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d3b5      	bcc.n	8005794 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	687e      	ldr	r6, [r7, #4]
 8005830:	466d      	mov	r5, sp
 8005832:	f106 0410 	add.w	r4, r6, #16
 8005836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	1d33      	adds	r3, r6, #4
 8005840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005842:	6838      	ldr	r0, [r7, #0]
 8005844:	f005 f854 	bl	800a8f0 <USB_DevInit>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e00d      	b.n	8005876 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f007 fad5 	bl	800ce1e <USB_DevDisconnect>

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800587e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_PCD_Start+0x16>
 8005890:	2302      	movs	r3, #2
 8005892:	e016      	b.n	80058c2 <HAL_PCD_Start+0x44>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f004 ffe9 	bl	800a878 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80058a6:	2101      	movs	r1, #1
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f00c f85e 	bl	801196a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f007 faa9 	bl	800ce0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f007 faab 	bl	800ce32 <USB_ReadInterrupts>
 80058dc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb04 	bl	8005ef6 <PCD_EP_ISR_Handler>

    return;
 80058ee:	e119      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d013      	beq.n	8005922 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590c:	b292      	uxth	r2, r2
 800590e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f00b fe55 	bl	80115c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f905 	bl	8005b2a <HAL_PCD_SetAddress>

    return;
 8005920:	e100      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800593e:	b292      	uxth	r2, r2
 8005940:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005944:	e0ee      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00c      	beq.n	800596a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005958:	b29a      	uxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005962:	b292      	uxth	r2, r2
 8005964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005968:	e0dc      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d027      	beq.n	80059c4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	b292      	uxth	r2, r2
 8005988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0208 	bic.w	r2, r2, #8
 800599e:	b292      	uxth	r2, r2
 80059a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f00b fe45 	bl	8011634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059bc:	b292      	uxth	r2, r2
 80059be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80059c2:	e0af      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8083 	beq.w	8005ad6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e010      	b.n	80059f8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	7ffb      	ldrb	r3, [r7, #31]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	8812      	ldrh	r2, [r2, #0]
 80059e6:	b292      	uxth	r2, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	3320      	adds	r3, #32
 80059ec:	443b      	add	r3, r7
 80059ee:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80059f2:	7ffb      	ldrb	r3, [r7, #31]
 80059f4:	3301      	adds	r3, #1
 80059f6:	77fb      	strb	r3, [r7, #31]
 80059f8:	7ffb      	ldrb	r3, [r7, #31]
 80059fa:	2b07      	cmp	r3, #7
 80059fc:	d9eb      	bls.n	80059d6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	b292      	uxth	r2, r2
 8005a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	b292      	uxth	r2, r2
 8005a2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005a2e:	bf00      	nop
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f6      	beq.n	8005a30 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a54:	b292      	uxth	r2, r2
 8005a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	e00f      	b.n	8005a80 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	4611      	mov	r1, r2
 8005a68:	7ffa      	ldrb	r2, [r7, #31]
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	440a      	add	r2, r1
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	3320      	adds	r3, #32
 8005a72:	443b      	add	r3, r7
 8005a74:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a78:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	7ffb      	ldrb	r3, [r7, #31]
 8005a82:	2b07      	cmp	r3, #7
 8005a84:	d9ec      	bls.n	8005a60 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0208 	orr.w	r2, r2, #8
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab0:	b292      	uxth	r2, r2
 8005ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0204 	orr.w	r2, r2, #4
 8005ac8:	b292      	uxth	r2, r2
 8005aca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f00b fd96 	bl	8011600 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ad4:	e026      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00f      	beq.n	8005b00 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005af2:	b292      	uxth	r2, r2
 8005af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f00b fd54 	bl	80115a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005afe:	e011      	b.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005b22:	bf00      	nop
  }
}
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_PCD_SetAddress+0x1a>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e013      	b.n	8005b6c <HAL_PCD_SetAddress+0x42>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	78fa      	ldrb	r2, [r7, #3]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f007 f941 	bl	800cde4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	70fb      	strb	r3, [r7, #3]
 8005b86:	460b      	mov	r3, r1
 8005b88:	803b      	strh	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da0e      	bge.n	8005bb8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	705a      	strb	r2, [r3, #1]
 8005bb6:	e00e      	b.n	8005bd6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	f003 0207 	and.w	r2, r3, #7
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005be2:	883a      	ldrh	r2, [r7, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	78ba      	ldrb	r2, [r7, #2]
 8005bec:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bee:	78bb      	ldrb	r3, [r7, #2]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d102      	bne.n	8005bfa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_PCD_EP_Open+0x94>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e00e      	b.n	8005c26 <HAL_PCD_EP_Open+0xb2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f004 fe8a 	bl	800a930 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005c24:	7afb      	ldrb	r3, [r7, #11]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da0e      	bge.n	8005c60 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	705a      	strb	r2, [r3, #1]
 8005c5e:	e00e      	b.n	8005c7e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	f003 0207 	and.w	r2, r3, #7
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_PCD_EP_Close+0x6a>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e00e      	b.n	8005cb6 <HAL_PCD_EP_Close+0x88>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68f9      	ldr	r1, [r7, #12]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f005 fa02 	bl	800b0b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	f003 0207 	and.w	r2, r3, #7
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6979      	ldr	r1, [r7, #20]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f005 fbb9 	bl	800b488 <USB_EPStartXfer>

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f005 fb82 	bl	800b488 <USB_EPStartXfer>

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	f003 0207 	and.w	r2, r3, #7
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d901      	bls.n	8005dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e04c      	b.n	8005e46 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	da0e      	bge.n	8005dd2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	705a      	strb	r2, [r3, #1]
 8005dd0:	e00c      	b.n	8005dec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_PCD_EP_SetStall+0x7e>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e01c      	b.n	8005e46 <HAL_PCD_EP_SetStall+0xb8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68f9      	ldr	r1, [r7, #12]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f006 fee5 	bl	800cbea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f007 f80a 	bl	800ce50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d901      	bls.n	8005e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e040      	b.n	8005eee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da0e      	bge.n	8005e92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	705a      	strb	r2, [r3, #1]
 8005e90:	e00e      	b.n	8005eb0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	f003 0207 	and.w	r2, r3, #7
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_PCD_EP_ClrStall+0x82>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e00e      	b.n	8005eee <HAL_PCD_EP_ClrStall+0xa0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68f9      	ldr	r1, [r7, #12]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f006 fed3 	bl	800cc8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b096      	sub	sp, #88	; 0x58
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005efe:	e3bf      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005f1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 8179 	bne.w	8006216 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d152      	bne.n	8005fd6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f40:	81fb      	strh	r3, [r7, #14]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	89fb      	ldrh	r3, [r7, #14]
 8005f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3328      	adds	r3, #40	; 0x28
 8005f58:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3302      	adds	r3, #2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	441a      	add	r2, r3
 8005f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f92:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005f94:	2100      	movs	r1, #0
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f00b faeb 	bl	8011572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 836b 	beq.w	8006680 <PCD_EP_ISR_Handler+0x78a>
 8005faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 8366 	bne.w	8006680 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	b292      	uxth	r2, r2
 8005fc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005fd4:	e354      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fdc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005fe8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d034      	beq.n	800605e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4413      	add	r3, r2
 8006008:	3306      	adds	r3, #6
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800602a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800602e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006030:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006032:	b29b      	uxth	r3, r3
 8006034:	f006 ff5c 	bl	800cef0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29a      	uxth	r2, r3
 8006040:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006044:	4013      	ands	r3, r2
 8006046:	823b      	strh	r3, [r7, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	8a3a      	ldrh	r2, [r7, #16]
 800604e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006052:	b292      	uxth	r2, r2
 8006054:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f00b fa5e 	bl	8011518 <HAL_PCD_SetupStageCallback>
 800605c:	e310      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800605e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006062:	2b00      	cmp	r3, #0
 8006064:	f280 830c 	bge.w	8006680 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29a      	uxth	r2, r3
 8006070:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006074:	4013      	ands	r3, r2
 8006076:	83fb      	strh	r3, [r7, #30]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	8bfa      	ldrh	r2, [r7, #30]
 800607e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006082:	b292      	uxth	r2, r2
 8006084:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	3306      	adds	r3, #6
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80060b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d019      	beq.n	80060ee <PCD_EP_ISR_Handler+0x1f8>
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d015      	beq.n	80060ee <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060c8:	6959      	ldr	r1, [r3, #20]
 80060ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80060ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f006 ff0c 	bl	800cef0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80060d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	441a      	add	r2, r3
 80060e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80060e6:	2100      	movs	r1, #0
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f00b fa27 	bl	801153c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80060f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 82bd 	bne.w	8006680 <PCD_EP_ISR_Handler+0x78a>
 8006106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800610a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800610e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006112:	f000 82b5 	beq.w	8006680 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	4413      	add	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006140:	b29a      	uxth	r2, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b3e      	cmp	r3, #62	; 0x3e
 800614c:	d91d      	bls.n	800618a <PCD_EP_ISR_Handler+0x294>
 800614e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	647b      	str	r3, [r7, #68]	; 0x44
 8006156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <PCD_EP_ISR_Handler+0x272>
 8006162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006164:	3b01      	subs	r3, #1
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006170:	b29b      	uxth	r3, r3
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	b29b      	uxth	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006182:	b29a      	uxth	r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e026      	b.n	80061d8 <PCD_EP_ISR_Handler+0x2e2>
 800618a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <PCD_EP_ISR_Handler+0x2b2>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e017      	b.n	80061d8 <PCD_EP_ISR_Handler+0x2e2>
 80061a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	647b      	str	r3, [r7, #68]	; 0x44
 80061b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <PCD_EP_ISR_Handler+0x2cc>
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	3301      	adds	r3, #1
 80061c0:	647b      	str	r3, [r7, #68]	; 0x44
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	029b      	lsls	r3, r3, #10
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	827b      	strh	r3, [r7, #18]
 80061ea:	8a7b      	ldrh	r3, [r7, #18]
 80061ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061f0:	827b      	strh	r3, [r7, #18]
 80061f2:	8a7b      	ldrh	r3, [r7, #18]
 80061f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061f8:	827b      	strh	r3, [r7, #18]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	8a7b      	ldrh	r3, [r7, #18]
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]
 8006214:	e234      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800622a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800622e:	2b00      	cmp	r3, #0
 8006230:	f280 80fc 	bge.w	800642c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29a      	uxth	r2, r3
 8006246:	f640 738f 	movw	r3, #3983	; 0xf8f
 800624a:	4013      	ands	r3, r2
 800624c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006266:	b292      	uxth	r2, r2
 8006268:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800626a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006282:	7b1b      	ldrb	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d125      	bne.n	80062d4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4413      	add	r3, r2
 800629c:	3306      	adds	r3, #6
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80062b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8092 	beq.w	80063e2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c4:	6959      	ldr	r1, [r3, #20]
 80062c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c8:	88da      	ldrh	r2, [r3, #6]
 80062ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80062ce:	f006 fe0f 	bl	800cef0 <USB_ReadPMA>
 80062d2:	e086      	b.n	80063e2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80062d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d6:	78db      	ldrb	r3, [r3, #3]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d10a      	bne.n	80062f2 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80062dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80062e0:	461a      	mov	r2, r3
 80062e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f9d9 	bl	800669c <HAL_PCD_EP_DB_Receive>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80062f0:	e077      	b.n	80063e2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006332:	b29b      	uxth	r3, r3
 8006334:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d024      	beq.n	800639a <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4413      	add	r3, r2
 8006364:	3302      	adds	r3, #2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006378:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800637c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006380:	2b00      	cmp	r3, #0
 8006382:	d02e      	beq.n	80063e2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800638a:	6959      	ldr	r1, [r3, #20]
 800638c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800638e:	891a      	ldrh	r2, [r3, #8]
 8006390:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006394:	f006 fdac 	bl	800cef0 <USB_ReadPMA>
 8006398:	e023      	b.n	80063e2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4413      	add	r3, r2
 80063ae:	3306      	adds	r3, #6
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80063c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d4:	6959      	ldr	r1, [r3, #20]
 80063d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d8:	895a      	ldrh	r2, [r3, #10]
 80063da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063de:	f006 fd87 	bl	800cef0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80063e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063ea:	441a      	add	r2, r3
 80063ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80063f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80063f8:	441a      	add	r2, r3
 80063fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80063fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <PCD_EP_ISR_Handler+0x51c>
 8006406:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800640a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	d206      	bcs.n	8006420 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f00b f88f 	bl	801153c <HAL_PCD_DataOutStageCallback>
 800641e:	e005      	b.n	800642c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006426:	4618      	mov	r0, r3
 8006428:	f005 f82e 	bl	800b488 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800642c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8123 	beq.w	8006680 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800643a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4413      	add	r3, r2
 800644c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800647e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800648a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	2b01      	cmp	r3, #1
 8006490:	f040 80a2 	bne.w	80065d8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8006494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006496:	2200      	movs	r2, #0
 8006498:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800649a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800649c:	7b1b      	ldrb	r3, [r3, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8093 	beq.w	80065ca <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80064a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d046      	beq.n	800653e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d126      	bne.n	8006506 <PCD_EP_ISR_Handler+0x610>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	4413      	add	r3, r2
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	011a      	lsls	r2, r3, #4
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	4413      	add	r3, r2
 80064da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064de:	623b      	str	r3, [r7, #32]
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e061      	b.n	80065ca <PCD_EP_ISR_Handler+0x6d4>
 8006506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d15d      	bne.n	80065ca <PCD_EP_ISR_Handler+0x6d4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651c:	b29b      	uxth	r3, r3
 800651e:	461a      	mov	r2, r3
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	4413      	add	r3, r2
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	011a      	lsls	r2, r3, #4
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	4413      	add	r3, r2
 8006530:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2200      	movs	r2, #0
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e045      	b.n	80065ca <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d126      	bne.n	800659a <PCD_EP_ISR_Handler+0x6a4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655a:	b29b      	uxth	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006560:	4413      	add	r3, r2
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	4413      	add	r3, r2
 800656e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657e:	b29a      	uxth	r2, r3
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006592:	b29a      	uxth	r2, r3
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e017      	b.n	80065ca <PCD_EP_ISR_Handler+0x6d4>
 800659a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d113      	bne.n	80065ca <PCD_EP_ISR_Handler+0x6d4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b0:	4413      	add	r3, r2
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065bc:	4413      	add	r3, r2
 80065be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2200      	movs	r2, #0
 80065c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f00a ffce 	bl	8011572 <HAL_PCD_DataInStageCallback>
 80065d6:	e053      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80065d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d146      	bne.n	8006672 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	3302      	adds	r3, #2
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800660c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006618:	429a      	cmp	r2, r3
 800661a:	d907      	bls.n	800662c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800661c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006624:	1ad2      	subs	r2, r2, r3
 8006626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006628:	619a      	str	r2, [r3, #24]
 800662a:	e002      	b.n	8006632 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662e:	2200      	movs	r2, #0
 8006630:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800663a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f00a ff96 	bl	8011572 <HAL_PCD_DataInStageCallback>
 8006646:	e01b      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800664a:	695a      	ldr	r2, [r3, #20]
 800664c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006650:	441a      	add	r2, r3
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800665e:	441a      	add	r2, r3
 8006660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006662:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800666a:	4618      	mov	r0, r3
 800666c:	f004 ff0c 	bl	800b488 <USB_EPStartXfer>
 8006670:	e006      	b.n	8006680 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006672:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006676:	461a      	mov	r2, r3
 8006678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f91b 	bl	80068b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006688:	b29b      	uxth	r3, r3
 800668a:	b21b      	sxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	f6ff ac37 	blt.w	8005f00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3758      	adds	r7, #88	; 0x58
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d07e      	beq.n	80067b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	3302      	adds	r3, #2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	8b7b      	ldrh	r3, [r7, #26]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d306      	bcc.n	80066f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	8b7b      	ldrh	r3, [r7, #26]
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	619a      	str	r2, [r3, #24]
 80066f4:	e002      	b.n	80066fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d123      	bne.n	800674c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	833b      	strh	r3, [r7, #24]
 8006720:	8b3b      	ldrh	r3, [r7, #24]
 8006722:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006726:	833b      	strh	r3, [r7, #24]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	8b3b      	ldrh	r3, [r7, #24]
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01f      	beq.n	8006796 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	82fb      	strh	r3, [r7, #22]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	8afb      	ldrh	r3, [r7, #22]
 8006782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006792:	b29b      	uxth	r3, r3
 8006794:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006796:	8b7b      	ldrh	r3, [r7, #26]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8087 	beq.w	80068ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6959      	ldr	r1, [r3, #20]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	891a      	ldrh	r2, [r3, #8]
 80067aa:	8b7b      	ldrh	r3, [r7, #26]
 80067ac:	f006 fba0 	bl	800cef0 <USB_ReadPMA>
 80067b0:	e07c      	b.n	80068ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4413      	add	r3, r2
 80067c6:	3306      	adds	r3, #6
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	699a      	ldr	r2, [r3, #24]
 80067e0:	8b7b      	ldrh	r3, [r7, #26]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d306      	bcc.n	80067f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	8b7b      	ldrh	r3, [r7, #26]
 80067ec:	1ad2      	subs	r2, r2, r3
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	619a      	str	r2, [r3, #24]
 80067f2:	e002      	b.n	80067fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d123      	bne.n	800684a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681c:	83fb      	strh	r3, [r7, #30]
 800681e:	8bfb      	ldrh	r3, [r7, #30]
 8006820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006824:	83fb      	strh	r3, [r7, #30]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	8bfb      	ldrh	r3, [r7, #30]
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11f      	bne.n	8006894 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	83bb      	strh	r3, [r7, #28]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	8bbb      	ldrh	r3, [r7, #28]
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006894:	8b7b      	ldrh	r3, [r7, #26]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6959      	ldr	r1, [r3, #20]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	895a      	ldrh	r2, [r3, #10]
 80068a6:	8b7b      	ldrh	r3, [r7, #26]
 80068a8:	f006 fb22 	bl	800cef0 <USB_ReadPMA>
    }
  }

  return count;
 80068ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b0a4      	sub	sp, #144	; 0x90
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	4613      	mov	r3, r2
 80068c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 81dd 	beq.w	8006c8a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d8:	b29b      	uxth	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	4413      	add	r3, r2
 80068e4:	3302      	adds	r3, #2
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006904:	429a      	cmp	r2, r3
 8006906:	d907      	bls.n	8006918 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	619a      	str	r2, [r3, #24]
 8006916:	e002      	b.n	800691e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2200      	movs	r2, #0
 800691c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 80b9 	bne.w	8006a9a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d126      	bne.n	800697e <HAL_PCD_EP_DB_Transmit+0xc8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693e:	b29b      	uxth	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	4413      	add	r3, r2
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	4413      	add	r3, r2
 8006952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006962:	b29a      	uxth	r2, r3
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006976:	b29a      	uxth	r2, r3
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e01a      	b.n	80069b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d116      	bne.n	80069b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	4413      	add	r3, r2
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	011a      	lsls	r2, r3, #4
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	4413      	add	r3, r2
 80069a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069ac:	633b      	str	r3, [r7, #48]	; 0x30
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2200      	movs	r2, #0
 80069b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d126      	bne.n	8006a10 <HAL_PCD_EP_DB_Transmit+0x15a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	011a      	lsls	r2, r3, #4
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4413      	add	r3, r2
 80069e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	801a      	strh	r2, [r3, #0]
 8006a0e:	e017      	b.n	8006a40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d113      	bne.n	8006a40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	4413      	add	r3, r2
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	4413      	add	r3, r2
 8006a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	4619      	mov	r1, r3
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f00a fd93 	bl	8011572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 82fc 	beq.w	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	82fb      	strh	r3, [r7, #22]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	8afb      	ldrh	r3, [r7, #22]
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]
 8006a98:	e2da      	b.n	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a9a:	88fb      	ldrh	r3, [r7, #6]
 8006a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d021      	beq.n	8006ae8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	f040 82ae 	bne.w	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006afc:	441a      	add	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	69da      	ldr	r2, [r3, #28]
 8006b06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b0a:	441a      	add	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d30b      	bcc.n	8006b34 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b2c:	1ad2      	subs	r2, r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	621a      	str	r2, [r3, #32]
 8006b32:	e017      	b.n	8006b64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d108      	bne.n	8006b4e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006b3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b4c:	e00a      	b.n	8006b64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d165      	bne.n	8006c38 <HAL_PCD_EP_DB_Transmit+0x382>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b80:	4413      	add	r3, r2
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	011a      	lsls	r2, r3, #4
 8006b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8006baa:	d91d      	bls.n	8006be8 <HAL_PCD_EP_DB_Transmit+0x332>
 8006bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <HAL_PCD_EP_DB_Transmit+0x310>
 8006bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	e044      	b.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <HAL_PCD_EP_DB_Transmit+0x350>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e035      	b.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	e01c      	b.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d118      	bne.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	647b      	str	r3, [r7, #68]	; 0x44
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	4413      	add	r3, r2
 8006c56:	647b      	str	r3, [r7, #68]	; 0x44
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	011a      	lsls	r2, r3, #4
 8006c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c66:	643b      	str	r3, [r7, #64]	; 0x40
 8006c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6959      	ldr	r1, [r3, #20]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	891a      	ldrh	r2, [r3, #8]
 8006c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f006 f8ef 	bl	800ce66 <USB_WritePMA>
 8006c88:	e1e2      	b.n	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3306      	adds	r3, #6
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d307      	bcc.n	8006cd2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	619a      	str	r2, [r3, #24]
 8006cd0:	e002      	b.n	8006cd8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 80c0 	bne.w	8006e62 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d126      	bne.n	8006d38 <HAL_PCD_EP_DB_Transmit+0x482>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cfe:	4413      	add	r3, r2
 8006d00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	011a      	lsls	r2, r3, #4
 8006d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d34:	801a      	strh	r2, [r3, #0]
 8006d36:	e01a      	b.n	8006d6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d116      	bne.n	8006d6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	667b      	str	r3, [r7, #100]	; 0x64
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d54:	4413      	add	r3, r2
 8006d56:	667b      	str	r3, [r7, #100]	; 0x64
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	011a      	lsls	r2, r3, #4
 8006d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d60:	4413      	add	r3, r2
 8006d62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d66:	663b      	str	r3, [r7, #96]	; 0x60
 8006d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	677b      	str	r3, [r7, #116]	; 0x74
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d12b      	bne.n	8006dd4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d90:	4413      	add	r3, r2
 8006d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e017      	b.n	8006e04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d113      	bne.n	8006e04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dea:	4413      	add	r3, r2
 8006dec:	677b      	str	r3, [r7, #116]	; 0x74
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	011a      	lsls	r2, r3, #4
 8006df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8006dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e00:	2200      	movs	r2, #0
 8006e02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f00a fbb1 	bl	8011572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 811a 	bne.w	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	8013      	strh	r3, [r2, #0]
 8006e60:	e0f6      	b.n	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d121      	bne.n	8006eb0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	441a      	add	r2, r3
 8006e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	f040 80ca 	bne.w	8007050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ec4:	441a      	add	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ed2:	441a      	add	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d30b      	bcc.n	8006efc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6a1a      	ldr	r2, [r3, #32]
 8006ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ef4:	1ad2      	subs	r2, r2, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	621a      	str	r2, [r3, #32]
 8006efa:	e017      	b.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d108      	bne.n	8006f16 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006f08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006f14:	e00a      	b.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	657b      	str	r3, [r7, #84]	; 0x54
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d165      	bne.n	8007006 <HAL_PCD_EP_DB_Transmit+0x750>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f4e:	4413      	add	r3, r2
 8006f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	011a      	lsls	r2, r3, #4
 8006f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f76:	2b3e      	cmp	r3, #62	; 0x3e
 8006f78:	d91d      	bls.n	8006fb6 <HAL_PCD_EP_DB_Transmit+0x700>
 8006f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <HAL_PCD_EP_DB_Transmit+0x6de>
 8006f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f90:	3b01      	subs	r3, #1
 8006f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	029b      	lsls	r3, r3, #10
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e041      	b.n	800703a <HAL_PCD_EP_DB_Transmit+0x784>
 8006fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	e032      	b.n	800703a <HAL_PCD_EP_DB_Transmit+0x784>
 8006fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_PCD_EP_DB_Transmit+0x738>
 8006fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fea:	3301      	adds	r3, #1
 8006fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	029b      	lsls	r3, r3, #10
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e019      	b.n	800703a <HAL_PCD_EP_DB_Transmit+0x784>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d115      	bne.n	800703a <HAL_PCD_EP_DB_Transmit+0x784>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007016:	b29b      	uxth	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800701c:	4413      	add	r3, r2
 800701e:	657b      	str	r3, [r7, #84]	; 0x54
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	011a      	lsls	r2, r3, #4
 8007026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007028:	4413      	add	r3, r2
 800702a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800702e:	653b      	str	r3, [r7, #80]	; 0x50
 8007030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007034:	b29a      	uxth	r2, r3
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	6959      	ldr	r1, [r3, #20]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	895a      	ldrh	r2, [r3, #10]
 8007046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800704a:	b29b      	uxth	r3, r3
 800704c:	f005 ff0b 	bl	800ce66 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706a:	82bb      	strh	r3, [r7, #20]
 800706c:	8abb      	ldrh	r3, [r7, #20]
 800706e:	f083 0310 	eor.w	r3, r3, #16
 8007072:	82bb      	strh	r3, [r7, #20]
 8007074:	8abb      	ldrh	r3, [r7, #20]
 8007076:	f083 0320 	eor.w	r3, r3, #32
 800707a:	82bb      	strh	r3, [r7, #20]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	8abb      	ldrh	r3, [r7, #20]
 800708c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709c:	b29b      	uxth	r3, r3
 800709e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3790      	adds	r7, #144	; 0x90
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	607b      	str	r3, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	817b      	strh	r3, [r7, #10]
 80070b8:	4613      	mov	r3, r2
 80070ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80070bc:	897b      	ldrh	r3, [r7, #10]
 80070be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070c8:	897b      	ldrh	r3, [r7, #10]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e009      	b.n	80070f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070e0:	897a      	ldrh	r2, [r7, #10]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80070f4:	893b      	ldrh	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d107      	bne.n	800710a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2200      	movs	r2, #0
 80070fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	b29a      	uxth	r2, r3
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	80da      	strh	r2, [r3, #6]
 8007108:	e00b      	b.n	8007122 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2201      	movs	r2, #1
 800710e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	b29a      	uxth	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	0c1b      	lsrs	r3, r3, #16
 800711c:	b29a      	uxth	r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr
	...

08007130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e272      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8087 	beq.w	800725e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007150:	4b92      	ldr	r3, [pc, #584]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 030c 	and.w	r3, r3, #12
 8007158:	2b04      	cmp	r3, #4
 800715a:	d00c      	beq.n	8007176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800715c:	4b8f      	ldr	r3, [pc, #572]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 030c 	and.w	r3, r3, #12
 8007164:	2b08      	cmp	r3, #8
 8007166:	d112      	bne.n	800718e <HAL_RCC_OscConfig+0x5e>
 8007168:	4b8c      	ldr	r3, [pc, #560]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007174:	d10b      	bne.n	800718e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007176:	4b89      	ldr	r3, [pc, #548]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d06c      	beq.n	800725c <HAL_RCC_OscConfig+0x12c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d168      	bne.n	800725c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e24c      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007196:	d106      	bne.n	80071a6 <HAL_RCC_OscConfig+0x76>
 8007198:	4b80      	ldr	r3, [pc, #512]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a7f      	ldr	r2, [pc, #508]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 800719e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	e02e      	b.n	8007204 <HAL_RCC_OscConfig+0xd4>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10c      	bne.n	80071c8 <HAL_RCC_OscConfig+0x98>
 80071ae:	4b7b      	ldr	r3, [pc, #492]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a7a      	ldr	r2, [pc, #488]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4b78      	ldr	r3, [pc, #480]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a77      	ldr	r2, [pc, #476]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	e01d      	b.n	8007204 <HAL_RCC_OscConfig+0xd4>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071d0:	d10c      	bne.n	80071ec <HAL_RCC_OscConfig+0xbc>
 80071d2:	4b72      	ldr	r3, [pc, #456]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a71      	ldr	r2, [pc, #452]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	4b6f      	ldr	r3, [pc, #444]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a6e      	ldr	r2, [pc, #440]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	e00b      	b.n	8007204 <HAL_RCC_OscConfig+0xd4>
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a6a      	ldr	r2, [pc, #424]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	4b68      	ldr	r3, [pc, #416]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a67      	ldr	r2, [pc, #412]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80071fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d013      	beq.n	8007234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720c:	f7fc fc22 	bl	8003a54 <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007214:	f7fc fc1e 	bl	8003a54 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b64      	cmp	r3, #100	; 0x64
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e200      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	4b5d      	ldr	r3, [pc, #372]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0f0      	beq.n	8007214 <HAL_RCC_OscConfig+0xe4>
 8007232:	e014      	b.n	800725e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007234:	f7fc fc0e 	bl	8003a54 <HAL_GetTick>
 8007238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800723c:	f7fc fc0a 	bl	8003a54 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b64      	cmp	r3, #100	; 0x64
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e1ec      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800724e:	4b53      	ldr	r3, [pc, #332]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f0      	bne.n	800723c <HAL_RCC_OscConfig+0x10c>
 800725a:	e000      	b.n	800725e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800725c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d063      	beq.n	8007332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800726a:	4b4c      	ldr	r3, [pc, #304]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f003 030c 	and.w	r3, r3, #12
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007276:	4b49      	ldr	r3, [pc, #292]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f003 030c 	and.w	r3, r3, #12
 800727e:	2b08      	cmp	r3, #8
 8007280:	d11c      	bne.n	80072bc <HAL_RCC_OscConfig+0x18c>
 8007282:	4b46      	ldr	r3, [pc, #280]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d116      	bne.n	80072bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800728e:	4b43      	ldr	r3, [pc, #268]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_RCC_OscConfig+0x176>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d001      	beq.n	80072a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e1c0      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072a6:	4b3d      	ldr	r3, [pc, #244]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4939      	ldr	r1, [pc, #228]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ba:	e03a      	b.n	8007332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d020      	beq.n	8007306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072c4:	4b36      	ldr	r3, [pc, #216]	; (80073a0 <HAL_RCC_OscConfig+0x270>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ca:	f7fc fbc3 	bl	8003a54 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072d2:	f7fc fbbf 	bl	8003a54 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e1a1      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e4:	4b2d      	ldr	r3, [pc, #180]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0f0      	beq.n	80072d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f0:	4b2a      	ldr	r3, [pc, #168]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	4927      	ldr	r1, [pc, #156]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007300:	4313      	orrs	r3, r2
 8007302:	600b      	str	r3, [r1, #0]
 8007304:	e015      	b.n	8007332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007306:	4b26      	ldr	r3, [pc, #152]	; (80073a0 <HAL_RCC_OscConfig+0x270>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730c:	f7fc fba2 	bl	8003a54 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007314:	f7fc fb9e 	bl	8003a54 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e180      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007326:	4b1d      	ldr	r3, [pc, #116]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d03a      	beq.n	80073b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d019      	beq.n	800737a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007346:	4b17      	ldr	r3, [pc, #92]	; (80073a4 <HAL_RCC_OscConfig+0x274>)
 8007348:	2201      	movs	r2, #1
 800734a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734c:	f7fc fb82 	bl	8003a54 <HAL_GetTick>
 8007350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007354:	f7fc fb7e 	bl	8003a54 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b02      	cmp	r3, #2
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e160      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <HAL_RCC_OscConfig+0x26c>)
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007372:	2001      	movs	r0, #1
 8007374:	f000 faba 	bl	80078ec <RCC_Delay>
 8007378:	e01c      	b.n	80073b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800737a:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <HAL_RCC_OscConfig+0x274>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007380:	f7fc fb68 	bl	8003a54 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007386:	e00f      	b.n	80073a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007388:	f7fc fb64 	bl	8003a54 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d908      	bls.n	80073a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e146      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
 800739a:	bf00      	nop
 800739c:	40021000 	.word	0x40021000
 80073a0:	42420000 	.word	0x42420000
 80073a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073a8:	4b92      	ldr	r3, [pc, #584]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e9      	bne.n	8007388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80a6 	beq.w	800750e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c6:	4b8b      	ldr	r3, [pc, #556]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10d      	bne.n	80073ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d2:	4b88      	ldr	r3, [pc, #544]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	4a87      	ldr	r2, [pc, #540]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073dc:	61d3      	str	r3, [r2, #28]
 80073de:	4b85      	ldr	r3, [pc, #532]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ee:	4b82      	ldr	r3, [pc, #520]	; (80075f8 <HAL_RCC_OscConfig+0x4c8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d118      	bne.n	800742c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073fa:	4b7f      	ldr	r3, [pc, #508]	; (80075f8 <HAL_RCC_OscConfig+0x4c8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a7e      	ldr	r2, [pc, #504]	; (80075f8 <HAL_RCC_OscConfig+0x4c8>)
 8007400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007406:	f7fc fb25 	bl	8003a54 <HAL_GetTick>
 800740a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740c:	e008      	b.n	8007420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800740e:	f7fc fb21 	bl	8003a54 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	2b64      	cmp	r3, #100	; 0x64
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e103      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007420:	4b75      	ldr	r3, [pc, #468]	; (80075f8 <HAL_RCC_OscConfig+0x4c8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0f0      	beq.n	800740e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d106      	bne.n	8007442 <HAL_RCC_OscConfig+0x312>
 8007434:	4b6f      	ldr	r3, [pc, #444]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	4a6e      	ldr	r2, [pc, #440]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	6213      	str	r3, [r2, #32]
 8007440:	e02d      	b.n	800749e <HAL_RCC_OscConfig+0x36e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10c      	bne.n	8007464 <HAL_RCC_OscConfig+0x334>
 800744a:	4b6a      	ldr	r3, [pc, #424]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	4a69      	ldr	r2, [pc, #420]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	6213      	str	r3, [r2, #32]
 8007456:	4b67      	ldr	r3, [pc, #412]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	4a66      	ldr	r2, [pc, #408]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800745c:	f023 0304 	bic.w	r3, r3, #4
 8007460:	6213      	str	r3, [r2, #32]
 8007462:	e01c      	b.n	800749e <HAL_RCC_OscConfig+0x36e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	2b05      	cmp	r3, #5
 800746a:	d10c      	bne.n	8007486 <HAL_RCC_OscConfig+0x356>
 800746c:	4b61      	ldr	r3, [pc, #388]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	4a60      	ldr	r2, [pc, #384]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007472:	f043 0304 	orr.w	r3, r3, #4
 8007476:	6213      	str	r3, [r2, #32]
 8007478:	4b5e      	ldr	r3, [pc, #376]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	4a5d      	ldr	r2, [pc, #372]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	6213      	str	r3, [r2, #32]
 8007484:	e00b      	b.n	800749e <HAL_RCC_OscConfig+0x36e>
 8007486:	4b5b      	ldr	r3, [pc, #364]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	4a5a      	ldr	r2, [pc, #360]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	6213      	str	r3, [r2, #32]
 8007492:	4b58      	ldr	r3, [pc, #352]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	4a57      	ldr	r2, [pc, #348]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007498:	f023 0304 	bic.w	r3, r3, #4
 800749c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d015      	beq.n	80074d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074a6:	f7fc fad5 	bl	8003a54 <HAL_GetTick>
 80074aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ac:	e00a      	b.n	80074c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ae:	f7fc fad1 	bl	8003a54 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074bc:	4293      	cmp	r3, r2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e0b1      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074c4:	4b4b      	ldr	r3, [pc, #300]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ee      	beq.n	80074ae <HAL_RCC_OscConfig+0x37e>
 80074d0:	e014      	b.n	80074fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d2:	f7fc fabf 	bl	8003a54 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074d8:	e00a      	b.n	80074f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074da:	f7fc fabb 	bl	8003a54 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e09b      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f0:	4b40      	ldr	r3, [pc, #256]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ee      	bne.n	80074da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d105      	bne.n	800750e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007502:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	4a3b      	ldr	r2, [pc, #236]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 8087 	beq.w	8007626 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f003 030c 	and.w	r3, r3, #12
 8007520:	2b08      	cmp	r3, #8
 8007522:	d061      	beq.n	80075e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d146      	bne.n	80075ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752c:	4b33      	ldr	r3, [pc, #204]	; (80075fc <HAL_RCC_OscConfig+0x4cc>)
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007532:	f7fc fa8f 	bl	8003a54 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753a:	f7fc fa8b 	bl	8003a54 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e06d      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800754c:	4b29      	ldr	r3, [pc, #164]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007560:	d108      	bne.n	8007574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	4921      	ldr	r1, [pc, #132]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007570:	4313      	orrs	r3, r2
 8007572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007574:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a19      	ldr	r1, [r3, #32]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	430b      	orrs	r3, r1
 8007586:	491b      	ldr	r1, [pc, #108]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 8007588:	4313      	orrs	r3, r2
 800758a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800758c:	4b1b      	ldr	r3, [pc, #108]	; (80075fc <HAL_RCC_OscConfig+0x4cc>)
 800758e:	2201      	movs	r2, #1
 8007590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007592:	f7fc fa5f 	bl	8003a54 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800759a:	f7fc fa5b 	bl	8003a54 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e03d      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f0      	beq.n	800759a <HAL_RCC_OscConfig+0x46a>
 80075b8:	e035      	b.n	8007626 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ba:	4b10      	ldr	r3, [pc, #64]	; (80075fc <HAL_RCC_OscConfig+0x4cc>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c0:	f7fc fa48 	bl	8003a54 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c8:	f7fc fa44 	bl	8003a54 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e026      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075da:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <HAL_RCC_OscConfig+0x4c4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <HAL_RCC_OscConfig+0x498>
 80075e6:	e01e      	b.n	8007626 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d107      	bne.n	8007600 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e019      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
 80075f4:	40021000 	.word	0x40021000
 80075f8:	40007000 	.word	0x40007000
 80075fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_RCC_OscConfig+0x500>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	429a      	cmp	r2, r3
 8007612:	d106      	bne.n	8007622 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761e:	429a      	cmp	r2, r3
 8007620:	d001      	beq.n	8007626 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40021000 	.word	0x40021000

08007634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0d0      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007648:	4b6a      	ldr	r3, [pc, #424]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d910      	bls.n	8007678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007656:	4b67      	ldr	r3, [pc, #412]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f023 0207 	bic.w	r2, r3, #7
 800765e:	4965      	ldr	r1, [pc, #404]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	4313      	orrs	r3, r2
 8007664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007666:	4b63      	ldr	r3, [pc, #396]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d001      	beq.n	8007678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e0b8      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d020      	beq.n	80076c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007690:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4a58      	ldr	r2, [pc, #352]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800769a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076a8:	4b53      	ldr	r3, [pc, #332]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4a52      	ldr	r2, [pc, #328]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80076b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b4:	4b50      	ldr	r3, [pc, #320]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	494d      	ldr	r1, [pc, #308]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d040      	beq.n	8007754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d107      	bne.n	80076ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076da:	4b47      	ldr	r3, [pc, #284]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d115      	bne.n	8007712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e07f      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d107      	bne.n	8007702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f2:	4b41      	ldr	r3, [pc, #260]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e073      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007702:	4b3d      	ldr	r3, [pc, #244]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e06b      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007712:	4b39      	ldr	r3, [pc, #228]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f023 0203 	bic.w	r2, r3, #3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	4936      	ldr	r1, [pc, #216]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007720:	4313      	orrs	r3, r2
 8007722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007724:	f7fc f996 	bl	8003a54 <HAL_GetTick>
 8007728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772a:	e00a      	b.n	8007742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800772c:	f7fc f992 	bl	8003a54 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f241 3288 	movw	r2, #5000	; 0x1388
 800773a:	4293      	cmp	r3, r2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e053      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	4b2d      	ldr	r3, [pc, #180]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f003 020c 	and.w	r2, r3, #12
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	429a      	cmp	r2, r3
 8007752:	d1eb      	bne.n	800772c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007754:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d210      	bcs.n	8007784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007762:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f023 0207 	bic.w	r2, r3, #7
 800776a:	4922      	ldr	r1, [pc, #136]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	4313      	orrs	r3, r2
 8007770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007772:	4b20      	ldr	r3, [pc, #128]	; (80077f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d001      	beq.n	8007784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e032      	b.n	80077ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4916      	ldr	r1, [pc, #88]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077ae:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	490e      	ldr	r1, [pc, #56]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077c2:	f000 f821 	bl	8007808 <HAL_RCC_GetSysClockFreq>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <HAL_RCC_ClockConfig+0x1c4>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	091b      	lsrs	r3, r3, #4
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	490a      	ldr	r1, [pc, #40]	; (80077fc <HAL_RCC_ClockConfig+0x1c8>)
 80077d4:	5ccb      	ldrb	r3, [r1, r3]
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	4a09      	ldr	r2, [pc, #36]	; (8007800 <HAL_RCC_ClockConfig+0x1cc>)
 80077dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <HAL_RCC_ClockConfig+0x1d0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fc f8f4 	bl	80039d0 <HAL_InitTick>

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	40022000 	.word	0x40022000
 80077f8:	40021000 	.word	0x40021000
 80077fc:	0802de18 	.word	0x0802de18
 8007800:	20000010 	.word	0x20000010
 8007804:	20000014 	.word	0x20000014

08007808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	2300      	movs	r3, #0
 800781c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007822:	4b1e      	ldr	r3, [pc, #120]	; (800789c <HAL_RCC_GetSysClockFreq+0x94>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 030c 	and.w	r3, r3, #12
 800782e:	2b04      	cmp	r3, #4
 8007830:	d002      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0x30>
 8007832:	2b08      	cmp	r3, #8
 8007834:	d003      	beq.n	800783e <HAL_RCC_GetSysClockFreq+0x36>
 8007836:	e027      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007838:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800783a:	613b      	str	r3, [r7, #16]
      break;
 800783c:	e027      	b.n	800788e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	0c9b      	lsrs	r3, r3, #18
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	4a17      	ldr	r2, [pc, #92]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007848:	5cd3      	ldrb	r3, [r2, r3]
 800784a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d010      	beq.n	8007878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007856:	4b11      	ldr	r3, [pc, #68]	; (800789c <HAL_RCC_GetSysClockFreq+0x94>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	0c5b      	lsrs	r3, r3, #17
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007862:	5cd3      	ldrb	r3, [r2, r3]
 8007864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a0d      	ldr	r2, [pc, #52]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800786a:	fb03 f202 	mul.w	r2, r3, r2
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	fbb2 f3f3 	udiv	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	e004      	b.n	8007882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800787c:	fb02 f303 	mul.w	r3, r2, r3
 8007880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	613b      	str	r3, [r7, #16]
      break;
 8007886:	e002      	b.n	800788e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800788a:	613b      	str	r3, [r7, #16]
      break;
 800788c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800788e:	693b      	ldr	r3, [r7, #16]
}
 8007890:	4618      	mov	r0, r3
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40021000 	.word	0x40021000
 80078a0:	007a1200 	.word	0x007a1200
 80078a4:	0802de30 	.word	0x0802de30
 80078a8:	0802de40 	.word	0x0802de40
 80078ac:	003d0900 	.word	0x003d0900

080078b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078b4:	4b02      	ldr	r3, [pc, #8]	; (80078c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80078b6:	681b      	ldr	r3, [r3, #0]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr
 80078c0:	20000010 	.word	0x20000010

080078c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078c8:	f7ff fff2 	bl	80078b0 <HAL_RCC_GetHCLKFreq>
 80078cc:	4602      	mov	r2, r0
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	4903      	ldr	r1, [pc, #12]	; (80078e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078da:	5ccb      	ldrb	r3, [r1, r3]
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40021000 	.word	0x40021000
 80078e8:	0802de28 	.word	0x0802de28

080078ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <RCC_Delay+0x34>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <RCC_Delay+0x38>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	0a5b      	lsrs	r3, r3, #9
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
 8007906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007908:	bf00      	nop
  }
  while (Delay --);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1e5a      	subs	r2, r3, #1
 800790e:	60fa      	str	r2, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f9      	bne.n	8007908 <RCC_Delay+0x1c>
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr
 8007920:	20000010 	.word	0x20000010
 8007924:	10624dd3 	.word	0x10624dd3

08007928 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d07d      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007944:	2300      	movs	r3, #0
 8007946:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007948:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10d      	bne.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007954:	4b4c      	ldr	r3, [pc, #304]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	4a4b      	ldr	r2, [pc, #300]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795e:	61d3      	str	r3, [r2, #28]
 8007960:	4b49      	ldr	r3, [pc, #292]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007970:	4b46      	ldr	r3, [pc, #280]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d118      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800797c:	4b43      	ldr	r3, [pc, #268]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a42      	ldr	r2, [pc, #264]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007988:	f7fc f864 	bl	8003a54 <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800798e:	e008      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007990:	f7fc f860 	bl	8003a54 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b64      	cmp	r3, #100	; 0x64
 800799c:	d901      	bls.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e06d      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079a2:	4b3a      	ldr	r3, [pc, #232]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f0      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079ae:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d02e      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d027      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079cc:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079d6:	4b2e      	ldr	r3, [pc, #184]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079dc:	4b2c      	ldr	r3, [pc, #176]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80079e2:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d014      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f2:	f7fc f82f 	bl	8003a54 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f8:	e00a      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fa:	f7fc f82b 	bl	8003a54 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e036      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a10:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0ee      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4917      	ldr	r1, [pc, #92]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d105      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a34:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	4a13      	ldr	r2, [pc, #76]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	490b      	ldr	r1, [pc, #44]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a6a:	4b07      	ldr	r3, [pc, #28]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	4904      	ldr	r1, [pc, #16]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	40007000 	.word	0x40007000
 8007a90:	42420440 	.word	0x42420440

08007a94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e022      	b.n	8007aec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d105      	bne.n	8007abe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7fb fd0d 	bl	80034d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f814 	bl	8007af4 <HAL_SD_InitCard>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e00a      	b.n	8007aec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007af4:	b5b0      	push	{r4, r5, r7, lr}
 8007af6:	b08e      	sub	sp, #56	; 0x38
 8007af8:	af04      	add	r7, sp, #16
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007b10:	2376      	movs	r3, #118	; 0x76
 8007b12:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681d      	ldr	r5, [r3, #0]
 8007b18:	466c      	mov	r4, sp
 8007b1a:	f107 0314 	add.w	r3, r7, #20
 8007b1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f002 f92d 	bl	8009d8c <SDIO_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e04f      	b.n	8007be4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007b44:	4b29      	ldr	r3, [pc, #164]	; (8007bec <HAL_SD_InitCard+0xf8>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 f962 	bl	8009e18 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007b54:	4b25      	ldr	r3, [pc, #148]	; (8007bec <HAL_SD_InitCard+0xf8>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007b5a:	2002      	movs	r0, #2
 8007b5c:	f7fb ff84 	bl	8003a68 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ff03 	bl	800896c <SD_PowerON>
 8007b66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e02e      	b.n	8007be4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fe22 	bl	80087d0 <SD_InitCard>
 8007b8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e01b      	b.n	8007be4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 f9bb 	bl	8009f30 <SDMMC_CmdBlockLength>
 8007bba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00f      	beq.n	8007be2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <HAL_SD_InitCard+0xfc>)
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3728      	adds	r7, #40	; 0x28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bdb0      	pop	{r4, r5, r7, pc}
 8007bec:	423000a0 	.word	0x423000a0
 8007bf0:	004005ff 	.word	0x004005ff

08007bf4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b092      	sub	sp, #72	; 0x48
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007c02:	f7fb ff27 	bl	8003a54 <HAL_GetTick>
 8007c06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d107      	bne.n	8007c26 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e1bd      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	f040 81b0 	bne.w	8007f94 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	441a      	add	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d907      	bls.n	8007c58 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e1a4      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2200      	movs	r2, #0
 8007c66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d002      	beq.n	8007c76 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	025b      	lsls	r3, r3, #9
 8007c74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	025b      	lsls	r3, r3, #9
 8007c80:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c82:	2390      	movs	r3, #144	; 0x90
 8007c84:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007c86:	2302      	movs	r3, #2
 8007c88:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f107 0214 	add.w	r2, r7, #20
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f002 f91c 	bl	8009eda <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d90a      	bls.n	8007cbe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2202      	movs	r2, #2
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f002 f97f 	bl	8009fb8 <SDMMC_CmdReadMultiBlock>
 8007cba:	6478      	str	r0, [r7, #68]	; 0x44
 8007cbc:	e009      	b.n	8007cd2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 f952 	bl	8009f74 <SDMMC_CmdReadSingleBlock>
 8007cd0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d012      	beq.n	8007cfe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a7a      	ldr	r2, [pc, #488]	; (8007ec8 <HAL_SD_ReadBlocks+0x2d4>)
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e151      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007d02:	e061      	b.n	8007dc8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d03c      	beq.n	8007d8c <HAL_SD_ReadBlocks+0x198>
 8007d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d039      	beq.n	8007d8c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1c:	e033      	b.n	8007d86 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f002 f85c 	bl	8009de0 <SDIO_ReadFIFO>
 8007d28:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d34:	3301      	adds	r3, #1
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	0a1b      	lsrs	r3, r3, #8
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d46:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d50:	3b01      	subs	r3, #1
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	0c1b      	lsrs	r3, r3, #16
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	3301      	adds	r3, #1
 8007d62:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d66:	3b01      	subs	r3, #1
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	0e1b      	lsrs	r3, r3, #24
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d72:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	3301      	adds	r3, #1
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d82:	3301      	adds	r3, #1
 8007d84:	643b      	str	r3, [r7, #64]	; 0x40
 8007d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d88:	2b07      	cmp	r3, #7
 8007d8a:	d9c8      	bls.n	8007d1e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007d8c:	f7fb fe62 	bl	8003a54 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d902      	bls.n	8007da2 <HAL_SD_ReadBlocks+0x1ae>
 8007d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d112      	bne.n	8007dc8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a48      	ldr	r2, [pc, #288]	; (8007ec8 <HAL_SD_ReadBlocks+0x2d4>)
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0ec      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dce:	f240 332a 	movw	r3, #810	; 0x32a
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d095      	beq.n	8007d04 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d022      	beq.n	8007e2c <HAL_SD_ReadBlocks+0x238>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d91f      	bls.n	8007e2c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d01b      	beq.n	8007e2c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f002 f943 	bl	800a084 <SDMMC_CmdStopTransfer>
 8007dfe:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d012      	beq.n	8007e2c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a2f      	ldr	r2, [pc, #188]	; (8007ec8 <HAL_SD_ReadBlocks+0x2d4>)
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e14:	431a      	orrs	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0ba      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d012      	beq.n	8007e60 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a22      	ldr	r2, [pc, #136]	; (8007ec8 <HAL_SD_ReadBlocks+0x2d4>)
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f043 0208 	orr.w	r2, r3, #8
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0a0      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d012      	beq.n	8007e94 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <HAL_SD_ReadBlocks+0x2d4>)
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	f043 0202 	orr.w	r2, r3, #2
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e086      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d063      	beq.n	8007f6a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a08      	ldr	r2, [pc, #32]	; (8007ec8 <HAL_SD_ReadBlocks+0x2d4>)
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	f043 0220 	orr.w	r2, r3, #32
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e06c      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
 8007ec8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 ff85 	bl	8009de0 <SDIO_ReadFIFO>
 8007ed6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	0a1b      	lsrs	r3, r3, #8
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	3301      	adds	r3, #1
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efe:	3b01      	subs	r3, #1
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	3301      	adds	r3, #1
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f14:	3b01      	subs	r3, #1
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	0e1b      	lsrs	r3, r3, #24
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f20:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	3301      	adds	r3, #1
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007f2e:	f7fb fd91 	bl	8003a54 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d902      	bls.n	8007f44 <HAL_SD_ReadBlocks+0x350>
 8007f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d112      	bne.n	8007f6a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a18      	ldr	r2, [pc, #96]	; (8007fac <HAL_SD_ReadBlocks+0x3b8>)
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e01b      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_SD_ReadBlocks+0x38a>
 8007f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1a6      	bne.n	8007ecc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e006      	b.n	8007fa2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
  }
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3748      	adds	r7, #72	; 0x48
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	004005ff 	.word	0x004005ff

08007fb0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b092      	sub	sp, #72	; 0x48
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fbe:	f7fb fd49 	bl	8003a54 <HAL_GetTick>
 8007fc2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d107      	bne.n	8007fe2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e166      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	f040 8159 	bne.w	80082a2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008000:	429a      	cmp	r2, r3
 8008002:	d907      	bls.n	8008014 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e14d      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2203      	movs	r2, #3
 8008018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2200      	movs	r2, #0
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	2b01      	cmp	r3, #1
 800802a:	d002      	beq.n	8008032 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	025b      	lsls	r3, r3, #9
 8008030:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295
 8008036:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	025b      	lsls	r3, r3, #9
 800803c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800803e:	2390      	movs	r3, #144	; 0x90
 8008040:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008042:	2300      	movs	r3, #0
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008046:	2300      	movs	r3, #0
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800804a:	2301      	movs	r3, #1
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f107 0218 	add.w	r2, r7, #24
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f001 ff3e 	bl	8009eda <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d90a      	bls.n	800807a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008070:	4618      	mov	r0, r3
 8008072:	f001 ffe5 	bl	800a040 <SDMMC_CmdWriteMultiBlock>
 8008076:	6478      	str	r0, [r7, #68]	; 0x44
 8008078:	e009      	b.n	800808e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2210      	movs	r2, #16
 800807e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008086:	4618      	mov	r0, r3
 8008088:	f001 ffb8 	bl	8009ffc <SDMMC_CmdWriteSingleBlock>
 800808c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800808e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008090:	2b00      	cmp	r3, #0
 8008092:	d012      	beq.n	80080ba <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a87      	ldr	r2, [pc, #540]	; (80082b8 <HAL_SD_WriteBlocks+0x308>)
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a2:	431a      	orrs	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e0fa      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80080be:	e065      	b.n	800818c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d040      	beq.n	8008150 <HAL_SD_WriteBlocks+0x1a0>
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d03d      	beq.n	8008150 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80080d4:	2300      	movs	r3, #0
 80080d6:	643b      	str	r3, [r7, #64]	; 0x40
 80080d8:	e037      	b.n	800814a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e2:	3301      	adds	r3, #1
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80080e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e8:	3b01      	subs	r3, #1
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80080ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	021a      	lsls	r2, r3, #8
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fa:	3301      	adds	r3, #1
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80080fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008100:	3b01      	subs	r3, #1
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	041a      	lsls	r2, r3, #16
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	3301      	adds	r3, #1
 8008114:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008118:	3b01      	subs	r3, #1
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800811c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	061a      	lsls	r2, r3, #24
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812a:	3301      	adds	r3, #1
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800812e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008130:	3b01      	subs	r3, #1
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f107 0214 	add.w	r2, r7, #20
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f001 fe5a 	bl	8009df8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008146:	3301      	adds	r3, #1
 8008148:	643b      	str	r3, [r7, #64]	; 0x40
 800814a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814c:	2b07      	cmp	r3, #7
 800814e:	d9c4      	bls.n	80080da <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008150:	f7fb fc80 	bl	8003a54 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800815c:	429a      	cmp	r2, r3
 800815e:	d902      	bls.n	8008166 <HAL_SD_WriteBlocks+0x1b6>
 8008160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008162:	2b00      	cmp	r3, #0
 8008164:	d112      	bne.n	800818c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a53      	ldr	r2, [pc, #332]	; (80082b8 <HAL_SD_WriteBlocks+0x308>)
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008174:	431a      	orrs	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e091      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008192:	f240 331a 	movw	r3, #794	; 0x31a
 8008196:	4013      	ands	r3, r2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d091      	beq.n	80080c0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d022      	beq.n	80081f0 <HAL_SD_WriteBlocks+0x240>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d91f      	bls.n	80081f0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d01b      	beq.n	80081f0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 ff61 	bl	800a084 <SDMMC_CmdStopTransfer>
 80081c2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80081c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d012      	beq.n	80081f0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a3a      	ldr	r2, [pc, #232]	; (80082b8 <HAL_SD_WriteBlocks+0x308>)
 80081d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d8:	431a      	orrs	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e05f      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d012      	beq.n	8008224 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2d      	ldr	r2, [pc, #180]	; (80082b8 <HAL_SD_WriteBlocks+0x308>)
 8008204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	f043 0208 	orr.w	r2, r3, #8
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e045      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d012      	beq.n	8008258 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a20      	ldr	r2, [pc, #128]	; (80082b8 <HAL_SD_WriteBlocks+0x308>)
 8008238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	f043 0202 	orr.w	r2, r3, #2
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e02b      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b00      	cmp	r3, #0
 8008264:	d012      	beq.n	800828c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <HAL_SD_WriteBlocks+0x308>)
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	f043 0210 	orr.w	r2, r3, #16
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e011      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f240 523a 	movw	r2, #1338	; 0x53a
 8008294:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e006      	b.n	80082b0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3748      	adds	r7, #72	; 0x48
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	004005ff 	.word	0x004005ff

080082bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ca:	0f9b      	lsrs	r3, r3, #30
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d6:	0e9b      	lsrs	r3, r3, #26
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 0303 	and.w	r3, r3, #3
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fa:	0c1b      	lsrs	r3, r3, #16
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	b2da      	uxtb	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008312:	b2da      	uxtb	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800831c:	0d1b      	lsrs	r3, r3, #20
 800831e:	b29a      	uxth	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008328:	0c1b      	lsrs	r3, r3, #16
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	b2da      	uxtb	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800833a:	0bdb      	lsrs	r3, r3, #15
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	b2da      	uxtb	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800834c:	0b9b      	lsrs	r3, r3, #14
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	b2da      	uxtb	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800835e:	0b5b      	lsrs	r3, r3, #13
 8008360:	b2db      	uxtb	r3, r3
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	b2da      	uxtb	r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008370:	0b1b      	lsrs	r3, r3, #12
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008388:	2b00      	cmp	r3, #0
 800838a:	d163      	bne.n	8008454 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008390:	009a      	lsls	r2, r3, #2
 8008392:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008396:	4013      	ands	r3, r2
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800839c:	0f92      	lsrs	r2, r2, #30
 800839e:	431a      	orrs	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a8:	0edb      	lsrs	r3, r3, #27
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ba:	0e1b      	lsrs	r3, r3, #24
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083cc:	0d5b      	lsrs	r3, r3, #21
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083de:	0c9b      	lsrs	r3, r3, #18
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f0:	0bdb      	lsrs	r3, r3, #15
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	7e1b      	ldrb	r3, [r3, #24]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f003 0307 	and.w	r3, r3, #7
 8008412:	3302      	adds	r3, #2
 8008414:	2201      	movs	r2, #1
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800841e:	fb03 f202 	mul.w	r2, r3, r2
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	7a1b      	ldrb	r3, [r3, #8]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f003 030f 	and.w	r3, r3, #15
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008440:	0a52      	lsrs	r2, r2, #9
 8008442:	fb03 f202 	mul.w	r2, r3, r2
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008450:	661a      	str	r2, [r3, #96]	; 0x60
 8008452:	e031      	b.n	80084b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008458:	2b01      	cmp	r3, #1
 800845a:	d11d      	bne.n	8008498 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800846a:	0c1b      	lsrs	r3, r3, #16
 800846c:	431a      	orrs	r2, r3
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	3301      	adds	r3, #1
 8008478:	029a      	lsls	r2, r3, #10
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800848c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
 8008496:	e00f      	b.n	80084b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a58      	ldr	r2, [pc, #352]	; (8008600 <HAL_SD_GetCardCSD+0x344>)
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e09d      	b.n	80085f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084bc:	0b9b      	lsrs	r3, r3, #14
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ce:	09db      	lsrs	r3, r3, #7
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f0:	0fdb      	lsrs	r3, r3, #31
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fc:	0f5b      	lsrs	r3, r3, #29
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	b2da      	uxtb	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850e:	0e9b      	lsrs	r3, r3, #26
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	b2da      	uxtb	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	0d9b      	lsrs	r3, r3, #22
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	b2da      	uxtb	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008532:	0d5b      	lsrs	r3, r3, #21
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	b2da      	uxtb	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	0c1b      	lsrs	r3, r3, #16
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	0bdb      	lsrs	r3, r3, #15
 8008564:	b2db      	uxtb	r3, r3
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	b2da      	uxtb	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	0b9b      	lsrs	r3, r3, #14
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858a:	0b5b      	lsrs	r3, r3, #13
 800858c:	b2db      	uxtb	r3, r3
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	b2da      	uxtb	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	0b1b      	lsrs	r3, r3, #12
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	0a9b      	lsrs	r3, r3, #10
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	004005ff 	.word	0x004005ff

08008604 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr
	...

0800865c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800865c:	b5b0      	push	{r4, r5, r7, lr}
 800865e:	b08e      	sub	sp, #56	; 0x38
 8008660:	af04      	add	r7, sp, #16
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2203      	movs	r2, #3
 8008670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008678:	2b03      	cmp	r3, #3
 800867a:	d02e      	beq.n	80086da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008682:	d106      	bne.n	8008692 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
 8008690:	e029      	b.n	80086e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008698:	d10a      	bne.n	80086b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa1c 	bl	8008ad8 <SD_WideBus_Enable>
 80086a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	639a      	str	r2, [r3, #56]	; 0x38
 80086ae:	e01a      	b.n	80086e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa59 	bl	8008b6e <SD_WideBus_Disable>
 80086bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
 80086ca:	e00c      	b.n	80086e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38
 80086d8:	e005      	b.n	80086e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a26      	ldr	r2, [pc, #152]	; (800878c <HAL_SD_ConfigWideBusOperation+0x130>)
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008704:	e01f      	b.n	8008746 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681d      	ldr	r5, [r3, #0]
 800872c:	466c      	mov	r4, sp
 800872e:	f107 0314 	add.w	r3, r7, #20
 8008732:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008740:	4628      	mov	r0, r5
 8008742:	f001 fb23 	bl	8009d8c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fbee 	bl	8009f30 <SDMMC_CmdBlockLength>
 8008754:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00c      	beq.n	8008776 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a0a      	ldr	r2, [pc, #40]	; (800878c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008762:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800877e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008782:	4618      	mov	r0, r3
 8008784:	3728      	adds	r7, #40	; 0x28
 8008786:	46bd      	mov	sp, r7
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	bf00      	nop
 800878c:	004005ff 	.word	0x004005ff

08008790 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800879c:	f107 030c 	add.w	r3, r7, #12
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f970 	bl	8008a88 <SD_SendStatus>
 80087a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d005      	beq.n	80087bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	0a5b      	lsrs	r3, r3, #9
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80087c6:	693b      	ldr	r3, [r7, #16]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087d0:	b5b0      	push	{r4, r5, r7, lr}
 80087d2:	b094      	sub	sp, #80	; 0x50
 80087d4:	af04      	add	r7, sp, #16
 80087d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087d8:	2301      	movs	r3, #1
 80087da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 fb26 	bl	8009e32 <SDIO_GetPowerState>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d102      	bne.n	80087f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087f0:	e0b8      	b.n	8008964 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d02f      	beq.n	800885a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 fd4a 	bl	800a298 <SDMMC_CmdSendCID>
 8008804:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <SD_InitCard+0x40>
    {
      return errorstate;
 800880c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880e:	e0a9      	b.n	8008964 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f001 fb4d 	bl	8009eb6 <SDIO_GetResponse>
 800881c:	4602      	mov	r2, r0
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2104      	movs	r1, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fb44 	bl	8009eb6 <SDIO_GetResponse>
 800882e:	4602      	mov	r2, r0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2108      	movs	r1, #8
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fb3b 	bl	8009eb6 <SDIO_GetResponse>
 8008840:	4602      	mov	r2, r0
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	210c      	movs	r1, #12
 800884c:	4618      	mov	r0, r3
 800884e:	f001 fb32 	bl	8009eb6 <SDIO_GetResponse>
 8008852:	4602      	mov	r2, r0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885e:	2b03      	cmp	r3, #3
 8008860:	d00d      	beq.n	800887e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f107 020e 	add.w	r2, r7, #14
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f001 fd50 	bl	800a312 <SDMMC_CmdSetRelAdd>
 8008872:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <SD_InitCard+0xae>
    {
      return errorstate;
 800887a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887c:	e072      	b.n	8008964 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008882:	2b03      	cmp	r3, #3
 8008884:	d036      	beq.n	80088f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008886:	89fb      	ldrh	r3, [r7, #14]
 8008888:	461a      	mov	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008896:	041b      	lsls	r3, r3, #16
 8008898:	4619      	mov	r1, r3
 800889a:	4610      	mov	r0, r2
 800889c:	f001 fd1a 	bl	800a2d4 <SDMMC_CmdSendCSD>
 80088a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80088a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088aa:	e05b      	b.n	8008964 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 faff 	bl	8009eb6 <SDIO_GetResponse>
 80088b8:	4602      	mov	r2, r0
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2104      	movs	r1, #4
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 faf6 	bl	8009eb6 <SDIO_GetResponse>
 80088ca:	4602      	mov	r2, r0
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2108      	movs	r1, #8
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 faed 	bl	8009eb6 <SDIO_GetResponse>
 80088dc:	4602      	mov	r2, r0
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	210c      	movs	r1, #12
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fae4 	bl	8009eb6 <SDIO_GetResponse>
 80088ee:	4602      	mov	r2, r0
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2104      	movs	r1, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 fadb 	bl	8009eb6 <SDIO_GetResponse>
 8008900:	4603      	mov	r3, r0
 8008902:	0d1a      	lsrs	r2, r3, #20
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008908:	f107 0310 	add.w	r3, r7, #16
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fcd4 	bl	80082bc <HAL_SD_GetCardCSD>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800891a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800891e:	e021      	b.n	8008964 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008928:	041b      	lsls	r3, r3, #16
 800892a:	2200      	movs	r2, #0
 800892c:	461c      	mov	r4, r3
 800892e:	4615      	mov	r5, r2
 8008930:	4622      	mov	r2, r4
 8008932:	462b      	mov	r3, r5
 8008934:	4608      	mov	r0, r1
 8008936:	f001 fbc7 	bl	800a0c8 <SDMMC_CmdSelDesel>
 800893a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800893c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <SD_InitCard+0x176>
  {
    return errorstate;
 8008942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008944:	e00e      	b.n	8008964 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681d      	ldr	r5, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	466c      	mov	r4, sp
 800894e:	f103 0210 	add.w	r2, r3, #16
 8008952:	ca07      	ldmia	r2, {r0, r1, r2}
 8008954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008958:	3304      	adds	r3, #4
 800895a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800895c:	4628      	mov	r0, r5
 800895e:	f001 fa15 	bl	8009d8c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3740      	adds	r7, #64	; 0x40
 8008968:	46bd      	mov	sp, r7
 800896a:	bdb0      	pop	{r4, r5, r7, pc}

0800896c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008974:	2300      	movs	r3, #0
 8008976:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]
 800897c:	2300      	movs	r3, #0
 800897e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f001 fbc2 	bl	800a10e <SDMMC_CmdGoIdleState>
 800898a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	e072      	b.n	8008a7c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f001 fbd5 	bl	800a14a <SDMMC_CmdOperCond>
 80089a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00d      	beq.n	80089c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 fbab 	bl	800a10e <SDMMC_CmdGoIdleState>
 80089b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	e05b      	b.n	8008a7c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d137      	bne.n	8008a42 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fbd5 	bl	800a188 <SDMMC_CmdAppCommand>
 80089de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d02d      	beq.n	8008a42 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089ea:	e047      	b.n	8008a7c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 fbc8 	bl	800a188 <SDMMC_CmdAppCommand>
 80089f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <SD_PowerON+0x98>
    {
      return errorstate;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e03b      	b.n	8008a7c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	491e      	ldr	r1, [pc, #120]	; (8008a84 <SD_PowerON+0x118>)
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fbde 	bl	800a1cc <SDMMC_CmdAppOperCommand>
 8008a10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a1c:	e02e      	b.n	8008a7c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 fa46 	bl	8009eb6 <SDIO_GetResponse>
 8008a2a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	0fdb      	lsrs	r3, r3, #31
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <SD_PowerON+0xcc>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <SD_PowerON+0xce>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	613b      	str	r3, [r7, #16]

    count++;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d802      	bhi.n	8008a52 <SD_PowerON+0xe6>
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0cc      	beq.n	80089ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d902      	bls.n	8008a62 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a60:	e00c      	b.n	8008a7c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	645a      	str	r2, [r3, #68]	; 0x44
 8008a72:	e002      	b.n	8008a7a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	c1100000 	.word	0xc1100000

08008a88 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a9c:	e018      	b.n	8008ad0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	f001 fc52 	bl	800a354 <SDMMC_CmdSendStatus>
 8008ab0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	e009      	b.n	8008ad0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f9f7 	bl	8009eb6 <SDIO_GetResponse>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f9e1 	bl	8009eb6 <SDIO_GetResponse>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afe:	d102      	bne.n	8008b06 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b04:	e02f      	b.n	8008b66 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b06:	f107 030c 	add.w	r3, r7, #12
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f879 	bl	8008c04 <SD_FindSCR>
 8008b12:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	e023      	b.n	8008b66 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01c      	beq.n	8008b62 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	4619      	mov	r1, r3
 8008b34:	4610      	mov	r0, r2
 8008b36:	f001 fb27 	bl	800a188 <SDMMC_CmdAppCommand>
 8008b3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	e00f      	b.n	8008b66 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2102      	movs	r1, #2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 fb60 	bl	800a212 <SDMMC_CmdBusWidth>
 8008b52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	e003      	b.n	8008b66 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e001      	b.n	8008b66 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2100      	movs	r1, #0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 f996 	bl	8009eb6 <SDIO_GetResponse>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b94:	d102      	bne.n	8008b9c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b9a:	e02f      	b.n	8008bfc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f82e 	bl	8008c04 <SD_FindSCR>
 8008ba8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	e023      	b.n	8008bfc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01c      	beq.n	8008bf8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc6:	041b      	lsls	r3, r3, #16
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f001 fadc 	bl	800a188 <SDMMC_CmdAppCommand>
 8008bd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	e00f      	b.n	8008bfc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 fb15 	bl	800a212 <SDMMC_CmdBusWidth>
 8008be8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	e003      	b.n	8008bfc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e001      	b.n	8008bfc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b08f      	sub	sp, #60	; 0x3c
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c0e:	f7fa ff21 	bl	8003a54 <HAL_GetTick>
 8008c12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2108      	movs	r1, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 f980 	bl	8009f30 <SDMMC_CmdBlockLength>
 8008c30:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	e0b2      	b.n	8008da2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c44:	041b      	lsls	r3, r3, #16
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f001 fa9d 	bl	800a188 <SDMMC_CmdAppCommand>
 8008c4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	e0a3      	b.n	8008da2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c60:	2308      	movs	r3, #8
 8008c62:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008c64:	2330      	movs	r3, #48	; 0x30
 8008c66:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008c70:	2301      	movs	r3, #1
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f107 0210 	add.w	r2, r7, #16
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 f92b 	bl	8009eda <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 fae4 	bl	800a256 <SDMMC_CmdSendSCR>
 8008c8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d02a      	beq.n	8008cec <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	e083      	b.n	8008da2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00f      	beq.n	8008cc8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6819      	ldr	r1, [r3, #0]
 8008cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	f107 0208 	add.w	r2, r7, #8
 8008cb4:	18d4      	adds	r4, r2, r3
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	f001 f892 	bl	8009de0 <SDIO_ReadFIFO>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	6023      	str	r3, [r4, #0]
      index++;
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc6:	e006      	b.n	8008cd6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d012      	beq.n	8008cfc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cd6:	f7fa febd 	bl	8003a54 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d102      	bne.n	8008cec <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ce6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cea:	e05a      	b.n	8008da2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0cf      	beq.n	8008c9a <SD_FindSCR+0x96>
 8008cfa:	e000      	b.n	8008cfe <SD_FindSCR+0xfa>
      break;
 8008cfc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2208      	movs	r2, #8
 8008d12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d14:	2308      	movs	r3, #8
 8008d16:	e044      	b.n	8008da2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e037      	b.n	8008da2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2220      	movs	r2, #32
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d48:	2320      	movs	r3, #32
 8008d4a:	e02a      	b.n	8008da2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	061a      	lsls	r2, r3, #24
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d62:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	0e1b      	lsrs	r3, r3, #24
 8008d72:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	601a      	str	r2, [r3, #0]
    scr++;
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	061a      	lsls	r2, r3, #24
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	021b      	lsls	r3, r3, #8
 8008d86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d8a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	0a1b      	lsrs	r3, r3, #8
 8008d90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	0e1b      	lsrs	r3, r3, #24
 8008d9a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	373c      	adds	r7, #60	; 0x3c
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd90      	pop	{r4, r7, pc}

08008daa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e076      	b.n	8008eaa <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d108      	bne.n	8008dd6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dcc:	d009      	beq.n	8008de2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	61da      	str	r2, [r3, #28]
 8008dd4:	e005      	b.n	8008de2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7fa fbc5 	bl	800358c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e66:	ea42 0103 	orr.w	r1, r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	0c1a      	lsrs	r2, r3, #16
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f002 0204 	and.w	r2, r2, #4
 8008e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b088      	sub	sp, #32
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	60f8      	str	r0, [r7, #12]
 8008eba:	60b9      	str	r1, [r7, #8]
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_SPI_Transmit+0x22>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e12d      	b.n	8009130 <HAL_SPI_Transmit+0x27e>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008edc:	f7fa fdba 	bl	8003a54 <HAL_GetTick>
 8008ee0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ee2:	88fb      	ldrh	r3, [r7, #6]
 8008ee4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d002      	beq.n	8008ef8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ef6:	e116      	b.n	8009126 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <HAL_SPI_Transmit+0x52>
 8008efe:	88fb      	ldrh	r3, [r7, #6]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f08:	e10d      	b.n	8009126 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	88fa      	ldrh	r2, [r7, #6]
 8008f22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f50:	d10f      	bne.n	8008f72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7c:	2b40      	cmp	r3, #64	; 0x40
 8008f7e:	d007      	beq.n	8008f90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f98:	d14f      	bne.n	800903a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <HAL_SPI_Transmit+0xf6>
 8008fa2:	8afb      	ldrh	r3, [r7, #22]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d142      	bne.n	800902e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	881a      	ldrh	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb8:	1c9a      	adds	r2, r3, #2
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008fcc:	e02f      	b.n	800902e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d112      	bne.n	8009002 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	881a      	ldrh	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	1c9a      	adds	r2, r3, #2
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	86da      	strh	r2, [r3, #54]	; 0x36
 8009000:	e015      	b.n	800902e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009002:	f7fa fd27 	bl	8003a54 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d803      	bhi.n	800901a <HAL_SPI_Transmit+0x168>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d102      	bne.n	8009020 <HAL_SPI_Transmit+0x16e>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800902c:	e07b      	b.n	8009126 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009032:	b29b      	uxth	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1ca      	bne.n	8008fce <HAL_SPI_Transmit+0x11c>
 8009038:	e050      	b.n	80090dc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <HAL_SPI_Transmit+0x196>
 8009042:	8afb      	ldrh	r3, [r7, #22]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d144      	bne.n	80090d2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	7812      	ldrb	r2, [r2, #0]
 8009054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009064:	b29b      	uxth	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	b29a      	uxth	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800906e:	e030      	b.n	80090d2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b02      	cmp	r3, #2
 800907c:	d113      	bne.n	80090a6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	330c      	adds	r3, #12
 8009088:	7812      	ldrb	r2, [r2, #0]
 800908a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80090a4:	e015      	b.n	80090d2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090a6:	f7fa fcd5 	bl	8003a54 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d803      	bhi.n	80090be <HAL_SPI_Transmit+0x20c>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090bc:	d102      	bne.n	80090c4 <HAL_SPI_Transmit+0x212>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d106      	bne.n	80090d2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80090d0:	e029      	b.n	8009126 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1c9      	bne.n	8009070 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f8b1 	bl	8009248 <SPI_EndRxTxTransaction>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090fa:	2300      	movs	r3, #0
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	613b      	str	r3, [r7, #16]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	77fb      	strb	r3, [r7, #31]
 800911c:	e003      	b.n	8009126 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800912e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	4613      	mov	r3, r2
 8009146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009148:	f7fa fc84 	bl	8003a54 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4413      	add	r3, r2
 8009156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009158:	f7fa fc7c 	bl	8003a54 <HAL_GetTick>
 800915c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800915e:	4b39      	ldr	r3, [pc, #228]	; (8009244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	015b      	lsls	r3, r3, #5
 8009164:	0d1b      	lsrs	r3, r3, #20
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	fb02 f303 	mul.w	r3, r2, r3
 800916c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800916e:	e054      	b.n	800921a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d050      	beq.n	800921a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009178:	f7fa fc6c 	bl	8003a54 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	429a      	cmp	r2, r3
 8009186:	d902      	bls.n	800918e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d13d      	bne.n	800920a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800919c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091a6:	d111      	bne.n	80091cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091b0:	d004      	beq.n	80091bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ba:	d107      	bne.n	80091cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091d4:	d10f      	bne.n	80091f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e017      	b.n	800923a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	3b01      	subs	r3, #1
 8009218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	4013      	ands	r3, r2
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	429a      	cmp	r2, r3
 8009228:	bf0c      	ite	eq
 800922a:	2301      	moveq	r3, #1
 800922c:	2300      	movne	r3, #0
 800922e:	b2db      	uxtb	r3, r3
 8009230:	461a      	mov	r2, r3
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	429a      	cmp	r2, r3
 8009236:	d19b      	bne.n	8009170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3720      	adds	r7, #32
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20000010 	.word	0x20000010

08009248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	2180      	movs	r1, #128	; 0x80
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff ff6a 	bl	8009138 <SPI_WaitFlagStateUntilTimeout>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926e:	f043 0220 	orr.w	r2, r3, #32
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e000      	b.n	800927c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e041      	b.n	800931a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fa f9ba 	bl	8003624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f000 fb42 	bl	800994c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d001      	beq.n	800933c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e03c      	b.n	80093b6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <HAL_TIM_Base_Start+0x9c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d018      	beq.n	8009380 <HAL_TIM_Base_Start+0x5c>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <HAL_TIM_Base_Start+0xa0>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d013      	beq.n	8009380 <HAL_TIM_Base_Start+0x5c>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009360:	d00e      	beq.n	8009380 <HAL_TIM_Base_Start+0x5c>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <HAL_TIM_Base_Start+0xa4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d009      	beq.n	8009380 <HAL_TIM_Base_Start+0x5c>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a16      	ldr	r2, [pc, #88]	; (80093cc <HAL_TIM_Base_Start+0xa8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d004      	beq.n	8009380 <HAL_TIM_Base_Start+0x5c>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <HAL_TIM_Base_Start+0xac>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d111      	bne.n	80093a4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b06      	cmp	r3, #6
 8009390:	d010      	beq.n	80093b4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0201 	orr.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a2:	e007      	b.n	80093b4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bc80      	pop	{r7}
 80093be:	4770      	bx	lr
 80093c0:	40012c00 	.word	0x40012c00
 80093c4:	40013400 	.word	0x40013400
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00

080093d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6a1a      	ldr	r2, [r3, #32]
 80093e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80093e6:	4013      	ands	r3, r2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10f      	bne.n	800940c <HAL_TIM_Base_Stop+0x38>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a1a      	ldr	r2, [r3, #32]
 80093f2:	f240 4344 	movw	r3, #1092	; 0x444
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d107      	bne.n	800940c <HAL_TIM_Base_Stop+0x38>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0201 	bic.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	bc80      	pop	{r7}
 800941e:	4770      	bx	lr

08009420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	d001      	beq.n	8009438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e044      	b.n	80094c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0201 	orr.w	r2, r2, #1
 800944e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <HAL_TIM_Base_Start_IT+0xac>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d018      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x6c>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a1c      	ldr	r2, [pc, #112]	; (80094d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d013      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x6c>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946c:	d00e      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x6c>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <HAL_TIM_Base_Start_IT+0xb4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d009      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x6c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a16      	ldr	r2, [pc, #88]	; (80094d8 <HAL_TIM_Base_Start_IT+0xb8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d004      	beq.n	800948c <HAL_TIM_Base_Start_IT+0x6c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a15      	ldr	r2, [pc, #84]	; (80094dc <HAL_TIM_Base_Start_IT+0xbc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d111      	bne.n	80094b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b06      	cmp	r3, #6
 800949c:	d010      	beq.n	80094c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0201 	orr.w	r2, r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ae:	e007      	b.n	80094c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0201 	orr.w	r2, r2, #1
 80094be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr
 80094cc:	40012c00 	.word	0x40012c00
 80094d0:	40013400 	.word	0x40013400
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00

080094e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d122      	bne.n	800953c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b02      	cmp	r3, #2
 8009502:	d11b      	bne.n	800953c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0202 	mvn.w	r2, #2
 800950c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f9f6 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 8009528:	e005      	b.n	8009536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9e9 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f9f8 	bl	8009926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f003 0304 	and.w	r3, r3, #4
 8009546:	2b04      	cmp	r3, #4
 8009548:	d122      	bne.n	8009590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f003 0304 	and.w	r3, r3, #4
 8009554:	2b04      	cmp	r3, #4
 8009556:	d11b      	bne.n	8009590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f06f 0204 	mvn.w	r2, #4
 8009560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2202      	movs	r2, #2
 8009566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f9cc 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 800957c:	e005      	b.n	800958a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f9bf 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9ce 	bl	8009926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 0308 	and.w	r3, r3, #8
 800959a:	2b08      	cmp	r3, #8
 800959c:	d122      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f003 0308 	and.w	r3, r3, #8
 80095a8:	2b08      	cmp	r3, #8
 80095aa:	d11b      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f06f 0208 	mvn.w	r2, #8
 80095b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2204      	movs	r2, #4
 80095ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f9a2 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 80095d0:	e005      	b.n	80095de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f995 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f9a4 	bl	8009926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f003 0310 	and.w	r3, r3, #16
 80095ee:	2b10      	cmp	r3, #16
 80095f0:	d122      	bne.n	8009638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f003 0310 	and.w	r3, r3, #16
 80095fc:	2b10      	cmp	r3, #16
 80095fe:	d11b      	bne.n	8009638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f06f 0210 	mvn.w	r2, #16
 8009608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2208      	movs	r2, #8
 800960e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f978 	bl	8009914 <HAL_TIM_IC_CaptureCallback>
 8009624:	e005      	b.n	8009632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f96b 	bl	8009902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f97a 	bl	8009926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b01      	cmp	r3, #1
 8009644:	d10e      	bne.n	8009664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b01      	cmp	r3, #1
 8009652:	d107      	bne.n	8009664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f06f 0201 	mvn.w	r2, #1
 800965c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7f9 f8ee 	bl	8002840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966e:	2b80      	cmp	r3, #128	; 0x80
 8009670:	d10e      	bne.n	8009690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967c:	2b80      	cmp	r3, #128	; 0x80
 800967e:	d107      	bne.n	8009690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fb75 	bl	8009d7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969a:	2b40      	cmp	r3, #64	; 0x40
 800969c:	d10e      	bne.n	80096bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a8:	2b40      	cmp	r3, #64	; 0x40
 80096aa:	d107      	bne.n	80096bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f93e 	bl	8009938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	d10e      	bne.n	80096e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d107      	bne.n	80096e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f06f 0220 	mvn.w	r2, #32
 80096e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb40 	bl	8009d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_TIM_ConfigClockSource+0x1c>
 8009708:	2302      	movs	r3, #2
 800970a:	e0b4      	b.n	8009876 <HAL_TIM_ConfigClockSource+0x186>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800972a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009744:	d03e      	beq.n	80097c4 <HAL_TIM_ConfigClockSource+0xd4>
 8009746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800974a:	f200 8087 	bhi.w	800985c <HAL_TIM_ConfigClockSource+0x16c>
 800974e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009752:	f000 8086 	beq.w	8009862 <HAL_TIM_ConfigClockSource+0x172>
 8009756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975a:	d87f      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 800975c:	2b70      	cmp	r3, #112	; 0x70
 800975e:	d01a      	beq.n	8009796 <HAL_TIM_ConfigClockSource+0xa6>
 8009760:	2b70      	cmp	r3, #112	; 0x70
 8009762:	d87b      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 8009764:	2b60      	cmp	r3, #96	; 0x60
 8009766:	d050      	beq.n	800980a <HAL_TIM_ConfigClockSource+0x11a>
 8009768:	2b60      	cmp	r3, #96	; 0x60
 800976a:	d877      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 800976c:	2b50      	cmp	r3, #80	; 0x50
 800976e:	d03c      	beq.n	80097ea <HAL_TIM_ConfigClockSource+0xfa>
 8009770:	2b50      	cmp	r3, #80	; 0x50
 8009772:	d873      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 8009774:	2b40      	cmp	r3, #64	; 0x40
 8009776:	d058      	beq.n	800982a <HAL_TIM_ConfigClockSource+0x13a>
 8009778:	2b40      	cmp	r3, #64	; 0x40
 800977a:	d86f      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 800977c:	2b30      	cmp	r3, #48	; 0x30
 800977e:	d064      	beq.n	800984a <HAL_TIM_ConfigClockSource+0x15a>
 8009780:	2b30      	cmp	r3, #48	; 0x30
 8009782:	d86b      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 8009784:	2b20      	cmp	r3, #32
 8009786:	d060      	beq.n	800984a <HAL_TIM_ConfigClockSource+0x15a>
 8009788:	2b20      	cmp	r3, #32
 800978a:	d867      	bhi.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
 800978c:	2b00      	cmp	r3, #0
 800978e:	d05c      	beq.n	800984a <HAL_TIM_ConfigClockSource+0x15a>
 8009790:	2b10      	cmp	r3, #16
 8009792:	d05a      	beq.n	800984a <HAL_TIM_ConfigClockSource+0x15a>
 8009794:	e062      	b.n	800985c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6899      	ldr	r1, [r3, #8]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f000 fa53 	bl	8009c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	609a      	str	r2, [r3, #8]
      break;
 80097c2:	e04f      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6899      	ldr	r1, [r3, #8]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f000 fa3c 	bl	8009c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097e6:	609a      	str	r2, [r3, #8]
      break;
 80097e8:	e03c      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f000 f9b3 	bl	8009b62 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2150      	movs	r1, #80	; 0x50
 8009802:	4618      	mov	r0, r3
 8009804:	f000 fa0a 	bl	8009c1c <TIM_ITRx_SetConfig>
      break;
 8009808:	e02c      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6859      	ldr	r1, [r3, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	461a      	mov	r2, r3
 8009818:	f000 f9d1 	bl	8009bbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2160      	movs	r1, #96	; 0x60
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f9fa 	bl	8009c1c <TIM_ITRx_SetConfig>
      break;
 8009828:	e01c      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	6859      	ldr	r1, [r3, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	461a      	mov	r2, r3
 8009838:	f000 f993 	bl	8009b62 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2140      	movs	r1, #64	; 0x40
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f9ea 	bl	8009c1c <TIM_ITRx_SetConfig>
      break;
 8009848:	e00c      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f000 f9e1 	bl	8009c1c <TIM_ITRx_SetConfig>
      break;
 800985a:	e003      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
      break;
 8009860:	e000      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800988e:	2b01      	cmp	r3, #1
 8009890:	d101      	bne.n	8009896 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009892:	2302      	movs	r3, #2
 8009894:	e031      	b.n	80098fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f8c9 	bl	8009a40 <TIM_SlaveTimer_SetConfig>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e018      	b.n	80098fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68da      	ldr	r2, [r3, #12]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr

08009914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	bc80      	pop	{r7}
 8009924:	4770      	bx	lr

08009926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	bc80      	pop	{r7}
 8009948:	4770      	bx	lr
	...

0800994c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a33      	ldr	r2, [pc, #204]	; (8009a2c <TIM_Base_SetConfig+0xe0>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a32      	ldr	r2, [pc, #200]	; (8009a30 <TIM_Base_SetConfig+0xe4>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00f      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009972:	d00b      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a2f      	ldr	r2, [pc, #188]	; (8009a34 <TIM_Base_SetConfig+0xe8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a2e      	ldr	r2, [pc, #184]	; (8009a38 <TIM_Base_SetConfig+0xec>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a2d      	ldr	r2, [pc, #180]	; (8009a3c <TIM_Base_SetConfig+0xf0>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d108      	bne.n	800999e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a22      	ldr	r2, [pc, #136]	; (8009a2c <TIM_Base_SetConfig+0xe0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d013      	beq.n	80099ce <TIM_Base_SetConfig+0x82>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <TIM_Base_SetConfig+0xe4>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d00f      	beq.n	80099ce <TIM_Base_SetConfig+0x82>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b4:	d00b      	beq.n	80099ce <TIM_Base_SetConfig+0x82>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a1e      	ldr	r2, [pc, #120]	; (8009a34 <TIM_Base_SetConfig+0xe8>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d007      	beq.n	80099ce <TIM_Base_SetConfig+0x82>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a1d      	ldr	r2, [pc, #116]	; (8009a38 <TIM_Base_SetConfig+0xec>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d003      	beq.n	80099ce <TIM_Base_SetConfig+0x82>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a1c      	ldr	r2, [pc, #112]	; (8009a3c <TIM_Base_SetConfig+0xf0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d108      	bne.n	80099e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a09      	ldr	r2, [pc, #36]	; (8009a2c <TIM_Base_SetConfig+0xe0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d003      	beq.n	8009a14 <TIM_Base_SetConfig+0xc8>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a08      	ldr	r2, [pc, #32]	; (8009a30 <TIM_Base_SetConfig+0xe4>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d103      	bne.n	8009a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	691a      	ldr	r2, [r3, #16]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	615a      	str	r2, [r3, #20]
}
 8009a22:	bf00      	nop
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bc80      	pop	{r7}
 8009a2a:	4770      	bx	lr
 8009a2c:	40012c00 	.word	0x40012c00
 8009a30:	40013400 	.word	0x40013400
 8009a34:	40000400 	.word	0x40000400
 8009a38:	40000800 	.word	0x40000800
 8009a3c:	40000c00 	.word	0x40000c00

08009a40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2b70      	cmp	r3, #112	; 0x70
 8009a88:	d01a      	beq.n	8009ac0 <TIM_SlaveTimer_SetConfig+0x80>
 8009a8a:	2b70      	cmp	r3, #112	; 0x70
 8009a8c:	d860      	bhi.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
 8009a8e:	2b60      	cmp	r3, #96	; 0x60
 8009a90:	d054      	beq.n	8009b3c <TIM_SlaveTimer_SetConfig+0xfc>
 8009a92:	2b60      	cmp	r3, #96	; 0x60
 8009a94:	d85c      	bhi.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
 8009a96:	2b50      	cmp	r3, #80	; 0x50
 8009a98:	d046      	beq.n	8009b28 <TIM_SlaveTimer_SetConfig+0xe8>
 8009a9a:	2b50      	cmp	r3, #80	; 0x50
 8009a9c:	d858      	bhi.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d019      	beq.n	8009ad6 <TIM_SlaveTimer_SetConfig+0x96>
 8009aa2:	2b40      	cmp	r3, #64	; 0x40
 8009aa4:	d854      	bhi.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
 8009aa6:	2b30      	cmp	r3, #48	; 0x30
 8009aa8:	d055      	beq.n	8009b56 <TIM_SlaveTimer_SetConfig+0x116>
 8009aaa:	2b30      	cmp	r3, #48	; 0x30
 8009aac:	d850      	bhi.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d051      	beq.n	8009b56 <TIM_SlaveTimer_SetConfig+0x116>
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d84c      	bhi.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d04d      	beq.n	8009b56 <TIM_SlaveTimer_SetConfig+0x116>
 8009aba:	2b10      	cmp	r3, #16
 8009abc:	d04b      	beq.n	8009b56 <TIM_SlaveTimer_SetConfig+0x116>
 8009abe:	e047      	b.n	8009b50 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	68d9      	ldr	r1, [r3, #12]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	f000 f8be 	bl	8009c50 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009ad4:	e040      	b.n	8009b58 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b05      	cmp	r3, #5
 8009adc:	d101      	bne.n	8009ae2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e03b      	b.n	8009b5a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6a1a      	ldr	r2, [r3, #32]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f022 0201 	bic.w	r2, r2, #1
 8009af8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	621a      	str	r2, [r3, #32]
      break;
 8009b26:	e017      	b.n	8009b58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	6899      	ldr	r1, [r3, #8]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	461a      	mov	r2, r3
 8009b36:	f000 f814 	bl	8009b62 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b3a:	e00d      	b.n	8009b58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	6899      	ldr	r1, [r3, #8]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f000 f838 	bl	8009bbe <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b4e:	e003      	b.n	8009b58 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	75fb      	strb	r3, [r7, #23]
      break;
 8009b54:	e000      	b.n	8009b58 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009b56:	bf00      	nop
  }

  return status;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b087      	sub	sp, #28
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	f023 0201 	bic.w	r2, r3, #1
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f023 030a 	bic.w	r3, r3, #10
 8009b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	621a      	str	r2, [r3, #32]
}
 8009bb4:	bf00      	nop
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bc80      	pop	{r7}
 8009bbc:	4770      	bx	lr

08009bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b087      	sub	sp, #28
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	f023 0210 	bic.w	r2, r3, #16
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	031b      	lsls	r3, r3, #12
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	621a      	str	r2, [r3, #32]
}
 8009c12:	bf00      	nop
 8009c14:	371c      	adds	r7, #28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr

08009c1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	f043 0307 	orr.w	r3, r3, #7
 8009c3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	609a      	str	r2, [r3, #8]
}
 8009c46:	bf00      	nop
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr

08009c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	021a      	lsls	r2, r3, #8
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	431a      	orrs	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	609a      	str	r2, [r3, #8]
}
 8009c84:	bf00      	nop
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bc80      	pop	{r7}
 8009c8c:	4770      	bx	lr
	...

08009c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e050      	b.n	8009d4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a1b      	ldr	r2, [pc, #108]	; (8009d54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d018      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a19      	ldr	r2, [pc, #100]	; (8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d013      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfe:	d00e      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a15      	ldr	r2, [pc, #84]	; (8009d5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d009      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d004      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a12      	ldr	r2, [pc, #72]	; (8009d64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d10c      	bne.n	8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bc80      	pop	{r7}
 8009d52:	4770      	bx	lr
 8009d54:	40012c00 	.word	0x40012c00
 8009d58:	40013400 	.word	0x40013400
 8009d5c:	40000400 	.word	0x40000400
 8009d60:	40000800 	.word	0x40000800
 8009d64:	40000c00 	.word	0x40000c00

08009d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bc80      	pop	{r7}
 8009d78:	4770      	bx	lr

08009d7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr

08009d8c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	b480      	push	{r7}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	f107 001c 	add.w	r0, r7, #28
 8009d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009da2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009da4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009da6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009daa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009dae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009db2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009db6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009dc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	b004      	add	sp, #16
 8009dde:	4770      	bx	lr

08009de0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr

08009df8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr

08009e18 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2203      	movs	r2, #3
 8009e24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr

08009e32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0303 	and.w	r3, r3, #3
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr

08009e4c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e86:	f023 030f 	bic.w	r3, r3, #15
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	b2db      	uxtb	r3, r3
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bc80      	pop	{r7}
 8009eb4:	4770      	bx	lr

08009eb6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b085      	sub	sp, #20
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	4413      	add	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
}  
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr

08009eda <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b085      	sub	sp, #20
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f00:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009f06:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0

}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f3e:	2310      	movs	r3, #16
 8009f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff ff78 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f60:	2110      	movs	r1, #16
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa18 	bl	800a398 <SDMMC_GetCmdResp1>
 8009f68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6a:	69fb      	ldr	r3, [r7, #28]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3720      	adds	r7, #32
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009f82:	2311      	movs	r3, #17
 8009f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f86:	2340      	movs	r3, #64	; 0x40
 8009f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f94:	f107 0308 	add.w	r3, r7, #8
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff ff56 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa4:	2111      	movs	r1, #17
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9f6 	bl	800a398 <SDMMC_GetCmdResp1>
 8009fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fae:	69fb      	ldr	r3, [r7, #28]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009fc6:	2312      	movs	r3, #18
 8009fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fd8:	f107 0308 	add.w	r3, r7, #8
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff ff34 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	2112      	movs	r1, #18
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f9d4 	bl	800a398 <SDMMC_GetCmdResp1>
 8009ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3720      	adds	r7, #32
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a00a:	2318      	movs	r3, #24
 800a00c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a00e:	2340      	movs	r3, #64	; 0x40
 800a010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a012:	2300      	movs	r3, #0
 800a014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a01a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a01c:	f107 0308 	add.w	r3, r7, #8
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ff12 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a028:	f241 3288 	movw	r2, #5000	; 0x1388
 800a02c:	2118      	movs	r1, #24
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f9b2 	bl	800a398 <SDMMC_GetCmdResp1>
 800a034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a036:	69fb      	ldr	r3, [r7, #28]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a04e:	2319      	movs	r3, #25
 800a050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a052:	2340      	movs	r3, #64	; 0x40
 800a054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a056:	2300      	movs	r3, #0
 800a058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a05e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a060:	f107 0308 	add.w	r3, r7, #8
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff fef0 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a06c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a070:	2119      	movs	r1, #25
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f990 	bl	800a398 <SDMMC_GetCmdResp1>
 800a078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a07a:	69fb      	ldr	r3, [r7, #28]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a090:	230c      	movs	r3, #12
 800a092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a094:	2340      	movs	r3, #64	; 0x40
 800a096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a098:	2300      	movs	r3, #0
 800a09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0a2:	f107 0308 	add.w	r3, r7, #8
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fecf 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a0ae:	4a05      	ldr	r2, [pc, #20]	; (800a0c4 <SDMMC_CmdStopTransfer+0x40>)
 800a0b0:	210c      	movs	r1, #12
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f970 	bl	800a398 <SDMMC_GetCmdResp1>
 800a0b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	05f5e100 	.word	0x05f5e100

0800a0c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	; 0x28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a0d8:	2307      	movs	r3, #7
 800a0da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0ea:	f107 0310 	add.w	r3, r7, #16
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff feab 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a0f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0fa:	2107      	movs	r1, #7
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f94b 	bl	800a398 <SDMMC_GetCmdResp1>
 800a102:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a106:	4618      	mov	r0, r3
 800a108:	3728      	adds	r7, #40	; 0x28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b088      	sub	sp, #32
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a11e:	2300      	movs	r3, #0
 800a120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a12a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a12c:	f107 0308 	add.w	r3, r7, #8
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fe8a 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fb63 	bl	800a804 <SDMMC_GetCmdError>
 800a13e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a140:	69fb      	ldr	r3, [r7, #28]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b088      	sub	sp, #32
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a152:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a158:	2308      	movs	r3, #8
 800a15a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a15c:	2340      	movs	r3, #64	; 0x40
 800a15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a16a:	f107 0308 	add.w	r3, r7, #8
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff fe6b 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 faf6 	bl	800a768 <SDMMC_GetCmdResp7>
 800a17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17e:	69fb      	ldr	r3, [r7, #28]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a196:	2337      	movs	r3, #55	; 0x37
 800a198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a19a:	2340      	movs	r3, #64	; 0x40
 800a19c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a8:	f107 0308 	add.w	r3, r7, #8
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fe4c 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a1b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b8:	2137      	movs	r1, #55	; 0x37
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f8ec 	bl	800a398 <SDMMC_GetCmdResp1>
 800a1c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3720      	adds	r7, #32
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a1e2:	2329      	movs	r3, #41	; 0x29
 800a1e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1e6:	2340      	movs	r3, #64	; 0x40
 800a1e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff fe26 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9ff 	bl	800a604 <SDMMC_GetCmdResp3>
 800a206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a208:	69fb      	ldr	r3, [r7, #28]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3720      	adds	r7, #32
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b088      	sub	sp, #32
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a220:	2306      	movs	r3, #6
 800a222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a224:	2340      	movs	r3, #64	; 0x40
 800a226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a22c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a230:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a232:	f107 0308 	add.w	r3, r7, #8
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff fe07 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a242:	2106      	movs	r1, #6
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f8a7 	bl	800a398 <SDMMC_GetCmdResp1>
 800a24a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a24c:	69fb      	ldr	r3, [r7, #28]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b088      	sub	sp, #32
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a262:	2333      	movs	r3, #51	; 0x33
 800a264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a274:	f107 0308 	add.w	r3, r7, #8
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fde6 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a280:	f241 3288 	movw	r2, #5000	; 0x1388
 800a284:	2133      	movs	r1, #51	; 0x33
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f886 	bl	800a398 <SDMMC_GetCmdResp1>
 800a28c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a28e:	69fb      	ldr	r3, [r7, #28]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3720      	adds	r7, #32
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2a8:	23c0      	movs	r3, #192	; 0xc0
 800a2aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff fdc5 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f956 	bl	800a574 <SDMMC_GetCmdResp2>
 800a2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ca:	69fb      	ldr	r3, [r7, #28]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3720      	adds	r7, #32
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b088      	sub	sp, #32
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a2e2:	2309      	movs	r3, #9
 800a2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2e6:	23c0      	movs	r3, #192	; 0xc0
 800a2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fda6 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f937 	bl	800a574 <SDMMC_GetCmdResp2>
 800a306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a308:	69fb      	ldr	r3, [r7, #28]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3720      	adds	r7, #32
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b088      	sub	sp, #32
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a320:	2303      	movs	r3, #3
 800a322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a324:	2340      	movs	r3, #64	; 0x40
 800a326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a32c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a330:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a332:	f107 0308 	add.w	r3, r7, #8
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fd87 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	2103      	movs	r1, #3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f99a 	bl	800a67c <SDMMC_GetCmdResp6>
 800a348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a34a:	69fb      	ldr	r3, [r7, #28]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a362:	230d      	movs	r3, #13
 800a364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a366:	2340      	movs	r3, #64	; 0x40
 800a368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a36a:	2300      	movs	r3, #0
 800a36c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a36e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a372:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a374:	f107 0308 	add.w	r3, r7, #8
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7ff fd66 	bl	8009e4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a380:	f241 3288 	movw	r2, #5000	; 0x1388
 800a384:	210d      	movs	r1, #13
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f806 	bl	800a398 <SDMMC_GetCmdResp1>
 800a38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a38e:	69fb      	ldr	r3, [r7, #28]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3720      	adds	r7, #32
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a3a6:	4b70      	ldr	r3, [pc, #448]	; (800a568 <SDMMC_GetCmdResp1+0x1d0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a70      	ldr	r2, [pc, #448]	; (800a56c <SDMMC_GetCmdResp1+0x1d4>)
 800a3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b0:	0a5a      	lsrs	r2, r3, #9
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	fb02 f303 	mul.w	r3, r2, r3
 800a3b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	1e5a      	subs	r2, r3, #1
 800a3be:	61fa      	str	r2, [r7, #28]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3c8:	e0c9      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0ef      	beq.n	800a3ba <SDMMC_GetCmdResp1+0x22>
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1ea      	bne.n	800a3ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d004      	beq.n	800a3fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2204      	movs	r2, #4
 800a3f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	e0b1      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d004      	beq.n	800a410 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2201      	movs	r2, #1
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e0a6      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	22c5      	movs	r2, #197	; 0xc5
 800a414:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fd41 	bl	8009e9e <SDIO_GetCommandResponse>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	4293      	cmp	r3, r2
 800a424:	d001      	beq.n	800a42a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a426:	2301      	movs	r3, #1
 800a428:	e099      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a42a:	2100      	movs	r1, #0
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff fd42 	bl	8009eb6 <SDIO_GetResponse>
 800a432:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4b4e      	ldr	r3, [pc, #312]	; (800a570 <SDMMC_GetCmdResp1+0x1d8>)
 800a438:	4013      	ands	r3, r2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a43e:	2300      	movs	r3, #0
 800a440:	e08d      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b00      	cmp	r3, #0
 800a446:	da02      	bge.n	800a44e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a44c:	e087      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a458:	2340      	movs	r3, #64	; 0x40
 800a45a:	e080      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a466:	2380      	movs	r3, #128	; 0x80
 800a468:	e079      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a474:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a478:	e071      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a484:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a488:	e069      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a498:	e061      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4a8:	e059      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4b8:	e051      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4c8:	e049      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4d8:	e041      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a4e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e8:	e039      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4f8:	e031      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a508:	e029      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a518:	e021      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a524:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a528:	e019      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a538:	e011      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a548:	e009      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f003 0308 	and.w	r3, r3, #8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a558:	e001      	b.n	800a55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a55a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3720      	adds	r7, #32
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000010 	.word	0x20000010
 800a56c:	10624dd3 	.word	0x10624dd3
 800a570:	fdffe008 	.word	0xfdffe008

0800a574 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a57c:	4b1f      	ldr	r3, [pc, #124]	; (800a5fc <SDMMC_GetCmdResp2+0x88>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a1f      	ldr	r2, [pc, #124]	; (800a600 <SDMMC_GetCmdResp2+0x8c>)
 800a582:	fba2 2303 	umull	r2, r3, r2, r3
 800a586:	0a5b      	lsrs	r3, r3, #9
 800a588:	f241 3288 	movw	r2, #5000	; 0x1388
 800a58c:	fb02 f303 	mul.w	r3, r2, r3
 800a590:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1e5a      	subs	r2, r3, #1
 800a596:	60fa      	str	r2, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a59c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5a0:	e026      	b.n	800a5f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0ef      	beq.n	800a592 <SDMMC_GetCmdResp2+0x1e>
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1ea      	bne.n	800a592 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d004      	beq.n	800a5d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	e00e      	b.n	800a5f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e003      	b.n	800a5f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	22c5      	movs	r2, #197	; 0xc5
 800a5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bc80      	pop	{r7}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000010 	.word	0x20000010
 800a600:	10624dd3 	.word	0x10624dd3

0800a604 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a60c:	4b19      	ldr	r3, [pc, #100]	; (800a674 <SDMMC_GetCmdResp3+0x70>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a19      	ldr	r2, [pc, #100]	; (800a678 <SDMMC_GetCmdResp3+0x74>)
 800a612:	fba2 2303 	umull	r2, r3, r2, r3
 800a616:	0a5b      	lsrs	r3, r3, #9
 800a618:	f241 3288 	movw	r2, #5000	; 0x1388
 800a61c:	fb02 f303 	mul.w	r3, r2, r3
 800a620:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	1e5a      	subs	r2, r3, #1
 800a626:	60fa      	str	r2, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d102      	bne.n	800a632 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a62c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a630:	e01b      	b.n	800a66a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a636:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0ef      	beq.n	800a622 <SDMMC_GetCmdResp3+0x1e>
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1ea      	bne.n	800a622 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	d004      	beq.n	800a662 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2204      	movs	r2, #4
 800a65c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a65e:	2304      	movs	r3, #4
 800a660:	e003      	b.n	800a66a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	22c5      	movs	r2, #197	; 0xc5
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	bc80      	pop	{r7}
 800a672:	4770      	bx	lr
 800a674:	20000010 	.word	0x20000010
 800a678:	10624dd3 	.word	0x10624dd3

0800a67c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	460b      	mov	r3, r1
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a68a:	4b35      	ldr	r3, [pc, #212]	; (800a760 <SDMMC_GetCmdResp6+0xe4>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a35      	ldr	r2, [pc, #212]	; (800a764 <SDMMC_GetCmdResp6+0xe8>)
 800a690:	fba2 2303 	umull	r2, r3, r2, r3
 800a694:	0a5b      	lsrs	r3, r3, #9
 800a696:	f241 3288 	movw	r2, #5000	; 0x1388
 800a69a:	fb02 f303 	mul.w	r3, r2, r3
 800a69e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	1e5a      	subs	r2, r3, #1
 800a6a4:	61fa      	str	r2, [r7, #28]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6ae:	e052      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0ef      	beq.n	800a6a0 <SDMMC_GetCmdResp6+0x24>
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1ea      	bne.n	800a6a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2204      	movs	r2, #4
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6dc:	2304      	movs	r3, #4
 800a6de:	e03a      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e02f      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7ff fbd1 	bl	8009e9e <SDIO_GetCommandResponse>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	461a      	mov	r2, r3
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	4293      	cmp	r3, r2
 800a704:	d001      	beq.n	800a70a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a706:	2301      	movs	r3, #1
 800a708:	e025      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	22c5      	movs	r2, #197	; 0xc5
 800a70e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a710:	2100      	movs	r1, #0
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7ff fbcf 	bl	8009eb6 <SDIO_GetResponse>
 800a718:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	0c1b      	lsrs	r3, r3, #16
 800a728:	b29a      	uxth	r2, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a72e:	2300      	movs	r3, #0
 800a730:	e011      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a73c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a740:	e009      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a750:	e001      	b.n	800a756 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000010 	.word	0x20000010
 800a764:	10624dd3 	.word	0x10624dd3

0800a768 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a770:	4b22      	ldr	r3, [pc, #136]	; (800a7fc <SDMMC_GetCmdResp7+0x94>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a22      	ldr	r2, [pc, #136]	; (800a800 <SDMMC_GetCmdResp7+0x98>)
 800a776:	fba2 2303 	umull	r2, r3, r2, r3
 800a77a:	0a5b      	lsrs	r3, r3, #9
 800a77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a780:	fb02 f303 	mul.w	r3, r2, r3
 800a784:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	1e5a      	subs	r2, r3, #1
 800a78a:	60fa      	str	r2, [r7, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d102      	bne.n	800a796 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a794:	e02c      	b.n	800a7f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0ef      	beq.n	800a786 <SDMMC_GetCmdResp7+0x1e>
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1ea      	bne.n	800a786 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d004      	beq.n	800a7c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2204      	movs	r2, #4
 800a7c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	e014      	b.n	800a7f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d004      	beq.n	800a7dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e009      	b.n	800a7f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2240      	movs	r2, #64	; 0x40
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7ee:	2300      	movs	r3, #0
  
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bc80      	pop	{r7}
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	20000010 	.word	0x20000010
 800a800:	10624dd3 	.word	0x10624dd3

0800a804 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a80c:	4b10      	ldr	r3, [pc, #64]	; (800a850 <SDMMC_GetCmdError+0x4c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a10      	ldr	r2, [pc, #64]	; (800a854 <SDMMC_GetCmdError+0x50>)
 800a812:	fba2 2303 	umull	r2, r3, r2, r3
 800a816:	0a5b      	lsrs	r3, r3, #9
 800a818:	f241 3288 	movw	r2, #5000	; 0x1388
 800a81c:	fb02 f303 	mul.w	r3, r2, r3
 800a820:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1e5a      	subs	r2, r3, #1
 800a826:	60fa      	str	r2, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a82c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a830:	e009      	b.n	800a846 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0f1      	beq.n	800a822 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	22c5      	movs	r2, #197	; 0xc5
 800a842:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bc80      	pop	{r7}
 800a84e:	4770      	bx	lr
 800a850:	20000010 	.word	0x20000010
 800a854:	10624dd3 	.word	0x10624dd3

0800a858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a858:	b084      	sub	sp, #16
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	f107 0014 	add.w	r0, r7, #20
 800a866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	bc80      	pop	{r7}
 800a874:	b004      	add	sp, #16
 800a876:	4770      	bx	lr

0800a878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a888:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a88c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	b29a      	uxth	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a8ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a8b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	43db      	mvns	r3, r3
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bc80      	pop	{r7}
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	f107 0014 	add.w	r0, r7, #20
 800a8fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	bc80      	pop	{r7}
 800a92c:	b004      	add	sp, #16
 800a92e:	4770      	bx	lr

0800a930 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a930:	b480      	push	{r7}
 800a932:	b09d      	sub	sp, #116	; 0x74
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a956:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	78db      	ldrb	r3, [r3, #3]
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d81f      	bhi.n	800a9a2 <USB_ActivateEndpoint+0x72>
 800a962:	a201      	add	r2, pc, #4	; (adr r2, 800a968 <USB_ActivateEndpoint+0x38>)
 800a964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a968:	0800a979 	.word	0x0800a979
 800a96c:	0800a995 	.word	0x0800a995
 800a970:	0800a9ab 	.word	0x0800a9ab
 800a974:	0800a987 	.word	0x0800a987
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a97c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a980:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a984:	e012      	b.n	800a9ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a986:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a98a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a98e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a992:	e00b      	b.n	800a9ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a994:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a99c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a9a0:	e004      	b.n	800a9ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a9a8:	e000      	b.n	800a9ac <USB_ActivateEndpoint+0x7c>
      break;
 800a9aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	441a      	add	r2, r3
 800a9b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a9ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	441a      	add	r2, r3
 800a9fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800aa00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	7b1b      	ldrb	r3, [r3, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f040 8178 	bne.w	800ad0e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 8084 	beq.w	800ab30 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	461a      	mov	r2, r3
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	4413      	add	r3, r2
 800aa3a:	61bb      	str	r3, [r7, #24]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	011a      	lsls	r2, r3, #4
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	88db      	ldrh	r3, [r3, #6]
 800aa50:	085b      	lsrs	r3, r3, #1
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	827b      	strh	r3, [r7, #18]
 800aa6a:	8a7b      	ldrh	r3, [r7, #18]
 800aa6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01b      	beq.n	800aaac <USB_ActivateEndpoint+0x17c>
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8a:	823b      	strh	r3, [r7, #16]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	441a      	add	r2, r3
 800aa96:	8a3b      	ldrh	r3, [r7, #16]
 800aa98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	78db      	ldrb	r3, [r3, #3]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d020      	beq.n	800aaf6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaca:	81bb      	strh	r3, [r7, #12]
 800aacc:	89bb      	ldrh	r3, [r7, #12]
 800aace:	f083 0320 	eor.w	r3, r3, #32
 800aad2:	81bb      	strh	r3, [r7, #12]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	441a      	add	r2, r3
 800aade:	89bb      	ldrh	r3, [r7, #12]
 800aae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	8013      	strh	r3, [r2, #0]
 800aaf4:	e2d5      	b.n	800b0a2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	881b      	ldrh	r3, [r3, #0]
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab0c:	81fb      	strh	r3, [r7, #14]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	441a      	add	r2, r3
 800ab18:	89fb      	ldrh	r3, [r7, #14]
 800ab1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8013      	strh	r3, [r2, #0]
 800ab2e:	e2b8      	b.n	800b0a2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	633b      	str	r3, [r7, #48]	; 0x30
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	4413      	add	r3, r2
 800ab42:	633b      	str	r3, [r7, #48]	; 0x30
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	011a      	lsls	r2, r3, #4
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ab52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	88db      	ldrh	r3, [r3, #6]
 800ab58:	085b      	lsrs	r3, r3, #1
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	461a      	mov	r2, r3
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	4413      	add	r3, r2
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	011a      	lsls	r2, r3, #4
 800ab7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab80:	4413      	add	r3, r2
 800ab82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	801a      	strh	r2, [r3, #0]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b3e      	cmp	r3, #62	; 0x3e
 800ab9e:	d91d      	bls.n	800abdc <USB_ActivateEndpoint+0x2ac>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	66bb      	str	r3, [r7, #104]	; 0x68
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f003 031f 	and.w	r3, r3, #31
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d102      	bne.n	800abba <USB_ActivateEndpoint+0x28a>
 800abb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abb6:	3b01      	subs	r3, #1
 800abb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	029b      	lsls	r3, r3, #10
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	4313      	orrs	r3, r2
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	801a      	strh	r2, [r3, #0]
 800abda:	e026      	b.n	800ac2a <USB_ActivateEndpoint+0x2fa>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <USB_ActivateEndpoint+0x2ca>
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	801a      	strh	r2, [r3, #0]
 800abf8:	e017      	b.n	800ac2a <USB_ActivateEndpoint+0x2fa>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	085b      	lsrs	r3, r3, #1
 800ac00:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <USB_ActivateEndpoint+0x2e4>
 800ac0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac10:	3301      	adds	r3, #1
 800ac12:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	029b      	lsls	r3, r3, #10
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	4313      	orrs	r3, r2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d01b      	beq.n	800ac7a <USB_ActivateEndpoint+0x34a>
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac58:	843b      	strh	r3, [r7, #32]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	441a      	add	r2, r3
 800ac64:	8c3b      	ldrh	r3, [r7, #32]
 800ac66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d124      	bne.n	800accc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac98:	83bb      	strh	r3, [r7, #28]
 800ac9a:	8bbb      	ldrh	r3, [r7, #28]
 800ac9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aca0:	83bb      	strh	r3, [r7, #28]
 800aca2:	8bbb      	ldrh	r3, [r7, #28]
 800aca4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aca8:	83bb      	strh	r3, [r7, #28]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	441a      	add	r2, r3
 800acb4:	8bbb      	ldrh	r3, [r7, #28]
 800acb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	8013      	strh	r3, [r2, #0]
 800acca:	e1ea      	b.n	800b0a2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	b29b      	uxth	r3, r3
 800acda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace2:	83fb      	strh	r3, [r7, #30]
 800ace4:	8bfb      	ldrh	r3, [r7, #30]
 800ace6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acea:	83fb      	strh	r3, [r7, #30]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	441a      	add	r2, r3
 800acf6:	8bfb      	ldrh	r3, [r7, #30]
 800acf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	8013      	strh	r3, [r2, #0]
 800ad0c:	e1c9      	b.n	800b0a2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	78db      	ldrb	r3, [r3, #3]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d11e      	bne.n	800ad54 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	441a      	add	r2, r3
 800ad3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ad4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	8013      	strh	r3, [r2, #0]
 800ad52:	e01d      	b.n	800ad90 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	441a      	add	r2, r3
 800ad78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ada0:	4413      	add	r3, r2
 800ada2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	011a      	lsls	r2, r3, #4
 800adaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adac:	4413      	add	r3, r2
 800adae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adb2:	65bb      	str	r3, [r7, #88]	; 0x58
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	891b      	ldrh	r3, [r3, #8]
 800adb8:	085b      	lsrs	r3, r3, #1
 800adba:	b29b      	uxth	r3, r3
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adc2:	801a      	strh	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	657b      	str	r3, [r7, #84]	; 0x54
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adce:	b29b      	uxth	r3, r3
 800add0:	461a      	mov	r2, r3
 800add2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800add4:	4413      	add	r3, r2
 800add6:	657b      	str	r3, [r7, #84]	; 0x54
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	011a      	lsls	r2, r3, #4
 800adde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade0:	4413      	add	r3, r2
 800ade2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ade6:	653b      	str	r3, [r7, #80]	; 0x50
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	895b      	ldrh	r3, [r3, #10]
 800adec:	085b      	lsrs	r3, r3, #1
 800adee:	b29b      	uxth	r3, r3
 800adf0:	005b      	lsls	r3, r3, #1
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	785b      	ldrb	r3, [r3, #1]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f040 8093 	bne.w	800af28 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ae12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d01b      	beq.n	800ae56 <USB_ActivateEndpoint+0x526>
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	441a      	add	r2, r3
 800ae40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d01b      	beq.n	800aea6 <USB_ActivateEndpoint+0x576>
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae84:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	441a      	add	r2, r3
 800ae90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aebc:	873b      	strh	r3, [r7, #56]	; 0x38
 800aebe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aec0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aec4:	873b      	strh	r3, [r7, #56]	; 0x38
 800aec6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aec8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aecc:	873b      	strh	r3, [r7, #56]	; 0x38
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	441a      	add	r2, r3
 800aed8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aeda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af04:	86fb      	strh	r3, [r7, #54]	; 0x36
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	441a      	add	r2, r3
 800af10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af22:	b29b      	uxth	r3, r3
 800af24:	8013      	strh	r3, [r2, #0]
 800af26:	e0bc      	b.n	800b0a2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800af38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01d      	beq.n	800af80 <USB_ActivateEndpoint+0x650>
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	441a      	add	r2, r3
 800af68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d01d      	beq.n	800afd8 <USB_ActivateEndpoint+0x6a8>
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	441a      	add	r2, r3
 800afc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800afc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	78db      	ldrb	r3, [r3, #3]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d024      	beq.n	800b02a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	b29b      	uxth	r3, r3
 800afee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800affa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800affe:	f083 0320 	eor.w	r3, r3, #32
 800b002:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	441a      	add	r2, r3
 800b010:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b01c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b024:	b29b      	uxth	r3, r3
 800b026:	8013      	strh	r3, [r2, #0]
 800b028:	e01d      	b.n	800b066 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	b29b      	uxth	r3, r3
 800b038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b040:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	441a      	add	r2, r3
 800b04e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b05a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b062:	b29b      	uxth	r3, r3
 800b064:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	b29b      	uxth	r3, r3
 800b074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	441a      	add	r2, r3
 800b08a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b08e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b0a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3774      	adds	r7, #116	; 0x74
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bc80      	pop	{r7}
 800b0ae:	4770      	bx	lr

0800b0b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b08d      	sub	sp, #52	; 0x34
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	7b1b      	ldrb	r3, [r3, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f040 808e 	bne.w	800b1e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d044      	beq.n	800b156 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	81bb      	strh	r3, [r7, #12]
 800b0da:	89bb      	ldrh	r3, [r7, #12]
 800b0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01b      	beq.n	800b11c <USB_DeactivateEndpoint+0x6c>
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	881b      	ldrh	r3, [r3, #0]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0fa:	817b      	strh	r3, [r7, #10]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	441a      	add	r2, r3
 800b106:	897b      	ldrh	r3, [r7, #10]
 800b108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b10c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b114:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b118:	b29b      	uxth	r3, r3
 800b11a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4413      	add	r3, r2
 800b126:	881b      	ldrh	r3, [r3, #0]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b132:	813b      	strh	r3, [r7, #8]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	441a      	add	r2, r3
 800b13e:	893b      	ldrh	r3, [r7, #8]
 800b140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b150:	b29b      	uxth	r3, r3
 800b152:	8013      	strh	r3, [r2, #0]
 800b154:	e192      	b.n	800b47c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	827b      	strh	r3, [r7, #18]
 800b164:	8a7b      	ldrh	r3, [r7, #18]
 800b166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d01b      	beq.n	800b1a6 <USB_DeactivateEndpoint+0xf6>
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b184:	823b      	strh	r3, [r7, #16]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	441a      	add	r2, r3
 800b190:	8a3b      	ldrh	r3, [r7, #16]
 800b192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b19a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1bc:	81fb      	strh	r3, [r7, #14]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	441a      	add	r2, r3
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
 800b1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	8013      	strh	r3, [r2, #0]
 800b1de:	e14d      	b.n	800b47c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	785b      	ldrb	r3, [r3, #1]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f040 80a5 	bne.w	800b334 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	843b      	strh	r3, [r7, #32]
 800b1f8:	8c3b      	ldrh	r3, [r7, #32]
 800b1fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01b      	beq.n	800b23a <USB_DeactivateEndpoint+0x18a>
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b218:	83fb      	strh	r3, [r7, #30]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	441a      	add	r2, r3
 800b224:	8bfb      	ldrh	r3, [r7, #30]
 800b226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b22a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b22e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b236:	b29b      	uxth	r3, r3
 800b238:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	83bb      	strh	r3, [r7, #28]
 800b248:	8bbb      	ldrh	r3, [r7, #28]
 800b24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d01b      	beq.n	800b28a <USB_DeactivateEndpoint+0x1da>
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b268:	837b      	strh	r3, [r7, #26]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	441a      	add	r2, r3
 800b274:	8b7b      	ldrh	r3, [r7, #26]
 800b276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b27a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b27e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b286:	b29b      	uxth	r3, r3
 800b288:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29b      	uxth	r3, r3
 800b298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b29c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a0:	833b      	strh	r3, [r7, #24]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	441a      	add	r2, r3
 800b2ac:	8b3b      	ldrh	r3, [r7, #24]
 800b2ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	881b      	ldrh	r3, [r3, #0]
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2d8:	82fb      	strh	r3, [r7, #22]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	441a      	add	r2, r3
 800b2e4:	8afb      	ldrh	r3, [r7, #22]
 800b2e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
 800b308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b310:	82bb      	strh	r3, [r7, #20]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	441a      	add	r2, r3
 800b31c:	8abb      	ldrh	r3, [r7, #20]
 800b31e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b32e:	b29b      	uxth	r3, r3
 800b330:	8013      	strh	r3, [r2, #0]
 800b332:	e0a3      	b.n	800b47c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01b      	beq.n	800b384 <USB_DeactivateEndpoint+0x2d4>
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	b29b      	uxth	r3, r3
 800b35a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b362:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	441a      	add	r2, r3
 800b36e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b380:	b29b      	uxth	r3, r3
 800b382:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	881b      	ldrh	r3, [r3, #0]
 800b390:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d01b      	beq.n	800b3d4 <USB_DeactivateEndpoint+0x324>
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b2:	853b      	strh	r3, [r7, #40]	; 0x28
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	441a      	add	r2, r3
 800b3be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	441a      	add	r2, r3
 800b3f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b408:	b29b      	uxth	r3, r3
 800b40a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b41e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b422:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	441a      	add	r2, r3
 800b42e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b440:	b29b      	uxth	r3, r3
 800b442:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	b29b      	uxth	r3, r3
 800b452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	441a      	add	r2, r3
 800b466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b46c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b478:	b29b      	uxth	r3, r3
 800b47a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3734      	adds	r7, #52	; 0x34
 800b482:	46bd      	mov	sp, r7
 800b484:	bc80      	pop	{r7}
 800b486:	4770      	bx	lr

0800b488 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b0c2      	sub	sp, #264	; 0x108
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b496:	6018      	str	r0, [r3, #0]
 800b498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	f040 86b7 	bne.w	800c222 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	699a      	ldr	r2, [r3, #24]
 800b4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d908      	bls.n	800b4e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b4e0:	e007      	b.n	800b4f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	7b1b      	ldrb	r3, [r3, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d13a      	bne.n	800b578 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6959      	ldr	r1, [r3, #20]
 800b50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	88da      	ldrh	r2, [r3, #6]
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	b29b      	uxth	r3, r3
 800b520:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b524:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b528:	6800      	ldr	r0, [r0, #0]
 800b52a:	f001 fc9c 	bl	800ce66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b548:	b29b      	uxth	r3, r3
 800b54a:	461a      	mov	r2, r3
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	4413      	add	r3, r2
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	011a      	lsls	r2, r3, #4
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	4413      	add	r3, r2
 800b564:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	801a      	strh	r2, [r3, #0]
 800b574:	f000 be1f 	b.w	800c1b6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	78db      	ldrb	r3, [r3, #3]
 800b584:	2b02      	cmp	r3, #2
 800b586:	f040 8462 	bne.w	800be4e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6a1a      	ldr	r2, [r3, #32]
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	f240 83df 	bls.w	800bd66 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	441a      	add	r2, r3
 800b5ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b600:	b29b      	uxth	r3, r3
 800b602:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b614:	1ad2      	subs	r2, r2, r3
 800b616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 81c7 	beq.w	800b9d8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	633b      	str	r3, [r7, #48]	; 0x30
 800b656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	785b      	ldrb	r3, [r3, #1]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d177      	bne.n	800b756 <USB_EPStartXfer+0x2ce>
 800b666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b66a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	62bb      	str	r3, [r7, #40]	; 0x28
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b680:	b29b      	uxth	r3, r3
 800b682:	461a      	mov	r2, r3
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	4413      	add	r3, r2
 800b688:	62bb      	str	r3, [r7, #40]	; 0x28
 800b68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	011a      	lsls	r2, r3, #4
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	4413      	add	r3, r2
 800b69c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	801a      	strh	r2, [r3, #0]
 800b6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b6:	2b3e      	cmp	r3, #62	; 0x3e
 800b6b8:	d921      	bls.n	800b6fe <USB_EPStartXfer+0x276>
 800b6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d104      	bne.n	800b6da <USB_EPStartXfer+0x252>
 800b6d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	029b      	lsls	r3, r3, #10
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e050      	b.n	800b7a0 <USB_EPStartXfer+0x318>
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10a      	bne.n	800b71c <USB_EPStartXfer+0x294>
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b714:	b29a      	uxth	r2, r3
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	801a      	strh	r2, [r3, #0]
 800b71a:	e041      	b.n	800b7a0 <USB_EPStartXfer+0x318>
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b720:	085b      	lsrs	r3, r3, #1
 800b722:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <USB_EPStartXfer+0x2b4>
 800b732:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b736:	3301      	adds	r3, #1
 800b738:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	b29a      	uxth	r2, r3
 800b742:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b746:	b29b      	uxth	r3, r3
 800b748:	029b      	lsls	r3, r3, #10
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	4313      	orrs	r3, r2
 800b74e:	b29a      	uxth	r2, r3
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	801a      	strh	r2, [r3, #0]
 800b754:	e024      	b.n	800b7a0 <USB_EPStartXfer+0x318>
 800b756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	785b      	ldrb	r3, [r3, #1]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d11c      	bne.n	800b7a0 <USB_EPStartXfer+0x318>
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b774:	b29b      	uxth	r3, r3
 800b776:	461a      	mov	r2, r3
 800b778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77a:	4413      	add	r3, r2
 800b77c:	633b      	str	r3, [r7, #48]	; 0x30
 800b77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	011a      	lsls	r2, r3, #4
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	4413      	add	r3, r2
 800b790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	895b      	ldrh	r3, [r3, #10]
 800b7ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6959      	ldr	r1, [r3, #20]
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b7c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	f001 fb49 	bl	800ce66 <USB_WritePMA>
            ep->xfer_buff += len;
 800b7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	695a      	ldr	r2, [r3, #20]
 800b7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e4:	441a      	add	r2, r3
 800b7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6a1a      	ldr	r2, [r3, #32]
 800b7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d90f      	bls.n	800b82e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6a1a      	ldr	r2, [r3, #32]
 800b81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81e:	1ad2      	subs	r2, r2, r3
 800b820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	621a      	str	r2, [r3, #32]
 800b82c:	e00e      	b.n	800b84c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2200      	movs	r2, #0
 800b84a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	785b      	ldrb	r3, [r3, #1]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d177      	bne.n	800b94c <USB_EPStartXfer+0x4c4>
 800b85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b876:	b29b      	uxth	r3, r3
 800b878:	461a      	mov	r2, r3
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	4413      	add	r3, r2
 800b87e:	61bb      	str	r3, [r7, #24]
 800b880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	011a      	lsls	r2, r3, #4
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	4413      	add	r3, r2
 800b892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	801a      	strh	r2, [r3, #0]
 800b8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ac:	2b3e      	cmp	r3, #62	; 0x3e
 800b8ae:	d921      	bls.n	800b8f4 <USB_EPStartXfer+0x46c>
 800b8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b4:	095b      	lsrs	r3, r3, #5
 800b8b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	f003 031f 	and.w	r3, r3, #31
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d104      	bne.n	800b8d0 <USB_EPStartXfer+0x448>
 800b8c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	029b      	lsls	r3, r3, #10
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	801a      	strh	r2, [r3, #0]
 800b8f2:	e056      	b.n	800b9a2 <USB_EPStartXfer+0x51a>
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <USB_EPStartXfer+0x48a>
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	b29b      	uxth	r3, r3
 800b902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	801a      	strh	r2, [r3, #0]
 800b910:	e047      	b.n	800b9a2 <USB_EPStartXfer+0x51a>
 800b912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b916:	085b      	lsrs	r3, r3, #1
 800b918:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	f003 0301 	and.w	r3, r3, #1
 800b924:	2b00      	cmp	r3, #0
 800b926:	d004      	beq.n	800b932 <USB_EPStartXfer+0x4aa>
 800b928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b92c:	3301      	adds	r3, #1
 800b92e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29a      	uxth	r2, r3
 800b938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	029b      	lsls	r3, r3, #10
 800b940:	b29b      	uxth	r3, r3
 800b942:	4313      	orrs	r3, r2
 800b944:	b29a      	uxth	r2, r3
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	801a      	strh	r2, [r3, #0]
 800b94a:	e02a      	b.n	800b9a2 <USB_EPStartXfer+0x51a>
 800b94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d122      	bne.n	800b9a2 <USB_EPStartXfer+0x51a>
 800b95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	623b      	str	r3, [r7, #32]
 800b968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b976:	b29b      	uxth	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	4413      	add	r3, r2
 800b97e:	623b      	str	r3, [r7, #32]
 800b980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	011a      	lsls	r2, r3, #4
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	4413      	add	r3, r2
 800b992:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b996:	61fb      	str	r3, [r7, #28]
 800b998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	891b      	ldrh	r3, [r3, #8]
 800b9ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6959      	ldr	r1, [r3, #20]
 800b9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9d0:	6800      	ldr	r0, [r0, #0]
 800b9d2:	f001 fa48 	bl	800ce66 <USB_WritePMA>
 800b9d6:	e3ee      	b.n	800c1b6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	785b      	ldrb	r3, [r3, #1]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d177      	bne.n	800bad8 <USB_EPStartXfer+0x650>
 800b9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba08:	4413      	add	r3, r2
 800ba0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	011a      	lsls	r2, r3, #4
 800ba1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba22:	647b      	str	r3, [r7, #68]	; 0x44
 800ba24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba32:	801a      	strh	r2, [r3, #0]
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba38:	2b3e      	cmp	r3, #62	; 0x3e
 800ba3a:	d921      	bls.n	800ba80 <USB_EPStartXfer+0x5f8>
 800ba3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba40:	095b      	lsrs	r3, r3, #5
 800ba42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4a:	f003 031f 	and.w	r3, r3, #31
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d104      	bne.n	800ba5c <USB_EPStartXfer+0x5d4>
 800ba52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba56:	3b01      	subs	r3, #1
 800ba58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	029b      	lsls	r3, r3, #10
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7c:	801a      	strh	r2, [r3, #0]
 800ba7e:	e056      	b.n	800bb2e <USB_EPStartXfer+0x6a6>
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10a      	bne.n	800ba9e <USB_EPStartXfer+0x616>
 800ba88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba9a:	801a      	strh	r2, [r3, #0]
 800ba9c:	e047      	b.n	800bb2e <USB_EPStartXfer+0x6a6>
 800ba9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa2:	085b      	lsrs	r3, r3, #1
 800baa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d004      	beq.n	800babe <USB_EPStartXfer+0x636>
 800bab4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bab8:	3301      	adds	r3, #1
 800baba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800babe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bac8:	b29b      	uxth	r3, r3
 800baca:	029b      	lsls	r3, r3, #10
 800bacc:	b29b      	uxth	r3, r3
 800bace:	4313      	orrs	r3, r2
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bad4:	801a      	strh	r2, [r3, #0]
 800bad6:	e02a      	b.n	800bb2e <USB_EPStartXfer+0x6a6>
 800bad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800badc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	785b      	ldrb	r3, [r3, #1]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d122      	bne.n	800bb2e <USB_EPStartXfer+0x6a6>
 800bae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	653b      	str	r3, [r7, #80]	; 0x50
 800baf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	461a      	mov	r2, r3
 800bb06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb08:	4413      	add	r3, r2
 800bb0a:	653b      	str	r3, [r7, #80]	; 0x50
 800bb0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	011a      	lsls	r2, r3, #4
 800bb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	891b      	ldrh	r3, [r3, #8]
 800bb3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6959      	ldr	r1, [r3, #20]
 800bb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb5c:	6800      	ldr	r0, [r0, #0]
 800bb5e:	f001 f982 	bl	800ce66 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	695a      	ldr	r2, [r3, #20]
 800bb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb72:	441a      	add	r2, r3
 800bb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6a1a      	ldr	r2, [r3, #32]
 800bb8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d90f      	bls.n	800bbbc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bb9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6a1a      	ldr	r2, [r3, #32]
 800bba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbac:	1ad2      	subs	r2, r2, r3
 800bbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	621a      	str	r2, [r3, #32]
 800bbba:	e00e      	b.n	800bbda <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bbbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	643b      	str	r3, [r7, #64]	; 0x40
 800bbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d177      	bne.n	800bce6 <USB_EPStartXfer+0x85e>
 800bbf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	461a      	mov	r2, r3
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	4413      	add	r3, r2
 800bc18:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	011a      	lsls	r2, r3, #4
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc30:	637b      	str	r3, [r7, #52]	; 0x34
 800bc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc40:	801a      	strh	r2, [r3, #0]
 800bc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc46:	2b3e      	cmp	r3, #62	; 0x3e
 800bc48:	d921      	bls.n	800bc8e <USB_EPStartXfer+0x806>
 800bc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc4e:	095b      	lsrs	r3, r3, #5
 800bc50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc58:	f003 031f 	and.w	r3, r3, #31
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d104      	bne.n	800bc6a <USB_EPStartXfer+0x7e2>
 800bc60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc64:	3b01      	subs	r3, #1
 800bc66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	029b      	lsls	r3, r3, #10
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	801a      	strh	r2, [r3, #0]
 800bc8c:	e050      	b.n	800bd30 <USB_EPStartXfer+0x8a8>
 800bc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10a      	bne.n	800bcac <USB_EPStartXfer+0x824>
 800bc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	801a      	strh	r2, [r3, #0]
 800bcaa:	e041      	b.n	800bd30 <USB_EPStartXfer+0x8a8>
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb0:	085b      	lsrs	r3, r3, #1
 800bcb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d004      	beq.n	800bccc <USB_EPStartXfer+0x844>
 800bcc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	029b      	lsls	r3, r3, #10
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce2:	801a      	strh	r2, [r3, #0]
 800bce4:	e024      	b.n	800bd30 <USB_EPStartXfer+0x8a8>
 800bce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	785b      	ldrb	r3, [r3, #1]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d11c      	bne.n	800bd30 <USB_EPStartXfer+0x8a8>
 800bcf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	461a      	mov	r2, r3
 800bd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0a:	4413      	add	r3, r2
 800bd0c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	011a      	lsls	r2, r3, #4
 800bd1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd1e:	4413      	add	r3, r2
 800bd20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bd24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bd30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	895b      	ldrh	r3, [r3, #10]
 800bd3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6959      	ldr	r1, [r3, #20]
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd5e:	6800      	ldr	r0, [r0, #0]
 800bd60:	f001 f881 	bl	800ce66 <USB_WritePMA>
 800bd64:	e227      	b.n	800c1b6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bd66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bd76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bd98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bda0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	441a      	add	r2, r3
 800bdba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bdbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdf2:	4413      	add	r3, r2
 800bdf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	011a      	lsls	r2, r3, #4
 800be04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be06:	4413      	add	r3, r2
 800be08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800be0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be12:	b29a      	uxth	r2, r3
 800be14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800be18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	891b      	ldrh	r3, [r3, #8]
 800be24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	6959      	ldr	r1, [r3, #20]
 800be34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be38:	b29b      	uxth	r3, r3
 800be3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be46:	6800      	ldr	r0, [r0, #0]
 800be48:	f001 f80d 	bl	800ce66 <USB_WritePMA>
 800be4c:	e1b3      	b.n	800c1b6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800be4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6a1a      	ldr	r2, [r3, #32]
 800be5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5e:	1ad2      	subs	r2, r2, r3
 800be60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80c6 	beq.w	800c020 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	673b      	str	r3, [r7, #112]	; 0x70
 800bea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	785b      	ldrb	r3, [r3, #1]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d177      	bne.n	800bfa0 <USB_EPStartXfer+0xb18>
 800beb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	66bb      	str	r3, [r7, #104]	; 0x68
 800bebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beca:	b29b      	uxth	r3, r3
 800becc:	461a      	mov	r2, r3
 800bece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bed0:	4413      	add	r3, r2
 800bed2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	011a      	lsls	r2, r3, #4
 800bee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bee4:	4413      	add	r3, r2
 800bee6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800beea:	667b      	str	r3, [r7, #100]	; 0x64
 800beec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800befa:	801a      	strh	r2, [r3, #0]
 800befc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf00:	2b3e      	cmp	r3, #62	; 0x3e
 800bf02:	d921      	bls.n	800bf48 <USB_EPStartXfer+0xac0>
 800bf04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf08:	095b      	lsrs	r3, r3, #5
 800bf0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf12:	f003 031f 	and.w	r3, r3, #31
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d104      	bne.n	800bf24 <USB_EPStartXfer+0xa9c>
 800bf1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	029b      	lsls	r3, r3, #10
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	4313      	orrs	r3, r2
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf44:	801a      	strh	r2, [r3, #0]
 800bf46:	e050      	b.n	800bfea <USB_EPStartXfer+0xb62>
 800bf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <USB_EPStartXfer+0xade>
 800bf50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf62:	801a      	strh	r2, [r3, #0]
 800bf64:	e041      	b.n	800bfea <USB_EPStartXfer+0xb62>
 800bf66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf6a:	085b      	lsrs	r3, r3, #1
 800bf6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <USB_EPStartXfer+0xafe>
 800bf7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf80:	3301      	adds	r3, #1
 800bf82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	029b      	lsls	r3, r3, #10
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf9c:	801a      	strh	r2, [r3, #0]
 800bf9e:	e024      	b.n	800bfea <USB_EPStartXfer+0xb62>
 800bfa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d11c      	bne.n	800bfea <USB_EPStartXfer+0xb62>
 800bfb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfc4:	4413      	add	r3, r2
 800bfc6:	673b      	str	r3, [r7, #112]	; 0x70
 800bfc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	011a      	lsls	r2, r3, #4
 800bfd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfd8:	4413      	add	r3, r2
 800bfda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfde:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	895b      	ldrh	r3, [r3, #10]
 800bff6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6959      	ldr	r1, [r3, #20]
 800c006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c010:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c014:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c018:	6800      	ldr	r0, [r0, #0]
 800c01a:	f000 ff24 	bl	800ce66 <USB_WritePMA>
 800c01e:	e0ca      	b.n	800c1b6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d177      	bne.n	800c120 <USB_EPStartXfer+0xc98>
 800c030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	461a      	mov	r2, r3
 800c04e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c050:	4413      	add	r3, r2
 800c052:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	011a      	lsls	r2, r3, #4
 800c062:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c064:	4413      	add	r3, r2
 800c066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c06a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	b29b      	uxth	r3, r3
 800c072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c076:	b29a      	uxth	r2, r3
 800c078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c07a:	801a      	strh	r2, [r3, #0]
 800c07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c080:	2b3e      	cmp	r3, #62	; 0x3e
 800c082:	d921      	bls.n	800c0c8 <USB_EPStartXfer+0xc40>
 800c084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c088:	095b      	lsrs	r3, r3, #5
 800c08a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c092:	f003 031f 	and.w	r3, r3, #31
 800c096:	2b00      	cmp	r3, #0
 800c098:	d104      	bne.n	800c0a4 <USB_EPStartXfer+0xc1c>
 800c09a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	029b      	lsls	r3, r3, #10
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c4:	801a      	strh	r2, [r3, #0]
 800c0c6:	e05c      	b.n	800c182 <USB_EPStartXfer+0xcfa>
 800c0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <USB_EPStartXfer+0xc5e>
 800c0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0e2:	801a      	strh	r2, [r3, #0]
 800c0e4:	e04d      	b.n	800c182 <USB_EPStartXfer+0xcfa>
 800c0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ea:	085b      	lsrs	r3, r3, #1
 800c0ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d004      	beq.n	800c106 <USB_EPStartXfer+0xc7e>
 800c0fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c100:	3301      	adds	r3, #1
 800c102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c110:	b29b      	uxth	r3, r3
 800c112:	029b      	lsls	r3, r3, #10
 800c114:	b29b      	uxth	r3, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	b29a      	uxth	r2, r3
 800c11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c11c:	801a      	strh	r2, [r3, #0]
 800c11e:	e030      	b.n	800c182 <USB_EPStartXfer+0xcfa>
 800c120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d128      	bne.n	800c182 <USB_EPStartXfer+0xcfa>
 800c130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	461a      	mov	r2, r3
 800c150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c154:	4413      	add	r3, r2
 800c156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	011a      	lsls	r2, r3, #4
 800c168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c16c:	4413      	add	r3, r2
 800c16e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c180:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	891b      	ldrh	r3, [r3, #8]
 800c18e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6959      	ldr	r1, [r3, #20]
 800c19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c1a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c1ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c1b0:	6800      	ldr	r0, [r0, #0]
 800c1b2:	f000 fe58 	bl	800ce66 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1dc:	817b      	strh	r3, [r7, #10]
 800c1de:	897b      	ldrh	r3, [r7, #10]
 800c1e0:	f083 0310 	eor.w	r3, r3, #16
 800c1e4:	817b      	strh	r3, [r7, #10]
 800c1e6:	897b      	ldrh	r3, [r7, #10]
 800c1e8:	f083 0320 	eor.w	r3, r3, #32
 800c1ec:	817b      	strh	r3, [r7, #10]
 800c1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	441a      	add	r2, r3
 800c208:	897b      	ldrh	r3, [r7, #10]
 800c20a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c20e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	8013      	strh	r3, [r2, #0]
 800c21e:	f000 bcde 	b.w	800cbde <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	7b1b      	ldrb	r3, [r3, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f040 80bb 	bne.w	800c3aa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	699a      	ldr	r2, [r3, #24]
 800c240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d917      	bls.n	800c280 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	699a      	ldr	r2, [r3, #24]
 800c26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c270:	1ad2      	subs	r2, r2, r3
 800c272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	619a      	str	r2, [r3, #24]
 800c27e:	e00e      	b.n	800c29e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	461a      	mov	r2, r3
 800c2be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	011a      	lsls	r2, r3, #4
 800c2d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2da:	4413      	add	r3, r2
 800c2dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c2e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2f6:	801a      	strh	r2, [r3, #0]
 800c2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2fc:	2b3e      	cmp	r3, #62	; 0x3e
 800c2fe:	d924      	bls.n	800c34a <USB_EPStartXfer+0xec2>
 800c300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c304:	095b      	lsrs	r3, r3, #5
 800c306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30e:	f003 031f 	and.w	r3, r3, #31
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <USB_EPStartXfer+0xe98>
 800c316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c31a:	3b01      	subs	r3, #1
 800c31c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29a      	uxth	r2, r3
 800c328:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	029b      	lsls	r3, r3, #10
 800c330:	b29b      	uxth	r3, r3
 800c332:	4313      	orrs	r3, r2
 800c334:	b29b      	uxth	r3, r3
 800c336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c33e:	b29a      	uxth	r2, r3
 800c340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c344:	801a      	strh	r2, [r3, #0]
 800c346:	f000 bc10 	b.w	800cb6a <USB_EPStartXfer+0x16e2>
 800c34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10c      	bne.n	800c36c <USB_EPStartXfer+0xee4>
 800c352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c35e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c362:	b29a      	uxth	r2, r3
 800c364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c368:	801a      	strh	r2, [r3, #0]
 800c36a:	e3fe      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
 800c36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c370:	085b      	lsrs	r3, r3, #1
 800c372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d004      	beq.n	800c38c <USB_EPStartXfer+0xf04>
 800c382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c386:	3301      	adds	r3, #1
 800c388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c38c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	b29a      	uxth	r2, r3
 800c394:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c398:	b29b      	uxth	r3, r3
 800c39a:	029b      	lsls	r3, r3, #10
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3a6:	801a      	strh	r2, [r3, #0]
 800c3a8:	e3df      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	78db      	ldrb	r3, [r3, #3]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	f040 8218 	bne.w	800c7ec <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	785b      	ldrb	r3, [r3, #1]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f040 809d 	bne.w	800c508 <USB_EPStartXfer+0x1080>
 800c3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	011a      	lsls	r2, r3, #4
 800c406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c40a:	4413      	add	r3, r2
 800c40c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c420:	b29a      	uxth	r2, r3
 800c422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c426:	801a      	strh	r2, [r3, #0]
 800c428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	2b3e      	cmp	r3, #62	; 0x3e
 800c436:	d92b      	bls.n	800c490 <USB_EPStartXfer+0x1008>
 800c438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	095b      	lsrs	r3, r3, #5
 800c446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	f003 031f 	and.w	r3, r3, #31
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d104      	bne.n	800c468 <USB_EPStartXfer+0xfe0>
 800c45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c462:	3b01      	subs	r3, #1
 800c464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	b29a      	uxth	r2, r3
 800c470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c474:	b29b      	uxth	r3, r3
 800c476:	029b      	lsls	r3, r3, #10
 800c478:	b29b      	uxth	r3, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c486:	b29a      	uxth	r2, r3
 800c488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c48c:	801a      	strh	r2, [r3, #0]
 800c48e:	e070      	b.n	800c572 <USB_EPStartXfer+0x10ea>
 800c490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10c      	bne.n	800c4ba <USB_EPStartXfer+0x1032>
 800c4a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4a4:	881b      	ldrh	r3, [r3, #0]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4b6:	801a      	strh	r2, [r3, #0]
 800c4b8:	e05b      	b.n	800c572 <USB_EPStartXfer+0x10ea>
 800c4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	085b      	lsrs	r3, r3, #1
 800c4c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d004      	beq.n	800c4ea <USB_EPStartXfer+0x1062>
 800c4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4ee:	881b      	ldrh	r3, [r3, #0]
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	029b      	lsls	r3, r3, #10
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c504:	801a      	strh	r2, [r3, #0]
 800c506:	e034      	b.n	800c572 <USB_EPStartXfer+0x10ea>
 800c508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	785b      	ldrb	r3, [r3, #1]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d12c      	bne.n	800c572 <USB_EPStartXfer+0x10ea>
 800c518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c51c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c52a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c534:	b29b      	uxth	r3, r3
 800c536:	461a      	mov	r2, r3
 800c538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c53c:	4413      	add	r3, r2
 800c53e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	011a      	lsls	r2, r3, #4
 800c550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c554:	4413      	add	r3, r2
 800c556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c55a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c570:	801a      	strh	r2, [r3, #0]
 800c572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 809d 	bne.w	800c6cc <USB_EPStartXfer+0x1244>
 800c592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	011a      	lsls	r2, r3, #4
 800c5ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c5d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ea:	801a      	strh	r2, [r3, #0]
 800c5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	2b3e      	cmp	r3, #62	; 0x3e
 800c5fa:	d92b      	bls.n	800c654 <USB_EPStartXfer+0x11cc>
 800c5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	095b      	lsrs	r3, r3, #5
 800c60a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	f003 031f 	and.w	r3, r3, #31
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d104      	bne.n	800c62c <USB_EPStartXfer+0x11a4>
 800c622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c626:	3b01      	subs	r3, #1
 800c628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c62c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	b29a      	uxth	r2, r3
 800c634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c638:	b29b      	uxth	r3, r3
 800c63a:	029b      	lsls	r3, r3, #10
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	4313      	orrs	r3, r2
 800c640:	b29b      	uxth	r3, r3
 800c642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c650:	801a      	strh	r2, [r3, #0]
 800c652:	e069      	b.n	800c728 <USB_EPStartXfer+0x12a0>
 800c654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10c      	bne.n	800c67e <USB_EPStartXfer+0x11f6>
 800c664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c674:	b29a      	uxth	r2, r3
 800c676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c67a:	801a      	strh	r2, [r3, #0]
 800c67c:	e054      	b.n	800c728 <USB_EPStartXfer+0x12a0>
 800c67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <USB_EPStartXfer+0x1226>
 800c6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c6ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	029b      	lsls	r3, r3, #10
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6c8:	801a      	strh	r2, [r3, #0]
 800c6ca:	e02d      	b.n	800c728 <USB_EPStartXfer+0x12a0>
 800c6cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	785b      	ldrb	r3, [r3, #1]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d125      	bne.n	800c728 <USB_EPStartXfer+0x12a0>
 800c6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	011a      	lsls	r2, r3, #4
 800c706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c70a:	4413      	add	r3, r2
 800c70c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	b29a      	uxth	r2, r3
 800c722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c726:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c72c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	69db      	ldr	r3, [r3, #28]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f000 8218 	beq.w	800cb6a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c75a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c75e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d005      	beq.n	800c772 <USB_EPStartXfer+0x12ea>
 800c766:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10d      	bne.n	800c78e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c772:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f040 81f5 	bne.w	800cb6a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c780:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f040 81ee 	bne.w	800cb6a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c79c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4413      	add	r3, r2
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	441a      	add	r2, r3
 800c7d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c7d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	8013      	strh	r3, [r2, #0]
 800c7ea:	e1be      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	78db      	ldrb	r3, [r3, #3]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	f040 81b4 	bne.w	800cb66 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	699a      	ldr	r2, [r3, #24]
 800c80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	429a      	cmp	r2, r3
 800c818:	d917      	bls.n	800c84a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	699a      	ldr	r2, [r3, #24]
 800c836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	619a      	str	r2, [r3, #24]
 800c848:	e00e      	b.n	800c868 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2200      	movs	r2, #0
 800c866:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	785b      	ldrb	r3, [r3, #1]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 8085 	bne.w	800c984 <USB_EPStartXfer+0x14fc>
 800c87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c87e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c896:	b29b      	uxth	r3, r3
 800c898:	461a      	mov	r2, r3
 800c89a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c89e:	4413      	add	r3, r2
 800c8a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	011a      	lsls	r2, r3, #4
 800c8b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c8b6:	4413      	add	r3, r2
 800c8b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c8bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8d2:	801a      	strh	r2, [r3, #0]
 800c8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d8:	2b3e      	cmp	r3, #62	; 0x3e
 800c8da:	d923      	bls.n	800c924 <USB_EPStartXfer+0x149c>
 800c8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8e0:	095b      	lsrs	r3, r3, #5
 800c8e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ea:	f003 031f 	and.w	r3, r3, #31
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d104      	bne.n	800c8fc <USB_EPStartXfer+0x1474>
 800c8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	b29a      	uxth	r2, r3
 800c904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c908:	b29b      	uxth	r3, r3
 800c90a:	029b      	lsls	r3, r3, #10
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	4313      	orrs	r3, r2
 800c910:	b29b      	uxth	r3, r3
 800c912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c920:	801a      	strh	r2, [r3, #0]
 800c922:	e060      	b.n	800c9e6 <USB_EPStartXfer+0x155e>
 800c924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10c      	bne.n	800c946 <USB_EPStartXfer+0x14be>
 800c92c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	b29b      	uxth	r3, r3
 800c934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c942:	801a      	strh	r2, [r3, #0]
 800c944:	e04f      	b.n	800c9e6 <USB_EPStartXfer+0x155e>
 800c946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c94a:	085b      	lsrs	r3, r3, #1
 800c94c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <USB_EPStartXfer+0x14de>
 800c95c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c960:	3301      	adds	r3, #1
 800c962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c972:	b29b      	uxth	r3, r3
 800c974:	029b      	lsls	r3, r3, #10
 800c976:	b29b      	uxth	r3, r3
 800c978:	4313      	orrs	r3, r2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	e030      	b.n	800c9e6 <USB_EPStartXfer+0x155e>
 800c984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	785b      	ldrb	r3, [r3, #1]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d128      	bne.n	800c9e6 <USB_EPStartXfer+0x155e>
 800c994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	011a      	lsls	r2, r3, #4
 800c9cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c9d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c9e4:	801a      	strh	r2, [r3, #0]
 800c9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	785b      	ldrb	r3, [r3, #1]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f040 8085 	bne.w	800cb10 <USB_EPStartXfer+0x1688>
 800ca06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	461a      	mov	r2, r3
 800ca26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	011a      	lsls	r2, r3, #4
 800ca3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca42:	4413      	add	r3, r2
 800ca44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ca48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca5e:	801a      	strh	r2, [r3, #0]
 800ca60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca64:	2b3e      	cmp	r3, #62	; 0x3e
 800ca66:	d923      	bls.n	800cab0 <USB_EPStartXfer+0x1628>
 800ca68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca6c:	095b      	lsrs	r3, r3, #5
 800ca6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca76:	f003 031f 	and.w	r3, r3, #31
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d104      	bne.n	800ca88 <USB_EPStartXfer+0x1600>
 800ca7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca82:	3b01      	subs	r3, #1
 800ca84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	029b      	lsls	r3, r3, #10
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caac:	801a      	strh	r2, [r3, #0]
 800caae:	e05c      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
 800cab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10c      	bne.n	800cad2 <USB_EPStartXfer+0x164a>
 800cab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cac8:	b29a      	uxth	r2, r3
 800caca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cace:	801a      	strh	r2, [r3, #0]
 800cad0:	e04b      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
 800cad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cad6:	085b      	lsrs	r3, r3, #1
 800cad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d004      	beq.n	800caf2 <USB_EPStartXfer+0x166a>
 800cae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800caec:	3301      	adds	r3, #1
 800caee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800caf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	029b      	lsls	r3, r3, #10
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	4313      	orrs	r3, r2
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb0c:	801a      	strh	r2, [r3, #0]
 800cb0e:	e02c      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
 800cb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	785b      	ldrb	r3, [r3, #1]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d124      	bne.n	800cb6a <USB_EPStartXfer+0x16e2>
 800cb20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	461a      	mov	r2, r3
 800cb32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb36:	4413      	add	r3, r2
 800cb38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	011a      	lsls	r2, r3, #4
 800cb4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb4e:	4413      	add	r3, r2
 800cb50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cb54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb62:	801a      	strh	r2, [r3, #0]
 800cb64:	e001      	b.n	800cb6a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e03a      	b.n	800cbe0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cba0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cba4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cba8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cbac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	441a      	add	r2, r3
 800cbc6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cbca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	785b      	ldrb	r3, [r3, #1]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d020      	beq.n	800cc3e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc12:	81bb      	strh	r3, [r7, #12]
 800cc14:	89bb      	ldrh	r3, [r7, #12]
 800cc16:	f083 0310 	eor.w	r3, r3, #16
 800cc1a:	81bb      	strh	r3, [r7, #12]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	441a      	add	r2, r3
 800cc26:	89bb      	ldrh	r3, [r7, #12]
 800cc28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	8013      	strh	r3, [r2, #0]
 800cc3c:	e01f      	b.n	800cc7e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc54:	81fb      	strh	r3, [r7, #14]
 800cc56:	89fb      	ldrh	r3, [r7, #14]
 800cc58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc5c:	81fb      	strh	r3, [r7, #14]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	441a      	add	r2, r3
 800cc68:	89fb      	ldrh	r3, [r7, #14]
 800cc6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bc80      	pop	{r7}
 800cc88:	4770      	bx	lr

0800cc8a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b087      	sub	sp, #28
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	7b1b      	ldrb	r3, [r3, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f040 809d 	bne.w	800cdd8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	785b      	ldrb	r3, [r3, #1]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d04c      	beq.n	800cd40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4413      	add	r3, r2
 800ccb0:	881b      	ldrh	r3, [r3, #0]
 800ccb2:	823b      	strh	r3, [r7, #16]
 800ccb4:	8a3b      	ldrh	r3, [r7, #16]
 800ccb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01b      	beq.n	800ccf6 <USB_EPClearStall+0x6c>
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccd4:	81fb      	strh	r3, [r7, #14]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	441a      	add	r2, r3
 800cce0:	89fb      	ldrh	r3, [r7, #14]
 800cce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	78db      	ldrb	r3, [r3, #3]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d06c      	beq.n	800cdd8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd14:	81bb      	strh	r3, [r7, #12]
 800cd16:	89bb      	ldrh	r3, [r7, #12]
 800cd18:	f083 0320 	eor.w	r3, r3, #32
 800cd1c:	81bb      	strh	r3, [r7, #12]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	441a      	add	r2, r3
 800cd28:	89bb      	ldrh	r3, [r7, #12]
 800cd2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	8013      	strh	r3, [r2, #0]
 800cd3e:	e04b      	b.n	800cdd8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	82fb      	strh	r3, [r7, #22]
 800cd4e:	8afb      	ldrh	r3, [r7, #22]
 800cd50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d01b      	beq.n	800cd90 <USB_EPClearStall+0x106>
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd6e:	82bb      	strh	r3, [r7, #20]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	441a      	add	r2, r3
 800cd7a:	8abb      	ldrh	r3, [r7, #20]
 800cd7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cda6:	827b      	strh	r3, [r7, #18]
 800cda8:	8a7b      	ldrh	r3, [r7, #18]
 800cdaa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cdae:	827b      	strh	r3, [r7, #18]
 800cdb0:	8a7b      	ldrh	r3, [r7, #18]
 800cdb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cdb6:	827b      	strh	r3, [r7, #18]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	441a      	add	r2, r3
 800cdc2:	8a7b      	ldrh	r3, [r7, #18]
 800cdc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bc80      	pop	{r7}
 800cde2:	4770      	bx	lr

0800cde4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cdf0:	78fb      	ldrb	r3, [r7, #3]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d103      	bne.n	800cdfe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2280      	movs	r2, #128	; 0x80
 800cdfa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bc80      	pop	{r7}
 800ce08:	4770      	bx	lr

0800ce0a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b083      	sub	sp, #12
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bc80      	pop	{r7}
 800ce1c:	4770      	bx	lr

0800ce1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bc80      	pop	{r7}
 800ce30:	4770      	bx	lr

0800ce32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b085      	sub	sp, #20
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce44:	68fb      	ldr	r3, [r7, #12]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bc80      	pop	{r7}
 800ce4e:	4770      	bx	lr

0800ce50 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bc80      	pop	{r7}
 800ce64:	4770      	bx	lr

0800ce66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b08b      	sub	sp, #44	; 0x2c
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	4611      	mov	r1, r2
 800ce72:	461a      	mov	r2, r3
 800ce74:	460b      	mov	r3, r1
 800ce76:	80fb      	strh	r3, [r7, #6]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce7c:	88bb      	ldrh	r3, [r7, #4]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	085b      	lsrs	r3, r3, #1
 800ce82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce8c:	88fb      	ldrh	r3, [r7, #6]
 800ce8e:	005a      	lsls	r2, r3, #1
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4413      	add	r3, r2
 800ce94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce98:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce9e:	e01e      	b.n	800cede <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	021b      	lsls	r3, r3, #8
 800ceae:	b21a      	sxth	r2, r3
 800ceb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	b21b      	sxth	r3, r3
 800ceb8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	8a7a      	ldrh	r2, [r7, #18]
 800cebe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	3302      	adds	r3, #2
 800cec4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	3302      	adds	r3, #2
 800ceca:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	3301      	adds	r3, #1
 800ced0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	3301      	adds	r3, #1
 800ced6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	3b01      	subs	r3, #1
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1dd      	bne.n	800cea0 <USB_WritePMA+0x3a>
  }
}
 800cee4:	bf00      	nop
 800cee6:	bf00      	nop
 800cee8:	372c      	adds	r7, #44	; 0x2c
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bc80      	pop	{r7}
 800ceee:	4770      	bx	lr

0800cef0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b08b      	sub	sp, #44	; 0x2c
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	4611      	mov	r1, r2
 800cefc:	461a      	mov	r2, r3
 800cefe:	460b      	mov	r3, r1
 800cf00:	80fb      	strh	r3, [r7, #6]
 800cf02:	4613      	mov	r3, r2
 800cf04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cf06:	88bb      	ldrh	r3, [r7, #4]
 800cf08:	085b      	lsrs	r3, r3, #1
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf16:	88fb      	ldrh	r3, [r7, #6]
 800cf18:	005a      	lsls	r2, r3, #1
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	627b      	str	r3, [r7, #36]	; 0x24
 800cf28:	e01b      	b.n	800cf62 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	881b      	ldrh	r3, [r3, #0]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	3302      	adds	r3, #2
 800cf36:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	3301      	adds	r3, #1
 800cf44:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	0a1b      	lsrs	r3, r3, #8
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	3301      	adds	r3, #1
 800cf54:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	3302      	adds	r3, #2
 800cf5a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	627b      	str	r3, [r7, #36]	; 0x24
 800cf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e0      	bne.n	800cf2a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cf68:	88bb      	ldrh	r3, [r7, #4]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d007      	beq.n	800cf84 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	701a      	strb	r2, [r3, #0]
  }
}
 800cf84:	bf00      	nop
 800cf86:	372c      	adds	r7, #44	; 0x2c
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bc80      	pop	{r7}
 800cf8c:	4770      	bx	lr
	...

0800cf90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cf94:	4904      	ldr	r1, [pc, #16]	; (800cfa8 <MX_FATFS_Init+0x18>)
 800cf96:	4805      	ldr	r0, [pc, #20]	; (800cfac <MX_FATFS_Init+0x1c>)
 800cf98:	f004 f866 	bl	8011068 <FATFS_LinkDriver>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	4b03      	ldr	r3, [pc, #12]	; (800cfb0 <MX_FATFS_Init+0x20>)
 800cfa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cfa4:	bf00      	nop
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20000e64 	.word	0x20000e64
 800cfac:	0802dec4 	.word	0x0802dec4
 800cfb0:	20000e60 	.word	0x20000e60

0800cfb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cfb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bc80      	pop	{r7}
 800cfc0:	4770      	bx	lr
	...

0800cfc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cfce:	f000 f879 	bl	800d0c4 <BSP_SD_IsDetected>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d001      	beq.n	800cfdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e012      	b.n	800d002 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cfdc:	480b      	ldr	r0, [pc, #44]	; (800d00c <BSP_SD_Init+0x48>)
 800cfde:	f7fa fd59 	bl	8007a94 <HAL_SD_Init>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cfe6:	79fb      	ldrb	r3, [r7, #7]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d109      	bne.n	800d000 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cfec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cff0:	4806      	ldr	r0, [pc, #24]	; (800d00c <BSP_SD_Init+0x48>)
 800cff2:	f7fb fb33 	bl	800865c <HAL_SD_ConfigWideBusOperation>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d000:	79fb      	ldrb	r3, [r7, #7]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20000c88 	.word	0x20000c88

0800d010 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af02      	add	r7, sp, #8
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	68f9      	ldr	r1, [r7, #12]
 800d02c:	4806      	ldr	r0, [pc, #24]	; (800d048 <BSP_SD_ReadBlocks+0x38>)
 800d02e:	f7fa fde1 	bl	8007bf4 <HAL_SD_ReadBlocks>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d001      	beq.n	800d03c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20000c88 	.word	0x20000c88

0800d04c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af02      	add	r7, sp, #8
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d05a:	2300      	movs	r3, #0
 800d05c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	68f9      	ldr	r1, [r7, #12]
 800d068:	4806      	ldr	r0, [pc, #24]	; (800d084 <BSP_SD_WriteBlocks+0x38>)
 800d06a:	f7fa ffa1 	bl	8007fb0 <HAL_SD_WriteBlocks>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d078:	7dfb      	ldrb	r3, [r7, #23]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000c88 	.word	0x20000c88

0800d088 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d08c:	4805      	ldr	r0, [pc, #20]	; (800d0a4 <BSP_SD_GetCardState+0x1c>)
 800d08e:	f7fb fb7f 	bl	8008790 <HAL_SD_GetCardState>
 800d092:	4603      	mov	r3, r0
 800d094:	2b04      	cmp	r3, #4
 800d096:	bf14      	ite	ne
 800d098:	2301      	movne	r3, #1
 800d09a:	2300      	moveq	r3, #0
 800d09c:	b2db      	uxtb	r3, r3
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	20000c88 	.word	0x20000c88

0800d0a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d0b0:	6879      	ldr	r1, [r7, #4]
 800d0b2:	4803      	ldr	r0, [pc, #12]	; (800d0c0 <BSP_SD_GetCardInfo+0x18>)
 800d0b4:	f7fb faa6 	bl	8008604 <HAL_SD_GetCardInfo>
}
 800d0b8:	bf00      	nop
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	20000c88 	.word	0x20000c88

0800d0c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	b2db      	uxtb	r3, r3
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	370c      	adds	r7, #12
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bc80      	pop	{r7}
 800d0da:	4770      	bx	lr

0800d0dc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800d0e8:	2304      	movs	r3, #4
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	2181      	movs	r1, #129	; 0x81
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f004 fb11 	bl	8011716 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800d0fa:	2010      	movs	r0, #16
 800d0fc:	f004 fc20 	bl	8011940 <USBD_static_malloc>
 800d100:	4602      	mov	r2, r0
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d101      	bne.n	800d116 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800d112:	2302      	movs	r3, #2
 800d114:	e005      	b.n	800d122 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d11c:	2200      	movs	r2, #0
 800d11e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800d136:	2181      	movs	r1, #129	; 0x81
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f004 fb12 	bl	8011762 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d009      	beq.n	800d162 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d154:	4618      	mov	r0, r3
 800d156:	f004 fbff 	bl	8011958 <USBD_static_free>
    pdev->pClassData = NULL;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d17c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d196:	2b00      	cmp	r3, #0
 800d198:	d045      	beq.n	800d226 <USBD_HID_Setup+0xba>
 800d19a:	2b20      	cmp	r3, #32
 800d19c:	f040 80d3 	bne.w	800d346 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	785b      	ldrb	r3, [r3, #1]
 800d1a4:	3b02      	subs	r3, #2
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d835      	bhi.n	800d216 <USBD_HID_Setup+0xaa>
 800d1aa:	a201      	add	r2, pc, #4	; (adr r2, 800d1b0 <USBD_HID_Setup+0x44>)
 800d1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b0:	0800d207 	.word	0x0800d207
 800d1b4:	0800d1e7 	.word	0x0800d1e7
 800d1b8:	0800d217 	.word	0x0800d217
 800d1bc:	0800d217 	.word	0x0800d217
 800d1c0:	0800d217 	.word	0x0800d217
 800d1c4:	0800d217 	.word	0x0800d217
 800d1c8:	0800d217 	.word	0x0800d217
 800d1cc:	0800d217 	.word	0x0800d217
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d1d9 	.word	0x0800d1d9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	885b      	ldrh	r3, [r3, #2]
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	601a      	str	r2, [r3, #0]
          break;
 800d1e4:	e01e      	b.n	800d224 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 f944 	bl	800e47a <USBD_CtlSendData>
          break;
 800d1f2:	e017      	b.n	800d224 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	885b      	ldrh	r3, [r3, #2]
 800d1f8:	0a1b      	lsrs	r3, r3, #8
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	461a      	mov	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	605a      	str	r2, [r3, #4]
          break;
 800d204:	e00e      	b.n	800d224 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	3304      	adds	r3, #4
 800d20a:	2201      	movs	r2, #1
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 f933 	bl	800e47a <USBD_CtlSendData>
          break;
 800d214:	e006      	b.n	800d224 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 f8c4 	bl	800e3a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d21e:	2302      	movs	r3, #2
 800d220:	75fb      	strb	r3, [r7, #23]
          break;
 800d222:	bf00      	nop
      }
      break;
 800d224:	e096      	b.n	800d354 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	785b      	ldrb	r3, [r3, #1]
 800d22a:	2b0b      	cmp	r3, #11
 800d22c:	f200 8083 	bhi.w	800d336 <USBD_HID_Setup+0x1ca>
 800d230:	a201      	add	r2, pc, #4	; (adr r2, 800d238 <USBD_HID_Setup+0xcc>)
 800d232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d236:	bf00      	nop
 800d238:	0800d269 	.word	0x0800d269
 800d23c:	0800d337 	.word	0x0800d337
 800d240:	0800d337 	.word	0x0800d337
 800d244:	0800d337 	.word	0x0800d337
 800d248:	0800d337 	.word	0x0800d337
 800d24c:	0800d337 	.word	0x0800d337
 800d250:	0800d291 	.word	0x0800d291
 800d254:	0800d337 	.word	0x0800d337
 800d258:	0800d337 	.word	0x0800d337
 800d25c:	0800d337 	.word	0x0800d337
 800d260:	0800d2e9 	.word	0x0800d2e9
 800d264:	0800d311 	.word	0x0800d311
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d107      	bne.n	800d282 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d272:	f107 030e 	add.w	r3, r7, #14
 800d276:	2202      	movs	r2, #2
 800d278:	4619      	mov	r1, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f001 f8fd 	bl	800e47a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d280:	e060      	b.n	800d344 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f001 f88e 	bl	800e3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d28a:	2302      	movs	r3, #2
 800d28c:	75fb      	strb	r3, [r7, #23]
          break;
 800d28e:	e059      	b.n	800d344 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	885b      	ldrh	r3, [r3, #2]
 800d294:	0a1b      	lsrs	r3, r3, #8
 800d296:	b29b      	uxth	r3, r3
 800d298:	2b22      	cmp	r3, #34	; 0x22
 800d29a:	d108      	bne.n	800d2ae <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	88db      	ldrh	r3, [r3, #6]
 800d2a0:	2b3f      	cmp	r3, #63	; 0x3f
 800d2a2:	bf28      	it	cs
 800d2a4:	233f      	movcs	r3, #63	; 0x3f
 800d2a6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800d2a8:	4b2d      	ldr	r3, [pc, #180]	; (800d360 <USBD_HID_Setup+0x1f4>)
 800d2aa:	61bb      	str	r3, [r7, #24]
 800d2ac:	e015      	b.n	800d2da <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	885b      	ldrh	r3, [r3, #2]
 800d2b2:	0a1b      	lsrs	r3, r3, #8
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	2b21      	cmp	r3, #33	; 0x21
 800d2b8:	d108      	bne.n	800d2cc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800d2ba:	4b2a      	ldr	r3, [pc, #168]	; (800d364 <USBD_HID_Setup+0x1f8>)
 800d2bc:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	88db      	ldrh	r3, [r3, #6]
 800d2c2:	2b09      	cmp	r3, #9
 800d2c4:	bf28      	it	cs
 800d2c6:	2309      	movcs	r3, #9
 800d2c8:	83fb      	strh	r3, [r7, #30]
 800d2ca:	e006      	b.n	800d2da <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f001 f869 	bl	800e3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2d4:	2302      	movs	r3, #2
 800d2d6:	75fb      	strb	r3, [r7, #23]
            break;
 800d2d8:	e034      	b.n	800d344 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800d2da:	8bfb      	ldrh	r3, [r7, #30]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	69b9      	ldr	r1, [r7, #24]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f001 f8ca 	bl	800e47a <USBD_CtlSendData>
          break;
 800d2e6:	e02d      	b.n	800d344 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	d107      	bne.n	800d302 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 f8bd 	bl	800e47a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d300:	e020      	b.n	800d344 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800d302:	6839      	ldr	r1, [r7, #0]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f001 f84e 	bl	800e3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d30a:	2302      	movs	r3, #2
 800d30c:	75fb      	strb	r3, [r7, #23]
          break;
 800d30e:	e019      	b.n	800d344 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d316:	2b03      	cmp	r3, #3
 800d318:	d106      	bne.n	800d328 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	885b      	ldrh	r3, [r3, #2]
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	461a      	mov	r2, r3
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d326:	e00d      	b.n	800d344 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f001 f83b 	bl	800e3a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d330:	2302      	movs	r3, #2
 800d332:	75fb      	strb	r3, [r7, #23]
          break;
 800d334:	e006      	b.n	800d344 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 f834 	bl	800e3a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d33e:	2302      	movs	r3, #2
 800d340:	75fb      	strb	r3, [r7, #23]
          break;
 800d342:	bf00      	nop
      }
      break;
 800d344:	e006      	b.n	800d354 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f001 f82c 	bl	800e3a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d34e:	2302      	movs	r3, #2
 800d350:	75fb      	strb	r3, [r7, #23]
      break;
 800d352:	bf00      	nop
  }

  return ret;
 800d354:	7dfb      	ldrb	r3, [r7, #23]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3720      	adds	r7, #32
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	200000d8 	.word	0x200000d8
 800d364:	200000c0 	.word	0x200000c0

0800d368 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d37c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d384:	2b03      	cmp	r3, #3
 800d386:	d10c      	bne.n	800d3a2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	7b1b      	ldrb	r3, [r3, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d108      	bne.n	800d3a2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2201      	movs	r2, #1
 800d394:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	2181      	movs	r1, #129	; 0x81
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f004 fa88 	bl	80118b2 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2222      	movs	r2, #34	; 0x22
 800d3b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bc80      	pop	{r7}
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	20000054 	.word	0x20000054

0800d3cc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2222      	movs	r2, #34	; 0x22
 800d3d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bc80      	pop	{r7}
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	20000078 	.word	0x20000078

0800d3ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2222      	movs	r2, #34	; 0x22
 800d3f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800d3fa:	4b03      	ldr	r3, [pc, #12]	; (800d408 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	bc80      	pop	{r7}
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	2000009c 	.word	0x2000009c

0800d40c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d41e:	2200      	movs	r2, #0
 800d420:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	bc80      	pop	{r7}
 800d42c:	4770      	bx	lr
	...

0800d430 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	220a      	movs	r2, #10
 800d43c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800d43e:	4b03      	ldr	r3, [pc, #12]	; (800d44c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800d440:	4618      	mov	r0, r3
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	bc80      	pop	{r7}
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	200000cc 	.word	0x200000cc

0800d450 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	60b9      	str	r1, [r7, #8]
 800d45a:	4613      	mov	r3, r2
 800d45c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d464:	2302      	movs	r3, #2
 800d466:	e01a      	b.n	800d49e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d003      	beq.n	800d47a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d003      	beq.n	800d488 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	79fa      	ldrb	r2, [r7, #7]
 800d494:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f004 f8da 	bl	8011650 <USBD_LL_Init>

  return USBD_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b085      	sub	sp, #20
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d006      	beq.n	800d4c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73fb      	strb	r3, [r7, #15]
 800d4c6:	e001      	b.n	800d4cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bc80      	pop	{r7}
 800d4d6:	4770      	bx	lr

0800d4d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f004 f8fd 	bl	80116e0 <USBD_LL_Start>

  return USBD_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	370c      	adds	r7, #12
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bc80      	pop	{r7}
 800d502:	4770      	bx	lr

0800d504 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d510:	2302      	movs	r3, #2
 800d512:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00c      	beq.n	800d538 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	78fa      	ldrb	r2, [r7, #3]
 800d528:	4611      	mov	r1, r2
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	4798      	blx	r3
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d538:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b082      	sub	sp, #8
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	460b      	mov	r3, r1
 800d54c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	78fa      	ldrb	r2, [r7, #3]
 800d558:	4611      	mov	r1, r2
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	4798      	blx	r3

  return USBD_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d578:	6839      	ldr	r1, [r7, #0]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fed7 	bl	800e32e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d58e:	461a      	mov	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d59c:	f003 031f 	and.w	r3, r3, #31
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d016      	beq.n	800d5d2 <USBD_LL_SetupStage+0x6a>
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d81c      	bhi.n	800d5e2 <USBD_LL_SetupStage+0x7a>
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <USBD_LL_SetupStage+0x4a>
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d008      	beq.n	800d5c2 <USBD_LL_SetupStage+0x5a>
 800d5b0:	e017      	b.n	800d5e2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f9ca 	bl	800d954 <USBD_StdDevReq>
      break;
 800d5c0:	e01a      	b.n	800d5f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fa2c 	bl	800da28 <USBD_StdItfReq>
      break;
 800d5d0:	e012      	b.n	800d5f8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fa6c 	bl	800dab8 <USBD_StdEPReq>
      break;
 800d5e0:	e00a      	b.n	800d5f8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d5e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f004 f8d5 	bl	80117a0 <USBD_LL_StallEP>
      break;
 800d5f6:	bf00      	nop
  }

  return USBD_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b086      	sub	sp, #24
 800d606:	af00      	add	r7, sp, #0
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	460b      	mov	r3, r1
 800d60c:	607a      	str	r2, [r7, #4]
 800d60e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d610:	7afb      	ldrb	r3, [r7, #11]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d14b      	bne.n	800d6ae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d61c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d624:	2b03      	cmp	r3, #3
 800d626:	d134      	bne.n	800d692 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	68da      	ldr	r2, [r3, #12]
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	429a      	cmp	r2, r3
 800d632:	d919      	bls.n	800d668 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	1ad2      	subs	r2, r2, r3
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d203      	bcs.n	800d656 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d652:	b29b      	uxth	r3, r3
 800d654:	e002      	b.n	800d65c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	461a      	mov	r2, r3
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 ff38 	bl	800e4d6 <USBD_CtlContinueRx>
 800d666:	e038      	b.n	800d6da <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d105      	bne.n	800d68a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f000 ff35 	bl	800e4fa <USBD_CtlSendStatus>
 800d690:	e023      	b.n	800d6da <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d698:	2b05      	cmp	r3, #5
 800d69a:	d11e      	bne.n	800d6da <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f004 f87a 	bl	80117a0 <USBD_LL_StallEP>
 800d6ac:	e015      	b.n	800d6da <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00d      	beq.n	800d6d6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d108      	bne.n	800d6d6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	7afa      	ldrb	r2, [r7, #11]
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	4798      	blx	r3
 800d6d4:	e001      	b.n	800d6da <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e000      	b.n	800d6dc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3718      	adds	r7, #24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	607a      	str	r2, [r7, #4]
 800d6f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d6f2:	7afb      	ldrb	r3, [r7, #11]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d17f      	bne.n	800d7f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3314      	adds	r3, #20
 800d6fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d704:	2b02      	cmp	r3, #2
 800d706:	d15c      	bne.n	800d7c2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	68da      	ldr	r2, [r3, #12]
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	429a      	cmp	r2, r3
 800d712:	d915      	bls.n	800d740 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	68da      	ldr	r2, [r3, #12]
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	1ad2      	subs	r2, r2, r3
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	b29b      	uxth	r3, r3
 800d728:	461a      	mov	r2, r3
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f000 fec0 	bl	800e4b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d732:	2300      	movs	r3, #0
 800d734:	2200      	movs	r2, #0
 800d736:	2100      	movs	r1, #0
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f004 f8dd 	bl	80118f8 <USBD_LL_PrepareReceive>
 800d73e:	e04e      	b.n	800d7de <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	6912      	ldr	r2, [r2, #16]
 800d748:	fbb3 f1f2 	udiv	r1, r3, r2
 800d74c:	fb01 f202 	mul.w	r2, r1, r2
 800d750:	1a9b      	subs	r3, r3, r2
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11c      	bne.n	800d790 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	689a      	ldr	r2, [r3, #8]
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d75e:	429a      	cmp	r2, r3
 800d760:	d316      	bcc.n	800d790 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	689a      	ldr	r2, [r3, #8]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d20f      	bcs.n	800d790 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d770:	2200      	movs	r2, #0
 800d772:	2100      	movs	r1, #0
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f000 fe9c 	bl	800e4b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d782:	2300      	movs	r3, #0
 800d784:	2200      	movs	r2, #0
 800d786:	2100      	movs	r1, #0
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f004 f8b5 	bl	80118f8 <USBD_LL_PrepareReceive>
 800d78e:	e026      	b.n	800d7de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00a      	beq.n	800d7b2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d105      	bne.n	800d7b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d7b2:	2180      	movs	r1, #128	; 0x80
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f003 fff3 	bl	80117a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f000 feb0 	bl	800e520 <USBD_CtlReceiveStatus>
 800d7c0:	e00d      	b.n	800d7de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7c8:	2b04      	cmp	r3, #4
 800d7ca:	d004      	beq.n	800d7d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d103      	bne.n	800d7de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d7d6:	2180      	movs	r1, #128	; 0x80
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f003 ffe1 	bl	80117a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d11d      	bne.n	800d824 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f7ff fe81 	bl	800d4f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d7f6:	e015      	b.n	800d824 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00d      	beq.n	800d820 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d108      	bne.n	800d820 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	7afa      	ldrb	r2, [r7, #11]
 800d818:	4611      	mov	r1, r2
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	4798      	blx	r3
 800d81e:	e001      	b.n	800d824 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d820:	2302      	movs	r3, #2
 800d822:	e000      	b.n	800d826 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d836:	2340      	movs	r3, #64	; 0x40
 800d838:	2200      	movs	r2, #0
 800d83a:	2100      	movs	r1, #0
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f003 ff6a 	bl	8011716 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2240      	movs	r2, #64	; 0x40
 800d84e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d852:	2340      	movs	r3, #64	; 0x40
 800d854:	2200      	movs	r2, #0
 800d856:	2180      	movs	r1, #128	; 0x80
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f003 ff5c 	bl	8011716 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2240      	movs	r2, #64	; 0x40
 800d868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d009      	beq.n	800d8a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	6852      	ldr	r2, [r2, #4]
 800d89e:	b2d2      	uxtb	r2, r2
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	4798      	blx	r3
  }

  return USBD_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	78fa      	ldrb	r2, [r7, #3]
 800d8c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bc80      	pop	{r7}
 800d8cc:	4770      	bx	lr

0800d8ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d8ce:	b480      	push	{r7}
 800d8d0:	b083      	sub	sp, #12
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2204      	movs	r2, #4
 800d8e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bc80      	pop	{r7}
 800d8f4:	4770      	bx	lr

0800d8f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	b083      	sub	sp, #12
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d904:	2b04      	cmp	r3, #4
 800d906:	d105      	bne.n	800d914 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	370c      	adds	r7, #12
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bc80      	pop	{r7}
 800d91e:	4770      	bx	lr

0800d920 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d10b      	bne.n	800d94a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d938:	69db      	ldr	r3, [r3, #28]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d005      	beq.n	800d94a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d96a:	2b40      	cmp	r3, #64	; 0x40
 800d96c:	d005      	beq.n	800d97a <USBD_StdDevReq+0x26>
 800d96e:	2b40      	cmp	r3, #64	; 0x40
 800d970:	d84f      	bhi.n	800da12 <USBD_StdDevReq+0xbe>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d009      	beq.n	800d98a <USBD_StdDevReq+0x36>
 800d976:	2b20      	cmp	r3, #32
 800d978:	d14b      	bne.n	800da12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	4798      	blx	r3
      break;
 800d988:	e048      	b.n	800da1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	785b      	ldrb	r3, [r3, #1]
 800d98e:	2b09      	cmp	r3, #9
 800d990:	d839      	bhi.n	800da06 <USBD_StdDevReq+0xb2>
 800d992:	a201      	add	r2, pc, #4	; (adr r2, 800d998 <USBD_StdDevReq+0x44>)
 800d994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d998:	0800d9e9 	.word	0x0800d9e9
 800d99c:	0800d9fd 	.word	0x0800d9fd
 800d9a0:	0800da07 	.word	0x0800da07
 800d9a4:	0800d9f3 	.word	0x0800d9f3
 800d9a8:	0800da07 	.word	0x0800da07
 800d9ac:	0800d9cb 	.word	0x0800d9cb
 800d9b0:	0800d9c1 	.word	0x0800d9c1
 800d9b4:	0800da07 	.word	0x0800da07
 800d9b8:	0800d9df 	.word	0x0800d9df
 800d9bc:	0800d9d5 	.word	0x0800d9d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f9dc 	bl	800dd80 <USBD_GetDescriptor>
          break;
 800d9c8:	e022      	b.n	800da10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 fb3f 	bl	800e050 <USBD_SetAddress>
          break;
 800d9d2:	e01d      	b.n	800da10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 fb7e 	bl	800e0d8 <USBD_SetConfig>
          break;
 800d9dc:	e018      	b.n	800da10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d9de:	6839      	ldr	r1, [r7, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fc07 	bl	800e1f4 <USBD_GetConfig>
          break;
 800d9e6:	e013      	b.n	800da10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fc37 	bl	800e25e <USBD_GetStatus>
          break;
 800d9f0:	e00e      	b.n	800da10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fc65 	bl	800e2c4 <USBD_SetFeature>
          break;
 800d9fa:	e009      	b.n	800da10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fc74 	bl	800e2ec <USBD_ClrFeature>
          break;
 800da04:	e004      	b.n	800da10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fccc 	bl	800e3a6 <USBD_CtlError>
          break;
 800da0e:	bf00      	nop
      }
      break;
 800da10:	e004      	b.n	800da1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fcc6 	bl	800e3a6 <USBD_CtlError>
      break;
 800da1a:	bf00      	nop
  }

  return ret;
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop

0800da28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da3e:	2b40      	cmp	r3, #64	; 0x40
 800da40:	d005      	beq.n	800da4e <USBD_StdItfReq+0x26>
 800da42:	2b40      	cmp	r3, #64	; 0x40
 800da44:	d82e      	bhi.n	800daa4 <USBD_StdItfReq+0x7c>
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <USBD_StdItfReq+0x26>
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	d12a      	bne.n	800daa4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da54:	3b01      	subs	r3, #1
 800da56:	2b02      	cmp	r3, #2
 800da58:	d81d      	bhi.n	800da96 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	889b      	ldrh	r3, [r3, #4]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b01      	cmp	r3, #1
 800da62:	d813      	bhi.n	800da8c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	4798      	blx	r3
 800da72:	4603      	mov	r3, r0
 800da74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	88db      	ldrh	r3, [r3, #6]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d110      	bne.n	800daa0 <USBD_StdItfReq+0x78>
 800da7e:	7bfb      	ldrb	r3, [r7, #15]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d10d      	bne.n	800daa0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fd38 	bl	800e4fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800da8a:	e009      	b.n	800daa0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fc89 	bl	800e3a6 <USBD_CtlError>
          break;
 800da94:	e004      	b.n	800daa0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fc84 	bl	800e3a6 <USBD_CtlError>
          break;
 800da9e:	e000      	b.n	800daa2 <USBD_StdItfReq+0x7a>
          break;
 800daa0:	bf00      	nop
      }
      break;
 800daa2:	e004      	b.n	800daae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800daa4:	6839      	ldr	r1, [r7, #0]
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 fc7d 	bl	800e3a6 <USBD_CtlError>
      break;
 800daac:	bf00      	nop
  }

  return USBD_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	889b      	ldrh	r3, [r3, #4]
 800daca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dad4:	2b40      	cmp	r3, #64	; 0x40
 800dad6:	d007      	beq.n	800dae8 <USBD_StdEPReq+0x30>
 800dad8:	2b40      	cmp	r3, #64	; 0x40
 800dada:	f200 8146 	bhi.w	800dd6a <USBD_StdEPReq+0x2b2>
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00a      	beq.n	800daf8 <USBD_StdEPReq+0x40>
 800dae2:	2b20      	cmp	r3, #32
 800dae4:	f040 8141 	bne.w	800dd6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	4798      	blx	r3
      break;
 800daf6:	e13d      	b.n	800dd74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db00:	2b20      	cmp	r3, #32
 800db02:	d10a      	bne.n	800db1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	4798      	blx	r3
 800db12:	4603      	mov	r3, r0
 800db14:	73fb      	strb	r3, [r7, #15]

        return ret;
 800db16:	7bfb      	ldrb	r3, [r7, #15]
 800db18:	e12d      	b.n	800dd76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	785b      	ldrb	r3, [r3, #1]
 800db1e:	2b03      	cmp	r3, #3
 800db20:	d007      	beq.n	800db32 <USBD_StdEPReq+0x7a>
 800db22:	2b03      	cmp	r3, #3
 800db24:	f300 811b 	bgt.w	800dd5e <USBD_StdEPReq+0x2a6>
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d072      	beq.n	800dc12 <USBD_StdEPReq+0x15a>
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d03a      	beq.n	800dba6 <USBD_StdEPReq+0xee>
 800db30:	e115      	b.n	800dd5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d002      	beq.n	800db42 <USBD_StdEPReq+0x8a>
 800db3c:	2b03      	cmp	r3, #3
 800db3e:	d015      	beq.n	800db6c <USBD_StdEPReq+0xb4>
 800db40:	e02b      	b.n	800db9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db42:	7bbb      	ldrb	r3, [r7, #14]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00c      	beq.n	800db62 <USBD_StdEPReq+0xaa>
 800db48:	7bbb      	ldrb	r3, [r7, #14]
 800db4a:	2b80      	cmp	r3, #128	; 0x80
 800db4c:	d009      	beq.n	800db62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800db4e:	7bbb      	ldrb	r3, [r7, #14]
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f003 fe24 	bl	80117a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800db58:	2180      	movs	r1, #128	; 0x80
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f003 fe20 	bl	80117a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db60:	e020      	b.n	800dba4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800db62:	6839      	ldr	r1, [r7, #0]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 fc1e 	bl	800e3a6 <USBD_CtlError>
              break;
 800db6a:	e01b      	b.n	800dba4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	885b      	ldrh	r3, [r3, #2]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10e      	bne.n	800db92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800db74:	7bbb      	ldrb	r3, [r7, #14]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00b      	beq.n	800db92 <USBD_StdEPReq+0xda>
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	2b80      	cmp	r3, #128	; 0x80
 800db7e:	d008      	beq.n	800db92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	88db      	ldrh	r3, [r3, #6]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d104      	bne.n	800db92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f003 fe07 	bl	80117a0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fcb1 	bl	800e4fa <USBD_CtlSendStatus>

              break;
 800db98:	e004      	b.n	800dba4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fc02 	bl	800e3a6 <USBD_CtlError>
              break;
 800dba2:	bf00      	nop
          }
          break;
 800dba4:	e0e0      	b.n	800dd68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d002      	beq.n	800dbb6 <USBD_StdEPReq+0xfe>
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d015      	beq.n	800dbe0 <USBD_StdEPReq+0x128>
 800dbb4:	e026      	b.n	800dc04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00c      	beq.n	800dbd6 <USBD_StdEPReq+0x11e>
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
 800dbbe:	2b80      	cmp	r3, #128	; 0x80
 800dbc0:	d009      	beq.n	800dbd6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f003 fdea 	bl	80117a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800dbcc:	2180      	movs	r1, #128	; 0x80
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f003 fde6 	bl	80117a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbd4:	e01c      	b.n	800dc10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 fbe4 	bl	800e3a6 <USBD_CtlError>
              break;
 800dbde:	e017      	b.n	800dc10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	885b      	ldrh	r3, [r3, #2]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d112      	bne.n	800dc0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dbe8:	7bbb      	ldrb	r3, [r7, #14]
 800dbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f003 fdf1 	bl	80117de <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 fc7c 	bl	800e4fa <USBD_CtlSendStatus>
              }
              break;
 800dc02:	e004      	b.n	800dc0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800dc04:	6839      	ldr	r1, [r7, #0]
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fbcd 	bl	800e3a6 <USBD_CtlError>
              break;
 800dc0c:	e000      	b.n	800dc10 <USBD_StdEPReq+0x158>
              break;
 800dc0e:	bf00      	nop
          }
          break;
 800dc10:	e0aa      	b.n	800dd68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d002      	beq.n	800dc22 <USBD_StdEPReq+0x16a>
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	d032      	beq.n	800dc86 <USBD_StdEPReq+0x1ce>
 800dc20:	e097      	b.n	800dd52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d007      	beq.n	800dc38 <USBD_StdEPReq+0x180>
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	2b80      	cmp	r3, #128	; 0x80
 800dc2c:	d004      	beq.n	800dc38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fbb8 	bl	800e3a6 <USBD_CtlError>
                break;
 800dc36:	e091      	b.n	800dd5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da0b      	bge.n	800dc58 <USBD_StdEPReq+0x1a0>
 800dc40:	7bbb      	ldrb	r3, [r7, #14]
 800dc42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc46:	4613      	mov	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	3310      	adds	r3, #16
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	4413      	add	r3, r2
 800dc54:	3304      	adds	r3, #4
 800dc56:	e00b      	b.n	800dc70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc58:	7bbb      	ldrb	r3, [r7, #14]
 800dc5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc5e:	4613      	mov	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	3304      	adds	r3, #4
 800dc70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	2200      	movs	r2, #0
 800dc76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fbfb 	bl	800e47a <USBD_CtlSendData>
              break;
 800dc84:	e06a      	b.n	800dd5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dc86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	da11      	bge.n	800dcb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dc8e:	7bbb      	ldrb	r3, [r7, #14]
 800dc90:	f003 020f 	and.w	r2, r3, #15
 800dc94:	6879      	ldr	r1, [r7, #4]
 800dc96:	4613      	mov	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4413      	add	r3, r2
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	440b      	add	r3, r1
 800dca0:	3318      	adds	r3, #24
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d117      	bne.n	800dcd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fb7b 	bl	800e3a6 <USBD_CtlError>
                  break;
 800dcb0:	e054      	b.n	800dd5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dcb2:	7bbb      	ldrb	r3, [r7, #14]
 800dcb4:	f003 020f 	and.w	r2, r3, #15
 800dcb8:	6879      	ldr	r1, [r7, #4]
 800dcba:	4613      	mov	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4413      	add	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	440b      	add	r3, r1
 800dcc4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d104      	bne.n	800dcd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fb68 	bl	800e3a6 <USBD_CtlError>
                  break;
 800dcd6:	e041      	b.n	800dd5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	da0b      	bge.n	800dcf8 <USBD_StdEPReq+0x240>
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	3310      	adds	r3, #16
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	e00b      	b.n	800dd10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	3304      	adds	r3, #4
 800dd10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dd12:	7bbb      	ldrb	r3, [r7, #14]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <USBD_StdEPReq+0x266>
 800dd18:	7bbb      	ldrb	r3, [r7, #14]
 800dd1a:	2b80      	cmp	r3, #128	; 0x80
 800dd1c:	d103      	bne.n	800dd26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	e00e      	b.n	800dd44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800dd26:	7bbb      	ldrb	r3, [r7, #14]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f003 fd76 	bl	801181c <USBD_LL_IsStallEP>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	e002      	b.n	800dd44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	2200      	movs	r2, #0
 800dd42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	2202      	movs	r2, #2
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 fb95 	bl	800e47a <USBD_CtlSendData>
              break;
 800dd50:	e004      	b.n	800dd5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fb26 	bl	800e3a6 <USBD_CtlError>
              break;
 800dd5a:	bf00      	nop
          }
          break;
 800dd5c:	e004      	b.n	800dd68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 fb20 	bl	800e3a6 <USBD_CtlError>
          break;
 800dd66:	bf00      	nop
      }
      break;
 800dd68:	e004      	b.n	800dd74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fb1a 	bl	800e3a6 <USBD_CtlError>
      break;
 800dd72:	bf00      	nop
  }

  return ret;
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
	...

0800dd80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	885b      	ldrh	r3, [r3, #2]
 800dd9a:	0a1b      	lsrs	r3, r3, #8
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	2b06      	cmp	r3, #6
 800dda2:	f200 8128 	bhi.w	800dff6 <USBD_GetDescriptor+0x276>
 800dda6:	a201      	add	r2, pc, #4	; (adr r2, 800ddac <USBD_GetDescriptor+0x2c>)
 800dda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddac:	0800ddc9 	.word	0x0800ddc9
 800ddb0:	0800dde1 	.word	0x0800dde1
 800ddb4:	0800de21 	.word	0x0800de21
 800ddb8:	0800dff7 	.word	0x0800dff7
 800ddbc:	0800dff7 	.word	0x0800dff7
 800ddc0:	0800df97 	.word	0x0800df97
 800ddc4:	0800dfc3 	.word	0x0800dfc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	7c12      	ldrb	r2, [r2, #16]
 800ddd4:	f107 0108 	add.w	r1, r7, #8
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4798      	blx	r3
 800dddc:	60f8      	str	r0, [r7, #12]
      break;
 800ddde:	e112      	b.n	800e006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	7c1b      	ldrb	r3, [r3, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10d      	bne.n	800de04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf0:	f107 0208 	add.w	r2, r7, #8
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4798      	blx	r3
 800ddf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	2202      	movs	r2, #2
 800de00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800de02:	e100      	b.n	800e006 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0c:	f107 0208 	add.w	r2, r7, #8
 800de10:	4610      	mov	r0, r2
 800de12:	4798      	blx	r3
 800de14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	3301      	adds	r3, #1
 800de1a:	2202      	movs	r2, #2
 800de1c:	701a      	strb	r2, [r3, #0]
      break;
 800de1e:	e0f2      	b.n	800e006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	885b      	ldrh	r3, [r3, #2]
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b05      	cmp	r3, #5
 800de28:	f200 80ac 	bhi.w	800df84 <USBD_GetDescriptor+0x204>
 800de2c:	a201      	add	r2, pc, #4	; (adr r2, 800de34 <USBD_GetDescriptor+0xb4>)
 800de2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de32:	bf00      	nop
 800de34:	0800de4d 	.word	0x0800de4d
 800de38:	0800de81 	.word	0x0800de81
 800de3c:	0800deb5 	.word	0x0800deb5
 800de40:	0800dee9 	.word	0x0800dee9
 800de44:	0800df1d 	.word	0x0800df1d
 800de48:	0800df51 	.word	0x0800df51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	7c12      	ldrb	r2, [r2, #16]
 800de64:	f107 0108 	add.w	r1, r7, #8
 800de68:	4610      	mov	r0, r2
 800de6a:	4798      	blx	r3
 800de6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de6e:	e091      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fa97 	bl	800e3a6 <USBD_CtlError>
            err++;
 800de78:	7afb      	ldrb	r3, [r7, #11]
 800de7a:	3301      	adds	r3, #1
 800de7c:	72fb      	strb	r3, [r7, #11]
          break;
 800de7e:	e089      	b.n	800df94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00b      	beq.n	800dea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	7c12      	ldrb	r2, [r2, #16]
 800de98:	f107 0108 	add.w	r1, r7, #8
 800de9c:	4610      	mov	r0, r2
 800de9e:	4798      	blx	r3
 800dea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dea2:	e077      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dea4:	6839      	ldr	r1, [r7, #0]
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fa7d 	bl	800e3a6 <USBD_CtlError>
            err++;
 800deac:	7afb      	ldrb	r3, [r7, #11]
 800deae:	3301      	adds	r3, #1
 800deb0:	72fb      	strb	r3, [r7, #11]
          break;
 800deb2:	e06f      	b.n	800df94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00b      	beq.n	800ded8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	7c12      	ldrb	r2, [r2, #16]
 800decc:	f107 0108 	add.w	r1, r7, #8
 800ded0:	4610      	mov	r0, r2
 800ded2:	4798      	blx	r3
 800ded4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ded6:	e05d      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fa63 	bl	800e3a6 <USBD_CtlError>
            err++;
 800dee0:	7afb      	ldrb	r3, [r7, #11]
 800dee2:	3301      	adds	r3, #1
 800dee4:	72fb      	strb	r3, [r7, #11]
          break;
 800dee6:	e055      	b.n	800df94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00b      	beq.n	800df0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	7c12      	ldrb	r2, [r2, #16]
 800df00:	f107 0108 	add.w	r1, r7, #8
 800df04:	4610      	mov	r0, r2
 800df06:	4798      	blx	r3
 800df08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df0a:	e043      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df0c:	6839      	ldr	r1, [r7, #0]
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 fa49 	bl	800e3a6 <USBD_CtlError>
            err++;
 800df14:	7afb      	ldrb	r3, [r7, #11]
 800df16:	3301      	adds	r3, #1
 800df18:	72fb      	strb	r3, [r7, #11]
          break;
 800df1a:	e03b      	b.n	800df94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df22:	695b      	ldr	r3, [r3, #20]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00b      	beq.n	800df40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df2e:	695b      	ldr	r3, [r3, #20]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	7c12      	ldrb	r2, [r2, #16]
 800df34:	f107 0108 	add.w	r1, r7, #8
 800df38:	4610      	mov	r0, r2
 800df3a:	4798      	blx	r3
 800df3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df3e:	e029      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fa2f 	bl	800e3a6 <USBD_CtlError>
            err++;
 800df48:	7afb      	ldrb	r3, [r7, #11]
 800df4a:	3301      	adds	r3, #1
 800df4c:	72fb      	strb	r3, [r7, #11]
          break;
 800df4e:	e021      	b.n	800df94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00b      	beq.n	800df74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	7c12      	ldrb	r2, [r2, #16]
 800df68:	f107 0108 	add.w	r1, r7, #8
 800df6c:	4610      	mov	r0, r2
 800df6e:	4798      	blx	r3
 800df70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df72:	e00f      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fa15 	bl	800e3a6 <USBD_CtlError>
            err++;
 800df7c:	7afb      	ldrb	r3, [r7, #11]
 800df7e:	3301      	adds	r3, #1
 800df80:	72fb      	strb	r3, [r7, #11]
          break;
 800df82:	e007      	b.n	800df94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800df84:	6839      	ldr	r1, [r7, #0]
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fa0d 	bl	800e3a6 <USBD_CtlError>
          err++;
 800df8c:	7afb      	ldrb	r3, [r7, #11]
 800df8e:	3301      	adds	r3, #1
 800df90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800df92:	e038      	b.n	800e006 <USBD_GetDescriptor+0x286>
 800df94:	e037      	b.n	800e006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	7c1b      	ldrb	r3, [r3, #16]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d109      	bne.n	800dfb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa6:	f107 0208 	add.w	r2, r7, #8
 800dfaa:	4610      	mov	r0, r2
 800dfac:	4798      	blx	r3
 800dfae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfb0:	e029      	b.n	800e006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f9f6 	bl	800e3a6 <USBD_CtlError>
        err++;
 800dfba:	7afb      	ldrb	r3, [r7, #11]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800dfc0:	e021      	b.n	800e006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7c1b      	ldrb	r3, [r3, #16]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10d      	bne.n	800dfe6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd2:	f107 0208 	add.w	r2, r7, #8
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	4798      	blx	r3
 800dfda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	2207      	movs	r2, #7
 800dfe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfe4:	e00f      	b.n	800e006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f9dc 	bl	800e3a6 <USBD_CtlError>
        err++;
 800dfee:	7afb      	ldrb	r3, [r7, #11]
 800dff0:	3301      	adds	r3, #1
 800dff2:	72fb      	strb	r3, [r7, #11]
      break;
 800dff4:	e007      	b.n	800e006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f000 f9d4 	bl	800e3a6 <USBD_CtlError>
      err++;
 800dffe:	7afb      	ldrb	r3, [r7, #11]
 800e000:	3301      	adds	r3, #1
 800e002:	72fb      	strb	r3, [r7, #11]
      break;
 800e004:	bf00      	nop
  }

  if (err != 0U)
 800e006:	7afb      	ldrb	r3, [r7, #11]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d11c      	bne.n	800e046 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e00c:	893b      	ldrh	r3, [r7, #8]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d011      	beq.n	800e036 <USBD_GetDescriptor+0x2b6>
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	88db      	ldrh	r3, [r3, #6]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00d      	beq.n	800e036 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	88da      	ldrh	r2, [r3, #6]
 800e01e:	893b      	ldrh	r3, [r7, #8]
 800e020:	4293      	cmp	r3, r2
 800e022:	bf28      	it	cs
 800e024:	4613      	movcs	r3, r2
 800e026:	b29b      	uxth	r3, r3
 800e028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e02a:	893b      	ldrh	r3, [r7, #8]
 800e02c:	461a      	mov	r2, r3
 800e02e:	68f9      	ldr	r1, [r7, #12]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fa22 	bl	800e47a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	88db      	ldrh	r3, [r3, #6]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d104      	bne.n	800e048 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fa5b 	bl	800e4fa <USBD_CtlSendStatus>
 800e044:	e000      	b.n	800e048 <USBD_GetDescriptor+0x2c8>
    return;
 800e046:	bf00      	nop
    }
  }
}
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop

0800e050 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	889b      	ldrh	r3, [r3, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d130      	bne.n	800e0c4 <USBD_SetAddress+0x74>
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d12c      	bne.n	800e0c4 <USBD_SetAddress+0x74>
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	885b      	ldrh	r3, [r3, #2]
 800e06e:	2b7f      	cmp	r3, #127	; 0x7f
 800e070:	d828      	bhi.n	800e0c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	885b      	ldrh	r3, [r3, #2]
 800e076:	b2db      	uxtb	r3, r3
 800e078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e07c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e084:	2b03      	cmp	r3, #3
 800e086:	d104      	bne.n	800e092 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e088:	6839      	ldr	r1, [r7, #0]
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f98b 	bl	800e3a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e090:	e01d      	b.n	800e0ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7bfa      	ldrb	r2, [r7, #15]
 800e096:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f003 fbe8 	bl	8011874 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fa28 	bl	800e4fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d004      	beq.n	800e0ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0b8:	e009      	b.n	800e0ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0c2:	e004      	b.n	800e0ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f96d 	bl	800e3a6 <USBD_CtlError>
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	bf00      	nop
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
	...

0800e0d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	885b      	ldrh	r3, [r3, #2]
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	4b41      	ldr	r3, [pc, #260]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e0ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e0ec:	4b40      	ldr	r3, [pc, #256]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d904      	bls.n	800e0fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f955 	bl	800e3a6 <USBD_CtlError>
 800e0fc:	e075      	b.n	800e1ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e104:	2b02      	cmp	r3, #2
 800e106:	d002      	beq.n	800e10e <USBD_SetConfig+0x36>
 800e108:	2b03      	cmp	r3, #3
 800e10a:	d023      	beq.n	800e154 <USBD_SetConfig+0x7c>
 800e10c:	e062      	b.n	800e1d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e10e:	4b38      	ldr	r3, [pc, #224]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d01a      	beq.n	800e14c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e116:	4b36      	ldr	r3, [pc, #216]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	461a      	mov	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2203      	movs	r2, #3
 800e124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e128:	4b31      	ldr	r3, [pc, #196]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff f9e8 	bl	800d504 <USBD_SetClassConfig>
 800e134:	4603      	mov	r3, r0
 800e136:	2b02      	cmp	r3, #2
 800e138:	d104      	bne.n	800e144 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f932 	bl	800e3a6 <USBD_CtlError>
            return;
 800e142:	e052      	b.n	800e1ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 f9d8 	bl	800e4fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e14a:	e04e      	b.n	800e1ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 f9d4 	bl	800e4fa <USBD_CtlSendStatus>
        break;
 800e152:	e04a      	b.n	800e1ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e154:	4b26      	ldr	r3, [pc, #152]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d112      	bne.n	800e182 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2202      	movs	r2, #2
 800e160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e164:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	461a      	mov	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e16e:	4b20      	ldr	r3, [pc, #128]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	4619      	mov	r1, r3
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff f9e4 	bl	800d542 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f9bd 	bl	800e4fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e180:	e033      	b.n	800e1ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e182:	4b1b      	ldr	r3, [pc, #108]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	461a      	mov	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d01d      	beq.n	800e1cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	b2db      	uxtb	r3, r3
 800e196:	4619      	mov	r1, r3
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7ff f9d2 	bl	800d542 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e19e:	4b14      	ldr	r3, [pc, #80]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e1a8:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff f9a8 	bl	800d504 <USBD_SetClassConfig>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d104      	bne.n	800e1c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 f8f2 	bl	800e3a6 <USBD_CtlError>
            return;
 800e1c2:	e012      	b.n	800e1ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 f998 	bl	800e4fa <USBD_CtlSendStatus>
        break;
 800e1ca:	e00e      	b.n	800e1ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 f994 	bl	800e4fa <USBD_CtlSendStatus>
        break;
 800e1d2:	e00a      	b.n	800e1ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f8e5 	bl	800e3a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e1dc:	4b04      	ldr	r3, [pc, #16]	; (800e1f0 <USBD_SetConfig+0x118>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7ff f9ad 	bl	800d542 <USBD_ClrClassConfig>
        break;
 800e1e8:	bf00      	nop
    }
  }
}
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	20000e68 	.word	0x20000e68

0800e1f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	88db      	ldrh	r3, [r3, #6]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d004      	beq.n	800e210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 f8cc 	bl	800e3a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e20e:	e022      	b.n	800e256 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e216:	2b02      	cmp	r3, #2
 800e218:	dc02      	bgt.n	800e220 <USBD_GetConfig+0x2c>
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dc03      	bgt.n	800e226 <USBD_GetConfig+0x32>
 800e21e:	e015      	b.n	800e24c <USBD_GetConfig+0x58>
 800e220:	2b03      	cmp	r3, #3
 800e222:	d00b      	beq.n	800e23c <USBD_GetConfig+0x48>
 800e224:	e012      	b.n	800e24c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	3308      	adds	r3, #8
 800e230:	2201      	movs	r2, #1
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f920 	bl	800e47a <USBD_CtlSendData>
        break;
 800e23a:	e00c      	b.n	800e256 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3304      	adds	r3, #4
 800e240:	2201      	movs	r2, #1
 800e242:	4619      	mov	r1, r3
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 f918 	bl	800e47a <USBD_CtlSendData>
        break;
 800e24a:	e004      	b.n	800e256 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 f8a9 	bl	800e3a6 <USBD_CtlError>
        break;
 800e254:	bf00      	nop
}
 800e256:	bf00      	nop
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b082      	sub	sp, #8
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
 800e266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e26e:	3b01      	subs	r3, #1
 800e270:	2b02      	cmp	r3, #2
 800e272:	d81e      	bhi.n	800e2b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	88db      	ldrh	r3, [r3, #6]
 800e278:	2b02      	cmp	r3, #2
 800e27a:	d004      	beq.n	800e286 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f891 	bl	800e3a6 <USBD_CtlError>
        break;
 800e284:	e01a      	b.n	800e2bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e292:	2b00      	cmp	r3, #0
 800e294:	d005      	beq.n	800e2a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	f043 0202 	orr.w	r2, r3, #2
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	330c      	adds	r3, #12
 800e2a6:	2202      	movs	r2, #2
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f8e5 	bl	800e47a <USBD_CtlSendData>
      break;
 800e2b0:	e004      	b.n	800e2bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 f876 	bl	800e3a6 <USBD_CtlError>
      break;
 800e2ba:	bf00      	nop
  }
}
 800e2bc:	bf00      	nop
 800e2be:	3708      	adds	r7, #8
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	885b      	ldrh	r3, [r3, #2]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d106      	bne.n	800e2e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 f90b 	bl	800e4fa <USBD_CtlSendStatus>
  }
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d80b      	bhi.n	800e31a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	885b      	ldrh	r3, [r3, #2]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d10c      	bne.n	800e324 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2200      	movs	r2, #0
 800e30e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 f8f1 	bl	800e4fa <USBD_CtlSendStatus>
      }
      break;
 800e318:	e004      	b.n	800e324 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 f842 	bl	800e3a6 <USBD_CtlError>
      break;
 800e322:	e000      	b.n	800e326 <USBD_ClrFeature+0x3a>
      break;
 800e324:	bf00      	nop
  }
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e32e:	b480      	push	{r7}
 800e330:	b083      	sub	sp, #12
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	781a      	ldrb	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	785a      	ldrb	r2, [r3, #1]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	3302      	adds	r3, #2
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b29a      	uxth	r2, r3
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	3303      	adds	r3, #3
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	b29b      	uxth	r3, r3
 800e358:	021b      	lsls	r3, r3, #8
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	4413      	add	r3, r2
 800e35e:	b29a      	uxth	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	3304      	adds	r3, #4
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	3305      	adds	r3, #5
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	b29b      	uxth	r3, r3
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	b29b      	uxth	r3, r3
 800e378:	4413      	add	r3, r2
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	3306      	adds	r3, #6
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	b29a      	uxth	r2, r3
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	3307      	adds	r3, #7
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	b29b      	uxth	r3, r3
 800e394:	4413      	add	r3, r2
 800e396:	b29a      	uxth	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	80da      	strh	r2, [r3, #6]

}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bc80      	pop	{r7}
 800e3a4:	4770      	bx	lr

0800e3a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e3b0:	2180      	movs	r1, #128	; 0x80
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f003 f9f4 	bl	80117a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f003 f9f0 	bl	80117a0 <USBD_LL_StallEP>
}
 800e3c0:	bf00      	nop
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d032      	beq.n	800e444 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 f834 	bl	800e44c <USBD_GetLen>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	75fa      	strb	r2, [r7, #23]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	7812      	ldrb	r2, [r2, #0]
 800e402:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	75fa      	strb	r2, [r7, #23]
 800e40a:	461a      	mov	r2, r3
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	4413      	add	r3, r2
 800e410:	2203      	movs	r2, #3
 800e412:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e414:	e012      	b.n	800e43c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	60fa      	str	r2, [r7, #12]
 800e41c:	7dfa      	ldrb	r2, [r7, #23]
 800e41e:	1c51      	adds	r1, r2, #1
 800e420:	75f9      	strb	r1, [r7, #23]
 800e422:	4611      	mov	r1, r2
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	440a      	add	r2, r1
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	75fa      	strb	r2, [r7, #23]
 800e432:	461a      	mov	r2, r3
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	4413      	add	r3, r2
 800e438:	2200      	movs	r2, #0
 800e43a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1e8      	bne.n	800e416 <USBD_GetString+0x4e>
    }
  }
}
 800e444:	bf00      	nop
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e454:	2300      	movs	r3, #0
 800e456:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e458:	e005      	b.n	800e466 <USBD_GetLen+0x1a>
  {
    len++;
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
 800e45c:	3301      	adds	r3, #1
 800e45e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3301      	adds	r3, #1
 800e464:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1f5      	bne.n	800e45a <USBD_GetLen+0xe>
  }

  return len;
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3714      	adds	r7, #20
 800e474:	46bd      	mov	sp, r7
 800e476:	bc80      	pop	{r7}
 800e478:	4770      	bx	lr

0800e47a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b084      	sub	sp, #16
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	4613      	mov	r3, r2
 800e486:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2202      	movs	r2, #2
 800e48c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e490:	88fa      	ldrh	r2, [r7, #6]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e496:	88fa      	ldrh	r2, [r7, #6]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e49c:	88fb      	ldrh	r3, [r7, #6]
 800e49e:	68ba      	ldr	r2, [r7, #8]
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f003 fa05 	bl	80118b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	60b9      	str	r1, [r7, #8]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e4c0:	88fb      	ldrh	r3, [r7, #6]
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f003 f9f3 	bl	80118b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	60f8      	str	r0, [r7, #12]
 800e4de:	60b9      	str	r1, [r7, #8]
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4e4:	88fb      	ldrh	r3, [r7, #6]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f003 fa04 	bl	80118f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4f0:	2300      	movs	r3, #0
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b082      	sub	sp, #8
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2204      	movs	r2, #4
 800e506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e50a:	2300      	movs	r3, #0
 800e50c:	2200      	movs	r2, #0
 800e50e:	2100      	movs	r1, #0
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f003 f9ce 	bl	80118b2 <USBD_LL_Transmit>

  return USBD_OK;
 800e516:	2300      	movs	r3, #0
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2205      	movs	r2, #5
 800e52c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e530:	2300      	movs	r3, #0
 800e532:	2200      	movs	r2, #0
 800e534:	2100      	movs	r1, #0
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f003 f9de 	bl	80118f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
	...

0800e548 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	4603      	mov	r3, r0
 800e550:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	4a08      	ldr	r2, [pc, #32]	; (800e578 <disk_status+0x30>)
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	79fa      	ldrb	r2, [r7, #7]
 800e560:	4905      	ldr	r1, [pc, #20]	; (800e578 <disk_status+0x30>)
 800e562:	440a      	add	r2, r1
 800e564:	7a12      	ldrb	r2, [r2, #8]
 800e566:	4610      	mov	r0, r2
 800e568:	4798      	blx	r3
 800e56a:	4603      	mov	r3, r0
 800e56c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20000e8c 	.word	0x20000e8c

0800e57c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	4a0d      	ldr	r2, [pc, #52]	; (800e5c4 <disk_initialize+0x48>)
 800e58e:	5cd3      	ldrb	r3, [r2, r3]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d111      	bne.n	800e5b8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	4a0b      	ldr	r2, [pc, #44]	; (800e5c4 <disk_initialize+0x48>)
 800e598:	2101      	movs	r1, #1
 800e59a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <disk_initialize+0x48>)
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	79fa      	ldrb	r2, [r7, #7]
 800e5aa:	4906      	ldr	r1, [pc, #24]	; (800e5c4 <disk_initialize+0x48>)
 800e5ac:	440a      	add	r2, r1
 800e5ae:	7a12      	ldrb	r2, [r2, #8]
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	4798      	blx	r3
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000e8c 	.word	0x20000e8c

0800e5c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b087      	sub	sp, #28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60b9      	str	r1, [r7, #8]
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	603b      	str	r3, [r7, #0]
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	4a0a      	ldr	r2, [pc, #40]	; (800e604 <disk_read+0x3c>)
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	689c      	ldr	r4, [r3, #8]
 800e5e4:	7bfb      	ldrb	r3, [r7, #15]
 800e5e6:	4a07      	ldr	r2, [pc, #28]	; (800e604 <disk_read+0x3c>)
 800e5e8:	4413      	add	r3, r2
 800e5ea:	7a18      	ldrb	r0, [r3, #8]
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	68b9      	ldr	r1, [r7, #8]
 800e5f2:	47a0      	blx	r4
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	371c      	adds	r7, #28
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd90      	pop	{r4, r7, pc}
 800e602:	bf00      	nop
 800e604:	20000e8c 	.word	0x20000e8c

0800e608 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b087      	sub	sp, #28
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60b9      	str	r1, [r7, #8]
 800e610:	607a      	str	r2, [r7, #4]
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	4a0a      	ldr	r2, [pc, #40]	; (800e644 <disk_write+0x3c>)
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	68dc      	ldr	r4, [r3, #12]
 800e624:	7bfb      	ldrb	r3, [r7, #15]
 800e626:	4a07      	ldr	r2, [pc, #28]	; (800e644 <disk_write+0x3c>)
 800e628:	4413      	add	r3, r2
 800e62a:	7a18      	ldrb	r0, [r3, #8]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	47a0      	blx	r4
 800e634:	4603      	mov	r3, r0
 800e636:	75fb      	strb	r3, [r7, #23]
  return res;
 800e638:	7dfb      	ldrb	r3, [r7, #23]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	371c      	adds	r7, #28
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd90      	pop	{r4, r7, pc}
 800e642:	bf00      	nop
 800e644:	20000e8c 	.word	0x20000e8c

0800e648 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	4603      	mov	r3, r0
 800e650:	603a      	str	r2, [r7, #0]
 800e652:	71fb      	strb	r3, [r7, #7]
 800e654:	460b      	mov	r3, r1
 800e656:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	4a09      	ldr	r2, [pc, #36]	; (800e680 <disk_ioctl+0x38>)
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	79fa      	ldrb	r2, [r7, #7]
 800e666:	4906      	ldr	r1, [pc, #24]	; (800e680 <disk_ioctl+0x38>)
 800e668:	440a      	add	r2, r1
 800e66a:	7a10      	ldrb	r0, [r2, #8]
 800e66c:	79b9      	ldrb	r1, [r7, #6]
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	4798      	blx	r3
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
  return res;
 800e676:	7bfb      	ldrb	r3, [r7, #15]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20000e8c 	.word	0x20000e8c

0800e684 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e684:	b480      	push	{r7}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800e698:	e007      	b.n	800e6aa <mem_cpy+0x26>
		*d++ = *s++;
 800e69a:	693a      	ldr	r2, [r7, #16]
 800e69c:	1c53      	adds	r3, r2, #1
 800e69e:	613b      	str	r3, [r7, #16]
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	1c59      	adds	r1, r3, #1
 800e6a4:	6179      	str	r1, [r7, #20]
 800e6a6:	7812      	ldrb	r2, [r2, #0]
 800e6a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	1e5a      	subs	r2, r3, #1
 800e6ae:	607a      	str	r2, [r7, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1f2      	bne.n	800e69a <mem_cpy+0x16>
}
 800e6b4:	bf00      	nop
 800e6b6:	bf00      	nop
 800e6b8:	371c      	adds	r7, #28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bc80      	pop	{r7}
 800e6be:	4770      	bx	lr

0800e6c0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e6c0:	b480      	push	{r7}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800e6d0:	e005      	b.n	800e6de <mem_set+0x1e>
		*d++ = (BYTE)val;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	617a      	str	r2, [r7, #20]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	b2d2      	uxtb	r2, r2
 800e6dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	1e5a      	subs	r2, r3, #1
 800e6e2:	607a      	str	r2, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1f4      	bne.n	800e6d2 <mem_set+0x12>
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	371c      	adds	r7, #28
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bc80      	pop	{r7}
 800e6f2:	4770      	bx	lr

0800e6f4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800e6f4:	b480      	push	{r7}
 800e6f6:	b089      	sub	sp, #36	; 0x24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	61fb      	str	r3, [r7, #28]
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800e70c:	bf00      	nop
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	1e5a      	subs	r2, r3, #1
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00d      	beq.n	800e734 <mem_cmp+0x40>
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	61fa      	str	r2, [r7, #28]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	4619      	mov	r1, r3
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	1c5a      	adds	r2, r3, #1
 800e726:	61ba      	str	r2, [r7, #24]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	1acb      	subs	r3, r1, r3
 800e72c:	617b      	str	r3, [r7, #20]
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d0ec      	beq.n	800e70e <mem_cmp+0x1a>
	return r;
 800e734:	697b      	ldr	r3, [r7, #20]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3724      	adds	r7, #36	; 0x24
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bc80      	pop	{r7}
 800e73e:	4770      	bx	lr

0800e740 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e74a:	e002      	b.n	800e752 <chk_chr+0x12>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	3301      	adds	r3, #1
 800e750:	607b      	str	r3, [r7, #4]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d005      	beq.n	800e766 <chk_chr+0x26>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	461a      	mov	r2, r3
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	4293      	cmp	r3, r2
 800e764:	d1f2      	bne.n	800e74c <chk_chr+0xc>
	return *str;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	781b      	ldrb	r3, [r3, #0]
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	bc80      	pop	{r7}
 800e772:	4770      	bx	lr

0800e774 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e77e:	2300      	movs	r3, #0
 800e780:	60bb      	str	r3, [r7, #8]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	60fb      	str	r3, [r7, #12]
 800e786:	e038      	b.n	800e7fa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800e788:	492f      	ldr	r1, [pc, #188]	; (800e848 <chk_lock+0xd4>)
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4613      	mov	r3, r2
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	4413      	add	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	440b      	add	r3, r1
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d029      	beq.n	800e7f0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e79c:	492a      	ldr	r1, [pc, #168]	; (800e848 <chk_lock+0xd4>)
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	440b      	add	r3, r1
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d11e      	bne.n	800e7f4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800e7b6:	4924      	ldr	r1, [pc, #144]	; (800e848 <chk_lock+0xd4>)
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	005b      	lsls	r3, r3, #1
 800e7be:	4413      	add	r3, r2
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	440b      	add	r3, r1
 800e7c4:	3304      	adds	r3, #4
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d110      	bne.n	800e7f4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e7d2:	491d      	ldr	r1, [pc, #116]	; (800e848 <chk_lock+0xd4>)
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	440b      	add	r3, r1
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	881a      	ldrh	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d102      	bne.n	800e7f4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e7ee:	e007      	b.n	800e800 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d9c3      	bls.n	800e788 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b02      	cmp	r3, #2
 800e804:	d109      	bne.n	800e81a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d102      	bne.n	800e812 <chk_lock+0x9e>
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	2b02      	cmp	r3, #2
 800e810:	d101      	bne.n	800e816 <chk_lock+0xa2>
 800e812:	2300      	movs	r3, #0
 800e814:	e013      	b.n	800e83e <chk_lock+0xca>
 800e816:	2312      	movs	r3, #18
 800e818:	e011      	b.n	800e83e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10b      	bne.n	800e838 <chk_lock+0xc4>
 800e820:	4909      	ldr	r1, [pc, #36]	; (800e848 <chk_lock+0xd4>)
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	4613      	mov	r3, r2
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	440b      	add	r3, r1
 800e82e:	330a      	adds	r3, #10
 800e830:	881b      	ldrh	r3, [r3, #0]
 800e832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e836:	d101      	bne.n	800e83c <chk_lock+0xc8>
 800e838:	2310      	movs	r3, #16
 800e83a:	e000      	b.n	800e83e <chk_lock+0xca>
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3714      	adds	r7, #20
 800e842:	46bd      	mov	sp, r7
 800e844:	bc80      	pop	{r7}
 800e846:	4770      	bx	lr
 800e848:	20000e74 	.word	0x20000e74

0800e84c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e852:	2300      	movs	r3, #0
 800e854:	607b      	str	r3, [r7, #4]
 800e856:	e002      	b.n	800e85e <enq_lock+0x12>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3301      	adds	r3, #1
 800e85c:	607b      	str	r3, [r7, #4]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d809      	bhi.n	800e878 <enq_lock+0x2c>
 800e864:	490a      	ldr	r1, [pc, #40]	; (800e890 <enq_lock+0x44>)
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	440b      	add	r3, r1
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1ef      	bne.n	800e858 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b02      	cmp	r3, #2
 800e87c:	bf14      	ite	ne
 800e87e:	2301      	movne	r3, #1
 800e880:	2300      	moveq	r3, #0
 800e882:	b2db      	uxtb	r3, r3
}
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	bc80      	pop	{r7}
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	20000e74 	.word	0x20000e74

0800e894 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e89e:	2300      	movs	r3, #0
 800e8a0:	60fb      	str	r3, [r7, #12]
 800e8a2:	e02b      	b.n	800e8fc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800e8a4:	4955      	ldr	r1, [pc, #340]	; (800e9fc <inc_lock+0x168>)
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	005b      	lsls	r3, r3, #1
 800e8ac:	4413      	add	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	440b      	add	r3, r1
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d11b      	bne.n	800e8f6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800e8be:	494f      	ldr	r1, [pc, #316]	; (800e9fc <inc_lock+0x168>)
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	4413      	add	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d10d      	bne.n	800e8f6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800e8da:	4948      	ldr	r1, [pc, #288]	; (800e9fc <inc_lock+0x168>)
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	4413      	add	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	440b      	add	r3, r1
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	881a      	ldrh	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d006      	beq.n	800e904 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	60fb      	str	r3, [r7, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d9d0      	bls.n	800e8a4 <inc_lock+0x10>
 800e902:	e000      	b.n	800e906 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800e904:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2b02      	cmp	r3, #2
 800e90a:	d145      	bne.n	800e998 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e90c:	2300      	movs	r3, #0
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e002      	b.n	800e918 <inc_lock+0x84>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	3301      	adds	r3, #1
 800e916:	60fb      	str	r3, [r7, #12]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d809      	bhi.n	800e932 <inc_lock+0x9e>
 800e91e:	4937      	ldr	r1, [pc, #220]	; (800e9fc <inc_lock+0x168>)
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4613      	mov	r3, r2
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	4413      	add	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	440b      	add	r3, r1
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1ef      	bne.n	800e912 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b02      	cmp	r3, #2
 800e936:	d101      	bne.n	800e93c <inc_lock+0xa8>
 800e938:	2300      	movs	r3, #0
 800e93a:	e05a      	b.n	800e9f2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800e942:	482e      	ldr	r0, [pc, #184]	; (800e9fc <inc_lock+0x168>)
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	4613      	mov	r3, r2
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	4413      	add	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4403      	add	r3, r0
 800e950:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800e958:	4828      	ldr	r0, [pc, #160]	; (800e9fc <inc_lock+0x168>)
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	4613      	mov	r3, r2
 800e95e:	005b      	lsls	r3, r3, #1
 800e960:	4413      	add	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	4403      	add	r3, r0
 800e966:	3304      	adds	r3, #4
 800e968:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800e970:	4922      	ldr	r1, [pc, #136]	; (800e9fc <inc_lock+0x168>)
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	4613      	mov	r3, r2
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	4413      	add	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	440b      	add	r3, r1
 800e97e:	3308      	adds	r3, #8
 800e980:	4602      	mov	r2, r0
 800e982:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800e984:	491d      	ldr	r1, [pc, #116]	; (800e9fc <inc_lock+0x168>)
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	4613      	mov	r3, r2
 800e98a:	005b      	lsls	r3, r3, #1
 800e98c:	4413      	add	r3, r2
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	440b      	add	r3, r1
 800e992:	330a      	adds	r3, #10
 800e994:	2200      	movs	r2, #0
 800e996:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00c      	beq.n	800e9b8 <inc_lock+0x124>
 800e99e:	4917      	ldr	r1, [pc, #92]	; (800e9fc <inc_lock+0x168>)
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	4413      	add	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	440b      	add	r3, r1
 800e9ac:	330a      	adds	r3, #10
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <inc_lock+0x124>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	e01c      	b.n	800e9f2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10b      	bne.n	800e9d6 <inc_lock+0x142>
 800e9be:	490f      	ldr	r1, [pc, #60]	; (800e9fc <inc_lock+0x168>)
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	440b      	add	r3, r1
 800e9cc:	330a      	adds	r3, #10
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	b299      	uxth	r1, r3
 800e9d4:	e001      	b.n	800e9da <inc_lock+0x146>
 800e9d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e9da:	4808      	ldr	r0, [pc, #32]	; (800e9fc <inc_lock+0x168>)
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	4413      	add	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4403      	add	r3, r0
 800e9e8:	330a      	adds	r3, #10
 800e9ea:	460a      	mov	r2, r1
 800e9ec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bc80      	pop	{r7}
 800e9fa:	4770      	bx	lr
 800e9fc:	20000e74 	.word	0x20000e74

0800ea00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	607b      	str	r3, [r7, #4]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d82e      	bhi.n	800ea72 <dec_lock+0x72>
		n = Files[i].ctr;
 800ea14:	491b      	ldr	r1, [pc, #108]	; (800ea84 <dec_lock+0x84>)
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	005b      	lsls	r3, r3, #1
 800ea1c:	4413      	add	r3, r2
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	440b      	add	r3, r1
 800ea22:	330a      	adds	r3, #10
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ea28:	89fb      	ldrh	r3, [r7, #14]
 800ea2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea2e:	d101      	bne.n	800ea34 <dec_lock+0x34>
 800ea30:	2300      	movs	r3, #0
 800ea32:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800ea34:	89fb      	ldrh	r3, [r7, #14]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <dec_lock+0x40>
 800ea3a:	89fb      	ldrh	r3, [r7, #14]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ea40:	4910      	ldr	r1, [pc, #64]	; (800ea84 <dec_lock+0x84>)
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	4613      	mov	r3, r2
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	440b      	add	r3, r1
 800ea4e:	330a      	adds	r3, #10
 800ea50:	89fa      	ldrh	r2, [r7, #14]
 800ea52:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea54:	89fb      	ldrh	r3, [r7, #14]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d108      	bne.n	800ea6c <dec_lock+0x6c>
 800ea5a:	490a      	ldr	r1, [pc, #40]	; (800ea84 <dec_lock+0x84>)
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	005b      	lsls	r3, r3, #1
 800ea62:	4413      	add	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	440b      	add	r3, r1
 800ea68:	2200      	movs	r2, #0
 800ea6a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	737b      	strb	r3, [r7, #13]
 800ea70:	e001      	b.n	800ea76 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea72:	2302      	movs	r3, #2
 800ea74:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ea76:	7b7b      	ldrb	r3, [r7, #13]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bc80      	pop	{r7}
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	20000e74 	.word	0x20000e74

0800ea88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ea90:	2300      	movs	r3, #0
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e016      	b.n	800eac4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ea96:	4910      	ldr	r1, [pc, #64]	; (800ead8 <clear_lock+0x50>)
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d108      	bne.n	800eabe <clear_lock+0x36>
 800eaac:	490a      	ldr	r1, [pc, #40]	; (800ead8 <clear_lock+0x50>)
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	4613      	mov	r3, r2
 800eab2:	005b      	lsls	r3, r3, #1
 800eab4:	4413      	add	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	440b      	add	r3, r1
 800eaba:	2200      	movs	r2, #0
 800eabc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3301      	adds	r3, #1
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d9e5      	bls.n	800ea96 <clear_lock+0xe>
	}
}
 800eaca:	bf00      	nop
 800eacc:	bf00      	nop
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bc80      	pop	{r7}
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	20000e74 	.word	0x20000e74

0800eadc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d038      	beq.n	800eb64 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800eaf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eb00:	6879      	ldr	r1, [r7, #4]
 800eb02:	2301      	movs	r3, #1
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	f7ff fd7f 	bl	800e608 <disk_write>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d002      	beq.n	800eb16 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	73fb      	strb	r3, [r7, #15]
 800eb14:	e026      	b.n	800eb64 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800eb24:	697a      	ldr	r2, [r7, #20]
 800eb26:	1ad2      	subs	r2, r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d218      	bcs.n	800eb64 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800eb38:	613b      	str	r3, [r7, #16]
 800eb3a:	e010      	b.n	800eb5e <sync_window+0x82>
					wsect += fs->fsize;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	4413      	add	r3, r2
 800eb46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eb4e:	6879      	ldr	r1, [r7, #4]
 800eb50:	2301      	movs	r3, #1
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	f7ff fd58 	bl	800e608 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	613b      	str	r3, [r7, #16]
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d8eb      	bhi.n	800eb3c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3718      	adds	r7, #24
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d01b      	beq.n	800ebc0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f7ff ffa7 	bl	800eadc <sync_window>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eb92:	7bfb      	ldrb	r3, [r7, #15]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d113      	bne.n	800ebc0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	2301      	movs	r3, #1
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	f7ff fd10 	bl	800e5c8 <disk_read>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d004      	beq.n	800ebb8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ebae:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800ebc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff ff82 	bl	800eadc <sync_window>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ebdc:	7bfb      	ldrb	r3, [r7, #15]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f040 809b 	bne.w	800ed1a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	f040 8088 	bne.w	800ed00 <sync_fs+0x136>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	f040 8082 	bne.w	800ed00 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec02:	2100      	movs	r1, #0
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7ff fd5b 	bl	800e6c0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2255      	movs	r2, #85	; 0x55
 800ec0e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	22aa      	movs	r2, #170	; 0xaa
 800ec16:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2252      	movs	r2, #82	; 0x52
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2252      	movs	r2, #82	; 0x52
 800ec24:	705a      	strb	r2, [r3, #1]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2261      	movs	r2, #97	; 0x61
 800ec2a:	709a      	strb	r2, [r3, #2]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2241      	movs	r2, #65	; 0x41
 800ec30:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2272      	movs	r2, #114	; 0x72
 800ec36:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2272      	movs	r2, #114	; 0x72
 800ec3e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2241      	movs	r2, #65	; 0x41
 800ec46:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2261      	movs	r2, #97	; 0x61
 800ec4e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec58:	b2da      	uxtb	r2, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	0a1b      	lsrs	r3, r3, #8
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec7a:	0c1b      	lsrs	r3, r3, #16
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec8a:	0e1b      	lsrs	r3, r3, #24
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ec9a:	b2da      	uxtb	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	0a1b      	lsrs	r3, r3, #8
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ecbc:	0c1b      	lsrs	r3, r3, #16
 800ecbe:	b2da      	uxtb	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eccc:	0e1b      	lsrs	r3, r3, #24
 800ecce:	b2da      	uxtb	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ecea:	6879      	ldr	r1, [r7, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	f7ff fc88 	bl	800e608 <disk_write>
			fs->fsi_flag = 0;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ed06:	2200      	movs	r2, #0
 800ed08:	2100      	movs	r1, #0
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff fc9c 	bl	800e648 <disk_ioctl>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d001      	beq.n	800ed1a <sync_fs+0x150>
			res = FR_DISK_ERR;
 800ed16:	2301      	movs	r3, #1
 800ed18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	3b02      	subs	r3, #2
 800ed32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed3a:	3b02      	subs	r3, #2
 800ed3c:	683a      	ldr	r2, [r7, #0]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d301      	bcc.n	800ed46 <clust2sect+0x22>
 800ed42:	2300      	movs	r3, #0
 800ed44:	e00a      	b.n	800ed5c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	fb03 f202 	mul.w	r2, r3, r2
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800ed5a:	4413      	add	r3, r2
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bc80      	pop	{r7}
 800ed64:	4770      	bx	lr

0800ed66 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b086      	sub	sp, #24
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d905      	bls.n	800ed82 <get_fat+0x1c>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d302      	bcc.n	800ed88 <get_fat+0x22>
		val = 1;	/* Internal error */
 800ed82:	2301      	movs	r3, #1
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	e0a3      	b.n	800eed0 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ed88:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d068      	beq.n	800ee6a <get_fat+0x104>
 800ed98:	2b03      	cmp	r3, #3
 800ed9a:	f300 808f 	bgt.w	800eebc <get_fat+0x156>
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d002      	beq.n	800eda8 <get_fat+0x42>
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d040      	beq.n	800ee28 <get_fat+0xc2>
 800eda6:	e089      	b.n	800eebc <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	60fb      	str	r3, [r7, #12]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	085b      	lsrs	r3, r3, #1
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	0a5b      	lsrs	r3, r3, #9
 800edc0:	4413      	add	r3, r2
 800edc2:	4619      	mov	r1, r3
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f7ff fed2 	bl	800eb6e <move_window>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d178      	bne.n	800eec2 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	1c5a      	adds	r2, r3, #1
 800edd4:	60fa      	str	r2, [r7, #12]
 800edd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	5cd3      	ldrb	r3, [r2, r3]
 800edde:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	0a5b      	lsrs	r3, r3, #9
 800edea:	4413      	add	r3, r2
 800edec:	4619      	mov	r1, r3
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7ff febd 	bl	800eb6e <move_window>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d165      	bne.n	800eec6 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	5cd3      	ldrb	r3, [r2, r3]
 800ee04:	021b      	lsls	r3, r3, #8
 800ee06:	461a      	mov	r2, r3
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d002      	beq.n	800ee1e <get_fat+0xb8>
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	091b      	lsrs	r3, r3, #4
 800ee1c:	e002      	b.n	800ee24 <get_fat+0xbe>
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee24:	617b      	str	r3, [r7, #20]
			break;
 800ee26:	e053      	b.n	800eed0 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	0a1b      	lsrs	r3, r3, #8
 800ee32:	4413      	add	r3, r2
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f7ff fe99 	bl	800eb6e <move_window>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d143      	bne.n	800eeca <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	3301      	adds	r3, #1
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	021b      	lsls	r3, r3, #8
 800ee58:	b21a      	sxth	r2, r3
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	b21b      	sxth	r3, r3
 800ee60:	4313      	orrs	r3, r2
 800ee62:	b21b      	sxth	r3, r3
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	617b      	str	r3, [r7, #20]
			break;
 800ee68:	e032      	b.n	800eed0 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	09db      	lsrs	r3, r3, #7
 800ee74:	4413      	add	r3, r2
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff fe78 	bl	800eb6e <move_window>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d124      	bne.n	800eece <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	4413      	add	r3, r2
 800ee90:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	3303      	adds	r3, #3
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	061a      	lsls	r2, r3, #24
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	3302      	adds	r3, #2
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	041b      	lsls	r3, r3, #16
 800eea2:	4313      	orrs	r3, r2
 800eea4:	693a      	ldr	r2, [r7, #16]
 800eea6:	3201      	adds	r2, #1
 800eea8:	7812      	ldrb	r2, [r2, #0]
 800eeaa:	0212      	lsls	r2, r2, #8
 800eeac:	4313      	orrs	r3, r2
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	7812      	ldrb	r2, [r2, #0]
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eeb8:	617b      	str	r3, [r7, #20]
			break;
 800eeba:	e009      	b.n	800eed0 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800eebc:	2301      	movs	r3, #1
 800eebe:	617b      	str	r3, [r7, #20]
 800eec0:	e006      	b.n	800eed0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eec2:	bf00      	nop
 800eec4:	e004      	b.n	800eed0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eec6:	bf00      	nop
 800eec8:	e002      	b.n	800eed0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eeca:	bf00      	nop
 800eecc:	e000      	b.n	800eed0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eece:	bf00      	nop
		}
	}

	return val;
 800eed0:	697b      	ldr	r3, [r7, #20]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3718      	adds	r7, #24
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b088      	sub	sp, #32
 800eede:	af00      	add	r7, sp, #0
 800eee0:	60f8      	str	r0, [r7, #12]
 800eee2:	60b9      	str	r1, [r7, #8]
 800eee4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d905      	bls.n	800eef8 <put_fat+0x1e>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d302      	bcc.n	800eefe <put_fat+0x24>
		res = FR_INT_ERR;
 800eef8:	2302      	movs	r3, #2
 800eefa:	77fb      	strb	r3, [r7, #31]
 800eefc:	e0f6      	b.n	800f0ec <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	f000 809e 	beq.w	800f046 <put_fat+0x16c>
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	f300 80e4 	bgt.w	800f0d8 <put_fat+0x1fe>
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d002      	beq.n	800ef1a <put_fat+0x40>
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d06f      	beq.n	800eff8 <put_fat+0x11e>
 800ef18:	e0de      	b.n	800f0d8 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	617b      	str	r3, [r7, #20]
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	085b      	lsrs	r3, r3, #1
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	4413      	add	r3, r2
 800ef26:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	0a5b      	lsrs	r3, r3, #9
 800ef32:	4413      	add	r3, r2
 800ef34:	4619      	mov	r1, r3
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f7ff fe19 	bl	800eb6e <move_window>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef40:	7ffb      	ldrb	r3, [r7, #31]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	f040 80cb 	bne.w	800f0de <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	1c5a      	adds	r2, r3, #1
 800ef4c:	617a      	str	r2, [r7, #20]
 800ef4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	4413      	add	r3, r2
 800ef56:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00d      	beq.n	800ef7e <put_fat+0xa4>
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	b25b      	sxtb	r3, r3
 800ef68:	f003 030f 	and.w	r3, r3, #15
 800ef6c:	b25a      	sxtb	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	011b      	lsls	r3, r3, #4
 800ef74:	b25b      	sxtb	r3, r3
 800ef76:	4313      	orrs	r3, r2
 800ef78:	b25b      	sxtb	r3, r3
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	e001      	b.n	800ef82 <put_fat+0xa8>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	0a5b      	lsrs	r3, r3, #9
 800ef98:	4413      	add	r3, r2
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f7ff fde6 	bl	800eb6e <move_window>
 800efa2:	4603      	mov	r3, r0
 800efa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800efa6:	7ffb      	ldrb	r3, [r7, #31]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f040 809a 	bne.w	800f0e2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	4413      	add	r3, r2
 800efb8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	f003 0301 	and.w	r3, r3, #1
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d003      	beq.n	800efcc <put_fat+0xf2>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	091b      	lsrs	r3, r3, #4
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	e00e      	b.n	800efea <put_fat+0x110>
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	b25b      	sxtb	r3, r3
 800efd2:	f023 030f 	bic.w	r3, r3, #15
 800efd6:	b25a      	sxtb	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	0a1b      	lsrs	r3, r3, #8
 800efdc:	b25b      	sxtb	r3, r3
 800efde:	f003 030f 	and.w	r3, r3, #15
 800efe2:	b25b      	sxtb	r3, r3
 800efe4:	4313      	orrs	r3, r2
 800efe6:	b25b      	sxtb	r3, r3
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	69ba      	ldr	r2, [r7, #24]
 800efec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2201      	movs	r2, #1
 800eff2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800eff6:	e079      	b.n	800f0ec <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	0a1b      	lsrs	r3, r3, #8
 800f002:	4413      	add	r3, r2
 800f004:	4619      	mov	r1, r3
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7ff fdb1 	bl	800eb6e <move_window>
 800f00c:	4603      	mov	r3, r0
 800f00e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f010:	7ffb      	ldrb	r3, [r7, #31]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d167      	bne.n	800f0e6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	b2da      	uxtb	r2, r3
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	701a      	strb	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	b29b      	uxth	r3, r3
 800f030:	0a1b      	lsrs	r3, r3, #8
 800f032:	b29a      	uxth	r2, r3
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	3301      	adds	r3, #1
 800f038:	b2d2      	uxtb	r2, r2
 800f03a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800f044:	e052      	b.n	800f0ec <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	09db      	lsrs	r3, r3, #7
 800f050:	4413      	add	r3, r2
 800f052:	4619      	mov	r1, r3
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f7ff fd8a 	bl	800eb6e <move_window>
 800f05a:	4603      	mov	r3, r0
 800f05c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f05e:	7ffb      	ldrb	r3, [r7, #31]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d142      	bne.n	800f0ea <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	3303      	adds	r3, #3
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	061a      	lsls	r2, r3, #24
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	3302      	adds	r3, #2
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	041b      	lsls	r3, r3, #16
 800f082:	4313      	orrs	r3, r2
 800f084:	69ba      	ldr	r2, [r7, #24]
 800f086:	3201      	adds	r2, #1
 800f088:	7812      	ldrb	r2, [r2, #0]
 800f08a:	0212      	lsls	r2, r2, #8
 800f08c:	4313      	orrs	r3, r2
 800f08e:	69ba      	ldr	r2, [r7, #24]
 800f090:	7812      	ldrb	r2, [r2, #0]
 800f092:	4313      	orrs	r3, r2
 800f094:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	0a1b      	lsrs	r3, r3, #8
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	b2d2      	uxtb	r2, r2
 800f0b4:	701a      	strb	r2, [r3, #0]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	0c1a      	lsrs	r2, r3, #16
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	3302      	adds	r3, #2
 800f0be:	b2d2      	uxtb	r2, r2
 800f0c0:	701a      	strb	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	0e1a      	lsrs	r2, r3, #24
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	3303      	adds	r3, #3
 800f0ca:	b2d2      	uxtb	r2, r2
 800f0cc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800f0d6:	e009      	b.n	800f0ec <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800f0d8:	2302      	movs	r3, #2
 800f0da:	77fb      	strb	r3, [r7, #31]
 800f0dc:	e006      	b.n	800f0ec <put_fat+0x212>
			if (res != FR_OK) break;
 800f0de:	bf00      	nop
 800f0e0:	e004      	b.n	800f0ec <put_fat+0x212>
			if (res != FR_OK) break;
 800f0e2:	bf00      	nop
 800f0e4:	e002      	b.n	800f0ec <put_fat+0x212>
			if (res != FR_OK) break;
 800f0e6:	bf00      	nop
 800f0e8:	e000      	b.n	800f0ec <put_fat+0x212>
			if (res != FR_OK) break;
 800f0ea:	bf00      	nop
		}
	}

	return res;
 800f0ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3720      	adds	r7, #32
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b084      	sub	sp, #16
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2b01      	cmp	r3, #1
 800f104:	d905      	bls.n	800f112 <remove_chain+0x1c>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f10c:	683a      	ldr	r2, [r7, #0]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d302      	bcc.n	800f118 <remove_chain+0x22>
		res = FR_INT_ERR;
 800f112:	2302      	movs	r3, #2
 800f114:	73fb      	strb	r3, [r7, #15]
 800f116:	e043      	b.n	800f1a0 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800f118:	2300      	movs	r3, #0
 800f11a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f11c:	e036      	b.n	800f18c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff fe20 	bl	800ed66 <get_fat>
 800f126:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d035      	beq.n	800f19a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d102      	bne.n	800f13a <remove_chain+0x44>
 800f134:	2302      	movs	r3, #2
 800f136:	73fb      	strb	r3, [r7, #15]
 800f138:	e032      	b.n	800f1a0 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f140:	d102      	bne.n	800f148 <remove_chain+0x52>
 800f142:	2301      	movs	r3, #1
 800f144:	73fb      	strb	r3, [r7, #15]
 800f146:	e02b      	b.n	800f1a0 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800f148:	2200      	movs	r2, #0
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7ff fec4 	bl	800eeda <put_fat>
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d120      	bne.n	800f19e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f166:	d00f      	beq.n	800f188 <remove_chain+0x92>
				fs->free_clust++;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800f17c:	f043 0301 	orr.w	r3, r3, #1
 800f180:	b2da      	uxtb	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	429a      	cmp	r2, r3
 800f196:	d3c2      	bcc.n	800f11e <remove_chain+0x28>
 800f198:	e002      	b.n	800f1a0 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800f19a:	bf00      	nop
 800f19c:	e000      	b.n	800f1a0 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800f19e:	bf00      	nop
		}
	}

	return res;
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b086      	sub	sp, #24
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d10f      	bne.n	800f1da <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f1c0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d005      	beq.n	800f1d4 <create_chain+0x2a>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d31c      	bcc.n	800f20e <create_chain+0x64>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	613b      	str	r3, [r7, #16]
 800f1d8:	e019      	b.n	800f20e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7ff fdc2 	bl	800ed66 <get_fat>
 800f1e2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d801      	bhi.n	800f1ee <create_chain+0x44>
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e076      	b.n	800f2dc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f4:	d101      	bne.n	800f1fa <create_chain+0x50>
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	e070      	b.n	800f2dc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f200:	68ba      	ldr	r2, [r7, #8]
 800f202:	429a      	cmp	r2, r3
 800f204:	d201      	bcs.n	800f20a <create_chain+0x60>
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	e068      	b.n	800f2dc <create_chain+0x132>
		scl = clst;
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	3301      	adds	r3, #1
 800f216:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	429a      	cmp	r2, r3
 800f222:	d307      	bcc.n	800f234 <create_chain+0x8a>
			ncl = 2;
 800f224:	2302      	movs	r3, #2
 800f226:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800f228:	697a      	ldr	r2, [r7, #20]
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d901      	bls.n	800f234 <create_chain+0x8a>
 800f230:	2300      	movs	r3, #0
 800f232:	e053      	b.n	800f2dc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800f234:	6979      	ldr	r1, [r7, #20]
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff fd95 	bl	800ed66 <get_fat>
 800f23c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00e      	beq.n	800f262 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f24a:	d002      	beq.n	800f252 <create_chain+0xa8>
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d101      	bne.n	800f256 <create_chain+0xac>
			return cs;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	e042      	b.n	800f2dc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d1d9      	bne.n	800f212 <create_chain+0x68>
 800f25e:	2300      	movs	r3, #0
 800f260:	e03c      	b.n	800f2dc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800f262:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800f264:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800f268:	6979      	ldr	r1, [r7, #20]
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7ff fe35 	bl	800eeda <put_fat>
 800f270:	4603      	mov	r3, r0
 800f272:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800f274:	7bfb      	ldrb	r3, [r7, #15]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d109      	bne.n	800f28e <create_chain+0xe4>
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d006      	beq.n	800f28e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff fe28 	bl	800eeda <put_fat>
 800f28a:	4603      	mov	r3, r0
 800f28c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d11a      	bne.n	800f2ca <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	697a      	ldr	r2, [r7, #20]
 800f298:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a6:	d018      	beq.n	800f2da <create_chain+0x130>
			fs->free_clust--;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f2ae:	1e5a      	subs	r2, r3, #1
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800f2bc:	f043 0301 	orr.w	r3, r3, #1
 800f2c0:	b2da      	uxtb	r2, r3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800f2c8:	e007      	b.n	800f2da <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d102      	bne.n	800f2d6 <create_chain+0x12c>
 800f2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d4:	e000      	b.n	800f2d8 <create_chain+0x12e>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800f2da:	697b      	ldr	r3, [r7, #20]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3718      	adds	r7, #24
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	0a5b      	lsrs	r3, r3, #9
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f302:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800f306:	fbb3 f3f2 	udiv	r3, r3, r2
 800f30a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	613a      	str	r2, [r7, #16]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d101      	bne.n	800f320 <clmt_clust+0x3c>
 800f31c:	2300      	movs	r3, #0
 800f31e:	e010      	b.n	800f342 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	429a      	cmp	r2, r3
 800f326:	d307      	bcc.n	800f338 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	617b      	str	r3, [r7, #20]
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	3304      	adds	r3, #4
 800f334:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f336:	e7e9      	b.n	800f30c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800f338:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	4413      	add	r3, r2
}
 800f342:	4618      	mov	r0, r3
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	bc80      	pop	{r7}
 800f34a:	4770      	bx	lr

0800f34c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	b29a      	uxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800f366:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d007      	beq.n	800f37e <dir_sdi+0x32>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f374:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f378:	697a      	ldr	r2, [r7, #20]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d301      	bcc.n	800f382 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f37e:	2302      	movs	r3, #2
 800f380:	e074      	b.n	800f46c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10c      	bne.n	800f3a2 <dir_sdi+0x56>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f392:	2b03      	cmp	r3, #3
 800f394:	d105      	bne.n	800f3a2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f39c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f3a0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d111      	bne.n	800f3cc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3ae:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d301      	bcc.n	800f3be <dir_sdi+0x72>
			return FR_INT_ERR;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	e056      	b.n	800f46c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f3c8:	613b      	str	r3, [r7, #16]
 800f3ca:	e032      	b.n	800f432 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3d2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f3d6:	011b      	lsls	r3, r3, #4
 800f3d8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800f3da:	e01e      	b.n	800f41a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f3e2:	6979      	ldr	r1, [r7, #20]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff fcbe 	bl	800ed66 <get_fat>
 800f3ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f2:	d101      	bne.n	800f3f8 <dir_sdi+0xac>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e039      	b.n	800f46c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d907      	bls.n	800f40e <dir_sdi+0xc2>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f408:	697a      	ldr	r2, [r7, #20]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d301      	bcc.n	800f412 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800f40e:	2302      	movs	r3, #2
 800f410:	e02c      	b.n	800f46c <dir_sdi+0x120>
			idx -= ic;
 800f412:	683a      	ldr	r2, [r7, #0]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	1ad3      	subs	r3, r2, r3
 800f418:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d2dc      	bcs.n	800f3dc <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f428:	6979      	ldr	r1, [r7, #20]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7ff fc7a 	bl	800ed24 <clust2sect>
 800f430:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	697a      	ldr	r2, [r7, #20]
 800f436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <dir_sdi+0xf8>
 800f440:	2302      	movs	r3, #2
 800f442:	e013      	b.n	800f46c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	091a      	lsrs	r2, r3, #4
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	441a      	add	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f458:	461a      	mov	r2, r3
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	f003 030f 	and.w	r3, r3, #15
 800f460:	015b      	lsls	r3, r3, #5
 800f462:	441a      	add	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800f46a:	2300      	movs	r3, #0
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f474:	b590      	push	{r4, r7, lr}
 800f476:	b087      	sub	sp, #28
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800f484:	3301      	adds	r3, #1
 800f486:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d004      	beq.n	800f49a <dir_next+0x26>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f496:	2b00      	cmp	r3, #0
 800f498:	d101      	bne.n	800f49e <dir_next+0x2a>
		return FR_NO_FILE;
 800f49a:	2304      	movs	r3, #4
 800f49c:	e0dd      	b.n	800f65a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	f003 030f 	and.w	r3, r3, #15
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f040 80c6 	bne.w	800f636 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d10b      	bne.n	800f4da <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f4c8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	f0c0 80b0 	bcc.w	800f636 <dir_next+0x1c2>
				return FR_NO_FILE;
 800f4d6:	2304      	movs	r3, #4
 800f4d8:	e0bf      	b.n	800f65a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	091b      	lsrs	r3, r3, #4
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800f4e4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800f4e8:	3a01      	subs	r2, #1
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f040 80a2 	bne.w	800f636 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7ff fc30 	bl	800ed66 <get_fat>
 800f506:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d801      	bhi.n	800f512 <dir_next+0x9e>
 800f50e:	2302      	movs	r3, #2
 800f510:	e0a3      	b.n	800f65a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f518:	d101      	bne.n	800f51e <dir_next+0xaa>
 800f51a:	2301      	movs	r3, #1
 800f51c:	e09d      	b.n	800f65a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f524:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d374      	bcc.n	800f618 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <dir_next+0xc4>
 800f534:	2304      	movs	r3, #4
 800f536:	e090      	b.n	800f65a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f7ff fe2f 	bl	800f1aa <create_chain>
 800f54c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d101      	bne.n	800f558 <dir_next+0xe4>
 800f554:	2307      	movs	r3, #7
 800f556:	e080      	b.n	800f65a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d101      	bne.n	800f562 <dir_next+0xee>
 800f55e:	2302      	movs	r3, #2
 800f560:	e07b      	b.n	800f65a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f568:	d101      	bne.n	800f56e <dir_next+0xfa>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e075      	b.n	800f65a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff fab1 	bl	800eadc <sync_window>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d001      	beq.n	800f584 <dir_next+0x110>
 800f580:	2301      	movs	r3, #1
 800f582:	e06a      	b.n	800f65a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f58a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f58e:	2100      	movs	r1, #0
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff f895 	bl	800e6c0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800f5a2:	6979      	ldr	r1, [r7, #20]
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	f7ff fbbd 	bl	800ed24 <clust2sect>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	613b      	str	r3, [r7, #16]
 800f5b4:	e01b      	b.n	800f5ee <dir_next+0x17a>
						dp->fs->wflag = 1;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5bc:	2201      	movs	r2, #1
 800f5be:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7ff fa87 	bl	800eadc <sync_window>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <dir_next+0x164>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e040      	b.n	800f65a <dir_next+0x1e6>
						dp->fs->winsect++;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5de:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800f5e2:	3201      	adds	r2, #1
 800f5e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	613b      	str	r3, [r7, #16]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f5f4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d3da      	bcc.n	800f5b6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f606:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	1a8a      	subs	r2, r1, r2
 800f614:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f626:	6979      	ldr	r1, [r7, #20]
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff fb7b 	bl	800ed24 <clust2sect>
 800f62e:	4602      	mov	r2, r0
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	b29a      	uxth	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f646:	461a      	mov	r2, r3
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f003 030f 	and.w	r3, r3, #15
 800f64e:	015b      	lsls	r3, r3, #5
 800f650:	441a      	add	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd90      	pop	{r4, r7, pc}

0800f662 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b084      	sub	sp, #16
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800f66c:	2100      	movs	r1, #0
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff fe6c 	bl	800f34c <dir_sdi>
 800f674:	4603      	mov	r3, r0
 800f676:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f678:	7bfb      	ldrb	r3, [r7, #15]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d131      	bne.n	800f6e2 <dir_alloc+0x80>
		n = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f68e:	4619      	mov	r1, r3
 800f690:	4610      	mov	r0, r2
 800f692:	f7ff fa6c 	bl	800eb6e <move_window>
 800f696:	4603      	mov	r3, r0
 800f698:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d11f      	bne.n	800f6e0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	2be5      	cmp	r3, #229	; 0xe5
 800f6aa:	d005      	beq.n	800f6b8 <dir_alloc+0x56>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d107      	bne.n	800f6c8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	60bb      	str	r3, [r7, #8]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d102      	bne.n	800f6cc <dir_alloc+0x6a>
 800f6c6:	e00c      	b.n	800f6e2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800f6cc:	2101      	movs	r1, #1
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f7ff fed0 	bl	800f474 <dir_next>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800f6d8:	7bfb      	ldrb	r3, [r7, #15]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d0d1      	beq.n	800f682 <dir_alloc+0x20>
 800f6de:	e000      	b.n	800f6e2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800f6e0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	d101      	bne.n	800f6ec <dir_alloc+0x8a>
 800f6e8:	2307      	movs	r3, #7
 800f6ea:	73fb      	strb	r3, [r7, #15]
	return res;
 800f6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800f6f6:	b480      	push	{r7}
 800f6f8:	b085      	sub	sp, #20
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	331b      	adds	r3, #27
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	021b      	lsls	r3, r3, #8
 800f708:	b21a      	sxth	r2, r3
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	331a      	adds	r3, #26
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	b21b      	sxth	r3, r3
 800f712:	4313      	orrs	r3, r2
 800f714:	b21b      	sxth	r3, r3
 800f716:	b29b      	uxth	r3, r3
 800f718:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f720:	2b03      	cmp	r3, #3
 800f722:	d10f      	bne.n	800f744 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	3315      	adds	r3, #21
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	021b      	lsls	r3, r3, #8
 800f72c:	b21a      	sxth	r2, r3
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	3314      	adds	r3, #20
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	b21b      	sxth	r3, r3
 800f736:	4313      	orrs	r3, r2
 800f738:	b21b      	sxth	r3, r3
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	041b      	lsls	r3, r3, #16
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	4313      	orrs	r3, r2
 800f742:	60fb      	str	r3, [r7, #12]

	return cl;
 800f744:	68fb      	ldr	r3, [r7, #12]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3714      	adds	r7, #20
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bc80      	pop	{r7}
 800f74e:	4770      	bx	lr

0800f750 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	331a      	adds	r3, #26
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	b2d2      	uxtb	r2, r2
 800f762:	701a      	strb	r2, [r3, #0]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	b29b      	uxth	r3, r3
 800f768:	0a1b      	lsrs	r3, r3, #8
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	331b      	adds	r3, #27
 800f770:	b2d2      	uxtb	r2, r2
 800f772:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	0c1a      	lsrs	r2, r3, #16
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	3314      	adds	r3, #20
 800f77c:	b2d2      	uxtb	r2, r2
 800f77e:	701a      	strb	r2, [r3, #0]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	0c1b      	lsrs	r3, r3, #16
 800f784:	b29b      	uxth	r3, r3
 800f786:	0a1b      	lsrs	r3, r3, #8
 800f788:	b29a      	uxth	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	3315      	adds	r3, #21
 800f78e:	b2d2      	uxtb	r2, r2
 800f790:	701a      	strb	r2, [r3, #0]
}
 800f792:	bf00      	nop
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	bc80      	pop	{r7}
 800f79a:	4770      	bx	lr

0800f79c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff fdd0 	bl	800f34c <dir_sdi>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <dir_find+0x1e>
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	e03b      	b.n	800f832 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	f7ff f9d0 	bl	800eb6e <move_window>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f7d2:	7dfb      	ldrb	r3, [r7, #23]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d128      	bne.n	800f82a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f7de:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f7e6:	7bfb      	ldrb	r3, [r7, #15]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d102      	bne.n	800f7f2 <dir_find+0x56>
 800f7ec:	2304      	movs	r3, #4
 800f7ee:	75fb      	strb	r3, [r7, #23]
 800f7f0:	e01e      	b.n	800f830 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	330b      	adds	r3, #11
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 0308 	and.w	r3, r3, #8
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10a      	bne.n	800f816 <dir_find+0x7a>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f806:	220b      	movs	r2, #11
 800f808:	4619      	mov	r1, r3
 800f80a:	6938      	ldr	r0, [r7, #16]
 800f80c:	f7fe ff72 	bl	800e6f4 <mem_cmp>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00b      	beq.n	800f82e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800f816:	2100      	movs	r1, #0
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff fe2b 	bl	800f474 <dir_next>
 800f81e:	4603      	mov	r3, r0
 800f820:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f822:	7dfb      	ldrb	r3, [r7, #23]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d0c8      	beq.n	800f7ba <dir_find+0x1e>
 800f828:	e002      	b.n	800f830 <dir_find+0x94>
		if (res != FR_OK) break;
 800f82a:	bf00      	nop
 800f82c:	e000      	b.n	800f830 <dir_find+0x94>
			break;
 800f82e:	bf00      	nop

	return res;
 800f830:	7dfb      	ldrb	r3, [r7, #23]
}
 800f832:	4618      	mov	r0, r3
 800f834:	3718      	adds	r7, #24
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b084      	sub	sp, #16
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f842:	2101      	movs	r1, #1
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7ff ff0c 	bl	800f662 <dir_alloc>
 800f84a:	4603      	mov	r3, r0
 800f84c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800f84e:	7bfb      	ldrb	r3, [r7, #15]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d126      	bne.n	800f8a2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f860:	4619      	mov	r1, r3
 800f862:	4610      	mov	r0, r2
 800f864:	f7ff f983 	bl	800eb6e <move_window>
 800f868:	4603      	mov	r3, r0
 800f86a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d117      	bne.n	800f8a2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f878:	2220      	movs	r2, #32
 800f87a:	2100      	movs	r1, #0
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe ff1f 	bl	800e6c0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f88e:	220b      	movs	r2, #11
 800f890:	4619      	mov	r1, r3
 800f892:	f7fe fef7 	bl	800e684 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f89c:	2201      	movs	r2, #1
 800f89e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	60fb      	str	r3, [r7, #12]
 800f8bc:	e002      	b.n	800f8c4 <create_name+0x18>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b2f      	cmp	r3, #47	; 0x2f
 800f8ca:	d0f8      	beq.n	800f8be <create_name+0x12>
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b5c      	cmp	r3, #92	; 0x5c
 800f8d2:	d0f4      	beq.n	800f8be <create_name+0x12>
	sfn = dp->fn;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f8da:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f8dc:	220b      	movs	r2, #11
 800f8de:	2120      	movs	r1, #32
 800f8e0:	68b8      	ldr	r0, [r7, #8]
 800f8e2:	f7fe feed 	bl	800e6c0 <mem_set>
	si = i = b = 0; ni = 8;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	77fb      	strb	r3, [r7, #31]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	613b      	str	r3, [r7, #16]
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	617b      	str	r3, [r7, #20]
 800f8f2:	2308      	movs	r3, #8
 800f8f4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	1c5a      	adds	r2, r3, #1
 800f8fa:	617a      	str	r2, [r7, #20]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	4413      	add	r3, r2
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800f904:	7fbb      	ldrb	r3, [r7, #30]
 800f906:	2b20      	cmp	r3, #32
 800f908:	d953      	bls.n	800f9b2 <create_name+0x106>
 800f90a:	7fbb      	ldrb	r3, [r7, #30]
 800f90c:	2b2f      	cmp	r3, #47	; 0x2f
 800f90e:	d050      	beq.n	800f9b2 <create_name+0x106>
 800f910:	7fbb      	ldrb	r3, [r7, #30]
 800f912:	2b5c      	cmp	r3, #92	; 0x5c
 800f914:	d04d      	beq.n	800f9b2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800f916:	7fbb      	ldrb	r3, [r7, #30]
 800f918:	2b2e      	cmp	r3, #46	; 0x2e
 800f91a:	d003      	beq.n	800f924 <create_name+0x78>
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	69bb      	ldr	r3, [r7, #24]
 800f920:	429a      	cmp	r2, r3
 800f922:	d30f      	bcc.n	800f944 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	2b08      	cmp	r3, #8
 800f928:	d102      	bne.n	800f930 <create_name+0x84>
 800f92a:	7fbb      	ldrb	r3, [r7, #30]
 800f92c:	2b2e      	cmp	r3, #46	; 0x2e
 800f92e:	d001      	beq.n	800f934 <create_name+0x88>
 800f930:	2306      	movs	r3, #6
 800f932:	e073      	b.n	800fa1c <create_name+0x170>
			i = 8; ni = 11;
 800f934:	2308      	movs	r3, #8
 800f936:	613b      	str	r3, [r7, #16]
 800f938:	230b      	movs	r3, #11
 800f93a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800f93c:	7ffb      	ldrb	r3, [r7, #31]
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	77fb      	strb	r3, [r7, #31]
 800f942:	e035      	b.n	800f9b0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f944:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	da08      	bge.n	800f95e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800f94c:	7ffb      	ldrb	r3, [r7, #31]
 800f94e:	f043 0303 	orr.w	r3, r3, #3
 800f952:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f954:	7fbb      	ldrb	r3, [r7, #30]
 800f956:	3b80      	subs	r3, #128	; 0x80
 800f958:	4a32      	ldr	r2, [pc, #200]	; (800fa24 <create_name+0x178>)
 800f95a:	5cd3      	ldrb	r3, [r2, r3]
 800f95c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800f95e:	7fbb      	ldrb	r3, [r7, #30]
 800f960:	4619      	mov	r1, r3
 800f962:	4831      	ldr	r0, [pc, #196]	; (800fa28 <create_name+0x17c>)
 800f964:	f7fe feec 	bl	800e740 <chk_chr>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <create_name+0xc6>
				return FR_INVALID_NAME;
 800f96e:	2306      	movs	r3, #6
 800f970:	e054      	b.n	800fa1c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800f972:	7fbb      	ldrb	r3, [r7, #30]
 800f974:	2b40      	cmp	r3, #64	; 0x40
 800f976:	d907      	bls.n	800f988 <create_name+0xdc>
 800f978:	7fbb      	ldrb	r3, [r7, #30]
 800f97a:	2b5a      	cmp	r3, #90	; 0x5a
 800f97c:	d804      	bhi.n	800f988 <create_name+0xdc>
				b |= 2;
 800f97e:	7ffb      	ldrb	r3, [r7, #31]
 800f980:	f043 0302 	orr.w	r3, r3, #2
 800f984:	77fb      	strb	r3, [r7, #31]
 800f986:	e00c      	b.n	800f9a2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800f988:	7fbb      	ldrb	r3, [r7, #30]
 800f98a:	2b60      	cmp	r3, #96	; 0x60
 800f98c:	d909      	bls.n	800f9a2 <create_name+0xf6>
 800f98e:	7fbb      	ldrb	r3, [r7, #30]
 800f990:	2b7a      	cmp	r3, #122	; 0x7a
 800f992:	d806      	bhi.n	800f9a2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800f994:	7ffb      	ldrb	r3, [r7, #31]
 800f996:	f043 0301 	orr.w	r3, r3, #1
 800f99a:	77fb      	strb	r3, [r7, #31]
 800f99c:	7fbb      	ldrb	r3, [r7, #30]
 800f99e:	3b20      	subs	r3, #32
 800f9a0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	613a      	str	r2, [r7, #16]
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	7fba      	ldrb	r2, [r7, #30]
 800f9ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f9b0:	e7a1      	b.n	800f8f6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	441a      	add	r2, r3
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f9bc:	7fbb      	ldrb	r3, [r7, #30]
 800f9be:	2b20      	cmp	r3, #32
 800f9c0:	d801      	bhi.n	800f9c6 <create_name+0x11a>
 800f9c2:	2304      	movs	r3, #4
 800f9c4:	e000      	b.n	800f9c8 <create_name+0x11c>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d101      	bne.n	800f9d4 <create_name+0x128>
 800f9d0:	2306      	movs	r3, #6
 800f9d2:	e023      	b.n	800fa1c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	2be5      	cmp	r3, #229	; 0xe5
 800f9da:	d102      	bne.n	800f9e2 <create_name+0x136>
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	2205      	movs	r2, #5
 800f9e0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	2b08      	cmp	r3, #8
 800f9e6:	d102      	bne.n	800f9ee <create_name+0x142>
 800f9e8:	7ffb      	ldrb	r3, [r7, #31]
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800f9ee:	7ffb      	ldrb	r3, [r7, #31]
 800f9f0:	f003 0303 	and.w	r3, r3, #3
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d103      	bne.n	800fa00 <create_name+0x154>
 800f9f8:	7fbb      	ldrb	r3, [r7, #30]
 800f9fa:	f043 0310 	orr.w	r3, r3, #16
 800f9fe:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800fa00:	7ffb      	ldrb	r3, [r7, #31]
 800fa02:	f003 030c 	and.w	r3, r3, #12
 800fa06:	2b04      	cmp	r3, #4
 800fa08:	d103      	bne.n	800fa12 <create_name+0x166>
 800fa0a:	7fbb      	ldrb	r3, [r7, #30]
 800fa0c:	f043 0308 	orr.w	r3, r3, #8
 800fa10:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	330b      	adds	r3, #11
 800fa16:	7fba      	ldrb	r2, [r7, #30]
 800fa18:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fa1a:	2300      	movs	r3, #0
#endif
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3720      	adds	r7, #32
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	0802de44 	.word	0x0802de44
 800fa28:	08014b8c 	.word	0x08014b8c

0800fa2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b2f      	cmp	r3, #47	; 0x2f
 800fa3c:	d003      	beq.n	800fa46 <follow_path+0x1a>
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	2b5c      	cmp	r3, #92	; 0x5c
 800fa44:	d102      	bne.n	800fa4c <follow_path+0x20>
		path++;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b1f      	cmp	r3, #31
 800fa5a:	d80a      	bhi.n	800fa72 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7ff fc74 	bl	800f34c <dir_sdi>
 800fa64:	4603      	mov	r3, r0
 800fa66:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800fa70:	e045      	b.n	800fafe <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa72:	463b      	mov	r3, r7
 800fa74:	4619      	mov	r1, r3
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff ff18 	bl	800f8ac <create_name>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d136      	bne.n	800faf4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7ff fe88 	bl	800f79c <dir_find>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fa96:	7adb      	ldrb	r3, [r3, #11]
 800fa98:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800fa9a:	7bfb      	ldrb	r3, [r7, #15]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00a      	beq.n	800fab6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	2b04      	cmp	r3, #4
 800faa4:	d128      	bne.n	800faf8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800faa6:	7bbb      	ldrb	r3, [r7, #14]
 800faa8:	f003 0304 	and.w	r3, r3, #4
 800faac:	2b00      	cmp	r3, #0
 800faae:	d123      	bne.n	800faf8 <follow_path+0xcc>
 800fab0:	2305      	movs	r3, #5
 800fab2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800fab4:	e020      	b.n	800faf8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fab6:	7bbb      	ldrb	r3, [r7, #14]
 800fab8:	f003 0304 	and.w	r3, r3, #4
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d11d      	bne.n	800fafc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fac6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	330b      	adds	r3, #11
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	f003 0310 	and.w	r3, r3, #16
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d102      	bne.n	800fadc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800fad6:	2305      	movs	r3, #5
 800fad8:	73fb      	strb	r3, [r7, #15]
 800fada:	e010      	b.n	800fafe <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fae2:	68b9      	ldr	r1, [r7, #8]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff fe06 	bl	800f6f6 <ld_clust>
 800faea:	4602      	mov	r2, r0
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800faf2:	e7be      	b.n	800fa72 <follow_path+0x46>
			if (res != FR_OK) break;
 800faf4:	bf00      	nop
 800faf6:	e002      	b.n	800fafe <follow_path+0xd2>
				break;
 800faf8:	bf00      	nop
 800fafa:	e000      	b.n	800fafe <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fafc:	bf00      	nop
		}
	}

	return res;
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fb10:	f04f 33ff 	mov.w	r3, #4294967295
 800fb14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d031      	beq.n	800fb82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	617b      	str	r3, [r7, #20]
 800fb24:	e002      	b.n	800fb2c <get_ldnumber+0x24>
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	617b      	str	r3, [r7, #20]
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b20      	cmp	r3, #32
 800fb32:	d903      	bls.n	800fb3c <get_ldnumber+0x34>
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	2b3a      	cmp	r3, #58	; 0x3a
 800fb3a:	d1f4      	bne.n	800fb26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b3a      	cmp	r3, #58	; 0x3a
 800fb42:	d11c      	bne.n	800fb7e <get_ldnumber+0x76>
			tp = *path;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	60fa      	str	r2, [r7, #12]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	3b30      	subs	r3, #48	; 0x30
 800fb54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	2b09      	cmp	r3, #9
 800fb5a:	d80e      	bhi.n	800fb7a <get_ldnumber+0x72>
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d10a      	bne.n	800fb7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d107      	bne.n	800fb7a <get_ldnumber+0x72>
					vol = (int)i;
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	3301      	adds	r3, #1
 800fb72:	617b      	str	r3, [r7, #20]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	697a      	ldr	r2, [r7, #20]
 800fb78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	e002      	b.n	800fb84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb7e:	2300      	movs	r3, #0
 800fb80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb82:	693b      	ldr	r3, [r7, #16]
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	371c      	adds	r7, #28
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bc80      	pop	{r7}
 800fb8c:	4770      	bx	lr
	...

0800fb90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f04f 32ff 	mov.w	r2, #4294967295
 800fba8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800fbac:	6839      	ldr	r1, [r7, #0]
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f7fe ffdd 	bl	800eb6e <move_window>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <check_fs+0x2e>
		return 3;
 800fbba:	2303      	movs	r3, #3
 800fbbc:	e04a      	b.n	800fc54 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	021b      	lsls	r3, r3, #8
 800fbca:	b21a      	sxth	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800fbd2:	b21b      	sxth	r3, r3
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	b21b      	sxth	r3, r3
 800fbd8:	4a20      	ldr	r2, [pc, #128]	; (800fc5c <check_fs+0xcc>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d001      	beq.n	800fbe2 <check_fs+0x52>
		return 2;
 800fbde:	2302      	movs	r3, #2
 800fbe0:	e038      	b.n	800fc54 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	3336      	adds	r3, #54	; 0x36
 800fbe6:	3303      	adds	r3, #3
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	061a      	lsls	r2, r3, #24
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3336      	adds	r3, #54	; 0x36
 800fbf0:	3302      	adds	r3, #2
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	041b      	lsls	r3, r3, #16
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	3236      	adds	r2, #54	; 0x36
 800fbfc:	3201      	adds	r2, #1
 800fbfe:	7812      	ldrb	r2, [r2, #0]
 800fc00:	0212      	lsls	r2, r2, #8
 800fc02:	4313      	orrs	r3, r2
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc10:	4a13      	ldr	r2, [pc, #76]	; (800fc60 <check_fs+0xd0>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d101      	bne.n	800fc1a <check_fs+0x8a>
		return 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	e01c      	b.n	800fc54 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	3352      	adds	r3, #82	; 0x52
 800fc1e:	3303      	adds	r3, #3
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	061a      	lsls	r2, r3, #24
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	3352      	adds	r3, #82	; 0x52
 800fc28:	3302      	adds	r3, #2
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	041b      	lsls	r3, r3, #16
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	3252      	adds	r2, #82	; 0x52
 800fc34:	3201      	adds	r2, #1
 800fc36:	7812      	ldrb	r2, [r2, #0]
 800fc38:	0212      	lsls	r2, r2, #8
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800fc42:	4313      	orrs	r3, r2
 800fc44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc48:	4a05      	ldr	r2, [pc, #20]	; (800fc60 <check_fs+0xd0>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d101      	bne.n	800fc52 <check_fs+0xc2>
		return 0;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	e000      	b.n	800fc54 <check_fs+0xc4>

	return 1;
 800fc52:	2301      	movs	r3, #1
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	ffffaa55 	.word	0xffffaa55
 800fc60:	00544146 	.word	0x00544146

0800fc64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b096      	sub	sp, #88	; 0x58
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fc78:	68b8      	ldr	r0, [r7, #8]
 800fc7a:	f7ff ff45 	bl	800fb08 <get_ldnumber>
 800fc7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	da01      	bge.n	800fc8a <find_volume+0x26>
 800fc86:	230b      	movs	r3, #11
 800fc88:	e2a8      	b.n	80101dc <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fc8a:	4a9d      	ldr	r2, [pc, #628]	; (800ff00 <find_volume+0x29c>)
 800fc8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d101      	bne.n	800fc9e <find_volume+0x3a>
 800fc9a:	230c      	movs	r3, #12
 800fc9c:	e29e      	b.n	80101dc <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800fca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d01b      	beq.n	800fce6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fe fc47 	bl	800e548 <disk_status>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fcc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10c      	bne.n	800fce6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800fccc:	79fb      	ldrb	r3, [r7, #7]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d007      	beq.n	800fce2 <find_volume+0x7e>
 800fcd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcd6:	f003 0304 	and.w	r3, r3, #4
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800fcde:	230a      	movs	r3, #10
 800fce0:	e27c      	b.n	80101dc <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800fce2:	2300      	movs	r3, #0
 800fce4:	e27a      	b.n	80101dc <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fe fc3c 	bl	800e57c <disk_initialize>
 800fd04:	4603      	mov	r3, r0
 800fd06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800fd0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd0e:	f003 0301 	and.w	r3, r3, #1
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fd16:	2303      	movs	r3, #3
 800fd18:	e260      	b.n	80101dc <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d007      	beq.n	800fd30 <find_volume+0xcc>
 800fd20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd24:	f003 0304 	and.w	r3, r3, #4
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d001      	beq.n	800fd30 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800fd2c:	230a      	movs	r3, #10
 800fd2e:	e255      	b.n	80101dc <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800fd30:	2300      	movs	r3, #0
 800fd32:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800fd34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd38:	f7ff ff2a 	bl	800fb90 <check_fs>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800fd42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d153      	bne.n	800fdf2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	643b      	str	r3, [r7, #64]	; 0x40
 800fd4e:	e028      	b.n	800fda2 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800fd50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd54:	011b      	lsls	r3, r3, #4
 800fd56:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fd5a:	4413      	add	r3, r2
 800fd5c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd60:	3304      	adds	r3, #4
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d012      	beq.n	800fd8e <find_volume+0x12a>
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	330b      	adds	r3, #11
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	061a      	lsls	r2, r3, #24
 800fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd72:	330a      	adds	r3, #10
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	041b      	lsls	r3, r3, #16
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd7c:	3209      	adds	r2, #9
 800fd7e:	7812      	ldrb	r2, [r2, #0]
 800fd80:	0212      	lsls	r2, r2, #8
 800fd82:	4313      	orrs	r3, r2
 800fd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd86:	3208      	adds	r2, #8
 800fd88:	7812      	ldrb	r2, [r2, #0]
 800fd8a:	431a      	orrs	r2, r3
 800fd8c:	e000      	b.n	800fd90 <find_volume+0x12c>
 800fd8e:	2200      	movs	r2, #0
 800fd90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	3358      	adds	r3, #88	; 0x58
 800fd96:	443b      	add	r3, r7
 800fd98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800fd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd9e:	3301      	adds	r3, #1
 800fda0:	643b      	str	r3, [r7, #64]	; 0x40
 800fda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d9d3      	bls.n	800fd50 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800fda8:	2300      	movs	r3, #0
 800fdaa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <find_volume+0x154>
 800fdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800fdb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	3358      	adds	r3, #88	; 0x58
 800fdbe:	443b      	add	r3, r7
 800fdc0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fdc4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800fdc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d005      	beq.n	800fdd8 <find_volume+0x174>
 800fdcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fdce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdd0:	f7ff fede 	bl	800fb90 <check_fs>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	e000      	b.n	800fdda <find_volume+0x176>
 800fdd8:	2302      	movs	r3, #2
 800fdda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800fdde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d005      	beq.n	800fdf2 <find_volume+0x18e>
 800fde6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fde8:	3301      	adds	r3, #1
 800fdea:	643b      	str	r3, [r7, #64]	; 0x40
 800fdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	d9e2      	bls.n	800fdb8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fdf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdf6:	2b03      	cmp	r3, #3
 800fdf8:	d101      	bne.n	800fdfe <find_volume+0x19a>
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e1ee      	b.n	80101dc <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800fdfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d001      	beq.n	800fe0a <find_volume+0x1a6>
 800fe06:	230d      	movs	r3, #13
 800fe08:	e1e8      	b.n	80101dc <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fe0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0c:	7b1b      	ldrb	r3, [r3, #12]
 800fe0e:	021b      	lsls	r3, r3, #8
 800fe10:	b21a      	sxth	r2, r3
 800fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe14:	7adb      	ldrb	r3, [r3, #11]
 800fe16:	b21b      	sxth	r3, r3
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	b21b      	sxth	r3, r3
 800fe1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe20:	d001      	beq.n	800fe26 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800fe22:	230d      	movs	r3, #13
 800fe24:	e1da      	b.n	80101dc <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	7ddb      	ldrb	r3, [r3, #23]
 800fe2a:	021b      	lsls	r3, r3, #8
 800fe2c:	b21a      	sxth	r2, r3
 800fe2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe30:	7d9b      	ldrb	r3, [r3, #22]
 800fe32:	b21b      	sxth	r3, r3
 800fe34:	4313      	orrs	r3, r2
 800fe36:	b21b      	sxth	r3, r3
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800fe3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d112      	bne.n	800fe68 <find_volume+0x204>
 800fe42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe44:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800fe48:	061a      	lsls	r2, r3, #24
 800fe4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe50:	041b      	lsls	r3, r3, #16
 800fe52:	4313      	orrs	r3, r2
 800fe54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe56:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800fe5a:	0212      	lsls	r2, r2, #8
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe60:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800fe64:	4313      	orrs	r3, r2
 800fe66:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800fe70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe72:	7c1a      	ldrb	r2, [r3, #16]
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d006      	beq.n	800fe92 <find_volume+0x22e>
 800fe84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe86:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d001      	beq.n	800fe92 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800fe8e:	230d      	movs	r3, #13
 800fe90:	e1a4      	b.n	80101dc <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800fe92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe94:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe9c:	fb02 f303 	mul.w	r3, r2, r3
 800fea0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800fea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea4:	7b5a      	ldrb	r2, [r3, #13]
 800fea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00a      	beq.n	800fecc <find_volume+0x268>
 800feb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800febc:	461a      	mov	r2, r3
 800febe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800fec4:	3b01      	subs	r3, #1
 800fec6:	4013      	ands	r3, r2
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800fecc:	230d      	movs	r3, #13
 800fece:	e185      	b.n	80101dc <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800fed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed2:	7c9b      	ldrb	r3, [r3, #18]
 800fed4:	021b      	lsls	r3, r3, #8
 800fed6:	b21a      	sxth	r2, r3
 800fed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feda:	7c5b      	ldrb	r3, [r3, #17]
 800fedc:	b21b      	sxth	r3, r3
 800fede:	4313      	orrs	r3, r2
 800fee0:	b21b      	sxth	r3, r3
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800feea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feec:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800fef0:	f003 030f 	and.w	r3, r3, #15
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d004      	beq.n	800ff04 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800fefa:	230d      	movs	r3, #13
 800fefc:	e16e      	b.n	80101dc <find_volume+0x578>
 800fefe:	bf00      	nop
 800ff00:	20000e6c 	.word	0x20000e6c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	7d1b      	ldrb	r3, [r3, #20]
 800ff08:	021b      	lsls	r3, r3, #8
 800ff0a:	b21a      	sxth	r2, r3
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0e:	7cdb      	ldrb	r3, [r3, #19]
 800ff10:	b21b      	sxth	r3, r3
 800ff12:	4313      	orrs	r3, r2
 800ff14:	b21b      	sxth	r3, r3
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ff1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d112      	bne.n	800ff46 <find_volume+0x2e2>
 800ff20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff22:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ff26:	061a      	lsls	r2, r3, #24
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800ff2e:	041b      	lsls	r3, r3, #16
 800ff30:	4313      	orrs	r3, r2
 800ff32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff34:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ff38:	0212      	lsls	r2, r2, #8
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ff42:	4313      	orrs	r3, r2
 800ff44:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	7bdb      	ldrb	r3, [r3, #15]
 800ff4a:	021b      	lsls	r3, r3, #8
 800ff4c:	b21a      	sxth	r2, r3
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	7b9b      	ldrb	r3, [r3, #14]
 800ff52:	b21b      	sxth	r3, r3
 800ff54:	4313      	orrs	r3, r2
 800ff56:	b21b      	sxth	r3, r3
 800ff58:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800ff5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d101      	bne.n	800ff64 <find_volume+0x300>
 800ff60:	230d      	movs	r3, #13
 800ff62:	e13b      	b.n	80101dc <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800ff64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff68:	4413      	add	r3, r2
 800ff6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff6c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800ff70:	0912      	lsrs	r2, r2, #4
 800ff72:	b292      	uxth	r2, r2
 800ff74:	4413      	add	r3, r2
 800ff76:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d201      	bcs.n	800ff84 <find_volume+0x320>
 800ff80:	230d      	movs	r3, #13
 800ff82:	e12b      	b.n	80101dc <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800ff84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff8c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ff90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff94:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <find_volume+0x33c>
 800ff9c:	230d      	movs	r3, #13
 800ff9e:	e11d      	b.n	80101dc <find_volume+0x578>
	fmt = FS_FAT12;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d902      	bls.n	800ffb6 <find_volume+0x352>
 800ffb0:	2302      	movs	r3, #2
 800ffb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d902      	bls.n	800ffc6 <find_volume+0x362>
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	1c9a      	adds	r2, r3, #2
 800ffca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ffd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffdc:	441a      	add	r2, r3
 800ffde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800ffe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe8:	441a      	add	r2, r3
 800ffea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffec:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800fff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fff4:	2b03      	cmp	r3, #3
 800fff6:	d121      	bne.n	801003c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d001      	beq.n	8010006 <find_volume+0x3a2>
 8010002:	230d      	movs	r3, #13
 8010004:	e0ea      	b.n	80101dc <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8010006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010008:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801000c:	061a      	lsls	r2, r3, #24
 801000e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010010:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010014:	041b      	lsls	r3, r3, #16
 8010016:	4313      	orrs	r3, r2
 8010018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801001a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801001e:	0212      	lsls	r2, r2, #8
 8010020:	4313      	orrs	r3, r2
 8010022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010024:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8010028:	431a      	orrs	r2, r3
 801002a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010032:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	647b      	str	r3, [r7, #68]	; 0x44
 801003a:	e025      	b.n	8010088 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 801003c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010042:	2b00      	cmp	r3, #0
 8010044:	d101      	bne.n	801004a <find_volume+0x3e6>
 8010046:	230d      	movs	r3, #13
 8010048:	e0c8      	b.n	80101dc <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 801004a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010052:	441a      	add	r2, r3
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801005a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801005e:	2b02      	cmp	r3, #2
 8010060:	d104      	bne.n	801006c <find_volume+0x408>
 8010062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010064:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	e00c      	b.n	8010086 <find_volume+0x422>
 801006c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010072:	4613      	mov	r3, r2
 8010074:	005b      	lsls	r3, r3, #1
 8010076:	4413      	add	r3, r2
 8010078:	085a      	lsrs	r2, r3, #1
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010080:	f003 0301 	and.w	r3, r3, #1
 8010084:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010086:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801008e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010090:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010094:	0a5b      	lsrs	r3, r3, #9
 8010096:	429a      	cmp	r2, r3
 8010098:	d201      	bcs.n	801009e <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 801009a:	230d      	movs	r3, #13
 801009c:	e09e      	b.n	80101dc <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	f04f 32ff 	mov.w	r2, #4294967295
 80100a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80100ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	2280      	movs	r2, #128	; 0x80
 80100b8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80100bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100c0:	2b03      	cmp	r3, #3
 80100c2:	d177      	bne.n	80101b4 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80100c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100ca:	021b      	lsls	r3, r3, #8
 80100cc:	b21a      	sxth	r2, r3
 80100ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100d4:	b21b      	sxth	r3, r3
 80100d6:	4313      	orrs	r3, r2
 80100d8:	b21b      	sxth	r3, r3
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d16a      	bne.n	80101b4 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80100de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e0:	3301      	adds	r3, #1
 80100e2:	4619      	mov	r1, r3
 80100e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100e6:	f7fe fd42 	bl	800eb6e <move_window>
 80100ea:	4603      	mov	r3, r0
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d161      	bne.n	80101b4 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80100f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f2:	2200      	movs	r2, #0
 80100f4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80100f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fa:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80100fe:	021b      	lsls	r3, r3, #8
 8010100:	b21a      	sxth	r2, r3
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010108:	b21b      	sxth	r3, r3
 801010a:	4313      	orrs	r3, r2
 801010c:	b21b      	sxth	r3, r3
 801010e:	4a35      	ldr	r2, [pc, #212]	; (80101e4 <find_volume+0x580>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d14f      	bne.n	80101b4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8010114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010116:	78db      	ldrb	r3, [r3, #3]
 8010118:	061a      	lsls	r2, r3, #24
 801011a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011c:	789b      	ldrb	r3, [r3, #2]
 801011e:	041b      	lsls	r3, r3, #16
 8010120:	4313      	orrs	r3, r2
 8010122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010124:	7852      	ldrb	r2, [r2, #1]
 8010126:	0212      	lsls	r2, r2, #8
 8010128:	4313      	orrs	r3, r2
 801012a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801012c:	7812      	ldrb	r2, [r2, #0]
 801012e:	4313      	orrs	r3, r2
 8010130:	4a2d      	ldr	r2, [pc, #180]	; (80101e8 <find_volume+0x584>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d13e      	bne.n	80101b4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 801013c:	061a      	lsls	r2, r3, #24
 801013e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010140:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8010144:	041b      	lsls	r3, r3, #16
 8010146:	4313      	orrs	r3, r2
 8010148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801014a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 801014e:	0212      	lsls	r2, r2, #8
 8010150:	4313      	orrs	r3, r2
 8010152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010154:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8010158:	4313      	orrs	r3, r2
 801015a:	4a24      	ldr	r2, [pc, #144]	; (80101ec <find_volume+0x588>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d129      	bne.n	80101b4 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8010166:	061a      	lsls	r2, r3, #24
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801016e:	041b      	lsls	r3, r3, #16
 8010170:	4313      	orrs	r3, r2
 8010172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010174:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8010178:	0212      	lsls	r2, r2, #8
 801017a:	4313      	orrs	r3, r2
 801017c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801017e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8010182:	431a      	orrs	r2, r3
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 801018a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8010190:	061a      	lsls	r2, r3, #24
 8010192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010194:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8010198:	041b      	lsls	r3, r3, #16
 801019a:	4313      	orrs	r3, r2
 801019c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801019e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80101a2:	0212      	lsls	r2, r2, #8
 80101a4:	4313      	orrs	r3, r2
 80101a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101a8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80101ac:	431a      	orrs	r2, r3
 80101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80101ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80101be:	4b0c      	ldr	r3, [pc, #48]	; (80101f0 <find_volume+0x58c>)
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	3301      	adds	r3, #1
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <find_volume+0x58c>)
 80101c8:	801a      	strh	r2, [r3, #0]
 80101ca:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <find_volume+0x58c>)
 80101cc:	881a      	ldrh	r2, [r3, #0]
 80101ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80101d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101d6:	f7fe fc57 	bl	800ea88 <clear_lock>
#endif

	return FR_OK;
 80101da:	2300      	movs	r3, #0
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3758      	adds	r7, #88	; 0x58
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	ffffaa55 	.word	0xffffaa55
 80101e8:	41615252 	.word	0x41615252
 80101ec:	61417272 	.word	0x61417272
 80101f0:	20000e70 	.word	0x20000e70

080101f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d022      	beq.n	801024c <validate+0x58>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801020c:	2b00      	cmp	r3, #0
 801020e:	d01d      	beq.n	801024c <validate+0x58>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010216:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801021a:	2b00      	cmp	r3, #0
 801021c:	d016      	beq.n	801024c <validate+0x58>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010224:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 801022e:	429a      	cmp	r2, r3
 8010230:	d10c      	bne.n	801024c <validate+0x58>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010238:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe f983 	bl	800e548 <disk_status>
 8010242:	4603      	mov	r3, r0
 8010244:	f003 0301 	and.w	r3, r3, #1
 8010248:	2b00      	cmp	r3, #0
 801024a:	d001      	beq.n	8010250 <validate+0x5c>
		return FR_INVALID_OBJECT;
 801024c:	2309      	movs	r3, #9
 801024e:	e000      	b.n	8010252 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
	...

0801025c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b088      	sub	sp, #32
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	4613      	mov	r3, r2
 8010268:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801026e:	f107 0310 	add.w	r3, r7, #16
 8010272:	4618      	mov	r0, r3
 8010274:	f7ff fc48 	bl	800fb08 <get_ldnumber>
 8010278:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	2b00      	cmp	r3, #0
 801027e:	da01      	bge.n	8010284 <f_mount+0x28>
 8010280:	230b      	movs	r3, #11
 8010282:	e02d      	b.n	80102e0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010284:	4a18      	ldr	r2, [pc, #96]	; (80102e8 <f_mount+0x8c>)
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801028c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d006      	beq.n	80102a2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8010294:	69b8      	ldr	r0, [r7, #24]
 8010296:	f7fe fbf7 	bl	800ea88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	2200      	movs	r2, #0
 801029e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d003      	beq.n	80102b0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	490d      	ldr	r1, [pc, #52]	; (80102e8 <f_mount+0x8c>)
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <f_mount+0x6a>
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d001      	beq.n	80102ca <f_mount+0x6e>
 80102c6:	2300      	movs	r3, #0
 80102c8:	e00a      	b.n	80102e0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80102ca:	f107 0108 	add.w	r1, r7, #8
 80102ce:	f107 030c 	add.w	r3, r7, #12
 80102d2:	2200      	movs	r2, #0
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff fcc5 	bl	800fc64 <find_volume>
 80102da:	4603      	mov	r3, r0
 80102dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80102de:	7dfb      	ldrb	r3, [r7, #23]
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3720      	adds	r7, #32
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	20000e6c 	.word	0x20000e6c

080102ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80102f8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80102fc:	6018      	str	r0, [r3, #0]
 80102fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010302:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010306:	6019      	str	r1, [r3, #0]
 8010308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801030c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010310:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8010312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010316:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d101      	bne.n	8010324 <f_open+0x38>
 8010320:	2309      	movs	r3, #9
 8010322:	e257      	b.n	80107d4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8010324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010328:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2200      	movs	r2, #0
 8010330:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8010334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010338:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801033c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8010340:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010344:	7812      	ldrb	r2, [r2, #0]
 8010346:	f002 021f 	and.w	r2, r2, #31
 801034a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801034c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010350:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f023 0301 	bic.w	r3, r3, #1
 801035a:	b2da      	uxtb	r2, r3
 801035c:	f107 0108 	add.w	r1, r7, #8
 8010360:	f107 0320 	add.w	r3, r7, #32
 8010364:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fc7b 	bl	800fc64 <find_volume>
 801036e:	4603      	mov	r3, r0
 8010370:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010374:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010378:	2b00      	cmp	r3, #0
 801037a:	f040 8229 	bne.w	80107d0 <f_open+0x4e4>
		INIT_BUF(dj);
 801037e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010382:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010386:	f107 0214 	add.w	r2, r7, #20
 801038a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 801038e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010392:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	f107 0320 	add.w	r3, r7, #32
 801039c:	4611      	mov	r1, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7ff fb44 	bl	800fa2c <follow_path>
 80103a4:	4603      	mov	r3, r0
 80103a6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80103aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80103ae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80103b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80103b6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80103ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d11d      	bne.n	80103fe <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80103c2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d103      	bne.n	80103d2 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80103ca:	2306      	movs	r3, #6
 80103cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80103d0:	e015      	b.n	80103fe <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80103d6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	f023 0301 	bic.w	r3, r3, #1
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	bf14      	ite	ne
 80103e4:	2301      	movne	r3, #1
 80103e6:	2300      	moveq	r3, #0
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	461a      	mov	r2, r3
 80103ec:	f107 0320 	add.w	r3, r7, #32
 80103f0:	4611      	mov	r1, r2
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fe f9be 	bl	800e774 <chk_lock>
 80103f8:	4603      	mov	r3, r0
 80103fa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80103fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010402:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	f003 031c 	and.w	r3, r3, #28
 801040c:	2b00      	cmp	r3, #0
 801040e:	f000 80e6 	beq.w	80105de <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8010412:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010416:	2b00      	cmp	r3, #0
 8010418:	d027      	beq.n	801046a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 801041a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801041e:	2b04      	cmp	r3, #4
 8010420:	d10e      	bne.n	8010440 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010422:	f7fe fa13 	bl	800e84c <enq_lock>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d006      	beq.n	801043a <f_open+0x14e>
 801042c:	f107 0320 	add.w	r3, r7, #32
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff fa02 	bl	800f83a <dir_register>
 8010436:	4603      	mov	r3, r0
 8010438:	e000      	b.n	801043c <f_open+0x150>
 801043a:	2312      	movs	r3, #18
 801043c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010444:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010448:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801044c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010450:	7812      	ldrb	r2, [r2, #0]
 8010452:	f042 0208 	orr.w	r2, r2, #8
 8010456:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8010458:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801045c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010460:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010464:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8010468:	e017      	b.n	801049a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801046a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801046e:	330b      	adds	r3, #11
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	f003 0311 	and.w	r3, r3, #17
 8010476:	2b00      	cmp	r3, #0
 8010478:	d003      	beq.n	8010482 <f_open+0x196>
					res = FR_DENIED;
 801047a:	2307      	movs	r3, #7
 801047c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8010480:	e00b      	b.n	801049a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8010482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010486:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 0304 	and.w	r3, r3, #4
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <f_open+0x1ae>
						res = FR_EXIST;
 8010494:	2308      	movs	r3, #8
 8010496:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801049a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f040 80c1 	bne.w	8010626 <f_open+0x33a>
 80104a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80104a8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	f003 0308 	and.w	r3, r3, #8
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f000 80b7 	beq.w	8010626 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 80104b8:	f7fc fd7c 	bl	800cfb4 <get_fattime>
 80104bc:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80104c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104c4:	330e      	adds	r3, #14
 80104c6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80104ca:	b2d2      	uxtb	r2, r2
 80104cc:	701a      	strb	r2, [r3, #0]
 80104ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	0a1b      	lsrs	r3, r3, #8
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104dc:	330f      	adds	r3, #15
 80104de:	b2d2      	uxtb	r2, r2
 80104e0:	701a      	strb	r2, [r3, #0]
 80104e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104e6:	0c1a      	lsrs	r2, r3, #16
 80104e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104ec:	3310      	adds	r3, #16
 80104ee:	b2d2      	uxtb	r2, r2
 80104f0:	701a      	strb	r2, [r3, #0]
 80104f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80104f6:	0e1a      	lsrs	r2, r3, #24
 80104f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80104fc:	3311      	adds	r3, #17
 80104fe:	b2d2      	uxtb	r2, r2
 8010500:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8010502:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010506:	330b      	adds	r3, #11
 8010508:	2200      	movs	r2, #0
 801050a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 801050c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010510:	331c      	adds	r3, #28
 8010512:	2200      	movs	r2, #0
 8010514:	701a      	strb	r2, [r3, #0]
 8010516:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801051a:	331d      	adds	r3, #29
 801051c:	2200      	movs	r2, #0
 801051e:	701a      	strb	r2, [r3, #0]
 8010520:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010524:	331e      	adds	r3, #30
 8010526:	2200      	movs	r2, #0
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801052e:	331f      	adds	r3, #31
 8010530:	2200      	movs	r2, #0
 8010532:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8010534:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010538:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801053c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010540:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8010544:	4618      	mov	r0, r3
 8010546:	f7ff f8d6 	bl	800f6f6 <ld_clust>
 801054a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 801054e:	2100      	movs	r1, #0
 8010550:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8010554:	f7ff f8fc 	bl	800f750 <st_clust>
				dj.fs->wflag = 1;
 8010558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801055c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010564:	2201      	movs	r2, #1
 8010566:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801056a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801056e:	2b00      	cmp	r3, #0
 8010570:	d059      	beq.n	8010626 <f_open+0x33a>
					dw = dj.fs->winsect;
 8010572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010576:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801057a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801057e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010582:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8010586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801058a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801058e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010592:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8010596:	4618      	mov	r0, r3
 8010598:	f7fe fdad 	bl	800f0f6 <remove_chain>
 801059c:	4603      	mov	r3, r0
 801059e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80105a2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d13d      	bne.n	8010626 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80105aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80105ae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80105b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105b6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80105ba:	3a01      	subs	r2, #1
 80105bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80105c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80105c4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80105c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fe facc 	bl	800eb6e <move_window>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80105dc:	e023      	b.n	8010626 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80105de:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d11f      	bne.n	8010626 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80105e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80105ea:	330b      	adds	r3, #11
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	f003 0310 	and.w	r3, r3, #16
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d003      	beq.n	80105fe <f_open+0x312>
					res = FR_NO_FILE;
 80105f6:	2304      	movs	r3, #4
 80105f8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80105fc:	e013      	b.n	8010626 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80105fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010602:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	f003 0302 	and.w	r3, r3, #2
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00a      	beq.n	8010626 <f_open+0x33a>
 8010610:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010614:	330b      	adds	r3, #11
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	f003 0301 	and.w	r3, r3, #1
 801061c:	2b00      	cmp	r3, #0
 801061e:	d002      	beq.n	8010626 <f_open+0x33a>
						res = FR_DENIED;
 8010620:	2307      	movs	r3, #7
 8010622:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8010626:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801062a:	2b00      	cmp	r3, #0
 801062c:	d153      	bne.n	80106d6 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801062e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010632:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f003 0308 	and.w	r3, r3, #8
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00b      	beq.n	8010658 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8010640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010644:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010648:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801064c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010650:	7812      	ldrb	r2, [r2, #0]
 8010652:	f042 0220 	orr.w	r2, r2, #32
 8010656:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8010658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801065c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010660:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010664:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8010668:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801066c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8010676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801067a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010684:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010688:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801068c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	f023 0301 	bic.w	r3, r3, #1
 8010696:	2b00      	cmp	r3, #0
 8010698:	bf14      	ite	ne
 801069a:	2301      	movne	r3, #1
 801069c:	2300      	moveq	r3, #0
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	461a      	mov	r2, r3
 80106a2:	f107 0320 	add.w	r3, r7, #32
 80106a6:	4611      	mov	r1, r2
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fe f8f3 	bl	800e894 <inc_lock>
 80106ae:	4602      	mov	r2, r0
 80106b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106b4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80106be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d102      	bne.n	80106d6 <f_open+0x3ea>
 80106d0:	2302      	movs	r3, #2
 80106d2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80106d6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d178      	bne.n	80107d0 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80106de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106e2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80106ec:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80106f0:	7812      	ldrb	r2, [r2, #0]
 80106f2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80106f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80106fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2200      	movs	r2, #0
 8010702:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8010706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801070a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801070e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010712:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe ffed 	bl	800f6f6 <ld_clust>
 801071c:	4602      	mov	r2, r0
 801071e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010722:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 801072c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010730:	331f      	adds	r3, #31
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	061a      	lsls	r2, r3, #24
 8010736:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801073a:	331e      	adds	r3, #30
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	041b      	lsls	r3, r3, #16
 8010740:	4313      	orrs	r3, r2
 8010742:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010746:	321d      	adds	r2, #29
 8010748:	7812      	ldrb	r2, [r2, #0]
 801074a:	0212      	lsls	r2, r2, #8
 801074c:	4313      	orrs	r3, r2
 801074e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8010752:	321c      	adds	r2, #28
 8010754:	7812      	ldrb	r2, [r2, #0]
 8010756:	431a      	orrs	r2, r3
 8010758:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801075c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8010766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801076a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2200      	movs	r2, #0
 8010772:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8010776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801077a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2200      	movs	r2, #0
 8010782:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8010786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801078a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2200      	movs	r2, #0
 8010792:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8010796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801079a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801079e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80107a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80107a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80107b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80107b4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107be:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80107c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80107c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80107d0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b08c      	sub	sp, #48	; 0x30
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	60f8      	str	r0, [r7, #12]
 80107e6:	60b9      	str	r1, [r7, #8]
 80107e8:	607a      	str	r2, [r7, #4]
 80107ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f7ff fcfc 	bl	80101f4 <validate>
 80107fc:	4603      	mov	r3, r0
 80107fe:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010800:	7ffb      	ldrb	r3, [r7, #31]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d001      	beq.n	801080a <f_read+0x2c>
 8010806:	7ffb      	ldrb	r3, [r7, #31]
 8010808:	e150      	b.n	8010aac <f_read+0x2ce>
	if (fp->err)								/* Check error */
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8010810:	2b00      	cmp	r3, #0
 8010812:	d003      	beq.n	801081c <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801081a:	e147      	b.n	8010aac <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	2b00      	cmp	r3, #0
 8010828:	d101      	bne.n	801082e <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 801082a:	2307      	movs	r3, #7
 801082c:	e13e      	b.n	8010aac <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801083e:	687a      	ldr	r2, [r7, #4]
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	429a      	cmp	r2, r3
 8010844:	f240 812d 	bls.w	8010aa2 <f_read+0x2c4>
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801084c:	e129      	b.n	8010aa2 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010858:	2b00      	cmp	r3, #0
 801085a:	f040 80f2 	bne.w	8010a42 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010864:	0a5b      	lsrs	r3, r3, #9
 8010866:	b2da      	uxtb	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801086e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010872:	3b01      	subs	r3, #1
 8010874:	b2db      	uxtb	r3, r3
 8010876:	4013      	ands	r3, r2
 8010878:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 801087a:	7dfb      	ldrb	r3, [r7, #23]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d139      	bne.n	80108f4 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010886:	2b00      	cmp	r3, #0
 8010888:	d104      	bne.n	8010894 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010892:	e018      	b.n	80108c6 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801089a:	2b00      	cmp	r3, #0
 801089c:	d008      	beq.n	80108b0 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80108a4:	4619      	mov	r1, r3
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f7fe fd1c 	bl	800f2e4 <clmt_clust>
 80108ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80108ae:	e00a      	b.n	80108c6 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80108bc:	4619      	mov	r1, r3
 80108be:	4610      	mov	r0, r2
 80108c0:	f7fe fa51 	bl	800ed66 <get_fat>
 80108c4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80108c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d805      	bhi.n	80108d8 <f_read+0xfa>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2202      	movs	r2, #2
 80108d0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80108d4:	2302      	movs	r3, #2
 80108d6:	e0e9      	b.n	8010aac <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80108d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108de:	d105      	bne.n	80108ec <f_read+0x10e>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2201      	movs	r2, #1
 80108e4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80108e8:	2301      	movs	r3, #1
 80108ea:	e0df      	b.n	8010aac <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010900:	4619      	mov	r1, r3
 8010902:	4610      	mov	r0, r2
 8010904:	f7fe fa0e 	bl	800ed24 <clust2sect>
 8010908:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d105      	bne.n	801091c <f_read+0x13e>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2202      	movs	r2, #2
 8010914:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010918:	2302      	movs	r3, #2
 801091a:	e0c7      	b.n	8010aac <f_read+0x2ce>
			sect += csect;
 801091c:	7dfb      	ldrb	r3, [r7, #23]
 801091e:	693a      	ldr	r2, [r7, #16]
 8010920:	4413      	add	r3, r2
 8010922:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	0a5b      	lsrs	r3, r3, #9
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	d046      	beq.n	80109be <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010930:	7dfa      	ldrb	r2, [r7, #23]
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	4413      	add	r3, r2
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801093c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010940:	4293      	cmp	r3, r2
 8010942:	d908      	bls.n	8010956 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801094a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801094e:	461a      	mov	r2, r3
 8010950:	7dfb      	ldrb	r3, [r7, #23]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801095c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	693a      	ldr	r2, [r7, #16]
 8010964:	6a39      	ldr	r1, [r7, #32]
 8010966:	f7fd fe2f 	bl	800e5c8 <disk_read>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d005      	beq.n	801097c <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2201      	movs	r2, #1
 8010974:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010978:	2301      	movs	r3, #1
 801097a:	e097      	b.n	8010aac <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010986:	2b00      	cmp	r3, #0
 8010988:	d015      	beq.n	80109b6 <f_read+0x1d8>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	1ad3      	subs	r3, r2, r3
 8010994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010996:	429a      	cmp	r2, r3
 8010998:	d90d      	bls.n	80109b6 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	025b      	lsls	r3, r3, #9
 80109a6:	6a3a      	ldr	r2, [r7, #32]
 80109a8:	4413      	add	r3, r2
 80109aa:	68f9      	ldr	r1, [r7, #12]
 80109ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fd fe67 	bl	800e684 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	025b      	lsls	r3, r3, #9
 80109ba:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80109bc:	e05b      	b.n	8010a76 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80109c4:	693a      	ldr	r2, [r7, #16]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d037      	beq.n	8010a3a <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80109d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01d      	beq.n	8010a14 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109de:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80109e2:	68f9      	ldr	r1, [r7, #12]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80109ea:	2301      	movs	r3, #1
 80109ec:	f7fd fe0c 	bl	800e608 <disk_write>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d005      	beq.n	8010a02 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2201      	movs	r2, #1
 80109fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80109fe:	2301      	movs	r3, #1
 8010a00:	e054      	b.n	8010aac <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a0c:	b2da      	uxtb	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010a1a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010a1e:	68f9      	ldr	r1, [r7, #12]
 8010a20:	2301      	movs	r3, #1
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	f7fd fdd0 	bl	800e5c8 <disk_read>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d005      	beq.n	8010a3a <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2201      	movs	r2, #1
 8010a32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010a36:	2301      	movs	r3, #1
 8010a38:	e038      	b.n	8010aac <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	693a      	ldr	r2, [r7, #16]
 8010a3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010a50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8010a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d901      	bls.n	8010a5e <f_read+0x280>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a68:	68fa      	ldr	r2, [r7, #12]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6a38      	ldr	r0, [r7, #32]
 8010a72:	f7fd fe07 	bl	800e684 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a76:	6a3a      	ldr	r2, [r7, #32]
 8010a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7a:	4413      	add	r3, r2
 8010a7c:	623b      	str	r3, [r7, #32]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	441a      	add	r2, r3
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a94:	441a      	add	r2, r3
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f47f aed2 	bne.w	801084e <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3730      	adds	r7, #48	; 0x30
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08a      	sub	sp, #40	; 0x28
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
 8010ac0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f7ff fb91 	bl	80101f4 <validate>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010ad6:	7dfb      	ldrb	r3, [r7, #23]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d001      	beq.n	8010ae0 <f_write+0x2c>
 8010adc:	7dfb      	ldrb	r3, [r7, #23]
 8010ade:	e192      	b.n	8010e06 <f_write+0x352>
	if (fp->err)							/* Check error */
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d003      	beq.n	8010af2 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8010af0:	e189      	b.n	8010e06 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010af8:	f003 0302 	and.w	r3, r3, #2
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d101      	bne.n	8010b04 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8010b00:	2307      	movs	r3, #7
 8010b02:	e180      	b.n	8010e06 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	441a      	add	r2, r3
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b14:	429a      	cmp	r2, r3
 8010b16:	f080 8158 	bcs.w	8010dca <f_write+0x316>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8010b1e:	e154      	b.n	8010dca <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f040 8114 	bne.w	8010d58 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b36:	0a5b      	lsrs	r3, r3, #9
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b40:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010b44:	3b01      	subs	r3, #1
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	4013      	ands	r3, r2
 8010b4a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8010b4c:	7dbb      	ldrb	r3, [r7, #22]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d151      	bne.n	8010bf6 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10f      	bne.n	8010b7c <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b62:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8010b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d121      	bne.n	8010bae <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010b70:	2100      	movs	r1, #0
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7fe fb19 	bl	800f1aa <create_chain>
 8010b78:	6278      	str	r0, [r7, #36]	; 0x24
 8010b7a:	e018      	b.n	8010bae <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d008      	beq.n	8010b98 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f7fe fba8 	bl	800f2e4 <clmt_clust>
 8010b94:	6278      	str	r0, [r7, #36]	; 0x24
 8010b96:	e00a      	b.n	8010bae <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	4610      	mov	r0, r2
 8010ba8:	f7fe faff 	bl	800f1aa <create_chain>
 8010bac:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 810f 	beq.w	8010dd4 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d105      	bne.n	8010bc8 <f_write+0x114>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2202      	movs	r2, #2
 8010bc0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010bc4:	2302      	movs	r3, #2
 8010bc6:	e11e      	b.n	8010e06 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bce:	d105      	bne.n	8010bdc <f_write+0x128>
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e114      	b.n	8010e06 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010be0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d103      	bne.n	8010bf6 <f_write+0x142>
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bf2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d01d      	beq.n	8010c40 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c0a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010c0e:	68f9      	ldr	r1, [r7, #12]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010c16:	2301      	movs	r3, #1
 8010c18:	f7fd fcf6 	bl	800e608 <disk_write>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d005      	beq.n	8010c2e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2201      	movs	r2, #1
 8010c26:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e0eb      	b.n	8010e06 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	4610      	mov	r0, r2
 8010c50:	f7fe f868 	bl	800ed24 <clust2sect>
 8010c54:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d105      	bne.n	8010c68 <f_write+0x1b4>
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2202      	movs	r2, #2
 8010c60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010c64:	2302      	movs	r3, #2
 8010c66:	e0ce      	b.n	8010e06 <f_write+0x352>
			sect += csect;
 8010c68:	7dbb      	ldrb	r3, [r7, #22]
 8010c6a:	693a      	ldr	r2, [r7, #16]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	0a5b      	lsrs	r3, r3, #9
 8010c74:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d048      	beq.n	8010d0e <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010c7c:	7dba      	ldrb	r2, [r7, #22]
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	4413      	add	r3, r2
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010c88:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d908      	bls.n	8010ca2 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c96:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	7dbb      	ldrb	r3, [r7, #22]
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010ca8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	693a      	ldr	r2, [r7, #16]
 8010cb0:	69b9      	ldr	r1, [r7, #24]
 8010cb2:	f7fd fca9 	bl	800e608 <disk_write>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d005      	beq.n	8010cc8 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e09e      	b.n	8010e06 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	69fa      	ldr	r2, [r7, #28]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d916      	bls.n	8010d06 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	025b      	lsls	r3, r3, #9
 8010ce6:	69ba      	ldr	r2, [r7, #24]
 8010ce8:	4413      	add	r3, r2
 8010cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cee:	4619      	mov	r1, r3
 8010cf0:	f7fd fcc8 	bl	800e684 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cfe:	b2da      	uxtb	r2, r3
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	025b      	lsls	r3, r3, #9
 8010d0a:	623b      	str	r3, [r7, #32]
				continue;
 8010d0c:	e047      	b.n	8010d9e <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d01a      	beq.n	8010d50 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d212      	bcs.n	8010d50 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d30:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010d34:	68f9      	ldr	r1, [r7, #12]
 8010d36:	2301      	movs	r3, #1
 8010d38:	693a      	ldr	r2, [r7, #16]
 8010d3a:	f7fd fc45 	bl	800e5c8 <disk_read>
 8010d3e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d005      	beq.n	8010d50 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2201      	movs	r2, #1
 8010d48:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e05a      	b.n	8010e06 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	693a      	ldr	r2, [r7, #16]
 8010d54:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d62:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d66:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8010d68:	6a3a      	ldr	r2, [r7, #32]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d901      	bls.n	8010d74 <f_write+0x2c0>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	4413      	add	r3, r2
 8010d82:	6a3a      	ldr	r2, [r7, #32]
 8010d84:	69b9      	ldr	r1, [r7, #24]
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fd fc7c 	bl	800e684 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8010d9e:	69ba      	ldr	r2, [r7, #24]
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	4413      	add	r3, r2
 8010da4:	61bb      	str	r3, [r7, #24]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	441a      	add	r2, r3
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	6a3b      	ldr	r3, [r7, #32]
 8010dbc:	441a      	add	r2, r3
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	601a      	str	r2, [r3, #0]
 8010dc2:	687a      	ldr	r2, [r7, #4]
 8010dc4:	6a3b      	ldr	r3, [r7, #32]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f47f aea7 	bne.w	8010b20 <f_write+0x6c>
 8010dd2:	e000      	b.n	8010dd6 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010dd4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d905      	bls.n	8010df2 <f_write+0x33e>
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010df8:	f043 0320 	orr.w	r3, r3, #32
 8010dfc:	b2da      	uxtb	r2, r3
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3728      	adds	r7, #40	; 0x28
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b086      	sub	sp, #24
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f7ff f9ec 	bl	80101f4 <validate>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e20:	7dfb      	ldrb	r3, [r7, #23]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f040 80a8 	bne.w	8010f78 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010e2e:	f003 0320 	and.w	r3, r3, #32
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f000 80a0 	beq.w	8010f78 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d019      	beq.n	8010e7a <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e4c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010e50:	6879      	ldr	r1, [r7, #4]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010e58:	2301      	movs	r3, #1
 8010e5a:	f7fd fbd5 	bl	800e608 <disk_write>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d001      	beq.n	8010e68 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8010e64:	2301      	movs	r3, #1
 8010e66:	e088      	b.n	8010f7a <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e72:	b2da      	uxtb	r2, r3
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010e86:	4619      	mov	r1, r3
 8010e88:	4610      	mov	r0, r2
 8010e8a:	f7fd fe70 	bl	800eb6e <move_window>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d16f      	bne.n	8010f78 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010e9e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	330b      	adds	r3, #11
 8010ea4:	781a      	ldrb	r2, [r3, #0]
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	330b      	adds	r3, #11
 8010eaa:	f042 0220 	orr.w	r2, r2, #32
 8010eae:	b2d2      	uxtb	r2, r2
 8010eb0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	331c      	adds	r3, #28
 8010ebc:	b2d2      	uxtb	r2, r2
 8010ebe:	701a      	strb	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	0a1b      	lsrs	r3, r3, #8
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	331d      	adds	r3, #29
 8010ed0:	b2d2      	uxtb	r2, r2
 8010ed2:	701a      	strb	r2, [r3, #0]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010eda:	0c1a      	lsrs	r2, r3, #16
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	331e      	adds	r3, #30
 8010ee0:	b2d2      	uxtb	r2, r2
 8010ee2:	701a      	strb	r2, [r3, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010eea:	0e1a      	lsrs	r2, r3, #24
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	331f      	adds	r3, #31
 8010ef0:	b2d2      	uxtb	r2, r2
 8010ef2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010efa:	4619      	mov	r1, r3
 8010efc:	6938      	ldr	r0, [r7, #16]
 8010efe:	f7fe fc27 	bl	800f750 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8010f02:	f7fc f857 	bl	800cfb4 <get_fattime>
 8010f06:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	3316      	adds	r3, #22
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	b2d2      	uxtb	r2, r2
 8010f10:	701a      	strb	r2, [r3, #0]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	0a1b      	lsrs	r3, r3, #8
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	3317      	adds	r3, #23
 8010f1e:	b2d2      	uxtb	r2, r2
 8010f20:	701a      	strb	r2, [r3, #0]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	0c1a      	lsrs	r2, r3, #16
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	3318      	adds	r3, #24
 8010f2a:	b2d2      	uxtb	r2, r2
 8010f2c:	701a      	strb	r2, [r3, #0]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	0e1a      	lsrs	r2, r3, #24
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	3319      	adds	r3, #25
 8010f36:	b2d2      	uxtb	r2, r2
 8010f38:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	3312      	adds	r3, #18
 8010f3e:	2200      	movs	r2, #0
 8010f40:	701a      	strb	r2, [r3, #0]
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	3313      	adds	r3, #19
 8010f46:	2200      	movs	r2, #0
 8010f48:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010f50:	f023 0320 	bic.w	r3, r3, #32
 8010f54:	b2da      	uxtb	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f62:	2201      	movs	r2, #1
 8010f64:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fd fe2b 	bl	800ebca <sync_fs>
 8010f74:	4603      	mov	r3, r0
 8010f76:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3718      	adds	r7, #24
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}

08010f82 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b084      	sub	sp, #16
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff ff3f 	bl	8010e0e <f_sync>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010f94:	7bfb      	ldrb	r3, [r7, #15]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d116      	bne.n	8010fc8 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7ff f92a 	bl	80101f4 <validate>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10e      	bne.n	8010fc8 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fd fd25 	bl	800ea00 <dec_lock>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010fba:	7bfb      	ldrb	r3, [r7, #15]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d103      	bne.n	8010fc8 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8010fea:	4b1e      	ldr	r3, [pc, #120]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 8010fec:	7a5b      	ldrb	r3, [r3, #9]
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d831      	bhi.n	8011058 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010ff4:	4b1b      	ldr	r3, [pc, #108]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 8010ff6:	7a5b      	ldrb	r3, [r3, #9]
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	4b19      	ldr	r3, [pc, #100]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 8010ffe:	2100      	movs	r1, #0
 8011000:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8011002:	4b18      	ldr	r3, [pc, #96]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 8011004:	7a5b      	ldrb	r3, [r3, #9]
 8011006:	b2db      	uxtb	r3, r3
 8011008:	4a16      	ldr	r2, [pc, #88]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 801100a:	009b      	lsls	r3, r3, #2
 801100c:	4413      	add	r3, r2
 801100e:	68fa      	ldr	r2, [r7, #12]
 8011010:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8011012:	4b14      	ldr	r3, [pc, #80]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 8011014:	7a5b      	ldrb	r3, [r3, #9]
 8011016:	b2db      	uxtb	r3, r3
 8011018:	461a      	mov	r2, r3
 801101a:	4b12      	ldr	r3, [pc, #72]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 801101c:	4413      	add	r3, r2
 801101e:	79fa      	ldrb	r2, [r7, #7]
 8011020:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011022:	4b10      	ldr	r3, [pc, #64]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 8011024:	7a5b      	ldrb	r3, [r3, #9]
 8011026:	b2db      	uxtb	r3, r3
 8011028:	1c5a      	adds	r2, r3, #1
 801102a:	b2d1      	uxtb	r1, r2
 801102c:	4a0d      	ldr	r2, [pc, #52]	; (8011064 <FATFS_LinkDriverEx+0x90>)
 801102e:	7251      	strb	r1, [r2, #9]
 8011030:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011032:	7dbb      	ldrb	r3, [r7, #22]
 8011034:	3330      	adds	r3, #48	; 0x30
 8011036:	b2da      	uxtb	r2, r3
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	3301      	adds	r3, #1
 8011040:	223a      	movs	r2, #58	; 0x3a
 8011042:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	3302      	adds	r3, #2
 8011048:	222f      	movs	r2, #47	; 0x2f
 801104a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	3303      	adds	r3, #3
 8011050:	2200      	movs	r2, #0
 8011052:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011054:	2300      	movs	r3, #0
 8011056:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8011058:	7dfb      	ldrb	r3, [r7, #23]
}
 801105a:	4618      	mov	r0, r3
 801105c:	371c      	adds	r7, #28
 801105e:	46bd      	mov	sp, r7
 8011060:	bc80      	pop	{r7}
 8011062:	4770      	bx	lr
 8011064:	20000e8c 	.word	0x20000e8c

08011068 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011072:	2200      	movs	r2, #0
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f7ff ffac 	bl	8010fd4 <FATFS_LinkDriverEx>
 801107c:	4603      	mov	r3, r0
}
 801107e:	4618      	mov	r0, r3
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
	...

08011088 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	4603      	mov	r3, r0
 8011090:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011092:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <SD_initialize+0x38>)
 8011094:	2201      	movs	r2, #1
 8011096:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8011098:	f7fb ff94 	bl	800cfc4 <BSP_SD_Init>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d107      	bne.n	80110b2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80110a2:	4b07      	ldr	r3, [pc, #28]	; (80110c0 <SD_initialize+0x38>)
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	f023 0301 	bic.w	r3, r3, #1
 80110ac:	b2da      	uxtb	r2, r3
 80110ae:	4b04      	ldr	r3, [pc, #16]	; (80110c0 <SD_initialize+0x38>)
 80110b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80110b2:	4b03      	ldr	r3, [pc, #12]	; (80110c0 <SD_initialize+0x38>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	b2db      	uxtb	r3, r3
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20000117 	.word	0x20000117

080110c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	4603      	mov	r3, r0
 80110cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80110ce:	4b0b      	ldr	r3, [pc, #44]	; (80110fc <SD_status+0x38>)
 80110d0:	2201      	movs	r2, #1
 80110d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80110d4:	f7fb ffd8 	bl	800d088 <BSP_SD_GetCardState>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d107      	bne.n	80110ee <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80110de:	4b07      	ldr	r3, [pc, #28]	; (80110fc <SD_status+0x38>)
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	f023 0301 	bic.w	r3, r3, #1
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	4b04      	ldr	r3, [pc, #16]	; (80110fc <SD_status+0x38>)
 80110ec:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80110ee:	4b03      	ldr	r3, [pc, #12]	; (80110fc <SD_status+0x38>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	b2db      	uxtb	r3, r3
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20000117 	.word	0x20000117

08011100 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	60b9      	str	r1, [r7, #8]
 8011108:	607a      	str	r2, [r7, #4]
 801110a:	603b      	str	r3, [r7, #0]
 801110c:	4603      	mov	r3, r0
 801110e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011110:	2301      	movs	r3, #1
 8011112:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011114:	4b0f      	ldr	r3, [pc, #60]	; (8011154 <SD_read+0x54>)
 8011116:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8011118:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <SD_read+0x58>)
 801111a:	683a      	ldr	r2, [r7, #0]
 801111c:	6879      	ldr	r1, [r7, #4]
 801111e:	68b8      	ldr	r0, [r7, #8]
 8011120:	f7fb ff76 	bl	800d010 <BSP_SD_ReadBlocks>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10e      	bne.n	8011148 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801112a:	e006      	b.n	801113a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	1e5a      	subs	r2, r3, #1
 8011130:	613a      	str	r2, [r7, #16]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d101      	bne.n	801113a <SD_read+0x3a>
      {
        return RES_ERROR;
 8011136:	2301      	movs	r3, #1
 8011138:	e007      	b.n	801114a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801113a:	f7fb ffa5 	bl	800d088 <BSP_SD_GetCardState>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1f3      	bne.n	801112c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8011144:	2300      	movs	r3, #0
 8011146:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011148:	7dfb      	ldrb	r3, [r7, #23]
}
 801114a:	4618      	mov	r0, r3
 801114c:	3718      	adds	r7, #24
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	000186a0 	.word	0x000186a0
 8011158:	05f5e100 	.word	0x05f5e100

0801115c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b086      	sub	sp, #24
 8011160:	af00      	add	r7, sp, #0
 8011162:	60b9      	str	r1, [r7, #8]
 8011164:	607a      	str	r2, [r7, #4]
 8011166:	603b      	str	r3, [r7, #0]
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801116c:	2301      	movs	r3, #1
 801116e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011170:	4b0f      	ldr	r3, [pc, #60]	; (80111b0 <SD_write+0x54>)
 8011172:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8011174:	4b0f      	ldr	r3, [pc, #60]	; (80111b4 <SD_write+0x58>)
 8011176:	683a      	ldr	r2, [r7, #0]
 8011178:	6879      	ldr	r1, [r7, #4]
 801117a:	68b8      	ldr	r0, [r7, #8]
 801117c:	f7fb ff66 	bl	800d04c <BSP_SD_WriteBlocks>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d10e      	bne.n	80111a4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011186:	e006      	b.n	8011196 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	1e5a      	subs	r2, r3, #1
 801118c:	613a      	str	r2, [r7, #16]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d101      	bne.n	8011196 <SD_write+0x3a>
      {
        return RES_ERROR;
 8011192:	2301      	movs	r3, #1
 8011194:	e007      	b.n	80111a6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011196:	f7fb ff77 	bl	800d088 <BSP_SD_GetCardState>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1f3      	bne.n	8011188 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80111a0:	2300      	movs	r3, #0
 80111a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80111a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3718      	adds	r7, #24
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	000186a0 	.word	0x000186a0
 80111b4:	05f5e100 	.word	0x05f5e100

080111b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b08c      	sub	sp, #48	; 0x30
 80111bc:	af00      	add	r7, sp, #0
 80111be:	4603      	mov	r3, r0
 80111c0:	603a      	str	r2, [r7, #0]
 80111c2:	71fb      	strb	r3, [r7, #7]
 80111c4:	460b      	mov	r3, r1
 80111c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80111ce:	4b24      	ldr	r3, [pc, #144]	; (8011260 <SD_ioctl+0xa8>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	f003 0301 	and.w	r3, r3, #1
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <SD_ioctl+0x28>
 80111dc:	2303      	movs	r3, #3
 80111de:	e03b      	b.n	8011258 <SD_ioctl+0xa0>
  
  switch (cmd)
 80111e0:	79bb      	ldrb	r3, [r7, #6]
 80111e2:	2b03      	cmp	r3, #3
 80111e4:	d833      	bhi.n	801124e <SD_ioctl+0x96>
 80111e6:	a201      	add	r2, pc, #4	; (adr r2, 80111ec <SD_ioctl+0x34>)
 80111e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ec:	080111fd 	.word	0x080111fd
 80111f0:	08011205 	.word	0x08011205
 80111f4:	0801121d 	.word	0x0801121d
 80111f8:	08011237 	.word	0x08011237
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80111fc:	2300      	movs	r3, #0
 80111fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011202:	e027      	b.n	8011254 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011204:	f107 030c 	add.w	r3, r7, #12
 8011208:	4618      	mov	r0, r3
 801120a:	f7fb ff4d 	bl	800d0a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801120e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011214:	2300      	movs	r3, #0
 8011216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801121a:	e01b      	b.n	8011254 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801121c:	f107 030c 	add.w	r3, r7, #12
 8011220:	4618      	mov	r0, r3
 8011222:	f7fb ff41 	bl	800d0a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011228:	b29a      	uxth	r2, r3
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801122e:	2300      	movs	r3, #0
 8011230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011234:	e00e      	b.n	8011254 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011236:	f107 030c 	add.w	r3, r7, #12
 801123a:	4618      	mov	r0, r3
 801123c:	f7fb ff34 	bl	800d0a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8011240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801124c:	e002      	b.n	8011254 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 801124e:	2304      	movs	r3, #4
 8011250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8011254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011258:	4618      	mov	r0, r3
 801125a:	3730      	adds	r7, #48	; 0x30
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	20000117 	.word	0x20000117

08011264 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011268:	2200      	movs	r2, #0
 801126a:	490e      	ldr	r1, [pc, #56]	; (80112a4 <MX_USB_DEVICE_Init+0x40>)
 801126c:	480e      	ldr	r0, [pc, #56]	; (80112a8 <MX_USB_DEVICE_Init+0x44>)
 801126e:	f7fc f8ef 	bl	800d450 <USBD_Init>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d001      	beq.n	801127c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011278:	f7f1 ffca 	bl	8003210 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 801127c:	490b      	ldr	r1, [pc, #44]	; (80112ac <MX_USB_DEVICE_Init+0x48>)
 801127e:	480a      	ldr	r0, [pc, #40]	; (80112a8 <MX_USB_DEVICE_Init+0x44>)
 8011280:	f7fc f911 	bl	800d4a6 <USBD_RegisterClass>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801128a:	f7f1 ffc1 	bl	8003210 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801128e:	4806      	ldr	r0, [pc, #24]	; (80112a8 <MX_USB_DEVICE_Init+0x44>)
 8011290:	f7fc f922 	bl	800d4d8 <USBD_Start>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d001      	beq.n	801129e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 801129a:	f7f1 ffb9 	bl	8003210 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801129e:	bf00      	nop
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	20000118 	.word	0x20000118
 80112a8:	20000e98 	.word	0x20000e98
 80112ac:	2000001c 	.word	0x2000001c

080112b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	6039      	str	r1, [r7, #0]
 80112ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2212      	movs	r2, #18
 80112c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80112c2:	4b03      	ldr	r3, [pc, #12]	; (80112d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bc80      	pop	{r7}
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	20000134 	.word	0x20000134

080112d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	4603      	mov	r3, r0
 80112dc:	6039      	str	r1, [r7, #0]
 80112de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2204      	movs	r2, #4
 80112e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80112e6:	4b03      	ldr	r3, [pc, #12]	; (80112f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	370c      	adds	r7, #12
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bc80      	pop	{r7}
 80112f0:	4770      	bx	lr
 80112f2:	bf00      	nop
 80112f4:	20000148 	.word	0x20000148

080112f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	4603      	mov	r3, r0
 8011300:	6039      	str	r1, [r7, #0]
 8011302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011304:	79fb      	ldrb	r3, [r7, #7]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d105      	bne.n	8011316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801130a:	683a      	ldr	r2, [r7, #0]
 801130c:	4907      	ldr	r1, [pc, #28]	; (801132c <USBD_FS_ProductStrDescriptor+0x34>)
 801130e:	4808      	ldr	r0, [pc, #32]	; (8011330 <USBD_FS_ProductStrDescriptor+0x38>)
 8011310:	f7fd f85a 	bl	800e3c8 <USBD_GetString>
 8011314:	e004      	b.n	8011320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	4904      	ldr	r1, [pc, #16]	; (801132c <USBD_FS_ProductStrDescriptor+0x34>)
 801131a:	4805      	ldr	r0, [pc, #20]	; (8011330 <USBD_FS_ProductStrDescriptor+0x38>)
 801131c:	f7fd f854 	bl	800e3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011320:	4b02      	ldr	r3, [pc, #8]	; (801132c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011322:	4618      	mov	r0, r3
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	2000115c 	.word	0x2000115c
 8011330:	08014bd0 	.word	0x08014bd0

08011334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	6039      	str	r1, [r7, #0]
 801133e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	4904      	ldr	r1, [pc, #16]	; (8011354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011344:	4804      	ldr	r0, [pc, #16]	; (8011358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011346:	f7fd f83f 	bl	800e3c8 <USBD_GetString>
  return USBD_StrDesc;
 801134a:	4b02      	ldr	r3, [pc, #8]	; (8011354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	2000115c 	.word	0x2000115c
 8011358:	08014be8 	.word	0x08014be8

0801135c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	4603      	mov	r3, r0
 8011364:	6039      	str	r1, [r7, #0]
 8011366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	221a      	movs	r2, #26
 801136c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801136e:	f000 f843 	bl	80113f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011372:	4b02      	ldr	r3, [pc, #8]	; (801137c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011374:	4618      	mov	r0, r3
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	2000014c 	.word	0x2000014c

08011380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	6039      	str	r1, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801138c:	79fb      	ldrb	r3, [r7, #7]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d105      	bne.n	801139e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	4907      	ldr	r1, [pc, #28]	; (80113b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011396:	4808      	ldr	r0, [pc, #32]	; (80113b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011398:	f7fd f816 	bl	800e3c8 <USBD_GetString>
 801139c:	e004      	b.n	80113a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801139e:	683a      	ldr	r2, [r7, #0]
 80113a0:	4904      	ldr	r1, [pc, #16]	; (80113b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80113a2:	4805      	ldr	r0, [pc, #20]	; (80113b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80113a4:	f7fd f810 	bl	800e3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113a8:	4b02      	ldr	r3, [pc, #8]	; (80113b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	2000115c 	.word	0x2000115c
 80113b8:	08014bfc 	.word	0x08014bfc

080113bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	4603      	mov	r3, r0
 80113c4:	6039      	str	r1, [r7, #0]
 80113c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113c8:	79fb      	ldrb	r3, [r7, #7]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d105      	bne.n	80113da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	4907      	ldr	r1, [pc, #28]	; (80113f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80113d2:	4808      	ldr	r0, [pc, #32]	; (80113f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80113d4:	f7fc fff8 	bl	800e3c8 <USBD_GetString>
 80113d8:	e004      	b.n	80113e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	4904      	ldr	r1, [pc, #16]	; (80113f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80113de:	4805      	ldr	r0, [pc, #20]	; (80113f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80113e0:	f7fc fff2 	bl	800e3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113e4:	4b02      	ldr	r3, [pc, #8]	; (80113f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3708      	adds	r7, #8
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	2000115c 	.word	0x2000115c
 80113f4:	08014c08 	.word	0x08014c08

080113f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80113fe:	4b0f      	ldr	r3, [pc, #60]	; (801143c <Get_SerialNum+0x44>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011404:	4b0e      	ldr	r3, [pc, #56]	; (8011440 <Get_SerialNum+0x48>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801140a:	4b0e      	ldr	r3, [pc, #56]	; (8011444 <Get_SerialNum+0x4c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011410:	68fa      	ldr	r2, [r7, #12]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	4413      	add	r3, r2
 8011416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d009      	beq.n	8011432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801141e:	2208      	movs	r2, #8
 8011420:	4909      	ldr	r1, [pc, #36]	; (8011448 <Get_SerialNum+0x50>)
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f000 f814 	bl	8011450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011428:	2204      	movs	r2, #4
 801142a:	4908      	ldr	r1, [pc, #32]	; (801144c <Get_SerialNum+0x54>)
 801142c:	68b8      	ldr	r0, [r7, #8]
 801142e:	f000 f80f 	bl	8011450 <IntToUnicode>
  }
}
 8011432:	bf00      	nop
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	1ffff7e8 	.word	0x1ffff7e8
 8011440:	1ffff7ec 	.word	0x1ffff7ec
 8011444:	1ffff7f0 	.word	0x1ffff7f0
 8011448:	2000014e 	.word	0x2000014e
 801144c:	2000015e 	.word	0x2000015e

08011450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011450:	b480      	push	{r7}
 8011452:	b087      	sub	sp, #28
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	4613      	mov	r3, r2
 801145c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801145e:	2300      	movs	r3, #0
 8011460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011462:	2300      	movs	r3, #0
 8011464:	75fb      	strb	r3, [r7, #23]
 8011466:	e027      	b.n	80114b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	0f1b      	lsrs	r3, r3, #28
 801146c:	2b09      	cmp	r3, #9
 801146e:	d80b      	bhi.n	8011488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	0f1b      	lsrs	r3, r3, #28
 8011474:	b2da      	uxtb	r2, r3
 8011476:	7dfb      	ldrb	r3, [r7, #23]
 8011478:	005b      	lsls	r3, r3, #1
 801147a:	4619      	mov	r1, r3
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	440b      	add	r3, r1
 8011480:	3230      	adds	r2, #48	; 0x30
 8011482:	b2d2      	uxtb	r2, r2
 8011484:	701a      	strb	r2, [r3, #0]
 8011486:	e00a      	b.n	801149e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	0f1b      	lsrs	r3, r3, #28
 801148c:	b2da      	uxtb	r2, r3
 801148e:	7dfb      	ldrb	r3, [r7, #23]
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4619      	mov	r1, r3
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	440b      	add	r3, r1
 8011498:	3237      	adds	r2, #55	; 0x37
 801149a:	b2d2      	uxtb	r2, r2
 801149c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	011b      	lsls	r3, r3, #4
 80114a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80114a4:	7dfb      	ldrb	r3, [r7, #23]
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	3301      	adds	r3, #1
 80114aa:	68ba      	ldr	r2, [r7, #8]
 80114ac:	4413      	add	r3, r2
 80114ae:	2200      	movs	r2, #0
 80114b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80114b2:	7dfb      	ldrb	r3, [r7, #23]
 80114b4:	3301      	adds	r3, #1
 80114b6:	75fb      	strb	r3, [r7, #23]
 80114b8:	7dfa      	ldrb	r2, [r7, #23]
 80114ba:	79fb      	ldrb	r3, [r7, #7]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d3d3      	bcc.n	8011468 <IntToUnicode+0x18>
  }
}
 80114c0:	bf00      	nop
 80114c2:	bf00      	nop
 80114c4:	371c      	adds	r7, #28
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bc80      	pop	{r7}
 80114ca:	4770      	bx	lr

080114cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4a0d      	ldr	r2, [pc, #52]	; (8011510 <HAL_PCD_MspInit+0x44>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d113      	bne.n	8011506 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80114de:	4b0d      	ldr	r3, [pc, #52]	; (8011514 <HAL_PCD_MspInit+0x48>)
 80114e0:	69db      	ldr	r3, [r3, #28]
 80114e2:	4a0c      	ldr	r2, [pc, #48]	; (8011514 <HAL_PCD_MspInit+0x48>)
 80114e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80114e8:	61d3      	str	r3, [r2, #28]
 80114ea:	4b0a      	ldr	r3, [pc, #40]	; (8011514 <HAL_PCD_MspInit+0x48>)
 80114ec:	69db      	ldr	r3, [r3, #28]
 80114ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80114f6:	2200      	movs	r2, #0
 80114f8:	2100      	movs	r1, #0
 80114fa:	2014      	movs	r0, #20
 80114fc:	f7f2 ff8d 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8011500:	2014      	movs	r0, #20
 8011502:	f7f2 ffa6 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011506:	bf00      	nop
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	40005c00 	.word	0x40005c00
 8011514:	40021000 	.word	0x40021000

08011518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801152c:	4619      	mov	r1, r3
 801152e:	4610      	mov	r0, r2
 8011530:	f7fc f81a 	bl	800d568 <USBD_LL_SetupStage>
}
 8011534:	bf00      	nop
 8011536:	3708      	adds	r7, #8
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	460b      	mov	r3, r1
 8011546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801154e:	78fa      	ldrb	r2, [r7, #3]
 8011550:	6879      	ldr	r1, [r7, #4]
 8011552:	4613      	mov	r3, r2
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	4413      	add	r3, r2
 8011558:	00db      	lsls	r3, r3, #3
 801155a:	440b      	add	r3, r1
 801155c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	78fb      	ldrb	r3, [r7, #3]
 8011564:	4619      	mov	r1, r3
 8011566:	f7fc f84c 	bl	800d602 <USBD_LL_DataOutStage>
}
 801156a:	bf00      	nop
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b082      	sub	sp, #8
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	460b      	mov	r3, r1
 801157c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8011584:	78fa      	ldrb	r2, [r7, #3]
 8011586:	6879      	ldr	r1, [r7, #4]
 8011588:	4613      	mov	r3, r2
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	00db      	lsls	r3, r3, #3
 8011590:	440b      	add	r3, r1
 8011592:	333c      	adds	r3, #60	; 0x3c
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	78fb      	ldrb	r3, [r7, #3]
 8011598:	4619      	mov	r1, r3
 801159a:	f7fc f8a3 	bl	800d6e4 <USBD_LL_DataInStage>
}
 801159e:	bf00      	nop
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b082      	sub	sp, #8
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fc f9b3 	bl	800d920 <USBD_LL_SOF>
}
 80115ba:	bf00      	nop
 80115bc:	3708      	adds	r7, #8
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b084      	sub	sp, #16
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80115ca:	2301      	movs	r3, #1
 80115cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	2b02      	cmp	r3, #2
 80115d4:	d001      	beq.n	80115da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80115d6:	f7f1 fe1b 	bl	8003210 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80115e0:	7bfa      	ldrb	r2, [r7, #15]
 80115e2:	4611      	mov	r1, r2
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fc f963 	bl	800d8b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7fc f91c 	bl	800d82e <USBD_LL_Reset>
}
 80115f6:	bf00      	nop
 80115f8:	3710      	adds	r7, #16
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
	...

08011600 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801160e:	4618      	mov	r0, r3
 8011610:	f7fc f95d 	bl	800d8ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d005      	beq.n	8011628 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <HAL_PCD_SuspendCallback+0x30>)
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	4a03      	ldr	r2, [pc, #12]	; (8011630 <HAL_PCD_SuspendCallback+0x30>)
 8011622:	f043 0306 	orr.w	r3, r3, #6
 8011626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	e000ed00 	.word	0xe000ed00

08011634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8011642:	4618      	mov	r0, r3
 8011644:	f7fc f957 	bl	800d8f6 <USBD_LL_Resume>
}
 8011648:	bf00      	nop
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011658:	4a1f      	ldr	r2, [pc, #124]	; (80116d8 <USBD_LL_Init+0x88>)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4a1d      	ldr	r2, [pc, #116]	; (80116d8 <USBD_LL_Init+0x88>)
 8011664:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8011668:	4b1b      	ldr	r3, [pc, #108]	; (80116d8 <USBD_LL_Init+0x88>)
 801166a:	4a1c      	ldr	r2, [pc, #112]	; (80116dc <USBD_LL_Init+0x8c>)
 801166c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801166e:	4b1a      	ldr	r3, [pc, #104]	; (80116d8 <USBD_LL_Init+0x88>)
 8011670:	2208      	movs	r2, #8
 8011672:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011674:	4b18      	ldr	r3, [pc, #96]	; (80116d8 <USBD_LL_Init+0x88>)
 8011676:	2202      	movs	r2, #2
 8011678:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801167a:	4b17      	ldr	r3, [pc, #92]	; (80116d8 <USBD_LL_Init+0x88>)
 801167c:	2200      	movs	r2, #0
 801167e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011680:	4b15      	ldr	r3, [pc, #84]	; (80116d8 <USBD_LL_Init+0x88>)
 8011682:	2200      	movs	r2, #0
 8011684:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011686:	4b14      	ldr	r3, [pc, #80]	; (80116d8 <USBD_LL_Init+0x88>)
 8011688:	2200      	movs	r2, #0
 801168a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801168c:	4812      	ldr	r0, [pc, #72]	; (80116d8 <USBD_LL_Init+0x88>)
 801168e:	f7f3 fff7 	bl	8005680 <HAL_PCD_Init>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8011698:	f7f1 fdba 	bl	8003210 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80116a2:	2318      	movs	r3, #24
 80116a4:	2200      	movs	r2, #0
 80116a6:	2100      	movs	r1, #0
 80116a8:	f7f5 fcff 	bl	80070aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80116b2:	2358      	movs	r3, #88	; 0x58
 80116b4:	2200      	movs	r2, #0
 80116b6:	2180      	movs	r1, #128	; 0x80
 80116b8:	f7f5 fcf7 	bl	80070aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80116c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116c6:	2200      	movs	r2, #0
 80116c8:	2181      	movs	r1, #129	; 0x81
 80116ca:	f7f5 fcee 	bl	80070aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80116ce:	2300      	movs	r3, #0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	2000135c 	.word	0x2000135c
 80116dc:	40005c00 	.word	0x40005c00

080116e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116e8:	2300      	movs	r3, #0
 80116ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116ec:	2300      	movs	r3, #0
 80116ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7f4 f8c1 	bl	800587e <HAL_PCD_Start>
 80116fc:	4603      	mov	r3, r0
 80116fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011700:	7bfb      	ldrb	r3, [r7, #15]
 8011702:	4618      	mov	r0, r3
 8011704:	f000 f93c 	bl	8011980 <USBD_Get_USB_Status>
 8011708:	4603      	mov	r3, r0
 801170a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801170c:	7bbb      	ldrb	r3, [r7, #14]
}
 801170e:	4618      	mov	r0, r3
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011716:	b580      	push	{r7, lr}
 8011718:	b084      	sub	sp, #16
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
 801171e:	4608      	mov	r0, r1
 8011720:	4611      	mov	r1, r2
 8011722:	461a      	mov	r2, r3
 8011724:	4603      	mov	r3, r0
 8011726:	70fb      	strb	r3, [r7, #3]
 8011728:	460b      	mov	r3, r1
 801172a:	70bb      	strb	r3, [r7, #2]
 801172c:	4613      	mov	r3, r2
 801172e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011730:	2300      	movs	r3, #0
 8011732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011734:	2300      	movs	r3, #0
 8011736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801173e:	78bb      	ldrb	r3, [r7, #2]
 8011740:	883a      	ldrh	r2, [r7, #0]
 8011742:	78f9      	ldrb	r1, [r7, #3]
 8011744:	f7f4 fa16 	bl	8005b74 <HAL_PCD_EP_Open>
 8011748:	4603      	mov	r3, r0
 801174a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801174c:	7bfb      	ldrb	r3, [r7, #15]
 801174e:	4618      	mov	r0, r3
 8011750:	f000 f916 	bl	8011980 <USBD_Get_USB_Status>
 8011754:	4603      	mov	r3, r0
 8011756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011758:	7bbb      	ldrb	r3, [r7, #14]
}
 801175a:	4618      	mov	r0, r3
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b084      	sub	sp, #16
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
 801176a:	460b      	mov	r3, r1
 801176c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801176e:	2300      	movs	r3, #0
 8011770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011772:	2300      	movs	r3, #0
 8011774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801177c:	78fa      	ldrb	r2, [r7, #3]
 801177e:	4611      	mov	r1, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f7f4 fa54 	bl	8005c2e <HAL_PCD_EP_Close>
 8011786:	4603      	mov	r3, r0
 8011788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801178a:	7bfb      	ldrb	r3, [r7, #15]
 801178c:	4618      	mov	r0, r3
 801178e:	f000 f8f7 	bl	8011980 <USBD_Get_USB_Status>
 8011792:	4603      	mov	r3, r0
 8011794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011796:	7bbb      	ldrb	r3, [r7, #14]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ac:	2300      	movs	r3, #0
 80117ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117b0:	2300      	movs	r3, #0
 80117b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117ba:	78fa      	ldrb	r2, [r7, #3]
 80117bc:	4611      	mov	r1, r2
 80117be:	4618      	mov	r0, r3
 80117c0:	f7f4 fae5 	bl	8005d8e <HAL_PCD_EP_SetStall>
 80117c4:	4603      	mov	r3, r0
 80117c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117c8:	7bfb      	ldrb	r3, [r7, #15]
 80117ca:	4618      	mov	r0, r3
 80117cc:	f000 f8d8 	bl	8011980 <USBD_Get_USB_Status>
 80117d0:	4603      	mov	r3, r0
 80117d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117de:	b580      	push	{r7, lr}
 80117e0:	b084      	sub	sp, #16
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
 80117e6:	460b      	mov	r3, r1
 80117e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117f8:	78fa      	ldrb	r2, [r7, #3]
 80117fa:	4611      	mov	r1, r2
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7f4 fb26 	bl	8005e4e <HAL_PCD_EP_ClrStall>
 8011802:	4603      	mov	r3, r0
 8011804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011806:	7bfb      	ldrb	r3, [r7, #15]
 8011808:	4618      	mov	r0, r3
 801180a:	f000 f8b9 	bl	8011980 <USBD_Get_USB_Status>
 801180e:	4603      	mov	r3, r0
 8011810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011812:	7bbb      	ldrb	r3, [r7, #14]
}
 8011814:	4618      	mov	r0, r3
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801181c:	b480      	push	{r7}
 801181e:	b085      	sub	sp, #20
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801182e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011834:	2b00      	cmp	r3, #0
 8011836:	da0c      	bge.n	8011852 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011838:	78fb      	ldrb	r3, [r7, #3]
 801183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801183e:	68f9      	ldr	r1, [r7, #12]
 8011840:	1c5a      	adds	r2, r3, #1
 8011842:	4613      	mov	r3, r2
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	4413      	add	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	440b      	add	r3, r1
 801184c:	3302      	adds	r3, #2
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	e00b      	b.n	801186a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011852:	78fb      	ldrb	r3, [r7, #3]
 8011854:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011858:	68f9      	ldr	r1, [r7, #12]
 801185a:	4613      	mov	r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011868:	781b      	ldrb	r3, [r3, #0]
  }
}
 801186a:	4618      	mov	r0, r3
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	bc80      	pop	{r7}
 8011872:	4770      	bx	lr

08011874 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	460b      	mov	r3, r1
 801187e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011880:	2300      	movs	r3, #0
 8011882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011884:	2300      	movs	r3, #0
 8011886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801188e:	78fa      	ldrb	r2, [r7, #3]
 8011890:	4611      	mov	r1, r2
 8011892:	4618      	mov	r0, r3
 8011894:	f7f4 f949 	bl	8005b2a <HAL_PCD_SetAddress>
 8011898:	4603      	mov	r3, r0
 801189a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 f86e 	bl	8011980 <USBD_Get_USB_Status>
 80118a4:	4603      	mov	r3, r0
 80118a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3710      	adds	r7, #16
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}

080118b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b086      	sub	sp, #24
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	60f8      	str	r0, [r7, #12]
 80118ba:	607a      	str	r2, [r7, #4]
 80118bc:	461a      	mov	r2, r3
 80118be:	460b      	mov	r3, r1
 80118c0:	72fb      	strb	r3, [r7, #11]
 80118c2:	4613      	mov	r3, r2
 80118c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118c6:	2300      	movs	r3, #0
 80118c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118ca:	2300      	movs	r3, #0
 80118cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80118d4:	893b      	ldrh	r3, [r7, #8]
 80118d6:	7af9      	ldrb	r1, [r7, #11]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	f7f4 fa21 	bl	8005d20 <HAL_PCD_EP_Transmit>
 80118de:	4603      	mov	r3, r0
 80118e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118e2:	7dfb      	ldrb	r3, [r7, #23]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f000 f84b 	bl	8011980 <USBD_Get_USB_Status>
 80118ea:	4603      	mov	r3, r0
 80118ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80118ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3718      	adds	r7, #24
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	607a      	str	r2, [r7, #4]
 8011902:	461a      	mov	r2, r3
 8011904:	460b      	mov	r3, r1
 8011906:	72fb      	strb	r3, [r7, #11]
 8011908:	4613      	mov	r3, r2
 801190a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011910:	2300      	movs	r3, #0
 8011912:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801191a:	893b      	ldrh	r3, [r7, #8]
 801191c:	7af9      	ldrb	r1, [r7, #11]
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	f7f4 f9cd 	bl	8005cbe <HAL_PCD_EP_Receive>
 8011924:	4603      	mov	r3, r0
 8011926:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011928:	7dfb      	ldrb	r3, [r7, #23]
 801192a:	4618      	mov	r0, r3
 801192c:	f000 f828 	bl	8011980 <USBD_Get_USB_Status>
 8011930:	4603      	mov	r3, r0
 8011932:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011934:	7dbb      	ldrb	r3, [r7, #22]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3718      	adds	r7, #24
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
	...

08011940 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011948:	4b02      	ldr	r3, [pc, #8]	; (8011954 <USBD_static_malloc+0x14>)
}
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	bc80      	pop	{r7}
 8011952:	4770      	bx	lr
 8011954:	2000164c 	.word	0x2000164c

08011958 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011958:	b480      	push	{r7}
 801195a:	b083      	sub	sp, #12
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]

}
 8011960:	bf00      	nop
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	bc80      	pop	{r7}
 8011968:	4770      	bx	lr

0801196a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801196a:	b480      	push	{r7}
 801196c:	b083      	sub	sp, #12
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
 8011972:	460b      	mov	r3, r1
 8011974:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8011976:	bf00      	nop
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	bc80      	pop	{r7}
 801197e:	4770      	bx	lr

08011980 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011980:	b480      	push	{r7}
 8011982:	b085      	sub	sp, #20
 8011984:	af00      	add	r7, sp, #0
 8011986:	4603      	mov	r3, r0
 8011988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801198e:	79fb      	ldrb	r3, [r7, #7]
 8011990:	2b03      	cmp	r3, #3
 8011992:	d817      	bhi.n	80119c4 <USBD_Get_USB_Status+0x44>
 8011994:	a201      	add	r2, pc, #4	; (adr r2, 801199c <USBD_Get_USB_Status+0x1c>)
 8011996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801199a:	bf00      	nop
 801199c:	080119ad 	.word	0x080119ad
 80119a0:	080119b3 	.word	0x080119b3
 80119a4:	080119b9 	.word	0x080119b9
 80119a8:	080119bf 	.word	0x080119bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	73fb      	strb	r3, [r7, #15]
    break;
 80119b0:	e00b      	b.n	80119ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80119b2:	2302      	movs	r3, #2
 80119b4:	73fb      	strb	r3, [r7, #15]
    break;
 80119b6:	e008      	b.n	80119ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80119b8:	2301      	movs	r3, #1
 80119ba:	73fb      	strb	r3, [r7, #15]
    break;
 80119bc:	e005      	b.n	80119ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80119be:	2302      	movs	r3, #2
 80119c0:	73fb      	strb	r3, [r7, #15]
    break;
 80119c2:	e002      	b.n	80119ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80119c4:	2302      	movs	r3, #2
 80119c6:	73fb      	strb	r3, [r7, #15]
    break;
 80119c8:	bf00      	nop
  }
  return usb_status;
 80119ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3714      	adds	r7, #20
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bc80      	pop	{r7}
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop

080119d8 <__errno>:
 80119d8:	4b01      	ldr	r3, [pc, #4]	; (80119e0 <__errno+0x8>)
 80119da:	6818      	ldr	r0, [r3, #0]
 80119dc:	4770      	bx	lr
 80119de:	bf00      	nop
 80119e0:	20000168 	.word	0x20000168

080119e4 <__libc_init_array>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	2600      	movs	r6, #0
 80119e8:	4d0c      	ldr	r5, [pc, #48]	; (8011a1c <__libc_init_array+0x38>)
 80119ea:	4c0d      	ldr	r4, [pc, #52]	; (8011a20 <__libc_init_array+0x3c>)
 80119ec:	1b64      	subs	r4, r4, r5
 80119ee:	10a4      	asrs	r4, r4, #2
 80119f0:	42a6      	cmp	r6, r4
 80119f2:	d109      	bne.n	8011a08 <__libc_init_array+0x24>
 80119f4:	f003 f832 	bl	8014a5c <_init>
 80119f8:	2600      	movs	r6, #0
 80119fa:	4d0a      	ldr	r5, [pc, #40]	; (8011a24 <__libc_init_array+0x40>)
 80119fc:	4c0a      	ldr	r4, [pc, #40]	; (8011a28 <__libc_init_array+0x44>)
 80119fe:	1b64      	subs	r4, r4, r5
 8011a00:	10a4      	asrs	r4, r4, #2
 8011a02:	42a6      	cmp	r6, r4
 8011a04:	d105      	bne.n	8011a12 <__libc_init_array+0x2e>
 8011a06:	bd70      	pop	{r4, r5, r6, pc}
 8011a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a0c:	4798      	blx	r3
 8011a0e:	3601      	adds	r6, #1
 8011a10:	e7ee      	b.n	80119f0 <__libc_init_array+0xc>
 8011a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a16:	4798      	blx	r3
 8011a18:	3601      	adds	r6, #1
 8011a1a:	e7f2      	b.n	8011a02 <__libc_init_array+0x1e>
 8011a1c:	0802e2b4 	.word	0x0802e2b4
 8011a20:	0802e2b4 	.word	0x0802e2b4
 8011a24:	0802e2b4 	.word	0x0802e2b4
 8011a28:	0802e2b8 	.word	0x0802e2b8

08011a2c <malloc>:
 8011a2c:	4b02      	ldr	r3, [pc, #8]	; (8011a38 <malloc+0xc>)
 8011a2e:	4601      	mov	r1, r0
 8011a30:	6818      	ldr	r0, [r3, #0]
 8011a32:	f000 b87b 	b.w	8011b2c <_malloc_r>
 8011a36:	bf00      	nop
 8011a38:	20000168 	.word	0x20000168

08011a3c <free>:
 8011a3c:	4b02      	ldr	r3, [pc, #8]	; (8011a48 <free+0xc>)
 8011a3e:	4601      	mov	r1, r0
 8011a40:	6818      	ldr	r0, [r3, #0]
 8011a42:	f000 b80b 	b.w	8011a5c <_free_r>
 8011a46:	bf00      	nop
 8011a48:	20000168 	.word	0x20000168

08011a4c <memset>:
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	4402      	add	r2, r0
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d100      	bne.n	8011a56 <memset+0xa>
 8011a54:	4770      	bx	lr
 8011a56:	f803 1b01 	strb.w	r1, [r3], #1
 8011a5a:	e7f9      	b.n	8011a50 <memset+0x4>

08011a5c <_free_r>:
 8011a5c:	b538      	push	{r3, r4, r5, lr}
 8011a5e:	4605      	mov	r5, r0
 8011a60:	2900      	cmp	r1, #0
 8011a62:	d040      	beq.n	8011ae6 <_free_r+0x8a>
 8011a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a68:	1f0c      	subs	r4, r1, #4
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	bfb8      	it	lt
 8011a6e:	18e4      	addlt	r4, r4, r3
 8011a70:	f001 fc14 	bl	801329c <__malloc_lock>
 8011a74:	4a1c      	ldr	r2, [pc, #112]	; (8011ae8 <_free_r+0x8c>)
 8011a76:	6813      	ldr	r3, [r2, #0]
 8011a78:	b933      	cbnz	r3, 8011a88 <_free_r+0x2c>
 8011a7a:	6063      	str	r3, [r4, #4]
 8011a7c:	6014      	str	r4, [r2, #0]
 8011a7e:	4628      	mov	r0, r5
 8011a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a84:	f001 bc10 	b.w	80132a8 <__malloc_unlock>
 8011a88:	42a3      	cmp	r3, r4
 8011a8a:	d908      	bls.n	8011a9e <_free_r+0x42>
 8011a8c:	6820      	ldr	r0, [r4, #0]
 8011a8e:	1821      	adds	r1, r4, r0
 8011a90:	428b      	cmp	r3, r1
 8011a92:	bf01      	itttt	eq
 8011a94:	6819      	ldreq	r1, [r3, #0]
 8011a96:	685b      	ldreq	r3, [r3, #4]
 8011a98:	1809      	addeq	r1, r1, r0
 8011a9a:	6021      	streq	r1, [r4, #0]
 8011a9c:	e7ed      	b.n	8011a7a <_free_r+0x1e>
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	b10b      	cbz	r3, 8011aa8 <_free_r+0x4c>
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	d9fa      	bls.n	8011a9e <_free_r+0x42>
 8011aa8:	6811      	ldr	r1, [r2, #0]
 8011aaa:	1850      	adds	r0, r2, r1
 8011aac:	42a0      	cmp	r0, r4
 8011aae:	d10b      	bne.n	8011ac8 <_free_r+0x6c>
 8011ab0:	6820      	ldr	r0, [r4, #0]
 8011ab2:	4401      	add	r1, r0
 8011ab4:	1850      	adds	r0, r2, r1
 8011ab6:	4283      	cmp	r3, r0
 8011ab8:	6011      	str	r1, [r2, #0]
 8011aba:	d1e0      	bne.n	8011a7e <_free_r+0x22>
 8011abc:	6818      	ldr	r0, [r3, #0]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	4401      	add	r1, r0
 8011ac2:	6011      	str	r1, [r2, #0]
 8011ac4:	6053      	str	r3, [r2, #4]
 8011ac6:	e7da      	b.n	8011a7e <_free_r+0x22>
 8011ac8:	d902      	bls.n	8011ad0 <_free_r+0x74>
 8011aca:	230c      	movs	r3, #12
 8011acc:	602b      	str	r3, [r5, #0]
 8011ace:	e7d6      	b.n	8011a7e <_free_r+0x22>
 8011ad0:	6820      	ldr	r0, [r4, #0]
 8011ad2:	1821      	adds	r1, r4, r0
 8011ad4:	428b      	cmp	r3, r1
 8011ad6:	bf01      	itttt	eq
 8011ad8:	6819      	ldreq	r1, [r3, #0]
 8011ada:	685b      	ldreq	r3, [r3, #4]
 8011adc:	1809      	addeq	r1, r1, r0
 8011ade:	6021      	streq	r1, [r4, #0]
 8011ae0:	6063      	str	r3, [r4, #4]
 8011ae2:	6054      	str	r4, [r2, #4]
 8011ae4:	e7cb      	b.n	8011a7e <_free_r+0x22>
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	20001660 	.word	0x20001660

08011aec <sbrk_aligned>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	4e0e      	ldr	r6, [pc, #56]	; (8011b28 <sbrk_aligned+0x3c>)
 8011af0:	460c      	mov	r4, r1
 8011af2:	6831      	ldr	r1, [r6, #0]
 8011af4:	4605      	mov	r5, r0
 8011af6:	b911      	cbnz	r1, 8011afe <sbrk_aligned+0x12>
 8011af8:	f000 fcec 	bl	80124d4 <_sbrk_r>
 8011afc:	6030      	str	r0, [r6, #0]
 8011afe:	4621      	mov	r1, r4
 8011b00:	4628      	mov	r0, r5
 8011b02:	f000 fce7 	bl	80124d4 <_sbrk_r>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	d00a      	beq.n	8011b20 <sbrk_aligned+0x34>
 8011b0a:	1cc4      	adds	r4, r0, #3
 8011b0c:	f024 0403 	bic.w	r4, r4, #3
 8011b10:	42a0      	cmp	r0, r4
 8011b12:	d007      	beq.n	8011b24 <sbrk_aligned+0x38>
 8011b14:	1a21      	subs	r1, r4, r0
 8011b16:	4628      	mov	r0, r5
 8011b18:	f000 fcdc 	bl	80124d4 <_sbrk_r>
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	d101      	bne.n	8011b24 <sbrk_aligned+0x38>
 8011b20:	f04f 34ff 	mov.w	r4, #4294967295
 8011b24:	4620      	mov	r0, r4
 8011b26:	bd70      	pop	{r4, r5, r6, pc}
 8011b28:	20001664 	.word	0x20001664

08011b2c <_malloc_r>:
 8011b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b30:	1ccd      	adds	r5, r1, #3
 8011b32:	f025 0503 	bic.w	r5, r5, #3
 8011b36:	3508      	adds	r5, #8
 8011b38:	2d0c      	cmp	r5, #12
 8011b3a:	bf38      	it	cc
 8011b3c:	250c      	movcc	r5, #12
 8011b3e:	2d00      	cmp	r5, #0
 8011b40:	4607      	mov	r7, r0
 8011b42:	db01      	blt.n	8011b48 <_malloc_r+0x1c>
 8011b44:	42a9      	cmp	r1, r5
 8011b46:	d905      	bls.n	8011b54 <_malloc_r+0x28>
 8011b48:	230c      	movs	r3, #12
 8011b4a:	2600      	movs	r6, #0
 8011b4c:	603b      	str	r3, [r7, #0]
 8011b4e:	4630      	mov	r0, r6
 8011b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b54:	4e2e      	ldr	r6, [pc, #184]	; (8011c10 <_malloc_r+0xe4>)
 8011b56:	f001 fba1 	bl	801329c <__malloc_lock>
 8011b5a:	6833      	ldr	r3, [r6, #0]
 8011b5c:	461c      	mov	r4, r3
 8011b5e:	bb34      	cbnz	r4, 8011bae <_malloc_r+0x82>
 8011b60:	4629      	mov	r1, r5
 8011b62:	4638      	mov	r0, r7
 8011b64:	f7ff ffc2 	bl	8011aec <sbrk_aligned>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	d14d      	bne.n	8011c0a <_malloc_r+0xde>
 8011b6e:	6834      	ldr	r4, [r6, #0]
 8011b70:	4626      	mov	r6, r4
 8011b72:	2e00      	cmp	r6, #0
 8011b74:	d140      	bne.n	8011bf8 <_malloc_r+0xcc>
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	4631      	mov	r1, r6
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	eb04 0803 	add.w	r8, r4, r3
 8011b80:	f000 fca8 	bl	80124d4 <_sbrk_r>
 8011b84:	4580      	cmp	r8, r0
 8011b86:	d13a      	bne.n	8011bfe <_malloc_r+0xd2>
 8011b88:	6821      	ldr	r1, [r4, #0]
 8011b8a:	3503      	adds	r5, #3
 8011b8c:	1a6d      	subs	r5, r5, r1
 8011b8e:	f025 0503 	bic.w	r5, r5, #3
 8011b92:	3508      	adds	r5, #8
 8011b94:	2d0c      	cmp	r5, #12
 8011b96:	bf38      	it	cc
 8011b98:	250c      	movcc	r5, #12
 8011b9a:	4638      	mov	r0, r7
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	f7ff ffa5 	bl	8011aec <sbrk_aligned>
 8011ba2:	3001      	adds	r0, #1
 8011ba4:	d02b      	beq.n	8011bfe <_malloc_r+0xd2>
 8011ba6:	6823      	ldr	r3, [r4, #0]
 8011ba8:	442b      	add	r3, r5
 8011baa:	6023      	str	r3, [r4, #0]
 8011bac:	e00e      	b.n	8011bcc <_malloc_r+0xa0>
 8011bae:	6822      	ldr	r2, [r4, #0]
 8011bb0:	1b52      	subs	r2, r2, r5
 8011bb2:	d41e      	bmi.n	8011bf2 <_malloc_r+0xc6>
 8011bb4:	2a0b      	cmp	r2, #11
 8011bb6:	d916      	bls.n	8011be6 <_malloc_r+0xba>
 8011bb8:	1961      	adds	r1, r4, r5
 8011bba:	42a3      	cmp	r3, r4
 8011bbc:	6025      	str	r5, [r4, #0]
 8011bbe:	bf18      	it	ne
 8011bc0:	6059      	strne	r1, [r3, #4]
 8011bc2:	6863      	ldr	r3, [r4, #4]
 8011bc4:	bf08      	it	eq
 8011bc6:	6031      	streq	r1, [r6, #0]
 8011bc8:	5162      	str	r2, [r4, r5]
 8011bca:	604b      	str	r3, [r1, #4]
 8011bcc:	4638      	mov	r0, r7
 8011bce:	f104 060b 	add.w	r6, r4, #11
 8011bd2:	f001 fb69 	bl	80132a8 <__malloc_unlock>
 8011bd6:	f026 0607 	bic.w	r6, r6, #7
 8011bda:	1d23      	adds	r3, r4, #4
 8011bdc:	1af2      	subs	r2, r6, r3
 8011bde:	d0b6      	beq.n	8011b4e <_malloc_r+0x22>
 8011be0:	1b9b      	subs	r3, r3, r6
 8011be2:	50a3      	str	r3, [r4, r2]
 8011be4:	e7b3      	b.n	8011b4e <_malloc_r+0x22>
 8011be6:	6862      	ldr	r2, [r4, #4]
 8011be8:	42a3      	cmp	r3, r4
 8011bea:	bf0c      	ite	eq
 8011bec:	6032      	streq	r2, [r6, #0]
 8011bee:	605a      	strne	r2, [r3, #4]
 8011bf0:	e7ec      	b.n	8011bcc <_malloc_r+0xa0>
 8011bf2:	4623      	mov	r3, r4
 8011bf4:	6864      	ldr	r4, [r4, #4]
 8011bf6:	e7b2      	b.n	8011b5e <_malloc_r+0x32>
 8011bf8:	4634      	mov	r4, r6
 8011bfa:	6876      	ldr	r6, [r6, #4]
 8011bfc:	e7b9      	b.n	8011b72 <_malloc_r+0x46>
 8011bfe:	230c      	movs	r3, #12
 8011c00:	4638      	mov	r0, r7
 8011c02:	603b      	str	r3, [r7, #0]
 8011c04:	f001 fb50 	bl	80132a8 <__malloc_unlock>
 8011c08:	e7a1      	b.n	8011b4e <_malloc_r+0x22>
 8011c0a:	6025      	str	r5, [r4, #0]
 8011c0c:	e7de      	b.n	8011bcc <_malloc_r+0xa0>
 8011c0e:	bf00      	nop
 8011c10:	20001660 	.word	0x20001660

08011c14 <__cvt>:
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c1a:	461f      	mov	r7, r3
 8011c1c:	bfbb      	ittet	lt
 8011c1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011c22:	461f      	movlt	r7, r3
 8011c24:	2300      	movge	r3, #0
 8011c26:	232d      	movlt	r3, #45	; 0x2d
 8011c28:	b088      	sub	sp, #32
 8011c2a:	4614      	mov	r4, r2
 8011c2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011c30:	7013      	strb	r3, [r2, #0]
 8011c32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c34:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011c38:	f023 0820 	bic.w	r8, r3, #32
 8011c3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c40:	d005      	beq.n	8011c4e <__cvt+0x3a>
 8011c42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011c46:	d100      	bne.n	8011c4a <__cvt+0x36>
 8011c48:	3501      	adds	r5, #1
 8011c4a:	2302      	movs	r3, #2
 8011c4c:	e000      	b.n	8011c50 <__cvt+0x3c>
 8011c4e:	2303      	movs	r3, #3
 8011c50:	aa07      	add	r2, sp, #28
 8011c52:	9204      	str	r2, [sp, #16]
 8011c54:	aa06      	add	r2, sp, #24
 8011c56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011c5a:	e9cd 3500 	strd	r3, r5, [sp]
 8011c5e:	4622      	mov	r2, r4
 8011c60:	463b      	mov	r3, r7
 8011c62:	f000 fd0d 	bl	8012680 <_dtoa_r>
 8011c66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	d102      	bne.n	8011c74 <__cvt+0x60>
 8011c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c70:	07db      	lsls	r3, r3, #31
 8011c72:	d522      	bpl.n	8011cba <__cvt+0xa6>
 8011c74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c78:	eb06 0905 	add.w	r9, r6, r5
 8011c7c:	d110      	bne.n	8011ca0 <__cvt+0x8c>
 8011c7e:	7833      	ldrb	r3, [r6, #0]
 8011c80:	2b30      	cmp	r3, #48	; 0x30
 8011c82:	d10a      	bne.n	8011c9a <__cvt+0x86>
 8011c84:	2200      	movs	r2, #0
 8011c86:	2300      	movs	r3, #0
 8011c88:	4620      	mov	r0, r4
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	f7ee fef8 	bl	8000a80 <__aeabi_dcmpeq>
 8011c90:	b918      	cbnz	r0, 8011c9a <__cvt+0x86>
 8011c92:	f1c5 0501 	rsb	r5, r5, #1
 8011c96:	f8ca 5000 	str.w	r5, [sl]
 8011c9a:	f8da 3000 	ldr.w	r3, [sl]
 8011c9e:	4499      	add	r9, r3
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	f7ee feea 	bl	8000a80 <__aeabi_dcmpeq>
 8011cac:	b108      	cbz	r0, 8011cb2 <__cvt+0x9e>
 8011cae:	f8cd 901c 	str.w	r9, [sp, #28]
 8011cb2:	2230      	movs	r2, #48	; 0x30
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	454b      	cmp	r3, r9
 8011cb8:	d307      	bcc.n	8011cca <__cvt+0xb6>
 8011cba:	4630      	mov	r0, r6
 8011cbc:	9b07      	ldr	r3, [sp, #28]
 8011cbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011cc0:	1b9b      	subs	r3, r3, r6
 8011cc2:	6013      	str	r3, [r2, #0]
 8011cc4:	b008      	add	sp, #32
 8011cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cca:	1c59      	adds	r1, r3, #1
 8011ccc:	9107      	str	r1, [sp, #28]
 8011cce:	701a      	strb	r2, [r3, #0]
 8011cd0:	e7f0      	b.n	8011cb4 <__cvt+0xa0>

08011cd2 <__exponent>:
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cd6:	2900      	cmp	r1, #0
 8011cd8:	f803 2b02 	strb.w	r2, [r3], #2
 8011cdc:	bfb6      	itet	lt
 8011cde:	222d      	movlt	r2, #45	; 0x2d
 8011ce0:	222b      	movge	r2, #43	; 0x2b
 8011ce2:	4249      	neglt	r1, r1
 8011ce4:	2909      	cmp	r1, #9
 8011ce6:	7042      	strb	r2, [r0, #1]
 8011ce8:	dd2b      	ble.n	8011d42 <__exponent+0x70>
 8011cea:	f10d 0407 	add.w	r4, sp, #7
 8011cee:	46a4      	mov	ip, r4
 8011cf0:	270a      	movs	r7, #10
 8011cf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8011cf6:	460a      	mov	r2, r1
 8011cf8:	46a6      	mov	lr, r4
 8011cfa:	fb07 1516 	mls	r5, r7, r6, r1
 8011cfe:	2a63      	cmp	r2, #99	; 0x63
 8011d00:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8011d04:	4631      	mov	r1, r6
 8011d06:	f104 34ff 	add.w	r4, r4, #4294967295
 8011d0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011d0e:	dcf0      	bgt.n	8011cf2 <__exponent+0x20>
 8011d10:	3130      	adds	r1, #48	; 0x30
 8011d12:	f1ae 0502 	sub.w	r5, lr, #2
 8011d16:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011d1a:	4629      	mov	r1, r5
 8011d1c:	1c44      	adds	r4, r0, #1
 8011d1e:	4561      	cmp	r1, ip
 8011d20:	d30a      	bcc.n	8011d38 <__exponent+0x66>
 8011d22:	f10d 0209 	add.w	r2, sp, #9
 8011d26:	eba2 020e 	sub.w	r2, r2, lr
 8011d2a:	4565      	cmp	r5, ip
 8011d2c:	bf88      	it	hi
 8011d2e:	2200      	movhi	r2, #0
 8011d30:	4413      	add	r3, r2
 8011d32:	1a18      	subs	r0, r3, r0
 8011d34:	b003      	add	sp, #12
 8011d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d3c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011d40:	e7ed      	b.n	8011d1e <__exponent+0x4c>
 8011d42:	2330      	movs	r3, #48	; 0x30
 8011d44:	3130      	adds	r1, #48	; 0x30
 8011d46:	7083      	strb	r3, [r0, #2]
 8011d48:	70c1      	strb	r1, [r0, #3]
 8011d4a:	1d03      	adds	r3, r0, #4
 8011d4c:	e7f1      	b.n	8011d32 <__exponent+0x60>
	...

08011d50 <_printf_float>:
 8011d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d54:	b091      	sub	sp, #68	; 0x44
 8011d56:	460c      	mov	r4, r1
 8011d58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011d5c:	4616      	mov	r6, r2
 8011d5e:	461f      	mov	r7, r3
 8011d60:	4605      	mov	r5, r0
 8011d62:	f001 fa7b 	bl	801325c <_localeconv_r>
 8011d66:	6803      	ldr	r3, [r0, #0]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d6c:	f7ee fa5c 	bl	8000228 <strlen>
 8011d70:	2300      	movs	r3, #0
 8011d72:	930e      	str	r3, [sp, #56]	; 0x38
 8011d74:	f8d8 3000 	ldr.w	r3, [r8]
 8011d78:	900a      	str	r0, [sp, #40]	; 0x28
 8011d7a:	3307      	adds	r3, #7
 8011d7c:	f023 0307 	bic.w	r3, r3, #7
 8011d80:	f103 0208 	add.w	r2, r3, #8
 8011d84:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011d88:	f8d4 b000 	ldr.w	fp, [r4]
 8011d8c:	f8c8 2000 	str.w	r2, [r8]
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011d98:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011d9c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8011da2:	f04f 32ff 	mov.w	r2, #4294967295
 8011da6:	4640      	mov	r0, r8
 8011da8:	4b9c      	ldr	r3, [pc, #624]	; (801201c <_printf_float+0x2cc>)
 8011daa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011dac:	f7ee fe9a 	bl	8000ae4 <__aeabi_dcmpun>
 8011db0:	bb70      	cbnz	r0, 8011e10 <_printf_float+0xc0>
 8011db2:	f04f 32ff 	mov.w	r2, #4294967295
 8011db6:	4640      	mov	r0, r8
 8011db8:	4b98      	ldr	r3, [pc, #608]	; (801201c <_printf_float+0x2cc>)
 8011dba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011dbc:	f7ee fe74 	bl	8000aa8 <__aeabi_dcmple>
 8011dc0:	bb30      	cbnz	r0, 8011e10 <_printf_float+0xc0>
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	4640      	mov	r0, r8
 8011dc8:	4651      	mov	r1, sl
 8011dca:	f7ee fe63 	bl	8000a94 <__aeabi_dcmplt>
 8011dce:	b110      	cbz	r0, 8011dd6 <_printf_float+0x86>
 8011dd0:	232d      	movs	r3, #45	; 0x2d
 8011dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dd6:	4b92      	ldr	r3, [pc, #584]	; (8012020 <_printf_float+0x2d0>)
 8011dd8:	4892      	ldr	r0, [pc, #584]	; (8012024 <_printf_float+0x2d4>)
 8011dda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011dde:	bf94      	ite	ls
 8011de0:	4698      	movls	r8, r3
 8011de2:	4680      	movhi	r8, r0
 8011de4:	2303      	movs	r3, #3
 8011de6:	f04f 0a00 	mov.w	sl, #0
 8011dea:	6123      	str	r3, [r4, #16]
 8011dec:	f02b 0304 	bic.w	r3, fp, #4
 8011df0:	6023      	str	r3, [r4, #0]
 8011df2:	4633      	mov	r3, r6
 8011df4:	4621      	mov	r1, r4
 8011df6:	4628      	mov	r0, r5
 8011df8:	9700      	str	r7, [sp, #0]
 8011dfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8011dfc:	f000 f9d4 	bl	80121a8 <_printf_common>
 8011e00:	3001      	adds	r0, #1
 8011e02:	f040 8090 	bne.w	8011f26 <_printf_float+0x1d6>
 8011e06:	f04f 30ff 	mov.w	r0, #4294967295
 8011e0a:	b011      	add	sp, #68	; 0x44
 8011e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e10:	4642      	mov	r2, r8
 8011e12:	4653      	mov	r3, sl
 8011e14:	4640      	mov	r0, r8
 8011e16:	4651      	mov	r1, sl
 8011e18:	f7ee fe64 	bl	8000ae4 <__aeabi_dcmpun>
 8011e1c:	b148      	cbz	r0, 8011e32 <_printf_float+0xe2>
 8011e1e:	f1ba 0f00 	cmp.w	sl, #0
 8011e22:	bfb8      	it	lt
 8011e24:	232d      	movlt	r3, #45	; 0x2d
 8011e26:	4880      	ldr	r0, [pc, #512]	; (8012028 <_printf_float+0x2d8>)
 8011e28:	bfb8      	it	lt
 8011e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011e2e:	4b7f      	ldr	r3, [pc, #508]	; (801202c <_printf_float+0x2dc>)
 8011e30:	e7d3      	b.n	8011dda <_printf_float+0x8a>
 8011e32:	6863      	ldr	r3, [r4, #4]
 8011e34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011e38:	1c5a      	adds	r2, r3, #1
 8011e3a:	d142      	bne.n	8011ec2 <_printf_float+0x172>
 8011e3c:	2306      	movs	r3, #6
 8011e3e:	6063      	str	r3, [r4, #4]
 8011e40:	2200      	movs	r2, #0
 8011e42:	9206      	str	r2, [sp, #24]
 8011e44:	aa0e      	add	r2, sp, #56	; 0x38
 8011e46:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011e4a:	aa0d      	add	r2, sp, #52	; 0x34
 8011e4c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011e50:	9203      	str	r2, [sp, #12]
 8011e52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011e56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011e5a:	6023      	str	r3, [r4, #0]
 8011e5c:	6863      	ldr	r3, [r4, #4]
 8011e5e:	4642      	mov	r2, r8
 8011e60:	9300      	str	r3, [sp, #0]
 8011e62:	4628      	mov	r0, r5
 8011e64:	4653      	mov	r3, sl
 8011e66:	910b      	str	r1, [sp, #44]	; 0x2c
 8011e68:	f7ff fed4 	bl	8011c14 <__cvt>
 8011e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e6e:	4680      	mov	r8, r0
 8011e70:	2947      	cmp	r1, #71	; 0x47
 8011e72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011e74:	d108      	bne.n	8011e88 <_printf_float+0x138>
 8011e76:	1cc8      	adds	r0, r1, #3
 8011e78:	db02      	blt.n	8011e80 <_printf_float+0x130>
 8011e7a:	6863      	ldr	r3, [r4, #4]
 8011e7c:	4299      	cmp	r1, r3
 8011e7e:	dd40      	ble.n	8011f02 <_printf_float+0x1b2>
 8011e80:	f1a9 0902 	sub.w	r9, r9, #2
 8011e84:	fa5f f989 	uxtb.w	r9, r9
 8011e88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011e8c:	d81f      	bhi.n	8011ece <_printf_float+0x17e>
 8011e8e:	464a      	mov	r2, r9
 8011e90:	3901      	subs	r1, #1
 8011e92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011e96:	910d      	str	r1, [sp, #52]	; 0x34
 8011e98:	f7ff ff1b 	bl	8011cd2 <__exponent>
 8011e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e9e:	4682      	mov	sl, r0
 8011ea0:	1813      	adds	r3, r2, r0
 8011ea2:	2a01      	cmp	r2, #1
 8011ea4:	6123      	str	r3, [r4, #16]
 8011ea6:	dc02      	bgt.n	8011eae <_printf_float+0x15e>
 8011ea8:	6822      	ldr	r2, [r4, #0]
 8011eaa:	07d2      	lsls	r2, r2, #31
 8011eac:	d501      	bpl.n	8011eb2 <_printf_float+0x162>
 8011eae:	3301      	adds	r3, #1
 8011eb0:	6123      	str	r3, [r4, #16]
 8011eb2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d09b      	beq.n	8011df2 <_printf_float+0xa2>
 8011eba:	232d      	movs	r3, #45	; 0x2d
 8011ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ec0:	e797      	b.n	8011df2 <_printf_float+0xa2>
 8011ec2:	2947      	cmp	r1, #71	; 0x47
 8011ec4:	d1bc      	bne.n	8011e40 <_printf_float+0xf0>
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d1ba      	bne.n	8011e40 <_printf_float+0xf0>
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e7b7      	b.n	8011e3e <_printf_float+0xee>
 8011ece:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011ed2:	d118      	bne.n	8011f06 <_printf_float+0x1b6>
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	6863      	ldr	r3, [r4, #4]
 8011ed8:	dd0b      	ble.n	8011ef2 <_printf_float+0x1a2>
 8011eda:	6121      	str	r1, [r4, #16]
 8011edc:	b913      	cbnz	r3, 8011ee4 <_printf_float+0x194>
 8011ede:	6822      	ldr	r2, [r4, #0]
 8011ee0:	07d0      	lsls	r0, r2, #31
 8011ee2:	d502      	bpl.n	8011eea <_printf_float+0x19a>
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	440b      	add	r3, r1
 8011ee8:	6123      	str	r3, [r4, #16]
 8011eea:	f04f 0a00 	mov.w	sl, #0
 8011eee:	65a1      	str	r1, [r4, #88]	; 0x58
 8011ef0:	e7df      	b.n	8011eb2 <_printf_float+0x162>
 8011ef2:	b913      	cbnz	r3, 8011efa <_printf_float+0x1aa>
 8011ef4:	6822      	ldr	r2, [r4, #0]
 8011ef6:	07d2      	lsls	r2, r2, #31
 8011ef8:	d501      	bpl.n	8011efe <_printf_float+0x1ae>
 8011efa:	3302      	adds	r3, #2
 8011efc:	e7f4      	b.n	8011ee8 <_printf_float+0x198>
 8011efe:	2301      	movs	r3, #1
 8011f00:	e7f2      	b.n	8011ee8 <_printf_float+0x198>
 8011f02:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f08:	4299      	cmp	r1, r3
 8011f0a:	db05      	blt.n	8011f18 <_printf_float+0x1c8>
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	6121      	str	r1, [r4, #16]
 8011f10:	07d8      	lsls	r0, r3, #31
 8011f12:	d5ea      	bpl.n	8011eea <_printf_float+0x19a>
 8011f14:	1c4b      	adds	r3, r1, #1
 8011f16:	e7e7      	b.n	8011ee8 <_printf_float+0x198>
 8011f18:	2900      	cmp	r1, #0
 8011f1a:	bfcc      	ite	gt
 8011f1c:	2201      	movgt	r2, #1
 8011f1e:	f1c1 0202 	rsble	r2, r1, #2
 8011f22:	4413      	add	r3, r2
 8011f24:	e7e0      	b.n	8011ee8 <_printf_float+0x198>
 8011f26:	6823      	ldr	r3, [r4, #0]
 8011f28:	055a      	lsls	r2, r3, #21
 8011f2a:	d407      	bmi.n	8011f3c <_printf_float+0x1ec>
 8011f2c:	6923      	ldr	r3, [r4, #16]
 8011f2e:	4642      	mov	r2, r8
 8011f30:	4631      	mov	r1, r6
 8011f32:	4628      	mov	r0, r5
 8011f34:	47b8      	blx	r7
 8011f36:	3001      	adds	r0, #1
 8011f38:	d12b      	bne.n	8011f92 <_printf_float+0x242>
 8011f3a:	e764      	b.n	8011e06 <_printf_float+0xb6>
 8011f3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f40:	f240 80dd 	bls.w	80120fe <_printf_float+0x3ae>
 8011f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f48:	2200      	movs	r2, #0
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	f7ee fd98 	bl	8000a80 <__aeabi_dcmpeq>
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d033      	beq.n	8011fbc <_printf_float+0x26c>
 8011f54:	2301      	movs	r3, #1
 8011f56:	4631      	mov	r1, r6
 8011f58:	4628      	mov	r0, r5
 8011f5a:	4a35      	ldr	r2, [pc, #212]	; (8012030 <_printf_float+0x2e0>)
 8011f5c:	47b8      	blx	r7
 8011f5e:	3001      	adds	r0, #1
 8011f60:	f43f af51 	beq.w	8011e06 <_printf_float+0xb6>
 8011f64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	db02      	blt.n	8011f72 <_printf_float+0x222>
 8011f6c:	6823      	ldr	r3, [r4, #0]
 8011f6e:	07d8      	lsls	r0, r3, #31
 8011f70:	d50f      	bpl.n	8011f92 <_printf_float+0x242>
 8011f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f76:	4631      	mov	r1, r6
 8011f78:	4628      	mov	r0, r5
 8011f7a:	47b8      	blx	r7
 8011f7c:	3001      	adds	r0, #1
 8011f7e:	f43f af42 	beq.w	8011e06 <_printf_float+0xb6>
 8011f82:	f04f 0800 	mov.w	r8, #0
 8011f86:	f104 091a 	add.w	r9, r4, #26
 8011f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	4543      	cmp	r3, r8
 8011f90:	dc09      	bgt.n	8011fa6 <_printf_float+0x256>
 8011f92:	6823      	ldr	r3, [r4, #0]
 8011f94:	079b      	lsls	r3, r3, #30
 8011f96:	f100 8102 	bmi.w	801219e <_printf_float+0x44e>
 8011f9a:	68e0      	ldr	r0, [r4, #12]
 8011f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f9e:	4298      	cmp	r0, r3
 8011fa0:	bfb8      	it	lt
 8011fa2:	4618      	movlt	r0, r3
 8011fa4:	e731      	b.n	8011e0a <_printf_float+0xba>
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	464a      	mov	r2, r9
 8011faa:	4631      	mov	r1, r6
 8011fac:	4628      	mov	r0, r5
 8011fae:	47b8      	blx	r7
 8011fb0:	3001      	adds	r0, #1
 8011fb2:	f43f af28 	beq.w	8011e06 <_printf_float+0xb6>
 8011fb6:	f108 0801 	add.w	r8, r8, #1
 8011fba:	e7e6      	b.n	8011f8a <_printf_float+0x23a>
 8011fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	dc38      	bgt.n	8012034 <_printf_float+0x2e4>
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	4631      	mov	r1, r6
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	4a19      	ldr	r2, [pc, #100]	; (8012030 <_printf_float+0x2e0>)
 8011fca:	47b8      	blx	r7
 8011fcc:	3001      	adds	r0, #1
 8011fce:	f43f af1a 	beq.w	8011e06 <_printf_float+0xb6>
 8011fd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	d102      	bne.n	8011fe0 <_printf_float+0x290>
 8011fda:	6823      	ldr	r3, [r4, #0]
 8011fdc:	07d9      	lsls	r1, r3, #31
 8011fde:	d5d8      	bpl.n	8011f92 <_printf_float+0x242>
 8011fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011fe4:	4631      	mov	r1, r6
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	47b8      	blx	r7
 8011fea:	3001      	adds	r0, #1
 8011fec:	f43f af0b 	beq.w	8011e06 <_printf_float+0xb6>
 8011ff0:	f04f 0900 	mov.w	r9, #0
 8011ff4:	f104 0a1a 	add.w	sl, r4, #26
 8011ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ffa:	425b      	negs	r3, r3
 8011ffc:	454b      	cmp	r3, r9
 8011ffe:	dc01      	bgt.n	8012004 <_printf_float+0x2b4>
 8012000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012002:	e794      	b.n	8011f2e <_printf_float+0x1de>
 8012004:	2301      	movs	r3, #1
 8012006:	4652      	mov	r2, sl
 8012008:	4631      	mov	r1, r6
 801200a:	4628      	mov	r0, r5
 801200c:	47b8      	blx	r7
 801200e:	3001      	adds	r0, #1
 8012010:	f43f aef9 	beq.w	8011e06 <_printf_float+0xb6>
 8012014:	f109 0901 	add.w	r9, r9, #1
 8012018:	e7ee      	b.n	8011ff8 <_printf_float+0x2a8>
 801201a:	bf00      	nop
 801201c:	7fefffff 	.word	0x7fefffff
 8012020:	0802dedc 	.word	0x0802dedc
 8012024:	0802dee0 	.word	0x0802dee0
 8012028:	0802dee8 	.word	0x0802dee8
 801202c:	0802dee4 	.word	0x0802dee4
 8012030:	0802deec 	.word	0x0802deec
 8012034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012036:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012038:	429a      	cmp	r2, r3
 801203a:	bfa8      	it	ge
 801203c:	461a      	movge	r2, r3
 801203e:	2a00      	cmp	r2, #0
 8012040:	4691      	mov	r9, r2
 8012042:	dc37      	bgt.n	80120b4 <_printf_float+0x364>
 8012044:	f04f 0b00 	mov.w	fp, #0
 8012048:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801204c:	f104 021a 	add.w	r2, r4, #26
 8012050:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012054:	ebaa 0309 	sub.w	r3, sl, r9
 8012058:	455b      	cmp	r3, fp
 801205a:	dc33      	bgt.n	80120c4 <_printf_float+0x374>
 801205c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012060:	429a      	cmp	r2, r3
 8012062:	db3b      	blt.n	80120dc <_printf_float+0x38c>
 8012064:	6823      	ldr	r3, [r4, #0]
 8012066:	07da      	lsls	r2, r3, #31
 8012068:	d438      	bmi.n	80120dc <_printf_float+0x38c>
 801206a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801206c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801206e:	eba3 020a 	sub.w	r2, r3, sl
 8012072:	eba3 0901 	sub.w	r9, r3, r1
 8012076:	4591      	cmp	r9, r2
 8012078:	bfa8      	it	ge
 801207a:	4691      	movge	r9, r2
 801207c:	f1b9 0f00 	cmp.w	r9, #0
 8012080:	dc34      	bgt.n	80120ec <_printf_float+0x39c>
 8012082:	f04f 0800 	mov.w	r8, #0
 8012086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801208a:	f104 0a1a 	add.w	sl, r4, #26
 801208e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012092:	1a9b      	subs	r3, r3, r2
 8012094:	eba3 0309 	sub.w	r3, r3, r9
 8012098:	4543      	cmp	r3, r8
 801209a:	f77f af7a 	ble.w	8011f92 <_printf_float+0x242>
 801209e:	2301      	movs	r3, #1
 80120a0:	4652      	mov	r2, sl
 80120a2:	4631      	mov	r1, r6
 80120a4:	4628      	mov	r0, r5
 80120a6:	47b8      	blx	r7
 80120a8:	3001      	adds	r0, #1
 80120aa:	f43f aeac 	beq.w	8011e06 <_printf_float+0xb6>
 80120ae:	f108 0801 	add.w	r8, r8, #1
 80120b2:	e7ec      	b.n	801208e <_printf_float+0x33e>
 80120b4:	4613      	mov	r3, r2
 80120b6:	4631      	mov	r1, r6
 80120b8:	4642      	mov	r2, r8
 80120ba:	4628      	mov	r0, r5
 80120bc:	47b8      	blx	r7
 80120be:	3001      	adds	r0, #1
 80120c0:	d1c0      	bne.n	8012044 <_printf_float+0x2f4>
 80120c2:	e6a0      	b.n	8011e06 <_printf_float+0xb6>
 80120c4:	2301      	movs	r3, #1
 80120c6:	4631      	mov	r1, r6
 80120c8:	4628      	mov	r0, r5
 80120ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80120cc:	47b8      	blx	r7
 80120ce:	3001      	adds	r0, #1
 80120d0:	f43f ae99 	beq.w	8011e06 <_printf_float+0xb6>
 80120d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120d6:	f10b 0b01 	add.w	fp, fp, #1
 80120da:	e7b9      	b.n	8012050 <_printf_float+0x300>
 80120dc:	4631      	mov	r1, r6
 80120de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80120e2:	4628      	mov	r0, r5
 80120e4:	47b8      	blx	r7
 80120e6:	3001      	adds	r0, #1
 80120e8:	d1bf      	bne.n	801206a <_printf_float+0x31a>
 80120ea:	e68c      	b.n	8011e06 <_printf_float+0xb6>
 80120ec:	464b      	mov	r3, r9
 80120ee:	4631      	mov	r1, r6
 80120f0:	4628      	mov	r0, r5
 80120f2:	eb08 020a 	add.w	r2, r8, sl
 80120f6:	47b8      	blx	r7
 80120f8:	3001      	adds	r0, #1
 80120fa:	d1c2      	bne.n	8012082 <_printf_float+0x332>
 80120fc:	e683      	b.n	8011e06 <_printf_float+0xb6>
 80120fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012100:	2a01      	cmp	r2, #1
 8012102:	dc01      	bgt.n	8012108 <_printf_float+0x3b8>
 8012104:	07db      	lsls	r3, r3, #31
 8012106:	d537      	bpl.n	8012178 <_printf_float+0x428>
 8012108:	2301      	movs	r3, #1
 801210a:	4642      	mov	r2, r8
 801210c:	4631      	mov	r1, r6
 801210e:	4628      	mov	r0, r5
 8012110:	47b8      	blx	r7
 8012112:	3001      	adds	r0, #1
 8012114:	f43f ae77 	beq.w	8011e06 <_printf_float+0xb6>
 8012118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801211c:	4631      	mov	r1, r6
 801211e:	4628      	mov	r0, r5
 8012120:	47b8      	blx	r7
 8012122:	3001      	adds	r0, #1
 8012124:	f43f ae6f 	beq.w	8011e06 <_printf_float+0xb6>
 8012128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801212c:	2200      	movs	r2, #0
 801212e:	2300      	movs	r3, #0
 8012130:	f7ee fca6 	bl	8000a80 <__aeabi_dcmpeq>
 8012134:	b9d8      	cbnz	r0, 801216e <_printf_float+0x41e>
 8012136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012138:	f108 0201 	add.w	r2, r8, #1
 801213c:	3b01      	subs	r3, #1
 801213e:	4631      	mov	r1, r6
 8012140:	4628      	mov	r0, r5
 8012142:	47b8      	blx	r7
 8012144:	3001      	adds	r0, #1
 8012146:	d10e      	bne.n	8012166 <_printf_float+0x416>
 8012148:	e65d      	b.n	8011e06 <_printf_float+0xb6>
 801214a:	2301      	movs	r3, #1
 801214c:	464a      	mov	r2, r9
 801214e:	4631      	mov	r1, r6
 8012150:	4628      	mov	r0, r5
 8012152:	47b8      	blx	r7
 8012154:	3001      	adds	r0, #1
 8012156:	f43f ae56 	beq.w	8011e06 <_printf_float+0xb6>
 801215a:	f108 0801 	add.w	r8, r8, #1
 801215e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012160:	3b01      	subs	r3, #1
 8012162:	4543      	cmp	r3, r8
 8012164:	dcf1      	bgt.n	801214a <_printf_float+0x3fa>
 8012166:	4653      	mov	r3, sl
 8012168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801216c:	e6e0      	b.n	8011f30 <_printf_float+0x1e0>
 801216e:	f04f 0800 	mov.w	r8, #0
 8012172:	f104 091a 	add.w	r9, r4, #26
 8012176:	e7f2      	b.n	801215e <_printf_float+0x40e>
 8012178:	2301      	movs	r3, #1
 801217a:	4642      	mov	r2, r8
 801217c:	e7df      	b.n	801213e <_printf_float+0x3ee>
 801217e:	2301      	movs	r3, #1
 8012180:	464a      	mov	r2, r9
 8012182:	4631      	mov	r1, r6
 8012184:	4628      	mov	r0, r5
 8012186:	47b8      	blx	r7
 8012188:	3001      	adds	r0, #1
 801218a:	f43f ae3c 	beq.w	8011e06 <_printf_float+0xb6>
 801218e:	f108 0801 	add.w	r8, r8, #1
 8012192:	68e3      	ldr	r3, [r4, #12]
 8012194:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012196:	1a5b      	subs	r3, r3, r1
 8012198:	4543      	cmp	r3, r8
 801219a:	dcf0      	bgt.n	801217e <_printf_float+0x42e>
 801219c:	e6fd      	b.n	8011f9a <_printf_float+0x24a>
 801219e:	f04f 0800 	mov.w	r8, #0
 80121a2:	f104 0919 	add.w	r9, r4, #25
 80121a6:	e7f4      	b.n	8012192 <_printf_float+0x442>

080121a8 <_printf_common>:
 80121a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121ac:	4616      	mov	r6, r2
 80121ae:	4699      	mov	r9, r3
 80121b0:	688a      	ldr	r2, [r1, #8]
 80121b2:	690b      	ldr	r3, [r1, #16]
 80121b4:	4607      	mov	r7, r0
 80121b6:	4293      	cmp	r3, r2
 80121b8:	bfb8      	it	lt
 80121ba:	4613      	movlt	r3, r2
 80121bc:	6033      	str	r3, [r6, #0]
 80121be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80121c2:	460c      	mov	r4, r1
 80121c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80121c8:	b10a      	cbz	r2, 80121ce <_printf_common+0x26>
 80121ca:	3301      	adds	r3, #1
 80121cc:	6033      	str	r3, [r6, #0]
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	0699      	lsls	r1, r3, #26
 80121d2:	bf42      	ittt	mi
 80121d4:	6833      	ldrmi	r3, [r6, #0]
 80121d6:	3302      	addmi	r3, #2
 80121d8:	6033      	strmi	r3, [r6, #0]
 80121da:	6825      	ldr	r5, [r4, #0]
 80121dc:	f015 0506 	ands.w	r5, r5, #6
 80121e0:	d106      	bne.n	80121f0 <_printf_common+0x48>
 80121e2:	f104 0a19 	add.w	sl, r4, #25
 80121e6:	68e3      	ldr	r3, [r4, #12]
 80121e8:	6832      	ldr	r2, [r6, #0]
 80121ea:	1a9b      	subs	r3, r3, r2
 80121ec:	42ab      	cmp	r3, r5
 80121ee:	dc28      	bgt.n	8012242 <_printf_common+0x9a>
 80121f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80121f4:	1e13      	subs	r3, r2, #0
 80121f6:	6822      	ldr	r2, [r4, #0]
 80121f8:	bf18      	it	ne
 80121fa:	2301      	movne	r3, #1
 80121fc:	0692      	lsls	r2, r2, #26
 80121fe:	d42d      	bmi.n	801225c <_printf_common+0xb4>
 8012200:	4649      	mov	r1, r9
 8012202:	4638      	mov	r0, r7
 8012204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012208:	47c0      	blx	r8
 801220a:	3001      	adds	r0, #1
 801220c:	d020      	beq.n	8012250 <_printf_common+0xa8>
 801220e:	6823      	ldr	r3, [r4, #0]
 8012210:	68e5      	ldr	r5, [r4, #12]
 8012212:	f003 0306 	and.w	r3, r3, #6
 8012216:	2b04      	cmp	r3, #4
 8012218:	bf18      	it	ne
 801221a:	2500      	movne	r5, #0
 801221c:	6832      	ldr	r2, [r6, #0]
 801221e:	f04f 0600 	mov.w	r6, #0
 8012222:	68a3      	ldr	r3, [r4, #8]
 8012224:	bf08      	it	eq
 8012226:	1aad      	subeq	r5, r5, r2
 8012228:	6922      	ldr	r2, [r4, #16]
 801222a:	bf08      	it	eq
 801222c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012230:	4293      	cmp	r3, r2
 8012232:	bfc4      	itt	gt
 8012234:	1a9b      	subgt	r3, r3, r2
 8012236:	18ed      	addgt	r5, r5, r3
 8012238:	341a      	adds	r4, #26
 801223a:	42b5      	cmp	r5, r6
 801223c:	d11a      	bne.n	8012274 <_printf_common+0xcc>
 801223e:	2000      	movs	r0, #0
 8012240:	e008      	b.n	8012254 <_printf_common+0xac>
 8012242:	2301      	movs	r3, #1
 8012244:	4652      	mov	r2, sl
 8012246:	4649      	mov	r1, r9
 8012248:	4638      	mov	r0, r7
 801224a:	47c0      	blx	r8
 801224c:	3001      	adds	r0, #1
 801224e:	d103      	bne.n	8012258 <_printf_common+0xb0>
 8012250:	f04f 30ff 	mov.w	r0, #4294967295
 8012254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012258:	3501      	adds	r5, #1
 801225a:	e7c4      	b.n	80121e6 <_printf_common+0x3e>
 801225c:	2030      	movs	r0, #48	; 0x30
 801225e:	18e1      	adds	r1, r4, r3
 8012260:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012264:	1c5a      	adds	r2, r3, #1
 8012266:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801226a:	4422      	add	r2, r4
 801226c:	3302      	adds	r3, #2
 801226e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012272:	e7c5      	b.n	8012200 <_printf_common+0x58>
 8012274:	2301      	movs	r3, #1
 8012276:	4622      	mov	r2, r4
 8012278:	4649      	mov	r1, r9
 801227a:	4638      	mov	r0, r7
 801227c:	47c0      	blx	r8
 801227e:	3001      	adds	r0, #1
 8012280:	d0e6      	beq.n	8012250 <_printf_common+0xa8>
 8012282:	3601      	adds	r6, #1
 8012284:	e7d9      	b.n	801223a <_printf_common+0x92>
	...

08012288 <_printf_i>:
 8012288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801228c:	7e0f      	ldrb	r7, [r1, #24]
 801228e:	4691      	mov	r9, r2
 8012290:	2f78      	cmp	r7, #120	; 0x78
 8012292:	4680      	mov	r8, r0
 8012294:	460c      	mov	r4, r1
 8012296:	469a      	mov	sl, r3
 8012298:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801229a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801229e:	d807      	bhi.n	80122b0 <_printf_i+0x28>
 80122a0:	2f62      	cmp	r7, #98	; 0x62
 80122a2:	d80a      	bhi.n	80122ba <_printf_i+0x32>
 80122a4:	2f00      	cmp	r7, #0
 80122a6:	f000 80d9 	beq.w	801245c <_printf_i+0x1d4>
 80122aa:	2f58      	cmp	r7, #88	; 0x58
 80122ac:	f000 80a4 	beq.w	80123f8 <_printf_i+0x170>
 80122b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80122b8:	e03a      	b.n	8012330 <_printf_i+0xa8>
 80122ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80122be:	2b15      	cmp	r3, #21
 80122c0:	d8f6      	bhi.n	80122b0 <_printf_i+0x28>
 80122c2:	a101      	add	r1, pc, #4	; (adr r1, 80122c8 <_printf_i+0x40>)
 80122c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80122c8:	08012321 	.word	0x08012321
 80122cc:	08012335 	.word	0x08012335
 80122d0:	080122b1 	.word	0x080122b1
 80122d4:	080122b1 	.word	0x080122b1
 80122d8:	080122b1 	.word	0x080122b1
 80122dc:	080122b1 	.word	0x080122b1
 80122e0:	08012335 	.word	0x08012335
 80122e4:	080122b1 	.word	0x080122b1
 80122e8:	080122b1 	.word	0x080122b1
 80122ec:	080122b1 	.word	0x080122b1
 80122f0:	080122b1 	.word	0x080122b1
 80122f4:	08012443 	.word	0x08012443
 80122f8:	08012365 	.word	0x08012365
 80122fc:	08012425 	.word	0x08012425
 8012300:	080122b1 	.word	0x080122b1
 8012304:	080122b1 	.word	0x080122b1
 8012308:	08012465 	.word	0x08012465
 801230c:	080122b1 	.word	0x080122b1
 8012310:	08012365 	.word	0x08012365
 8012314:	080122b1 	.word	0x080122b1
 8012318:	080122b1 	.word	0x080122b1
 801231c:	0801242d 	.word	0x0801242d
 8012320:	682b      	ldr	r3, [r5, #0]
 8012322:	1d1a      	adds	r2, r3, #4
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	602a      	str	r2, [r5, #0]
 8012328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801232c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012330:	2301      	movs	r3, #1
 8012332:	e0a4      	b.n	801247e <_printf_i+0x1f6>
 8012334:	6820      	ldr	r0, [r4, #0]
 8012336:	6829      	ldr	r1, [r5, #0]
 8012338:	0606      	lsls	r6, r0, #24
 801233a:	f101 0304 	add.w	r3, r1, #4
 801233e:	d50a      	bpl.n	8012356 <_printf_i+0xce>
 8012340:	680e      	ldr	r6, [r1, #0]
 8012342:	602b      	str	r3, [r5, #0]
 8012344:	2e00      	cmp	r6, #0
 8012346:	da03      	bge.n	8012350 <_printf_i+0xc8>
 8012348:	232d      	movs	r3, #45	; 0x2d
 801234a:	4276      	negs	r6, r6
 801234c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012350:	230a      	movs	r3, #10
 8012352:	485e      	ldr	r0, [pc, #376]	; (80124cc <_printf_i+0x244>)
 8012354:	e019      	b.n	801238a <_printf_i+0x102>
 8012356:	680e      	ldr	r6, [r1, #0]
 8012358:	f010 0f40 	tst.w	r0, #64	; 0x40
 801235c:	602b      	str	r3, [r5, #0]
 801235e:	bf18      	it	ne
 8012360:	b236      	sxthne	r6, r6
 8012362:	e7ef      	b.n	8012344 <_printf_i+0xbc>
 8012364:	682b      	ldr	r3, [r5, #0]
 8012366:	6820      	ldr	r0, [r4, #0]
 8012368:	1d19      	adds	r1, r3, #4
 801236a:	6029      	str	r1, [r5, #0]
 801236c:	0601      	lsls	r1, r0, #24
 801236e:	d501      	bpl.n	8012374 <_printf_i+0xec>
 8012370:	681e      	ldr	r6, [r3, #0]
 8012372:	e002      	b.n	801237a <_printf_i+0xf2>
 8012374:	0646      	lsls	r6, r0, #25
 8012376:	d5fb      	bpl.n	8012370 <_printf_i+0xe8>
 8012378:	881e      	ldrh	r6, [r3, #0]
 801237a:	2f6f      	cmp	r7, #111	; 0x6f
 801237c:	bf0c      	ite	eq
 801237e:	2308      	moveq	r3, #8
 8012380:	230a      	movne	r3, #10
 8012382:	4852      	ldr	r0, [pc, #328]	; (80124cc <_printf_i+0x244>)
 8012384:	2100      	movs	r1, #0
 8012386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801238a:	6865      	ldr	r5, [r4, #4]
 801238c:	2d00      	cmp	r5, #0
 801238e:	bfa8      	it	ge
 8012390:	6821      	ldrge	r1, [r4, #0]
 8012392:	60a5      	str	r5, [r4, #8]
 8012394:	bfa4      	itt	ge
 8012396:	f021 0104 	bicge.w	r1, r1, #4
 801239a:	6021      	strge	r1, [r4, #0]
 801239c:	b90e      	cbnz	r6, 80123a2 <_printf_i+0x11a>
 801239e:	2d00      	cmp	r5, #0
 80123a0:	d04d      	beq.n	801243e <_printf_i+0x1b6>
 80123a2:	4615      	mov	r5, r2
 80123a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80123a8:	fb03 6711 	mls	r7, r3, r1, r6
 80123ac:	5dc7      	ldrb	r7, [r0, r7]
 80123ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80123b2:	4637      	mov	r7, r6
 80123b4:	42bb      	cmp	r3, r7
 80123b6:	460e      	mov	r6, r1
 80123b8:	d9f4      	bls.n	80123a4 <_printf_i+0x11c>
 80123ba:	2b08      	cmp	r3, #8
 80123bc:	d10b      	bne.n	80123d6 <_printf_i+0x14e>
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	07de      	lsls	r6, r3, #31
 80123c2:	d508      	bpl.n	80123d6 <_printf_i+0x14e>
 80123c4:	6923      	ldr	r3, [r4, #16]
 80123c6:	6861      	ldr	r1, [r4, #4]
 80123c8:	4299      	cmp	r1, r3
 80123ca:	bfde      	ittt	le
 80123cc:	2330      	movle	r3, #48	; 0x30
 80123ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80123d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80123d6:	1b52      	subs	r2, r2, r5
 80123d8:	6122      	str	r2, [r4, #16]
 80123da:	464b      	mov	r3, r9
 80123dc:	4621      	mov	r1, r4
 80123de:	4640      	mov	r0, r8
 80123e0:	f8cd a000 	str.w	sl, [sp]
 80123e4:	aa03      	add	r2, sp, #12
 80123e6:	f7ff fedf 	bl	80121a8 <_printf_common>
 80123ea:	3001      	adds	r0, #1
 80123ec:	d14c      	bne.n	8012488 <_printf_i+0x200>
 80123ee:	f04f 30ff 	mov.w	r0, #4294967295
 80123f2:	b004      	add	sp, #16
 80123f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f8:	4834      	ldr	r0, [pc, #208]	; (80124cc <_printf_i+0x244>)
 80123fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80123fe:	6829      	ldr	r1, [r5, #0]
 8012400:	6823      	ldr	r3, [r4, #0]
 8012402:	f851 6b04 	ldr.w	r6, [r1], #4
 8012406:	6029      	str	r1, [r5, #0]
 8012408:	061d      	lsls	r5, r3, #24
 801240a:	d514      	bpl.n	8012436 <_printf_i+0x1ae>
 801240c:	07df      	lsls	r7, r3, #31
 801240e:	bf44      	itt	mi
 8012410:	f043 0320 	orrmi.w	r3, r3, #32
 8012414:	6023      	strmi	r3, [r4, #0]
 8012416:	b91e      	cbnz	r6, 8012420 <_printf_i+0x198>
 8012418:	6823      	ldr	r3, [r4, #0]
 801241a:	f023 0320 	bic.w	r3, r3, #32
 801241e:	6023      	str	r3, [r4, #0]
 8012420:	2310      	movs	r3, #16
 8012422:	e7af      	b.n	8012384 <_printf_i+0xfc>
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	f043 0320 	orr.w	r3, r3, #32
 801242a:	6023      	str	r3, [r4, #0]
 801242c:	2378      	movs	r3, #120	; 0x78
 801242e:	4828      	ldr	r0, [pc, #160]	; (80124d0 <_printf_i+0x248>)
 8012430:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012434:	e7e3      	b.n	80123fe <_printf_i+0x176>
 8012436:	0659      	lsls	r1, r3, #25
 8012438:	bf48      	it	mi
 801243a:	b2b6      	uxthmi	r6, r6
 801243c:	e7e6      	b.n	801240c <_printf_i+0x184>
 801243e:	4615      	mov	r5, r2
 8012440:	e7bb      	b.n	80123ba <_printf_i+0x132>
 8012442:	682b      	ldr	r3, [r5, #0]
 8012444:	6826      	ldr	r6, [r4, #0]
 8012446:	1d18      	adds	r0, r3, #4
 8012448:	6961      	ldr	r1, [r4, #20]
 801244a:	6028      	str	r0, [r5, #0]
 801244c:	0635      	lsls	r5, r6, #24
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	d501      	bpl.n	8012456 <_printf_i+0x1ce>
 8012452:	6019      	str	r1, [r3, #0]
 8012454:	e002      	b.n	801245c <_printf_i+0x1d4>
 8012456:	0670      	lsls	r0, r6, #25
 8012458:	d5fb      	bpl.n	8012452 <_printf_i+0x1ca>
 801245a:	8019      	strh	r1, [r3, #0]
 801245c:	2300      	movs	r3, #0
 801245e:	4615      	mov	r5, r2
 8012460:	6123      	str	r3, [r4, #16]
 8012462:	e7ba      	b.n	80123da <_printf_i+0x152>
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	2100      	movs	r1, #0
 8012468:	1d1a      	adds	r2, r3, #4
 801246a:	602a      	str	r2, [r5, #0]
 801246c:	681d      	ldr	r5, [r3, #0]
 801246e:	6862      	ldr	r2, [r4, #4]
 8012470:	4628      	mov	r0, r5
 8012472:	f000 fef7 	bl	8013264 <memchr>
 8012476:	b108      	cbz	r0, 801247c <_printf_i+0x1f4>
 8012478:	1b40      	subs	r0, r0, r5
 801247a:	6060      	str	r0, [r4, #4]
 801247c:	6863      	ldr	r3, [r4, #4]
 801247e:	6123      	str	r3, [r4, #16]
 8012480:	2300      	movs	r3, #0
 8012482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012486:	e7a8      	b.n	80123da <_printf_i+0x152>
 8012488:	462a      	mov	r2, r5
 801248a:	4649      	mov	r1, r9
 801248c:	4640      	mov	r0, r8
 801248e:	6923      	ldr	r3, [r4, #16]
 8012490:	47d0      	blx	sl
 8012492:	3001      	adds	r0, #1
 8012494:	d0ab      	beq.n	80123ee <_printf_i+0x166>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	079b      	lsls	r3, r3, #30
 801249a:	d413      	bmi.n	80124c4 <_printf_i+0x23c>
 801249c:	68e0      	ldr	r0, [r4, #12]
 801249e:	9b03      	ldr	r3, [sp, #12]
 80124a0:	4298      	cmp	r0, r3
 80124a2:	bfb8      	it	lt
 80124a4:	4618      	movlt	r0, r3
 80124a6:	e7a4      	b.n	80123f2 <_printf_i+0x16a>
 80124a8:	2301      	movs	r3, #1
 80124aa:	4632      	mov	r2, r6
 80124ac:	4649      	mov	r1, r9
 80124ae:	4640      	mov	r0, r8
 80124b0:	47d0      	blx	sl
 80124b2:	3001      	adds	r0, #1
 80124b4:	d09b      	beq.n	80123ee <_printf_i+0x166>
 80124b6:	3501      	adds	r5, #1
 80124b8:	68e3      	ldr	r3, [r4, #12]
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	1a5b      	subs	r3, r3, r1
 80124be:	42ab      	cmp	r3, r5
 80124c0:	dcf2      	bgt.n	80124a8 <_printf_i+0x220>
 80124c2:	e7eb      	b.n	801249c <_printf_i+0x214>
 80124c4:	2500      	movs	r5, #0
 80124c6:	f104 0619 	add.w	r6, r4, #25
 80124ca:	e7f5      	b.n	80124b8 <_printf_i+0x230>
 80124cc:	0802deee 	.word	0x0802deee
 80124d0:	0802deff 	.word	0x0802deff

080124d4 <_sbrk_r>:
 80124d4:	b538      	push	{r3, r4, r5, lr}
 80124d6:	2300      	movs	r3, #0
 80124d8:	4d05      	ldr	r5, [pc, #20]	; (80124f0 <_sbrk_r+0x1c>)
 80124da:	4604      	mov	r4, r0
 80124dc:	4608      	mov	r0, r1
 80124de:	602b      	str	r3, [r5, #0]
 80124e0:	f7f1 f9fe 	bl	80038e0 <_sbrk>
 80124e4:	1c43      	adds	r3, r0, #1
 80124e6:	d102      	bne.n	80124ee <_sbrk_r+0x1a>
 80124e8:	682b      	ldr	r3, [r5, #0]
 80124ea:	b103      	cbz	r3, 80124ee <_sbrk_r+0x1a>
 80124ec:	6023      	str	r3, [r4, #0]
 80124ee:	bd38      	pop	{r3, r4, r5, pc}
 80124f0:	20001668 	.word	0x20001668

080124f4 <_vsniprintf_r>:
 80124f4:	b530      	push	{r4, r5, lr}
 80124f6:	4614      	mov	r4, r2
 80124f8:	2c00      	cmp	r4, #0
 80124fa:	4605      	mov	r5, r0
 80124fc:	461a      	mov	r2, r3
 80124fe:	b09b      	sub	sp, #108	; 0x6c
 8012500:	da05      	bge.n	801250e <_vsniprintf_r+0x1a>
 8012502:	238b      	movs	r3, #139	; 0x8b
 8012504:	6003      	str	r3, [r0, #0]
 8012506:	f04f 30ff 	mov.w	r0, #4294967295
 801250a:	b01b      	add	sp, #108	; 0x6c
 801250c:	bd30      	pop	{r4, r5, pc}
 801250e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012512:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012516:	bf0c      	ite	eq
 8012518:	4623      	moveq	r3, r4
 801251a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801251e:	9302      	str	r3, [sp, #8]
 8012520:	9305      	str	r3, [sp, #20]
 8012522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012526:	9100      	str	r1, [sp, #0]
 8012528:	9104      	str	r1, [sp, #16]
 801252a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801252e:	4669      	mov	r1, sp
 8012530:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012532:	f001 fab1 	bl	8013a98 <_svfiprintf_r>
 8012536:	1c43      	adds	r3, r0, #1
 8012538:	bfbc      	itt	lt
 801253a:	238b      	movlt	r3, #139	; 0x8b
 801253c:	602b      	strlt	r3, [r5, #0]
 801253e:	2c00      	cmp	r4, #0
 8012540:	d0e3      	beq.n	801250a <_vsniprintf_r+0x16>
 8012542:	2200      	movs	r2, #0
 8012544:	9b00      	ldr	r3, [sp, #0]
 8012546:	701a      	strb	r2, [r3, #0]
 8012548:	e7df      	b.n	801250a <_vsniprintf_r+0x16>
	...

0801254c <vsniprintf>:
 801254c:	b507      	push	{r0, r1, r2, lr}
 801254e:	9300      	str	r3, [sp, #0]
 8012550:	4613      	mov	r3, r2
 8012552:	460a      	mov	r2, r1
 8012554:	4601      	mov	r1, r0
 8012556:	4803      	ldr	r0, [pc, #12]	; (8012564 <vsniprintf+0x18>)
 8012558:	6800      	ldr	r0, [r0, #0]
 801255a:	f7ff ffcb 	bl	80124f4 <_vsniprintf_r>
 801255e:	b003      	add	sp, #12
 8012560:	f85d fb04 	ldr.w	pc, [sp], #4
 8012564:	20000168 	.word	0x20000168

08012568 <quorem>:
 8012568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	6903      	ldr	r3, [r0, #16]
 801256e:	690c      	ldr	r4, [r1, #16]
 8012570:	4607      	mov	r7, r0
 8012572:	42a3      	cmp	r3, r4
 8012574:	f2c0 8082 	blt.w	801267c <quorem+0x114>
 8012578:	3c01      	subs	r4, #1
 801257a:	f100 0514 	add.w	r5, r0, #20
 801257e:	f101 0814 	add.w	r8, r1, #20
 8012582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012586:	9301      	str	r3, [sp, #4]
 8012588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801258c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012590:	3301      	adds	r3, #1
 8012592:	429a      	cmp	r2, r3
 8012594:	fbb2 f6f3 	udiv	r6, r2, r3
 8012598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801259c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80125a0:	d331      	bcc.n	8012606 <quorem+0x9e>
 80125a2:	f04f 0e00 	mov.w	lr, #0
 80125a6:	4640      	mov	r0, r8
 80125a8:	46ac      	mov	ip, r5
 80125aa:	46f2      	mov	sl, lr
 80125ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80125b0:	b293      	uxth	r3, r2
 80125b2:	fb06 e303 	mla	r3, r6, r3, lr
 80125b6:	0c12      	lsrs	r2, r2, #16
 80125b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80125bc:	b29b      	uxth	r3, r3
 80125be:	fb06 e202 	mla	r2, r6, r2, lr
 80125c2:	ebaa 0303 	sub.w	r3, sl, r3
 80125c6:	f8dc a000 	ldr.w	sl, [ip]
 80125ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80125ce:	fa1f fa8a 	uxth.w	sl, sl
 80125d2:	4453      	add	r3, sl
 80125d4:	f8dc a000 	ldr.w	sl, [ip]
 80125d8:	b292      	uxth	r2, r2
 80125da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80125de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125e8:	4581      	cmp	r9, r0
 80125ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80125ee:	f84c 3b04 	str.w	r3, [ip], #4
 80125f2:	d2db      	bcs.n	80125ac <quorem+0x44>
 80125f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80125f8:	b92b      	cbnz	r3, 8012606 <quorem+0x9e>
 80125fa:	9b01      	ldr	r3, [sp, #4]
 80125fc:	3b04      	subs	r3, #4
 80125fe:	429d      	cmp	r5, r3
 8012600:	461a      	mov	r2, r3
 8012602:	d32f      	bcc.n	8012664 <quorem+0xfc>
 8012604:	613c      	str	r4, [r7, #16]
 8012606:	4638      	mov	r0, r7
 8012608:	f001 f8d2 	bl	80137b0 <__mcmp>
 801260c:	2800      	cmp	r0, #0
 801260e:	db25      	blt.n	801265c <quorem+0xf4>
 8012610:	4628      	mov	r0, r5
 8012612:	f04f 0c00 	mov.w	ip, #0
 8012616:	3601      	adds	r6, #1
 8012618:	f858 1b04 	ldr.w	r1, [r8], #4
 801261c:	f8d0 e000 	ldr.w	lr, [r0]
 8012620:	b28b      	uxth	r3, r1
 8012622:	ebac 0303 	sub.w	r3, ip, r3
 8012626:	fa1f f28e 	uxth.w	r2, lr
 801262a:	4413      	add	r3, r2
 801262c:	0c0a      	lsrs	r2, r1, #16
 801262e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012632:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012636:	b29b      	uxth	r3, r3
 8012638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801263c:	45c1      	cmp	r9, r8
 801263e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012642:	f840 3b04 	str.w	r3, [r0], #4
 8012646:	d2e7      	bcs.n	8012618 <quorem+0xb0>
 8012648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801264c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012650:	b922      	cbnz	r2, 801265c <quorem+0xf4>
 8012652:	3b04      	subs	r3, #4
 8012654:	429d      	cmp	r5, r3
 8012656:	461a      	mov	r2, r3
 8012658:	d30a      	bcc.n	8012670 <quorem+0x108>
 801265a:	613c      	str	r4, [r7, #16]
 801265c:	4630      	mov	r0, r6
 801265e:	b003      	add	sp, #12
 8012660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012664:	6812      	ldr	r2, [r2, #0]
 8012666:	3b04      	subs	r3, #4
 8012668:	2a00      	cmp	r2, #0
 801266a:	d1cb      	bne.n	8012604 <quorem+0x9c>
 801266c:	3c01      	subs	r4, #1
 801266e:	e7c6      	b.n	80125fe <quorem+0x96>
 8012670:	6812      	ldr	r2, [r2, #0]
 8012672:	3b04      	subs	r3, #4
 8012674:	2a00      	cmp	r2, #0
 8012676:	d1f0      	bne.n	801265a <quorem+0xf2>
 8012678:	3c01      	subs	r4, #1
 801267a:	e7eb      	b.n	8012654 <quorem+0xec>
 801267c:	2000      	movs	r0, #0
 801267e:	e7ee      	b.n	801265e <quorem+0xf6>

08012680 <_dtoa_r>:
 8012680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	4616      	mov	r6, r2
 8012686:	461f      	mov	r7, r3
 8012688:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801268a:	b099      	sub	sp, #100	; 0x64
 801268c:	4605      	mov	r5, r0
 801268e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012692:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8012696:	b974      	cbnz	r4, 80126b6 <_dtoa_r+0x36>
 8012698:	2010      	movs	r0, #16
 801269a:	f7ff f9c7 	bl	8011a2c <malloc>
 801269e:	4602      	mov	r2, r0
 80126a0:	6268      	str	r0, [r5, #36]	; 0x24
 80126a2:	b920      	cbnz	r0, 80126ae <_dtoa_r+0x2e>
 80126a4:	21ea      	movs	r1, #234	; 0xea
 80126a6:	4ba8      	ldr	r3, [pc, #672]	; (8012948 <_dtoa_r+0x2c8>)
 80126a8:	48a8      	ldr	r0, [pc, #672]	; (801294c <_dtoa_r+0x2cc>)
 80126aa:	f001 faf5 	bl	8013c98 <__assert_func>
 80126ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80126b2:	6004      	str	r4, [r0, #0]
 80126b4:	60c4      	str	r4, [r0, #12]
 80126b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126b8:	6819      	ldr	r1, [r3, #0]
 80126ba:	b151      	cbz	r1, 80126d2 <_dtoa_r+0x52>
 80126bc:	685a      	ldr	r2, [r3, #4]
 80126be:	2301      	movs	r3, #1
 80126c0:	4093      	lsls	r3, r2
 80126c2:	604a      	str	r2, [r1, #4]
 80126c4:	608b      	str	r3, [r1, #8]
 80126c6:	4628      	mov	r0, r5
 80126c8:	f000 fe34 	bl	8013334 <_Bfree>
 80126cc:	2200      	movs	r2, #0
 80126ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80126d0:	601a      	str	r2, [r3, #0]
 80126d2:	1e3b      	subs	r3, r7, #0
 80126d4:	bfaf      	iteee	ge
 80126d6:	2300      	movge	r3, #0
 80126d8:	2201      	movlt	r2, #1
 80126da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126de:	9305      	strlt	r3, [sp, #20]
 80126e0:	bfa8      	it	ge
 80126e2:	f8c8 3000 	strge.w	r3, [r8]
 80126e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80126ea:	4b99      	ldr	r3, [pc, #612]	; (8012950 <_dtoa_r+0x2d0>)
 80126ec:	bfb8      	it	lt
 80126ee:	f8c8 2000 	strlt.w	r2, [r8]
 80126f2:	ea33 0309 	bics.w	r3, r3, r9
 80126f6:	d119      	bne.n	801272c <_dtoa_r+0xac>
 80126f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80126fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80126fe:	6013      	str	r3, [r2, #0]
 8012700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012704:	4333      	orrs	r3, r6
 8012706:	f000 857f 	beq.w	8013208 <_dtoa_r+0xb88>
 801270a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801270c:	b953      	cbnz	r3, 8012724 <_dtoa_r+0xa4>
 801270e:	4b91      	ldr	r3, [pc, #580]	; (8012954 <_dtoa_r+0x2d4>)
 8012710:	e022      	b.n	8012758 <_dtoa_r+0xd8>
 8012712:	4b91      	ldr	r3, [pc, #580]	; (8012958 <_dtoa_r+0x2d8>)
 8012714:	9303      	str	r3, [sp, #12]
 8012716:	3308      	adds	r3, #8
 8012718:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801271a:	6013      	str	r3, [r2, #0]
 801271c:	9803      	ldr	r0, [sp, #12]
 801271e:	b019      	add	sp, #100	; 0x64
 8012720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012724:	4b8b      	ldr	r3, [pc, #556]	; (8012954 <_dtoa_r+0x2d4>)
 8012726:	9303      	str	r3, [sp, #12]
 8012728:	3303      	adds	r3, #3
 801272a:	e7f5      	b.n	8012718 <_dtoa_r+0x98>
 801272c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012730:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8012734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012738:	2200      	movs	r2, #0
 801273a:	2300      	movs	r3, #0
 801273c:	f7ee f9a0 	bl	8000a80 <__aeabi_dcmpeq>
 8012740:	4680      	mov	r8, r0
 8012742:	b158      	cbz	r0, 801275c <_dtoa_r+0xdc>
 8012744:	2301      	movs	r3, #1
 8012746:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012748:	6013      	str	r3, [r2, #0]
 801274a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801274c:	2b00      	cmp	r3, #0
 801274e:	f000 8558 	beq.w	8013202 <_dtoa_r+0xb82>
 8012752:	4882      	ldr	r0, [pc, #520]	; (801295c <_dtoa_r+0x2dc>)
 8012754:	6018      	str	r0, [r3, #0]
 8012756:	1e43      	subs	r3, r0, #1
 8012758:	9303      	str	r3, [sp, #12]
 801275a:	e7df      	b.n	801271c <_dtoa_r+0x9c>
 801275c:	ab16      	add	r3, sp, #88	; 0x58
 801275e:	9301      	str	r3, [sp, #4]
 8012760:	ab17      	add	r3, sp, #92	; 0x5c
 8012762:	9300      	str	r3, [sp, #0]
 8012764:	4628      	mov	r0, r5
 8012766:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801276a:	f001 f8c9 	bl	8013900 <__d2b>
 801276e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012772:	4683      	mov	fp, r0
 8012774:	2c00      	cmp	r4, #0
 8012776:	d07f      	beq.n	8012878 <_dtoa_r+0x1f8>
 8012778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801277c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801277e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012786:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801278a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801278e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8012792:	2200      	movs	r2, #0
 8012794:	4b72      	ldr	r3, [pc, #456]	; (8012960 <_dtoa_r+0x2e0>)
 8012796:	f7ed fd53 	bl	8000240 <__aeabi_dsub>
 801279a:	a365      	add	r3, pc, #404	; (adr r3, 8012930 <_dtoa_r+0x2b0>)
 801279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a0:	f7ed ff06 	bl	80005b0 <__aeabi_dmul>
 80127a4:	a364      	add	r3, pc, #400	; (adr r3, 8012938 <_dtoa_r+0x2b8>)
 80127a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127aa:	f7ed fd4b 	bl	8000244 <__adddf3>
 80127ae:	4606      	mov	r6, r0
 80127b0:	4620      	mov	r0, r4
 80127b2:	460f      	mov	r7, r1
 80127b4:	f7ed fe92 	bl	80004dc <__aeabi_i2d>
 80127b8:	a361      	add	r3, pc, #388	; (adr r3, 8012940 <_dtoa_r+0x2c0>)
 80127ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127be:	f7ed fef7 	bl	80005b0 <__aeabi_dmul>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	4630      	mov	r0, r6
 80127c8:	4639      	mov	r1, r7
 80127ca:	f7ed fd3b 	bl	8000244 <__adddf3>
 80127ce:	4606      	mov	r6, r0
 80127d0:	460f      	mov	r7, r1
 80127d2:	f7ee f99d 	bl	8000b10 <__aeabi_d2iz>
 80127d6:	2200      	movs	r2, #0
 80127d8:	4682      	mov	sl, r0
 80127da:	2300      	movs	r3, #0
 80127dc:	4630      	mov	r0, r6
 80127de:	4639      	mov	r1, r7
 80127e0:	f7ee f958 	bl	8000a94 <__aeabi_dcmplt>
 80127e4:	b148      	cbz	r0, 80127fa <_dtoa_r+0x17a>
 80127e6:	4650      	mov	r0, sl
 80127e8:	f7ed fe78 	bl	80004dc <__aeabi_i2d>
 80127ec:	4632      	mov	r2, r6
 80127ee:	463b      	mov	r3, r7
 80127f0:	f7ee f946 	bl	8000a80 <__aeabi_dcmpeq>
 80127f4:	b908      	cbnz	r0, 80127fa <_dtoa_r+0x17a>
 80127f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127fa:	f1ba 0f16 	cmp.w	sl, #22
 80127fe:	d858      	bhi.n	80128b2 <_dtoa_r+0x232>
 8012800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012804:	4b57      	ldr	r3, [pc, #348]	; (8012964 <_dtoa_r+0x2e4>)
 8012806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ee f941 	bl	8000a94 <__aeabi_dcmplt>
 8012812:	2800      	cmp	r0, #0
 8012814:	d04f      	beq.n	80128b6 <_dtoa_r+0x236>
 8012816:	2300      	movs	r3, #0
 8012818:	f10a 3aff 	add.w	sl, sl, #4294967295
 801281c:	930f      	str	r3, [sp, #60]	; 0x3c
 801281e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012820:	1b1c      	subs	r4, r3, r4
 8012822:	1e63      	subs	r3, r4, #1
 8012824:	9309      	str	r3, [sp, #36]	; 0x24
 8012826:	bf49      	itett	mi
 8012828:	f1c4 0301 	rsbmi	r3, r4, #1
 801282c:	2300      	movpl	r3, #0
 801282e:	9306      	strmi	r3, [sp, #24]
 8012830:	2300      	movmi	r3, #0
 8012832:	bf54      	ite	pl
 8012834:	9306      	strpl	r3, [sp, #24]
 8012836:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012838:	f1ba 0f00 	cmp.w	sl, #0
 801283c:	db3d      	blt.n	80128ba <_dtoa_r+0x23a>
 801283e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012840:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012844:	4453      	add	r3, sl
 8012846:	9309      	str	r3, [sp, #36]	; 0x24
 8012848:	2300      	movs	r3, #0
 801284a:	930a      	str	r3, [sp, #40]	; 0x28
 801284c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801284e:	2b09      	cmp	r3, #9
 8012850:	f200 808c 	bhi.w	801296c <_dtoa_r+0x2ec>
 8012854:	2b05      	cmp	r3, #5
 8012856:	bfc4      	itt	gt
 8012858:	3b04      	subgt	r3, #4
 801285a:	9322      	strgt	r3, [sp, #136]	; 0x88
 801285c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801285e:	bfc8      	it	gt
 8012860:	2400      	movgt	r4, #0
 8012862:	f1a3 0302 	sub.w	r3, r3, #2
 8012866:	bfd8      	it	le
 8012868:	2401      	movle	r4, #1
 801286a:	2b03      	cmp	r3, #3
 801286c:	f200 808a 	bhi.w	8012984 <_dtoa_r+0x304>
 8012870:	e8df f003 	tbb	[pc, r3]
 8012874:	5b4d4f2d 	.word	0x5b4d4f2d
 8012878:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801287c:	441c      	add	r4, r3
 801287e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8012882:	2b20      	cmp	r3, #32
 8012884:	bfc3      	ittte	gt
 8012886:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801288a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801288e:	fa09 f303 	lslgt.w	r3, r9, r3
 8012892:	f1c3 0320 	rsble	r3, r3, #32
 8012896:	bfc6      	itte	gt
 8012898:	fa26 f000 	lsrgt.w	r0, r6, r0
 801289c:	4318      	orrgt	r0, r3
 801289e:	fa06 f003 	lslle.w	r0, r6, r3
 80128a2:	f7ed fe0b 	bl	80004bc <__aeabi_ui2d>
 80128a6:	2301      	movs	r3, #1
 80128a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80128ac:	3c01      	subs	r4, #1
 80128ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80128b0:	e76f      	b.n	8012792 <_dtoa_r+0x112>
 80128b2:	2301      	movs	r3, #1
 80128b4:	e7b2      	b.n	801281c <_dtoa_r+0x19c>
 80128b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80128b8:	e7b1      	b.n	801281e <_dtoa_r+0x19e>
 80128ba:	9b06      	ldr	r3, [sp, #24]
 80128bc:	eba3 030a 	sub.w	r3, r3, sl
 80128c0:	9306      	str	r3, [sp, #24]
 80128c2:	f1ca 0300 	rsb	r3, sl, #0
 80128c6:	930a      	str	r3, [sp, #40]	; 0x28
 80128c8:	2300      	movs	r3, #0
 80128ca:	930e      	str	r3, [sp, #56]	; 0x38
 80128cc:	e7be      	b.n	801284c <_dtoa_r+0x1cc>
 80128ce:	2300      	movs	r3, #0
 80128d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80128d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	dc58      	bgt.n	801298a <_dtoa_r+0x30a>
 80128d8:	f04f 0901 	mov.w	r9, #1
 80128dc:	464b      	mov	r3, r9
 80128de:	f8cd 9020 	str.w	r9, [sp, #32]
 80128e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80128e6:	2200      	movs	r2, #0
 80128e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80128ea:	6042      	str	r2, [r0, #4]
 80128ec:	2204      	movs	r2, #4
 80128ee:	f102 0614 	add.w	r6, r2, #20
 80128f2:	429e      	cmp	r6, r3
 80128f4:	6841      	ldr	r1, [r0, #4]
 80128f6:	d94e      	bls.n	8012996 <_dtoa_r+0x316>
 80128f8:	4628      	mov	r0, r5
 80128fa:	f000 fcdb 	bl	80132b4 <_Balloc>
 80128fe:	9003      	str	r0, [sp, #12]
 8012900:	2800      	cmp	r0, #0
 8012902:	d14c      	bne.n	801299e <_dtoa_r+0x31e>
 8012904:	4602      	mov	r2, r0
 8012906:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801290a:	4b17      	ldr	r3, [pc, #92]	; (8012968 <_dtoa_r+0x2e8>)
 801290c:	e6cc      	b.n	80126a8 <_dtoa_r+0x28>
 801290e:	2301      	movs	r3, #1
 8012910:	e7de      	b.n	80128d0 <_dtoa_r+0x250>
 8012912:	2300      	movs	r3, #0
 8012914:	930b      	str	r3, [sp, #44]	; 0x2c
 8012916:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012918:	eb0a 0903 	add.w	r9, sl, r3
 801291c:	f109 0301 	add.w	r3, r9, #1
 8012920:	2b01      	cmp	r3, #1
 8012922:	9308      	str	r3, [sp, #32]
 8012924:	bfb8      	it	lt
 8012926:	2301      	movlt	r3, #1
 8012928:	e7dd      	b.n	80128e6 <_dtoa_r+0x266>
 801292a:	2301      	movs	r3, #1
 801292c:	e7f2      	b.n	8012914 <_dtoa_r+0x294>
 801292e:	bf00      	nop
 8012930:	636f4361 	.word	0x636f4361
 8012934:	3fd287a7 	.word	0x3fd287a7
 8012938:	8b60c8b3 	.word	0x8b60c8b3
 801293c:	3fc68a28 	.word	0x3fc68a28
 8012940:	509f79fb 	.word	0x509f79fb
 8012944:	3fd34413 	.word	0x3fd34413
 8012948:	0802df1d 	.word	0x0802df1d
 801294c:	0802df34 	.word	0x0802df34
 8012950:	7ff00000 	.word	0x7ff00000
 8012954:	0802df19 	.word	0x0802df19
 8012958:	0802df10 	.word	0x0802df10
 801295c:	0802deed 	.word	0x0802deed
 8012960:	3ff80000 	.word	0x3ff80000
 8012964:	0802e028 	.word	0x0802e028
 8012968:	0802df8f 	.word	0x0802df8f
 801296c:	2401      	movs	r4, #1
 801296e:	2300      	movs	r3, #0
 8012970:	940b      	str	r4, [sp, #44]	; 0x2c
 8012972:	9322      	str	r3, [sp, #136]	; 0x88
 8012974:	f04f 39ff 	mov.w	r9, #4294967295
 8012978:	2200      	movs	r2, #0
 801297a:	2312      	movs	r3, #18
 801297c:	f8cd 9020 	str.w	r9, [sp, #32]
 8012980:	9223      	str	r2, [sp, #140]	; 0x8c
 8012982:	e7b0      	b.n	80128e6 <_dtoa_r+0x266>
 8012984:	2301      	movs	r3, #1
 8012986:	930b      	str	r3, [sp, #44]	; 0x2c
 8012988:	e7f4      	b.n	8012974 <_dtoa_r+0x2f4>
 801298a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801298e:	464b      	mov	r3, r9
 8012990:	f8cd 9020 	str.w	r9, [sp, #32]
 8012994:	e7a7      	b.n	80128e6 <_dtoa_r+0x266>
 8012996:	3101      	adds	r1, #1
 8012998:	6041      	str	r1, [r0, #4]
 801299a:	0052      	lsls	r2, r2, #1
 801299c:	e7a7      	b.n	80128ee <_dtoa_r+0x26e>
 801299e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80129a0:	9a03      	ldr	r2, [sp, #12]
 80129a2:	601a      	str	r2, [r3, #0]
 80129a4:	9b08      	ldr	r3, [sp, #32]
 80129a6:	2b0e      	cmp	r3, #14
 80129a8:	f200 80a8 	bhi.w	8012afc <_dtoa_r+0x47c>
 80129ac:	2c00      	cmp	r4, #0
 80129ae:	f000 80a5 	beq.w	8012afc <_dtoa_r+0x47c>
 80129b2:	f1ba 0f00 	cmp.w	sl, #0
 80129b6:	dd34      	ble.n	8012a22 <_dtoa_r+0x3a2>
 80129b8:	4a9a      	ldr	r2, [pc, #616]	; (8012c24 <_dtoa_r+0x5a4>)
 80129ba:	f00a 030f 	and.w	r3, sl, #15
 80129be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80129c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80129ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80129d2:	d016      	beq.n	8012a02 <_dtoa_r+0x382>
 80129d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129d8:	4b93      	ldr	r3, [pc, #588]	; (8012c28 <_dtoa_r+0x5a8>)
 80129da:	2703      	movs	r7, #3
 80129dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80129e0:	f7ed ff10 	bl	8000804 <__aeabi_ddiv>
 80129e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129e8:	f004 040f 	and.w	r4, r4, #15
 80129ec:	4e8e      	ldr	r6, [pc, #568]	; (8012c28 <_dtoa_r+0x5a8>)
 80129ee:	b954      	cbnz	r4, 8012a06 <_dtoa_r+0x386>
 80129f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80129f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129f8:	f7ed ff04 	bl	8000804 <__aeabi_ddiv>
 80129fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a00:	e029      	b.n	8012a56 <_dtoa_r+0x3d6>
 8012a02:	2702      	movs	r7, #2
 8012a04:	e7f2      	b.n	80129ec <_dtoa_r+0x36c>
 8012a06:	07e1      	lsls	r1, r4, #31
 8012a08:	d508      	bpl.n	8012a1c <_dtoa_r+0x39c>
 8012a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a12:	f7ed fdcd 	bl	80005b0 <__aeabi_dmul>
 8012a16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012a1a:	3701      	adds	r7, #1
 8012a1c:	1064      	asrs	r4, r4, #1
 8012a1e:	3608      	adds	r6, #8
 8012a20:	e7e5      	b.n	80129ee <_dtoa_r+0x36e>
 8012a22:	f000 80a5 	beq.w	8012b70 <_dtoa_r+0x4f0>
 8012a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a2a:	f1ca 0400 	rsb	r4, sl, #0
 8012a2e:	4b7d      	ldr	r3, [pc, #500]	; (8012c24 <_dtoa_r+0x5a4>)
 8012a30:	f004 020f 	and.w	r2, r4, #15
 8012a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3c:	f7ed fdb8 	bl	80005b0 <__aeabi_dmul>
 8012a40:	2702      	movs	r7, #2
 8012a42:	2300      	movs	r3, #0
 8012a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a48:	4e77      	ldr	r6, [pc, #476]	; (8012c28 <_dtoa_r+0x5a8>)
 8012a4a:	1124      	asrs	r4, r4, #4
 8012a4c:	2c00      	cmp	r4, #0
 8012a4e:	f040 8084 	bne.w	8012b5a <_dtoa_r+0x4da>
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1d2      	bne.n	80129fc <_dtoa_r+0x37c>
 8012a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 808b 	beq.w	8012b74 <_dtoa_r+0x4f4>
 8012a5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012a62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012a66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	4b6f      	ldr	r3, [pc, #444]	; (8012c2c <_dtoa_r+0x5ac>)
 8012a6e:	f7ee f811 	bl	8000a94 <__aeabi_dcmplt>
 8012a72:	2800      	cmp	r0, #0
 8012a74:	d07e      	beq.n	8012b74 <_dtoa_r+0x4f4>
 8012a76:	9b08      	ldr	r3, [sp, #32]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d07b      	beq.n	8012b74 <_dtoa_r+0x4f4>
 8012a7c:	f1b9 0f00 	cmp.w	r9, #0
 8012a80:	dd38      	ble.n	8012af4 <_dtoa_r+0x474>
 8012a82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a86:	2200      	movs	r2, #0
 8012a88:	4b69      	ldr	r3, [pc, #420]	; (8012c30 <_dtoa_r+0x5b0>)
 8012a8a:	f7ed fd91 	bl	80005b0 <__aeabi_dmul>
 8012a8e:	464c      	mov	r4, r9
 8012a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a94:	f10a 38ff 	add.w	r8, sl, #4294967295
 8012a98:	3701      	adds	r7, #1
 8012a9a:	4638      	mov	r0, r7
 8012a9c:	f7ed fd1e 	bl	80004dc <__aeabi_i2d>
 8012aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aa4:	f7ed fd84 	bl	80005b0 <__aeabi_dmul>
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	4b62      	ldr	r3, [pc, #392]	; (8012c34 <_dtoa_r+0x5b4>)
 8012aac:	f7ed fbca 	bl	8000244 <__adddf3>
 8012ab0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012ab4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012ab8:	9611      	str	r6, [sp, #68]	; 0x44
 8012aba:	2c00      	cmp	r4, #0
 8012abc:	d15d      	bne.n	8012b7a <_dtoa_r+0x4fa>
 8012abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	4b5c      	ldr	r3, [pc, #368]	; (8012c38 <_dtoa_r+0x5b8>)
 8012ac6:	f7ed fbbb 	bl	8000240 <__aeabi_dsub>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ad2:	4633      	mov	r3, r6
 8012ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ad6:	f7ed fffb 	bl	8000ad0 <__aeabi_dcmpgt>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	f040 829c 	bne.w	8013018 <_dtoa_r+0x998>
 8012ae0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ae6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012aea:	f7ed ffd3 	bl	8000a94 <__aeabi_dcmplt>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	f040 8290 	bne.w	8013014 <_dtoa_r+0x994>
 8012af4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012af8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	f2c0 8152 	blt.w	8012da8 <_dtoa_r+0x728>
 8012b04:	f1ba 0f0e 	cmp.w	sl, #14
 8012b08:	f300 814e 	bgt.w	8012da8 <_dtoa_r+0x728>
 8012b0c:	4b45      	ldr	r3, [pc, #276]	; (8012c24 <_dtoa_r+0x5a4>)
 8012b0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8012b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f280 80db 	bge.w	8012cd8 <_dtoa_r+0x658>
 8012b22:	9b08      	ldr	r3, [sp, #32]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f300 80d7 	bgt.w	8012cd8 <_dtoa_r+0x658>
 8012b2a:	f040 8272 	bne.w	8013012 <_dtoa_r+0x992>
 8012b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b32:	2200      	movs	r2, #0
 8012b34:	4b40      	ldr	r3, [pc, #256]	; (8012c38 <_dtoa_r+0x5b8>)
 8012b36:	f7ed fd3b 	bl	80005b0 <__aeabi_dmul>
 8012b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b3e:	f7ed ffbd 	bl	8000abc <__aeabi_dcmpge>
 8012b42:	9c08      	ldr	r4, [sp, #32]
 8012b44:	4626      	mov	r6, r4
 8012b46:	2800      	cmp	r0, #0
 8012b48:	f040 8248 	bne.w	8012fdc <_dtoa_r+0x95c>
 8012b4c:	2331      	movs	r3, #49	; 0x31
 8012b4e:	9f03      	ldr	r7, [sp, #12]
 8012b50:	f10a 0a01 	add.w	sl, sl, #1
 8012b54:	f807 3b01 	strb.w	r3, [r7], #1
 8012b58:	e244      	b.n	8012fe4 <_dtoa_r+0x964>
 8012b5a:	07e2      	lsls	r2, r4, #31
 8012b5c:	d505      	bpl.n	8012b6a <_dtoa_r+0x4ea>
 8012b5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012b62:	f7ed fd25 	bl	80005b0 <__aeabi_dmul>
 8012b66:	2301      	movs	r3, #1
 8012b68:	3701      	adds	r7, #1
 8012b6a:	1064      	asrs	r4, r4, #1
 8012b6c:	3608      	adds	r6, #8
 8012b6e:	e76d      	b.n	8012a4c <_dtoa_r+0x3cc>
 8012b70:	2702      	movs	r7, #2
 8012b72:	e770      	b.n	8012a56 <_dtoa_r+0x3d6>
 8012b74:	46d0      	mov	r8, sl
 8012b76:	9c08      	ldr	r4, [sp, #32]
 8012b78:	e78f      	b.n	8012a9a <_dtoa_r+0x41a>
 8012b7a:	9903      	ldr	r1, [sp, #12]
 8012b7c:	4b29      	ldr	r3, [pc, #164]	; (8012c24 <_dtoa_r+0x5a4>)
 8012b7e:	4421      	add	r1, r4
 8012b80:	9112      	str	r1, [sp, #72]	; 0x48
 8012b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012b8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b90:	2900      	cmp	r1, #0
 8012b92:	d055      	beq.n	8012c40 <_dtoa_r+0x5c0>
 8012b94:	2000      	movs	r0, #0
 8012b96:	4929      	ldr	r1, [pc, #164]	; (8012c3c <_dtoa_r+0x5bc>)
 8012b98:	f7ed fe34 	bl	8000804 <__aeabi_ddiv>
 8012b9c:	463b      	mov	r3, r7
 8012b9e:	4632      	mov	r2, r6
 8012ba0:	f7ed fb4e 	bl	8000240 <__aeabi_dsub>
 8012ba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012ba8:	9f03      	ldr	r7, [sp, #12]
 8012baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bae:	f7ed ffaf 	bl	8000b10 <__aeabi_d2iz>
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	f7ed fc92 	bl	80004dc <__aeabi_i2d>
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bc0:	f7ed fb3e 	bl	8000240 <__aeabi_dsub>
 8012bc4:	4602      	mov	r2, r0
 8012bc6:	460b      	mov	r3, r1
 8012bc8:	3430      	adds	r4, #48	; 0x30
 8012bca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bd2:	f807 4b01 	strb.w	r4, [r7], #1
 8012bd6:	f7ed ff5d 	bl	8000a94 <__aeabi_dcmplt>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d174      	bne.n	8012cc8 <_dtoa_r+0x648>
 8012bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012be2:	2000      	movs	r0, #0
 8012be4:	4911      	ldr	r1, [pc, #68]	; (8012c2c <_dtoa_r+0x5ac>)
 8012be6:	f7ed fb2b 	bl	8000240 <__aeabi_dsub>
 8012bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012bee:	f7ed ff51 	bl	8000a94 <__aeabi_dcmplt>
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	f040 80b7 	bne.w	8012d66 <_dtoa_r+0x6e6>
 8012bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012bfa:	429f      	cmp	r7, r3
 8012bfc:	f43f af7a 	beq.w	8012af4 <_dtoa_r+0x474>
 8012c00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c04:	2200      	movs	r2, #0
 8012c06:	4b0a      	ldr	r3, [pc, #40]	; (8012c30 <_dtoa_r+0x5b0>)
 8012c08:	f7ed fcd2 	bl	80005b0 <__aeabi_dmul>
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c16:	4b06      	ldr	r3, [pc, #24]	; (8012c30 <_dtoa_r+0x5b0>)
 8012c18:	f7ed fcca 	bl	80005b0 <__aeabi_dmul>
 8012c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c20:	e7c3      	b.n	8012baa <_dtoa_r+0x52a>
 8012c22:	bf00      	nop
 8012c24:	0802e028 	.word	0x0802e028
 8012c28:	0802e000 	.word	0x0802e000
 8012c2c:	3ff00000 	.word	0x3ff00000
 8012c30:	40240000 	.word	0x40240000
 8012c34:	401c0000 	.word	0x401c0000
 8012c38:	40140000 	.word	0x40140000
 8012c3c:	3fe00000 	.word	0x3fe00000
 8012c40:	4630      	mov	r0, r6
 8012c42:	4639      	mov	r1, r7
 8012c44:	f7ed fcb4 	bl	80005b0 <__aeabi_dmul>
 8012c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012c4e:	9c03      	ldr	r4, [sp, #12]
 8012c50:	9314      	str	r3, [sp, #80]	; 0x50
 8012c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c56:	f7ed ff5b 	bl	8000b10 <__aeabi_d2iz>
 8012c5a:	9015      	str	r0, [sp, #84]	; 0x54
 8012c5c:	f7ed fc3e 	bl	80004dc <__aeabi_i2d>
 8012c60:	4602      	mov	r2, r0
 8012c62:	460b      	mov	r3, r1
 8012c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c68:	f7ed faea 	bl	8000240 <__aeabi_dsub>
 8012c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c6e:	4606      	mov	r6, r0
 8012c70:	3330      	adds	r3, #48	; 0x30
 8012c72:	f804 3b01 	strb.w	r3, [r4], #1
 8012c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c78:	460f      	mov	r7, r1
 8012c7a:	429c      	cmp	r4, r3
 8012c7c:	f04f 0200 	mov.w	r2, #0
 8012c80:	d124      	bne.n	8012ccc <_dtoa_r+0x64c>
 8012c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c86:	4bb0      	ldr	r3, [pc, #704]	; (8012f48 <_dtoa_r+0x8c8>)
 8012c88:	f7ed fadc 	bl	8000244 <__adddf3>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4630      	mov	r0, r6
 8012c92:	4639      	mov	r1, r7
 8012c94:	f7ed ff1c 	bl	8000ad0 <__aeabi_dcmpgt>
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	d163      	bne.n	8012d64 <_dtoa_r+0x6e4>
 8012c9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	49a9      	ldr	r1, [pc, #676]	; (8012f48 <_dtoa_r+0x8c8>)
 8012ca4:	f7ed facc 	bl	8000240 <__aeabi_dsub>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	460b      	mov	r3, r1
 8012cac:	4630      	mov	r0, r6
 8012cae:	4639      	mov	r1, r7
 8012cb0:	f7ed fef0 	bl	8000a94 <__aeabi_dcmplt>
 8012cb4:	2800      	cmp	r0, #0
 8012cb6:	f43f af1d 	beq.w	8012af4 <_dtoa_r+0x474>
 8012cba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012cbc:	1e7b      	subs	r3, r7, #1
 8012cbe:	9314      	str	r3, [sp, #80]	; 0x50
 8012cc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012cc4:	2b30      	cmp	r3, #48	; 0x30
 8012cc6:	d0f8      	beq.n	8012cba <_dtoa_r+0x63a>
 8012cc8:	46c2      	mov	sl, r8
 8012cca:	e03b      	b.n	8012d44 <_dtoa_r+0x6c4>
 8012ccc:	4b9f      	ldr	r3, [pc, #636]	; (8012f4c <_dtoa_r+0x8cc>)
 8012cce:	f7ed fc6f 	bl	80005b0 <__aeabi_dmul>
 8012cd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012cd6:	e7bc      	b.n	8012c52 <_dtoa_r+0x5d2>
 8012cd8:	9f03      	ldr	r7, [sp, #12]
 8012cda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ce2:	4640      	mov	r0, r8
 8012ce4:	4649      	mov	r1, r9
 8012ce6:	f7ed fd8d 	bl	8000804 <__aeabi_ddiv>
 8012cea:	f7ed ff11 	bl	8000b10 <__aeabi_d2iz>
 8012cee:	4604      	mov	r4, r0
 8012cf0:	f7ed fbf4 	bl	80004dc <__aeabi_i2d>
 8012cf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cf8:	f7ed fc5a 	bl	80005b0 <__aeabi_dmul>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	460b      	mov	r3, r1
 8012d00:	4640      	mov	r0, r8
 8012d02:	4649      	mov	r1, r9
 8012d04:	f7ed fa9c 	bl	8000240 <__aeabi_dsub>
 8012d08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012d0c:	f807 6b01 	strb.w	r6, [r7], #1
 8012d10:	9e03      	ldr	r6, [sp, #12]
 8012d12:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012d16:	1bbe      	subs	r6, r7, r6
 8012d18:	45b4      	cmp	ip, r6
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	d136      	bne.n	8012d8e <_dtoa_r+0x70e>
 8012d20:	f7ed fa90 	bl	8000244 <__adddf3>
 8012d24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d28:	4680      	mov	r8, r0
 8012d2a:	4689      	mov	r9, r1
 8012d2c:	f7ed fed0 	bl	8000ad0 <__aeabi_dcmpgt>
 8012d30:	bb58      	cbnz	r0, 8012d8a <_dtoa_r+0x70a>
 8012d32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d36:	4640      	mov	r0, r8
 8012d38:	4649      	mov	r1, r9
 8012d3a:	f7ed fea1 	bl	8000a80 <__aeabi_dcmpeq>
 8012d3e:	b108      	cbz	r0, 8012d44 <_dtoa_r+0x6c4>
 8012d40:	07e1      	lsls	r1, r4, #31
 8012d42:	d422      	bmi.n	8012d8a <_dtoa_r+0x70a>
 8012d44:	4628      	mov	r0, r5
 8012d46:	4659      	mov	r1, fp
 8012d48:	f000 faf4 	bl	8013334 <_Bfree>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	703b      	strb	r3, [r7, #0]
 8012d50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012d52:	f10a 0001 	add.w	r0, sl, #1
 8012d56:	6018      	str	r0, [r3, #0]
 8012d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f43f acde 	beq.w	801271c <_dtoa_r+0x9c>
 8012d60:	601f      	str	r7, [r3, #0]
 8012d62:	e4db      	b.n	801271c <_dtoa_r+0x9c>
 8012d64:	4627      	mov	r7, r4
 8012d66:	463b      	mov	r3, r7
 8012d68:	461f      	mov	r7, r3
 8012d6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d6e:	2a39      	cmp	r2, #57	; 0x39
 8012d70:	d107      	bne.n	8012d82 <_dtoa_r+0x702>
 8012d72:	9a03      	ldr	r2, [sp, #12]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d1f7      	bne.n	8012d68 <_dtoa_r+0x6e8>
 8012d78:	2230      	movs	r2, #48	; 0x30
 8012d7a:	9903      	ldr	r1, [sp, #12]
 8012d7c:	f108 0801 	add.w	r8, r8, #1
 8012d80:	700a      	strb	r2, [r1, #0]
 8012d82:	781a      	ldrb	r2, [r3, #0]
 8012d84:	3201      	adds	r2, #1
 8012d86:	701a      	strb	r2, [r3, #0]
 8012d88:	e79e      	b.n	8012cc8 <_dtoa_r+0x648>
 8012d8a:	46d0      	mov	r8, sl
 8012d8c:	e7eb      	b.n	8012d66 <_dtoa_r+0x6e6>
 8012d8e:	2200      	movs	r2, #0
 8012d90:	4b6e      	ldr	r3, [pc, #440]	; (8012f4c <_dtoa_r+0x8cc>)
 8012d92:	f7ed fc0d 	bl	80005b0 <__aeabi_dmul>
 8012d96:	2200      	movs	r2, #0
 8012d98:	2300      	movs	r3, #0
 8012d9a:	4680      	mov	r8, r0
 8012d9c:	4689      	mov	r9, r1
 8012d9e:	f7ed fe6f 	bl	8000a80 <__aeabi_dcmpeq>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d09b      	beq.n	8012cde <_dtoa_r+0x65e>
 8012da6:	e7cd      	b.n	8012d44 <_dtoa_r+0x6c4>
 8012da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012daa:	2a00      	cmp	r2, #0
 8012dac:	f000 80d0 	beq.w	8012f50 <_dtoa_r+0x8d0>
 8012db0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012db2:	2a01      	cmp	r2, #1
 8012db4:	f300 80ae 	bgt.w	8012f14 <_dtoa_r+0x894>
 8012db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012dba:	2a00      	cmp	r2, #0
 8012dbc:	f000 80a6 	beq.w	8012f0c <_dtoa_r+0x88c>
 8012dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012dc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012dc6:	9f06      	ldr	r7, [sp, #24]
 8012dc8:	9a06      	ldr	r2, [sp, #24]
 8012dca:	2101      	movs	r1, #1
 8012dcc:	441a      	add	r2, r3
 8012dce:	9206      	str	r2, [sp, #24]
 8012dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	441a      	add	r2, r3
 8012dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8012dd8:	f000 fb62 	bl	80134a0 <__i2b>
 8012ddc:	4606      	mov	r6, r0
 8012dde:	2f00      	cmp	r7, #0
 8012de0:	dd0c      	ble.n	8012dfc <_dtoa_r+0x77c>
 8012de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd09      	ble.n	8012dfc <_dtoa_r+0x77c>
 8012de8:	42bb      	cmp	r3, r7
 8012dea:	bfa8      	it	ge
 8012dec:	463b      	movge	r3, r7
 8012dee:	9a06      	ldr	r2, [sp, #24]
 8012df0:	1aff      	subs	r7, r7, r3
 8012df2:	1ad2      	subs	r2, r2, r3
 8012df4:	9206      	str	r2, [sp, #24]
 8012df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dfe:	b1f3      	cbz	r3, 8012e3e <_dtoa_r+0x7be>
 8012e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 80a8 	beq.w	8012f58 <_dtoa_r+0x8d8>
 8012e08:	2c00      	cmp	r4, #0
 8012e0a:	dd10      	ble.n	8012e2e <_dtoa_r+0x7ae>
 8012e0c:	4631      	mov	r1, r6
 8012e0e:	4622      	mov	r2, r4
 8012e10:	4628      	mov	r0, r5
 8012e12:	f000 fc03 	bl	801361c <__pow5mult>
 8012e16:	465a      	mov	r2, fp
 8012e18:	4601      	mov	r1, r0
 8012e1a:	4606      	mov	r6, r0
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	f000 fb55 	bl	80134cc <__multiply>
 8012e22:	4680      	mov	r8, r0
 8012e24:	4659      	mov	r1, fp
 8012e26:	4628      	mov	r0, r5
 8012e28:	f000 fa84 	bl	8013334 <_Bfree>
 8012e2c:	46c3      	mov	fp, r8
 8012e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e30:	1b1a      	subs	r2, r3, r4
 8012e32:	d004      	beq.n	8012e3e <_dtoa_r+0x7be>
 8012e34:	4659      	mov	r1, fp
 8012e36:	4628      	mov	r0, r5
 8012e38:	f000 fbf0 	bl	801361c <__pow5mult>
 8012e3c:	4683      	mov	fp, r0
 8012e3e:	2101      	movs	r1, #1
 8012e40:	4628      	mov	r0, r5
 8012e42:	f000 fb2d 	bl	80134a0 <__i2b>
 8012e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e48:	4604      	mov	r4, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	f340 8086 	ble.w	8012f5c <_dtoa_r+0x8dc>
 8012e50:	461a      	mov	r2, r3
 8012e52:	4601      	mov	r1, r0
 8012e54:	4628      	mov	r0, r5
 8012e56:	f000 fbe1 	bl	801361c <__pow5mult>
 8012e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	dd7f      	ble.n	8012f62 <_dtoa_r+0x8e2>
 8012e62:	f04f 0800 	mov.w	r8, #0
 8012e66:	6923      	ldr	r3, [r4, #16]
 8012e68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e6c:	6918      	ldr	r0, [r3, #16]
 8012e6e:	f000 fac9 	bl	8013404 <__hi0bits>
 8012e72:	f1c0 0020 	rsb	r0, r0, #32
 8012e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e78:	4418      	add	r0, r3
 8012e7a:	f010 001f 	ands.w	r0, r0, #31
 8012e7e:	f000 8092 	beq.w	8012fa6 <_dtoa_r+0x926>
 8012e82:	f1c0 0320 	rsb	r3, r0, #32
 8012e86:	2b04      	cmp	r3, #4
 8012e88:	f340 808a 	ble.w	8012fa0 <_dtoa_r+0x920>
 8012e8c:	f1c0 001c 	rsb	r0, r0, #28
 8012e90:	9b06      	ldr	r3, [sp, #24]
 8012e92:	4407      	add	r7, r0
 8012e94:	4403      	add	r3, r0
 8012e96:	9306      	str	r3, [sp, #24]
 8012e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e9a:	4403      	add	r3, r0
 8012e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8012e9e:	9b06      	ldr	r3, [sp, #24]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	dd05      	ble.n	8012eb0 <_dtoa_r+0x830>
 8012ea4:	4659      	mov	r1, fp
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	f000 fc11 	bl	80136d0 <__lshift>
 8012eae:	4683      	mov	fp, r0
 8012eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	dd05      	ble.n	8012ec2 <_dtoa_r+0x842>
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	461a      	mov	r2, r3
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f000 fc08 	bl	80136d0 <__lshift>
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d070      	beq.n	8012faa <_dtoa_r+0x92a>
 8012ec8:	4621      	mov	r1, r4
 8012eca:	4658      	mov	r0, fp
 8012ecc:	f000 fc70 	bl	80137b0 <__mcmp>
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	da6a      	bge.n	8012faa <_dtoa_r+0x92a>
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4659      	mov	r1, fp
 8012ed8:	220a      	movs	r2, #10
 8012eda:	4628      	mov	r0, r5
 8012edc:	f000 fa4c 	bl	8013378 <__multadd>
 8012ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ee2:	4683      	mov	fp, r0
 8012ee4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	f000 8194 	beq.w	8013216 <_dtoa_r+0xb96>
 8012eee:	4631      	mov	r1, r6
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	220a      	movs	r2, #10
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	f000 fa3f 	bl	8013378 <__multadd>
 8012efa:	f1b9 0f00 	cmp.w	r9, #0
 8012efe:	4606      	mov	r6, r0
 8012f00:	f300 8093 	bgt.w	801302a <_dtoa_r+0x9aa>
 8012f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f06:	2b02      	cmp	r3, #2
 8012f08:	dc57      	bgt.n	8012fba <_dtoa_r+0x93a>
 8012f0a:	e08e      	b.n	801302a <_dtoa_r+0x9aa>
 8012f0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012f12:	e757      	b.n	8012dc4 <_dtoa_r+0x744>
 8012f14:	9b08      	ldr	r3, [sp, #32]
 8012f16:	1e5c      	subs	r4, r3, #1
 8012f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f1a:	42a3      	cmp	r3, r4
 8012f1c:	bfb7      	itett	lt
 8012f1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012f20:	1b1c      	subge	r4, r3, r4
 8012f22:	1ae2      	sublt	r2, r4, r3
 8012f24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012f26:	bfbe      	ittt	lt
 8012f28:	940a      	strlt	r4, [sp, #40]	; 0x28
 8012f2a:	189b      	addlt	r3, r3, r2
 8012f2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012f2e:	9b08      	ldr	r3, [sp, #32]
 8012f30:	bfb8      	it	lt
 8012f32:	2400      	movlt	r4, #0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	bfbb      	ittet	lt
 8012f38:	9b06      	ldrlt	r3, [sp, #24]
 8012f3a:	9a08      	ldrlt	r2, [sp, #32]
 8012f3c:	9f06      	ldrge	r7, [sp, #24]
 8012f3e:	1a9f      	sublt	r7, r3, r2
 8012f40:	bfac      	ite	ge
 8012f42:	9b08      	ldrge	r3, [sp, #32]
 8012f44:	2300      	movlt	r3, #0
 8012f46:	e73f      	b.n	8012dc8 <_dtoa_r+0x748>
 8012f48:	3fe00000 	.word	0x3fe00000
 8012f4c:	40240000 	.word	0x40240000
 8012f50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012f52:	9f06      	ldr	r7, [sp, #24]
 8012f54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012f56:	e742      	b.n	8012dde <_dtoa_r+0x75e>
 8012f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f5a:	e76b      	b.n	8012e34 <_dtoa_r+0x7b4>
 8012f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	dc19      	bgt.n	8012f96 <_dtoa_r+0x916>
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	b9bb      	cbnz	r3, 8012f96 <_dtoa_r+0x916>
 8012f66:	9b05      	ldr	r3, [sp, #20]
 8012f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f6c:	b99b      	cbnz	r3, 8012f96 <_dtoa_r+0x916>
 8012f6e:	9b05      	ldr	r3, [sp, #20]
 8012f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f74:	0d1b      	lsrs	r3, r3, #20
 8012f76:	051b      	lsls	r3, r3, #20
 8012f78:	b183      	cbz	r3, 8012f9c <_dtoa_r+0x91c>
 8012f7a:	f04f 0801 	mov.w	r8, #1
 8012f7e:	9b06      	ldr	r3, [sp, #24]
 8012f80:	3301      	adds	r3, #1
 8012f82:	9306      	str	r3, [sp, #24]
 8012f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f86:	3301      	adds	r3, #1
 8012f88:	9309      	str	r3, [sp, #36]	; 0x24
 8012f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f47f af6a 	bne.w	8012e66 <_dtoa_r+0x7e6>
 8012f92:	2001      	movs	r0, #1
 8012f94:	e76f      	b.n	8012e76 <_dtoa_r+0x7f6>
 8012f96:	f04f 0800 	mov.w	r8, #0
 8012f9a:	e7f6      	b.n	8012f8a <_dtoa_r+0x90a>
 8012f9c:	4698      	mov	r8, r3
 8012f9e:	e7f4      	b.n	8012f8a <_dtoa_r+0x90a>
 8012fa0:	f43f af7d 	beq.w	8012e9e <_dtoa_r+0x81e>
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	301c      	adds	r0, #28
 8012fa8:	e772      	b.n	8012e90 <_dtoa_r+0x810>
 8012faa:	9b08      	ldr	r3, [sp, #32]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	dc36      	bgt.n	801301e <_dtoa_r+0x99e>
 8012fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fb2:	2b02      	cmp	r3, #2
 8012fb4:	dd33      	ble.n	801301e <_dtoa_r+0x99e>
 8012fb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fba:	f1b9 0f00 	cmp.w	r9, #0
 8012fbe:	d10d      	bne.n	8012fdc <_dtoa_r+0x95c>
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	464b      	mov	r3, r9
 8012fc4:	2205      	movs	r2, #5
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	f000 f9d6 	bl	8013378 <__multadd>
 8012fcc:	4601      	mov	r1, r0
 8012fce:	4604      	mov	r4, r0
 8012fd0:	4658      	mov	r0, fp
 8012fd2:	f000 fbed 	bl	80137b0 <__mcmp>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f73f adb8 	bgt.w	8012b4c <_dtoa_r+0x4cc>
 8012fdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012fde:	9f03      	ldr	r7, [sp, #12]
 8012fe0:	ea6f 0a03 	mvn.w	sl, r3
 8012fe4:	f04f 0800 	mov.w	r8, #0
 8012fe8:	4621      	mov	r1, r4
 8012fea:	4628      	mov	r0, r5
 8012fec:	f000 f9a2 	bl	8013334 <_Bfree>
 8012ff0:	2e00      	cmp	r6, #0
 8012ff2:	f43f aea7 	beq.w	8012d44 <_dtoa_r+0x6c4>
 8012ff6:	f1b8 0f00 	cmp.w	r8, #0
 8012ffa:	d005      	beq.n	8013008 <_dtoa_r+0x988>
 8012ffc:	45b0      	cmp	r8, r6
 8012ffe:	d003      	beq.n	8013008 <_dtoa_r+0x988>
 8013000:	4641      	mov	r1, r8
 8013002:	4628      	mov	r0, r5
 8013004:	f000 f996 	bl	8013334 <_Bfree>
 8013008:	4631      	mov	r1, r6
 801300a:	4628      	mov	r0, r5
 801300c:	f000 f992 	bl	8013334 <_Bfree>
 8013010:	e698      	b.n	8012d44 <_dtoa_r+0x6c4>
 8013012:	2400      	movs	r4, #0
 8013014:	4626      	mov	r6, r4
 8013016:	e7e1      	b.n	8012fdc <_dtoa_r+0x95c>
 8013018:	46c2      	mov	sl, r8
 801301a:	4626      	mov	r6, r4
 801301c:	e596      	b.n	8012b4c <_dtoa_r+0x4cc>
 801301e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013024:	2b00      	cmp	r3, #0
 8013026:	f000 80fd 	beq.w	8013224 <_dtoa_r+0xba4>
 801302a:	2f00      	cmp	r7, #0
 801302c:	dd05      	ble.n	801303a <_dtoa_r+0x9ba>
 801302e:	4631      	mov	r1, r6
 8013030:	463a      	mov	r2, r7
 8013032:	4628      	mov	r0, r5
 8013034:	f000 fb4c 	bl	80136d0 <__lshift>
 8013038:	4606      	mov	r6, r0
 801303a:	f1b8 0f00 	cmp.w	r8, #0
 801303e:	d05c      	beq.n	80130fa <_dtoa_r+0xa7a>
 8013040:	4628      	mov	r0, r5
 8013042:	6871      	ldr	r1, [r6, #4]
 8013044:	f000 f936 	bl	80132b4 <_Balloc>
 8013048:	4607      	mov	r7, r0
 801304a:	b928      	cbnz	r0, 8013058 <_dtoa_r+0x9d8>
 801304c:	4602      	mov	r2, r0
 801304e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013052:	4b7f      	ldr	r3, [pc, #508]	; (8013250 <_dtoa_r+0xbd0>)
 8013054:	f7ff bb28 	b.w	80126a8 <_dtoa_r+0x28>
 8013058:	6932      	ldr	r2, [r6, #16]
 801305a:	f106 010c 	add.w	r1, r6, #12
 801305e:	3202      	adds	r2, #2
 8013060:	0092      	lsls	r2, r2, #2
 8013062:	300c      	adds	r0, #12
 8013064:	f000 f90c 	bl	8013280 <memcpy>
 8013068:	2201      	movs	r2, #1
 801306a:	4639      	mov	r1, r7
 801306c:	4628      	mov	r0, r5
 801306e:	f000 fb2f 	bl	80136d0 <__lshift>
 8013072:	46b0      	mov	r8, r6
 8013074:	4606      	mov	r6, r0
 8013076:	9b03      	ldr	r3, [sp, #12]
 8013078:	3301      	adds	r3, #1
 801307a:	9308      	str	r3, [sp, #32]
 801307c:	9b03      	ldr	r3, [sp, #12]
 801307e:	444b      	add	r3, r9
 8013080:	930a      	str	r3, [sp, #40]	; 0x28
 8013082:	9b04      	ldr	r3, [sp, #16]
 8013084:	f003 0301 	and.w	r3, r3, #1
 8013088:	9309      	str	r3, [sp, #36]	; 0x24
 801308a:	9b08      	ldr	r3, [sp, #32]
 801308c:	4621      	mov	r1, r4
 801308e:	3b01      	subs	r3, #1
 8013090:	4658      	mov	r0, fp
 8013092:	9304      	str	r3, [sp, #16]
 8013094:	f7ff fa68 	bl	8012568 <quorem>
 8013098:	4603      	mov	r3, r0
 801309a:	4641      	mov	r1, r8
 801309c:	3330      	adds	r3, #48	; 0x30
 801309e:	9006      	str	r0, [sp, #24]
 80130a0:	4658      	mov	r0, fp
 80130a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80130a4:	f000 fb84 	bl	80137b0 <__mcmp>
 80130a8:	4632      	mov	r2, r6
 80130aa:	4681      	mov	r9, r0
 80130ac:	4621      	mov	r1, r4
 80130ae:	4628      	mov	r0, r5
 80130b0:	f000 fb9a 	bl	80137e8 <__mdiff>
 80130b4:	68c2      	ldr	r2, [r0, #12]
 80130b6:	4607      	mov	r7, r0
 80130b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130ba:	bb02      	cbnz	r2, 80130fe <_dtoa_r+0xa7e>
 80130bc:	4601      	mov	r1, r0
 80130be:	4658      	mov	r0, fp
 80130c0:	f000 fb76 	bl	80137b0 <__mcmp>
 80130c4:	4602      	mov	r2, r0
 80130c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130c8:	4639      	mov	r1, r7
 80130ca:	4628      	mov	r0, r5
 80130cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80130d0:	f000 f930 	bl	8013334 <_Bfree>
 80130d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80130d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80130d8:	9f08      	ldr	r7, [sp, #32]
 80130da:	ea43 0102 	orr.w	r1, r3, r2
 80130de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130e0:	430b      	orrs	r3, r1
 80130e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130e4:	d10d      	bne.n	8013102 <_dtoa_r+0xa82>
 80130e6:	2b39      	cmp	r3, #57	; 0x39
 80130e8:	d029      	beq.n	801313e <_dtoa_r+0xabe>
 80130ea:	f1b9 0f00 	cmp.w	r9, #0
 80130ee:	dd01      	ble.n	80130f4 <_dtoa_r+0xa74>
 80130f0:	9b06      	ldr	r3, [sp, #24]
 80130f2:	3331      	adds	r3, #49	; 0x31
 80130f4:	9a04      	ldr	r2, [sp, #16]
 80130f6:	7013      	strb	r3, [r2, #0]
 80130f8:	e776      	b.n	8012fe8 <_dtoa_r+0x968>
 80130fa:	4630      	mov	r0, r6
 80130fc:	e7b9      	b.n	8013072 <_dtoa_r+0x9f2>
 80130fe:	2201      	movs	r2, #1
 8013100:	e7e2      	b.n	80130c8 <_dtoa_r+0xa48>
 8013102:	f1b9 0f00 	cmp.w	r9, #0
 8013106:	db06      	blt.n	8013116 <_dtoa_r+0xa96>
 8013108:	9922      	ldr	r1, [sp, #136]	; 0x88
 801310a:	ea41 0909 	orr.w	r9, r1, r9
 801310e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013110:	ea59 0101 	orrs.w	r1, r9, r1
 8013114:	d120      	bne.n	8013158 <_dtoa_r+0xad8>
 8013116:	2a00      	cmp	r2, #0
 8013118:	ddec      	ble.n	80130f4 <_dtoa_r+0xa74>
 801311a:	4659      	mov	r1, fp
 801311c:	2201      	movs	r2, #1
 801311e:	4628      	mov	r0, r5
 8013120:	9308      	str	r3, [sp, #32]
 8013122:	f000 fad5 	bl	80136d0 <__lshift>
 8013126:	4621      	mov	r1, r4
 8013128:	4683      	mov	fp, r0
 801312a:	f000 fb41 	bl	80137b0 <__mcmp>
 801312e:	2800      	cmp	r0, #0
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	dc02      	bgt.n	801313a <_dtoa_r+0xaba>
 8013134:	d1de      	bne.n	80130f4 <_dtoa_r+0xa74>
 8013136:	07da      	lsls	r2, r3, #31
 8013138:	d5dc      	bpl.n	80130f4 <_dtoa_r+0xa74>
 801313a:	2b39      	cmp	r3, #57	; 0x39
 801313c:	d1d8      	bne.n	80130f0 <_dtoa_r+0xa70>
 801313e:	2339      	movs	r3, #57	; 0x39
 8013140:	9a04      	ldr	r2, [sp, #16]
 8013142:	7013      	strb	r3, [r2, #0]
 8013144:	463b      	mov	r3, r7
 8013146:	461f      	mov	r7, r3
 8013148:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801314c:	3b01      	subs	r3, #1
 801314e:	2a39      	cmp	r2, #57	; 0x39
 8013150:	d050      	beq.n	80131f4 <_dtoa_r+0xb74>
 8013152:	3201      	adds	r2, #1
 8013154:	701a      	strb	r2, [r3, #0]
 8013156:	e747      	b.n	8012fe8 <_dtoa_r+0x968>
 8013158:	2a00      	cmp	r2, #0
 801315a:	dd03      	ble.n	8013164 <_dtoa_r+0xae4>
 801315c:	2b39      	cmp	r3, #57	; 0x39
 801315e:	d0ee      	beq.n	801313e <_dtoa_r+0xabe>
 8013160:	3301      	adds	r3, #1
 8013162:	e7c7      	b.n	80130f4 <_dtoa_r+0xa74>
 8013164:	9a08      	ldr	r2, [sp, #32]
 8013166:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013168:	f802 3c01 	strb.w	r3, [r2, #-1]
 801316c:	428a      	cmp	r2, r1
 801316e:	d02a      	beq.n	80131c6 <_dtoa_r+0xb46>
 8013170:	4659      	mov	r1, fp
 8013172:	2300      	movs	r3, #0
 8013174:	220a      	movs	r2, #10
 8013176:	4628      	mov	r0, r5
 8013178:	f000 f8fe 	bl	8013378 <__multadd>
 801317c:	45b0      	cmp	r8, r6
 801317e:	4683      	mov	fp, r0
 8013180:	f04f 0300 	mov.w	r3, #0
 8013184:	f04f 020a 	mov.w	r2, #10
 8013188:	4641      	mov	r1, r8
 801318a:	4628      	mov	r0, r5
 801318c:	d107      	bne.n	801319e <_dtoa_r+0xb1e>
 801318e:	f000 f8f3 	bl	8013378 <__multadd>
 8013192:	4680      	mov	r8, r0
 8013194:	4606      	mov	r6, r0
 8013196:	9b08      	ldr	r3, [sp, #32]
 8013198:	3301      	adds	r3, #1
 801319a:	9308      	str	r3, [sp, #32]
 801319c:	e775      	b.n	801308a <_dtoa_r+0xa0a>
 801319e:	f000 f8eb 	bl	8013378 <__multadd>
 80131a2:	4631      	mov	r1, r6
 80131a4:	4680      	mov	r8, r0
 80131a6:	2300      	movs	r3, #0
 80131a8:	220a      	movs	r2, #10
 80131aa:	4628      	mov	r0, r5
 80131ac:	f000 f8e4 	bl	8013378 <__multadd>
 80131b0:	4606      	mov	r6, r0
 80131b2:	e7f0      	b.n	8013196 <_dtoa_r+0xb16>
 80131b4:	f1b9 0f00 	cmp.w	r9, #0
 80131b8:	bfcc      	ite	gt
 80131ba:	464f      	movgt	r7, r9
 80131bc:	2701      	movle	r7, #1
 80131be:	f04f 0800 	mov.w	r8, #0
 80131c2:	9a03      	ldr	r2, [sp, #12]
 80131c4:	4417      	add	r7, r2
 80131c6:	4659      	mov	r1, fp
 80131c8:	2201      	movs	r2, #1
 80131ca:	4628      	mov	r0, r5
 80131cc:	9308      	str	r3, [sp, #32]
 80131ce:	f000 fa7f 	bl	80136d0 <__lshift>
 80131d2:	4621      	mov	r1, r4
 80131d4:	4683      	mov	fp, r0
 80131d6:	f000 faeb 	bl	80137b0 <__mcmp>
 80131da:	2800      	cmp	r0, #0
 80131dc:	dcb2      	bgt.n	8013144 <_dtoa_r+0xac4>
 80131de:	d102      	bne.n	80131e6 <_dtoa_r+0xb66>
 80131e0:	9b08      	ldr	r3, [sp, #32]
 80131e2:	07db      	lsls	r3, r3, #31
 80131e4:	d4ae      	bmi.n	8013144 <_dtoa_r+0xac4>
 80131e6:	463b      	mov	r3, r7
 80131e8:	461f      	mov	r7, r3
 80131ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80131ee:	2a30      	cmp	r2, #48	; 0x30
 80131f0:	d0fa      	beq.n	80131e8 <_dtoa_r+0xb68>
 80131f2:	e6f9      	b.n	8012fe8 <_dtoa_r+0x968>
 80131f4:	9a03      	ldr	r2, [sp, #12]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d1a5      	bne.n	8013146 <_dtoa_r+0xac6>
 80131fa:	2331      	movs	r3, #49	; 0x31
 80131fc:	f10a 0a01 	add.w	sl, sl, #1
 8013200:	e779      	b.n	80130f6 <_dtoa_r+0xa76>
 8013202:	4b14      	ldr	r3, [pc, #80]	; (8013254 <_dtoa_r+0xbd4>)
 8013204:	f7ff baa8 	b.w	8012758 <_dtoa_r+0xd8>
 8013208:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801320a:	2b00      	cmp	r3, #0
 801320c:	f47f aa81 	bne.w	8012712 <_dtoa_r+0x92>
 8013210:	4b11      	ldr	r3, [pc, #68]	; (8013258 <_dtoa_r+0xbd8>)
 8013212:	f7ff baa1 	b.w	8012758 <_dtoa_r+0xd8>
 8013216:	f1b9 0f00 	cmp.w	r9, #0
 801321a:	dc03      	bgt.n	8013224 <_dtoa_r+0xba4>
 801321c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801321e:	2b02      	cmp	r3, #2
 8013220:	f73f aecb 	bgt.w	8012fba <_dtoa_r+0x93a>
 8013224:	9f03      	ldr	r7, [sp, #12]
 8013226:	4621      	mov	r1, r4
 8013228:	4658      	mov	r0, fp
 801322a:	f7ff f99d 	bl	8012568 <quorem>
 801322e:	9a03      	ldr	r2, [sp, #12]
 8013230:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013234:	f807 3b01 	strb.w	r3, [r7], #1
 8013238:	1aba      	subs	r2, r7, r2
 801323a:	4591      	cmp	r9, r2
 801323c:	ddba      	ble.n	80131b4 <_dtoa_r+0xb34>
 801323e:	4659      	mov	r1, fp
 8013240:	2300      	movs	r3, #0
 8013242:	220a      	movs	r2, #10
 8013244:	4628      	mov	r0, r5
 8013246:	f000 f897 	bl	8013378 <__multadd>
 801324a:	4683      	mov	fp, r0
 801324c:	e7eb      	b.n	8013226 <_dtoa_r+0xba6>
 801324e:	bf00      	nop
 8013250:	0802df8f 	.word	0x0802df8f
 8013254:	0802deec 	.word	0x0802deec
 8013258:	0802df10 	.word	0x0802df10

0801325c <_localeconv_r>:
 801325c:	4800      	ldr	r0, [pc, #0]	; (8013260 <_localeconv_r+0x4>)
 801325e:	4770      	bx	lr
 8013260:	200002bc 	.word	0x200002bc

08013264 <memchr>:
 8013264:	4603      	mov	r3, r0
 8013266:	b510      	push	{r4, lr}
 8013268:	b2c9      	uxtb	r1, r1
 801326a:	4402      	add	r2, r0
 801326c:	4293      	cmp	r3, r2
 801326e:	4618      	mov	r0, r3
 8013270:	d101      	bne.n	8013276 <memchr+0x12>
 8013272:	2000      	movs	r0, #0
 8013274:	e003      	b.n	801327e <memchr+0x1a>
 8013276:	7804      	ldrb	r4, [r0, #0]
 8013278:	3301      	adds	r3, #1
 801327a:	428c      	cmp	r4, r1
 801327c:	d1f6      	bne.n	801326c <memchr+0x8>
 801327e:	bd10      	pop	{r4, pc}

08013280 <memcpy>:
 8013280:	440a      	add	r2, r1
 8013282:	4291      	cmp	r1, r2
 8013284:	f100 33ff 	add.w	r3, r0, #4294967295
 8013288:	d100      	bne.n	801328c <memcpy+0xc>
 801328a:	4770      	bx	lr
 801328c:	b510      	push	{r4, lr}
 801328e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013292:	4291      	cmp	r1, r2
 8013294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013298:	d1f9      	bne.n	801328e <memcpy+0xe>
 801329a:	bd10      	pop	{r4, pc}

0801329c <__malloc_lock>:
 801329c:	4801      	ldr	r0, [pc, #4]	; (80132a4 <__malloc_lock+0x8>)
 801329e:	f000 bd2c 	b.w	8013cfa <__retarget_lock_acquire_recursive>
 80132a2:	bf00      	nop
 80132a4:	2000166c 	.word	0x2000166c

080132a8 <__malloc_unlock>:
 80132a8:	4801      	ldr	r0, [pc, #4]	; (80132b0 <__malloc_unlock+0x8>)
 80132aa:	f000 bd27 	b.w	8013cfc <__retarget_lock_release_recursive>
 80132ae:	bf00      	nop
 80132b0:	2000166c 	.word	0x2000166c

080132b4 <_Balloc>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132b8:	4604      	mov	r4, r0
 80132ba:	460d      	mov	r5, r1
 80132bc:	b976      	cbnz	r6, 80132dc <_Balloc+0x28>
 80132be:	2010      	movs	r0, #16
 80132c0:	f7fe fbb4 	bl	8011a2c <malloc>
 80132c4:	4602      	mov	r2, r0
 80132c6:	6260      	str	r0, [r4, #36]	; 0x24
 80132c8:	b920      	cbnz	r0, 80132d4 <_Balloc+0x20>
 80132ca:	2166      	movs	r1, #102	; 0x66
 80132cc:	4b17      	ldr	r3, [pc, #92]	; (801332c <_Balloc+0x78>)
 80132ce:	4818      	ldr	r0, [pc, #96]	; (8013330 <_Balloc+0x7c>)
 80132d0:	f000 fce2 	bl	8013c98 <__assert_func>
 80132d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132d8:	6006      	str	r6, [r0, #0]
 80132da:	60c6      	str	r6, [r0, #12]
 80132dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132de:	68f3      	ldr	r3, [r6, #12]
 80132e0:	b183      	cbz	r3, 8013304 <_Balloc+0x50>
 80132e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132ea:	b9b8      	cbnz	r0, 801331c <_Balloc+0x68>
 80132ec:	2101      	movs	r1, #1
 80132ee:	fa01 f605 	lsl.w	r6, r1, r5
 80132f2:	1d72      	adds	r2, r6, #5
 80132f4:	4620      	mov	r0, r4
 80132f6:	0092      	lsls	r2, r2, #2
 80132f8:	f000 fb5e 	bl	80139b8 <_calloc_r>
 80132fc:	b160      	cbz	r0, 8013318 <_Balloc+0x64>
 80132fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013302:	e00e      	b.n	8013322 <_Balloc+0x6e>
 8013304:	2221      	movs	r2, #33	; 0x21
 8013306:	2104      	movs	r1, #4
 8013308:	4620      	mov	r0, r4
 801330a:	f000 fb55 	bl	80139b8 <_calloc_r>
 801330e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013310:	60f0      	str	r0, [r6, #12]
 8013312:	68db      	ldr	r3, [r3, #12]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d1e4      	bne.n	80132e2 <_Balloc+0x2e>
 8013318:	2000      	movs	r0, #0
 801331a:	bd70      	pop	{r4, r5, r6, pc}
 801331c:	6802      	ldr	r2, [r0, #0]
 801331e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013322:	2300      	movs	r3, #0
 8013324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013328:	e7f7      	b.n	801331a <_Balloc+0x66>
 801332a:	bf00      	nop
 801332c:	0802df1d 	.word	0x0802df1d
 8013330:	0802dfa0 	.word	0x0802dfa0

08013334 <_Bfree>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013338:	4605      	mov	r5, r0
 801333a:	460c      	mov	r4, r1
 801333c:	b976      	cbnz	r6, 801335c <_Bfree+0x28>
 801333e:	2010      	movs	r0, #16
 8013340:	f7fe fb74 	bl	8011a2c <malloc>
 8013344:	4602      	mov	r2, r0
 8013346:	6268      	str	r0, [r5, #36]	; 0x24
 8013348:	b920      	cbnz	r0, 8013354 <_Bfree+0x20>
 801334a:	218a      	movs	r1, #138	; 0x8a
 801334c:	4b08      	ldr	r3, [pc, #32]	; (8013370 <_Bfree+0x3c>)
 801334e:	4809      	ldr	r0, [pc, #36]	; (8013374 <_Bfree+0x40>)
 8013350:	f000 fca2 	bl	8013c98 <__assert_func>
 8013354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013358:	6006      	str	r6, [r0, #0]
 801335a:	60c6      	str	r6, [r0, #12]
 801335c:	b13c      	cbz	r4, 801336e <_Bfree+0x3a>
 801335e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013360:	6862      	ldr	r2, [r4, #4]
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013368:	6021      	str	r1, [r4, #0]
 801336a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801336e:	bd70      	pop	{r4, r5, r6, pc}
 8013370:	0802df1d 	.word	0x0802df1d
 8013374:	0802dfa0 	.word	0x0802dfa0

08013378 <__multadd>:
 8013378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801337c:	4607      	mov	r7, r0
 801337e:	460c      	mov	r4, r1
 8013380:	461e      	mov	r6, r3
 8013382:	2000      	movs	r0, #0
 8013384:	690d      	ldr	r5, [r1, #16]
 8013386:	f101 0c14 	add.w	ip, r1, #20
 801338a:	f8dc 3000 	ldr.w	r3, [ip]
 801338e:	3001      	adds	r0, #1
 8013390:	b299      	uxth	r1, r3
 8013392:	fb02 6101 	mla	r1, r2, r1, r6
 8013396:	0c1e      	lsrs	r6, r3, #16
 8013398:	0c0b      	lsrs	r3, r1, #16
 801339a:	fb02 3306 	mla	r3, r2, r6, r3
 801339e:	b289      	uxth	r1, r1
 80133a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80133a4:	4285      	cmp	r5, r0
 80133a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80133aa:	f84c 1b04 	str.w	r1, [ip], #4
 80133ae:	dcec      	bgt.n	801338a <__multadd+0x12>
 80133b0:	b30e      	cbz	r6, 80133f6 <__multadd+0x7e>
 80133b2:	68a3      	ldr	r3, [r4, #8]
 80133b4:	42ab      	cmp	r3, r5
 80133b6:	dc19      	bgt.n	80133ec <__multadd+0x74>
 80133b8:	6861      	ldr	r1, [r4, #4]
 80133ba:	4638      	mov	r0, r7
 80133bc:	3101      	adds	r1, #1
 80133be:	f7ff ff79 	bl	80132b4 <_Balloc>
 80133c2:	4680      	mov	r8, r0
 80133c4:	b928      	cbnz	r0, 80133d2 <__multadd+0x5a>
 80133c6:	4602      	mov	r2, r0
 80133c8:	21b5      	movs	r1, #181	; 0xb5
 80133ca:	4b0c      	ldr	r3, [pc, #48]	; (80133fc <__multadd+0x84>)
 80133cc:	480c      	ldr	r0, [pc, #48]	; (8013400 <__multadd+0x88>)
 80133ce:	f000 fc63 	bl	8013c98 <__assert_func>
 80133d2:	6922      	ldr	r2, [r4, #16]
 80133d4:	f104 010c 	add.w	r1, r4, #12
 80133d8:	3202      	adds	r2, #2
 80133da:	0092      	lsls	r2, r2, #2
 80133dc:	300c      	adds	r0, #12
 80133de:	f7ff ff4f 	bl	8013280 <memcpy>
 80133e2:	4621      	mov	r1, r4
 80133e4:	4638      	mov	r0, r7
 80133e6:	f7ff ffa5 	bl	8013334 <_Bfree>
 80133ea:	4644      	mov	r4, r8
 80133ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133f0:	3501      	adds	r5, #1
 80133f2:	615e      	str	r6, [r3, #20]
 80133f4:	6125      	str	r5, [r4, #16]
 80133f6:	4620      	mov	r0, r4
 80133f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133fc:	0802df8f 	.word	0x0802df8f
 8013400:	0802dfa0 	.word	0x0802dfa0

08013404 <__hi0bits>:
 8013404:	0c02      	lsrs	r2, r0, #16
 8013406:	0412      	lsls	r2, r2, #16
 8013408:	4603      	mov	r3, r0
 801340a:	b9ca      	cbnz	r2, 8013440 <__hi0bits+0x3c>
 801340c:	0403      	lsls	r3, r0, #16
 801340e:	2010      	movs	r0, #16
 8013410:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013414:	bf04      	itt	eq
 8013416:	021b      	lsleq	r3, r3, #8
 8013418:	3008      	addeq	r0, #8
 801341a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801341e:	bf04      	itt	eq
 8013420:	011b      	lsleq	r3, r3, #4
 8013422:	3004      	addeq	r0, #4
 8013424:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013428:	bf04      	itt	eq
 801342a:	009b      	lsleq	r3, r3, #2
 801342c:	3002      	addeq	r0, #2
 801342e:	2b00      	cmp	r3, #0
 8013430:	db05      	blt.n	801343e <__hi0bits+0x3a>
 8013432:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013436:	f100 0001 	add.w	r0, r0, #1
 801343a:	bf08      	it	eq
 801343c:	2020      	moveq	r0, #32
 801343e:	4770      	bx	lr
 8013440:	2000      	movs	r0, #0
 8013442:	e7e5      	b.n	8013410 <__hi0bits+0xc>

08013444 <__lo0bits>:
 8013444:	6803      	ldr	r3, [r0, #0]
 8013446:	4602      	mov	r2, r0
 8013448:	f013 0007 	ands.w	r0, r3, #7
 801344c:	d00b      	beq.n	8013466 <__lo0bits+0x22>
 801344e:	07d9      	lsls	r1, r3, #31
 8013450:	d421      	bmi.n	8013496 <__lo0bits+0x52>
 8013452:	0798      	lsls	r0, r3, #30
 8013454:	bf49      	itett	mi
 8013456:	085b      	lsrmi	r3, r3, #1
 8013458:	089b      	lsrpl	r3, r3, #2
 801345a:	2001      	movmi	r0, #1
 801345c:	6013      	strmi	r3, [r2, #0]
 801345e:	bf5c      	itt	pl
 8013460:	2002      	movpl	r0, #2
 8013462:	6013      	strpl	r3, [r2, #0]
 8013464:	4770      	bx	lr
 8013466:	b299      	uxth	r1, r3
 8013468:	b909      	cbnz	r1, 801346e <__lo0bits+0x2a>
 801346a:	2010      	movs	r0, #16
 801346c:	0c1b      	lsrs	r3, r3, #16
 801346e:	b2d9      	uxtb	r1, r3
 8013470:	b909      	cbnz	r1, 8013476 <__lo0bits+0x32>
 8013472:	3008      	adds	r0, #8
 8013474:	0a1b      	lsrs	r3, r3, #8
 8013476:	0719      	lsls	r1, r3, #28
 8013478:	bf04      	itt	eq
 801347a:	091b      	lsreq	r3, r3, #4
 801347c:	3004      	addeq	r0, #4
 801347e:	0799      	lsls	r1, r3, #30
 8013480:	bf04      	itt	eq
 8013482:	089b      	lsreq	r3, r3, #2
 8013484:	3002      	addeq	r0, #2
 8013486:	07d9      	lsls	r1, r3, #31
 8013488:	d403      	bmi.n	8013492 <__lo0bits+0x4e>
 801348a:	085b      	lsrs	r3, r3, #1
 801348c:	f100 0001 	add.w	r0, r0, #1
 8013490:	d003      	beq.n	801349a <__lo0bits+0x56>
 8013492:	6013      	str	r3, [r2, #0]
 8013494:	4770      	bx	lr
 8013496:	2000      	movs	r0, #0
 8013498:	4770      	bx	lr
 801349a:	2020      	movs	r0, #32
 801349c:	4770      	bx	lr
	...

080134a0 <__i2b>:
 80134a0:	b510      	push	{r4, lr}
 80134a2:	460c      	mov	r4, r1
 80134a4:	2101      	movs	r1, #1
 80134a6:	f7ff ff05 	bl	80132b4 <_Balloc>
 80134aa:	4602      	mov	r2, r0
 80134ac:	b928      	cbnz	r0, 80134ba <__i2b+0x1a>
 80134ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80134b2:	4b04      	ldr	r3, [pc, #16]	; (80134c4 <__i2b+0x24>)
 80134b4:	4804      	ldr	r0, [pc, #16]	; (80134c8 <__i2b+0x28>)
 80134b6:	f000 fbef 	bl	8013c98 <__assert_func>
 80134ba:	2301      	movs	r3, #1
 80134bc:	6144      	str	r4, [r0, #20]
 80134be:	6103      	str	r3, [r0, #16]
 80134c0:	bd10      	pop	{r4, pc}
 80134c2:	bf00      	nop
 80134c4:	0802df8f 	.word	0x0802df8f
 80134c8:	0802dfa0 	.word	0x0802dfa0

080134cc <__multiply>:
 80134cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	4691      	mov	r9, r2
 80134d2:	690a      	ldr	r2, [r1, #16]
 80134d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134d8:	460c      	mov	r4, r1
 80134da:	429a      	cmp	r2, r3
 80134dc:	bfbe      	ittt	lt
 80134de:	460b      	movlt	r3, r1
 80134e0:	464c      	movlt	r4, r9
 80134e2:	4699      	movlt	r9, r3
 80134e4:	6927      	ldr	r7, [r4, #16]
 80134e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80134ea:	68a3      	ldr	r3, [r4, #8]
 80134ec:	6861      	ldr	r1, [r4, #4]
 80134ee:	eb07 060a 	add.w	r6, r7, sl
 80134f2:	42b3      	cmp	r3, r6
 80134f4:	b085      	sub	sp, #20
 80134f6:	bfb8      	it	lt
 80134f8:	3101      	addlt	r1, #1
 80134fa:	f7ff fedb 	bl	80132b4 <_Balloc>
 80134fe:	b930      	cbnz	r0, 801350e <__multiply+0x42>
 8013500:	4602      	mov	r2, r0
 8013502:	f240 115d 	movw	r1, #349	; 0x15d
 8013506:	4b43      	ldr	r3, [pc, #268]	; (8013614 <__multiply+0x148>)
 8013508:	4843      	ldr	r0, [pc, #268]	; (8013618 <__multiply+0x14c>)
 801350a:	f000 fbc5 	bl	8013c98 <__assert_func>
 801350e:	f100 0514 	add.w	r5, r0, #20
 8013512:	462b      	mov	r3, r5
 8013514:	2200      	movs	r2, #0
 8013516:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801351a:	4543      	cmp	r3, r8
 801351c:	d321      	bcc.n	8013562 <__multiply+0x96>
 801351e:	f104 0314 	add.w	r3, r4, #20
 8013522:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013526:	f109 0314 	add.w	r3, r9, #20
 801352a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801352e:	9202      	str	r2, [sp, #8]
 8013530:	1b3a      	subs	r2, r7, r4
 8013532:	3a15      	subs	r2, #21
 8013534:	f022 0203 	bic.w	r2, r2, #3
 8013538:	3204      	adds	r2, #4
 801353a:	f104 0115 	add.w	r1, r4, #21
 801353e:	428f      	cmp	r7, r1
 8013540:	bf38      	it	cc
 8013542:	2204      	movcc	r2, #4
 8013544:	9201      	str	r2, [sp, #4]
 8013546:	9a02      	ldr	r2, [sp, #8]
 8013548:	9303      	str	r3, [sp, #12]
 801354a:	429a      	cmp	r2, r3
 801354c:	d80c      	bhi.n	8013568 <__multiply+0x9c>
 801354e:	2e00      	cmp	r6, #0
 8013550:	dd03      	ble.n	801355a <__multiply+0x8e>
 8013552:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013556:	2b00      	cmp	r3, #0
 8013558:	d059      	beq.n	801360e <__multiply+0x142>
 801355a:	6106      	str	r6, [r0, #16]
 801355c:	b005      	add	sp, #20
 801355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013562:	f843 2b04 	str.w	r2, [r3], #4
 8013566:	e7d8      	b.n	801351a <__multiply+0x4e>
 8013568:	f8b3 a000 	ldrh.w	sl, [r3]
 801356c:	f1ba 0f00 	cmp.w	sl, #0
 8013570:	d023      	beq.n	80135ba <__multiply+0xee>
 8013572:	46a9      	mov	r9, r5
 8013574:	f04f 0c00 	mov.w	ip, #0
 8013578:	f104 0e14 	add.w	lr, r4, #20
 801357c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013580:	f8d9 1000 	ldr.w	r1, [r9]
 8013584:	fa1f fb82 	uxth.w	fp, r2
 8013588:	b289      	uxth	r1, r1
 801358a:	fb0a 110b 	mla	r1, sl, fp, r1
 801358e:	4461      	add	r1, ip
 8013590:	f8d9 c000 	ldr.w	ip, [r9]
 8013594:	0c12      	lsrs	r2, r2, #16
 8013596:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801359a:	fb0a c202 	mla	r2, sl, r2, ip
 801359e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80135a2:	b289      	uxth	r1, r1
 80135a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80135a8:	4577      	cmp	r7, lr
 80135aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80135ae:	f849 1b04 	str.w	r1, [r9], #4
 80135b2:	d8e3      	bhi.n	801357c <__multiply+0xb0>
 80135b4:	9a01      	ldr	r2, [sp, #4]
 80135b6:	f845 c002 	str.w	ip, [r5, r2]
 80135ba:	9a03      	ldr	r2, [sp, #12]
 80135bc:	3304      	adds	r3, #4
 80135be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80135c2:	f1b9 0f00 	cmp.w	r9, #0
 80135c6:	d020      	beq.n	801360a <__multiply+0x13e>
 80135c8:	46ae      	mov	lr, r5
 80135ca:	f04f 0a00 	mov.w	sl, #0
 80135ce:	6829      	ldr	r1, [r5, #0]
 80135d0:	f104 0c14 	add.w	ip, r4, #20
 80135d4:	f8bc b000 	ldrh.w	fp, [ip]
 80135d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80135dc:	b289      	uxth	r1, r1
 80135de:	fb09 220b 	mla	r2, r9, fp, r2
 80135e2:	4492      	add	sl, r2
 80135e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80135e8:	f84e 1b04 	str.w	r1, [lr], #4
 80135ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80135f0:	f8be 1000 	ldrh.w	r1, [lr]
 80135f4:	0c12      	lsrs	r2, r2, #16
 80135f6:	fb09 1102 	mla	r1, r9, r2, r1
 80135fa:	4567      	cmp	r7, ip
 80135fc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013600:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013604:	d8e6      	bhi.n	80135d4 <__multiply+0x108>
 8013606:	9a01      	ldr	r2, [sp, #4]
 8013608:	50a9      	str	r1, [r5, r2]
 801360a:	3504      	adds	r5, #4
 801360c:	e79b      	b.n	8013546 <__multiply+0x7a>
 801360e:	3e01      	subs	r6, #1
 8013610:	e79d      	b.n	801354e <__multiply+0x82>
 8013612:	bf00      	nop
 8013614:	0802df8f 	.word	0x0802df8f
 8013618:	0802dfa0 	.word	0x0802dfa0

0801361c <__pow5mult>:
 801361c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013620:	4615      	mov	r5, r2
 8013622:	f012 0203 	ands.w	r2, r2, #3
 8013626:	4606      	mov	r6, r0
 8013628:	460f      	mov	r7, r1
 801362a:	d007      	beq.n	801363c <__pow5mult+0x20>
 801362c:	4c25      	ldr	r4, [pc, #148]	; (80136c4 <__pow5mult+0xa8>)
 801362e:	3a01      	subs	r2, #1
 8013630:	2300      	movs	r3, #0
 8013632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013636:	f7ff fe9f 	bl	8013378 <__multadd>
 801363a:	4607      	mov	r7, r0
 801363c:	10ad      	asrs	r5, r5, #2
 801363e:	d03d      	beq.n	80136bc <__pow5mult+0xa0>
 8013640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013642:	b97c      	cbnz	r4, 8013664 <__pow5mult+0x48>
 8013644:	2010      	movs	r0, #16
 8013646:	f7fe f9f1 	bl	8011a2c <malloc>
 801364a:	4602      	mov	r2, r0
 801364c:	6270      	str	r0, [r6, #36]	; 0x24
 801364e:	b928      	cbnz	r0, 801365c <__pow5mult+0x40>
 8013650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013654:	4b1c      	ldr	r3, [pc, #112]	; (80136c8 <__pow5mult+0xac>)
 8013656:	481d      	ldr	r0, [pc, #116]	; (80136cc <__pow5mult+0xb0>)
 8013658:	f000 fb1e 	bl	8013c98 <__assert_func>
 801365c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013660:	6004      	str	r4, [r0, #0]
 8013662:	60c4      	str	r4, [r0, #12]
 8013664:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801366c:	b94c      	cbnz	r4, 8013682 <__pow5mult+0x66>
 801366e:	f240 2171 	movw	r1, #625	; 0x271
 8013672:	4630      	mov	r0, r6
 8013674:	f7ff ff14 	bl	80134a0 <__i2b>
 8013678:	2300      	movs	r3, #0
 801367a:	4604      	mov	r4, r0
 801367c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013680:	6003      	str	r3, [r0, #0]
 8013682:	f04f 0900 	mov.w	r9, #0
 8013686:	07eb      	lsls	r3, r5, #31
 8013688:	d50a      	bpl.n	80136a0 <__pow5mult+0x84>
 801368a:	4639      	mov	r1, r7
 801368c:	4622      	mov	r2, r4
 801368e:	4630      	mov	r0, r6
 8013690:	f7ff ff1c 	bl	80134cc <__multiply>
 8013694:	4680      	mov	r8, r0
 8013696:	4639      	mov	r1, r7
 8013698:	4630      	mov	r0, r6
 801369a:	f7ff fe4b 	bl	8013334 <_Bfree>
 801369e:	4647      	mov	r7, r8
 80136a0:	106d      	asrs	r5, r5, #1
 80136a2:	d00b      	beq.n	80136bc <__pow5mult+0xa0>
 80136a4:	6820      	ldr	r0, [r4, #0]
 80136a6:	b938      	cbnz	r0, 80136b8 <__pow5mult+0x9c>
 80136a8:	4622      	mov	r2, r4
 80136aa:	4621      	mov	r1, r4
 80136ac:	4630      	mov	r0, r6
 80136ae:	f7ff ff0d 	bl	80134cc <__multiply>
 80136b2:	6020      	str	r0, [r4, #0]
 80136b4:	f8c0 9000 	str.w	r9, [r0]
 80136b8:	4604      	mov	r4, r0
 80136ba:	e7e4      	b.n	8013686 <__pow5mult+0x6a>
 80136bc:	4638      	mov	r0, r7
 80136be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136c2:	bf00      	nop
 80136c4:	0802e0f0 	.word	0x0802e0f0
 80136c8:	0802df1d 	.word	0x0802df1d
 80136cc:	0802dfa0 	.word	0x0802dfa0

080136d0 <__lshift>:
 80136d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136d4:	460c      	mov	r4, r1
 80136d6:	4607      	mov	r7, r0
 80136d8:	4691      	mov	r9, r2
 80136da:	6923      	ldr	r3, [r4, #16]
 80136dc:	6849      	ldr	r1, [r1, #4]
 80136de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80136e2:	68a3      	ldr	r3, [r4, #8]
 80136e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136e8:	f108 0601 	add.w	r6, r8, #1
 80136ec:	42b3      	cmp	r3, r6
 80136ee:	db0b      	blt.n	8013708 <__lshift+0x38>
 80136f0:	4638      	mov	r0, r7
 80136f2:	f7ff fddf 	bl	80132b4 <_Balloc>
 80136f6:	4605      	mov	r5, r0
 80136f8:	b948      	cbnz	r0, 801370e <__lshift+0x3e>
 80136fa:	4602      	mov	r2, r0
 80136fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013700:	4b29      	ldr	r3, [pc, #164]	; (80137a8 <__lshift+0xd8>)
 8013702:	482a      	ldr	r0, [pc, #168]	; (80137ac <__lshift+0xdc>)
 8013704:	f000 fac8 	bl	8013c98 <__assert_func>
 8013708:	3101      	adds	r1, #1
 801370a:	005b      	lsls	r3, r3, #1
 801370c:	e7ee      	b.n	80136ec <__lshift+0x1c>
 801370e:	2300      	movs	r3, #0
 8013710:	f100 0114 	add.w	r1, r0, #20
 8013714:	f100 0210 	add.w	r2, r0, #16
 8013718:	4618      	mov	r0, r3
 801371a:	4553      	cmp	r3, sl
 801371c:	db37      	blt.n	801378e <__lshift+0xbe>
 801371e:	6920      	ldr	r0, [r4, #16]
 8013720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013724:	f104 0314 	add.w	r3, r4, #20
 8013728:	f019 091f 	ands.w	r9, r9, #31
 801372c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013730:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013734:	d02f      	beq.n	8013796 <__lshift+0xc6>
 8013736:	468a      	mov	sl, r1
 8013738:	f04f 0c00 	mov.w	ip, #0
 801373c:	f1c9 0e20 	rsb	lr, r9, #32
 8013740:	681a      	ldr	r2, [r3, #0]
 8013742:	fa02 f209 	lsl.w	r2, r2, r9
 8013746:	ea42 020c 	orr.w	r2, r2, ip
 801374a:	f84a 2b04 	str.w	r2, [sl], #4
 801374e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013752:	4298      	cmp	r0, r3
 8013754:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013758:	d8f2      	bhi.n	8013740 <__lshift+0x70>
 801375a:	1b03      	subs	r3, r0, r4
 801375c:	3b15      	subs	r3, #21
 801375e:	f023 0303 	bic.w	r3, r3, #3
 8013762:	3304      	adds	r3, #4
 8013764:	f104 0215 	add.w	r2, r4, #21
 8013768:	4290      	cmp	r0, r2
 801376a:	bf38      	it	cc
 801376c:	2304      	movcc	r3, #4
 801376e:	f841 c003 	str.w	ip, [r1, r3]
 8013772:	f1bc 0f00 	cmp.w	ip, #0
 8013776:	d001      	beq.n	801377c <__lshift+0xac>
 8013778:	f108 0602 	add.w	r6, r8, #2
 801377c:	3e01      	subs	r6, #1
 801377e:	4638      	mov	r0, r7
 8013780:	4621      	mov	r1, r4
 8013782:	612e      	str	r6, [r5, #16]
 8013784:	f7ff fdd6 	bl	8013334 <_Bfree>
 8013788:	4628      	mov	r0, r5
 801378a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801378e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013792:	3301      	adds	r3, #1
 8013794:	e7c1      	b.n	801371a <__lshift+0x4a>
 8013796:	3904      	subs	r1, #4
 8013798:	f853 2b04 	ldr.w	r2, [r3], #4
 801379c:	4298      	cmp	r0, r3
 801379e:	f841 2f04 	str.w	r2, [r1, #4]!
 80137a2:	d8f9      	bhi.n	8013798 <__lshift+0xc8>
 80137a4:	e7ea      	b.n	801377c <__lshift+0xac>
 80137a6:	bf00      	nop
 80137a8:	0802df8f 	.word	0x0802df8f
 80137ac:	0802dfa0 	.word	0x0802dfa0

080137b0 <__mcmp>:
 80137b0:	4603      	mov	r3, r0
 80137b2:	690a      	ldr	r2, [r1, #16]
 80137b4:	6900      	ldr	r0, [r0, #16]
 80137b6:	b530      	push	{r4, r5, lr}
 80137b8:	1a80      	subs	r0, r0, r2
 80137ba:	d10d      	bne.n	80137d8 <__mcmp+0x28>
 80137bc:	3314      	adds	r3, #20
 80137be:	3114      	adds	r1, #20
 80137c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80137c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80137c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80137cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80137d0:	4295      	cmp	r5, r2
 80137d2:	d002      	beq.n	80137da <__mcmp+0x2a>
 80137d4:	d304      	bcc.n	80137e0 <__mcmp+0x30>
 80137d6:	2001      	movs	r0, #1
 80137d8:	bd30      	pop	{r4, r5, pc}
 80137da:	42a3      	cmp	r3, r4
 80137dc:	d3f4      	bcc.n	80137c8 <__mcmp+0x18>
 80137de:	e7fb      	b.n	80137d8 <__mcmp+0x28>
 80137e0:	f04f 30ff 	mov.w	r0, #4294967295
 80137e4:	e7f8      	b.n	80137d8 <__mcmp+0x28>
	...

080137e8 <__mdiff>:
 80137e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ec:	460d      	mov	r5, r1
 80137ee:	4607      	mov	r7, r0
 80137f0:	4611      	mov	r1, r2
 80137f2:	4628      	mov	r0, r5
 80137f4:	4614      	mov	r4, r2
 80137f6:	f7ff ffdb 	bl	80137b0 <__mcmp>
 80137fa:	1e06      	subs	r6, r0, #0
 80137fc:	d111      	bne.n	8013822 <__mdiff+0x3a>
 80137fe:	4631      	mov	r1, r6
 8013800:	4638      	mov	r0, r7
 8013802:	f7ff fd57 	bl	80132b4 <_Balloc>
 8013806:	4602      	mov	r2, r0
 8013808:	b928      	cbnz	r0, 8013816 <__mdiff+0x2e>
 801380a:	f240 2132 	movw	r1, #562	; 0x232
 801380e:	4b3a      	ldr	r3, [pc, #232]	; (80138f8 <__mdiff+0x110>)
 8013810:	483a      	ldr	r0, [pc, #232]	; (80138fc <__mdiff+0x114>)
 8013812:	f000 fa41 	bl	8013c98 <__assert_func>
 8013816:	2301      	movs	r3, #1
 8013818:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801381c:	4610      	mov	r0, r2
 801381e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	bfa4      	itt	ge
 8013824:	4623      	movge	r3, r4
 8013826:	462c      	movge	r4, r5
 8013828:	4638      	mov	r0, r7
 801382a:	6861      	ldr	r1, [r4, #4]
 801382c:	bfa6      	itte	ge
 801382e:	461d      	movge	r5, r3
 8013830:	2600      	movge	r6, #0
 8013832:	2601      	movlt	r6, #1
 8013834:	f7ff fd3e 	bl	80132b4 <_Balloc>
 8013838:	4602      	mov	r2, r0
 801383a:	b918      	cbnz	r0, 8013844 <__mdiff+0x5c>
 801383c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013840:	4b2d      	ldr	r3, [pc, #180]	; (80138f8 <__mdiff+0x110>)
 8013842:	e7e5      	b.n	8013810 <__mdiff+0x28>
 8013844:	f102 0814 	add.w	r8, r2, #20
 8013848:	46c2      	mov	sl, r8
 801384a:	f04f 0c00 	mov.w	ip, #0
 801384e:	6927      	ldr	r7, [r4, #16]
 8013850:	60c6      	str	r6, [r0, #12]
 8013852:	692e      	ldr	r6, [r5, #16]
 8013854:	f104 0014 	add.w	r0, r4, #20
 8013858:	f105 0914 	add.w	r9, r5, #20
 801385c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8013860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013864:	3410      	adds	r4, #16
 8013866:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801386a:	f859 3b04 	ldr.w	r3, [r9], #4
 801386e:	fa1f f18b 	uxth.w	r1, fp
 8013872:	448c      	add	ip, r1
 8013874:	b299      	uxth	r1, r3
 8013876:	0c1b      	lsrs	r3, r3, #16
 8013878:	ebac 0101 	sub.w	r1, ip, r1
 801387c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013880:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013884:	b289      	uxth	r1, r1
 8013886:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801388a:	454e      	cmp	r6, r9
 801388c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013890:	f84a 3b04 	str.w	r3, [sl], #4
 8013894:	d8e7      	bhi.n	8013866 <__mdiff+0x7e>
 8013896:	1b73      	subs	r3, r6, r5
 8013898:	3b15      	subs	r3, #21
 801389a:	f023 0303 	bic.w	r3, r3, #3
 801389e:	3515      	adds	r5, #21
 80138a0:	3304      	adds	r3, #4
 80138a2:	42ae      	cmp	r6, r5
 80138a4:	bf38      	it	cc
 80138a6:	2304      	movcc	r3, #4
 80138a8:	4418      	add	r0, r3
 80138aa:	4443      	add	r3, r8
 80138ac:	461e      	mov	r6, r3
 80138ae:	4605      	mov	r5, r0
 80138b0:	4575      	cmp	r5, lr
 80138b2:	d30e      	bcc.n	80138d2 <__mdiff+0xea>
 80138b4:	f10e 0103 	add.w	r1, lr, #3
 80138b8:	1a09      	subs	r1, r1, r0
 80138ba:	f021 0103 	bic.w	r1, r1, #3
 80138be:	3803      	subs	r0, #3
 80138c0:	4586      	cmp	lr, r0
 80138c2:	bf38      	it	cc
 80138c4:	2100      	movcc	r1, #0
 80138c6:	4419      	add	r1, r3
 80138c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80138cc:	b18b      	cbz	r3, 80138f2 <__mdiff+0x10a>
 80138ce:	6117      	str	r7, [r2, #16]
 80138d0:	e7a4      	b.n	801381c <__mdiff+0x34>
 80138d2:	f855 8b04 	ldr.w	r8, [r5], #4
 80138d6:	fa1f f188 	uxth.w	r1, r8
 80138da:	4461      	add	r1, ip
 80138dc:	140c      	asrs	r4, r1, #16
 80138de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80138e2:	b289      	uxth	r1, r1
 80138e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80138e8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80138ec:	f846 1b04 	str.w	r1, [r6], #4
 80138f0:	e7de      	b.n	80138b0 <__mdiff+0xc8>
 80138f2:	3f01      	subs	r7, #1
 80138f4:	e7e8      	b.n	80138c8 <__mdiff+0xe0>
 80138f6:	bf00      	nop
 80138f8:	0802df8f 	.word	0x0802df8f
 80138fc:	0802dfa0 	.word	0x0802dfa0

08013900 <__d2b>:
 8013900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013904:	2101      	movs	r1, #1
 8013906:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801390a:	4690      	mov	r8, r2
 801390c:	461d      	mov	r5, r3
 801390e:	f7ff fcd1 	bl	80132b4 <_Balloc>
 8013912:	4604      	mov	r4, r0
 8013914:	b930      	cbnz	r0, 8013924 <__d2b+0x24>
 8013916:	4602      	mov	r2, r0
 8013918:	f240 310a 	movw	r1, #778	; 0x30a
 801391c:	4b24      	ldr	r3, [pc, #144]	; (80139b0 <__d2b+0xb0>)
 801391e:	4825      	ldr	r0, [pc, #148]	; (80139b4 <__d2b+0xb4>)
 8013920:	f000 f9ba 	bl	8013c98 <__assert_func>
 8013924:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8013928:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801392c:	bb2d      	cbnz	r5, 801397a <__d2b+0x7a>
 801392e:	9301      	str	r3, [sp, #4]
 8013930:	f1b8 0300 	subs.w	r3, r8, #0
 8013934:	d026      	beq.n	8013984 <__d2b+0x84>
 8013936:	4668      	mov	r0, sp
 8013938:	9300      	str	r3, [sp, #0]
 801393a:	f7ff fd83 	bl	8013444 <__lo0bits>
 801393e:	9900      	ldr	r1, [sp, #0]
 8013940:	b1f0      	cbz	r0, 8013980 <__d2b+0x80>
 8013942:	9a01      	ldr	r2, [sp, #4]
 8013944:	f1c0 0320 	rsb	r3, r0, #32
 8013948:	fa02 f303 	lsl.w	r3, r2, r3
 801394c:	430b      	orrs	r3, r1
 801394e:	40c2      	lsrs	r2, r0
 8013950:	6163      	str	r3, [r4, #20]
 8013952:	9201      	str	r2, [sp, #4]
 8013954:	9b01      	ldr	r3, [sp, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	bf14      	ite	ne
 801395a:	2102      	movne	r1, #2
 801395c:	2101      	moveq	r1, #1
 801395e:	61a3      	str	r3, [r4, #24]
 8013960:	6121      	str	r1, [r4, #16]
 8013962:	b1c5      	cbz	r5, 8013996 <__d2b+0x96>
 8013964:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013968:	4405      	add	r5, r0
 801396a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801396e:	603d      	str	r5, [r7, #0]
 8013970:	6030      	str	r0, [r6, #0]
 8013972:	4620      	mov	r0, r4
 8013974:	b002      	add	sp, #8
 8013976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801397a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801397e:	e7d6      	b.n	801392e <__d2b+0x2e>
 8013980:	6161      	str	r1, [r4, #20]
 8013982:	e7e7      	b.n	8013954 <__d2b+0x54>
 8013984:	a801      	add	r0, sp, #4
 8013986:	f7ff fd5d 	bl	8013444 <__lo0bits>
 801398a:	2101      	movs	r1, #1
 801398c:	9b01      	ldr	r3, [sp, #4]
 801398e:	6121      	str	r1, [r4, #16]
 8013990:	6163      	str	r3, [r4, #20]
 8013992:	3020      	adds	r0, #32
 8013994:	e7e5      	b.n	8013962 <__d2b+0x62>
 8013996:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801399a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801399e:	6038      	str	r0, [r7, #0]
 80139a0:	6918      	ldr	r0, [r3, #16]
 80139a2:	f7ff fd2f 	bl	8013404 <__hi0bits>
 80139a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80139aa:	6031      	str	r1, [r6, #0]
 80139ac:	e7e1      	b.n	8013972 <__d2b+0x72>
 80139ae:	bf00      	nop
 80139b0:	0802df8f 	.word	0x0802df8f
 80139b4:	0802dfa0 	.word	0x0802dfa0

080139b8 <_calloc_r>:
 80139b8:	b570      	push	{r4, r5, r6, lr}
 80139ba:	fba1 5402 	umull	r5, r4, r1, r2
 80139be:	b934      	cbnz	r4, 80139ce <_calloc_r+0x16>
 80139c0:	4629      	mov	r1, r5
 80139c2:	f7fe f8b3 	bl	8011b2c <_malloc_r>
 80139c6:	4606      	mov	r6, r0
 80139c8:	b928      	cbnz	r0, 80139d6 <_calloc_r+0x1e>
 80139ca:	4630      	mov	r0, r6
 80139cc:	bd70      	pop	{r4, r5, r6, pc}
 80139ce:	220c      	movs	r2, #12
 80139d0:	2600      	movs	r6, #0
 80139d2:	6002      	str	r2, [r0, #0]
 80139d4:	e7f9      	b.n	80139ca <_calloc_r+0x12>
 80139d6:	462a      	mov	r2, r5
 80139d8:	4621      	mov	r1, r4
 80139da:	f7fe f837 	bl	8011a4c <memset>
 80139de:	e7f4      	b.n	80139ca <_calloc_r+0x12>

080139e0 <__ssputs_r>:
 80139e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139e4:	688e      	ldr	r6, [r1, #8]
 80139e6:	4682      	mov	sl, r0
 80139e8:	429e      	cmp	r6, r3
 80139ea:	460c      	mov	r4, r1
 80139ec:	4690      	mov	r8, r2
 80139ee:	461f      	mov	r7, r3
 80139f0:	d838      	bhi.n	8013a64 <__ssputs_r+0x84>
 80139f2:	898a      	ldrh	r2, [r1, #12]
 80139f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80139f8:	d032      	beq.n	8013a60 <__ssputs_r+0x80>
 80139fa:	6825      	ldr	r5, [r4, #0]
 80139fc:	6909      	ldr	r1, [r1, #16]
 80139fe:	3301      	adds	r3, #1
 8013a00:	eba5 0901 	sub.w	r9, r5, r1
 8013a04:	6965      	ldr	r5, [r4, #20]
 8013a06:	444b      	add	r3, r9
 8013a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a10:	106d      	asrs	r5, r5, #1
 8013a12:	429d      	cmp	r5, r3
 8013a14:	bf38      	it	cc
 8013a16:	461d      	movcc	r5, r3
 8013a18:	0553      	lsls	r3, r2, #21
 8013a1a:	d531      	bpl.n	8013a80 <__ssputs_r+0xa0>
 8013a1c:	4629      	mov	r1, r5
 8013a1e:	f7fe f885 	bl	8011b2c <_malloc_r>
 8013a22:	4606      	mov	r6, r0
 8013a24:	b950      	cbnz	r0, 8013a3c <__ssputs_r+0x5c>
 8013a26:	230c      	movs	r3, #12
 8013a28:	f04f 30ff 	mov.w	r0, #4294967295
 8013a2c:	f8ca 3000 	str.w	r3, [sl]
 8013a30:	89a3      	ldrh	r3, [r4, #12]
 8013a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a36:	81a3      	strh	r3, [r4, #12]
 8013a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a3c:	464a      	mov	r2, r9
 8013a3e:	6921      	ldr	r1, [r4, #16]
 8013a40:	f7ff fc1e 	bl	8013280 <memcpy>
 8013a44:	89a3      	ldrh	r3, [r4, #12]
 8013a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a4e:	81a3      	strh	r3, [r4, #12]
 8013a50:	6126      	str	r6, [r4, #16]
 8013a52:	444e      	add	r6, r9
 8013a54:	6026      	str	r6, [r4, #0]
 8013a56:	463e      	mov	r6, r7
 8013a58:	6165      	str	r5, [r4, #20]
 8013a5a:	eba5 0509 	sub.w	r5, r5, r9
 8013a5e:	60a5      	str	r5, [r4, #8]
 8013a60:	42be      	cmp	r6, r7
 8013a62:	d900      	bls.n	8013a66 <__ssputs_r+0x86>
 8013a64:	463e      	mov	r6, r7
 8013a66:	4632      	mov	r2, r6
 8013a68:	4641      	mov	r1, r8
 8013a6a:	6820      	ldr	r0, [r4, #0]
 8013a6c:	f000 f959 	bl	8013d22 <memmove>
 8013a70:	68a3      	ldr	r3, [r4, #8]
 8013a72:	2000      	movs	r0, #0
 8013a74:	1b9b      	subs	r3, r3, r6
 8013a76:	60a3      	str	r3, [r4, #8]
 8013a78:	6823      	ldr	r3, [r4, #0]
 8013a7a:	4433      	add	r3, r6
 8013a7c:	6023      	str	r3, [r4, #0]
 8013a7e:	e7db      	b.n	8013a38 <__ssputs_r+0x58>
 8013a80:	462a      	mov	r2, r5
 8013a82:	f000 f968 	bl	8013d56 <_realloc_r>
 8013a86:	4606      	mov	r6, r0
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d1e1      	bne.n	8013a50 <__ssputs_r+0x70>
 8013a8c:	4650      	mov	r0, sl
 8013a8e:	6921      	ldr	r1, [r4, #16]
 8013a90:	f7fd ffe4 	bl	8011a5c <_free_r>
 8013a94:	e7c7      	b.n	8013a26 <__ssputs_r+0x46>
	...

08013a98 <_svfiprintf_r>:
 8013a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9c:	4698      	mov	r8, r3
 8013a9e:	898b      	ldrh	r3, [r1, #12]
 8013aa0:	4607      	mov	r7, r0
 8013aa2:	061b      	lsls	r3, r3, #24
 8013aa4:	460d      	mov	r5, r1
 8013aa6:	4614      	mov	r4, r2
 8013aa8:	b09d      	sub	sp, #116	; 0x74
 8013aaa:	d50e      	bpl.n	8013aca <_svfiprintf_r+0x32>
 8013aac:	690b      	ldr	r3, [r1, #16]
 8013aae:	b963      	cbnz	r3, 8013aca <_svfiprintf_r+0x32>
 8013ab0:	2140      	movs	r1, #64	; 0x40
 8013ab2:	f7fe f83b 	bl	8011b2c <_malloc_r>
 8013ab6:	6028      	str	r0, [r5, #0]
 8013ab8:	6128      	str	r0, [r5, #16]
 8013aba:	b920      	cbnz	r0, 8013ac6 <_svfiprintf_r+0x2e>
 8013abc:	230c      	movs	r3, #12
 8013abe:	603b      	str	r3, [r7, #0]
 8013ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac4:	e0d1      	b.n	8013c6a <_svfiprintf_r+0x1d2>
 8013ac6:	2340      	movs	r3, #64	; 0x40
 8013ac8:	616b      	str	r3, [r5, #20]
 8013aca:	2300      	movs	r3, #0
 8013acc:	9309      	str	r3, [sp, #36]	; 0x24
 8013ace:	2320      	movs	r3, #32
 8013ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ad4:	2330      	movs	r3, #48	; 0x30
 8013ad6:	f04f 0901 	mov.w	r9, #1
 8013ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ade:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013c84 <_svfiprintf_r+0x1ec>
 8013ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ae6:	4623      	mov	r3, r4
 8013ae8:	469a      	mov	sl, r3
 8013aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013aee:	b10a      	cbz	r2, 8013af4 <_svfiprintf_r+0x5c>
 8013af0:	2a25      	cmp	r2, #37	; 0x25
 8013af2:	d1f9      	bne.n	8013ae8 <_svfiprintf_r+0x50>
 8013af4:	ebba 0b04 	subs.w	fp, sl, r4
 8013af8:	d00b      	beq.n	8013b12 <_svfiprintf_r+0x7a>
 8013afa:	465b      	mov	r3, fp
 8013afc:	4622      	mov	r2, r4
 8013afe:	4629      	mov	r1, r5
 8013b00:	4638      	mov	r0, r7
 8013b02:	f7ff ff6d 	bl	80139e0 <__ssputs_r>
 8013b06:	3001      	adds	r0, #1
 8013b08:	f000 80aa 	beq.w	8013c60 <_svfiprintf_r+0x1c8>
 8013b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b0e:	445a      	add	r2, fp
 8013b10:	9209      	str	r2, [sp, #36]	; 0x24
 8013b12:	f89a 3000 	ldrb.w	r3, [sl]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f000 80a2 	beq.w	8013c60 <_svfiprintf_r+0x1c8>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b26:	f10a 0a01 	add.w	sl, sl, #1
 8013b2a:	9304      	str	r3, [sp, #16]
 8013b2c:	9307      	str	r3, [sp, #28]
 8013b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b32:	931a      	str	r3, [sp, #104]	; 0x68
 8013b34:	4654      	mov	r4, sl
 8013b36:	2205      	movs	r2, #5
 8013b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3c:	4851      	ldr	r0, [pc, #324]	; (8013c84 <_svfiprintf_r+0x1ec>)
 8013b3e:	f7ff fb91 	bl	8013264 <memchr>
 8013b42:	9a04      	ldr	r2, [sp, #16]
 8013b44:	b9d8      	cbnz	r0, 8013b7e <_svfiprintf_r+0xe6>
 8013b46:	06d0      	lsls	r0, r2, #27
 8013b48:	bf44      	itt	mi
 8013b4a:	2320      	movmi	r3, #32
 8013b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b50:	0711      	lsls	r1, r2, #28
 8013b52:	bf44      	itt	mi
 8013b54:	232b      	movmi	r3, #43	; 0x2b
 8013b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b60:	d015      	beq.n	8013b8e <_svfiprintf_r+0xf6>
 8013b62:	4654      	mov	r4, sl
 8013b64:	2000      	movs	r0, #0
 8013b66:	f04f 0c0a 	mov.w	ip, #10
 8013b6a:	9a07      	ldr	r2, [sp, #28]
 8013b6c:	4621      	mov	r1, r4
 8013b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b72:	3b30      	subs	r3, #48	; 0x30
 8013b74:	2b09      	cmp	r3, #9
 8013b76:	d94e      	bls.n	8013c16 <_svfiprintf_r+0x17e>
 8013b78:	b1b0      	cbz	r0, 8013ba8 <_svfiprintf_r+0x110>
 8013b7a:	9207      	str	r2, [sp, #28]
 8013b7c:	e014      	b.n	8013ba8 <_svfiprintf_r+0x110>
 8013b7e:	eba0 0308 	sub.w	r3, r0, r8
 8013b82:	fa09 f303 	lsl.w	r3, r9, r3
 8013b86:	4313      	orrs	r3, r2
 8013b88:	46a2      	mov	sl, r4
 8013b8a:	9304      	str	r3, [sp, #16]
 8013b8c:	e7d2      	b.n	8013b34 <_svfiprintf_r+0x9c>
 8013b8e:	9b03      	ldr	r3, [sp, #12]
 8013b90:	1d19      	adds	r1, r3, #4
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	9103      	str	r1, [sp, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	bfbb      	ittet	lt
 8013b9a:	425b      	neglt	r3, r3
 8013b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8013ba0:	9307      	strge	r3, [sp, #28]
 8013ba2:	9307      	strlt	r3, [sp, #28]
 8013ba4:	bfb8      	it	lt
 8013ba6:	9204      	strlt	r2, [sp, #16]
 8013ba8:	7823      	ldrb	r3, [r4, #0]
 8013baa:	2b2e      	cmp	r3, #46	; 0x2e
 8013bac:	d10c      	bne.n	8013bc8 <_svfiprintf_r+0x130>
 8013bae:	7863      	ldrb	r3, [r4, #1]
 8013bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8013bb2:	d135      	bne.n	8013c20 <_svfiprintf_r+0x188>
 8013bb4:	9b03      	ldr	r3, [sp, #12]
 8013bb6:	3402      	adds	r4, #2
 8013bb8:	1d1a      	adds	r2, r3, #4
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	9203      	str	r2, [sp, #12]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	bfb8      	it	lt
 8013bc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013bc6:	9305      	str	r3, [sp, #20]
 8013bc8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013c88 <_svfiprintf_r+0x1f0>
 8013bcc:	2203      	movs	r2, #3
 8013bce:	4650      	mov	r0, sl
 8013bd0:	7821      	ldrb	r1, [r4, #0]
 8013bd2:	f7ff fb47 	bl	8013264 <memchr>
 8013bd6:	b140      	cbz	r0, 8013bea <_svfiprintf_r+0x152>
 8013bd8:	2340      	movs	r3, #64	; 0x40
 8013bda:	eba0 000a 	sub.w	r0, r0, sl
 8013bde:	fa03 f000 	lsl.w	r0, r3, r0
 8013be2:	9b04      	ldr	r3, [sp, #16]
 8013be4:	3401      	adds	r4, #1
 8013be6:	4303      	orrs	r3, r0
 8013be8:	9304      	str	r3, [sp, #16]
 8013bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bee:	2206      	movs	r2, #6
 8013bf0:	4826      	ldr	r0, [pc, #152]	; (8013c8c <_svfiprintf_r+0x1f4>)
 8013bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bf6:	f7ff fb35 	bl	8013264 <memchr>
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	d038      	beq.n	8013c70 <_svfiprintf_r+0x1d8>
 8013bfe:	4b24      	ldr	r3, [pc, #144]	; (8013c90 <_svfiprintf_r+0x1f8>)
 8013c00:	bb1b      	cbnz	r3, 8013c4a <_svfiprintf_r+0x1b2>
 8013c02:	9b03      	ldr	r3, [sp, #12]
 8013c04:	3307      	adds	r3, #7
 8013c06:	f023 0307 	bic.w	r3, r3, #7
 8013c0a:	3308      	adds	r3, #8
 8013c0c:	9303      	str	r3, [sp, #12]
 8013c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c10:	4433      	add	r3, r6
 8013c12:	9309      	str	r3, [sp, #36]	; 0x24
 8013c14:	e767      	b.n	8013ae6 <_svfiprintf_r+0x4e>
 8013c16:	460c      	mov	r4, r1
 8013c18:	2001      	movs	r0, #1
 8013c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c1e:	e7a5      	b.n	8013b6c <_svfiprintf_r+0xd4>
 8013c20:	2300      	movs	r3, #0
 8013c22:	f04f 0c0a 	mov.w	ip, #10
 8013c26:	4619      	mov	r1, r3
 8013c28:	3401      	adds	r4, #1
 8013c2a:	9305      	str	r3, [sp, #20]
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c32:	3a30      	subs	r2, #48	; 0x30
 8013c34:	2a09      	cmp	r2, #9
 8013c36:	d903      	bls.n	8013c40 <_svfiprintf_r+0x1a8>
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d0c5      	beq.n	8013bc8 <_svfiprintf_r+0x130>
 8013c3c:	9105      	str	r1, [sp, #20]
 8013c3e:	e7c3      	b.n	8013bc8 <_svfiprintf_r+0x130>
 8013c40:	4604      	mov	r4, r0
 8013c42:	2301      	movs	r3, #1
 8013c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c48:	e7f0      	b.n	8013c2c <_svfiprintf_r+0x194>
 8013c4a:	ab03      	add	r3, sp, #12
 8013c4c:	9300      	str	r3, [sp, #0]
 8013c4e:	462a      	mov	r2, r5
 8013c50:	4638      	mov	r0, r7
 8013c52:	4b10      	ldr	r3, [pc, #64]	; (8013c94 <_svfiprintf_r+0x1fc>)
 8013c54:	a904      	add	r1, sp, #16
 8013c56:	f7fe f87b 	bl	8011d50 <_printf_float>
 8013c5a:	1c42      	adds	r2, r0, #1
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	d1d6      	bne.n	8013c0e <_svfiprintf_r+0x176>
 8013c60:	89ab      	ldrh	r3, [r5, #12]
 8013c62:	065b      	lsls	r3, r3, #25
 8013c64:	f53f af2c 	bmi.w	8013ac0 <_svfiprintf_r+0x28>
 8013c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c6a:	b01d      	add	sp, #116	; 0x74
 8013c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c70:	ab03      	add	r3, sp, #12
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	462a      	mov	r2, r5
 8013c76:	4638      	mov	r0, r7
 8013c78:	4b06      	ldr	r3, [pc, #24]	; (8013c94 <_svfiprintf_r+0x1fc>)
 8013c7a:	a904      	add	r1, sp, #16
 8013c7c:	f7fe fb04 	bl	8012288 <_printf_i>
 8013c80:	e7eb      	b.n	8013c5a <_svfiprintf_r+0x1c2>
 8013c82:	bf00      	nop
 8013c84:	0802e0fc 	.word	0x0802e0fc
 8013c88:	0802e102 	.word	0x0802e102
 8013c8c:	0802e106 	.word	0x0802e106
 8013c90:	08011d51 	.word	0x08011d51
 8013c94:	080139e1 	.word	0x080139e1

08013c98 <__assert_func>:
 8013c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c9a:	4614      	mov	r4, r2
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	4b09      	ldr	r3, [pc, #36]	; (8013cc4 <__assert_func+0x2c>)
 8013ca0:	4605      	mov	r5, r0
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	68d8      	ldr	r0, [r3, #12]
 8013ca6:	b14c      	cbz	r4, 8013cbc <__assert_func+0x24>
 8013ca8:	4b07      	ldr	r3, [pc, #28]	; (8013cc8 <__assert_func+0x30>)
 8013caa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cae:	9100      	str	r1, [sp, #0]
 8013cb0:	462b      	mov	r3, r5
 8013cb2:	4906      	ldr	r1, [pc, #24]	; (8013ccc <__assert_func+0x34>)
 8013cb4:	f000 f80e 	bl	8013cd4 <fiprintf>
 8013cb8:	f000 faa2 	bl	8014200 <abort>
 8013cbc:	4b04      	ldr	r3, [pc, #16]	; (8013cd0 <__assert_func+0x38>)
 8013cbe:	461c      	mov	r4, r3
 8013cc0:	e7f3      	b.n	8013caa <__assert_func+0x12>
 8013cc2:	bf00      	nop
 8013cc4:	20000168 	.word	0x20000168
 8013cc8:	0802e10d 	.word	0x0802e10d
 8013ccc:	0802e11a 	.word	0x0802e11a
 8013cd0:	0802e148 	.word	0x0802e148

08013cd4 <fiprintf>:
 8013cd4:	b40e      	push	{r1, r2, r3}
 8013cd6:	b503      	push	{r0, r1, lr}
 8013cd8:	4601      	mov	r1, r0
 8013cda:	ab03      	add	r3, sp, #12
 8013cdc:	4805      	ldr	r0, [pc, #20]	; (8013cf4 <fiprintf+0x20>)
 8013cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ce2:	6800      	ldr	r0, [r0, #0]
 8013ce4:	9301      	str	r3, [sp, #4]
 8013ce6:	f000 f88d 	bl	8013e04 <_vfiprintf_r>
 8013cea:	b002      	add	sp, #8
 8013cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cf0:	b003      	add	sp, #12
 8013cf2:	4770      	bx	lr
 8013cf4:	20000168 	.word	0x20000168

08013cf8 <__retarget_lock_init_recursive>:
 8013cf8:	4770      	bx	lr

08013cfa <__retarget_lock_acquire_recursive>:
 8013cfa:	4770      	bx	lr

08013cfc <__retarget_lock_release_recursive>:
 8013cfc:	4770      	bx	lr

08013cfe <__ascii_mbtowc>:
 8013cfe:	b082      	sub	sp, #8
 8013d00:	b901      	cbnz	r1, 8013d04 <__ascii_mbtowc+0x6>
 8013d02:	a901      	add	r1, sp, #4
 8013d04:	b142      	cbz	r2, 8013d18 <__ascii_mbtowc+0x1a>
 8013d06:	b14b      	cbz	r3, 8013d1c <__ascii_mbtowc+0x1e>
 8013d08:	7813      	ldrb	r3, [r2, #0]
 8013d0a:	600b      	str	r3, [r1, #0]
 8013d0c:	7812      	ldrb	r2, [r2, #0]
 8013d0e:	1e10      	subs	r0, r2, #0
 8013d10:	bf18      	it	ne
 8013d12:	2001      	movne	r0, #1
 8013d14:	b002      	add	sp, #8
 8013d16:	4770      	bx	lr
 8013d18:	4610      	mov	r0, r2
 8013d1a:	e7fb      	b.n	8013d14 <__ascii_mbtowc+0x16>
 8013d1c:	f06f 0001 	mvn.w	r0, #1
 8013d20:	e7f8      	b.n	8013d14 <__ascii_mbtowc+0x16>

08013d22 <memmove>:
 8013d22:	4288      	cmp	r0, r1
 8013d24:	b510      	push	{r4, lr}
 8013d26:	eb01 0402 	add.w	r4, r1, r2
 8013d2a:	d902      	bls.n	8013d32 <memmove+0x10>
 8013d2c:	4284      	cmp	r4, r0
 8013d2e:	4623      	mov	r3, r4
 8013d30:	d807      	bhi.n	8013d42 <memmove+0x20>
 8013d32:	1e43      	subs	r3, r0, #1
 8013d34:	42a1      	cmp	r1, r4
 8013d36:	d008      	beq.n	8013d4a <memmove+0x28>
 8013d38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d40:	e7f8      	b.n	8013d34 <memmove+0x12>
 8013d42:	4601      	mov	r1, r0
 8013d44:	4402      	add	r2, r0
 8013d46:	428a      	cmp	r2, r1
 8013d48:	d100      	bne.n	8013d4c <memmove+0x2a>
 8013d4a:	bd10      	pop	{r4, pc}
 8013d4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d54:	e7f7      	b.n	8013d46 <memmove+0x24>

08013d56 <_realloc_r>:
 8013d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5a:	4680      	mov	r8, r0
 8013d5c:	4614      	mov	r4, r2
 8013d5e:	460e      	mov	r6, r1
 8013d60:	b921      	cbnz	r1, 8013d6c <_realloc_r+0x16>
 8013d62:	4611      	mov	r1, r2
 8013d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d68:	f7fd bee0 	b.w	8011b2c <_malloc_r>
 8013d6c:	b92a      	cbnz	r2, 8013d7a <_realloc_r+0x24>
 8013d6e:	f7fd fe75 	bl	8011a5c <_free_r>
 8013d72:	4625      	mov	r5, r4
 8013d74:	4628      	mov	r0, r5
 8013d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d7a:	f000 fc61 	bl	8014640 <_malloc_usable_size_r>
 8013d7e:	4284      	cmp	r4, r0
 8013d80:	4607      	mov	r7, r0
 8013d82:	d802      	bhi.n	8013d8a <_realloc_r+0x34>
 8013d84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013d88:	d812      	bhi.n	8013db0 <_realloc_r+0x5a>
 8013d8a:	4621      	mov	r1, r4
 8013d8c:	4640      	mov	r0, r8
 8013d8e:	f7fd fecd 	bl	8011b2c <_malloc_r>
 8013d92:	4605      	mov	r5, r0
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d0ed      	beq.n	8013d74 <_realloc_r+0x1e>
 8013d98:	42bc      	cmp	r4, r7
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	4631      	mov	r1, r6
 8013d9e:	bf28      	it	cs
 8013da0:	463a      	movcs	r2, r7
 8013da2:	f7ff fa6d 	bl	8013280 <memcpy>
 8013da6:	4631      	mov	r1, r6
 8013da8:	4640      	mov	r0, r8
 8013daa:	f7fd fe57 	bl	8011a5c <_free_r>
 8013dae:	e7e1      	b.n	8013d74 <_realloc_r+0x1e>
 8013db0:	4635      	mov	r5, r6
 8013db2:	e7df      	b.n	8013d74 <_realloc_r+0x1e>

08013db4 <__sfputc_r>:
 8013db4:	6893      	ldr	r3, [r2, #8]
 8013db6:	b410      	push	{r4}
 8013db8:	3b01      	subs	r3, #1
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	6093      	str	r3, [r2, #8]
 8013dbe:	da07      	bge.n	8013dd0 <__sfputc_r+0x1c>
 8013dc0:	6994      	ldr	r4, [r2, #24]
 8013dc2:	42a3      	cmp	r3, r4
 8013dc4:	db01      	blt.n	8013dca <__sfputc_r+0x16>
 8013dc6:	290a      	cmp	r1, #10
 8013dc8:	d102      	bne.n	8013dd0 <__sfputc_r+0x1c>
 8013dca:	bc10      	pop	{r4}
 8013dcc:	f000 b94a 	b.w	8014064 <__swbuf_r>
 8013dd0:	6813      	ldr	r3, [r2, #0]
 8013dd2:	1c58      	adds	r0, r3, #1
 8013dd4:	6010      	str	r0, [r2, #0]
 8013dd6:	7019      	strb	r1, [r3, #0]
 8013dd8:	4608      	mov	r0, r1
 8013dda:	bc10      	pop	{r4}
 8013ddc:	4770      	bx	lr

08013dde <__sfputs_r>:
 8013dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013de0:	4606      	mov	r6, r0
 8013de2:	460f      	mov	r7, r1
 8013de4:	4614      	mov	r4, r2
 8013de6:	18d5      	adds	r5, r2, r3
 8013de8:	42ac      	cmp	r4, r5
 8013dea:	d101      	bne.n	8013df0 <__sfputs_r+0x12>
 8013dec:	2000      	movs	r0, #0
 8013dee:	e007      	b.n	8013e00 <__sfputs_r+0x22>
 8013df0:	463a      	mov	r2, r7
 8013df2:	4630      	mov	r0, r6
 8013df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013df8:	f7ff ffdc 	bl	8013db4 <__sfputc_r>
 8013dfc:	1c43      	adds	r3, r0, #1
 8013dfe:	d1f3      	bne.n	8013de8 <__sfputs_r+0xa>
 8013e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e04 <_vfiprintf_r>:
 8013e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e08:	460d      	mov	r5, r1
 8013e0a:	4614      	mov	r4, r2
 8013e0c:	4698      	mov	r8, r3
 8013e0e:	4606      	mov	r6, r0
 8013e10:	b09d      	sub	sp, #116	; 0x74
 8013e12:	b118      	cbz	r0, 8013e1c <_vfiprintf_r+0x18>
 8013e14:	6983      	ldr	r3, [r0, #24]
 8013e16:	b90b      	cbnz	r3, 8013e1c <_vfiprintf_r+0x18>
 8013e18:	f000 fb10 	bl	801443c <__sinit>
 8013e1c:	4b89      	ldr	r3, [pc, #548]	; (8014044 <_vfiprintf_r+0x240>)
 8013e1e:	429d      	cmp	r5, r3
 8013e20:	d11b      	bne.n	8013e5a <_vfiprintf_r+0x56>
 8013e22:	6875      	ldr	r5, [r6, #4]
 8013e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e26:	07d9      	lsls	r1, r3, #31
 8013e28:	d405      	bmi.n	8013e36 <_vfiprintf_r+0x32>
 8013e2a:	89ab      	ldrh	r3, [r5, #12]
 8013e2c:	059a      	lsls	r2, r3, #22
 8013e2e:	d402      	bmi.n	8013e36 <_vfiprintf_r+0x32>
 8013e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e32:	f7ff ff62 	bl	8013cfa <__retarget_lock_acquire_recursive>
 8013e36:	89ab      	ldrh	r3, [r5, #12]
 8013e38:	071b      	lsls	r3, r3, #28
 8013e3a:	d501      	bpl.n	8013e40 <_vfiprintf_r+0x3c>
 8013e3c:	692b      	ldr	r3, [r5, #16]
 8013e3e:	b9eb      	cbnz	r3, 8013e7c <_vfiprintf_r+0x78>
 8013e40:	4629      	mov	r1, r5
 8013e42:	4630      	mov	r0, r6
 8013e44:	f000 f96e 	bl	8014124 <__swsetup_r>
 8013e48:	b1c0      	cbz	r0, 8013e7c <_vfiprintf_r+0x78>
 8013e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e4c:	07dc      	lsls	r4, r3, #31
 8013e4e:	d50e      	bpl.n	8013e6e <_vfiprintf_r+0x6a>
 8013e50:	f04f 30ff 	mov.w	r0, #4294967295
 8013e54:	b01d      	add	sp, #116	; 0x74
 8013e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5a:	4b7b      	ldr	r3, [pc, #492]	; (8014048 <_vfiprintf_r+0x244>)
 8013e5c:	429d      	cmp	r5, r3
 8013e5e:	d101      	bne.n	8013e64 <_vfiprintf_r+0x60>
 8013e60:	68b5      	ldr	r5, [r6, #8]
 8013e62:	e7df      	b.n	8013e24 <_vfiprintf_r+0x20>
 8013e64:	4b79      	ldr	r3, [pc, #484]	; (801404c <_vfiprintf_r+0x248>)
 8013e66:	429d      	cmp	r5, r3
 8013e68:	bf08      	it	eq
 8013e6a:	68f5      	ldreq	r5, [r6, #12]
 8013e6c:	e7da      	b.n	8013e24 <_vfiprintf_r+0x20>
 8013e6e:	89ab      	ldrh	r3, [r5, #12]
 8013e70:	0598      	lsls	r0, r3, #22
 8013e72:	d4ed      	bmi.n	8013e50 <_vfiprintf_r+0x4c>
 8013e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e76:	f7ff ff41 	bl	8013cfc <__retarget_lock_release_recursive>
 8013e7a:	e7e9      	b.n	8013e50 <_vfiprintf_r+0x4c>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e80:	2320      	movs	r3, #32
 8013e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e86:	2330      	movs	r3, #48	; 0x30
 8013e88:	f04f 0901 	mov.w	r9, #1
 8013e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014050 <_vfiprintf_r+0x24c>
 8013e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e98:	4623      	mov	r3, r4
 8013e9a:	469a      	mov	sl, r3
 8013e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ea0:	b10a      	cbz	r2, 8013ea6 <_vfiprintf_r+0xa2>
 8013ea2:	2a25      	cmp	r2, #37	; 0x25
 8013ea4:	d1f9      	bne.n	8013e9a <_vfiprintf_r+0x96>
 8013ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8013eaa:	d00b      	beq.n	8013ec4 <_vfiprintf_r+0xc0>
 8013eac:	465b      	mov	r3, fp
 8013eae:	4622      	mov	r2, r4
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	f7ff ff93 	bl	8013dde <__sfputs_r>
 8013eb8:	3001      	adds	r0, #1
 8013eba:	f000 80aa 	beq.w	8014012 <_vfiprintf_r+0x20e>
 8013ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ec0:	445a      	add	r2, fp
 8013ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f000 80a2 	beq.w	8014012 <_vfiprintf_r+0x20e>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ed8:	f10a 0a01 	add.w	sl, sl, #1
 8013edc:	9304      	str	r3, [sp, #16]
 8013ede:	9307      	str	r3, [sp, #28]
 8013ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8013ee6:	4654      	mov	r4, sl
 8013ee8:	2205      	movs	r2, #5
 8013eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eee:	4858      	ldr	r0, [pc, #352]	; (8014050 <_vfiprintf_r+0x24c>)
 8013ef0:	f7ff f9b8 	bl	8013264 <memchr>
 8013ef4:	9a04      	ldr	r2, [sp, #16]
 8013ef6:	b9d8      	cbnz	r0, 8013f30 <_vfiprintf_r+0x12c>
 8013ef8:	06d1      	lsls	r1, r2, #27
 8013efa:	bf44      	itt	mi
 8013efc:	2320      	movmi	r3, #32
 8013efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f02:	0713      	lsls	r3, r2, #28
 8013f04:	bf44      	itt	mi
 8013f06:	232b      	movmi	r3, #43	; 0x2b
 8013f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8013f10:	2b2a      	cmp	r3, #42	; 0x2a
 8013f12:	d015      	beq.n	8013f40 <_vfiprintf_r+0x13c>
 8013f14:	4654      	mov	r4, sl
 8013f16:	2000      	movs	r0, #0
 8013f18:	f04f 0c0a 	mov.w	ip, #10
 8013f1c:	9a07      	ldr	r2, [sp, #28]
 8013f1e:	4621      	mov	r1, r4
 8013f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f24:	3b30      	subs	r3, #48	; 0x30
 8013f26:	2b09      	cmp	r3, #9
 8013f28:	d94e      	bls.n	8013fc8 <_vfiprintf_r+0x1c4>
 8013f2a:	b1b0      	cbz	r0, 8013f5a <_vfiprintf_r+0x156>
 8013f2c:	9207      	str	r2, [sp, #28]
 8013f2e:	e014      	b.n	8013f5a <_vfiprintf_r+0x156>
 8013f30:	eba0 0308 	sub.w	r3, r0, r8
 8013f34:	fa09 f303 	lsl.w	r3, r9, r3
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	46a2      	mov	sl, r4
 8013f3c:	9304      	str	r3, [sp, #16]
 8013f3e:	e7d2      	b.n	8013ee6 <_vfiprintf_r+0xe2>
 8013f40:	9b03      	ldr	r3, [sp, #12]
 8013f42:	1d19      	adds	r1, r3, #4
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	9103      	str	r1, [sp, #12]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	bfbb      	ittet	lt
 8013f4c:	425b      	neglt	r3, r3
 8013f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8013f52:	9307      	strge	r3, [sp, #28]
 8013f54:	9307      	strlt	r3, [sp, #28]
 8013f56:	bfb8      	it	lt
 8013f58:	9204      	strlt	r2, [sp, #16]
 8013f5a:	7823      	ldrb	r3, [r4, #0]
 8013f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f5e:	d10c      	bne.n	8013f7a <_vfiprintf_r+0x176>
 8013f60:	7863      	ldrb	r3, [r4, #1]
 8013f62:	2b2a      	cmp	r3, #42	; 0x2a
 8013f64:	d135      	bne.n	8013fd2 <_vfiprintf_r+0x1ce>
 8013f66:	9b03      	ldr	r3, [sp, #12]
 8013f68:	3402      	adds	r4, #2
 8013f6a:	1d1a      	adds	r2, r3, #4
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	9203      	str	r2, [sp, #12]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	bfb8      	it	lt
 8013f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f78:	9305      	str	r3, [sp, #20]
 8013f7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8014054 <_vfiprintf_r+0x250>
 8013f7e:	2203      	movs	r2, #3
 8013f80:	4650      	mov	r0, sl
 8013f82:	7821      	ldrb	r1, [r4, #0]
 8013f84:	f7ff f96e 	bl	8013264 <memchr>
 8013f88:	b140      	cbz	r0, 8013f9c <_vfiprintf_r+0x198>
 8013f8a:	2340      	movs	r3, #64	; 0x40
 8013f8c:	eba0 000a 	sub.w	r0, r0, sl
 8013f90:	fa03 f000 	lsl.w	r0, r3, r0
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	3401      	adds	r4, #1
 8013f98:	4303      	orrs	r3, r0
 8013f9a:	9304      	str	r3, [sp, #16]
 8013f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fa0:	2206      	movs	r2, #6
 8013fa2:	482d      	ldr	r0, [pc, #180]	; (8014058 <_vfiprintf_r+0x254>)
 8013fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fa8:	f7ff f95c 	bl	8013264 <memchr>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d03f      	beq.n	8014030 <_vfiprintf_r+0x22c>
 8013fb0:	4b2a      	ldr	r3, [pc, #168]	; (801405c <_vfiprintf_r+0x258>)
 8013fb2:	bb1b      	cbnz	r3, 8013ffc <_vfiprintf_r+0x1f8>
 8013fb4:	9b03      	ldr	r3, [sp, #12]
 8013fb6:	3307      	adds	r3, #7
 8013fb8:	f023 0307 	bic.w	r3, r3, #7
 8013fbc:	3308      	adds	r3, #8
 8013fbe:	9303      	str	r3, [sp, #12]
 8013fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fc2:	443b      	add	r3, r7
 8013fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fc6:	e767      	b.n	8013e98 <_vfiprintf_r+0x94>
 8013fc8:	460c      	mov	r4, r1
 8013fca:	2001      	movs	r0, #1
 8013fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fd0:	e7a5      	b.n	8013f1e <_vfiprintf_r+0x11a>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	f04f 0c0a 	mov.w	ip, #10
 8013fd8:	4619      	mov	r1, r3
 8013fda:	3401      	adds	r4, #1
 8013fdc:	9305      	str	r3, [sp, #20]
 8013fde:	4620      	mov	r0, r4
 8013fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fe4:	3a30      	subs	r2, #48	; 0x30
 8013fe6:	2a09      	cmp	r2, #9
 8013fe8:	d903      	bls.n	8013ff2 <_vfiprintf_r+0x1ee>
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d0c5      	beq.n	8013f7a <_vfiprintf_r+0x176>
 8013fee:	9105      	str	r1, [sp, #20]
 8013ff0:	e7c3      	b.n	8013f7a <_vfiprintf_r+0x176>
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ffa:	e7f0      	b.n	8013fde <_vfiprintf_r+0x1da>
 8013ffc:	ab03      	add	r3, sp, #12
 8013ffe:	9300      	str	r3, [sp, #0]
 8014000:	462a      	mov	r2, r5
 8014002:	4630      	mov	r0, r6
 8014004:	4b16      	ldr	r3, [pc, #88]	; (8014060 <_vfiprintf_r+0x25c>)
 8014006:	a904      	add	r1, sp, #16
 8014008:	f7fd fea2 	bl	8011d50 <_printf_float>
 801400c:	4607      	mov	r7, r0
 801400e:	1c78      	adds	r0, r7, #1
 8014010:	d1d6      	bne.n	8013fc0 <_vfiprintf_r+0x1bc>
 8014012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014014:	07d9      	lsls	r1, r3, #31
 8014016:	d405      	bmi.n	8014024 <_vfiprintf_r+0x220>
 8014018:	89ab      	ldrh	r3, [r5, #12]
 801401a:	059a      	lsls	r2, r3, #22
 801401c:	d402      	bmi.n	8014024 <_vfiprintf_r+0x220>
 801401e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014020:	f7ff fe6c 	bl	8013cfc <__retarget_lock_release_recursive>
 8014024:	89ab      	ldrh	r3, [r5, #12]
 8014026:	065b      	lsls	r3, r3, #25
 8014028:	f53f af12 	bmi.w	8013e50 <_vfiprintf_r+0x4c>
 801402c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801402e:	e711      	b.n	8013e54 <_vfiprintf_r+0x50>
 8014030:	ab03      	add	r3, sp, #12
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	462a      	mov	r2, r5
 8014036:	4630      	mov	r0, r6
 8014038:	4b09      	ldr	r3, [pc, #36]	; (8014060 <_vfiprintf_r+0x25c>)
 801403a:	a904      	add	r1, sp, #16
 801403c:	f7fe f924 	bl	8012288 <_printf_i>
 8014040:	e7e4      	b.n	801400c <_vfiprintf_r+0x208>
 8014042:	bf00      	nop
 8014044:	0802e274 	.word	0x0802e274
 8014048:	0802e294 	.word	0x0802e294
 801404c:	0802e254 	.word	0x0802e254
 8014050:	0802e0fc 	.word	0x0802e0fc
 8014054:	0802e102 	.word	0x0802e102
 8014058:	0802e106 	.word	0x0802e106
 801405c:	08011d51 	.word	0x08011d51
 8014060:	08013ddf 	.word	0x08013ddf

08014064 <__swbuf_r>:
 8014064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014066:	460e      	mov	r6, r1
 8014068:	4614      	mov	r4, r2
 801406a:	4605      	mov	r5, r0
 801406c:	b118      	cbz	r0, 8014076 <__swbuf_r+0x12>
 801406e:	6983      	ldr	r3, [r0, #24]
 8014070:	b90b      	cbnz	r3, 8014076 <__swbuf_r+0x12>
 8014072:	f000 f9e3 	bl	801443c <__sinit>
 8014076:	4b21      	ldr	r3, [pc, #132]	; (80140fc <__swbuf_r+0x98>)
 8014078:	429c      	cmp	r4, r3
 801407a:	d12b      	bne.n	80140d4 <__swbuf_r+0x70>
 801407c:	686c      	ldr	r4, [r5, #4]
 801407e:	69a3      	ldr	r3, [r4, #24]
 8014080:	60a3      	str	r3, [r4, #8]
 8014082:	89a3      	ldrh	r3, [r4, #12]
 8014084:	071a      	lsls	r2, r3, #28
 8014086:	d52f      	bpl.n	80140e8 <__swbuf_r+0x84>
 8014088:	6923      	ldr	r3, [r4, #16]
 801408a:	b36b      	cbz	r3, 80140e8 <__swbuf_r+0x84>
 801408c:	6923      	ldr	r3, [r4, #16]
 801408e:	6820      	ldr	r0, [r4, #0]
 8014090:	b2f6      	uxtb	r6, r6
 8014092:	1ac0      	subs	r0, r0, r3
 8014094:	6963      	ldr	r3, [r4, #20]
 8014096:	4637      	mov	r7, r6
 8014098:	4283      	cmp	r3, r0
 801409a:	dc04      	bgt.n	80140a6 <__swbuf_r+0x42>
 801409c:	4621      	mov	r1, r4
 801409e:	4628      	mov	r0, r5
 80140a0:	f000 f938 	bl	8014314 <_fflush_r>
 80140a4:	bb30      	cbnz	r0, 80140f4 <__swbuf_r+0x90>
 80140a6:	68a3      	ldr	r3, [r4, #8]
 80140a8:	3001      	adds	r0, #1
 80140aa:	3b01      	subs	r3, #1
 80140ac:	60a3      	str	r3, [r4, #8]
 80140ae:	6823      	ldr	r3, [r4, #0]
 80140b0:	1c5a      	adds	r2, r3, #1
 80140b2:	6022      	str	r2, [r4, #0]
 80140b4:	701e      	strb	r6, [r3, #0]
 80140b6:	6963      	ldr	r3, [r4, #20]
 80140b8:	4283      	cmp	r3, r0
 80140ba:	d004      	beq.n	80140c6 <__swbuf_r+0x62>
 80140bc:	89a3      	ldrh	r3, [r4, #12]
 80140be:	07db      	lsls	r3, r3, #31
 80140c0:	d506      	bpl.n	80140d0 <__swbuf_r+0x6c>
 80140c2:	2e0a      	cmp	r6, #10
 80140c4:	d104      	bne.n	80140d0 <__swbuf_r+0x6c>
 80140c6:	4621      	mov	r1, r4
 80140c8:	4628      	mov	r0, r5
 80140ca:	f000 f923 	bl	8014314 <_fflush_r>
 80140ce:	b988      	cbnz	r0, 80140f4 <__swbuf_r+0x90>
 80140d0:	4638      	mov	r0, r7
 80140d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140d4:	4b0a      	ldr	r3, [pc, #40]	; (8014100 <__swbuf_r+0x9c>)
 80140d6:	429c      	cmp	r4, r3
 80140d8:	d101      	bne.n	80140de <__swbuf_r+0x7a>
 80140da:	68ac      	ldr	r4, [r5, #8]
 80140dc:	e7cf      	b.n	801407e <__swbuf_r+0x1a>
 80140de:	4b09      	ldr	r3, [pc, #36]	; (8014104 <__swbuf_r+0xa0>)
 80140e0:	429c      	cmp	r4, r3
 80140e2:	bf08      	it	eq
 80140e4:	68ec      	ldreq	r4, [r5, #12]
 80140e6:	e7ca      	b.n	801407e <__swbuf_r+0x1a>
 80140e8:	4621      	mov	r1, r4
 80140ea:	4628      	mov	r0, r5
 80140ec:	f000 f81a 	bl	8014124 <__swsetup_r>
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d0cb      	beq.n	801408c <__swbuf_r+0x28>
 80140f4:	f04f 37ff 	mov.w	r7, #4294967295
 80140f8:	e7ea      	b.n	80140d0 <__swbuf_r+0x6c>
 80140fa:	bf00      	nop
 80140fc:	0802e274 	.word	0x0802e274
 8014100:	0802e294 	.word	0x0802e294
 8014104:	0802e254 	.word	0x0802e254

08014108 <__ascii_wctomb>:
 8014108:	4603      	mov	r3, r0
 801410a:	4608      	mov	r0, r1
 801410c:	b141      	cbz	r1, 8014120 <__ascii_wctomb+0x18>
 801410e:	2aff      	cmp	r2, #255	; 0xff
 8014110:	d904      	bls.n	801411c <__ascii_wctomb+0x14>
 8014112:	228a      	movs	r2, #138	; 0x8a
 8014114:	f04f 30ff 	mov.w	r0, #4294967295
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	4770      	bx	lr
 801411c:	2001      	movs	r0, #1
 801411e:	700a      	strb	r2, [r1, #0]
 8014120:	4770      	bx	lr
	...

08014124 <__swsetup_r>:
 8014124:	4b32      	ldr	r3, [pc, #200]	; (80141f0 <__swsetup_r+0xcc>)
 8014126:	b570      	push	{r4, r5, r6, lr}
 8014128:	681d      	ldr	r5, [r3, #0]
 801412a:	4606      	mov	r6, r0
 801412c:	460c      	mov	r4, r1
 801412e:	b125      	cbz	r5, 801413a <__swsetup_r+0x16>
 8014130:	69ab      	ldr	r3, [r5, #24]
 8014132:	b913      	cbnz	r3, 801413a <__swsetup_r+0x16>
 8014134:	4628      	mov	r0, r5
 8014136:	f000 f981 	bl	801443c <__sinit>
 801413a:	4b2e      	ldr	r3, [pc, #184]	; (80141f4 <__swsetup_r+0xd0>)
 801413c:	429c      	cmp	r4, r3
 801413e:	d10f      	bne.n	8014160 <__swsetup_r+0x3c>
 8014140:	686c      	ldr	r4, [r5, #4]
 8014142:	89a3      	ldrh	r3, [r4, #12]
 8014144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014148:	0719      	lsls	r1, r3, #28
 801414a:	d42c      	bmi.n	80141a6 <__swsetup_r+0x82>
 801414c:	06dd      	lsls	r5, r3, #27
 801414e:	d411      	bmi.n	8014174 <__swsetup_r+0x50>
 8014150:	2309      	movs	r3, #9
 8014152:	6033      	str	r3, [r6, #0]
 8014154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014158:	f04f 30ff 	mov.w	r0, #4294967295
 801415c:	81a3      	strh	r3, [r4, #12]
 801415e:	e03e      	b.n	80141de <__swsetup_r+0xba>
 8014160:	4b25      	ldr	r3, [pc, #148]	; (80141f8 <__swsetup_r+0xd4>)
 8014162:	429c      	cmp	r4, r3
 8014164:	d101      	bne.n	801416a <__swsetup_r+0x46>
 8014166:	68ac      	ldr	r4, [r5, #8]
 8014168:	e7eb      	b.n	8014142 <__swsetup_r+0x1e>
 801416a:	4b24      	ldr	r3, [pc, #144]	; (80141fc <__swsetup_r+0xd8>)
 801416c:	429c      	cmp	r4, r3
 801416e:	bf08      	it	eq
 8014170:	68ec      	ldreq	r4, [r5, #12]
 8014172:	e7e6      	b.n	8014142 <__swsetup_r+0x1e>
 8014174:	0758      	lsls	r0, r3, #29
 8014176:	d512      	bpl.n	801419e <__swsetup_r+0x7a>
 8014178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801417a:	b141      	cbz	r1, 801418e <__swsetup_r+0x6a>
 801417c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014180:	4299      	cmp	r1, r3
 8014182:	d002      	beq.n	801418a <__swsetup_r+0x66>
 8014184:	4630      	mov	r0, r6
 8014186:	f7fd fc69 	bl	8011a5c <_free_r>
 801418a:	2300      	movs	r3, #0
 801418c:	6363      	str	r3, [r4, #52]	; 0x34
 801418e:	89a3      	ldrh	r3, [r4, #12]
 8014190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014194:	81a3      	strh	r3, [r4, #12]
 8014196:	2300      	movs	r3, #0
 8014198:	6063      	str	r3, [r4, #4]
 801419a:	6923      	ldr	r3, [r4, #16]
 801419c:	6023      	str	r3, [r4, #0]
 801419e:	89a3      	ldrh	r3, [r4, #12]
 80141a0:	f043 0308 	orr.w	r3, r3, #8
 80141a4:	81a3      	strh	r3, [r4, #12]
 80141a6:	6923      	ldr	r3, [r4, #16]
 80141a8:	b94b      	cbnz	r3, 80141be <__swsetup_r+0x9a>
 80141aa:	89a3      	ldrh	r3, [r4, #12]
 80141ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80141b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141b4:	d003      	beq.n	80141be <__swsetup_r+0x9a>
 80141b6:	4621      	mov	r1, r4
 80141b8:	4630      	mov	r0, r6
 80141ba:	f000 fa01 	bl	80145c0 <__smakebuf_r>
 80141be:	89a0      	ldrh	r0, [r4, #12]
 80141c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80141c4:	f010 0301 	ands.w	r3, r0, #1
 80141c8:	d00a      	beq.n	80141e0 <__swsetup_r+0xbc>
 80141ca:	2300      	movs	r3, #0
 80141cc:	60a3      	str	r3, [r4, #8]
 80141ce:	6963      	ldr	r3, [r4, #20]
 80141d0:	425b      	negs	r3, r3
 80141d2:	61a3      	str	r3, [r4, #24]
 80141d4:	6923      	ldr	r3, [r4, #16]
 80141d6:	b943      	cbnz	r3, 80141ea <__swsetup_r+0xc6>
 80141d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80141dc:	d1ba      	bne.n	8014154 <__swsetup_r+0x30>
 80141de:	bd70      	pop	{r4, r5, r6, pc}
 80141e0:	0781      	lsls	r1, r0, #30
 80141e2:	bf58      	it	pl
 80141e4:	6963      	ldrpl	r3, [r4, #20]
 80141e6:	60a3      	str	r3, [r4, #8]
 80141e8:	e7f4      	b.n	80141d4 <__swsetup_r+0xb0>
 80141ea:	2000      	movs	r0, #0
 80141ec:	e7f7      	b.n	80141de <__swsetup_r+0xba>
 80141ee:	bf00      	nop
 80141f0:	20000168 	.word	0x20000168
 80141f4:	0802e274 	.word	0x0802e274
 80141f8:	0802e294 	.word	0x0802e294
 80141fc:	0802e254 	.word	0x0802e254

08014200 <abort>:
 8014200:	2006      	movs	r0, #6
 8014202:	b508      	push	{r3, lr}
 8014204:	f000 fa4c 	bl	80146a0 <raise>
 8014208:	2001      	movs	r0, #1
 801420a:	f7ef faf6 	bl	80037fa <_exit>
	...

08014210 <__sflush_r>:
 8014210:	898a      	ldrh	r2, [r1, #12]
 8014212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014214:	4605      	mov	r5, r0
 8014216:	0710      	lsls	r0, r2, #28
 8014218:	460c      	mov	r4, r1
 801421a:	d457      	bmi.n	80142cc <__sflush_r+0xbc>
 801421c:	684b      	ldr	r3, [r1, #4]
 801421e:	2b00      	cmp	r3, #0
 8014220:	dc04      	bgt.n	801422c <__sflush_r+0x1c>
 8014222:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014224:	2b00      	cmp	r3, #0
 8014226:	dc01      	bgt.n	801422c <__sflush_r+0x1c>
 8014228:	2000      	movs	r0, #0
 801422a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801422c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801422e:	2e00      	cmp	r6, #0
 8014230:	d0fa      	beq.n	8014228 <__sflush_r+0x18>
 8014232:	2300      	movs	r3, #0
 8014234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014238:	682f      	ldr	r7, [r5, #0]
 801423a:	602b      	str	r3, [r5, #0]
 801423c:	d032      	beq.n	80142a4 <__sflush_r+0x94>
 801423e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014240:	89a3      	ldrh	r3, [r4, #12]
 8014242:	075a      	lsls	r2, r3, #29
 8014244:	d505      	bpl.n	8014252 <__sflush_r+0x42>
 8014246:	6863      	ldr	r3, [r4, #4]
 8014248:	1ac0      	subs	r0, r0, r3
 801424a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801424c:	b10b      	cbz	r3, 8014252 <__sflush_r+0x42>
 801424e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014250:	1ac0      	subs	r0, r0, r3
 8014252:	2300      	movs	r3, #0
 8014254:	4602      	mov	r2, r0
 8014256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014258:	4628      	mov	r0, r5
 801425a:	6a21      	ldr	r1, [r4, #32]
 801425c:	47b0      	blx	r6
 801425e:	1c43      	adds	r3, r0, #1
 8014260:	89a3      	ldrh	r3, [r4, #12]
 8014262:	d106      	bne.n	8014272 <__sflush_r+0x62>
 8014264:	6829      	ldr	r1, [r5, #0]
 8014266:	291d      	cmp	r1, #29
 8014268:	d82c      	bhi.n	80142c4 <__sflush_r+0xb4>
 801426a:	4a29      	ldr	r2, [pc, #164]	; (8014310 <__sflush_r+0x100>)
 801426c:	40ca      	lsrs	r2, r1
 801426e:	07d6      	lsls	r6, r2, #31
 8014270:	d528      	bpl.n	80142c4 <__sflush_r+0xb4>
 8014272:	2200      	movs	r2, #0
 8014274:	6062      	str	r2, [r4, #4]
 8014276:	6922      	ldr	r2, [r4, #16]
 8014278:	04d9      	lsls	r1, r3, #19
 801427a:	6022      	str	r2, [r4, #0]
 801427c:	d504      	bpl.n	8014288 <__sflush_r+0x78>
 801427e:	1c42      	adds	r2, r0, #1
 8014280:	d101      	bne.n	8014286 <__sflush_r+0x76>
 8014282:	682b      	ldr	r3, [r5, #0]
 8014284:	b903      	cbnz	r3, 8014288 <__sflush_r+0x78>
 8014286:	6560      	str	r0, [r4, #84]	; 0x54
 8014288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801428a:	602f      	str	r7, [r5, #0]
 801428c:	2900      	cmp	r1, #0
 801428e:	d0cb      	beq.n	8014228 <__sflush_r+0x18>
 8014290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014294:	4299      	cmp	r1, r3
 8014296:	d002      	beq.n	801429e <__sflush_r+0x8e>
 8014298:	4628      	mov	r0, r5
 801429a:	f7fd fbdf 	bl	8011a5c <_free_r>
 801429e:	2000      	movs	r0, #0
 80142a0:	6360      	str	r0, [r4, #52]	; 0x34
 80142a2:	e7c2      	b.n	801422a <__sflush_r+0x1a>
 80142a4:	6a21      	ldr	r1, [r4, #32]
 80142a6:	2301      	movs	r3, #1
 80142a8:	4628      	mov	r0, r5
 80142aa:	47b0      	blx	r6
 80142ac:	1c41      	adds	r1, r0, #1
 80142ae:	d1c7      	bne.n	8014240 <__sflush_r+0x30>
 80142b0:	682b      	ldr	r3, [r5, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d0c4      	beq.n	8014240 <__sflush_r+0x30>
 80142b6:	2b1d      	cmp	r3, #29
 80142b8:	d001      	beq.n	80142be <__sflush_r+0xae>
 80142ba:	2b16      	cmp	r3, #22
 80142bc:	d101      	bne.n	80142c2 <__sflush_r+0xb2>
 80142be:	602f      	str	r7, [r5, #0]
 80142c0:	e7b2      	b.n	8014228 <__sflush_r+0x18>
 80142c2:	89a3      	ldrh	r3, [r4, #12]
 80142c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142c8:	81a3      	strh	r3, [r4, #12]
 80142ca:	e7ae      	b.n	801422a <__sflush_r+0x1a>
 80142cc:	690f      	ldr	r7, [r1, #16]
 80142ce:	2f00      	cmp	r7, #0
 80142d0:	d0aa      	beq.n	8014228 <__sflush_r+0x18>
 80142d2:	0793      	lsls	r3, r2, #30
 80142d4:	bf18      	it	ne
 80142d6:	2300      	movne	r3, #0
 80142d8:	680e      	ldr	r6, [r1, #0]
 80142da:	bf08      	it	eq
 80142dc:	694b      	ldreq	r3, [r1, #20]
 80142de:	1bf6      	subs	r6, r6, r7
 80142e0:	600f      	str	r7, [r1, #0]
 80142e2:	608b      	str	r3, [r1, #8]
 80142e4:	2e00      	cmp	r6, #0
 80142e6:	dd9f      	ble.n	8014228 <__sflush_r+0x18>
 80142e8:	4633      	mov	r3, r6
 80142ea:	463a      	mov	r2, r7
 80142ec:	4628      	mov	r0, r5
 80142ee:	6a21      	ldr	r1, [r4, #32]
 80142f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80142f4:	47e0      	blx	ip
 80142f6:	2800      	cmp	r0, #0
 80142f8:	dc06      	bgt.n	8014308 <__sflush_r+0xf8>
 80142fa:	89a3      	ldrh	r3, [r4, #12]
 80142fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014304:	81a3      	strh	r3, [r4, #12]
 8014306:	e790      	b.n	801422a <__sflush_r+0x1a>
 8014308:	4407      	add	r7, r0
 801430a:	1a36      	subs	r6, r6, r0
 801430c:	e7ea      	b.n	80142e4 <__sflush_r+0xd4>
 801430e:	bf00      	nop
 8014310:	20400001 	.word	0x20400001

08014314 <_fflush_r>:
 8014314:	b538      	push	{r3, r4, r5, lr}
 8014316:	690b      	ldr	r3, [r1, #16]
 8014318:	4605      	mov	r5, r0
 801431a:	460c      	mov	r4, r1
 801431c:	b913      	cbnz	r3, 8014324 <_fflush_r+0x10>
 801431e:	2500      	movs	r5, #0
 8014320:	4628      	mov	r0, r5
 8014322:	bd38      	pop	{r3, r4, r5, pc}
 8014324:	b118      	cbz	r0, 801432e <_fflush_r+0x1a>
 8014326:	6983      	ldr	r3, [r0, #24]
 8014328:	b90b      	cbnz	r3, 801432e <_fflush_r+0x1a>
 801432a:	f000 f887 	bl	801443c <__sinit>
 801432e:	4b14      	ldr	r3, [pc, #80]	; (8014380 <_fflush_r+0x6c>)
 8014330:	429c      	cmp	r4, r3
 8014332:	d11b      	bne.n	801436c <_fflush_r+0x58>
 8014334:	686c      	ldr	r4, [r5, #4]
 8014336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d0ef      	beq.n	801431e <_fflush_r+0xa>
 801433e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014340:	07d0      	lsls	r0, r2, #31
 8014342:	d404      	bmi.n	801434e <_fflush_r+0x3a>
 8014344:	0599      	lsls	r1, r3, #22
 8014346:	d402      	bmi.n	801434e <_fflush_r+0x3a>
 8014348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801434a:	f7ff fcd6 	bl	8013cfa <__retarget_lock_acquire_recursive>
 801434e:	4628      	mov	r0, r5
 8014350:	4621      	mov	r1, r4
 8014352:	f7ff ff5d 	bl	8014210 <__sflush_r>
 8014356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014358:	4605      	mov	r5, r0
 801435a:	07da      	lsls	r2, r3, #31
 801435c:	d4e0      	bmi.n	8014320 <_fflush_r+0xc>
 801435e:	89a3      	ldrh	r3, [r4, #12]
 8014360:	059b      	lsls	r3, r3, #22
 8014362:	d4dd      	bmi.n	8014320 <_fflush_r+0xc>
 8014364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014366:	f7ff fcc9 	bl	8013cfc <__retarget_lock_release_recursive>
 801436a:	e7d9      	b.n	8014320 <_fflush_r+0xc>
 801436c:	4b05      	ldr	r3, [pc, #20]	; (8014384 <_fflush_r+0x70>)
 801436e:	429c      	cmp	r4, r3
 8014370:	d101      	bne.n	8014376 <_fflush_r+0x62>
 8014372:	68ac      	ldr	r4, [r5, #8]
 8014374:	e7df      	b.n	8014336 <_fflush_r+0x22>
 8014376:	4b04      	ldr	r3, [pc, #16]	; (8014388 <_fflush_r+0x74>)
 8014378:	429c      	cmp	r4, r3
 801437a:	bf08      	it	eq
 801437c:	68ec      	ldreq	r4, [r5, #12]
 801437e:	e7da      	b.n	8014336 <_fflush_r+0x22>
 8014380:	0802e274 	.word	0x0802e274
 8014384:	0802e294 	.word	0x0802e294
 8014388:	0802e254 	.word	0x0802e254

0801438c <std>:
 801438c:	2300      	movs	r3, #0
 801438e:	b510      	push	{r4, lr}
 8014390:	4604      	mov	r4, r0
 8014392:	e9c0 3300 	strd	r3, r3, [r0]
 8014396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801439a:	6083      	str	r3, [r0, #8]
 801439c:	8181      	strh	r1, [r0, #12]
 801439e:	6643      	str	r3, [r0, #100]	; 0x64
 80143a0:	81c2      	strh	r2, [r0, #14]
 80143a2:	6183      	str	r3, [r0, #24]
 80143a4:	4619      	mov	r1, r3
 80143a6:	2208      	movs	r2, #8
 80143a8:	305c      	adds	r0, #92	; 0x5c
 80143aa:	f7fd fb4f 	bl	8011a4c <memset>
 80143ae:	4b05      	ldr	r3, [pc, #20]	; (80143c4 <std+0x38>)
 80143b0:	6224      	str	r4, [r4, #32]
 80143b2:	6263      	str	r3, [r4, #36]	; 0x24
 80143b4:	4b04      	ldr	r3, [pc, #16]	; (80143c8 <std+0x3c>)
 80143b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80143b8:	4b04      	ldr	r3, [pc, #16]	; (80143cc <std+0x40>)
 80143ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80143bc:	4b04      	ldr	r3, [pc, #16]	; (80143d0 <std+0x44>)
 80143be:	6323      	str	r3, [r4, #48]	; 0x30
 80143c0:	bd10      	pop	{r4, pc}
 80143c2:	bf00      	nop
 80143c4:	080146d9 	.word	0x080146d9
 80143c8:	080146fb 	.word	0x080146fb
 80143cc:	08014733 	.word	0x08014733
 80143d0:	08014757 	.word	0x08014757

080143d4 <_cleanup_r>:
 80143d4:	4901      	ldr	r1, [pc, #4]	; (80143dc <_cleanup_r+0x8>)
 80143d6:	f000 b8af 	b.w	8014538 <_fwalk_reent>
 80143da:	bf00      	nop
 80143dc:	08014315 	.word	0x08014315

080143e0 <__sfmoreglue>:
 80143e0:	2268      	movs	r2, #104	; 0x68
 80143e2:	b570      	push	{r4, r5, r6, lr}
 80143e4:	1e4d      	subs	r5, r1, #1
 80143e6:	4355      	muls	r5, r2
 80143e8:	460e      	mov	r6, r1
 80143ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143ee:	f7fd fb9d 	bl	8011b2c <_malloc_r>
 80143f2:	4604      	mov	r4, r0
 80143f4:	b140      	cbz	r0, 8014408 <__sfmoreglue+0x28>
 80143f6:	2100      	movs	r1, #0
 80143f8:	e9c0 1600 	strd	r1, r6, [r0]
 80143fc:	300c      	adds	r0, #12
 80143fe:	60a0      	str	r0, [r4, #8]
 8014400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014404:	f7fd fb22 	bl	8011a4c <memset>
 8014408:	4620      	mov	r0, r4
 801440a:	bd70      	pop	{r4, r5, r6, pc}

0801440c <__sfp_lock_acquire>:
 801440c:	4801      	ldr	r0, [pc, #4]	; (8014414 <__sfp_lock_acquire+0x8>)
 801440e:	f7ff bc74 	b.w	8013cfa <__retarget_lock_acquire_recursive>
 8014412:	bf00      	nop
 8014414:	2000166d 	.word	0x2000166d

08014418 <__sfp_lock_release>:
 8014418:	4801      	ldr	r0, [pc, #4]	; (8014420 <__sfp_lock_release+0x8>)
 801441a:	f7ff bc6f 	b.w	8013cfc <__retarget_lock_release_recursive>
 801441e:	bf00      	nop
 8014420:	2000166d 	.word	0x2000166d

08014424 <__sinit_lock_acquire>:
 8014424:	4801      	ldr	r0, [pc, #4]	; (801442c <__sinit_lock_acquire+0x8>)
 8014426:	f7ff bc68 	b.w	8013cfa <__retarget_lock_acquire_recursive>
 801442a:	bf00      	nop
 801442c:	2000166e 	.word	0x2000166e

08014430 <__sinit_lock_release>:
 8014430:	4801      	ldr	r0, [pc, #4]	; (8014438 <__sinit_lock_release+0x8>)
 8014432:	f7ff bc63 	b.w	8013cfc <__retarget_lock_release_recursive>
 8014436:	bf00      	nop
 8014438:	2000166e 	.word	0x2000166e

0801443c <__sinit>:
 801443c:	b510      	push	{r4, lr}
 801443e:	4604      	mov	r4, r0
 8014440:	f7ff fff0 	bl	8014424 <__sinit_lock_acquire>
 8014444:	69a3      	ldr	r3, [r4, #24]
 8014446:	b11b      	cbz	r3, 8014450 <__sinit+0x14>
 8014448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801444c:	f7ff bff0 	b.w	8014430 <__sinit_lock_release>
 8014450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014454:	6523      	str	r3, [r4, #80]	; 0x50
 8014456:	4b13      	ldr	r3, [pc, #76]	; (80144a4 <__sinit+0x68>)
 8014458:	4a13      	ldr	r2, [pc, #76]	; (80144a8 <__sinit+0x6c>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	62a2      	str	r2, [r4, #40]	; 0x28
 801445e:	42a3      	cmp	r3, r4
 8014460:	bf08      	it	eq
 8014462:	2301      	moveq	r3, #1
 8014464:	4620      	mov	r0, r4
 8014466:	bf08      	it	eq
 8014468:	61a3      	streq	r3, [r4, #24]
 801446a:	f000 f81f 	bl	80144ac <__sfp>
 801446e:	6060      	str	r0, [r4, #4]
 8014470:	4620      	mov	r0, r4
 8014472:	f000 f81b 	bl	80144ac <__sfp>
 8014476:	60a0      	str	r0, [r4, #8]
 8014478:	4620      	mov	r0, r4
 801447a:	f000 f817 	bl	80144ac <__sfp>
 801447e:	2200      	movs	r2, #0
 8014480:	2104      	movs	r1, #4
 8014482:	60e0      	str	r0, [r4, #12]
 8014484:	6860      	ldr	r0, [r4, #4]
 8014486:	f7ff ff81 	bl	801438c <std>
 801448a:	2201      	movs	r2, #1
 801448c:	2109      	movs	r1, #9
 801448e:	68a0      	ldr	r0, [r4, #8]
 8014490:	f7ff ff7c 	bl	801438c <std>
 8014494:	2202      	movs	r2, #2
 8014496:	2112      	movs	r1, #18
 8014498:	68e0      	ldr	r0, [r4, #12]
 801449a:	f7ff ff77 	bl	801438c <std>
 801449e:	2301      	movs	r3, #1
 80144a0:	61a3      	str	r3, [r4, #24]
 80144a2:	e7d1      	b.n	8014448 <__sinit+0xc>
 80144a4:	0802ded8 	.word	0x0802ded8
 80144a8:	080143d5 	.word	0x080143d5

080144ac <__sfp>:
 80144ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ae:	4607      	mov	r7, r0
 80144b0:	f7ff ffac 	bl	801440c <__sfp_lock_acquire>
 80144b4:	4b1e      	ldr	r3, [pc, #120]	; (8014530 <__sfp+0x84>)
 80144b6:	681e      	ldr	r6, [r3, #0]
 80144b8:	69b3      	ldr	r3, [r6, #24]
 80144ba:	b913      	cbnz	r3, 80144c2 <__sfp+0x16>
 80144bc:	4630      	mov	r0, r6
 80144be:	f7ff ffbd 	bl	801443c <__sinit>
 80144c2:	3648      	adds	r6, #72	; 0x48
 80144c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144c8:	3b01      	subs	r3, #1
 80144ca:	d503      	bpl.n	80144d4 <__sfp+0x28>
 80144cc:	6833      	ldr	r3, [r6, #0]
 80144ce:	b30b      	cbz	r3, 8014514 <__sfp+0x68>
 80144d0:	6836      	ldr	r6, [r6, #0]
 80144d2:	e7f7      	b.n	80144c4 <__sfp+0x18>
 80144d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144d8:	b9d5      	cbnz	r5, 8014510 <__sfp+0x64>
 80144da:	4b16      	ldr	r3, [pc, #88]	; (8014534 <__sfp+0x88>)
 80144dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144e0:	60e3      	str	r3, [r4, #12]
 80144e2:	6665      	str	r5, [r4, #100]	; 0x64
 80144e4:	f7ff fc08 	bl	8013cf8 <__retarget_lock_init_recursive>
 80144e8:	f7ff ff96 	bl	8014418 <__sfp_lock_release>
 80144ec:	2208      	movs	r2, #8
 80144ee:	4629      	mov	r1, r5
 80144f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144f8:	6025      	str	r5, [r4, #0]
 80144fa:	61a5      	str	r5, [r4, #24]
 80144fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014500:	f7fd faa4 	bl	8011a4c <memset>
 8014504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801450c:	4620      	mov	r0, r4
 801450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014510:	3468      	adds	r4, #104	; 0x68
 8014512:	e7d9      	b.n	80144c8 <__sfp+0x1c>
 8014514:	2104      	movs	r1, #4
 8014516:	4638      	mov	r0, r7
 8014518:	f7ff ff62 	bl	80143e0 <__sfmoreglue>
 801451c:	4604      	mov	r4, r0
 801451e:	6030      	str	r0, [r6, #0]
 8014520:	2800      	cmp	r0, #0
 8014522:	d1d5      	bne.n	80144d0 <__sfp+0x24>
 8014524:	f7ff ff78 	bl	8014418 <__sfp_lock_release>
 8014528:	230c      	movs	r3, #12
 801452a:	603b      	str	r3, [r7, #0]
 801452c:	e7ee      	b.n	801450c <__sfp+0x60>
 801452e:	bf00      	nop
 8014530:	0802ded8 	.word	0x0802ded8
 8014534:	ffff0001 	.word	0xffff0001

08014538 <_fwalk_reent>:
 8014538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801453c:	4606      	mov	r6, r0
 801453e:	4688      	mov	r8, r1
 8014540:	2700      	movs	r7, #0
 8014542:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801454a:	f1b9 0901 	subs.w	r9, r9, #1
 801454e:	d505      	bpl.n	801455c <_fwalk_reent+0x24>
 8014550:	6824      	ldr	r4, [r4, #0]
 8014552:	2c00      	cmp	r4, #0
 8014554:	d1f7      	bne.n	8014546 <_fwalk_reent+0xe>
 8014556:	4638      	mov	r0, r7
 8014558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801455c:	89ab      	ldrh	r3, [r5, #12]
 801455e:	2b01      	cmp	r3, #1
 8014560:	d907      	bls.n	8014572 <_fwalk_reent+0x3a>
 8014562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014566:	3301      	adds	r3, #1
 8014568:	d003      	beq.n	8014572 <_fwalk_reent+0x3a>
 801456a:	4629      	mov	r1, r5
 801456c:	4630      	mov	r0, r6
 801456e:	47c0      	blx	r8
 8014570:	4307      	orrs	r7, r0
 8014572:	3568      	adds	r5, #104	; 0x68
 8014574:	e7e9      	b.n	801454a <_fwalk_reent+0x12>

08014576 <__swhatbuf_r>:
 8014576:	b570      	push	{r4, r5, r6, lr}
 8014578:	460e      	mov	r6, r1
 801457a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801457e:	4614      	mov	r4, r2
 8014580:	2900      	cmp	r1, #0
 8014582:	461d      	mov	r5, r3
 8014584:	b096      	sub	sp, #88	; 0x58
 8014586:	da08      	bge.n	801459a <__swhatbuf_r+0x24>
 8014588:	2200      	movs	r2, #0
 801458a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801458e:	602a      	str	r2, [r5, #0]
 8014590:	061a      	lsls	r2, r3, #24
 8014592:	d410      	bmi.n	80145b6 <__swhatbuf_r+0x40>
 8014594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014598:	e00e      	b.n	80145b8 <__swhatbuf_r+0x42>
 801459a:	466a      	mov	r2, sp
 801459c:	f000 f902 	bl	80147a4 <_fstat_r>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	dbf1      	blt.n	8014588 <__swhatbuf_r+0x12>
 80145a4:	9a01      	ldr	r2, [sp, #4]
 80145a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145ae:	425a      	negs	r2, r3
 80145b0:	415a      	adcs	r2, r3
 80145b2:	602a      	str	r2, [r5, #0]
 80145b4:	e7ee      	b.n	8014594 <__swhatbuf_r+0x1e>
 80145b6:	2340      	movs	r3, #64	; 0x40
 80145b8:	2000      	movs	r0, #0
 80145ba:	6023      	str	r3, [r4, #0]
 80145bc:	b016      	add	sp, #88	; 0x58
 80145be:	bd70      	pop	{r4, r5, r6, pc}

080145c0 <__smakebuf_r>:
 80145c0:	898b      	ldrh	r3, [r1, #12]
 80145c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145c4:	079d      	lsls	r5, r3, #30
 80145c6:	4606      	mov	r6, r0
 80145c8:	460c      	mov	r4, r1
 80145ca:	d507      	bpl.n	80145dc <__smakebuf_r+0x1c>
 80145cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145d0:	6023      	str	r3, [r4, #0]
 80145d2:	6123      	str	r3, [r4, #16]
 80145d4:	2301      	movs	r3, #1
 80145d6:	6163      	str	r3, [r4, #20]
 80145d8:	b002      	add	sp, #8
 80145da:	bd70      	pop	{r4, r5, r6, pc}
 80145dc:	466a      	mov	r2, sp
 80145de:	ab01      	add	r3, sp, #4
 80145e0:	f7ff ffc9 	bl	8014576 <__swhatbuf_r>
 80145e4:	9900      	ldr	r1, [sp, #0]
 80145e6:	4605      	mov	r5, r0
 80145e8:	4630      	mov	r0, r6
 80145ea:	f7fd fa9f 	bl	8011b2c <_malloc_r>
 80145ee:	b948      	cbnz	r0, 8014604 <__smakebuf_r+0x44>
 80145f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145f4:	059a      	lsls	r2, r3, #22
 80145f6:	d4ef      	bmi.n	80145d8 <__smakebuf_r+0x18>
 80145f8:	f023 0303 	bic.w	r3, r3, #3
 80145fc:	f043 0302 	orr.w	r3, r3, #2
 8014600:	81a3      	strh	r3, [r4, #12]
 8014602:	e7e3      	b.n	80145cc <__smakebuf_r+0xc>
 8014604:	4b0d      	ldr	r3, [pc, #52]	; (801463c <__smakebuf_r+0x7c>)
 8014606:	62b3      	str	r3, [r6, #40]	; 0x28
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	6020      	str	r0, [r4, #0]
 801460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014610:	81a3      	strh	r3, [r4, #12]
 8014612:	9b00      	ldr	r3, [sp, #0]
 8014614:	6120      	str	r0, [r4, #16]
 8014616:	6163      	str	r3, [r4, #20]
 8014618:	9b01      	ldr	r3, [sp, #4]
 801461a:	b15b      	cbz	r3, 8014634 <__smakebuf_r+0x74>
 801461c:	4630      	mov	r0, r6
 801461e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014622:	f000 f8d1 	bl	80147c8 <_isatty_r>
 8014626:	b128      	cbz	r0, 8014634 <__smakebuf_r+0x74>
 8014628:	89a3      	ldrh	r3, [r4, #12]
 801462a:	f023 0303 	bic.w	r3, r3, #3
 801462e:	f043 0301 	orr.w	r3, r3, #1
 8014632:	81a3      	strh	r3, [r4, #12]
 8014634:	89a0      	ldrh	r0, [r4, #12]
 8014636:	4305      	orrs	r5, r0
 8014638:	81a5      	strh	r5, [r4, #12]
 801463a:	e7cd      	b.n	80145d8 <__smakebuf_r+0x18>
 801463c:	080143d5 	.word	0x080143d5

08014640 <_malloc_usable_size_r>:
 8014640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014644:	1f18      	subs	r0, r3, #4
 8014646:	2b00      	cmp	r3, #0
 8014648:	bfbc      	itt	lt
 801464a:	580b      	ldrlt	r3, [r1, r0]
 801464c:	18c0      	addlt	r0, r0, r3
 801464e:	4770      	bx	lr

08014650 <_raise_r>:
 8014650:	291f      	cmp	r1, #31
 8014652:	b538      	push	{r3, r4, r5, lr}
 8014654:	4604      	mov	r4, r0
 8014656:	460d      	mov	r5, r1
 8014658:	d904      	bls.n	8014664 <_raise_r+0x14>
 801465a:	2316      	movs	r3, #22
 801465c:	6003      	str	r3, [r0, #0]
 801465e:	f04f 30ff 	mov.w	r0, #4294967295
 8014662:	bd38      	pop	{r3, r4, r5, pc}
 8014664:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014666:	b112      	cbz	r2, 801466e <_raise_r+0x1e>
 8014668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801466c:	b94b      	cbnz	r3, 8014682 <_raise_r+0x32>
 801466e:	4620      	mov	r0, r4
 8014670:	f000 f830 	bl	80146d4 <_getpid_r>
 8014674:	462a      	mov	r2, r5
 8014676:	4601      	mov	r1, r0
 8014678:	4620      	mov	r0, r4
 801467a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801467e:	f000 b817 	b.w	80146b0 <_kill_r>
 8014682:	2b01      	cmp	r3, #1
 8014684:	d00a      	beq.n	801469c <_raise_r+0x4c>
 8014686:	1c59      	adds	r1, r3, #1
 8014688:	d103      	bne.n	8014692 <_raise_r+0x42>
 801468a:	2316      	movs	r3, #22
 801468c:	6003      	str	r3, [r0, #0]
 801468e:	2001      	movs	r0, #1
 8014690:	e7e7      	b.n	8014662 <_raise_r+0x12>
 8014692:	2400      	movs	r4, #0
 8014694:	4628      	mov	r0, r5
 8014696:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801469a:	4798      	blx	r3
 801469c:	2000      	movs	r0, #0
 801469e:	e7e0      	b.n	8014662 <_raise_r+0x12>

080146a0 <raise>:
 80146a0:	4b02      	ldr	r3, [pc, #8]	; (80146ac <raise+0xc>)
 80146a2:	4601      	mov	r1, r0
 80146a4:	6818      	ldr	r0, [r3, #0]
 80146a6:	f7ff bfd3 	b.w	8014650 <_raise_r>
 80146aa:	bf00      	nop
 80146ac:	20000168 	.word	0x20000168

080146b0 <_kill_r>:
 80146b0:	b538      	push	{r3, r4, r5, lr}
 80146b2:	2300      	movs	r3, #0
 80146b4:	4d06      	ldr	r5, [pc, #24]	; (80146d0 <_kill_r+0x20>)
 80146b6:	4604      	mov	r4, r0
 80146b8:	4608      	mov	r0, r1
 80146ba:	4611      	mov	r1, r2
 80146bc:	602b      	str	r3, [r5, #0]
 80146be:	f7ef f88c 	bl	80037da <_kill>
 80146c2:	1c43      	adds	r3, r0, #1
 80146c4:	d102      	bne.n	80146cc <_kill_r+0x1c>
 80146c6:	682b      	ldr	r3, [r5, #0]
 80146c8:	b103      	cbz	r3, 80146cc <_kill_r+0x1c>
 80146ca:	6023      	str	r3, [r4, #0]
 80146cc:	bd38      	pop	{r3, r4, r5, pc}
 80146ce:	bf00      	nop
 80146d0:	20001668 	.word	0x20001668

080146d4 <_getpid_r>:
 80146d4:	f7ef b87a 	b.w	80037cc <_getpid>

080146d8 <__sread>:
 80146d8:	b510      	push	{r4, lr}
 80146da:	460c      	mov	r4, r1
 80146dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146e0:	f000 f894 	bl	801480c <_read_r>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	bfab      	itete	ge
 80146e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146ea:	89a3      	ldrhlt	r3, [r4, #12]
 80146ec:	181b      	addge	r3, r3, r0
 80146ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146f2:	bfac      	ite	ge
 80146f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80146f6:	81a3      	strhlt	r3, [r4, #12]
 80146f8:	bd10      	pop	{r4, pc}

080146fa <__swrite>:
 80146fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146fe:	461f      	mov	r7, r3
 8014700:	898b      	ldrh	r3, [r1, #12]
 8014702:	4605      	mov	r5, r0
 8014704:	05db      	lsls	r3, r3, #23
 8014706:	460c      	mov	r4, r1
 8014708:	4616      	mov	r6, r2
 801470a:	d505      	bpl.n	8014718 <__swrite+0x1e>
 801470c:	2302      	movs	r3, #2
 801470e:	2200      	movs	r2, #0
 8014710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014714:	f000 f868 	bl	80147e8 <_lseek_r>
 8014718:	89a3      	ldrh	r3, [r4, #12]
 801471a:	4632      	mov	r2, r6
 801471c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014720:	81a3      	strh	r3, [r4, #12]
 8014722:	4628      	mov	r0, r5
 8014724:	463b      	mov	r3, r7
 8014726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801472a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801472e:	f000 b817 	b.w	8014760 <_write_r>

08014732 <__sseek>:
 8014732:	b510      	push	{r4, lr}
 8014734:	460c      	mov	r4, r1
 8014736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801473a:	f000 f855 	bl	80147e8 <_lseek_r>
 801473e:	1c43      	adds	r3, r0, #1
 8014740:	89a3      	ldrh	r3, [r4, #12]
 8014742:	bf15      	itete	ne
 8014744:	6560      	strne	r0, [r4, #84]	; 0x54
 8014746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801474a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801474e:	81a3      	strheq	r3, [r4, #12]
 8014750:	bf18      	it	ne
 8014752:	81a3      	strhne	r3, [r4, #12]
 8014754:	bd10      	pop	{r4, pc}

08014756 <__sclose>:
 8014756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475a:	f000 b813 	b.w	8014784 <_close_r>
	...

08014760 <_write_r>:
 8014760:	b538      	push	{r3, r4, r5, lr}
 8014762:	4604      	mov	r4, r0
 8014764:	4608      	mov	r0, r1
 8014766:	4611      	mov	r1, r2
 8014768:	2200      	movs	r2, #0
 801476a:	4d05      	ldr	r5, [pc, #20]	; (8014780 <_write_r+0x20>)
 801476c:	602a      	str	r2, [r5, #0]
 801476e:	461a      	mov	r2, r3
 8014770:	f7ef f86a 	bl	8003848 <_write>
 8014774:	1c43      	adds	r3, r0, #1
 8014776:	d102      	bne.n	801477e <_write_r+0x1e>
 8014778:	682b      	ldr	r3, [r5, #0]
 801477a:	b103      	cbz	r3, 801477e <_write_r+0x1e>
 801477c:	6023      	str	r3, [r4, #0]
 801477e:	bd38      	pop	{r3, r4, r5, pc}
 8014780:	20001668 	.word	0x20001668

08014784 <_close_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	2300      	movs	r3, #0
 8014788:	4d05      	ldr	r5, [pc, #20]	; (80147a0 <_close_r+0x1c>)
 801478a:	4604      	mov	r4, r0
 801478c:	4608      	mov	r0, r1
 801478e:	602b      	str	r3, [r5, #0]
 8014790:	f7ef f876 	bl	8003880 <_close>
 8014794:	1c43      	adds	r3, r0, #1
 8014796:	d102      	bne.n	801479e <_close_r+0x1a>
 8014798:	682b      	ldr	r3, [r5, #0]
 801479a:	b103      	cbz	r3, 801479e <_close_r+0x1a>
 801479c:	6023      	str	r3, [r4, #0]
 801479e:	bd38      	pop	{r3, r4, r5, pc}
 80147a0:	20001668 	.word	0x20001668

080147a4 <_fstat_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	2300      	movs	r3, #0
 80147a8:	4d06      	ldr	r5, [pc, #24]	; (80147c4 <_fstat_r+0x20>)
 80147aa:	4604      	mov	r4, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	4611      	mov	r1, r2
 80147b0:	602b      	str	r3, [r5, #0]
 80147b2:	f7ef f870 	bl	8003896 <_fstat>
 80147b6:	1c43      	adds	r3, r0, #1
 80147b8:	d102      	bne.n	80147c0 <_fstat_r+0x1c>
 80147ba:	682b      	ldr	r3, [r5, #0]
 80147bc:	b103      	cbz	r3, 80147c0 <_fstat_r+0x1c>
 80147be:	6023      	str	r3, [r4, #0]
 80147c0:	bd38      	pop	{r3, r4, r5, pc}
 80147c2:	bf00      	nop
 80147c4:	20001668 	.word	0x20001668

080147c8 <_isatty_r>:
 80147c8:	b538      	push	{r3, r4, r5, lr}
 80147ca:	2300      	movs	r3, #0
 80147cc:	4d05      	ldr	r5, [pc, #20]	; (80147e4 <_isatty_r+0x1c>)
 80147ce:	4604      	mov	r4, r0
 80147d0:	4608      	mov	r0, r1
 80147d2:	602b      	str	r3, [r5, #0]
 80147d4:	f7ef f86e 	bl	80038b4 <_isatty>
 80147d8:	1c43      	adds	r3, r0, #1
 80147da:	d102      	bne.n	80147e2 <_isatty_r+0x1a>
 80147dc:	682b      	ldr	r3, [r5, #0]
 80147de:	b103      	cbz	r3, 80147e2 <_isatty_r+0x1a>
 80147e0:	6023      	str	r3, [r4, #0]
 80147e2:	bd38      	pop	{r3, r4, r5, pc}
 80147e4:	20001668 	.word	0x20001668

080147e8 <_lseek_r>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4604      	mov	r4, r0
 80147ec:	4608      	mov	r0, r1
 80147ee:	4611      	mov	r1, r2
 80147f0:	2200      	movs	r2, #0
 80147f2:	4d05      	ldr	r5, [pc, #20]	; (8014808 <_lseek_r+0x20>)
 80147f4:	602a      	str	r2, [r5, #0]
 80147f6:	461a      	mov	r2, r3
 80147f8:	f7ef f866 	bl	80038c8 <_lseek>
 80147fc:	1c43      	adds	r3, r0, #1
 80147fe:	d102      	bne.n	8014806 <_lseek_r+0x1e>
 8014800:	682b      	ldr	r3, [r5, #0]
 8014802:	b103      	cbz	r3, 8014806 <_lseek_r+0x1e>
 8014804:	6023      	str	r3, [r4, #0]
 8014806:	bd38      	pop	{r3, r4, r5, pc}
 8014808:	20001668 	.word	0x20001668

0801480c <_read_r>:
 801480c:	b538      	push	{r3, r4, r5, lr}
 801480e:	4604      	mov	r4, r0
 8014810:	4608      	mov	r0, r1
 8014812:	4611      	mov	r1, r2
 8014814:	2200      	movs	r2, #0
 8014816:	4d05      	ldr	r5, [pc, #20]	; (801482c <_read_r+0x20>)
 8014818:	602a      	str	r2, [r5, #0]
 801481a:	461a      	mov	r2, r3
 801481c:	f7ee fff7 	bl	800380e <_read>
 8014820:	1c43      	adds	r3, r0, #1
 8014822:	d102      	bne.n	801482a <_read_r+0x1e>
 8014824:	682b      	ldr	r3, [r5, #0]
 8014826:	b103      	cbz	r3, 801482a <_read_r+0x1e>
 8014828:	6023      	str	r3, [r4, #0]
 801482a:	bd38      	pop	{r3, r4, r5, pc}
 801482c:	20001668 	.word	0x20001668

08014830 <fmin>:
 8014830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014832:	4604      	mov	r4, r0
 8014834:	460d      	mov	r5, r1
 8014836:	4616      	mov	r6, r2
 8014838:	461f      	mov	r7, r3
 801483a:	f000 f813 	bl	8014864 <__fpclassifyd>
 801483e:	b158      	cbz	r0, 8014858 <fmin+0x28>
 8014840:	4630      	mov	r0, r6
 8014842:	4639      	mov	r1, r7
 8014844:	f000 f80e 	bl	8014864 <__fpclassifyd>
 8014848:	b140      	cbz	r0, 801485c <fmin+0x2c>
 801484a:	4632      	mov	r2, r6
 801484c:	463b      	mov	r3, r7
 801484e:	4620      	mov	r0, r4
 8014850:	4629      	mov	r1, r5
 8014852:	f7ec f91f 	bl	8000a94 <__aeabi_dcmplt>
 8014856:	b908      	cbnz	r0, 801485c <fmin+0x2c>
 8014858:	4634      	mov	r4, r6
 801485a:	463d      	mov	r5, r7
 801485c:	4620      	mov	r0, r4
 801485e:	4629      	mov	r1, r5
 8014860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014864 <__fpclassifyd>:
 8014864:	b510      	push	{r4, lr}
 8014866:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801486a:	460b      	mov	r3, r1
 801486c:	d019      	beq.n	80148a2 <__fpclassifyd+0x3e>
 801486e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8014872:	490e      	ldr	r1, [pc, #56]	; (80148ac <__fpclassifyd+0x48>)
 8014874:	428a      	cmp	r2, r1
 8014876:	d90e      	bls.n	8014896 <__fpclassifyd+0x32>
 8014878:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801487c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8014880:	428a      	cmp	r2, r1
 8014882:	d908      	bls.n	8014896 <__fpclassifyd+0x32>
 8014884:	4a0a      	ldr	r2, [pc, #40]	; (80148b0 <__fpclassifyd+0x4c>)
 8014886:	4213      	tst	r3, r2
 8014888:	d007      	beq.n	801489a <__fpclassifyd+0x36>
 801488a:	4294      	cmp	r4, r2
 801488c:	d107      	bne.n	801489e <__fpclassifyd+0x3a>
 801488e:	fab0 f080 	clz	r0, r0
 8014892:	0940      	lsrs	r0, r0, #5
 8014894:	bd10      	pop	{r4, pc}
 8014896:	2004      	movs	r0, #4
 8014898:	e7fc      	b.n	8014894 <__fpclassifyd+0x30>
 801489a:	2003      	movs	r0, #3
 801489c:	e7fa      	b.n	8014894 <__fpclassifyd+0x30>
 801489e:	2000      	movs	r0, #0
 80148a0:	e7f8      	b.n	8014894 <__fpclassifyd+0x30>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d1ee      	bne.n	8014884 <__fpclassifyd+0x20>
 80148a6:	2002      	movs	r0, #2
 80148a8:	e7f4      	b.n	8014894 <__fpclassifyd+0x30>
 80148aa:	bf00      	nop
 80148ac:	7fdfffff 	.word	0x7fdfffff
 80148b0:	7ff00000 	.word	0x7ff00000

080148b4 <sqrt>:
 80148b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b6:	4606      	mov	r6, r0
 80148b8:	460f      	mov	r7, r1
 80148ba:	f000 f81f 	bl	80148fc <__ieee754_sqrt>
 80148be:	4632      	mov	r2, r6
 80148c0:	4604      	mov	r4, r0
 80148c2:	460d      	mov	r5, r1
 80148c4:	463b      	mov	r3, r7
 80148c6:	4630      	mov	r0, r6
 80148c8:	4639      	mov	r1, r7
 80148ca:	f7ec f90b 	bl	8000ae4 <__aeabi_dcmpun>
 80148ce:	b990      	cbnz	r0, 80148f6 <sqrt+0x42>
 80148d0:	2200      	movs	r2, #0
 80148d2:	2300      	movs	r3, #0
 80148d4:	4630      	mov	r0, r6
 80148d6:	4639      	mov	r1, r7
 80148d8:	f7ec f8dc 	bl	8000a94 <__aeabi_dcmplt>
 80148dc:	b158      	cbz	r0, 80148f6 <sqrt+0x42>
 80148de:	f7fd f87b 	bl	80119d8 <__errno>
 80148e2:	2321      	movs	r3, #33	; 0x21
 80148e4:	2200      	movs	r2, #0
 80148e6:	6003      	str	r3, [r0, #0]
 80148e8:	2300      	movs	r3, #0
 80148ea:	4610      	mov	r0, r2
 80148ec:	4619      	mov	r1, r3
 80148ee:	f7eb ff89 	bl	8000804 <__aeabi_ddiv>
 80148f2:	4604      	mov	r4, r0
 80148f4:	460d      	mov	r5, r1
 80148f6:	4620      	mov	r0, r4
 80148f8:	4629      	mov	r1, r5
 80148fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148fc <__ieee754_sqrt>:
 80148fc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8014a58 <__ieee754_sqrt+0x15c>
 8014900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014904:	ea3c 0c01 	bics.w	ip, ip, r1
 8014908:	4606      	mov	r6, r0
 801490a:	460d      	mov	r5, r1
 801490c:	460c      	mov	r4, r1
 801490e:	460a      	mov	r2, r1
 8014910:	4607      	mov	r7, r0
 8014912:	4603      	mov	r3, r0
 8014914:	d10f      	bne.n	8014936 <__ieee754_sqrt+0x3a>
 8014916:	4602      	mov	r2, r0
 8014918:	460b      	mov	r3, r1
 801491a:	f7eb fe49 	bl	80005b0 <__aeabi_dmul>
 801491e:	4602      	mov	r2, r0
 8014920:	460b      	mov	r3, r1
 8014922:	4630      	mov	r0, r6
 8014924:	4629      	mov	r1, r5
 8014926:	f7eb fc8d 	bl	8000244 <__adddf3>
 801492a:	4606      	mov	r6, r0
 801492c:	460d      	mov	r5, r1
 801492e:	4630      	mov	r0, r6
 8014930:	4629      	mov	r1, r5
 8014932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014936:	2900      	cmp	r1, #0
 8014938:	dc0e      	bgt.n	8014958 <__ieee754_sqrt+0x5c>
 801493a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801493e:	ea5c 0707 	orrs.w	r7, ip, r7
 8014942:	d0f4      	beq.n	801492e <__ieee754_sqrt+0x32>
 8014944:	b141      	cbz	r1, 8014958 <__ieee754_sqrt+0x5c>
 8014946:	4602      	mov	r2, r0
 8014948:	460b      	mov	r3, r1
 801494a:	f7eb fc79 	bl	8000240 <__aeabi_dsub>
 801494e:	4602      	mov	r2, r0
 8014950:	460b      	mov	r3, r1
 8014952:	f7eb ff57 	bl	8000804 <__aeabi_ddiv>
 8014956:	e7e8      	b.n	801492a <__ieee754_sqrt+0x2e>
 8014958:	1521      	asrs	r1, r4, #20
 801495a:	d075      	beq.n	8014a48 <__ieee754_sqrt+0x14c>
 801495c:	07cc      	lsls	r4, r1, #31
 801495e:	f04f 0400 	mov.w	r4, #0
 8014962:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014966:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 801496a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801496e:	bf5e      	ittt	pl
 8014970:	0fd9      	lsrpl	r1, r3, #31
 8014972:	005b      	lslpl	r3, r3, #1
 8014974:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8014978:	0fd9      	lsrs	r1, r3, #31
 801497a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801497e:	2516      	movs	r5, #22
 8014980:	4620      	mov	r0, r4
 8014982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014986:	107f      	asrs	r7, r7, #1
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	1846      	adds	r6, r0, r1
 801498c:	4296      	cmp	r6, r2
 801498e:	bfde      	ittt	le
 8014990:	1b92      	suble	r2, r2, r6
 8014992:	1870      	addle	r0, r6, r1
 8014994:	1864      	addle	r4, r4, r1
 8014996:	0052      	lsls	r2, r2, #1
 8014998:	3d01      	subs	r5, #1
 801499a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801499e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80149a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149a6:	d1f0      	bne.n	801498a <__ieee754_sqrt+0x8e>
 80149a8:	4629      	mov	r1, r5
 80149aa:	f04f 0e20 	mov.w	lr, #32
 80149ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80149b2:	4282      	cmp	r2, r0
 80149b4:	eb06 0c05 	add.w	ip, r6, r5
 80149b8:	dc02      	bgt.n	80149c0 <__ieee754_sqrt+0xc4>
 80149ba:	d113      	bne.n	80149e4 <__ieee754_sqrt+0xe8>
 80149bc:	459c      	cmp	ip, r3
 80149be:	d811      	bhi.n	80149e4 <__ieee754_sqrt+0xe8>
 80149c0:	f1bc 0f00 	cmp.w	ip, #0
 80149c4:	eb0c 0506 	add.w	r5, ip, r6
 80149c8:	da43      	bge.n	8014a52 <__ieee754_sqrt+0x156>
 80149ca:	2d00      	cmp	r5, #0
 80149cc:	db41      	blt.n	8014a52 <__ieee754_sqrt+0x156>
 80149ce:	f100 0801 	add.w	r8, r0, #1
 80149d2:	1a12      	subs	r2, r2, r0
 80149d4:	4640      	mov	r0, r8
 80149d6:	459c      	cmp	ip, r3
 80149d8:	bf88      	it	hi
 80149da:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80149de:	eba3 030c 	sub.w	r3, r3, ip
 80149e2:	4431      	add	r1, r6
 80149e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80149e8:	f1be 0e01 	subs.w	lr, lr, #1
 80149ec:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80149f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80149f8:	d1db      	bne.n	80149b2 <__ieee754_sqrt+0xb6>
 80149fa:	4313      	orrs	r3, r2
 80149fc:	d006      	beq.n	8014a0c <__ieee754_sqrt+0x110>
 80149fe:	1c48      	adds	r0, r1, #1
 8014a00:	bf0b      	itete	eq
 8014a02:	4671      	moveq	r1, lr
 8014a04:	3101      	addne	r1, #1
 8014a06:	3401      	addeq	r4, #1
 8014a08:	f021 0101 	bicne.w	r1, r1, #1
 8014a0c:	1063      	asrs	r3, r4, #1
 8014a0e:	0849      	lsrs	r1, r1, #1
 8014a10:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014a14:	07e2      	lsls	r2, r4, #31
 8014a16:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014a1a:	bf48      	it	mi
 8014a1c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014a20:	460e      	mov	r6, r1
 8014a22:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014a26:	e782      	b.n	801492e <__ieee754_sqrt+0x32>
 8014a28:	0ada      	lsrs	r2, r3, #11
 8014a2a:	3815      	subs	r0, #21
 8014a2c:	055b      	lsls	r3, r3, #21
 8014a2e:	2a00      	cmp	r2, #0
 8014a30:	d0fa      	beq.n	8014a28 <__ieee754_sqrt+0x12c>
 8014a32:	02d5      	lsls	r5, r2, #11
 8014a34:	d50a      	bpl.n	8014a4c <__ieee754_sqrt+0x150>
 8014a36:	f1c1 0420 	rsb	r4, r1, #32
 8014a3a:	fa23 f404 	lsr.w	r4, r3, r4
 8014a3e:	1e4d      	subs	r5, r1, #1
 8014a40:	408b      	lsls	r3, r1
 8014a42:	4322      	orrs	r2, r4
 8014a44:	1b41      	subs	r1, r0, r5
 8014a46:	e789      	b.n	801495c <__ieee754_sqrt+0x60>
 8014a48:	4608      	mov	r0, r1
 8014a4a:	e7f0      	b.n	8014a2e <__ieee754_sqrt+0x132>
 8014a4c:	0052      	lsls	r2, r2, #1
 8014a4e:	3101      	adds	r1, #1
 8014a50:	e7ef      	b.n	8014a32 <__ieee754_sqrt+0x136>
 8014a52:	4680      	mov	r8, r0
 8014a54:	e7bd      	b.n	80149d2 <__ieee754_sqrt+0xd6>
 8014a56:	bf00      	nop
 8014a58:	7ff00000 	.word	0x7ff00000

08014a5c <_init>:
 8014a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a5e:	bf00      	nop
 8014a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a62:	bc08      	pop	{r3}
 8014a64:	469e      	mov	lr, r3
 8014a66:	4770      	bx	lr

08014a68 <_fini>:
 8014a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a6a:	bf00      	nop
 8014a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a6e:	bc08      	pop	{r3}
 8014a70:	469e      	mov	lr, r3
 8014a72:	4770      	bx	lr
