
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187e4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000198c4  080189d8  080189d8  000289d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803229c  0803229c  00050288  2**0
                  CONTENTS
  4 .ARM          00000000  0803229c  0803229c  00050288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803229c  0803229c  00050288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803229c  0803229c  0004229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080322a0  080322a0  000422a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  080322a4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002204  20000288  0803252c  00050288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000248c  0803252c  0005248c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00050288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031415  00000000  00000000  000502b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000725f  00000000  00000000  000816c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002940  00000000  00000000  00088928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002640  00000000  00000000  0008b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f2a  00000000  00000000  0008d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000361a0  00000000  00000000  000b27d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbe8c  00000000  00000000  000e8972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a47fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be8c  00000000  00000000  001a4850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000288 	.word	0x20000288
 800020c:	00000000 	.word	0x00000000
 8000210:	080189bc 	.word	0x080189bc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000028c 	.word	0x2000028c
 800022c:	080189bc 	.word	0x080189bc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <AddDrum+0x38>)
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 8001036:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <AddDrum+0x3c>)
 800103c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8001040:	81bb      	strh	r3, [r7, #12]
 8001042:	2300      	movs	r3, #0
 8001044:	81fb      	strh	r3, [r7, #14]
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800104e:	f000 f809 	bl	8001064 <AddTrack>
		.pos = 0
	});
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000
 8001060:	08018bec 	.word	0x08018bec

08001064 <AddTrack>:

void AddTrack(AudioTrack track) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	463b      	mov	r3, r7
 800106c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <AddTrack+0x3c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b09      	cmp	r3, #9
 8001076:	dc0d      	bgt.n	8001094 <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <AddTrack+0x3c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <AddTrack+0x3c>)
 8001080:	600a      	str	r2, [r1, #0]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <AddTrack+0x40>)
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	463a      	mov	r2, r7
 800108a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001092:	e000      	b.n	8001096 <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 8001094:	bf00      	nop
}
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200006dc 	.word	0x200006dc
 80010a4:	2000068c 	.word	0x2000068c

080010a8 <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <RemoveTrack+0x44>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dd12      	ble.n	80010e0 <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <RemoveTrack+0x44>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3b01      	subs	r3, #1
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <RemoveTrack+0x44>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <RemoveTrack+0x44>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <RemoveTrack+0x48>)
 80010cc:	4908      	ldr	r1, [pc, #32]	; (80010f0 <RemoveTrack+0x48>)
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4403      	add	r3, r0
 80010d2:	00d2      	lsls	r2, r2, #3
 80010d4:	440a      	add	r2, r1
 80010d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010da:	e883 0003 	stmia.w	r3, {r0, r1}
 80010de:	e000      	b.n	80010e2 <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 80010e0:	bf00      	nop
}
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200006dc 	.word	0x200006dc
 80010f0:	2000068c 	.word	0x2000068c

080010f4 <PrecomputeMix>:

void PrecomputeMix() {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 80010fa:	4b55      	ldr	r3, [pc, #340]	; (8001250 <PrecomputeMix+0x15c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dc11      	bgt.n	8001126 <PrecomputeMix+0x32>
		if (audio_dma_on) {
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <PrecomputeMix+0x160>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800110a:	2100      	movs	r1, #0
 800110c:	4852      	ldr	r0, [pc, #328]	; (8001258 <PrecomputeMix+0x164>)
 800110e:	f003 f9cb 	bl	80044a8 <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 8001112:	4b50      	ldr	r3, [pc, #320]	; (8001254 <PrecomputeMix+0x160>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	2100      	movs	r1, #0
 800111e:	484f      	ldr	r0, [pc, #316]	; (800125c <PrecomputeMix+0x168>)
 8001120:	f014 fdfa 	bl	8015d18 <memset>
			}
		}

	}

}
 8001124:	e090      	b.n	8001248 <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 8001126:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <PrecomputeMix+0x160>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d126      	bne.n	800117c <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 800112e:	484c      	ldr	r0, [pc, #304]	; (8001260 <PrecomputeMix+0x16c>)
 8001130:	f009 fa60 	bl	800a5f4 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8001134:	484b      	ldr	r0, [pc, #300]	; (8001264 <PrecomputeMix+0x170>)
 8001136:	f009 fa5d 	bl	800a5f4 <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 800113a:	2304      	movs	r3, #4
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001142:	4a46      	ldr	r2, [pc, #280]	; (800125c <PrecomputeMix+0x168>)
 8001144:	2100      	movs	r1, #0
 8001146:	4844      	ldr	r0, [pc, #272]	; (8001258 <PrecomputeMix+0x164>)
 8001148:	f003 f8fe 	bl	8004348 <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 800114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <PrecomputeMix+0x174>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 800115a:	4842      	ldr	r0, [pc, #264]	; (8001264 <PrecomputeMix+0x170>)
 800115c:	f009 fa70 	bl	800a640 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8001160:	483f      	ldr	r0, [pc, #252]	; (8001260 <PrecomputeMix+0x16c>)
 8001162:	f009 f9ef 	bl	800a544 <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <PrecomputeMix+0x16c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <PrecomputeMix+0x16c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0201 	orr.w	r2, r2, #1
 8001174:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 8001176:	4b37      	ldr	r3, [pc, #220]	; (8001254 <PrecomputeMix+0x160>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e05e      	b.n	8001240 <PrecomputeMix+0x14c>
			int32_t sum = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
			int j = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 800118a:	e033      	b.n	80011f4 <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 800118c:	4a37      	ldr	r2, [pc, #220]	; (800126c <PrecomputeMix+0x178>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001194:	4a35      	ldr	r2, [pc, #212]	; (800126c <PrecomputeMix+0x178>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	88da      	ldrh	r2, [r3, #6]
 800119e:	1c53      	adds	r3, r2, #1
 80011a0:	b29c      	uxth	r4, r3
 80011a2:	4832      	ldr	r0, [pc, #200]	; (800126c <PrecomputeMix+0x178>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4403      	add	r3, r0
 80011aa:	4620      	mov	r0, r4
 80011ac:	80d8      	strh	r0, [r3, #6]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da00      	bge.n	80011be <PrecomputeMix+0xca>
 80011bc:	3303      	adds	r3, #3
 80011be:	109b      	asrs	r3, r3, #2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4413      	add	r3, r2
 80011c8:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <PrecomputeMix+0x178>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	88da      	ldrh	r2, [r3, #6]
 80011d4:	4925      	ldr	r1, [pc, #148]	; (800126c <PrecomputeMix+0x178>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	889b      	ldrh	r3, [r3, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d905      	bls.n	80011ee <PrecomputeMix+0xfa>
					RemoveTrack(j);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff5e 	bl	80010a8 <RemoveTrack>
 80011ec:	e002      	b.n	80011f4 <PrecomputeMix+0x100>
					j++;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <PrecomputeMix+0x15c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbc6      	blt.n	800118c <PrecomputeMix+0x98>
			if (sum < -32768) {
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001204:	da05      	bge.n	8001212 <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 8001206:	4a15      	ldr	r2, [pc, #84]	; (800125c <PrecomputeMix+0x168>)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2100      	movs	r1, #0
 800120c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001210:	e013      	b.n	800123a <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001218:	db06      	blt.n	8001228 <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <PrecomputeMix+0x168>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001222:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001226:	e008      	b.n	800123a <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	b29b      	uxth	r3, r3
 800122c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001230:	b299      	uxth	r1, r3
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <PrecomputeMix+0x168>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001246:	db9c      	blt.n	8001182 <PrecomputeMix+0x8e>
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}
 8001250:	200006dc 	.word	0x200006dc
 8001254:	200006e0 	.word	0x200006e0
 8001258:	20000b64 	.word	0x20000b64
 800125c:	200002a4 	.word	0x200002a4
 8001260:	20000d88 	.word	0x20000d88
 8001264:	20000e18 	.word	0x20000e18
 8001268:	40000800 	.word	0x40000800
 800126c:	2000068c 	.word	0x2000068c

08001270 <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2110      	movs	r1, #16
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <ButtonPadInit+0x34>)
 800127a:	f004 f87c 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	2120      	movs	r1, #32
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <ButtonPadInit+0x34>)
 8001284:	f004 f877 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <ButtonPadInit+0x34>)
 800128e:	f004 f872 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <ButtonPadInit+0x38>)
 800129a:	f004 f86c 	bl	8005376 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40011800 	.word	0x40011800
 80012a8:	40011000 	.word	0x40011000

080012ac <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <ButtonPadCallback+0x2c>)
 80012bc:	f004 f844 	bl	8005348 <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10a      	bne.n	80012e0 <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 80012ca:	f002 fbb3 	bl	8003a34 <HAL_GetTick>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a02      	ldr	r2, [pc, #8]	; (80012dc <ButtonPadCallback+0x30>)
 80012d2:	6013      	str	r3, [r2, #0]
		return 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e14c      	b.n	8001572 <ButtonPadCallback+0x2c6>
 80012d8:	40011800 	.word	0x40011800
 80012dc:	200006f4 	.word	0x200006f4
	}

	currentMillis = HAL_GetTick();
 80012e0:	f002 fba8 	bl	8003a34 <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4aa5      	ldr	r2, [pc, #660]	; (800157c <ButtonPadCallback+0x2d0>)
 80012e8:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 80012ea:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <ButtonPadCallback+0x2d4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 80012f0:	4ba2      	ldr	r3, [pc, #648]	; (800157c <ButtonPadCallback+0x2d0>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4ba3      	ldr	r3, [pc, #652]	; (8001584 <ButtonPadCallback+0x2d8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b14      	cmp	r3, #20
 80012fc:	f240 8133 	bls.w	8001566 <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8001300:	4ba1      	ldr	r3, [pc, #644]	; (8001588 <ButtonPadCallback+0x2dc>)
 8001302:	220f      	movs	r2, #15
 8001304:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001306:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <ButtonPadCallback+0x2dc>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800130c:	4b9e      	ldr	r3, [pc, #632]	; (8001588 <ButtonPadCallback+0x2dc>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	4b9d      	ldr	r3, [pc, #628]	; (8001588 <ButtonPadCallback+0x2dc>)
 8001314:	2202      	movs	r2, #2
 8001316:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001318:	499b      	ldr	r1, [pc, #620]	; (8001588 <ButtonPadCallback+0x2dc>)
 800131a:	489c      	ldr	r0, [pc, #624]	; (800158c <ButtonPadCallback+0x2e0>)
 800131c:	f003 fe80 	bl	8005020 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	2110      	movs	r1, #16
 8001324:	4899      	ldr	r0, [pc, #612]	; (800158c <ButtonPadCallback+0x2e0>)
 8001326:	f004 f826 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2120      	movs	r1, #32
 800132e:	4897      	ldr	r0, [pc, #604]	; (800158c <ButtonPadCallback+0x2e0>)
 8001330:	f004 f821 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4894      	ldr	r0, [pc, #592]	; (800158c <ButtonPadCallback+0x2e0>)
 800133a:	f004 f81c 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	4892      	ldr	r0, [pc, #584]	; (8001590 <ButtonPadCallback+0x2e4>)
 8001346:	f004 f816 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 800134a:	2101      	movs	r1, #1
 800134c:	488f      	ldr	r0, [pc, #572]	; (800158c <ButtonPadCallback+0x2e0>)
 800134e:	f003 fffb 	bl	8005348 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <ButtonPadCallback+0xb8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d102      	bne.n	8001364 <ButtonPadCallback+0xb8>
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001360:	2210      	movs	r2, #16
 8001362:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 8001364:	2102      	movs	r1, #2
 8001366:	4889      	ldr	r0, [pc, #548]	; (800158c <ButtonPadCallback+0x2e0>)
 8001368:	f003 ffee 	bl	8005348 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <ButtonPadCallback+0xd2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d102      	bne.n	800137e <ButtonPadCallback+0xd2>
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <ButtonPadCallback+0x2d4>)
 800137a:	220f      	movs	r2, #15
 800137c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 800137e:	2104      	movs	r1, #4
 8001380:	4882      	ldr	r0, [pc, #520]	; (800158c <ButtonPadCallback+0x2e0>)
 8001382:	f003 ffe1 	bl	8005348 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <ButtonPadCallback+0xec>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d102      	bne.n	8001398 <ButtonPadCallback+0xec>
 8001392:	4b7b      	ldr	r3, [pc, #492]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001394:	220e      	movs	r2, #14
 8001396:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 8001398:	2108      	movs	r1, #8
 800139a:	487c      	ldr	r0, [pc, #496]	; (800158c <ButtonPadCallback+0x2e0>)
 800139c:	f003 ffd4 	bl	8005348 <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <ButtonPadCallback+0x106>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d102      	bne.n	80013b2 <ButtonPadCallback+0x106>
 80013ac:	4b74      	ldr	r3, [pc, #464]	; (8001580 <ButtonPadCallback+0x2d4>)
 80013ae:	220d      	movs	r2, #13
 80013b0:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2110      	movs	r1, #16
 80013b6:	4875      	ldr	r0, [pc, #468]	; (800158c <ButtonPadCallback+0x2e0>)
 80013b8:	f003 ffdd 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	2120      	movs	r1, #32
 80013c0:	4872      	ldr	r0, [pc, #456]	; (800158c <ButtonPadCallback+0x2e0>)
 80013c2:	f003 ffd8 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 80013c6:	2101      	movs	r1, #1
 80013c8:	4870      	ldr	r0, [pc, #448]	; (800158c <ButtonPadCallback+0x2e0>)
 80013ca:	f003 ffbd 	bl	8005348 <HAL_GPIO_ReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <ButtonPadCallback+0x134>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <ButtonPadCallback+0x134>
 80013da:	4b69      	ldr	r3, [pc, #420]	; (8001580 <ButtonPadCallback+0x2d4>)
 80013dc:	220c      	movs	r2, #12
 80013de:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 80013e0:	2102      	movs	r1, #2
 80013e2:	486a      	ldr	r0, [pc, #424]	; (800158c <ButtonPadCallback+0x2e0>)
 80013e4:	f003 ffb0 	bl	8005348 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <ButtonPadCallback+0x14e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d102      	bne.n	80013fa <ButtonPadCallback+0x14e>
 80013f4:	4b62      	ldr	r3, [pc, #392]	; (8001580 <ButtonPadCallback+0x2d4>)
 80013f6:	220b      	movs	r2, #11
 80013f8:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 80013fa:	2104      	movs	r1, #4
 80013fc:	4863      	ldr	r0, [pc, #396]	; (800158c <ButtonPadCallback+0x2e0>)
 80013fe:	f003 ffa3 	bl	8005348 <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <ButtonPadCallback+0x168>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d102      	bne.n	8001414 <ButtonPadCallback+0x168>
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001410:	220a      	movs	r2, #10
 8001412:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 8001414:	2108      	movs	r1, #8
 8001416:	485d      	ldr	r0, [pc, #372]	; (800158c <ButtonPadCallback+0x2e0>)
 8001418:	f003 ff96 	bl	8005348 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <ButtonPadCallback+0x182>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d102      	bne.n	800142e <ButtonPadCallback+0x182>
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <ButtonPadCallback+0x2d4>)
 800142a:	2209      	movs	r2, #9
 800142c:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2120      	movs	r1, #32
 8001432:	4856      	ldr	r0, [pc, #344]	; (800158c <ButtonPadCallback+0x2e0>)
 8001434:	f003 ff9f 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4853      	ldr	r0, [pc, #332]	; (800158c <ButtonPadCallback+0x2e0>)
 800143e:	f003 ff9a 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 8001442:	2101      	movs	r1, #1
 8001444:	4851      	ldr	r0, [pc, #324]	; (800158c <ButtonPadCallback+0x2e0>)
 8001446:	f003 ff7f 	bl	8005348 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <ButtonPadCallback+0x1b0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <ButtonPadCallback+0x1b0>
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001458:	2208      	movs	r2, #8
 800145a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 800145c:	2102      	movs	r1, #2
 800145e:	484b      	ldr	r0, [pc, #300]	; (800158c <ButtonPadCallback+0x2e0>)
 8001460:	f003 ff72 	bl	8005348 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <ButtonPadCallback+0x1ca>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d102      	bne.n	8001476 <ButtonPadCallback+0x1ca>
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001472:	2207      	movs	r2, #7
 8001474:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 8001476:	2104      	movs	r1, #4
 8001478:	4844      	ldr	r0, [pc, #272]	; (800158c <ButtonPadCallback+0x2e0>)
 800147a:	f003 ff65 	bl	8005348 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <ButtonPadCallback+0x1e4>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d102      	bne.n	8001490 <ButtonPadCallback+0x1e4>
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <ButtonPadCallback+0x2d4>)
 800148c:	2206      	movs	r2, #6
 800148e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 8001490:	2108      	movs	r1, #8
 8001492:	483e      	ldr	r0, [pc, #248]	; (800158c <ButtonPadCallback+0x2e0>)
 8001494:	f003 ff58 	bl	8005348 <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <ButtonPadCallback+0x1fe>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d102      	bne.n	80014aa <ButtonPadCallback+0x1fe>
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <ButtonPadCallback+0x2d4>)
 80014a6:	2205      	movs	r2, #5
 80014a8:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2140      	movs	r1, #64	; 0x40
 80014ae:	4837      	ldr	r0, [pc, #220]	; (800158c <ButtonPadCallback+0x2e0>)
 80014b0:	f003 ff61 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ba:	4835      	ldr	r0, [pc, #212]	; (8001590 <ButtonPadCallback+0x2e4>)
 80014bc:	f003 ff5b 	bl	8005376 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 80014c0:	2101      	movs	r1, #1
 80014c2:	4832      	ldr	r0, [pc, #200]	; (800158c <ButtonPadCallback+0x2e0>)
 80014c4:	f003 ff40 	bl	8005348 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <ButtonPadCallback+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d102      	bne.n	80014da <ButtonPadCallback+0x22e>
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <ButtonPadCallback+0x2d4>)
 80014d6:	2204      	movs	r2, #4
 80014d8:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 80014da:	2102      	movs	r1, #2
 80014dc:	482b      	ldr	r0, [pc, #172]	; (800158c <ButtonPadCallback+0x2e0>)
 80014de:	f003 ff33 	bl	8005348 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <ButtonPadCallback+0x248>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d102      	bne.n	80014f4 <ButtonPadCallback+0x248>
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <ButtonPadCallback+0x2d4>)
 80014f0:	2203      	movs	r2, #3
 80014f2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 80014f4:	2104      	movs	r1, #4
 80014f6:	4825      	ldr	r0, [pc, #148]	; (800158c <ButtonPadCallback+0x2e0>)
 80014f8:	f003 ff26 	bl	8005348 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <ButtonPadCallback+0x262>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d102      	bne.n	800150e <ButtonPadCallback+0x262>
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <ButtonPadCallback+0x2d4>)
 800150a:	2202      	movs	r2, #2
 800150c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 800150e:	2108      	movs	r1, #8
 8001510:	481e      	ldr	r0, [pc, #120]	; (800158c <ButtonPadCallback+0x2e0>)
 8001512:	f003 ff19 	bl	8005348 <HAL_GPIO_ReadPin>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <ButtonPadCallback+0x27c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d102      	bne.n	8001528 <ButtonPadCallback+0x27c>
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001524:	2201      	movs	r2, #1
 8001526:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2110      	movs	r1, #16
 800152c:	4817      	ldr	r0, [pc, #92]	; (800158c <ButtonPadCallback+0x2e0>)
 800152e:	f003 ff22 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8001532:	2201      	movs	r2, #1
 8001534:	2120      	movs	r1, #32
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <ButtonPadCallback+0x2e0>)
 8001538:	f003 ff1d 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <ButtonPadCallback+0x2e0>)
 8001542:	f003 ff18 	bl	8005376 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154c:	4810      	ldr	r0, [pc, #64]	; (8001590 <ButtonPadCallback+0x2e4>)
 800154e:	f003 ff12 	bl	8005376 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <ButtonPadCallback+0x2dc>)
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <ButtonPadCallback+0x2e8>)
 8001556:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <ButtonPadCallback+0x2dc>)
 800155a:	2202      	movs	r2, #2
 800155c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <ButtonPadCallback+0x2dc>)
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <ButtonPadCallback+0x2e0>)
 8001562:	f003 fd5d 	bl	8005020 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <ButtonPadCallback+0x2d0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <ButtonPadCallback+0x2d8>)
 800156c:	6013      	str	r3, [r2, #0]
	return keyPressed;
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <ButtonPadCallback+0x2d4>)
 8001570:	881b      	ldrh	r3, [r3, #0]

}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200006f8 	.word	0x200006f8
 8001580:	200006fc 	.word	0x200006fc
 8001584:	200006f4 	.word	0x200006f4
 8001588:	200006e4 	.word	0x200006e4
 800158c:	40011800 	.word	0x40011800
 8001590:	40011000 	.word	0x40011000
 8001594:	10310000 	.word	0x10310000

08001598 <DrumThreshWrite>:
	}
	f_close(&file);

}

void DrumThreshWrite() {
 8001598:	b580      	push	{r7, lr}
 800159a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800159e:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80015a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a4:	2203      	movs	r2, #3
 80015a6:	4952      	ldr	r1, [pc, #328]	; (80016f0 <DrumThreshWrite+0x158>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f010 fdc7 	bl	801213c <f_open>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 80015b4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d13c      	bne.n	8001636 <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <DrumThreshWrite+0x15c>)
 80015be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80015c4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <DrumThreshWrite+0x15c>)
 80015cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80015d2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <DrumThreshWrite+0x15c>)
 80015da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80015e2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <DrumThreshWrite+0x15c>)
 80015ea:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80015ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80015f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80015f6:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80015f8:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <DrumThreshWrite+0x15c>)
 80015fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <DrumThreshWrite+0x15c>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	441a      	add	r2, r3
 8001602:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001608:	441a      	add	r2, r3
 800160a:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <DrumThreshWrite+0x15c>)
 800160c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001610:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001612:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001616:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800161a:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 800161c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001620:	f107 0118 	add.w	r1, r7, #24
 8001624:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001628:	2214      	movs	r2, #20
 800162a:	f011 f80c 	bl	8012646 <f_write>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001634:	e051      	b.n	80016da <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 8001636:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800163a:	2b04      	cmp	r3, #4
 800163c:	d145      	bne.n	80016ca <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 800163e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001642:	2206      	movs	r2, #6
 8001644:	492a      	ldr	r1, [pc, #168]	; (80016f0 <DrumThreshWrite+0x158>)
 8001646:	4618      	mov	r0, r3
 8001648:	f010 fd78 	bl	801213c <f_open>
 800164c:	4603      	mov	r3, r0
 800164e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001656:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800165a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001662:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001664:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001668:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001674:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001678:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001680:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001684:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001688:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800168c:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <DrumThreshWrite+0x15c>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	441a      	add	r2, r3
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <DrumThreshWrite+0x15c>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	441a      	add	r2, r3
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <DrumThreshWrite+0x15c>)
 80016a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80016a6:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80016a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80016ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80016b0:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 80016b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b6:	1d39      	adds	r1, r7, #4
 80016b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80016bc:	2214      	movs	r2, #20
 80016be:	f010 ffc2 	bl	8012646 <f_write>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80016c8:	e007      	b.n	80016da <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 80016ca:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <DrumThreshWrite+0x160>)
 80016d0:	2113      	movs	r1, #19
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 fcc2 	bl	800205c <LCD_Print>
 80016d8:	e7fe      	b.n	80016d8 <DrumThreshWrite+0x140>
	}
	f_close(&file);
 80016da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016de:	4618      	mov	r0, r3
 80016e0:	f011 fa71 	bl	8012bc6 <f_close>
}
 80016e4:	bf00      	nop
 80016e6:	f507 7718 	add.w	r7, r7, #608	; 0x260
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	080189d8 	.word	0x080189d8
 80016f4:	20000710 	.word	0x20000710
 80016f8:	08018a2c 	.word	0x08018a2c

080016fc <DrumUpdate>:
	}
	free(values);

}

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001706:	b672      	cpsid	i
}
 8001708:	bf00      	nop

	__disable_irq();

	int i = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <DrumUpdate+0xbc>)
 8001710:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 8001712:	e048      	b.n	80017a6 <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	429a      	cmp	r2, r3
 8001720:	d807      	bhi.n	8001732 <DrumUpdate+0x36>
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	fa42 f303 	asr.w	r3, r2, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d011      	beq.n	8001756 <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	7a1b      	ldrb	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc70 	bl	8001024 <AddDrum>
			}
			drum->state = DRUM_HIT;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2201      	movs	r2, #1
 8001748:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 800174a:	f002 f973 	bl	8003a34 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	e011      	b.n	800177a <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	7a1b      	ldrb	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2202      	movs	r2, #2
 8001762:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 8001764:	f002 f966 	bl	8003a34 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 8001770:	2b14      	cmp	r3, #20
 8001772:	d902      	bls.n	800177a <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2200      	movs	r2, #0
 8001778:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <DrumUpdate+0xc0>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001788:	429a      	cmp	r2, r3
 800178a:	d906      	bls.n	800179a <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <DrumUpdate+0xc0>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3301      	adds	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3330      	adds	r3, #48	; 0x30
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	ddb3      	ble.n	8001714 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80017ac:	b662      	cpsie	i
}
 80017ae:	bf00      	nop
		}
	}

	__enable_irq();
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000710 	.word	0x20000710
 80017bc:	200007d0 	.word	0x200007d0

080017c0 <ButtonPad_DrumCalibration>:

//	LCD_Print(0, (*r)++, "%3d", drums[0].state);

}

void ButtonPad_DrumCalibration(int keyPressed) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	d866      	bhi.n	800189e <ButtonPad_DrumCalibration+0xde>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <ButtonPad_DrumCalibration+0x18>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017f9 	.word	0x080017f9
 80017dc:	08001801 	.word	0x08001801
 80017e0:	08001809 	.word	0x08001809
 80017e4:	08001811 	.word	0x08001811
 80017e8:	08001819 	.word	0x08001819
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800187d 	.word	0x0800187d
 80017f4:	08001899 	.word	0x08001899
		case 1: AddDrum(DRUM_DON); break;
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fc13 	bl	8001024 <AddDrum>
 80017fe:	e04e      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 8001800:	2001      	movs	r0, #1
 8001802:	f7ff fc0f 	bl	8001024 <AddDrum>
 8001806:	e04a      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff ff77 	bl	80016fc <DrumUpdate>
 800180e:	e046      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 8001810:	2002      	movs	r0, #2
 8001812:	f7ff ff73 	bl	80016fc <DrumUpdate>
 8001816:	e042      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <ButtonPad_DrumCalibration+0xe8>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <ButtonPad_DrumCalibration+0xec>)
 8001820:	460b      	mov	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	3328      	adds	r3, #40	; 0x28
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <ButtonPad_DrumCalibration+0xe8>)
 8001830:	8812      	ldrh	r2, [r2, #0]
 8001832:	4610      	mov	r0, r2
 8001834:	f103 020a 	add.w	r2, r3, #10
 8001838:	491c      	ldr	r1, [pc, #112]	; (80018ac <ButtonPad_DrumCalibration+0xec>)
 800183a:	4603      	mov	r3, r0
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4403      	add	r3, r0
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	440b      	add	r3, r1
 8001844:	3328      	adds	r3, #40	; 0x28
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e029      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <ButtonPad_DrumCalibration+0xe8>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <ButtonPad_DrumCalibration+0xec>)
 8001852:	460b      	mov	r3, r1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	440b      	add	r3, r1
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4413      	add	r3, r2
 800185c:	3328      	adds	r3, #40	; 0x28
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <ButtonPad_DrumCalibration+0xe8>)
 8001862:	8812      	ldrh	r2, [r2, #0]
 8001864:	4610      	mov	r0, r2
 8001866:	f1a3 020a 	sub.w	r2, r3, #10
 800186a:	4910      	ldr	r1, [pc, #64]	; (80018ac <ButtonPad_DrumCalibration+0xec>)
 800186c:	4603      	mov	r3, r0
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4403      	add	r3, r0
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	440b      	add	r3, r1
 8001876:	3328      	adds	r3, #40	; 0x28
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e010      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <ButtonPad_DrumCalibration+0xe8>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	425a      	negs	r2, r3
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	bf58      	it	pl
 800188e:	4253      	negpl	r3, r2
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <ButtonPad_DrumCalibration+0xe8>)
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	e002      	b.n	800189e <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 8001898:	f7ff fe7e 	bl	8001598 <DrumThreshWrite>
 800189c:	bf00      	nop
	}
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200007e0 	.word	0x200007e0
 80018ac:	20000710 	.word	0x20000710

080018b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <vApplicationGetIdleTaskMemory+0x28>)
 80018c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <vApplicationGetIdleTaskMemory+0x2c>)
 80018c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	200007e4 	.word	0x200007e4
 80018dc:	20000898 	.word	0x20000898

080018e0 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <ILI9341_Send_Command+0x34>)
 80018f2:	f003 fd40 	bl	8005376 <HAL_GPIO_WritePin>
	DC_COMMAND;
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <ILI9341_Send_Command+0x34>)
 80018fe:	f003 fd3a 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f95d 	bl	8001bc4 <ILI9341_SPI_Send>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40010c00 	.word	0x40010c00

08001918 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <ILI9341_Send_Data+0x34>)
 800192a:	f003 fd24 	bl	8005376 <HAL_GPIO_WritePin>
	DC_DATA;
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <ILI9341_Send_Data+0x34>)
 8001936:	f003 fd1e 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f941 	bl	8001bc4 <ILI9341_SPI_Send>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40010c00 	.word	0x40010c00

08001950 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001954:	f000 f900 	bl	8001b58 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001958:	f000 f958 	bl	8001c0c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff ffbf 	bl	80018e0 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001962:	20cb      	movs	r0, #203	; 0xcb
 8001964:	f7ff ffbc 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001968:	2039      	movs	r0, #57	; 0x39
 800196a:	f7ff ffd5 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800196e:	202c      	movs	r0, #44	; 0x2c
 8001970:	f7ff ffd2 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff ffcf 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800197a:	2034      	movs	r0, #52	; 0x34
 800197c:	f7ff ffcc 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001980:	2002      	movs	r0, #2
 8001982:	f7ff ffc9 	bl	8001918 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8001986:	20cf      	movs	r0, #207	; 0xcf
 8001988:	f7ff ffaa 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff ffc3 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001992:	20c1      	movs	r0, #193	; 0xc1
 8001994:	f7ff ffc0 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8001998:	2030      	movs	r0, #48	; 0x30
 800199a:	f7ff ffbd 	bl	8001918 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800199e:	20e8      	movs	r0, #232	; 0xe8
 80019a0:	f7ff ff9e 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80019a4:	2085      	movs	r0, #133	; 0x85
 80019a6:	f7ff ffb7 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff ffb4 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80019b0:	2078      	movs	r0, #120	; 0x78
 80019b2:	f7ff ffb1 	bl	8001918 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80019b6:	20ea      	movs	r0, #234	; 0xea
 80019b8:	f7ff ff92 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff ffab 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff ffa8 	bl	8001918 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80019c8:	20ed      	movs	r0, #237	; 0xed
 80019ca:	f7ff ff89 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80019ce:	2064      	movs	r0, #100	; 0x64
 80019d0:	f7ff ffa2 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f7ff ff9f 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80019da:	2012      	movs	r0, #18
 80019dc:	f7ff ff9c 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80019e0:	2081      	movs	r0, #129	; 0x81
 80019e2:	f7ff ff99 	bl	8001918 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80019e6:	20f7      	movs	r0, #247	; 0xf7
 80019e8:	f7ff ff7a 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80019ec:	2020      	movs	r0, #32
 80019ee:	f7ff ff93 	bl	8001918 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80019f2:	20c0      	movs	r0, #192	; 0xc0
 80019f4:	f7ff ff74 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80019f8:	2010      	movs	r0, #16
 80019fa:	f7ff ff8d 	bl	8001918 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80019fe:	20c1      	movs	r0, #193	; 0xc1
 8001a00:	f7ff ff6e 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001a04:	2010      	movs	r0, #16
 8001a06:	f7ff ff87 	bl	8001918 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8001a0a:	20c5      	movs	r0, #197	; 0xc5
 8001a0c:	f7ff ff68 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001a10:	203e      	movs	r0, #62	; 0x3e
 8001a12:	f7ff ff81 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8001a16:	2028      	movs	r0, #40	; 0x28
 8001a18:	f7ff ff7e 	bl	8001918 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8001a1c:	20c7      	movs	r0, #199	; 0xc7
 8001a1e:	f7ff ff5f 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001a22:	2086      	movs	r0, #134	; 0x86
 8001a24:	f7ff ff78 	bl	8001918 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8001a28:	2036      	movs	r0, #54	; 0x36
 8001a2a:	f7ff ff59 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001a2e:	2048      	movs	r0, #72	; 0x48
 8001a30:	f7ff ff72 	bl	8001918 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8001a34:	203a      	movs	r0, #58	; 0x3a
 8001a36:	f7ff ff53 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8001a3a:	2055      	movs	r0, #85	; 0x55
 8001a3c:	f7ff ff6c 	bl	8001918 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001a40:	20b1      	movs	r0, #177	; 0xb1
 8001a42:	f7ff ff4d 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff ff66 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8001a4c:	2018      	movs	r0, #24
 8001a4e:	f7ff ff63 	bl	8001918 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8001a52:	20b6      	movs	r0, #182	; 0xb6
 8001a54:	f7ff ff44 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8001a58:	2008      	movs	r0, #8
 8001a5a:	f7ff ff5d 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8001a5e:	2082      	movs	r0, #130	; 0x82
 8001a60:	f7ff ff5a 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8001a64:	2027      	movs	r0, #39	; 0x27
 8001a66:	f7ff ff57 	bl	8001918 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8001a6a:	20f2      	movs	r0, #242	; 0xf2
 8001a6c:	f7ff ff38 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ff51 	bl	8001918 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8001a76:	2026      	movs	r0, #38	; 0x26
 8001a78:	f7ff ff32 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7ff ff4b 	bl	8001918 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8001a82:	20e0      	movs	r0, #224	; 0xe0
 8001a84:	f7ff ff2c 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f7ff ff45 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001a8e:	2031      	movs	r0, #49	; 0x31
 8001a90:	f7ff ff42 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8001a94:	202b      	movs	r0, #43	; 0x2b
 8001a96:	f7ff ff3f 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001a9a:	200c      	movs	r0, #12
 8001a9c:	f7ff ff3c 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001aa0:	200e      	movs	r0, #14
 8001aa2:	f7ff ff39 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001aa6:	2008      	movs	r0, #8
 8001aa8:	f7ff ff36 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8001aac:	204e      	movs	r0, #78	; 0x4e
 8001aae:	f7ff ff33 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8001ab2:	20f1      	movs	r0, #241	; 0xf1
 8001ab4:	f7ff ff30 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8001ab8:	2037      	movs	r0, #55	; 0x37
 8001aba:	f7ff ff2d 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001abe:	2007      	movs	r0, #7
 8001ac0:	f7ff ff2a 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f7ff ff27 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f7ff ff24 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001ad0:	200e      	movs	r0, #14
 8001ad2:	f7ff ff21 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	f7ff ff1e 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff ff1b 	bl	8001918 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8001ae2:	20e1      	movs	r0, #225	; 0xe1
 8001ae4:	f7ff fefc 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff ff15 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001aee:	200e      	movs	r0, #14
 8001af0:	f7ff ff12 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8001af4:	2014      	movs	r0, #20
 8001af6:	f7ff ff0f 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001afa:	2003      	movs	r0, #3
 8001afc:	f7ff ff0c 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001b00:	2011      	movs	r0, #17
 8001b02:	f7ff ff09 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001b06:	2007      	movs	r0, #7
 8001b08:	f7ff ff06 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001b0c:	2031      	movs	r0, #49	; 0x31
 8001b0e:	f7ff ff03 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001b12:	20c1      	movs	r0, #193	; 0xc1
 8001b14:	f7ff ff00 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001b18:	2048      	movs	r0, #72	; 0x48
 8001b1a:	f7ff fefd 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001b1e:	2008      	movs	r0, #8
 8001b20:	f7ff fefa 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001b24:	200f      	movs	r0, #15
 8001b26:	f7ff fef7 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001b2a:	200c      	movs	r0, #12
 8001b2c:	f7ff fef4 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001b30:	2031      	movs	r0, #49	; 0x31
 8001b32:	f7ff fef1 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8001b36:	2036      	movs	r0, #54	; 0x36
 8001b38:	f7ff feee 	bl	8001918 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001b3c:	200f      	movs	r0, #15
 8001b3e:	f7ff feeb 	bl	8001918 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8001b42:	2011      	movs	r0, #17
 8001b44:	f7ff fecc 	bl	80018e0 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8001b48:	2029      	movs	r0, #41	; 0x29
 8001b4a:	f7ff fec9 	bl	80018e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8001b4e:	202c      	movs	r0, #44	; 0x2c
 8001b50:	f7ff fee2 	bl	8001918 <ILI9341_Send_Data>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <ILI9341_SPI_Init+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b68:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001ba4:	220a      	movs	r2, #10
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <ILI9341_SPI_Init+0x64>)
 8001baa:	f008 fa0e 	bl	8009fca <HAL_SPI_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 8001bb4:	f001 fa5a 	bl	800306c <Error_Handler>
	}
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000a98 	.word	0x20000a98
 8001bc0:	40003800 	.word	0x40003800

08001bc4 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 8001bce:	1df9      	adds	r1, r7, #7
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <ILI9341_SPI_Send+0x20>)
 8001bd6:	f008 fa7c 	bl	800a0d2 <HAL_SPI_Transmit>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000a98 	.word	0x20000a98

08001be8 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ILI9341_SPI_Send_Multiple+0x20>)
 8001bfc:	f008 fa69 	bl	800a0d2 <HAL_SPI_Transmit>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000a98 	.word	0x20000a98

08001c0c <ILI9341_Reset>:

void ILI9341_Reset() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	RESET_ON;
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c16:	4810      	ldr	r0, [pc, #64]	; (8001c58 <ILI9341_Reset+0x4c>)
 8001c18:	f003 fbad 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001c1c:	2032      	movs	r0, #50	; 0x32
 8001c1e:	f001 ff13 	bl	8003a48 <HAL_Delay>
	RESET_OFF;
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <ILI9341_Reset+0x4c>)
 8001c2a:	f003 fba4 	bl	8005376 <HAL_GPIO_WritePin>
	CS_ON;
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c34:	4808      	ldr	r0, [pc, #32]	; (8001c58 <ILI9341_Reset+0x4c>)
 8001c36:	f003 fb9e 	bl	8005376 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f001 ff04 	bl	8003a48 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff fe4d 	bl	80018e0 <ILI9341_Send_Command>
	CS_OFF;
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <ILI9341_Reset+0x4c>)
 8001c4e:	f003 fb92 	bl	8005376 <HAL_GPIO_WritePin>
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8001c66:	2036      	movs	r0, #54	; 0x36
 8001c68:	f7ff fe3a 	bl	80018e0 <ILI9341_Send_Command>
	switch (rotation) {
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d836      	bhi.n	8001ce0 <ILI9341_Set_Rotation+0x84>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <ILI9341_Set_Rotation+0x1c>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001c9f 	.word	0x08001c9f
 8001c80:	08001cb5 	.word	0x08001cb5
 8001c84:	08001ccb 	.word	0x08001ccb
	case 0:
		ILI9341_Send_Data(0x48);
 8001c88:	2048      	movs	r0, #72	; 0x48
 8001c8a:	f7ff fe45 	bl	8001918 <ILI9341_Send_Data>
		X_SIZE = 240;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <ILI9341_Set_Rotation+0x8c>)
 8001c90:	22f0      	movs	r2, #240	; 0xf0
 8001c92:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <ILI9341_Set_Rotation+0x90>)
 8001c96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c9a:	601a      	str	r2, [r3, #0]
		break;
 8001c9c:	e020      	b.n	8001ce0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8001c9e:	2028      	movs	r0, #40	; 0x28
 8001ca0:	f7ff fe3a 	bl	8001918 <ILI9341_Send_Data>
		X_SIZE = 320;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <ILI9341_Set_Rotation+0x8c>)
 8001ca6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001caa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <ILI9341_Set_Rotation+0x90>)
 8001cae:	22f0      	movs	r2, #240	; 0xf0
 8001cb0:	601a      	str	r2, [r3, #0]
		break;
 8001cb2:	e015      	b.n	8001ce0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 8001cb4:	2088      	movs	r0, #136	; 0x88
 8001cb6:	f7ff fe2f 	bl	8001918 <ILI9341_Send_Data>
		X_SIZE = 240;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <ILI9341_Set_Rotation+0x8c>)
 8001cbc:	22f0      	movs	r2, #240	; 0xf0
 8001cbe:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <ILI9341_Set_Rotation+0x90>)
 8001cc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cc6:	601a      	str	r2, [r3, #0]
		break;
 8001cc8:	e00a      	b.n	8001ce0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8001cca:	20e8      	movs	r0, #232	; 0xe8
 8001ccc:	f7ff fe24 	bl	8001918 <ILI9341_Send_Data>
		X_SIZE = 320;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <ILI9341_Set_Rotation+0x8c>)
 8001cd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cd6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <ILI9341_Set_Rotation+0x90>)
 8001cda:	22f0      	movs	r2, #240	; 0xf0
 8001cdc:	601a      	str	r2, [r3, #0]
		break;
 8001cde:	bf00      	nop
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	2000000c 	.word	0x2000000c

08001cf0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d02:	4817      	ldr	r0, [pc, #92]	; (8001d60 <ILI9341_SPI_Send_32+0x70>)
 8001d04:	f003 fb37 	bl	8005376 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <ILI9341_SPI_Send_32+0x70>)
 8001d10:	f003 fb31 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff54 	bl	8001bc4 <ILI9341_SPI_Send>

	DC_DATA;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d22:	480f      	ldr	r0, [pc, #60]	; (8001d60 <ILI9341_SPI_Send_32+0x70>)
 8001d24:	f003 fb27 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	0e1b      	lsrs	r3, r3, #24
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff48 	bl	8001bc4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff42 	bl	8001bc4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff3c 	bl	8001bc4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff37 	bl	8001bc4 <ILI9341_SPI_Send>

}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40010c00 	.word	0x40010c00

08001d64 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	617b      	str	r3, [r7, #20]
	t |= x2;
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	202a      	movs	r0, #42	; 0x2a
 8001d88:	f7ff ffb2 	bl	8001cf0 <ILI9341_SPI_Send_32>
	t = y1;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	617b      	str	r3, [r7, #20]
	t |= y2;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8001d9e:	6979      	ldr	r1, [r7, #20]
 8001da0:	202b      	movs	r0, #43	; 0x2b
 8001da2:	f7ff ffa5 	bl	8001cf0 <ILI9341_SPI_Send_32>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 8001dae:	b590      	push	{r4, r7, lr}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4604      	mov	r4, r0
 8001db6:	4608      	mov	r0, r1
 8001db8:	4611      	mov	r1, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	80fb      	strh	r3, [r7, #6]
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	80bb      	strh	r3, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 8001dcc:	88f8      	ldrh	r0, [r7, #6]
 8001dce:	88b9      	ldrh	r1, [r7, #4]
 8001dd0:	88fa      	ldrh	r2, [r7, #6]
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	461c      	mov	r4, r3
 8001dda:	88ba      	ldrh	r2, [r7, #4]
 8001ddc:	883b      	ldrh	r3, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	3b01      	subs	r3, #1
 8001de2:	4622      	mov	r2, r4
 8001de4:	f7ff ffbe 	bl	8001d64 <ILI9341_Set_Address>
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001e00:	202c      	movs	r0, #44	; 0x2c
 8001e02:	f7ff fd6d 	bl	80018e0 <ILI9341_Send_Command>

	CS_ON;
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e0c:	482a      	ldr	r0, [pc, #168]	; (8001eb8 <LCD_FillWindow+0xc8>)
 8001e0e:	f003 fab2 	bl	8005376 <HAL_GPIO_WritePin>
	DC_DATA;
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e18:	4827      	ldr	r0, [pc, #156]	; (8001eb8 <LCD_FillWindow+0xc8>)
 8001e1a:	f003 faac 	bl	8005376 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <LCD_FillWindow+0xcc>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	08db      	lsrs	r3, r3, #3
 8001e28:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e2e:	dc01      	bgt.n	8001e34 <LCD_FillWindow+0x44>
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2bf0      	cmp	r3, #240	; 0xf0
 8001e38:	dd01      	ble.n	8001e3e <LCD_FillWindow+0x4e>
 8001e3a:	23f0      	movs	r3, #240	; 0xf0
 8001e3c:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f013 ff41 	bl	8015cdc <malloc>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	e009      	b.n	8001e78 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf1      	blt.n	8001e64 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001e80:	e009      	b.n	8001e96 <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fead 	bl	8001be8 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d8f1      	bhi.n	8001e82 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff fe9f 	bl	8001be8 <ILI9341_SPI_Send_Multiple>

	free(array);
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f013 ff1e 	bl	8015cec <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40010c00 	.word	0x40010c00
 8001ebc:	cccccccd 	.word	0xcccccccd

08001ec0 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	80fb      	strh	r3, [r7, #6]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80bb      	strh	r3, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	807b      	strh	r3, [r7, #2]
 8001eda:	4613      	mov	r3, r2
 8001edc:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001ede:	883b      	ldrh	r3, [r7, #0]
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	88b9      	ldrh	r1, [r7, #4]
 8001ee4:	88f8      	ldrh	r0, [r7, #6]
 8001ee6:	f7ff ff62 	bl	8001dae <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	883a      	ldrh	r2, [r7, #0]
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	8b3b      	ldrh	r3, [r7, #24]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7ff ff79 	bl	8001df0 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
	...

08001f08 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <LCD_FillScreen+0x2c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <LCD_FillScreen+0x30>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	460b      	mov	r3, r1
 8001f24:	2100      	movs	r1, #0
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff ffca 	bl	8001ec0 <LCD_DrawFilledRectangle>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000008 	.word	0x20000008
 8001f38:	2000000c 	.word	0x2000000c

08001f3c <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
 8001f46:	460b      	mov	r3, r1
 8001f48:	80bb      	strh	r3, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	3b20      	subs	r3, #32
 8001f52:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001f54:	88b9      	ldrh	r1, [r7, #4]
 8001f56:	88f8      	ldrh	r0, [r7, #6]
 8001f58:	2310      	movs	r3, #16
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	f7ff ff27 	bl	8001dae <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001f60:	202c      	movs	r0, #44	; 0x2c
 8001f62:	f7ff fcbd 	bl	80018e0 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001f66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f6a:	f013 feb7 	bl	8015cdc <malloc>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001f76:	2300      	movs	r3, #0
 8001f78:	75bb      	strb	r3, [r7, #22]
 8001f7a:	e026      	b.n	8001fca <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	7dbb      	ldrb	r3, [r7, #22]
 8001f80:	491c      	ldr	r1, [pc, #112]	; (8001ff4 <LCD_DrawChar+0xb8>)
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	440a      	add	r2, r1
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	757b      	strb	r3, [r7, #21]
 8001f90:	e015      	b.n	8001fbe <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	e003      	b.n	8001fac <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001faa:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001fb8:	7d7b      	ldrb	r3, [r7, #21]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	757b      	strb	r3, [r7, #21]
 8001fbe:	7d7b      	ldrb	r3, [r7, #21]
 8001fc0:	2b07      	cmp	r3, #7
 8001fc2:	d9e6      	bls.n	8001f92 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001fc4:	7dbb      	ldrb	r3, [r7, #22]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	75bb      	strb	r3, [r7, #22]
 8001fca:	7dbb      	ldrb	r3, [r7, #22]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d9d5      	bls.n	8001f7c <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd6:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <LCD_DrawChar+0xbc>)
 8001fd8:	f003 f9cd 	bl	8005376 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe0:	68b8      	ldr	r0, [r7, #8]
 8001fe2:	f7ff fe01 	bl	8001be8 <ILI9341_SPI_Send_Multiple>
	free(array);
 8001fe6:	68b8      	ldr	r0, [r7, #8]
 8001fe8:	f013 fe80 	bl	8015cec <free>
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	080317fc 	.word	0x080317fc
 8001ff8:	40010c00 	.word	0x40010c00

08001ffc <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	603a      	str	r2, [r7, #0]
 8002006:	80fb      	strh	r3, [r7, #6]
 8002008:	460b      	mov	r3, r1
 800200a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800200c:	e01d      	b.n	800204a <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002014:	d904      	bls.n	8002020 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002016:	2300      	movs	r3, #0
 8002018:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800201a:	88bb      	ldrh	r3, [r7, #4]
 800201c:	3310      	adds	r3, #16
 800201e:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002020:	88bb      	ldrh	r3, [r7, #4]
 8002022:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002026:	d903      	bls.n	8002030 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002028:	2300      	movs	r3, #0
 800202a:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800202c:	2300      	movs	r3, #0
 800202e:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	88b9      	ldrh	r1, [r7, #4]
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff7f 	bl	8001f3c <LCD_DrawChar>

		pStr ++;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	3308      	adds	r3, #8
 8002048:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1dd      	bne.n	800200e <LCD_DrawString+0x12>

	}

}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 800205c:	b40c      	push	{r2, r3}
 800205e:	b580      	push	{r7, lr}
 8002060:	b08e      	sub	sp, #56	; 0x38
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	460a      	mov	r2, r1
 8002068:	80fb      	strh	r3, [r7, #6]
 800206a:	4613      	mov	r3, r2
 800206c:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 800206e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002072:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8002074:	f107 000c 	add.w	r0, r7, #12
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800207c:	2128      	movs	r1, #40	; 0x28
 800207e:	f014 fc77 	bl	8016970 <vsniprintf>
 8002082:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	b298      	uxth	r0, r3
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	b29b      	uxth	r3, r3
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	4619      	mov	r1, r3
 800209c:	f7ff ffae 	bl	8001ffc <LCD_DrawString>
 80020a0:	e000      	b.n	80020a4 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 80020a2:	bf00      	nop
}
 80020a4:	3738      	adds	r7, #56	; 0x38
 80020a6:	46bd      	mov	sp, r7
 80020a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020ac:	b002      	add	sp, #8
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_PeriodElapsedCallback>:
int16_t reading;
int16_t voltage[4];
int16_t max_reading[4];

int16_t errors[4];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a48      	ldr	r2, [pc, #288]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d17d      	bne.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x10c>
		drum_interrupt_counts++;
 80020c0:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80020c8:	6013      	str	r3, [r2, #0]
		DrumUpdate(0);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fb16 	bl	80016fc <DrumUpdate>


		uint8_t ADSConfig[3] = {0x01,
 80020d0:	4a44      	ldr	r2, [pc, #272]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4611      	mov	r1, r2
 80020da:	8019      	strh	r1, [r3, #0]
 80020dc:	3302      	adds	r3, #2
 80020de:	0c12      	lsrs	r2, r2, #16
 80020e0:	701a      	strb	r2, [r3, #0]
							     ADS1115_OS | ADS1115_MODE_CONTINUOUS | ADS1115_PGA_ONE,
								 ADS1115_DATA_RATE_250 | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT | ADS1115_COMP_QUE };
		uint8_t ADSWrite[1] = {0x00};
 80020e2:	2300      	movs	r3, #0
 80020e4:	733b      	strb	r3, [r7, #12]
		uint8_t ADSReceive[2];
//		__disable_irq();
		for (int i = 0; i < 4; i++){
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e03c      	b.n	8002166 <HAL_TIM_PeriodElapsedCallback+0xb6>
			ADSConfig[1] = ADS1115_OS | ADS1115_PGA_ONE | ADS1115_MODE_CONTINUOUS | ((0b100 | i) << 4); // choose AIN
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	f063 033d 	orn	r3, r3, #61	; 0x3d
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	747b      	strb	r3, [r7, #17]

			int temp;
			errors[1] = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSConfig, 3, 100);
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	2364      	movs	r3, #100	; 0x64
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2303      	movs	r3, #3
 8002106:	2190      	movs	r1, #144	; 0x90
 8002108:	4837      	ldr	r0, [pc, #220]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800210a:	f003 fac1 	bl	8005690 <HAL_I2C_Master_Transmit>
 800210e:	4603      	mov	r3, r0
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002114:	805a      	strh	r2, [r3, #2]
//			if (!temp) LCD_Print(0, r++, "ERROR 1! %d", temp);
			errors[2] = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSWrite, 1, 100);
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	2364      	movs	r3, #100	; 0x64
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	2190      	movs	r1, #144	; 0x90
 8002122:	4831      	ldr	r0, [pc, #196]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002124:	f003 fab4 	bl	8005690 <HAL_I2C_Master_Transmit>
 8002128:	4603      	mov	r3, r0
 800212a:	b21a      	sxth	r2, r3
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800212e:	809a      	strh	r2, [r3, #4]
//			if (!temp) LCD_Print(0, r++, "ERROR 2! %d", temp);
//			HAL_Delay(20);

			errors[3] = HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS << 1, ADSReceive, 2, 100);
 8002130:	f107 0208 	add.w	r2, r7, #8
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2302      	movs	r3, #2
 800213a:	2190      	movs	r1, #144	; 0x90
 800213c:	482a      	ldr	r0, [pc, #168]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800213e:	f003 fba5 	bl	800588c <HAL_I2C_Master_Receive>
 8002142:	4603      	mov	r3, r0
 8002144:	b21a      	sxth	r2, r3
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002148:	80da      	strh	r2, [r3, #6]
//			if (!temp) LCD_Print(0, r++, "ERROR 3! %d", temp);
			voltage[i] = (ADSReceive[0] << 8 | ADSReceive[1]);
 800214a:	7a3b      	ldrb	r3, [r7, #8]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	7a7b      	ldrb	r3, [r7, #9]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b219      	sxth	r1, r3
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++){
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b03      	cmp	r3, #3
 800216a:	ddbf      	ble.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
//		__enable_irq();

//		if (drum_interrupt_counts % 2 == 0) {

		keyboardhid.KEYCODE1 = drums[0].state >= DRUM_HIT ? 0x07 : 0x00;  // press 'd'
 800216c:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800216e:	7a1b      	ldrb	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8002174:	2207      	movs	r2, #7
 8002176:	e000      	b.n	800217a <HAL_TIM_PeriodElapsedCallback+0xca>
 8002178:	2200      	movs	r2, #0
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800217c:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = drums[1].state >= DRUM_HIT ? 0x09 : 0x00;  // press 'f'
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_TIM_PeriodElapsedCallback+0xdc>
 8002188:	2209      	movs	r2, #9
 800218a:	e000      	b.n	800218e <HAL_TIM_PeriodElapsedCallback+0xde>
 800218c:	2200      	movs	r2, #0
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002190:	70da      	strb	r2, [r3, #3]
		keyboardhid.KEYCODE3 = drums[2].state >= DRUM_HIT ? 0x0d : 0x00;  // press 'j'
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002194:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 800219c:	220d      	movs	r2, #13
 800219e:	e000      	b.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0xf2>
 80021a0:	2200      	movs	r2, #0
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80021a4:	711a      	strb	r2, [r3, #4]
		keyboardhid.KEYCODE4 = drums[3].state >= DRUM_HIT ? 0x0e : 0x00;  // press 'k'
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80021a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x104>
 80021b0:	220e      	movs	r2, #14
 80021b2:	e000      	b.n	80021b6 <HAL_TIM_PeriodElapsedCallback+0x106>
 80021b4:	2200      	movs	r2, #0
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80021b8:	715a      	strb	r2, [r3, #5]

	else if (htim == &htim4) {
		mix_interrupt_counts++;
		PrecomputeMix();
	}
}
 80021ba:	e00a      	b.n	80021d2 <HAL_TIM_PeriodElapsedCallback+0x122>
	else if (htim == &htim4) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d106      	bne.n	80021d2 <HAL_TIM_PeriodElapsedCallback+0x122>
		mix_interrupt_counts++;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021cc:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 80021ce:	f7fe ff91 	bl	80010f4 <PrecomputeMix>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000dd0 	.word	0x20000dd0
 80021e0:	20000eb4 	.word	0x20000eb4
 80021e4:	08018ac0 	.word	0x08018ac0
 80021e8:	20000c00 	.word	0x20000c00
 80021ec:	20000ed4 	.word	0x20000ed4
 80021f0:	20000ec4 	.word	0x20000ec4
 80021f4:	20000710 	.word	0x20000710
 80021f8:	20000eb8 	.word	0x20000eb8
 80021fc:	20000e18 	.word	0x20000e18
 8002200:	20000ec0 	.word	0x20000ec0

08002204 <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f84b 	bl	80012ac <ButtonPadCallback>
 8002216:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fad1 	bl	80017c0 <ButtonPad_DrumCalibration>
	btn_callbacks++;
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_GPIO_EXTI_Callback+0x30>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GPIO_EXTI_Callback+0x30>)
 8002228:	801a      	strh	r2, [r3, #0]
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000edc 	.word	0x20000edc

08002238 <HAL_UART_RxCpltCallback>:

uint8_t Rx_data[1] = {0};
uint16_t Rx_buff[6] = {0};
int Rx_length = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
//	Rx_length += 1;
	if (Rx_length < 2) {
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	dc13      	bgt.n	8002270 <HAL_UART_RxCpltCallback+0x38>
		if (*Rx_data != 0xFF) {
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_UART_RxCpltCallback+0xb8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	d003      	beq.n	8002258 <HAL_UART_RxCpltCallback+0x20>
			Rx_length = 0;
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e040      	b.n	80022da <HAL_UART_RxCpltCallback+0xa2>
		} else {
			((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	4923      	ldr	r1, [pc, #140]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 8002260:	600a      	str	r2, [r1, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 8002266:	4413      	add	r3, r2
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_UART_RxCpltCallback+0xb8>)
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e034      	b.n	80022da <HAL_UART_RxCpltCallback+0xa2>
		}
	} else {
		((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	491d      	ldr	r1, [pc, #116]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 8002278:	600a      	str	r2, [r1, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 800227e:	4413      	add	r3, r2
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_UART_RxCpltCallback+0xb8>)
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	701a      	strb	r2, [r3, #0]
		if (Rx_length == 12) {
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d125      	bne.n	80022da <HAL_UART_RxCpltCallback+0xa2>
			if (Rx_buff[1] + Rx_buff[2] + Rx_buff[3] + Rx_buff[4] == Rx_buff[5]) {
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 8002290:	885b      	ldrh	r3, [r3, #2]
 8002292:	461a      	mov	r2, r3
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	4413      	add	r3, r2
 800229a:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 800229c:	88d2      	ldrh	r2, [r2, #6]
 800229e:	4413      	add	r3, r2
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 80022a2:	8912      	ldrh	r2, [r2, #8]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 80022a8:	8952      	ldrh	r2, [r2, #10]
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d112      	bne.n	80022d4 <HAL_UART_RxCpltCallback+0x9c>
				for (int i = 0; i < 4; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e00c      	b.n	80022ce <HAL_UART_RxCpltCallback+0x96>
					drum_sensor_values[i] = Rx_buff[i+1];
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_UART_RxCpltCallback+0xbc>)
 80022ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022be:	4619      	mov	r1, r3
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_UART_RxCpltCallback+0xc0>)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	ddef      	ble.n	80022b4 <HAL_UART_RxCpltCallback+0x7c>
				}
			}
			Rx_length = 0;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_UART_RxCpltCallback+0xb4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	4904      	ldr	r1, [pc, #16]	; (80022f0 <HAL_UART_RxCpltCallback+0xb8>)
 80022de:	4807      	ldr	r0, [pc, #28]	; (80022fc <HAL_UART_RxCpltCallback+0xc4>)
 80022e0:	f008 feb4 	bl	800b04c <HAL_UART_Receive_IT>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000ef0 	.word	0x20000ef0
 80022f0:	20000ee0 	.word	0x20000ee0
 80022f4:	20000ee4 	.word	0x20000ee4
 80022f8:	20000700 	.word	0x20000700
 80022fc:	20000e60 	.word	0x20000e60

08002300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002304:	b0a0      	sub	sp, #128	; 0x80
 8002306:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002308:	f001 fb3c 	bl	8003984 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230c:	f000 f990 	bl	8002630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002310:	f000 fc96 	bl	8002c40 <MX_GPIO_Init>
  MX_DMA_Init();
 8002314:	f000 fc5a 	bl	8002bcc <MX_DMA_Init>
  MX_SPI2_Init();
 8002318:	f000 fb0e 	bl	8002938 <MX_SPI2_Init>
  MX_TIM3_Init();
 800231c:	f000 fb8e 	bl	8002a3c <MX_TIM3_Init>
  MX_ADC1_Init();
 8002320:	f000 f9e6 	bl	80026f0 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8002324:	f000 fab0 	bl	8002888 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002328:	f00c fcca 	bl	800ecc0 <MX_FATFS_Init>
  MX_DAC_Init();
 800232c:	f000 fa4a 	bl	80027c4 <MX_DAC_Init>
  MX_I2C1_Init();
 8002330:	f000 fa7c 	bl	800282c <MX_I2C1_Init>
  MX_TIM2_Init();
 8002334:	f000 fb36 	bl	80029a4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002338:	f000 fbce 	bl	8002ad8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800233c:	f000 fc1c 	bl	8002b78 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002340:	f000 fac2 	bl	80028c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8002344:	48a4      	ldr	r0, [pc, #656]	; (80025d8 <main+0x2d8>)
 8002346:	f001 fe21 	bl	8003f8c <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT (&huart1, Rx_data, 1);
 800234a:	2201      	movs	r2, #1
 800234c:	49a3      	ldr	r1, [pc, #652]	; (80025dc <main+0x2dc>)
 800234e:	48a4      	ldr	r0, [pc, #656]	; (80025e0 <main+0x2e0>)
 8002350:	f008 fe7c 	bl	800b04c <HAL_UART_Receive_IT>

	ButtonPadInit();
 8002354:	f7fe ff8c 	bl	8001270 <ButtonPadInit>

	ILI9341_Init();
 8002358:	f7ff fafa 	bl	8001950 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 800235c:	2002      	movs	r0, #2
 800235e:	f7ff fc7d 	bl	8001c5c <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8002362:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8002366:	f7ff fdcf 	bl	8001f08 <LCD_FillScreen>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800236a:	4b9e      	ldr	r3, [pc, #632]	; (80025e4 <main+0x2e4>)
 800236c:	f107 0420 	add.w	r4, r7, #32
 8002370:	461d      	mov	r5, r3
 8002372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800237a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f010 fde6 	bl	8012f56 <osThreadCreate>
 800238a:	4603      	mov	r3, r0
 800238c:	4a96      	ldr	r2, [pc, #600]	; (80025e8 <main+0x2e8>)
 800238e:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTask */
  osThreadDef(adcTask, StartADCTask, osPriorityRealtime, 0, 128);
 8002390:	4b96      	ldr	r3, [pc, #600]	; (80025ec <main+0x2ec>)
 8002392:	1d3c      	adds	r4, r7, #4
 8002394:	461d      	mov	r5, r3
 8002396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800239e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f010 fdd5 	bl	8012f56 <osThreadCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a90      	ldr	r2, [pc, #576]	; (80025f0 <main+0x2f0>)
 80023b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
//  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80023b2:	f010 fdc9 	bl	8012f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	long last_ticks = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	long tft_last_ticks = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	long ticks = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
	int num_hits = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
	int hit_state = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40



	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (ADS1115_ADDRESS << 1), 5, 1) == HAL_OK) {
 80023ca:	2301      	movs	r3, #1
 80023cc:	2205      	movs	r2, #5
 80023ce:	2190      	movs	r1, #144	; 0x90
 80023d0:	4888      	ldr	r0, [pc, #544]	; (80025f4 <main+0x2f4>)
 80023d2:	f003 fcc7 	bl	8005d64 <HAL_I2C_IsDeviceReady>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d000      	beq.n	80023de <main+0xde>
//		return HAL_OK;
	} else {
//		return HAL_ERROR;
		while (1) {}
 80023dc:	e7fe      	b.n	80023dc <main+0xdc>


	uint32_t reset_ticks;
	while (1) {

		for (int i = 0; i < 4; i++) {
 80023de:	2300      	movs	r3, #0
 80023e0:	657b      	str	r3, [r7, #84]	; 0x54
 80023e2:	e014      	b.n	800240e <main+0x10e>
			if (voltage[i] > max_reading[i]) {
 80023e4:	4a84      	ldr	r2, [pc, #528]	; (80025f8 <main+0x2f8>)
 80023e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80023ec:	4983      	ldr	r1, [pc, #524]	; (80025fc <main+0x2fc>)
 80023ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dd07      	ble.n	8002408 <main+0x108>
				max_reading[i] = voltage[i];
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <main+0x2f8>)
 80023fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fc:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002400:	4a7e      	ldr	r2, [pc, #504]	; (80025fc <main+0x2fc>)
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240a:	3301      	adds	r3, #1
 800240c:	657b      	str	r3, [r7, #84]	; 0x54
 800240e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002410:	2b03      	cmp	r3, #3
 8002412:	dde7      	ble.n	80023e4 <main+0xe4>
			}
		}

		if (HAL_GetTick() - reset_ticks > 1000) {
 8002414:	f001 fb0e 	bl	8003a34 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002422:	d910      	bls.n	8002446 <main+0x146>
			reset_ticks = HAL_GetTick();
 8002424:	f001 fb06 	bl	8003a34 <HAL_GetTick>
 8002428:	65b8      	str	r0, [r7, #88]	; 0x58
			for (int i = 0; i < 4; i++) {
 800242a:	2300      	movs	r3, #0
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
 800242e:	e007      	b.n	8002440 <main+0x140>
				max_reading[i] = 0;
 8002430:	4a72      	ldr	r2, [pc, #456]	; (80025fc <main+0x2fc>)
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002434:	2100      	movs	r1, #0
 8002436:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 4; i++) {
 800243a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800243c:	3301      	adds	r3, #1
 800243e:	653b      	str	r3, [r7, #80]	; 0x50
 8002440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002442:	2b03      	cmp	r3, #3
 8002444:	ddf4      	ble.n	8002430 <main+0x130>
			}
		}

		int r = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (HAL_GetTick() - tft_last_ticks > 10) {
 800244a:	f001 faf3 	bl	8003a34 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b0a      	cmp	r3, #10
 8002456:	d9c2      	bls.n	80023de <main+0xde>

//			uint8_t data;
//			HAL_UART_Receive(&huart1, &data, 1, 10);

//			AddDrum((HAL_GetTick() / 1000) % 2);
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800245e:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 8002462:	f001 fae7 	bl	8003a34 <HAL_GetTick>
 8002466:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002468:	4a65      	ldr	r2, [pc, #404]	; (8002600 <main+0x300>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 8002472:	f001 fadf 	bl	8003a34 <HAL_GetTick>
 8002476:	4603      	mov	r3, r0
 8002478:	4a62      	ldr	r2, [pc, #392]	; (8002604 <main+0x304>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002480:	4b61      	ldr	r3, [pc, #388]	; (8002608 <main+0x308>)
 8002482:	fba3 1302 	umull	r1, r3, r3, r2
 8002486:	095c      	lsrs	r4, r3, #5
 8002488:	4623      	mov	r3, r4
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1b1b      	subs	r3, r3, r4
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002492:	f001 facf 	bl	8003a34 <HAL_GetTick>
 8002496:	4603      	mov	r3, r0
 8002498:	4a5c      	ldr	r2, [pc, #368]	; (800260c <main+0x30c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <main+0x308>)
 80024a2:	fba3 1302 	umull	r1, r3, r3, r2
 80024a6:	095d      	lsrs	r5, r3, #5
 80024a8:	462b      	mov	r3, r5
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1b5b      	subs	r3, r3, r5
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 80024b2:	f001 fabf 	bl	8003a34 <HAL_GetTick>
 80024b6:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 80024b8:	4a54      	ldr	r2, [pc, #336]	; (800260c <main+0x30c>)
 80024ba:	fba2 1203 	umull	r1, r2, r2, r3
 80024be:	0996      	lsrs	r6, r2, #6
 80024c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c4:	fb06 f202 	mul.w	r2, r6, r2
 80024c8:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <main+0x310>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fc04 	bl	8000cdc <__aeabi_i2f>
 80024d4:	4682      	mov	sl, r0
 80024d6:	f001 faad 	bl	8003a34 <HAL_GetTick>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <main+0x314>)
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	3301      	adds	r3, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fbf5 	bl	8000cd4 <__aeabi_ui2f>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	4650      	mov	r0, sl
 80024f0:	f7fe fcfc 	bl	8000eec <__aeabi_fdiv>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4948      	ldr	r1, [pc, #288]	; (8002618 <main+0x318>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fc43 	bl	8000d84 <__aeabi_fmul>
 80024fe:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f801 	bl	8000508 <__aeabi_f2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4944      	ldr	r1, [pc, #272]	; (800261c <main+0x31c>)
 800250c:	6809      	ldr	r1, [r1, #0]
 800250e:	4844      	ldr	r0, [pc, #272]	; (8002620 <main+0x320>)
 8002510:	8800      	ldrh	r0, [r0, #0]
 8002512:	9007      	str	r0, [sp, #28]
 8002514:	9106      	str	r1, [sp, #24]
 8002516:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800251a:	9602      	str	r6, [sp, #8]
 800251c:	9501      	str	r5, [sp, #4]
 800251e:	9400      	str	r4, [sp, #0]
 8002520:	464b      	mov	r3, r9
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <main+0x324>)
 8002524:	4641      	mov	r1, r8
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fd98 	bl	800205c <LCD_Print>
					Rx_length, btn_callbacks);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", max_reading[0], max_reading[1], max_reading[2], max_reading[3]);
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002532:	b299      	uxth	r1, r3
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <main+0x2fc>)
 8002536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253a:	461c      	mov	r4, r3
 800253c:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <main+0x2fc>)
 800253e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002542:	461a      	mov	r2, r3
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <main+0x2fc>)
 8002546:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800254a:	4618      	mov	r0, r3
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <main+0x2fc>)
 800254e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	9001      	str	r0, [sp, #4]
 8002556:	9200      	str	r2, [sp, #0]
 8002558:	4623      	mov	r3, r4
 800255a:	4a33      	ldr	r2, [pc, #204]	; (8002628 <main+0x328>)
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fd7d 	bl	800205c <LCD_Print>
////			LCD_DrumCalibration(&r);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", voltage[0], voltage[1], voltage[2], voltage[3]);
 8002562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002568:	b299      	uxth	r1, r3
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <main+0x2f8>)
 800256c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002570:	461c      	mov	r4, r3
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <main+0x2f8>)
 8002574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002578:	461a      	mov	r2, r3
 800257a:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <main+0x2f8>)
 800257c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <main+0x2f8>)
 8002584:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002588:	9302      	str	r3, [sp, #8]
 800258a:	9001      	str	r0, [sp, #4]
 800258c:	9200      	str	r2, [sp, #0]
 800258e:	4623      	mov	r3, r4
 8002590:	4a25      	ldr	r2, [pc, #148]	; (8002628 <main+0x328>)
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff fd62 	bl	800205c <LCD_Print>
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", errors[0], errors[1], errors[2], errors[3]);
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800259e:	b299      	uxth	r1, r3
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <main+0x32c>)
 80025a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a6:	461c      	mov	r4, r3
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <main+0x32c>)
 80025aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <main+0x32c>)
 80025b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <main+0x32c>)
 80025ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	9001      	str	r0, [sp, #4]
 80025c2:	9200      	str	r2, [sp, #0]
 80025c4:	4623      	mov	r3, r4
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <main+0x328>)
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff fd47 	bl	800205c <LCD_Print>
//			LCD_Print(0, 0, "%05d %05d", max_reading[0], voltage[0]);
			//			LCD_DrumCalibration(&r);
			tft_last_ticks = HAL_GetTick();
 80025ce:	f001 fa31 	bl	8003a34 <HAL_GetTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (1) {
 80025d6:	e702      	b.n	80023de <main+0xde>
 80025d8:	20000af0 	.word	0x20000af0
 80025dc:	20000ee0 	.word	0x20000ee0
 80025e0:	20000e60 	.word	0x20000e60
 80025e4:	08018b08 	.word	0x08018b08
 80025e8:	20000ea8 	.word	0x20000ea8
 80025ec:	08018b24 	.word	0x08018b24
 80025f0:	20000eac 	.word	0x20000eac
 80025f4:	20000c00 	.word	0x20000c00
 80025f8:	20000ec4 	.word	0x20000ec4
 80025fc:	20000ecc 	.word	0x20000ecc
 8002600:	95217cb1 	.word	0x95217cb1
 8002604:	45e7b273 	.word	0x45e7b273
 8002608:	88888889 	.word	0x88888889
 800260c:	10624dd3 	.word	0x10624dd3
 8002610:	20000eb4 	.word	0x20000eb4
 8002614:	20000eb0 	.word	0x20000eb0
 8002618:	447a0000 	.word	0x447a0000
 800261c:	20000ef0 	.word	0x20000ef0
 8002620:	20000edc 	.word	0x20000edc
 8002624:	08018ac4 	.word	0x08018ac4
 8002628:	08018af0 	.word	0x08018af0
 800262c:	20000ed4 	.word	0x20000ed4

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b096      	sub	sp, #88	; 0x58
 8002634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800263a:	2228      	movs	r2, #40	; 0x28
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f013 fb6a 	bl	8015d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002664:	2301      	movs	r3, #1
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002672:	2301      	movs	r3, #1
 8002674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002676:	2302      	movs	r3, #2
 8002678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002680:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800268a:	4618      	mov	r0, r3
 800268c:	f005 fd74 	bl	8008178 <HAL_RCC_OscConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002696:	f000 fce9 	bl	800306c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269a:	230f      	movs	r3, #15
 800269c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269e:	2302      	movs	r3, #2
 80026a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80026ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	2102      	movs	r1, #2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f005 ffdf 	bl	800867c <HAL_RCC_ClockConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026c4:	f000 fcd2 	bl	800306c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80026c8:	2312      	movs	r3, #18
 80026ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80026cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4618      	mov	r0, r3
 80026da:	f006 f95d 	bl	8008998 <HAL_RCCEx_PeriphCLKConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80026e4:	f000 fcc2 	bl	800306c <Error_Handler>
  }
}
 80026e8:	bf00      	nop
 80026ea:	3758      	adds	r7, #88	; 0x58
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <MX_ADC1_Init+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002710:	2201      	movs	r2, #1
 8002712:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002716:	2200      	movs	r2, #0
 8002718:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <MX_ADC1_Init+0xcc>)
 800271c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <MX_ADC1_Init+0xcc>)
 800272a:	2204      	movs	r2, #4
 800272c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800272e:	4823      	ldr	r0, [pc, #140]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002730:	f001 f9ae 	bl	8003a90 <HAL_ADC_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800273a:	f000 fc97 	bl	800306c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002742:	2301      	movs	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002746:	2307      	movs	r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	481b      	ldr	r0, [pc, #108]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002750:	f001 fa88 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800275a:	f000 fc87 	bl	800306c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800275e:	2301      	movs	r3, #1
 8002760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002762:	2302      	movs	r3, #2
 8002764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4814      	ldr	r0, [pc, #80]	; (80027bc <MX_ADC1_Init+0xcc>)
 800276c:	f001 fa7a 	bl	8003c64 <HAL_ADC_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002776:	f000 fc79 	bl	800306c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800277a:	2302      	movs	r3, #2
 800277c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800277e:	2303      	movs	r3, #3
 8002780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <MX_ADC1_Init+0xcc>)
 8002788:	f001 fa6c 	bl	8003c64 <HAL_ADC_ConfigChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002792:	f000 fc6b 	bl	800306c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002796:	2303      	movs	r3, #3
 8002798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800279a:	2304      	movs	r3, #4
 800279c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_ADC1_Init+0xcc>)
 80027a4:	f001 fa5e 	bl	8003c64 <HAL_ADC_ConfigChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80027ae:	f000 fc5d 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000af0 	.word	0x20000af0
 80027c0:	40012400 	.word	0x40012400

080027c4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027ca:	463b      	mov	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_DAC_Init+0x60>)
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <MX_DAC_Init+0x64>)
 80027d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80027d8:	4812      	ldr	r0, [pc, #72]	; (8002824 <MX_DAC_Init+0x60>)
 80027da:	f001 fd92 	bl	8004302 <HAL_DAC_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80027e4:	f000 fc42 	bl	800306c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80027e8:	2324      	movs	r3, #36	; 0x24
 80027ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	480b      	ldr	r0, [pc, #44]	; (8002824 <MX_DAC_Init+0x60>)
 80027f8:	f001 feae 	bl	8004558 <HAL_DAC_ConfigChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002802:	f000 fc33 	bl	800306c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002806:	463b      	mov	r3, r7
 8002808:	2210      	movs	r2, #16
 800280a:	4619      	mov	r1, r3
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_DAC_Init+0x60>)
 800280e:	f001 fea3 	bl	8004558 <HAL_DAC_ConfigChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002818:	f000 fc28 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000b64 	.word	0x20000b64
 8002828:	40007400 	.word	0x40007400

0800282c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <MX_I2C1_Init+0x50>)
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <MX_I2C1_Init+0x54>)
 8002834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_I2C1_Init+0x50>)
 8002838:	4a12      	ldr	r2, [pc, #72]	; (8002884 <MX_I2C1_Init+0x58>)
 800283a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_I2C1_Init+0x50>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_I2C1_Init+0x50>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_I2C1_Init+0x50>)
 800284a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800284e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <MX_I2C1_Init+0x50>)
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_I2C1_Init+0x50>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <MX_I2C1_Init+0x50>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_I2C1_Init+0x50>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002868:	4804      	ldr	r0, [pc, #16]	; (800287c <MX_I2C1_Init+0x50>)
 800286a:	f002 fdcd 	bl	8005408 <HAL_I2C_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002874:	f000 fbfa 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000c00 	.word	0x20000c00
 8002880:	40005400 	.word	0x40005400
 8002884:	000186a0 	.word	0x000186a0

08002888 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <MX_SDIO_SD_Init+0x3c>)
 8002890:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <MX_SDIO_SD_Init+0x38>)
 80028b2:	2264      	movs	r2, #100	; 0x64
 80028b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000c54 	.word	0x20000c54
 80028c4:	40018000 	.word	0x40018000

080028c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_SPI1_Init+0x68>)
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <MX_SPI1_Init+0x6c>)
 80028d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_SPI1_Init+0x68>)
 80028d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <MX_SPI1_Init+0x68>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_SPI1_Init+0x68>)
 80028e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_SPI1_Init+0x68>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_SPI1_Init+0x68>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_SPI1_Init+0x68>)
 80028f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80028fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_SPI1_Init+0x68>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_SPI1_Init+0x68>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_SPI1_Init+0x68>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_SPI1_Init+0x68>)
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_SPI1_Init+0x68>)
 8002916:	220a      	movs	r2, #10
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_SPI1_Init+0x68>)
 800291c:	f007 fb55 	bl	8009fca <HAL_SPI_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002926:	f000 fba1 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000cd8 	.word	0x20000cd8
 8002934:	40013000 	.word	0x40013000

08002938 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_SPI2_Init+0x64>)
 800293e:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <MX_SPI2_Init+0x68>)
 8002940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_SPI2_Init+0x64>)
 8002944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_SPI2_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <MX_SPI2_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_SPI2_Init+0x64>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_SPI2_Init+0x64>)
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_SPI2_Init+0x64>)
 8002964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002968:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_SPI2_Init+0x64>)
 800296c:	2200      	movs	r2, #0
 800296e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <MX_SPI2_Init+0x64>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_SPI2_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <MX_SPI2_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_SPI2_Init+0x64>)
 8002984:	220a      	movs	r2, #10
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_SPI2_Init+0x64>)
 800298a:	f007 fb1e 	bl	8009fca <HAL_SPI_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002994:	f000 fb6a 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000d30 	.word	0x20000d30
 80029a0:	40003800 	.word	0x40003800

080029a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029d6:	f240 52db 	movw	r2, #1499	; 0x5db
 80029da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029e8:	4813      	ldr	r0, [pc, #76]	; (8002a38 <MX_TIM2_Init+0x94>)
 80029ea:	f007 fd5b 	bl	800a4a4 <HAL_TIM_Base_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029f4:	f000 fb3a 	bl	800306c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	4619      	mov	r1, r3
 8002a04:	480c      	ldr	r0, [pc, #48]	; (8002a38 <MX_TIM2_Init+0x94>)
 8002a06:	f007 ff83 	bl	800a910 <HAL_TIM_ConfigClockSource>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a10:	f000 fb2c 	bl	800306c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a14:	2320      	movs	r3, #32
 8002a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_TIM2_Init+0x94>)
 8002a22:	f008 fa45 	bl	800aeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a2c:	f000 fb1e 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000d88 	.word	0x20000d88

08002a3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a50:	463b      	mov	r3, r7
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <MX_TIM3_Init+0x98>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a60:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002a64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a6e:	2231      	movs	r2, #49	; 0x31
 8002a70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a7e:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a80:	f007 fd10 	bl	800a4a4 <HAL_TIM_Base_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a8a:	f000 faef 	bl	800306c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a94:	f107 0308 	add.w	r3, r7, #8
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002a9c:	f007 ff38 	bl	800a910 <HAL_TIM_ConfigClockSource>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002aa6:	f000 fae1 	bl	800306c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <MX_TIM3_Init+0x94>)
 8002ab8:	f008 f9fa 	bl	800aeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002ac2:	f000 fad3 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000dd0 	.word	0x20000dd0
 8002ad4:	40000400 	.word	0x40000400

08002ad8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <MX_TIM4_Init+0x9c>)
 8002afa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b0a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b16:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b1c:	4814      	ldr	r0, [pc, #80]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b1e:	f007 fcc1 	bl	800a4a4 <HAL_TIM_Base_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b28:	f000 faa0 	bl	800306c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002b2c:	2305      	movs	r3, #5
 8002b2e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002b30:	2310      	movs	r3, #16
 8002b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	4619      	mov	r1, r3
 8002b3a:	480d      	ldr	r0, [pc, #52]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b3c:	f007 ffaf 	bl	800aa9e <HAL_TIM_SlaveConfigSynchro>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002b46:	f000 fa91 	bl	800306c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	; (8002b70 <MX_TIM4_Init+0x98>)
 8002b58:	f008 f9aa 	bl	800aeb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002b62:	f000 fa83 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000e18 	.word	0x20000e18
 8002b74:	40000800 	.word	0x40000800

08002b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <MX_USART1_UART_Init+0x50>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	f008 f9fc 	bl	800afac <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bba:	f000 fa57 	bl	800306c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000e60 	.word	0x20000e60
 8002bc8:	40013800 	.word	0x40013800

08002bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <MX_DMA_Init+0x70>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <MX_DMA_Init+0x70>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6153      	str	r3, [r2, #20]
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <MX_DMA_Init+0x70>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <MX_DMA_Init+0x70>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <MX_DMA_Init+0x70>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6153      	str	r3, [r2, #20]
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_DMA_Init+0x70>)
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2105      	movs	r1, #5
 8002c06:	200b      	movs	r0, #11
 8002c08:	f001 fb45 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c0c:	200b      	movs	r0, #11
 8002c0e:	f001 fb5e 	bl	80042ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2105      	movs	r1, #5
 8002c16:	203a      	movs	r0, #58	; 0x3a
 8002c18:	f001 fb3d 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002c1c:	203a      	movs	r0, #58	; 0x3a
 8002c1e:	f001 fb56 	bl	80042ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2105      	movs	r1, #5
 8002c26:	203b      	movs	r0, #59	; 0x3b
 8002c28:	f001 fb35 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8002c2c:	203b      	movs	r0, #59	; 0x3b
 8002c2e:	f001 fb4e 	bl	80042ce <HAL_NVIC_EnableIRQ>

}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000

08002c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c46:	f107 0318 	add.w	r3, r7, #24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c54:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c6c:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c72:	f043 0310 	orr.w	r3, r3, #16
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cb4:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4a43      	ldr	r2, [pc, #268]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002cba:	f043 0320 	orr.w	r3, r3, #32
 8002cbe:	6193      	str	r3, [r2, #24]
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <MX_GPIO_Init+0x188>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f64f 0170 	movw	r1, #63600	; 0xf870
 8002cd2:	483e      	ldr	r0, [pc, #248]	; (8002dcc <MX_GPIO_Init+0x18c>)
 8002cd4:	f002 fb4f 	bl	8005376 <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002cde:	483c      	ldr	r0, [pc, #240]	; (8002dd0 <MX_GPIO_Init+0x190>)
 8002ce0:	f002 fb49 	bl	8005376 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002cea:	483a      	ldr	r0, [pc, #232]	; (8002dd4 <MX_GPIO_Init+0x194>)
 8002cec:	f002 fb43 	bl	8005376 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8002cf0:	230f      	movs	r3, #15
 8002cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002cf4:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <MX_GPIO_Init+0x198>)
 8002cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cfc:	f107 0318 	add.w	r3, r7, #24
 8002d00:	4619      	mov	r1, r3
 8002d02:	4832      	ldr	r0, [pc, #200]	; (8002dcc <MX_GPIO_Init+0x18c>)
 8002d04:	f002 f98c 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002d08:	f64f 0370 	movw	r3, #63600	; 0xf870
 8002d0c:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2302      	movs	r3, #2
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d1a:	f107 0318 	add.w	r3, r7, #24
 8002d1e:	4619      	mov	r1, r3
 8002d20:	482a      	ldr	r0, [pc, #168]	; (8002dcc <MX_GPIO_Init+0x18c>)
 8002d22:	f002 f97d 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2302      	movs	r3, #2
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d38:	f107 0318 	add.w	r3, r7, #24
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4824      	ldr	r0, [pc, #144]	; (8002dd0 <MX_GPIO_Init+0x190>)
 8002d40:	f002 f96e 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002d44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2302      	movs	r3, #2
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	f107 0318 	add.w	r3, r7, #24
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481d      	ldr	r0, [pc, #116]	; (8002dd4 <MX_GPIO_Init+0x194>)
 8002d5e:	f002 f95f 	bl	8005020 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 0318 	add.w	r3, r7, #24
 8002d76:	4619      	mov	r1, r3
 8002d78:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <MX_GPIO_Init+0x190>)
 8002d7a:	f002 f951 	bl	8005020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2105      	movs	r1, #5
 8002d82:	2006      	movs	r0, #6
 8002d84:	f001 fa87 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d88:	2006      	movs	r0, #6
 8002d8a:	f001 faa0 	bl	80042ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2105      	movs	r1, #5
 8002d92:	2007      	movs	r0, #7
 8002d94:	f001 fa7f 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d98:	2007      	movs	r0, #7
 8002d9a:	f001 fa98 	bl	80042ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2105      	movs	r1, #5
 8002da2:	2008      	movs	r0, #8
 8002da4:	f001 fa77 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002da8:	2008      	movs	r0, #8
 8002daa:	f001 fa90 	bl	80042ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	2009      	movs	r0, #9
 8002db4:	f001 fa6f 	bl	8004296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002db8:	2009      	movs	r0, #9
 8002dba:	f001 fa88 	bl	80042ce <HAL_NVIC_EnableIRQ>

}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40011800 	.word	0x40011800
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40010c00 	.word	0x40010c00
 8002dd8:	10310000 	.word	0x10310000

08002ddc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de0:	b092      	sub	sp, #72	; 0x48
 8002de2:	af08      	add	r7, sp, #32
 8002de4:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002de6:	f012 fa89 	bl	80152fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	long last_ticks = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
	long tft_last_ticks = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
	long ticks = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
	int num_hits = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
	int hit_state = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
	int reset_ticks = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {
//	  osDelay(1);


		for (int i = 0; i < 4; i++) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	e014      	b.n	8002e32 <StartDefaultTask+0x56>
			if (voltage[i] > max_reading[i]) {
 8002e08:	4a64      	ldr	r2, [pc, #400]	; (8002f9c <StartDefaultTask+0x1c0>)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002e10:	4963      	ldr	r1, [pc, #396]	; (8002fa0 <StartDefaultTask+0x1c4>)
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dd07      	ble.n	8002e2c <StartDefaultTask+0x50>
				max_reading[i] = voltage[i];
 8002e1c:	4a5f      	ldr	r2, [pc, #380]	; (8002f9c <StartDefaultTask+0x1c0>)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002e24:	4a5e      	ldr	r2, [pc, #376]	; (8002fa0 <StartDefaultTask+0x1c4>)
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	dde7      	ble.n	8002e08 <StartDefaultTask+0x2c>
			}
		}

		if (HAL_GetTick() - reset_ticks > 200) {
 8002e38:	f000 fdfc 	bl	8003a34 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2bc8      	cmp	r3, #200	; 0xc8
 8002e44:	d907      	bls.n	8002e56 <StartDefaultTask+0x7a>
			reset_ticks = HAL_GetTick();
 8002e46:	f000 fdf5 	bl	8003a34 <HAL_GetTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
//			for (int i = 0; i < 4; i++) {
//				max_reading[i] = 0;
//			}
			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	4854      	ldr	r0, [pc, #336]	; (8002fa4 <StartDefaultTask+0x1c8>)
 8002e52:	f002 faa8 	bl	80053a6 <HAL_GPIO_TogglePin>
		}

		int r = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
//
////			AddDrum((HAL_GetTick() / 1000) % 2);
//		__disable_irq();
//		UBaseType_t uxSavedInterruptStatus;
//		 uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	60ba      	str	r2, [r7, #8]
 8002e60:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 8002e64:	f000 fde6 	bl	8003a34 <HAL_GetTick>
 8002e68:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002e6a:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <StartDefaultTask+0x1cc>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 8002e74:	f000 fdde 	bl	8003a34 <HAL_GetTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a4c      	ldr	r2, [pc, #304]	; (8002fac <StartDefaultTask+0x1d0>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002e82:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <StartDefaultTask+0x1d4>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	095c      	lsrs	r4, r3, #5
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1b1b      	subs	r3, r3, r4
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002e94:	f000 fdce 	bl	8003a34 <HAL_GetTick>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a46      	ldr	r2, [pc, #280]	; (8002fb4 <StartDefaultTask+0x1d8>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <StartDefaultTask+0x1d4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095d      	lsrs	r5, r3, #5
 8002eaa:	462b      	mov	r3, r5
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1b5b      	subs	r3, r3, r5
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002eb4:	f000 fdbe 	bl	8003a34 <HAL_GetTick>
 8002eb8:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002eba:	4a3e      	ldr	r2, [pc, #248]	; (8002fb4 <StartDefaultTask+0x1d8>)
 8002ebc:	fba2 1203 	umull	r1, r2, r2, r3
 8002ec0:	0996      	lsrs	r6, r2, #6
 8002ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ec6:	fb06 f202 	mul.w	r2, r6, r2
 8002eca:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <StartDefaultTask+0x1dc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd ff03 	bl	8000cdc <__aeabi_i2f>
 8002ed6:	4682      	mov	sl, r0
 8002ed8:	f000 fdac 	bl	8003a34 <HAL_GetTick>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4a37      	ldr	r2, [pc, #220]	; (8002fbc <StartDefaultTask+0x1e0>)
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fef4 	bl	8000cd4 <__aeabi_ui2f>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	f7fd fffb 	bl	8000eec <__aeabi_fdiv>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4931      	ldr	r1, [pc, #196]	; (8002fc0 <StartDefaultTask+0x1e4>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd ff42 	bl	8000d84 <__aeabi_fmul>
 8002f00:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb00 	bl	8000508 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <StartDefaultTask+0x1e8>)
 8002f0e:	6809      	ldr	r1, [r1, #0]
 8002f10:	482d      	ldr	r0, [pc, #180]	; (8002fc8 <StartDefaultTask+0x1ec>)
 8002f12:	8800      	ldrh	r0, [r0, #0]
 8002f14:	9007      	str	r0, [sp, #28]
 8002f16:	9106      	str	r1, [sp, #24]
 8002f18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f1c:	9602      	str	r6, [sp, #8]
 8002f1e:	9501      	str	r5, [sp, #4]
 8002f20:	9400      	str	r4, [sp, #0]
 8002f22:	464b      	mov	r3, r9
 8002f24:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <StartDefaultTask+0x1f0>)
 8002f26:	4641      	mov	r1, r8
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7ff f897 	bl	800205c <LCD_Print>
//		LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld",
//							HAL_GetTick() / (1000 * 60 * 60),
//							HAL_GetTick() / (1000 * 60) % 60,
//							(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000);
//		LCD_Print(0, r++, "penis");
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", max_reading[0], max_reading[1], max_reading[2], max_reading[3]);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	60ba      	str	r2, [r7, #8]
 8002f34:	b299      	uxth	r1, r3
 8002f36:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <StartDefaultTask+0x1c4>)
 8002f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3c:	461c      	mov	r4, r3
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <StartDefaultTask+0x1c4>)
 8002f40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <StartDefaultTask+0x1c4>)
 8002f48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <StartDefaultTask+0x1c4>)
 8002f50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f54:	9302      	str	r3, [sp, #8]
 8002f56:	9001      	str	r0, [sp, #4]
 8002f58:	9200      	str	r2, [sp, #0]
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <StartDefaultTask+0x1f4>)
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7ff f87c 	bl	800205c <LCD_Print>
//			  taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
//			__enable_irq();
//////			LCD_DrumCalibration(&r);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", voltage[0], voltage[1], voltage[2], voltage[3]);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	60ba      	str	r2, [r7, #8]
 8002f6a:	b299      	uxth	r1, r3
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <StartDefaultTask+0x1c0>)
 8002f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f72:	461c      	mov	r4, r3
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <StartDefaultTask+0x1c0>)
 8002f76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <StartDefaultTask+0x1c0>)
 8002f7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f82:	4618      	mov	r0, r3
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <StartDefaultTask+0x1c0>)
 8002f86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	9001      	str	r0, [sp, #4]
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	4623      	mov	r3, r4
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <StartDefaultTask+0x1f4>)
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7ff f861 	bl	800205c <LCD_Print>
  {
 8002f9a:	e732      	b.n	8002e02 <StartDefaultTask+0x26>
 8002f9c:	20000ec4 	.word	0x20000ec4
 8002fa0:	20000ecc 	.word	0x20000ecc
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	95217cb1 	.word	0x95217cb1
 8002fac:	45e7b273 	.word	0x45e7b273
 8002fb0:	88888889 	.word	0x88888889
 8002fb4:	10624dd3 	.word	0x10624dd3
 8002fb8:	20000eb4 	.word	0x20000eb4
 8002fbc:	20000eb0 	.word	0x20000eb0
 8002fc0:	447a0000 	.word	0x447a0000
 8002fc4:	20000ef0 	.word	0x20000ef0
 8002fc8:	20000edc 	.word	0x20000edc
 8002fcc:	08018ac4 	.word	0x08018ac4
 8002fd0:	08018af0 	.word	0x08018af0

08002fd4 <StartADCTask>:
//ADS1118 Configuration Registers
ADS_InitTypeDef adsConfigReg;

/* USER CODE END Header_StartADCTask */
void StartADCTask(void const * argument)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADCTask */
	//ADS Structure variable
//		ADS_InitTypeDef ConfigReg;

		//We will use it as single-shot mode
		adsConfigReg.stru.OS				=	0x1;   //high
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <StartADCTask+0x90>)
 8002fde:	7853      	ldrb	r3, [r2, #1]
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	7053      	strb	r3, [r2, #1]
		// 0x4 enables AIN0 , 0x5 enables AIN1,0x6 enables AIN2 and 0x7 enables AIN3 .
		adsConfigReg.stru.MUX			=	0x4;
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <StartADCTask+0x90>)
 8002fe8:	7853      	ldrb	r3, [r2, #1]
 8002fea:	2104      	movs	r1, #4
 8002fec:	f361 1306 	bfi	r3, r1, #4, #3
 8002ff0:	7053      	strb	r3, [r2, #1]
		//Programmable Gain amplifier
		adsConfigReg.stru.PGA      = 0x1;		//  FSR 4.096V
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <StartADCTask+0x90>)
 8002ff4:	7853      	ldrb	r3, [r2, #1]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	f361 0343 	bfi	r3, r1, #1, #3
 8002ffc:	7053      	strb	r3, [r2, #1]
		//Continuous mode or single-shot mode
		adsConfigReg.stru.MODE			=	0x0;
 8002ffe:	4a19      	ldr	r2, [pc, #100]	; (8003064 <StartADCTask+0x90>)
 8003000:	7853      	ldrb	r3, [r2, #1]
 8003002:	f36f 0300 	bfc	r3, #0, #1
 8003006:	7053      	strb	r3, [r2, #1]
		//Data Rate register
		adsConfigReg.stru.DR       = 0x4;
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <StartADCTask+0x90>)
 800300a:	7813      	ldrb	r3, [r2, #0]
 800300c:	2104      	movs	r1, #4
 800300e:	f361 1347 	bfi	r3, r1, #5, #3
 8003012:	7013      	strb	r3, [r2, #0]
		//If you want to use this chip as a temperature sensor set this as 1.
		adsConfigReg.stru.TS_MODE	=	0x0;
 8003014:	4a13      	ldr	r2, [pc, #76]	; (8003064 <StartADCTask+0x90>)
 8003016:	7813      	ldrb	r3, [r2, #0]
 8003018:	f36f 1304 	bfc	r3, #4, #1
 800301c:	7013      	strb	r3, [r2, #0]
		//Enable built-in pull-up resistors.
		adsConfigReg.stru.PULLUP		= 0x1;
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <StartADCTask+0x90>)
 8003020:	7813      	ldrb	r3, [r2, #0]
 8003022:	f043 0308 	orr.w	r3, r3, #8
 8003026:	7013      	strb	r3, [r2, #0]
		//Command mode. Set this always as 0x01.
		adsConfigReg.stru.NOP			=	0x1;
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <StartADCTask+0x90>)
 800302a:	7813      	ldrb	r3, [r2, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	f361 0342 	bfi	r3, r1, #1, #2
 8003032:	7013      	strb	r3, [r2, #0]
		//Reserved register. It does not matter this register is 1 or 0.
		adsConfigReg.stru.RESV			= 0x1;
 8003034:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <StartADCTask+0x90>)
 8003036:	7813      	ldrb	r3, [r2, #0]
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	7013      	strb	r3, [r2, #0]


  /* Infinite loop */
  for(;;)
  {
	  drum_interrupt_counts++;
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <StartADCTask+0x94>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <StartADCTask+0x94>)
 8003046:	6013      	str	r3, [r2, #0]
	  osDelay(3);
 8003048:	2003      	movs	r0, #3
 800304a:	f00f ffd0 	bl	8012fee <osDelay>

	  for (int i = 0; i < 4; i++){
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e002      	b.n	800305a <StartADCTask+0x86>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b03      	cmp	r3, #3
 800305e:	ddf9      	ble.n	8003054 <StartADCTask+0x80>
	  drum_interrupt_counts++;
 8003060:	e7ed      	b.n	800303e <StartADCTask+0x6a>
 8003062:	bf00      	nop
 8003064:	20000ef4 	.word	0x20000ef4
 8003068:	20000eb4 	.word	0x20000eb4

0800306c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003070:	b672      	cpsid	i
}
 8003072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003074:	e7fe      	b.n	8003074 <Error_Handler+0x8>
	...

08003078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_MspInit+0x4c>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	4a10      	ldr	r2, [pc, #64]	; (80030c4 <HAL_MspInit+0x4c>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6193      	str	r3, [r2, #24]
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_MspInit+0x4c>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_MspInit+0x4c>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_MspInit+0x4c>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	61d3      	str	r3, [r2, #28]
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_MspInit+0x4c>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	210f      	movs	r1, #15
 80030b2:	f06f 0001 	mvn.w	r0, #1
 80030b6:	f001 f8ee 	bl	8004296 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a28      	ldr	r2, [pc, #160]	; (8003184 <HAL_ADC_MspInit+0xbc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d149      	bne.n	800317c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030e8:	4b27      	ldr	r3, [pc, #156]	; (8003188 <HAL_ADC_MspInit+0xc0>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <HAL_ADC_MspInit+0xc0>)
 80030ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <HAL_ADC_MspInit+0xc0>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <HAL_ADC_MspInit+0xc0>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <HAL_ADC_MspInit+0xc0>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6193      	str	r3, [r2, #24]
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_ADC_MspInit+0xc0>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003118:	230f      	movs	r3, #15
 800311a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311c:	2303      	movs	r3, #3
 800311e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4619      	mov	r1, r3
 8003126:	4819      	ldr	r0, [pc, #100]	; (800318c <HAL_ADC_MspInit+0xc4>)
 8003128:	f001 ff7a 	bl	8005020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 800312e:	4a19      	ldr	r2, [pc, #100]	; (8003194 <HAL_ADC_MspInit+0xcc>)
 8003130:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800314c:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 800314e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003152:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003156:	2220      	movs	r2, #32
 8003158:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 800315c:	2200      	movs	r2, #0
 800315e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003160:	480b      	ldr	r0, [pc, #44]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003162:	f001 fad9 	bl	8004718 <HAL_DMA_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800316c:	f7ff ff7e 	bl	800306c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003174:	621a      	str	r2, [r3, #32]
 8003176:	4a06      	ldr	r2, [pc, #24]	; (8003190 <HAL_ADC_MspInit+0xc8>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800317c:	bf00      	nop
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40012400 	.word	0x40012400
 8003188:	40021000 	.word	0x40021000
 800318c:	40010800 	.word	0x40010800
 8003190:	20000b20 	.word	0x20000b20
 8003194:	40020008 	.word	0x40020008

08003198 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	; (80032a8 <HAL_DAC_MspInit+0x110>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d172      	bne.n	800329e <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80031b8:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_DAC_MspInit+0x114>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4a3b      	ldr	r2, [pc, #236]	; (80032ac <HAL_DAC_MspInit+0x114>)
 80031be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031c2:	61d3      	str	r3, [r2, #28]
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_DAC_MspInit+0x114>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_DAC_MspInit+0x114>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4a35      	ldr	r2, [pc, #212]	; (80032ac <HAL_DAC_MspInit+0x114>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6193      	str	r3, [r2, #24]
 80031dc:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_DAC_MspInit+0x114>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031e8:	2330      	movs	r3, #48	; 0x30
 80031ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ec:	2303      	movs	r3, #3
 80031ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	4619      	mov	r1, r3
 80031f6:	482e      	ldr	r0, [pc, #184]	; (80032b0 <HAL_DAC_MspInit+0x118>)
 80031f8:	f001 ff12 	bl	8005020 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 80031fc:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 80031fe:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_DAC_MspInit+0x120>)
 8003200:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 8003204:	2210      	movs	r2, #16
 8003206:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003208:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 8003216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800321c:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 800321e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003222:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003224:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 8003226:	2220      	movs	r2, #32
 8003228:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 800322c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003230:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003232:	4820      	ldr	r0, [pc, #128]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 8003234:	f001 fa70 	bl	8004718 <HAL_DMA_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 800323e:	f7ff ff15 	bl	800306c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_DAC_MspInit+0x11c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 800324e:	4b1b      	ldr	r3, [pc, #108]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <HAL_DAC_MspInit+0x128>)
 8003252:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003256:	2210      	movs	r2, #16
 8003258:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800325a:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_DAC_MspInit+0x124>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800326c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003274:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003278:	2220      	movs	r2, #32
 800327a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_DAC_MspInit+0x124>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003282:	480e      	ldr	r0, [pc, #56]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003284:	f001 fa48 	bl	8004718 <HAL_DMA_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 800328e:	f7ff feed 	bl	800306c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_DAC_MspInit+0x124>)
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	4a08      	ldr	r2, [pc, #32]	; (80032bc <HAL_DAC_MspInit+0x124>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800329e:	bf00      	nop
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40007400 	.word	0x40007400
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40010800 	.word	0x40010800
 80032b4:	20000b78 	.word	0x20000b78
 80032b8:	40020430 	.word	0x40020430
 80032bc:	20000bbc 	.word	0x20000bbc
 80032c0:	40020444 	.word	0x40020444

080032c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_I2C_MspInit+0x70>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d123      	bne.n	800332c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_I2C_MspInit+0x74>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_I2C_MspInit+0x74>)
 80032ea:	f043 0308 	orr.w	r3, r3, #8
 80032ee:	6193      	str	r3, [r2, #24]
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_I2C_MspInit+0x74>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032fc:	23c0      	movs	r3, #192	; 0xc0
 80032fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003300:	2312      	movs	r3, #18
 8003302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003304:	2303      	movs	r3, #3
 8003306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f107 0310 	add.w	r3, r7, #16
 800330c:	4619      	mov	r1, r3
 800330e:	480b      	ldr	r0, [pc, #44]	; (800333c <HAL_I2C_MspInit+0x78>)
 8003310:	f001 fe86 	bl	8005020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_I2C_MspInit+0x74>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_I2C_MspInit+0x74>)
 800331a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800331e:	61d3      	str	r3, [r2, #28]
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_I2C_MspInit+0x74>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800332c:	bf00      	nop
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40005400 	.word	0x40005400
 8003338:	40021000 	.word	0x40021000
 800333c:	40010c00 	.word	0x40010c00

08003340 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_SD_MspInit+0xa4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d13c      	bne.n	80033da <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 8003366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336a:	6153      	str	r3, [r2, #20]
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 800337e:	f043 0310 	orr.w	r3, r3, #16
 8003382:	6193      	str	r3, [r2, #24]
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 8003396:	f043 0320 	orr.w	r3, r3, #32
 800339a:	6193      	str	r3, [r2, #24]
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_SD_MspInit+0xa8>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80033a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80033ac:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b2:	2303      	movs	r3, #3
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b6:	f107 0318 	add.w	r3, r7, #24
 80033ba:	4619      	mov	r1, r3
 80033bc:	480b      	ldr	r0, [pc, #44]	; (80033ec <HAL_SD_MspInit+0xac>)
 80033be:	f001 fe2f 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033c2:	2304      	movs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ce:	f107 0318 	add.w	r3, r7, #24
 80033d2:	4619      	mov	r1, r3
 80033d4:	4806      	ldr	r0, [pc, #24]	; (80033f0 <HAL_SD_MspInit+0xb0>)
 80033d6:	f001 fe23 	bl	8005020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40018000 	.word	0x40018000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40011000 	.word	0x40011000
 80033f0:	40011400 	.word	0x40011400

080033f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4b      	ldr	r2, [pc, #300]	; (800353c <HAL_SPI_MspInit+0x148>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d157      	bne.n	80034c4 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 800341a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	4a43      	ldr	r2, [pc, #268]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6193      	str	r3, [r2, #24]
 8003438:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003444:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a3d      	ldr	r2, [pc, #244]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800345c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f107 031c 	add.w	r3, r7, #28
 800346e:	4619      	mov	r1, r3
 8003470:	4834      	ldr	r0, [pc, #208]	; (8003544 <HAL_SPI_MspInit+0x150>)
 8003472:	f001 fdd5 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003476:	2328      	movs	r3, #40	; 0x28
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347e:	2303      	movs	r3, #3
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	4619      	mov	r1, r3
 8003488:	482f      	ldr	r0, [pc, #188]	; (8003548 <HAL_SPI_MspInit+0x154>)
 800348a:	f001 fdc9 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800348e:	2310      	movs	r3, #16
 8003490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	4619      	mov	r1, r3
 80034a0:	4829      	ldr	r0, [pc, #164]	; (8003548 <HAL_SPI_MspInit+0x154>)
 80034a2:	f001 fdbd 	bl	8005020 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_SPI_MspInit+0x158>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034bc:	4a23      	ldr	r2, [pc, #140]	; (800354c <HAL_SPI_MspInit+0x158>)
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034c2:	e036      	b.n	8003532 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <HAL_SPI_MspInit+0x15c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d131      	bne.n	8003532 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d8:	61d3      	str	r3, [r2, #28]
 80034da:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 80034ec:	f043 0308 	orr.w	r3, r3, #8
 80034f0:	6193      	str	r3, [r2, #24]
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_SPI_MspInit+0x14c>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80034fe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	f107 031c 	add.w	r3, r7, #28
 8003510:	4619      	mov	r1, r3
 8003512:	480d      	ldr	r0, [pc, #52]	; (8003548 <HAL_SPI_MspInit+0x154>)
 8003514:	f001 fd84 	bl	8005020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4806      	ldr	r0, [pc, #24]	; (8003548 <HAL_SPI_MspInit+0x154>)
 800352e:	f001 fd77 	bl	8005020 <HAL_GPIO_Init>
}
 8003532:	bf00      	nop
 8003534:	3730      	adds	r7, #48	; 0x30
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40013000 	.word	0x40013000
 8003540:	40021000 	.word	0x40021000
 8003544:	40010800 	.word	0x40010800
 8003548:	40010c00 	.word	0x40010c00
 800354c:	40010000 	.word	0x40010000
 8003550:	40003800 	.word	0x40003800

08003554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d10c      	bne.n	8003580 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	61d3      	str	r3, [r2, #28]
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800357e:	e032      	b.n	80035e6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_TIM_Base_MspInit+0xa0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d114      	bne.n	80035b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	61d3      	str	r3, [r2, #28]
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2105      	movs	r1, #5
 80035a6:	201d      	movs	r0, #29
 80035a8:	f000 fe75 	bl	8004296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035ac:	201d      	movs	r0, #29
 80035ae:	f000 fe8e 	bl	80042ce <HAL_NVIC_EnableIRQ>
}
 80035b2:	e018      	b.n	80035e6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_TIM_Base_MspInit+0xa4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	61d3      	str	r3, [r2, #28]
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_TIM_Base_MspInit+0x9c>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2105      	movs	r1, #5
 80035da:	201e      	movs	r0, #30
 80035dc:	f000 fe5b 	bl	8004296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035e0:	201e      	movs	r0, #30
 80035e2:	f000 fe74 	bl	80042ce <HAL_NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800

080035fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <HAL_UART_MspInit+0x9c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d139      	bne.n	8003690 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <HAL_UART_MspInit+0xa0>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_UART_MspInit+0xa0>)
 8003622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003626:	6193      	str	r3, [r2, #24]
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_UART_MspInit+0xa0>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <HAL_UART_MspInit+0xa0>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <HAL_UART_MspInit+0xa0>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6193      	str	r3, [r2, #24]
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_UART_MspInit+0xa0>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800364c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f107 0310 	add.w	r3, r7, #16
 800365e:	4619      	mov	r1, r3
 8003660:	480f      	ldr	r0, [pc, #60]	; (80036a0 <HAL_UART_MspInit+0xa4>)
 8003662:	f001 fcdd 	bl	8005020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	4619      	mov	r1, r3
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <HAL_UART_MspInit+0xa4>)
 800367c:	f001 fcd0 	bl	8005020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003680:	2200      	movs	r2, #0
 8003682:	2105      	movs	r1, #5
 8003684:	2025      	movs	r0, #37	; 0x25
 8003686:	f000 fe06 	bl	8004296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800368a:	2025      	movs	r0, #37	; 0x25
 800368c:	f000 fe1f 	bl	80042ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010800 	.word	0x40010800

080036a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <NMI_Handler+0x4>

080036aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ae:	e7fe      	b.n	80036ae <HardFault_Handler+0x4>

080036b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <MemManage_Handler+0x4>

080036b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ba:	e7fe      	b.n	80036ba <BusFault_Handler+0x4>

080036bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <UsageFault_Handler+0x4>

080036c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d2:	f000 f99d 	bl	8003a10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80036d6:	f011 f803 	bl	80146e0 <xTaskGetSchedulerState>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80036e0:	f011 fbb2 	bl	8014e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036ec:	2001      	movs	r0, #1
 80036ee:	f001 fe73 	bl	80053d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80036fa:	2002      	movs	r0, #2
 80036fc:	f001 fe6c 	bl	80053d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}

08003704 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003708:	2004      	movs	r0, #4
 800370a:	f001 fe65 	bl	80053d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}

08003712 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003716:	2008      	movs	r0, #8
 8003718:	f001 fe5e 	bl	80053d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}

08003720 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <DMA1_Channel1_IRQHandler+0x10>)
 8003726:	f001 fa11 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000b20 	.word	0x20000b20

08003734 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800373a:	f003 f8eb 	bl	8006914 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20002170 	.word	0x20002170

08003748 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <TIM3_IRQHandler+0x10>)
 800374e:	f006 ffd7 	bl	800a700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000dd0 	.word	0x20000dd0

0800375c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <TIM4_IRQHandler+0x10>)
 8003762:	f006 ffcd 	bl	800a700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000e18 	.word	0x20000e18

08003770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <USART1_IRQHandler+0x10>)
 8003776:	f007 fc8f 	bl	800b098 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000e60 	.word	0x20000e60

08003784 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <DMA2_Channel3_IRQHandler+0x10>)
 800378a:	f001 f9df 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000b78 	.word	0x20000b78

08003798 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <DMA2_Channel4_5_IRQHandler+0x10>)
 800379e:	f001 f9d5 	bl	8004b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000bbc 	.word	0x20000bbc

080037ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	return 1;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <_kill>:

int _kill(int pid, int sig)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037c4:	f012 f966 	bl	8015a94 <__errno>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2216      	movs	r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
	return -1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_exit>:

void _exit (int status)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037e2:	f04f 31ff 	mov.w	r1, #4294967295
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffe7 	bl	80037ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80037ec:	e7fe      	b.n	80037ec <_exit+0x12>

080037ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e00a      	b.n	8003816 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003800:	f3af 8000 	nop.w
 8003804:	4601      	mov	r1, r0
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	60ba      	str	r2, [r7, #8]
 800380c:	b2ca      	uxtb	r2, r1
 800380e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3301      	adds	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	dbf0      	blt.n	8003800 <_read+0x12>
	}

return len;
 800381e:	687b      	ldr	r3, [r7, #4]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e009      	b.n	800384e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	60ba      	str	r2, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	dbf1      	blt.n	800383a <_write+0x12>
	}
	return len;
 8003856:	687b      	ldr	r3, [r7, #4]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_close>:

int _close(int file)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	return -1;
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003886:	605a      	str	r2, [r3, #4]
	return 0;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <_isatty>:

int _isatty(int file)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	return 1;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
	return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <_sbrk+0x5c>)
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <_sbrk+0x60>)
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <_sbrk+0x64>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <_sbrk+0x64>)
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <_sbrk+0x68>)
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <_sbrk+0x64>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d207      	bcs.n	8003900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f0:	f012 f8d0 	bl	8015a94 <__errno>
 80038f4:	4603      	mov	r3, r0
 80038f6:	220c      	movs	r2, #12
 80038f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	e009      	b.n	8003914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <_sbrk+0x64>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <_sbrk+0x64>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	4a05      	ldr	r2, [pc, #20]	; (8003924 <_sbrk+0x64>)
 8003910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20010000 	.word	0x20010000
 8003920:	00000400 	.word	0x00000400
 8003924:	20000ef8 	.word	0x20000ef8
 8003928:	20002490 	.word	0x20002490

0800392c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003938:	f7ff fff8 	bl	800392c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800393e:	490c      	ldr	r1, [pc, #48]	; (8003970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003940:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003944:	e002      	b.n	800394c <LoopCopyDataInit>

08003946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394a:	3304      	adds	r3, #4

0800394c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800394c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003950:	d3f9      	bcc.n	8003946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003954:	4c09      	ldr	r4, [pc, #36]	; (800397c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003958:	e001      	b.n	800395e <LoopFillZerobss>

0800395a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800395c:	3204      	adds	r2, #4

0800395e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003960:	d3fb      	bcc.n	800395a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003962:	f012 f993 	bl	8015c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003966:	f7fe fccb 	bl	8002300 <main>
  bx lr
 800396a:	4770      	bx	lr
  ldr r0, =_sdata
 800396c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003970:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8003974:	080322a4 	.word	0x080322a4
  ldr r2, =_sbss
 8003978:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 800397c:	2000248c 	.word	0x2000248c

08003980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC1_2_IRQHandler>
	...

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_Init+0x28>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_Init+0x28>)
 800398e:	f043 0310 	orr.w	r3, r3, #16
 8003992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 fc73 	bl	8004280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399a:	200f      	movs	r0, #15
 800399c:	f000 f808 	bl	80039b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a0:	f7ff fb6a 	bl	8003078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40022000 	.word	0x40022000

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_InitTick+0x54>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_InitTick+0x58>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fc8b 	bl	80042ea <HAL_SYSTICK_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00e      	b.n	80039fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d80a      	bhi.n	80039fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e4:	2200      	movs	r2, #0
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f000 fc53 	bl	8004296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_InitTick+0x5c>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000010 	.word	0x20000010
 8003a08:	20000018 	.word	0x20000018
 8003a0c:	20000014 	.word	0x20000014

08003a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_IncTick+0x1c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_IncTick+0x20>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_IncTick+0x20>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	20000018 	.word	0x20000018
 8003a30:	20000efc 	.word	0x20000efc

08003a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_GetTick+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000efc 	.word	0x20000efc

08003a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_GetTick>
 8003a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d005      	beq.n	8003a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_Delay+0x44>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a6e:	bf00      	nop
 8003a70:	f7ff ffe0 	bl	8003a34 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <HAL_Delay+0x28>
  {
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000018 	.word	0x20000018

08003a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0ce      	b.n	8003c50 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fafa 	bl	80030c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fa17 	bl	8003f08 <ADC_ConversionStop_Disable>
 8003ada:	4603      	mov	r3, r0
 8003adc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 80a9 	bne.w	8003c3e <HAL_ADC_Init+0x1ae>
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 80a5 	bne.w	8003c3e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003afc:	f023 0302 	bic.w	r3, r3, #2
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4951      	ldr	r1, [pc, #324]	; (8003c58 <HAL_ADC_Init+0x1c8>)
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d10a      	bne.n	8003b2c <HAL_ADC_Init+0x9c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b1e:	d002      	beq.n	8003b26 <HAL_ADC_Init+0x96>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	e004      	b.n	8003b30 <HAL_ADC_Init+0xa0>
 8003b26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b2a:	e001      	b.n	8003b30 <HAL_ADC_Init+0xa0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7b1b      	ldrb	r3, [r3, #12]
 8003b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_Init+0xc2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <HAL_ADC_Init+0xc8>
 8003b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b56:	e000      	b.n	8003b5a <HAL_ADC_Init+0xca>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7d1b      	ldrb	r3, [r3, #20]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d119      	bne.n	8003b9c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7b1b      	ldrb	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	035a      	lsls	r2, r3, #13
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e00b      	b.n	8003b9c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_ADC_Init+0x1cc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bcc:	d003      	beq.n	8003bd6 <HAL_ADC_Init+0x146>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d104      	bne.n	8003be0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_ADC_Init+0x1d0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d10b      	bne.n	8003c1c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c1a:	e018      	b.n	8003c4e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f023 0312 	bic.w	r3, r3, #18
 8003c24:	f043 0210 	orr.w	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c3c:	e007      	b.n	8003c4e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40013c00 	.word	0x40013c00
 8003c5c:	ffe1f7fd 	.word	0xffe1f7fd
 8003c60:	ff1f0efe 	.word	0xff1f0efe

08003c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x20>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0dc      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x1da>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d81c      	bhi.n	8003cce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3b05      	subs	r3, #5
 8003ca6:	221f      	movs	r2, #31
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	4019      	ands	r1, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3b05      	subs	r3, #5
 8003cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34
 8003ccc:	e03c      	b.n	8003d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d81c      	bhi.n	8003d10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3b23      	subs	r3, #35	; 0x23
 8003ce8:	221f      	movs	r2, #31
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	4019      	ands	r1, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	3b23      	subs	r3, #35	; 0x23
 8003d02:	fa00 f203 	lsl.w	r2, r0, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d0e:	e01b      	b.n	8003d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	3b41      	subs	r3, #65	; 0x41
 8003d22:	221f      	movs	r2, #31
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	4019      	ands	r1, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	3b41      	subs	r3, #65	; 0x41
 8003d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d91c      	bls.n	8003d8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	3b1e      	subs	r3, #30
 8003d62:	2207      	movs	r2, #7
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	4019      	ands	r1, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6898      	ldr	r0, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	3b1e      	subs	r3, #30
 8003d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e019      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6919      	ldr	r1, [r3, #16]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	2207      	movs	r2, #7
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	4019      	ands	r1, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6898      	ldr	r0, [r3, #8]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	fa00 f203 	lsl.w	r2, r0, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d003      	beq.n	8003dce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003dca:	2b11      	cmp	r3, #17
 8003dcc:	d132      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d125      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d126      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003df4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d11a      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <HAL_ADC_ConfigChannel+0x1ec>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9a      	lsrs	r2, r3, #18
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e14:	e002      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f9      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x1b2>
 8003e22:	e007      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40012400 	.word	0x40012400
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	431bde83 	.word	0x431bde83

08003e54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d040      	beq.n	8003ef4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e82:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <ADC_Enable+0xac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <ADC_Enable+0xb0>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e90:	e002      	b.n	8003e98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f9      	bne.n	8003e92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e9e:	f7ff fdc9 	bl	8003a34 <HAL_GetTick>
 8003ea2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ea4:	e01f      	b.n	8003ee6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ea6:	f7ff fdc5 	bl	8003a34 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d918      	bls.n	8003ee6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d011      	beq.n	8003ee6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e007      	b.n	8003ef6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d1d8      	bne.n	8003ea6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000010 	.word	0x20000010
 8003f04:	431bde83 	.word	0x431bde83

08003f08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d12e      	bne.n	8003f80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0201 	bic.w	r2, r2, #1
 8003f30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f32:	f7ff fd7f 	bl	8003a34 <HAL_GetTick>
 8003f36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f38:	e01b      	b.n	8003f72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f3a:	f7ff fd7b 	bl	8003a34 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d914      	bls.n	8003f72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d10d      	bne.n	8003f72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	f043 0210 	orr.w	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e007      	b.n	8003f82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d0dc      	beq.n	8003f3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_ADCEx_Calibration_Start+0x1e>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e097      	b.n	80040da <HAL_ADCEx_Calibration_Start+0x14e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa8 	bl	8003f08 <ADC_ConversionStop_Disable>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ff49 	bl	8003e54 <ADC_Enable>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 8081 	bne.w	80040d0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fd6:	f023 0302 	bic.w	r3, r3, #2
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003fe2:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <HAL_ADCEx_Calibration_Start+0x158>)
 8003fe4:	681c      	ldr	r4, [r3, #0]
 8003fe6:	2002      	movs	r0, #2
 8003fe8:	f004 fd8c 	bl	8008b04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fec:	4603      	mov	r3, r0
 8003fee:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003ff2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003ff4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003ff6:	e002      	b.n	8003ffe <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f9      	bne.n	8003ff8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0208 	orr.w	r2, r2, #8
 8004012:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004014:	f7ff fd0e 	bl	8003a34 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800401a:	e01b      	b.n	8004054 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800401c:	f7ff fd0a 	bl	8003a34 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b0a      	cmp	r3, #10
 8004028:	d914      	bls.n	8004054 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	f023 0312 	bic.w	r3, r3, #18
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e042      	b.n	80040da <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1dc      	bne.n	800401c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0204 	orr.w	r2, r2, #4
 8004070:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004072:	f7ff fcdf 	bl	8003a34 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004078:	e01b      	b.n	80040b2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800407a:	f7ff fcdb 	bl	8003a34 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b0a      	cmp	r3, #10
 8004086:	d914      	bls.n	80040b2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f023 0312 	bic.w	r3, r3, #18
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e013      	b.n	80040da <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1dc      	bne.n	800407a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f023 0303 	bic.w	r3, r3, #3
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000010 	.word	0x20000010

080040e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <__NVIC_SetPriorityGrouping+0x44>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <__NVIC_SetPriorityGrouping+0x44>)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	60d3      	str	r3, [r2, #12]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <__NVIC_GetPriorityGrouping+0x18>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 0307 	and.w	r3, r3, #7
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	db0b      	blt.n	8004176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	f003 021f 	and.w	r2, r3, #31
 8004164:	4906      	ldr	r1, [pc, #24]	; (8004180 <__NVIC_EnableIRQ+0x34>)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2001      	movs	r0, #1
 800416e:	fa00 f202 	lsl.w	r2, r0, r2
 8004172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	e000e100 	.word	0xe000e100

08004184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db0a      	blt.n	80041ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	490c      	ldr	r1, [pc, #48]	; (80041d0 <__NVIC_SetPriority+0x4c>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	0112      	lsls	r2, r2, #4
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	440b      	add	r3, r1
 80041a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041ac:	e00a      	b.n	80041c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4908      	ldr	r1, [pc, #32]	; (80041d4 <__NVIC_SetPriority+0x50>)
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	3b04      	subs	r3, #4
 80041bc:	0112      	lsls	r2, r2, #4
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	440b      	add	r3, r1
 80041c2:	761a      	strb	r2, [r3, #24]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e100 	.word	0xe000e100
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f1c3 0307 	rsb	r3, r3, #7
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	bf28      	it	cs
 80041f6:	2304      	movcs	r3, #4
 80041f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d902      	bls.n	8004208 <NVIC_EncodePriority+0x30>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3b03      	subs	r3, #3
 8004206:	e000      	b.n	800420a <NVIC_EncodePriority+0x32>
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800420c:	f04f 32ff 	mov.w	r2, #4294967295
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43da      	mvns	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	401a      	ands	r2, r3
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004220:	f04f 31ff 	mov.w	r1, #4294967295
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	43d9      	mvns	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004230:	4313      	orrs	r3, r2
         );
}
 8004232:	4618      	mov	r0, r3
 8004234:	3724      	adds	r7, #36	; 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800424c:	d301      	bcc.n	8004252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800424e:	2301      	movs	r3, #1
 8004250:	e00f      	b.n	8004272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <SysTick_Config+0x40>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3b01      	subs	r3, #1
 8004258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800425a:	210f      	movs	r1, #15
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	f7ff ff90 	bl	8004184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <SysTick_Config+0x40>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800426a:	4b04      	ldr	r3, [pc, #16]	; (800427c <SysTick_Config+0x40>)
 800426c:	2207      	movs	r2, #7
 800426e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	e000e010 	.word	0xe000e010

08004280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff2d 	bl	80040e8 <__NVIC_SetPriorityGrouping>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042a8:	f7ff ff42 	bl	8004130 <__NVIC_GetPriorityGrouping>
 80042ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	6978      	ldr	r0, [r7, #20]
 80042b4:	f7ff ff90 	bl	80041d8 <NVIC_EncodePriority>
 80042b8:	4602      	mov	r2, r0
 80042ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff5f 	bl	8004184 <__NVIC_SetPriority>
}
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4603      	mov	r3, r0
 80042d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff35 	bl	800414c <__NVIC_EnableIRQ>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ffa2 	bl	800423c <SysTick_Config>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e014      	b.n	800433e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	791b      	ldrb	r3, [r3, #4]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fe ff37 	bl	8003198 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e092      	b.n	8004486 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	795b      	ldrb	r3, [r3, #5]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_DAC_Start_DMA+0x24>
 8004368:	2302      	movs	r3, #2
 800436a:	e08c      	b.n	8004486 <HAL_DAC_Start_DMA+0x13e>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2202      	movs	r2, #2
 8004376:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d129      	bne.n	80043d2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	4a43      	ldr	r2, [pc, #268]	; (8004490 <HAL_DAC_Start_DMA+0x148>)
 8004384:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4a42      	ldr	r2, [pc, #264]	; (8004494 <HAL_DAC_Start_DMA+0x14c>)
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4a41      	ldr	r2, [pc, #260]	; (8004498 <HAL_DAC_Start_DMA+0x150>)
 8004394:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_DAC_Start_DMA+0x6c>
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d005      	beq.n	80043be <HAL_DAC_Start_DMA+0x76>
 80043b2:	e009      	b.n	80043c8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	613b      	str	r3, [r7, #16]
        break;
 80043bc:	e033      	b.n	8004426 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	613b      	str	r3, [r7, #16]
        break;
 80043c6:	e02e      	b.n	8004426 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3310      	adds	r3, #16
 80043ce:	613b      	str	r3, [r7, #16]
        break;
 80043d0:	e029      	b.n	8004426 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <HAL_DAC_Start_DMA+0x154>)
 80043d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <HAL_DAC_Start_DMA+0x158>)
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <HAL_DAC_Start_DMA+0x15c>)
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043f8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_DAC_Start_DMA+0xc0>
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d005      	beq.n	8004412 <HAL_DAC_Start_DMA+0xca>
 8004406:	e009      	b.n	800441c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	613b      	str	r3, [r7, #16]
        break;
 8004410:	e009      	b.n	8004426 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3318      	adds	r3, #24
 8004418:	613b      	str	r3, [r7, #16]
        break;
 800441a:	e004      	b.n	8004426 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	331c      	adds	r3, #28
 8004422:	613b      	str	r3, [r7, #16]
        break;
 8004424:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6898      	ldr	r0, [r3, #8]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	f000 f9e5 	bl	8004804 <HAL_DMA_Start_IT>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]
 800443e:	e008      	b.n	8004452 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	68d8      	ldr	r0, [r3, #12]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	f000 f9db 	bl	8004804 <HAL_DMA_Start_IT>
 800444e:	4603      	mov	r3, r0
 8004450:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2201      	movs	r2, #1
 800446c:	409a      	lsls	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e005      	b.n	8004484 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f043 0204 	orr.w	r2, r3, #4
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	08004609 	.word	0x08004609
 8004494:	0800462b 	.word	0x0800462b
 8004498:	08004647 	.word	0x08004647
 800449c:	080046ab 	.word	0x080046ab
 80044a0:	080046cd 	.word	0x080046cd
 80044a4:	080046e9 	.word	0x080046e9

080044a8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e02e      	b.n	800451a <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43da      	mvns	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	400a      	ands	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2201      	movs	r2, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43da      	mvns	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	400a      	ands	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f9df 	bl	80048c4 <HAL_DMA_Abort>
 8004506:	e004      	b.n	8004512 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f9d9 	bl	80048c4 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	; 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_DAC_ConfigChannel+0x1c>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e042      	b.n	80045fe <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	795b      	ldrb	r3, [r3, #5]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_DAC_ConfigChannel+0x2c>
 8004580:	2302      	movs	r3, #2
 8004582:	e03c      	b.n	80045fe <HAL_DAC_ConfigChannel+0xa6>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80045a6:	43db      	mvns	r3, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4013      	ands	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	22c0      	movs	r2, #192	; 0xc0
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	400a      	ands	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80045fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ff83 	bl	8004522 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	711a      	strb	r2, [r3, #4]
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff ff7b 	bl	8004534 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f043 0204 	orr.w	r2, r3, #4
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff ff70 	bl	8004546 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	711a      	strb	r2, [r3, #4]
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff ffdb 	bl	8004674 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	711a      	strb	r2, [r3, #4]
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ffd3 	bl	8004686 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff ffc8 	bl	8004698 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	711a      	strb	r2, [r3, #4]
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e059      	b.n	80047e2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_DMA_Init+0xd4>)
 8004736:	429a      	cmp	r2, r3
 8004738:	d80f      	bhi.n	800475a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <HAL_DMA_Init+0xd8>)
 8004742:	4413      	add	r3, r2
 8004744:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <HAL_DMA_Init+0xdc>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	009a      	lsls	r2, r3, #2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <HAL_DMA_Init+0xe0>)
 8004756:	63da      	str	r2, [r3, #60]	; 0x3c
 8004758:	e00e      	b.n	8004778 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	4b26      	ldr	r3, [pc, #152]	; (80047fc <HAL_DMA_Init+0xe4>)
 8004762:	4413      	add	r3, r2
 8004764:	4a23      	ldr	r2, [pc, #140]	; (80047f4 <HAL_DMA_Init+0xdc>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	009a      	lsls	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <HAL_DMA_Init+0xe8>)
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800478e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800479c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr
 80047ec:	40020407 	.word	0x40020407
 80047f0:	bffdfff8 	.word	0xbffdfff8
 80047f4:	cccccccd 	.word	0xcccccccd
 80047f8:	40020000 	.word	0x40020000
 80047fc:	bffdfbf8 	.word	0xbffdfbf8
 8004800:	40020400 	.word	0x40020400

08004804 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_DMA_Start_IT+0x20>
 8004820:	2302      	movs	r3, #2
 8004822:	e04b      	b.n	80048bc <HAL_DMA_Start_IT+0xb8>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d13a      	bne.n	80048ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fbb1 	bl	8004fc4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 020e 	orr.w	r2, r2, #14
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e00f      	b.n	800489c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 020a 	orr.w	r2, r2, #10
 800489a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e005      	b.n	80048ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d008      	beq.n	80048ee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2204      	movs	r2, #4
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e020      	b.n	8004930 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 020e 	bic.w	r2, r2, #14
 80048fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0201 	bic.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	2101      	movs	r1, #1
 8004918:	fa01 f202 	lsl.w	r2, r1, r2
 800491c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
	...

0800493c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d005      	beq.n	8004960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2204      	movs	r2, #4
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
 800495e:	e0d6      	b.n	8004b0e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 020e 	bic.w	r2, r2, #14
 800496e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	4b64      	ldr	r3, [pc, #400]	; (8004b18 <HAL_DMA_Abort_IT+0x1dc>)
 8004988:	429a      	cmp	r2, r3
 800498a:	d958      	bls.n	8004a3e <HAL_DMA_Abort_IT+0x102>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a62      	ldr	r2, [pc, #392]	; (8004b1c <HAL_DMA_Abort_IT+0x1e0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04f      	beq.n	8004a36 <HAL_DMA_Abort_IT+0xfa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a61      	ldr	r2, [pc, #388]	; (8004b20 <HAL_DMA_Abort_IT+0x1e4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d048      	beq.n	8004a32 <HAL_DMA_Abort_IT+0xf6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5f      	ldr	r2, [pc, #380]	; (8004b24 <HAL_DMA_Abort_IT+0x1e8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d040      	beq.n	8004a2c <HAL_DMA_Abort_IT+0xf0>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a5e      	ldr	r2, [pc, #376]	; (8004b28 <HAL_DMA_Abort_IT+0x1ec>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d038      	beq.n	8004a26 <HAL_DMA_Abort_IT+0xea>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <HAL_DMA_Abort_IT+0x1f0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d030      	beq.n	8004a20 <HAL_DMA_Abort_IT+0xe4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5b      	ldr	r2, [pc, #364]	; (8004b30 <HAL_DMA_Abort_IT+0x1f4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d028      	beq.n	8004a1a <HAL_DMA_Abort_IT+0xde>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_DMA_Abort_IT+0x1dc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d020      	beq.n	8004a14 <HAL_DMA_Abort_IT+0xd8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a57      	ldr	r2, [pc, #348]	; (8004b34 <HAL_DMA_Abort_IT+0x1f8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d019      	beq.n	8004a10 <HAL_DMA_Abort_IT+0xd4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a55      	ldr	r2, [pc, #340]	; (8004b38 <HAL_DMA_Abort_IT+0x1fc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d012      	beq.n	8004a0c <HAL_DMA_Abort_IT+0xd0>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a54      	ldr	r2, [pc, #336]	; (8004b3c <HAL_DMA_Abort_IT+0x200>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00a      	beq.n	8004a06 <HAL_DMA_Abort_IT+0xca>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a52      	ldr	r2, [pc, #328]	; (8004b40 <HAL_DMA_Abort_IT+0x204>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d102      	bne.n	8004a00 <HAL_DMA_Abort_IT+0xc4>
 80049fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049fe:	e01b      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a04:	e018      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a0a:	e015      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	e013      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e011      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a18:	e00e      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a1e:	e00b      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a24:	e008      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a2a:	e005      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a30:	e002      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a32:	2310      	movs	r3, #16
 8004a34:	e000      	b.n	8004a38 <HAL_DMA_Abort_IT+0xfc>
 8004a36:	2301      	movs	r3, #1
 8004a38:	4a42      	ldr	r2, [pc, #264]	; (8004b44 <HAL_DMA_Abort_IT+0x208>)
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e057      	b.n	8004aee <HAL_DMA_Abort_IT+0x1b2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a36      	ldr	r2, [pc, #216]	; (8004b1c <HAL_DMA_Abort_IT+0x1e0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04f      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x1ac>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a34      	ldr	r2, [pc, #208]	; (8004b20 <HAL_DMA_Abort_IT+0x1e4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d048      	beq.n	8004ae4 <HAL_DMA_Abort_IT+0x1a8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a33      	ldr	r2, [pc, #204]	; (8004b24 <HAL_DMA_Abort_IT+0x1e8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_Abort_IT+0x1a2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a31      	ldr	r2, [pc, #196]	; (8004b28 <HAL_DMA_Abort_IT+0x1ec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d038      	beq.n	8004ad8 <HAL_DMA_Abort_IT+0x19c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a30      	ldr	r2, [pc, #192]	; (8004b2c <HAL_DMA_Abort_IT+0x1f0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d030      	beq.n	8004ad2 <HAL_DMA_Abort_IT+0x196>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2e      	ldr	r2, [pc, #184]	; (8004b30 <HAL_DMA_Abort_IT+0x1f4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d028      	beq.n	8004acc <HAL_DMA_Abort_IT+0x190>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <HAL_DMA_Abort_IT+0x1dc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d020      	beq.n	8004ac6 <HAL_DMA_Abort_IT+0x18a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <HAL_DMA_Abort_IT+0x1f8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d019      	beq.n	8004ac2 <HAL_DMA_Abort_IT+0x186>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <HAL_DMA_Abort_IT+0x1fc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d012      	beq.n	8004abe <HAL_DMA_Abort_IT+0x182>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <HAL_DMA_Abort_IT+0x200>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_DMA_Abort_IT+0x17c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <HAL_DMA_Abort_IT+0x204>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d102      	bne.n	8004ab2 <HAL_DMA_Abort_IT+0x176>
 8004aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab0:	e01b      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ab6:	e018      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004abc:	e015      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	e013      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e011      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aca:	e00e      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004acc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ad0:	e00b      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ad6:	e008      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004adc:	e005      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae2:	e002      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	e000      	b.n	8004aea <HAL_DMA_Abort_IT+0x1ae>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <HAL_DMA_Abort_IT+0x20c>)
 8004aec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
    } 
  }
  return status;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40020080 	.word	0x40020080
 8004b1c:	40020008 	.word	0x40020008
 8004b20:	4002001c 	.word	0x4002001c
 8004b24:	40020030 	.word	0x40020030
 8004b28:	40020044 	.word	0x40020044
 8004b2c:	40020058 	.word	0x40020058
 8004b30:	4002006c 	.word	0x4002006c
 8004b34:	40020408 	.word	0x40020408
 8004b38:	4002041c 	.word	0x4002041c
 8004b3c:	40020430 	.word	0x40020430
 8004b40:	40020444 	.word	0x40020444
 8004b44:	40020400 	.word	0x40020400
 8004b48:	40020000 	.word	0x40020000

08004b4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2204      	movs	r2, #4
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80f1 	beq.w	8004d58 <HAL_DMA_IRQHandler+0x20c>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80eb 	beq.w	8004d58 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_DMA_IRQHandler+0x1d8>)
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d958      	bls.n	8004c5e <HAL_DMA_IRQHandler+0x112>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5d      	ldr	r2, [pc, #372]	; (8004d28 <HAL_DMA_IRQHandler+0x1dc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d04f      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x10a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5c      	ldr	r2, [pc, #368]	; (8004d2c <HAL_DMA_IRQHandler+0x1e0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d048      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x106>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a5a      	ldr	r2, [pc, #360]	; (8004d30 <HAL_DMA_IRQHandler+0x1e4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d040      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x100>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a59      	ldr	r2, [pc, #356]	; (8004d34 <HAL_DMA_IRQHandler+0x1e8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d038      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xfa>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <HAL_DMA_IRQHandler+0x1ec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d030      	beq.n	8004c40 <HAL_DMA_IRQHandler+0xf4>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a56      	ldr	r2, [pc, #344]	; (8004d3c <HAL_DMA_IRQHandler+0x1f0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d028      	beq.n	8004c3a <HAL_DMA_IRQHandler+0xee>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a4d      	ldr	r2, [pc, #308]	; (8004d24 <HAL_DMA_IRQHandler+0x1d8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d020      	beq.n	8004c34 <HAL_DMA_IRQHandler+0xe8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_DMA_IRQHandler+0x1f4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d019      	beq.n	8004c30 <HAL_DMA_IRQHandler+0xe4>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a50      	ldr	r2, [pc, #320]	; (8004d44 <HAL_DMA_IRQHandler+0x1f8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d012      	beq.n	8004c2c <HAL_DMA_IRQHandler+0xe0>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a4f      	ldr	r2, [pc, #316]	; (8004d48 <HAL_DMA_IRQHandler+0x1fc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00a      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xda>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <HAL_DMA_IRQHandler+0x200>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d102      	bne.n	8004c20 <HAL_DMA_IRQHandler+0xd4>
 8004c1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c1e:	e01b      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c24:	e018      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2a:	e015      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	e013      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c30:	2304      	movs	r3, #4
 8004c32:	e011      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c38:	e00e      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c3e:	e00b      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c44:	e008      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c4a:	e005      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c50:	e002      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c52:	2340      	movs	r3, #64	; 0x40
 8004c54:	e000      	b.n	8004c58 <HAL_DMA_IRQHandler+0x10c>
 8004c56:	2304      	movs	r3, #4
 8004c58:	4a3d      	ldr	r2, [pc, #244]	; (8004d50 <HAL_DMA_IRQHandler+0x204>)
 8004c5a:	6053      	str	r3, [r2, #4]
 8004c5c:	e057      	b.n	8004d0e <HAL_DMA_IRQHandler+0x1c2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a31      	ldr	r2, [pc, #196]	; (8004d28 <HAL_DMA_IRQHandler+0x1dc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d04f      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x1bc>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <HAL_DMA_IRQHandler+0x1e0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d048      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x1b8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <HAL_DMA_IRQHandler+0x1e4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x1b2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <HAL_DMA_IRQHandler+0x1e8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d038      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x1ac>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <HAL_DMA_IRQHandler+0x1ec>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d030      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x1a6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <HAL_DMA_IRQHandler+0x1f0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d028      	beq.n	8004cec <HAL_DMA_IRQHandler+0x1a0>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <HAL_DMA_IRQHandler+0x1d8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d020      	beq.n	8004ce6 <HAL_DMA_IRQHandler+0x19a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <HAL_DMA_IRQHandler+0x1f4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d019      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x196>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_DMA_IRQHandler+0x1f8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d012      	beq.n	8004cde <HAL_DMA_IRQHandler+0x192>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <HAL_DMA_IRQHandler+0x1fc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x18c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_DMA_IRQHandler+0x200>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d102      	bne.n	8004cd2 <HAL_DMA_IRQHandler+0x186>
 8004ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cd0:	e01b      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cd6:	e018      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cdc:	e015      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	e013      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	e011      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004ce6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004cea:	e00e      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004cf0:	e00b      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cf6:	e008      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cfc:	e005      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d02:	e002      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	e000      	b.n	8004d0a <HAL_DMA_IRQHandler+0x1be>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <HAL_DMA_IRQHandler+0x208>)
 8004d0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8136 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d20:	e130      	b.n	8004f84 <HAL_DMA_IRQHandler+0x438>
 8004d22:	bf00      	nop
 8004d24:	40020080 	.word	0x40020080
 8004d28:	40020008 	.word	0x40020008
 8004d2c:	4002001c 	.word	0x4002001c
 8004d30:	40020030 	.word	0x40020030
 8004d34:	40020044 	.word	0x40020044
 8004d38:	40020058 	.word	0x40020058
 8004d3c:	4002006c 	.word	0x4002006c
 8004d40:	40020408 	.word	0x40020408
 8004d44:	4002041c 	.word	0x4002041c
 8004d48:	40020430 	.word	0x40020430
 8004d4c:	40020444 	.word	0x40020444
 8004d50:	40020400 	.word	0x40020400
 8004d54:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 80dd 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x3d8>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80d7 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 020a 	bic.w	r2, r2, #10
 8004d92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b7b      	ldr	r3, [pc, #492]	; (8004f90 <HAL_DMA_IRQHandler+0x444>)
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d958      	bls.n	8004e5a <HAL_DMA_IRQHandler+0x30e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a79      	ldr	r2, [pc, #484]	; (8004f94 <HAL_DMA_IRQHandler+0x448>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d04f      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x306>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a78      	ldr	r2, [pc, #480]	; (8004f98 <HAL_DMA_IRQHandler+0x44c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d048      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x302>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a76      	ldr	r2, [pc, #472]	; (8004f9c <HAL_DMA_IRQHandler+0x450>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d040      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x2fc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a75      	ldr	r2, [pc, #468]	; (8004fa0 <HAL_DMA_IRQHandler+0x454>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d038      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2f6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a73      	ldr	r2, [pc, #460]	; (8004fa4 <HAL_DMA_IRQHandler+0x458>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d030      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2f0>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a72      	ldr	r2, [pc, #456]	; (8004fa8 <HAL_DMA_IRQHandler+0x45c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d028      	beq.n	8004e36 <HAL_DMA_IRQHandler+0x2ea>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a69      	ldr	r2, [pc, #420]	; (8004f90 <HAL_DMA_IRQHandler+0x444>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d020      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x2e4>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a6e      	ldr	r2, [pc, #440]	; (8004fac <HAL_DMA_IRQHandler+0x460>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d019      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x2e0>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a6c      	ldr	r2, [pc, #432]	; (8004fb0 <HAL_DMA_IRQHandler+0x464>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d012      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2dc>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6b      	ldr	r2, [pc, #428]	; (8004fb4 <HAL_DMA_IRQHandler+0x468>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00a      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x2d6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a69      	ldr	r2, [pc, #420]	; (8004fb8 <HAL_DMA_IRQHandler+0x46c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d102      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x2d0>
 8004e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e1a:	e01b      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e20:	e018      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e26:	e015      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e28:	2320      	movs	r3, #32
 8004e2a:	e013      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e011      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e34:	e00e      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e3a:	e00b      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e40:	e008      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e46:	e005      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4c:	e002      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e4e:	2320      	movs	r3, #32
 8004e50:	e000      	b.n	8004e54 <HAL_DMA_IRQHandler+0x308>
 8004e52:	2302      	movs	r3, #2
 8004e54:	4a59      	ldr	r2, [pc, #356]	; (8004fbc <HAL_DMA_IRQHandler+0x470>)
 8004e56:	6053      	str	r3, [r2, #4]
 8004e58:	e057      	b.n	8004f0a <HAL_DMA_IRQHandler+0x3be>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4d      	ldr	r2, [pc, #308]	; (8004f94 <HAL_DMA_IRQHandler+0x448>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d04f      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x3b8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a4b      	ldr	r2, [pc, #300]	; (8004f98 <HAL_DMA_IRQHandler+0x44c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d048      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x3b4>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4a      	ldr	r2, [pc, #296]	; (8004f9c <HAL_DMA_IRQHandler+0x450>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d040      	beq.n	8004efa <HAL_DMA_IRQHandler+0x3ae>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a48      	ldr	r2, [pc, #288]	; (8004fa0 <HAL_DMA_IRQHandler+0x454>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d038      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x3a8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <HAL_DMA_IRQHandler+0x458>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d030      	beq.n	8004eee <HAL_DMA_IRQHandler+0x3a2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a45      	ldr	r2, [pc, #276]	; (8004fa8 <HAL_DMA_IRQHandler+0x45c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d028      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x39c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <HAL_DMA_IRQHandler+0x444>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d020      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x396>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a41      	ldr	r2, [pc, #260]	; (8004fac <HAL_DMA_IRQHandler+0x460>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d019      	beq.n	8004ede <HAL_DMA_IRQHandler+0x392>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a40      	ldr	r2, [pc, #256]	; (8004fb0 <HAL_DMA_IRQHandler+0x464>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d012      	beq.n	8004eda <HAL_DMA_IRQHandler+0x38e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <HAL_DMA_IRQHandler+0x468>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_DMA_IRQHandler+0x388>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a3d      	ldr	r2, [pc, #244]	; (8004fb8 <HAL_DMA_IRQHandler+0x46c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d102      	bne.n	8004ece <HAL_DMA_IRQHandler+0x382>
 8004ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ecc:	e01b      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed2:	e018      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed8:	e015      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004eda:	2320      	movs	r3, #32
 8004edc:	e013      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e011      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ee6:	e00e      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004eec:	e00b      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	e008      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ef8:	e005      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efe:	e002      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004f00:	2320      	movs	r3, #32
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_IRQHandler+0x3ba>
 8004f04:	2302      	movs	r3, #2
 8004f06:	4a2e      	ldr	r2, [pc, #184]	; (8004fc0 <HAL_DMA_IRQHandler+0x474>)
 8004f08:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d034      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f22:	e02f      	b.n	8004f84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2208      	movs	r2, #8
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d028      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x43a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d023      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 020e 	bic.w	r2, r2, #14
 8004f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	2101      	movs	r1, #1
 8004f58:	fa01 f202 	lsl.w	r2, r1, r2
 8004f5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
    }
  }
  return;
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
}
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40020080 	.word	0x40020080
 8004f94:	40020008 	.word	0x40020008
 8004f98:	4002001c 	.word	0x4002001c
 8004f9c:	40020030 	.word	0x40020030
 8004fa0:	40020044 	.word	0x40020044
 8004fa4:	40020058 	.word	0x40020058
 8004fa8:	4002006c 	.word	0x4002006c
 8004fac:	40020408 	.word	0x40020408
 8004fb0:	4002041c 	.word	0x4002041c
 8004fb4:	40020430 	.word	0x40020430
 8004fb8:	40020444 	.word	0x40020444
 8004fbc:	40020400 	.word	0x40020400
 8004fc0:	40020000 	.word	0x40020000

08004fc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d108      	bne.n	8005004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005002:	e007      	b.n	8005014 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
	...

08005020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005020:	b480      	push	{r7}
 8005022:	b08b      	sub	sp, #44	; 0x2c
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005032:	e179      	b.n	8005328 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005034:	2201      	movs	r2, #1
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	429a      	cmp	r2, r3
 800504e:	f040 8168 	bne.w	8005322 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4a96      	ldr	r2, [pc, #600]	; (80052b0 <HAL_GPIO_Init+0x290>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d05e      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 800505c:	4a94      	ldr	r2, [pc, #592]	; (80052b0 <HAL_GPIO_Init+0x290>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d875      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 8005062:	4a94      	ldr	r2, [pc, #592]	; (80052b4 <HAL_GPIO_Init+0x294>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d058      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 8005068:	4a92      	ldr	r2, [pc, #584]	; (80052b4 <HAL_GPIO_Init+0x294>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d86f      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 800506e:	4a92      	ldr	r2, [pc, #584]	; (80052b8 <HAL_GPIO_Init+0x298>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d052      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 8005074:	4a90      	ldr	r2, [pc, #576]	; (80052b8 <HAL_GPIO_Init+0x298>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d869      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 800507a:	4a90      	ldr	r2, [pc, #576]	; (80052bc <HAL_GPIO_Init+0x29c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d04c      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 8005080:	4a8e      	ldr	r2, [pc, #568]	; (80052bc <HAL_GPIO_Init+0x29c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d863      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 8005086:	4a8e      	ldr	r2, [pc, #568]	; (80052c0 <HAL_GPIO_Init+0x2a0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d046      	beq.n	800511a <HAL_GPIO_Init+0xfa>
 800508c:	4a8c      	ldr	r2, [pc, #560]	; (80052c0 <HAL_GPIO_Init+0x2a0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d85d      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 8005092:	2b12      	cmp	r3, #18
 8005094:	d82a      	bhi.n	80050ec <HAL_GPIO_Init+0xcc>
 8005096:	2b12      	cmp	r3, #18
 8005098:	d859      	bhi.n	800514e <HAL_GPIO_Init+0x12e>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <HAL_GPIO_Init+0x80>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	0800511b 	.word	0x0800511b
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	08005107 	.word	0x08005107
 80050ac:	08005149 	.word	0x08005149
 80050b0:	0800514f 	.word	0x0800514f
 80050b4:	0800514f 	.word	0x0800514f
 80050b8:	0800514f 	.word	0x0800514f
 80050bc:	0800514f 	.word	0x0800514f
 80050c0:	0800514f 	.word	0x0800514f
 80050c4:	0800514f 	.word	0x0800514f
 80050c8:	0800514f 	.word	0x0800514f
 80050cc:	0800514f 	.word	0x0800514f
 80050d0:	0800514f 	.word	0x0800514f
 80050d4:	0800514f 	.word	0x0800514f
 80050d8:	0800514f 	.word	0x0800514f
 80050dc:	0800514f 	.word	0x0800514f
 80050e0:	0800514f 	.word	0x0800514f
 80050e4:	080050fd 	.word	0x080050fd
 80050e8:	08005111 	.word	0x08005111
 80050ec:	4a75      	ldr	r2, [pc, #468]	; (80052c4 <HAL_GPIO_Init+0x2a4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80050f2:	e02c      	b.n	800514e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	623b      	str	r3, [r7, #32]
          break;
 80050fa:	e029      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	3304      	adds	r3, #4
 8005102:	623b      	str	r3, [r7, #32]
          break;
 8005104:	e024      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	3308      	adds	r3, #8
 800510c:	623b      	str	r3, [r7, #32]
          break;
 800510e:	e01f      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	330c      	adds	r3, #12
 8005116:	623b      	str	r3, [r7, #32]
          break;
 8005118:	e01a      	b.n	8005150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005122:	2304      	movs	r3, #4
 8005124:	623b      	str	r3, [r7, #32]
          break;
 8005126:	e013      	b.n	8005150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005130:	2308      	movs	r3, #8
 8005132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	611a      	str	r2, [r3, #16]
          break;
 800513a:	e009      	b.n	8005150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800513c:	2308      	movs	r3, #8
 800513e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	615a      	str	r2, [r3, #20]
          break;
 8005146:	e003      	b.n	8005150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005148:	2300      	movs	r3, #0
 800514a:	623b      	str	r3, [r7, #32]
          break;
 800514c:	e000      	b.n	8005150 <HAL_GPIO_Init+0x130>
          break;
 800514e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2bff      	cmp	r3, #255	; 0xff
 8005154:	d801      	bhi.n	800515a <HAL_GPIO_Init+0x13a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	e001      	b.n	800515e <HAL_GPIO_Init+0x13e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2bff      	cmp	r3, #255	; 0xff
 8005164:	d802      	bhi.n	800516c <HAL_GPIO_Init+0x14c>
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	e002      	b.n	8005172 <HAL_GPIO_Init+0x152>
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	3b08      	subs	r3, #8
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	210f      	movs	r1, #15
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	401a      	ands	r2, r3
 8005184:	6a39      	ldr	r1, [r7, #32]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80c1 	beq.w	8005322 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80051a0:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <HAL_GPIO_Init+0x2a8>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	4a48      	ldr	r2, [pc, #288]	; (80052c8 <HAL_GPIO_Init+0x2a8>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6193      	str	r3, [r2, #24]
 80051ac:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <HAL_GPIO_Init+0x2a8>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80051b8:	4a44      	ldr	r2, [pc, #272]	; (80052cc <HAL_GPIO_Init+0x2ac>)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	3302      	adds	r3, #2
 80051c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	220f      	movs	r2, #15
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3c      	ldr	r2, [pc, #240]	; (80052d0 <HAL_GPIO_Init+0x2b0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01f      	beq.n	8005224 <HAL_GPIO_Init+0x204>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <HAL_GPIO_Init+0x2b4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d019      	beq.n	8005220 <HAL_GPIO_Init+0x200>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <HAL_GPIO_Init+0x2b8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_GPIO_Init+0x1fc>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a39      	ldr	r2, [pc, #228]	; (80052dc <HAL_GPIO_Init+0x2bc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00d      	beq.n	8005218 <HAL_GPIO_Init+0x1f8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_GPIO_Init+0x2c0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <HAL_GPIO_Init+0x1f4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <HAL_GPIO_Init+0x2c4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_GPIO_Init+0x1f0>
 800520c:	2305      	movs	r3, #5
 800520e:	e00a      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005210:	2306      	movs	r3, #6
 8005212:	e008      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005214:	2304      	movs	r3, #4
 8005216:	e006      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005218:	2303      	movs	r3, #3
 800521a:	e004      	b.n	8005226 <HAL_GPIO_Init+0x206>
 800521c:	2302      	movs	r3, #2
 800521e:	e002      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <HAL_GPIO_Init+0x206>
 8005224:	2300      	movs	r3, #0
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	f002 0203 	and.w	r2, r2, #3
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	4093      	lsls	r3, r2
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005236:	4925      	ldr	r1, [pc, #148]	; (80052cc <HAL_GPIO_Init+0x2ac>)
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	3302      	adds	r3, #2
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d006      	beq.n	800525e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4924      	ldr	r1, [pc, #144]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]
 800525c:	e006      	b.n	800526c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	43db      	mvns	r3, r3
 8005266:	4920      	ldr	r1, [pc, #128]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005268:	4013      	ands	r3, r2
 800526a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	491a      	ldr	r1, [pc, #104]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	4313      	orrs	r3, r2
 8005282:	60cb      	str	r3, [r1, #12]
 8005284:	e006      	b.n	8005294 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	43db      	mvns	r3, r3
 800528e:	4916      	ldr	r1, [pc, #88]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 8005290:	4013      	ands	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d025      	beq.n	80052ec <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80052a0:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	4910      	ldr	r1, [pc, #64]	; (80052e8 <HAL_GPIO_Init+0x2c8>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
 80052ac:	e025      	b.n	80052fa <HAL_GPIO_Init+0x2da>
 80052ae:	bf00      	nop
 80052b0:	10320000 	.word	0x10320000
 80052b4:	10310000 	.word	0x10310000
 80052b8:	10220000 	.word	0x10220000
 80052bc:	10210000 	.word	0x10210000
 80052c0:	10120000 	.word	0x10120000
 80052c4:	10110000 	.word	0x10110000
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010800 	.word	0x40010800
 80052d4:	40010c00 	.word	0x40010c00
 80052d8:	40011000 	.word	0x40011000
 80052dc:	40011400 	.word	0x40011400
 80052e0:	40011800 	.word	0x40011800
 80052e4:	40011c00 	.word	0x40011c00
 80052e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80052ec:	4b15      	ldr	r3, [pc, #84]	; (8005344 <HAL_GPIO_Init+0x324>)
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	4913      	ldr	r1, [pc, #76]	; (8005344 <HAL_GPIO_Init+0x324>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <HAL_GPIO_Init+0x324>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	490e      	ldr	r1, [pc, #56]	; (8005344 <HAL_GPIO_Init+0x324>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]
 8005312:	e006      	b.n	8005322 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_GPIO_Init+0x324>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	43db      	mvns	r3, r3
 800531c:	4909      	ldr	r1, [pc, #36]	; (8005344 <HAL_GPIO_Init+0x324>)
 800531e:	4013      	ands	r3, r2
 8005320:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	f47f ae7e 	bne.w	8005034 <HAL_GPIO_Init+0x14>
  }
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	372c      	adds	r7, #44	; 0x2c
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	40010400 	.word	0x40010400

08005348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e001      	b.n	800536a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	807b      	strh	r3, [r7, #2]
 8005382:	4613      	mov	r3, r2
 8005384:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005386:	787b      	ldrb	r3, [r7, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538c:	887a      	ldrh	r2, [r7, #2]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005392:	e003      	b.n	800539c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	041a      	lsls	r2, r3, #16
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	611a      	str	r2, [r3, #16]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053b8:	887a      	ldrh	r2, [r7, #2]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4013      	ands	r3, r2
 80053be:	041a      	lsls	r2, r3, #16
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	43d9      	mvns	r1, r3
 80053c4:	887b      	ldrh	r3, [r7, #2]
 80053c6:	400b      	ands	r3, r1
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053e2:	4b08      	ldr	r3, [pc, #32]	; (8005404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc ff04 	bl	8002204 <HAL_GPIO_EXTI_Callback>
  }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40010400 	.word	0x40010400

08005408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e12b      	b.n	8005672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd ff48 	bl	80032c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800545a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800546a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800546c:	f003 fa4e 	bl	800890c <HAL_RCC_GetPCLK1Freq>
 8005470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a81      	ldr	r2, [pc, #516]	; (800567c <HAL_I2C_Init+0x274>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d807      	bhi.n	800548c <HAL_I2C_Init+0x84>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a80      	ldr	r2, [pc, #512]	; (8005680 <HAL_I2C_Init+0x278>)
 8005480:	4293      	cmp	r3, r2
 8005482:	bf94      	ite	ls
 8005484:	2301      	movls	r3, #1
 8005486:	2300      	movhi	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e006      	b.n	800549a <HAL_I2C_Init+0x92>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a7d      	ldr	r2, [pc, #500]	; (8005684 <HAL_I2C_Init+0x27c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	bf94      	ite	ls
 8005494:	2301      	movls	r3, #1
 8005496:	2300      	movhi	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0e7      	b.n	8005672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a78      	ldr	r2, [pc, #480]	; (8005688 <HAL_I2C_Init+0x280>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0c9b      	lsrs	r3, r3, #18
 80054ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4a6a      	ldr	r2, [pc, #424]	; (800567c <HAL_I2C_Init+0x274>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d802      	bhi.n	80054dc <HAL_I2C_Init+0xd4>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	3301      	adds	r3, #1
 80054da:	e009      	b.n	80054f0 <HAL_I2C_Init+0xe8>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	4a69      	ldr	r2, [pc, #420]	; (800568c <HAL_I2C_Init+0x284>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	099b      	lsrs	r3, r3, #6
 80054ee:	3301      	adds	r3, #1
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	495c      	ldr	r1, [pc, #368]	; (800567c <HAL_I2C_Init+0x274>)
 800550c:	428b      	cmp	r3, r1
 800550e:	d819      	bhi.n	8005544 <HAL_I2C_Init+0x13c>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1e59      	subs	r1, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	fbb1 f3f3 	udiv	r3, r1, r3
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005524:	400b      	ands	r3, r1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_I2C_Init+0x138>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1e59      	subs	r1, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fbb1 f3f3 	udiv	r3, r1, r3
 8005538:	3301      	adds	r3, #1
 800553a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553e:	e051      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 8005540:	2304      	movs	r3, #4
 8005542:	e04f      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d111      	bne.n	8005570 <HAL_I2C_Init+0x168>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1e58      	subs	r0, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6859      	ldr	r1, [r3, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	440b      	add	r3, r1
 800555a:	fbb0 f3f3 	udiv	r3, r0, r3
 800555e:	3301      	adds	r3, #1
 8005560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e012      	b.n	8005596 <HAL_I2C_Init+0x18e>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e58      	subs	r0, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	0099      	lsls	r1, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	fbb0 f3f3 	udiv	r3, r0, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_I2C_Init+0x196>
 800559a:	2301      	movs	r3, #1
 800559c:	e022      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10e      	bne.n	80055c4 <HAL_I2C_Init+0x1bc>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1e58      	subs	r0, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	440b      	add	r3, r1
 80055b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b8:	3301      	adds	r3, #1
 80055ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	e00f      	b.n	80055e4 <HAL_I2C_Init+0x1dc>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1e58      	subs	r0, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6859      	ldr	r1, [r3, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	0099      	lsls	r1, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055da:	3301      	adds	r3, #1
 80055dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	6809      	ldr	r1, [r1, #0]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6911      	ldr	r1, [r2, #16]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	4311      	orrs	r1, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	430b      	orrs	r3, r1
 8005626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	000186a0 	.word	0x000186a0
 8005680:	001e847f 	.word	0x001e847f
 8005684:	003d08ff 	.word	0x003d08ff
 8005688:	431bde83 	.word	0x431bde83
 800568c:	10624dd3 	.word	0x10624dd3

08005690 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	461a      	mov	r2, r3
 800569c:	460b      	mov	r3, r1
 800569e:	817b      	strh	r3, [r7, #10]
 80056a0:	4613      	mov	r3, r2
 80056a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056a4:	f7fe f9c6 	bl	8003a34 <HAL_GetTick>
 80056a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	f040 80e0 	bne.w	8005878 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2319      	movs	r3, #25
 80056be:	2201      	movs	r2, #1
 80056c0:	4970      	ldr	r1, [pc, #448]	; (8005884 <HAL_I2C_Master_Transmit+0x1f4>)
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fdcc 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
 80056d0:	e0d3      	b.n	800587a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_I2C_Master_Transmit+0x50>
 80056dc:	2302      	movs	r3, #2
 80056de:	e0cc      	b.n	800587a <HAL_I2C_Master_Transmit+0x1ea>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d007      	beq.n	8005706 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005714:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2221      	movs	r2, #33	; 0x21
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2210      	movs	r2, #16
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	893a      	ldrh	r2, [r7, #8]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a50      	ldr	r2, [pc, #320]	; (8005888 <HAL_I2C_Master_Transmit+0x1f8>)
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005748:	8979      	ldrh	r1, [r7, #10]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6a3a      	ldr	r2, [r7, #32]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fc36 	bl	8005fc0 <I2C_MasterRequestWrite>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e08d      	b.n	800587a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005774:	e066      	b.n	8005844 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	6a39      	ldr	r1, [r7, #32]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fe8a 	bl	8006494 <I2C_WaitOnTXEFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b04      	cmp	r3, #4
 800578c:	d107      	bne.n	800579e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e06b      	b.n	800587a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	781a      	ldrb	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d11b      	bne.n	8005818 <HAL_I2C_Master_Transmit+0x188>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d017      	beq.n	8005818 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	6a39      	ldr	r1, [r7, #32]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fe81 	bl	8006524 <I2C_WaitOnBTFFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	2b04      	cmp	r3, #4
 800582e:	d107      	bne.n	8005840 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e01a      	b.n	800587a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d194      	bne.n	8005776 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800585a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	00100002 	.word	0x00100002
 8005888:	ffff0000 	.word	0xffff0000

0800588c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	; 0x30
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	461a      	mov	r2, r3
 8005898:	460b      	mov	r3, r1
 800589a:	817b      	strh	r3, [r7, #10]
 800589c:	4613      	mov	r3, r2
 800589e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058a4:	f7fe f8c6 	bl	8003a34 <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	f040 824b 	bne.w	8005d4e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2319      	movs	r3, #25
 80058be:	2201      	movs	r2, #1
 80058c0:	497f      	ldr	r1, [pc, #508]	; (8005ac0 <HAL_I2C_Master_Receive+0x234>)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fccc 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
 80058d0:	e23e      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_I2C_Master_Receive+0x54>
 80058dc:	2302      	movs	r3, #2
 80058de:	e237      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d007      	beq.n	8005906 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0201 	orr.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2222      	movs	r2, #34	; 0x22
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2210      	movs	r2, #16
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	893a      	ldrh	r2, [r7, #8]
 8005936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a5f      	ldr	r2, [pc, #380]	; (8005ac4 <HAL_I2C_Master_Receive+0x238>)
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005948:	8979      	ldrh	r1, [r7, #10]
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fbb8 	bl	80060c4 <I2C_MasterRequestRead>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e1f8      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d113      	bne.n	800598e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e1cc      	b.n	8005d28 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	2b01      	cmp	r3, #1
 8005994:	d11e      	bne.n	80059d4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059a6:	b672      	cpsid	i
}
 80059a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059d0:	b662      	cpsie	i
}
 80059d2:	e035      	b.n	8005a40 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d11e      	bne.n	8005a1a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059ec:	b672      	cpsid	i
}
 80059ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a16:	b662      	cpsie	i
}
 8005a18:	e012      	b.n	8005a40 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005a40:	e172      	b.n	8005d28 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	f200 811f 	bhi.w	8005c8a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d123      	bne.n	8005a9c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fdab 	bl	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e173      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a9a:	e145      	b.n	8005d28 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d152      	bne.n	8005b4a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	2200      	movs	r2, #0
 8005aac:	4906      	ldr	r1, [pc, #24]	; (8005ac8 <HAL_I2C_Master_Receive+0x23c>)
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fbd6 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e148      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
 8005abe:	bf00      	nop
 8005ac0:	00100002 	.word	0x00100002
 8005ac4:	ffff0000 	.word	0xffff0000
 8005ac8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005acc:	b672      	cpsid	i
}
 8005ace:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005b12:	b662      	cpsie	i
}
 8005b14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b48:	e0ee      	b.n	8005d28 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	2200      	movs	r2, #0
 8005b52:	4981      	ldr	r1, [pc, #516]	; (8005d58 <HAL_I2C_Master_Receive+0x4cc>)
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fb83 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0f5      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b74:	b672      	cpsid	i
}
 8005b76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005baa:	4b6c      	ldr	r3, [pc, #432]	; (8005d5c <HAL_I2C_Master_Receive+0x4d0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	4a6b      	ldr	r2, [pc, #428]	; (8005d60 <HAL_I2C_Master_Receive+0x4d4>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0a1a      	lsrs	r2, r3, #8
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	00da      	lsls	r2, r3, #3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d118      	bne.n	8005c02 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005bf2:	b662      	cpsie	i
}
 8005bf4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0a6      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d1d9      	bne.n	8005bc4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005c52:	b662      	cpsie	i
}
 8005c54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c88:	e04e      	b.n	8005d28 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fc90 	bl	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e058      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d124      	bne.n	8005d28 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d107      	bne.n	8005cf6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f47f ae88 	bne.w	8005a42 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e000      	b.n	8005d50 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
  }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3728      	adds	r7, #40	; 0x28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	00010004 	.word	0x00010004
 8005d5c:	20000010 	.word	0x20000010
 8005d60:	14f8b589 	.word	0x14f8b589

08005d64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	460b      	mov	r3, r1
 8005d72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d74:	f7fd fe5e 	bl	8003a34 <HAL_GetTick>
 8005d78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	f040 8111 	bne.w	8005fae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2319      	movs	r3, #25
 8005d92:	2201      	movs	r2, #1
 8005d94:	4988      	ldr	r1, [pc, #544]	; (8005fb8 <HAL_I2C_IsDeviceReady+0x254>)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fa62 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
 8005da4:	e104      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_I2C_IsDeviceReady+0x50>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e0fd      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d007      	beq.n	8005dda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2224      	movs	r2, #36	; 0x24
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a70      	ldr	r2, [pc, #448]	; (8005fbc <HAL_I2C_IsDeviceReady+0x258>)
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fa20 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e34:	d103      	bne.n	8005e3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0b6      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e42:	897b      	ldrh	r3, [r7, #10]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e52:	f7fd fdef 	bl	8003a34 <HAL_GetTick>
 8005e56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e86:	e025      	b.n	8005ed4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e88:	f7fd fdd4 	bl	8003a34 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <HAL_I2C_IsDeviceReady+0x13a>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	22a0      	movs	r2, #160	; 0xa0
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	bf0c      	ite	eq
 8005ecc:	2301      	moveq	r3, #1
 8005ece:	2300      	movne	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2ba0      	cmp	r3, #160	; 0xa0
 8005ede:	d005      	beq.n	8005eec <HAL_I2C_IsDeviceReady+0x188>
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <HAL_I2C_IsDeviceReady+0x188>
 8005ee6:	7dbb      	ldrb	r3, [r7, #22]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0cd      	beq.n	8005e88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d129      	bne.n	8005f56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2319      	movs	r3, #25
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4921      	ldr	r1, [pc, #132]	; (8005fb8 <HAL_I2C_IsDeviceReady+0x254>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f994 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e036      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e02c      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2319      	movs	r3, #25
 8005f76:	2201      	movs	r2, #1
 8005f78:	490f      	ldr	r1, [pc, #60]	; (8005fb8 <HAL_I2C_IsDeviceReady+0x254>)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f970 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e012      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	f4ff af32 	bcc.w	8005dfe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	00100002 	.word	0x00100002
 8005fbc:	ffff0000 	.word	0xffff0000

08005fc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d006      	beq.n	8005fea <I2C_MasterRequestWrite+0x2a>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d003      	beq.n	8005fea <I2C_MasterRequestWrite+0x2a>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fe8:	d108      	bne.n	8005ffc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	e00b      	b.n	8006014 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	2b12      	cmp	r3, #18
 8006002:	d107      	bne.n	8006014 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006012:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f91d 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603a:	d103      	bne.n	8006044 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006042:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e035      	b.n	80060b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006050:	d108      	bne.n	8006064 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006052:	897b      	ldrh	r3, [r7, #10]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006060:	611a      	str	r2, [r3, #16]
 8006062:	e01b      	b.n	800609c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006064:	897b      	ldrh	r3, [r7, #10]
 8006066:	11db      	asrs	r3, r3, #7
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 0306 	and.w	r3, r3, #6
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f063 030f 	orn	r3, r3, #15
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	490e      	ldr	r1, [pc, #56]	; (80060bc <I2C_MasterRequestWrite+0xfc>)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f966 	bl	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e010      	b.n	80060b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006092:	897b      	ldrh	r3, [r7, #10]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	4907      	ldr	r1, [pc, #28]	; (80060c0 <I2C_MasterRequestWrite+0x100>)
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f956 	bl	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	00010008 	.word	0x00010008
 80060c0:	00010002 	.word	0x00010002

080060c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	460b      	mov	r3, r1
 80060d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d006      	beq.n	80060fe <I2C_MasterRequestRead+0x3a>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d003      	beq.n	80060fe <I2C_MasterRequestRead+0x3a>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060fc:	d108      	bne.n	8006110 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e00b      	b.n	8006128 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	2b11      	cmp	r3, #17
 8006116:	d107      	bne.n	8006128 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f893 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d103      	bne.n	8006158 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e079      	b.n	8006250 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006164:	d108      	bne.n	8006178 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006166:	897b      	ldrh	r3, [r7, #10]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	611a      	str	r2, [r3, #16]
 8006176:	e05f      	b.n	8006238 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006178:	897b      	ldrh	r3, [r7, #10]
 800617a:	11db      	asrs	r3, r3, #7
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0306 	and.w	r3, r3, #6
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f063 030f 	orn	r3, r3, #15
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4930      	ldr	r1, [pc, #192]	; (8006258 <I2C_MasterRequestRead+0x194>)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f8dc 	bl	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e054      	b.n	8006250 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061a6:	897b      	ldrh	r3, [r7, #10]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4929      	ldr	r1, [pc, #164]	; (800625c <I2C_MasterRequestRead+0x198>)
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f8cc 	bl	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e044      	b.n	8006250 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f831 	bl	8006260 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00d      	beq.n	8006220 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	d103      	bne.n	800621c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e017      	b.n	8006250 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006220:	897b      	ldrh	r3, [r7, #10]
 8006222:	11db      	asrs	r3, r3, #7
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 0306 	and.w	r3, r3, #6
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f063 030e 	orn	r3, r3, #14
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	4907      	ldr	r1, [pc, #28]	; (800625c <I2C_MasterRequestRead+0x198>)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f888 	bl	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	00010008 	.word	0x00010008
 800625c:	00010002 	.word	0x00010002

08006260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006270:	e048      	b.n	8006304 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d044      	beq.n	8006304 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627a:	f7fd fbdb 	bl	8003a34 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d302      	bcc.n	8006290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d139      	bne.n	8006304 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10d      	bne.n	80062b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	43da      	mvns	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4013      	ands	r3, r2
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	e00c      	b.n	80062d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	43da      	mvns	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4013      	ands	r3, r2
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d116      	bne.n	8006304 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e023      	b.n	800634c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	0c1b      	lsrs	r3, r3, #16
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	d10d      	bne.n	800632a <I2C_WaitOnFlagUntilTimeout+0xca>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	43da      	mvns	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	bf0c      	ite	eq
 8006320:	2301      	moveq	r3, #1
 8006322:	2300      	movne	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	e00c      	b.n	8006344 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	43da      	mvns	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4013      	ands	r3, r2
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	429a      	cmp	r2, r3
 8006348:	d093      	beq.n	8006272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006362:	e071      	b.n	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006372:	d123      	bne.n	80063bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006382:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800638c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f043 0204 	orr.w	r2, r3, #4
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e067      	b.n	800648c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d041      	beq.n	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fd fb36 	bl	8003a34 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d136      	bne.n	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d10c      	bne.n	80063fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf14      	ite	ne
 80063f6:	2301      	movne	r3, #1
 80063f8:	2300      	moveq	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	e00b      	b.n	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	43da      	mvns	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f043 0220 	orr.w	r2, r3, #32
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e021      	b.n	800648c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10c      	bne.n	800646c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	43da      	mvns	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e00b      	b.n	8006484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	43da      	mvns	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	bf14      	ite	ne
 800647e:	2301      	movne	r3, #1
 8006480:	2300      	moveq	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	f47f af6d 	bne.w	8006364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064a0:	e034      	b.n	800650c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f8e3 	bl	800666e <I2C_IsAcknowledgeFailed>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e034      	b.n	800651c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d028      	beq.n	800650c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ba:	f7fd fabb 	bl	8003a34 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d302      	bcc.n	80064d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d11d      	bne.n	800650c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d016      	beq.n	800650c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e007      	b.n	800651c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d1c3      	bne.n	80064a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006530:	e034      	b.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f89b 	bl	800666e <I2C_IsAcknowledgeFailed>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e034      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d028      	beq.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654a:	f7fd fa73 	bl	8003a34 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11d      	bne.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b04      	cmp	r3, #4
 800656c:	d016      	beq.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e007      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d1c3      	bne.n	8006532 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c0:	e049      	b.n	8006656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d119      	bne.n	8006604 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0210 	mvn.w	r2, #16
 80065d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e030      	b.n	8006666 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006604:	f7fd fa16 	bl	8003a34 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d302      	bcc.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d11d      	bne.n	8006656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006624:	2b40      	cmp	r3, #64	; 0x40
 8006626:	d016      	beq.n	8006656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e007      	b.n	8006666 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d1ae      	bne.n	80065c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d11b      	bne.n	80066be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800668e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f043 0204 	orr.w	r2, r3, #4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066cc:	b08b      	sub	sp, #44	; 0x2c
 80066ce:	af06      	add	r7, sp, #24
 80066d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0f1      	b.n	80068c0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f00e ff41 	bl	8015578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2203      	movs	r2, #3
 80066fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f005 ff66 	bl	800c5d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	687e      	ldr	r6, [r7, #4]
 8006710:	466d      	mov	r5, sp
 8006712:	f106 0410 	add.w	r4, r6, #16
 8006716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	602b      	str	r3, [r5, #0]
 800671e:	1d33      	adds	r3, r6, #4
 8006720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006722:	6838      	ldr	r0, [r7, #0]
 8006724:	f005 ff30 	bl	800c588 <USB_CoreInit>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0c2      	b.n	80068c0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f005 ff61 	bl	800c608 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
 800674a:	e040      	b.n	80067ce <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	440b      	add	r3, r1
 800675c:	3301      	adds	r3, #1
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	440b      	add	r3, r1
 8006772:	7bfa      	ldrb	r2, [r7, #15]
 8006774:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	440b      	add	r3, r1
 8006786:	3303      	adds	r3, #3
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800678c:	7bfa      	ldrb	r2, [r7, #15]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	440b      	add	r3, r1
 800679a:	3338      	adds	r3, #56	; 0x38
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067a0:	7bfa      	ldrb	r2, [r7, #15]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	440b      	add	r3, r1
 80067ae:	333c      	adds	r3, #60	; 0x3c
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067b4:	7bfa      	ldrb	r2, [r7, #15]
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	440b      	add	r3, r1
 80067c2:	3340      	adds	r3, #64	; 0x40
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	3301      	adds	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	7bfa      	ldrb	r2, [r7, #15]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3b9      	bcc.n	800674c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	e044      	b.n	8006868 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067de:	7bfa      	ldrb	r2, [r7, #15]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	440b      	add	r3, r1
 80067ec:	f203 1369 	addw	r3, r3, #361	; 0x169
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067f4:	7bfa      	ldrb	r2, [r7, #15]
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	440b      	add	r3, r1
 8006802:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006806:	7bfa      	ldrb	r2, [r7, #15]
 8006808:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800680a:	7bfa      	ldrb	r2, [r7, #15]
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	440b      	add	r3, r1
 8006818:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006820:	7bfa      	ldrb	r2, [r7, #15]
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	440b      	add	r3, r1
 800682e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006836:	7bfa      	ldrb	r2, [r7, #15]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	440b      	add	r3, r1
 8006844:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800684c:	7bfa      	ldrb	r2, [r7, #15]
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	440b      	add	r3, r1
 800685a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	3301      	adds	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	7bfa      	ldrb	r2, [r7, #15]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d3b5      	bcc.n	80067de <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	687e      	ldr	r6, [r7, #4]
 800687a:	466d      	mov	r5, sp
 800687c:	f106 0410 	add.w	r4, r6, #16
 8006880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	1d33      	adds	r3, r6, #4
 800688a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800688c:	6838      	ldr	r0, [r7, #0]
 800688e:	f005 fec7 	bl	800c620 <USB_DevInit>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e00d      	b.n	80068c0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f008 f948 	bl	800eb4e <USB_DevDisconnect>

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_PCD_Start+0x16>
 80068da:	2302      	movs	r3, #2
 80068dc:	e016      	b.n	800690c <HAL_PCD_Start+0x44>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f005 fe5c 	bl	800c5a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80068f0:	2101      	movs	r1, #1
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f00f f897 	bl	8015a26 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f008 f91c 	bl	800eb3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f008 f91e 	bl	800eb62 <USB_ReadInterrupts>
 8006926:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fb04 	bl	8006f40 <PCD_EP_ISR_Handler>

    return;
 8006938:	e119      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006956:	b292      	uxth	r2, r2
 8006958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f00e fe86 	bl	801566e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006962:	2100      	movs	r1, #0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f905 	bl	8006b74 <HAL_PCD_SetAddress>

    return;
 800696a:	e100      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800697e:	b29a      	uxth	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006988:	b292      	uxth	r2, r2
 800698a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800698e:	e0ee      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00c      	beq.n	80069b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ac:	b292      	uxth	r2, r2
 80069ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80069b2:	e0dc      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d027      	beq.n	8006a0e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0204 	bic.w	r2, r2, #4
 80069d0:	b292      	uxth	r2, r2
 80069d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0208 	bic.w	r2, r2, #8
 80069e8:	b292      	uxth	r2, r2
 80069ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f00e fe76 	bl	80156e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a06:	b292      	uxth	r2, r2
 8006a08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006a0c:	e0af      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8083 	beq.w	8006b20 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e010      	b.n	8006a42 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	7ffb      	ldrb	r3, [r7, #31]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	7ffb      	ldrb	r3, [r7, #31]
 8006a2e:	8812      	ldrh	r2, [r2, #0]
 8006a30:	b292      	uxth	r2, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	3320      	adds	r3, #32
 8006a36:	443b      	add	r3, r7
 8006a38:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8006a3c:	7ffb      	ldrb	r3, [r7, #31]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	7ffb      	ldrb	r3, [r7, #31]
 8006a44:	2b07      	cmp	r3, #7
 8006a46:	d9eb      	bls.n	8006a20 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0201 	orr.w	r2, r2, #1
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	b292      	uxth	r2, r2
 8006a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006a78:	bf00      	nop
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f6      	beq.n	8006a7a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e00f      	b.n	8006aca <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006aaa:	7ffb      	ldrb	r3, [r7, #31]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6812      	ldr	r2, [r2, #0]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	7ffa      	ldrb	r2, [r7, #31]
 8006ab4:	0092      	lsls	r2, r2, #2
 8006ab6:	440a      	add	r2, r1
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	3320      	adds	r3, #32
 8006abc:	443b      	add	r3, r7
 8006abe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006ac2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8006ac4:	7ffb      	ldrb	r3, [r7, #31]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b07      	cmp	r3, #7
 8006ace:	d9ec      	bls.n	8006aaa <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0208 	orr.w	r2, r2, #8
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006afa:	b292      	uxth	r2, r2
 8006afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0204 	orr.w	r2, r2, #4
 8006b12:	b292      	uxth	r2, r2
 8006b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f00e fdc7 	bl	80156ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006b1e:	e026      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00f      	beq.n	8006b4a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f00e fd85 	bl	8015652 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006b48:	e011      	b.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b66:	b292      	uxth	r2, r2
 8006b68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006b6c:	bf00      	nop
  }
}
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d101      	bne.n	8006b8e <HAL_PCD_SetAddress+0x1a>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e013      	b.n	8006bb6 <HAL_PCD_SetAddress+0x42>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f007 ffb4 	bl	800eb14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	4608      	mov	r0, r1
 8006bc8:	4611      	mov	r1, r2
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4603      	mov	r3, r0
 8006bce:	70fb      	strb	r3, [r7, #3]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	803b      	strh	r3, [r7, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da0e      	bge.n	8006c02 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	4613      	mov	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	705a      	strb	r2, [r3, #1]
 8006c00:	e00e      	b.n	8006c20 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	f003 0207 	and.w	r2, r3, #7
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4413      	add	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c2c:	883a      	ldrh	r2, [r7, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	78ba      	ldrb	r2, [r7, #2]
 8006c36:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c38:	78bb      	ldrb	r3, [r7, #2]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d102      	bne.n	8006c44 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_PCD_EP_Open+0x94>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e00e      	b.n	8006c70 <HAL_PCD_EP_Open+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f005 fcfd 	bl	800c660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da0e      	bge.n	8006caa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	705a      	strb	r2, [r3, #1]
 8006ca8:	e00e      	b.n	8006cc8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	f003 0207 	and.w	r2, r3, #7
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_PCD_EP_Close+0x6a>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e00e      	b.n	8006d00 <HAL_PCD_EP_Close+0x88>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68f9      	ldr	r1, [r7, #12]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f006 f875 	bl	800cde0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	460b      	mov	r3, r1
 8006d16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	f003 0207 	and.w	r2, r3, #7
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d48:	7afb      	ldrb	r3, [r7, #11]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6979      	ldr	r1, [r7, #20]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f006 fa2c 	bl	800d1b8 <USB_EPStartXfer>

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	460b      	mov	r3, r1
 8006d78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2200      	movs	r2, #0
 8006dae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2201      	movs	r2, #1
 8006db4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006db6:	7afb      	ldrb	r3, [r7, #11]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6979      	ldr	r1, [r7, #20]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f006 f9f5 	bl	800d1b8 <USB_EPStartXfer>

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	f003 0207 	and.w	r2, r3, #7
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d901      	bls.n	8006df6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e04c      	b.n	8006e90 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da0e      	bge.n	8006e1c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	705a      	strb	r2, [r3, #1]
 8006e1a:	e00c      	b.n	8006e36 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_PCD_EP_SetStall+0x7e>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e01c      	b.n	8006e90 <HAL_PCD_EP_SetStall+0xb8>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f007 fd58 	bl	800e91a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d108      	bne.n	8006e86 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f007 fe7d 	bl	800eb80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	f003 020f 	and.w	r2, r3, #15
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d901      	bls.n	8006eb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e040      	b.n	8006f38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da0e      	bge.n	8006edc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	705a      	strb	r2, [r3, #1]
 8006eda:	e00e      	b.n	8006efa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	f003 0207 	and.w	r2, r3, #7
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_PCD_EP_ClrStall+0x82>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e00e      	b.n	8006f38 <HAL_PCD_EP_ClrStall+0xa0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f007 fd46 	bl	800e9ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b096      	sub	sp, #88	; 0x58
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f48:	e3bf      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006f56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006f64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8179 	bne.w	8007260 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006f6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d152      	bne.n	8007020 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8a:	81fb      	strh	r3, [r7, #14]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3328      	adds	r3, #40	; 0x28
 8006fa2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3302      	adds	r3, #2
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	441a      	add	r2, r3
 8006fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fdc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006fde:	2100      	movs	r1, #0
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f00e fb1c 	bl	801561e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 836b 	beq.w	80076ca <PCD_EP_ISR_Handler+0x78a>
 8006ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 8366 	bne.w	80076ca <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800700a:	b2da      	uxtb	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	b292      	uxth	r2, r2
 8007012:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800701e:	e354      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007026:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007032:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800703a:	2b00      	cmp	r3, #0
 800703c:	d034      	beq.n	80070a8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	3306      	adds	r3, #6
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007068:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007076:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800707c:	b29b      	uxth	r3, r3
 800707e:	f007 fdcf 	bl	800ec20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29a      	uxth	r2, r3
 800708a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800708e:	4013      	ands	r3, r2
 8007090:	823b      	strh	r3, [r7, #16]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	8a3a      	ldrh	r2, [r7, #16]
 8007098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800709c:	b292      	uxth	r2, r2
 800709e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f00e fa8f 	bl	80155c4 <HAL_PCD_SetupStageCallback>
 80070a6:	e310      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80070a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f280 830c 	bge.w	80076ca <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80070be:	4013      	ands	r3, r2
 80070c0:	83fb      	strh	r3, [r7, #30]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	8bfa      	ldrh	r2, [r7, #30]
 80070c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070cc:	b292      	uxth	r2, r2
 80070ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4413      	add	r3, r2
 80070e4:	3306      	adds	r3, #6
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80070f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80070fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d019      	beq.n	8007138 <PCD_EP_ISR_Handler+0x1f8>
 8007104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d015      	beq.n	8007138 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007112:	6959      	ldr	r1, [r3, #20]
 8007114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007116:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800711a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800711c:	b29b      	uxth	r3, r3
 800711e:	f007 fd7f 	bl	800ec20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	441a      	add	r2, r3
 800712c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007130:	2100      	movs	r1, #0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f00e fa58 	bl	80155e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714a:	2b00      	cmp	r3, #0
 800714c:	f040 82bd 	bne.w	80076ca <PCD_EP_ISR_Handler+0x78a>
 8007150:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007154:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800715c:	f000 82b5 	beq.w	80076ca <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	4413      	add	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800718a:	b29a      	uxth	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b3e      	cmp	r3, #62	; 0x3e
 8007196:	d91d      	bls.n	80071d4 <PCD_EP_ISR_Handler+0x294>
 8007198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	647b      	str	r3, [r7, #68]	; 0x44
 80071a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <PCD_EP_ISR_Handler+0x272>
 80071ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ae:	3b01      	subs	r3, #1
 80071b0:	647b      	str	r3, [r7, #68]	; 0x44
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e026      	b.n	8007222 <PCD_EP_ISR_Handler+0x2e2>
 80071d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <PCD_EP_ISR_Handler+0x2b2>
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	e017      	b.n	8007222 <PCD_EP_ISR_Handler+0x2e2>
 80071f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
 80071fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <PCD_EP_ISR_Handler+0x2cc>
 8007206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007208:	3301      	adds	r3, #1
 800720a:	647b      	str	r3, [r7, #68]	; 0x44
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29a      	uxth	r2, r3
 8007212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007214:	b29b      	uxth	r3, r3
 8007216:	029b      	lsls	r3, r3, #10
 8007218:	b29b      	uxth	r3, r3
 800721a:	4313      	orrs	r3, r2
 800721c:	b29a      	uxth	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800722e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007232:	827b      	strh	r3, [r7, #18]
 8007234:	8a7b      	ldrh	r3, [r7, #18]
 8007236:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800723a:	827b      	strh	r3, [r7, #18]
 800723c:	8a7b      	ldrh	r3, [r7, #18]
 800723e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007242:	827b      	strh	r3, [r7, #18]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	8a7b      	ldrh	r3, [r7, #18]
 800724a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]
 800725e:	e234      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007274:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007278:	2b00      	cmp	r3, #0
 800727a:	f280 80fc 	bge.w	8007476 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007294:	4013      	ands	r3, r2
 8007296:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80072ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072b0:	b292      	uxth	r2, r2
 80072b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80072b4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4413      	add	r3, r2
 80072c8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80072ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072cc:	7b1b      	ldrb	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d125      	bne.n	800731e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072da:	b29b      	uxth	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	3306      	adds	r3, #6
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80072fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8092 	beq.w	800742c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730e:	6959      	ldr	r1, [r3, #20]
 8007310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007312:	88da      	ldrh	r2, [r3, #6]
 8007314:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007318:	f007 fc82 	bl	800ec20 <USB_ReadPMA>
 800731c:	e086      	b.n	800742c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800731e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007320:	78db      	ldrb	r3, [r3, #3]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d10a      	bne.n	800733c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007326:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800732a:	461a      	mov	r2, r3
 800732c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9d9 	bl	80076e6 <HAL_PCD_EP_DB_Receive>
 8007334:	4603      	mov	r3, r0
 8007336:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800733a:	e077      	b.n	800742c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	441a      	add	r2, r3
 8007368:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800736c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007378:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800737c:	b29b      	uxth	r3, r3
 800737e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d024      	beq.n	80073e4 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	3302      	adds	r3, #2
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80073c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02e      	beq.n	800742c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d4:	6959      	ldr	r1, [r3, #20]
 80073d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d8:	891a      	ldrh	r2, [r3, #8]
 80073da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80073de:	f007 fc1f 	bl	800ec20 <USB_ReadPMA>
 80073e2:	e023      	b.n	800742c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4413      	add	r3, r2
 80073f8:	3306      	adds	r3, #6
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800740c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007410:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007414:	2b00      	cmp	r3, #0
 8007416:	d009      	beq.n	800742c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800741e:	6959      	ldr	r1, [r3, #20]
 8007420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007422:	895a      	ldrh	r2, [r3, #10]
 8007424:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007428:	f007 fbfa 	bl	800ec20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800742c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007434:	441a      	add	r2, r3
 8007436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007438:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800743a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007442:	441a      	add	r2, r3
 8007444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007446:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <PCD_EP_ISR_Handler+0x51c>
 8007450:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	429a      	cmp	r2, r3
 800745a:	d206      	bcs.n	800746a <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800745c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f00e f8c0 	bl	80155e8 <HAL_PCD_DataOutStageCallback>
 8007468:	e005      	b.n	8007476 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007470:	4618      	mov	r0, r3
 8007472:	f005 fea1 	bl	800d1b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007476:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800747a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8123 	beq.w	80076ca <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8007484:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80074c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80074d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	f040 80a2 	bne.w	8007622 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80074de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e0:	2200      	movs	r2, #0
 80074e2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80074e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074e6:	7b1b      	ldrb	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8093 	beq.w	8007614 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80074ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d046      	beq.n	8007588 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d126      	bne.n	8007550 <PCD_EP_ISR_Handler+0x610>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007510:	b29b      	uxth	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	4413      	add	r3, r2
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
 800751a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	011a      	lsls	r2, r3, #4
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	4413      	add	r3, r2
 8007524:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007528:	623b      	str	r3, [r7, #32]
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007534:	b29a      	uxth	r2, r3
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007548:	b29a      	uxth	r2, r3
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	e061      	b.n	8007614 <PCD_EP_ISR_Handler+0x6d4>
 8007550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d15d      	bne.n	8007614 <PCD_EP_ISR_Handler+0x6d4>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	4413      	add	r3, r2
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	011a      	lsls	r2, r3, #4
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	4413      	add	r3, r2
 800757a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2200      	movs	r2, #0
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	e045      	b.n	8007614 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800758e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d126      	bne.n	80075e4 <PCD_EP_ISR_Handler+0x6a4>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075aa:	4413      	add	r3, r2
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
 80075ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	011a      	lsls	r2, r3, #4
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	4413      	add	r3, r2
 80075b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e017      	b.n	8007614 <PCD_EP_ISR_Handler+0x6d4>
 80075e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d113      	bne.n	8007614 <PCD_EP_ISR_Handler+0x6d4>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	4413      	add	r3, r2
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	011a      	lsls	r2, r3, #4
 8007604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007606:	4413      	add	r3, r2
 8007608:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	2200      	movs	r2, #0
 8007612:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f00d ffff 	bl	801561e <HAL_PCD_DataInStageCallback>
 8007620:	e053      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007622:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d146      	bne.n	80076bc <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	3302      	adds	r3, #2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007656:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800765a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007662:	429a      	cmp	r2, r3
 8007664:	d907      	bls.n	8007676 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8007666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007672:	619a      	str	r2, [r3, #24]
 8007674:	e002      	b.n	800767c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8007676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007678:	2200      	movs	r2, #0
 800767a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800767c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f00d ffc7 	bl	801561e <HAL_PCD_DataInStageCallback>
 8007690:	e01b      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800769a:	441a      	add	r2, r3
 800769c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800769e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80076a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076a8:	441a      	add	r2, r3
 80076aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076b4:	4618      	mov	r0, r3
 80076b6:	f005 fd7f 	bl	800d1b8 <USB_EPStartXfer>
 80076ba:	e006      	b.n	80076ca <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80076bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076c0:	461a      	mov	r2, r3
 80076c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f91b 	bl	8007900 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f6ff ac37 	blt.w	8006f4a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3758      	adds	r7, #88	; 0x58
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b088      	sub	sp, #32
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d07e      	beq.n	80077fc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007706:	b29b      	uxth	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4413      	add	r3, r2
 8007712:	3302      	adds	r3, #2
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007726:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	8b7b      	ldrh	r3, [r7, #26]
 800772e:	429a      	cmp	r2, r3
 8007730:	d306      	bcc.n	8007740 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	8b7b      	ldrh	r3, [r7, #26]
 8007738:	1ad2      	subs	r2, r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	619a      	str	r2, [r3, #24]
 800773e:	e002      	b.n	8007746 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d123      	bne.n	8007796 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	833b      	strh	r3, [r7, #24]
 800776a:	8b3b      	ldrh	r3, [r7, #24]
 800776c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007770:	833b      	strh	r3, [r7, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	8b3b      	ldrh	r3, [r7, #24]
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01f      	beq.n	80077e0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ba:	82fb      	strh	r3, [r7, #22]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	441a      	add	r2, r3
 80077ca:	8afb      	ldrh	r3, [r7, #22]
 80077cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077dc:	b29b      	uxth	r3, r3
 80077de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80077e0:	8b7b      	ldrh	r3, [r7, #26]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8087 	beq.w	80078f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6959      	ldr	r1, [r3, #20]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	891a      	ldrh	r2, [r3, #8]
 80077f4:	8b7b      	ldrh	r3, [r7, #26]
 80077f6:	f007 fa13 	bl	800ec20 <USB_ReadPMA>
 80077fa:	e07c      	b.n	80078f6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007804:	b29b      	uxth	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4413      	add	r3, r2
 8007810:	3306      	adds	r3, #6
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007824:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	8b7b      	ldrh	r3, [r7, #26]
 800782c:	429a      	cmp	r2, r3
 800782e:	d306      	bcc.n	800783e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	699a      	ldr	r2, [r3, #24]
 8007834:	8b7b      	ldrh	r3, [r7, #26]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	619a      	str	r2, [r3, #24]
 800783c:	e002      	b.n	8007844 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d123      	bne.n	8007894 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007866:	83fb      	strh	r3, [r7, #30]
 8007868:	8bfb      	ldrh	r3, [r7, #30]
 800786a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800786e:	83fb      	strh	r3, [r7, #30]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	8bfb      	ldrh	r3, [r7, #30]
 8007880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007890:	b29b      	uxth	r3, r3
 8007892:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d11f      	bne.n	80078de <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	83bb      	strh	r3, [r7, #28]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	8bbb      	ldrh	r3, [r7, #28]
 80078ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80078de:	8b7b      	ldrh	r3, [r7, #26]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6959      	ldr	r1, [r3, #20]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	895a      	ldrh	r2, [r3, #10]
 80078f0:	8b7b      	ldrh	r3, [r7, #26]
 80078f2:	f007 f995 	bl	800ec20 <USB_ReadPMA>
    }
  }

  return count;
 80078f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b0a4      	sub	sp, #144	; 0x90
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 81dd 	beq.w	8007cd4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007922:	b29b      	uxth	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4413      	add	r3, r2
 800792e:	3302      	adds	r3, #2
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007942:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800794e:	429a      	cmp	r2, r3
 8007950:	d907      	bls.n	8007962 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	619a      	str	r2, [r3, #24]
 8007960:	e002      	b.n	8007968 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2200      	movs	r2, #0
 8007966:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 80b9 	bne.w	8007ae4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d126      	bne.n	80079c8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007988:	b29b      	uxth	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	4413      	add	r3, r2
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	011a      	lsls	r2, r3, #4
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	4413      	add	r3, r2
 800799c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	801a      	strh	r2, [r3, #0]
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e01a      	b.n	80079fe <HAL_PCD_EP_DB_Transmit+0xfe>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d116      	bne.n	80079fe <HAL_PCD_EP_DB_Transmit+0xfe>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079de:	b29b      	uxth	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	4413      	add	r3, r2
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	011a      	lsls	r2, r3, #4
 80079ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079f6:	633b      	str	r3, [r7, #48]	; 0x30
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	2200      	movs	r2, #0
 80079fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d126      	bne.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x15a>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	011a      	lsls	r2, r3, #4
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	e017      	b.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d113      	bne.n	8007a8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	4413      	add	r3, r2
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	011a      	lsls	r2, r3, #4
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a82:	623b      	str	r3, [r7, #32]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	2200      	movs	r2, #0
 8007a88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f00d fdc4 	bl	801561e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 82fc 	beq.w	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abc:	82fb      	strh	r3, [r7, #22]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	441a      	add	r2, r3
 8007acc:	8afb      	ldrh	r3, [r7, #22]
 8007ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]
 8007ae2:	e2da      	b.n	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d021      	beq.n	8007b32 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f040 82ae 	bne.w	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	695a      	ldr	r2, [r3, #20]
 8007b42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b46:	441a      	add	r2, r3
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b54:	441a      	add	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6a1a      	ldr	r2, [r3, #32]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d30b      	bcc.n	8007b7e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6a1a      	ldr	r2, [r3, #32]
 8007b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	621a      	str	r2, [r3, #32]
 8007b7c:	e017      	b.n	8007bae <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8007b86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b96:	e00a      	b.n	8007bae <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d165      	bne.n	8007c82 <HAL_PCD_EP_DB_Transmit+0x382>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	4413      	add	r3, r2
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	011a      	lsls	r2, r3, #4
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf4:	d91d      	bls.n	8007c32 <HAL_PCD_EP_DB_Transmit+0x332>
 8007bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c02:	f003 031f 	and.w	r3, r3, #31
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <HAL_PCD_EP_DB_Transmit+0x310>
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	029b      	lsls	r3, r3, #10
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	e044      	b.n	8007cbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_PCD_EP_DB_Transmit+0x350>
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	801a      	strh	r2, [r3, #0]
 8007c4e:	e035      	b.n	8007cbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <HAL_PCD_EP_DB_Transmit+0x36a>
 8007c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c66:	3301      	adds	r3, #1
 8007c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	029b      	lsls	r3, r3, #10
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e01c      	b.n	8007cbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d118      	bne.n	8007cbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9e:	4413      	add	r3, r2
 8007ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	011a      	lsls	r2, r3, #4
 8007ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007caa:	4413      	add	r3, r2
 8007cac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6959      	ldr	r1, [r3, #20]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	891a      	ldrh	r2, [r3, #8]
 8007cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f006 ff62 	bl	800eb96 <USB_WritePMA>
 8007cd2:	e1e2      	b.n	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	3306      	adds	r3, #6
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cfc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d307      	bcc.n	8007d1c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007d14:	1ad2      	subs	r2, r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	619a      	str	r2, [r3, #24]
 8007d1a:	e002      	b.n	8007d22 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 80c0 	bne.w	8007eac <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d126      	bne.n	8007d82 <HAL_PCD_EP_DB_Transmit+0x482>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d48:	4413      	add	r3, r2
 8007d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	011a      	lsls	r2, r3, #4
 8007d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d54:	4413      	add	r3, r2
 8007d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d6a:	801a      	strh	r2, [r3, #0]
 8007d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	e01a      	b.n	8007db8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d116      	bne.n	8007db8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	4413      	add	r3, r2
 8007da0:	667b      	str	r3, [r7, #100]	; 0x64
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	011a      	lsls	r2, r3, #4
 8007da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007daa:	4413      	add	r3, r2
 8007dac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007db0:	663b      	str	r3, [r7, #96]	; 0x60
 8007db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db4:	2200      	movs	r2, #0
 8007db6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d12b      	bne.n	8007e1e <HAL_PCD_EP_DB_Transmit+0x51e>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dda:	4413      	add	r3, r2
 8007ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	011a      	lsls	r2, r3, #4
 8007de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e02:	801a      	strh	r2, [r3, #0]
 8007e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e017      	b.n	8007e4e <HAL_PCD_EP_DB_Transmit+0x54e>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	785b      	ldrb	r3, [r3, #1]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d113      	bne.n	8007e4e <HAL_PCD_EP_DB_Transmit+0x54e>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e34:	4413      	add	r3, r2
 8007e36:	677b      	str	r3, [r7, #116]	; 0x74
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	011a      	lsls	r2, r3, #4
 8007e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e40:	4413      	add	r3, r2
 8007e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e46:	673b      	str	r3, [r7, #112]	; 0x70
 8007e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f00d fbe2 	bl	801561e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f040 811a 	bne.w	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	8013      	strh	r3, [r2, #0]
 8007eaa:	e0f6      	b.n	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d121      	bne.n	8007efa <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	441a      	add	r2, r3
 8007ee2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	f040 80ca 	bne.w	800809a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007f0e:	441a      	add	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007f1c:	441a      	add	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d30b      	bcc.n	8007f46 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6a1a      	ldr	r2, [r3, #32]
 8007f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	621a      	str	r2, [r3, #32]
 8007f44:	e017      	b.n	8007f76 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d108      	bne.n	8007f60 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007f4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007f5e:	e00a      	b.n	8007f76 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d165      	bne.n	8008050 <HAL_PCD_EP_DB_Transmit+0x750>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f98:	4413      	add	r3, r2
 8007f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	011a      	lsls	r2, r3, #4
 8007fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fba:	801a      	strh	r2, [r3, #0]
 8007fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8007fc2:	d91d      	bls.n	8008000 <HAL_PCD_EP_DB_Transmit+0x700>
 8007fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fd0:	f003 031f 	and.w	r3, r3, #31
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d102      	bne.n	8007fde <HAL_PCD_EP_DB_Transmit+0x6de>
 8007fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	029b      	lsls	r3, r3, #10
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	4313      	orrs	r3, r2
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	e041      	b.n	8008084 <HAL_PCD_EP_DB_Transmit+0x784>
 8008000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <HAL_PCD_EP_DB_Transmit+0x71e>
 8008008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008016:	b29a      	uxth	r2, r3
 8008018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800801a:	801a      	strh	r2, [r3, #0]
 800801c:	e032      	b.n	8008084 <HAL_PCD_EP_DB_Transmit+0x784>
 800801e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	66bb      	str	r3, [r7, #104]	; 0x68
 8008026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_PCD_EP_DB_Transmit+0x738>
 8008032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008034:	3301      	adds	r3, #1
 8008036:	66bb      	str	r3, [r7, #104]	; 0x68
 8008038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29a      	uxth	r2, r3
 800803e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008040:	b29b      	uxth	r3, r3
 8008042:	029b      	lsls	r3, r3, #10
 8008044:	b29b      	uxth	r3, r3
 8008046:	4313      	orrs	r3, r2
 8008048:	b29a      	uxth	r2, r3
 800804a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e019      	b.n	8008084 <HAL_PCD_EP_DB_Transmit+0x784>
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d115      	bne.n	8008084 <HAL_PCD_EP_DB_Transmit+0x784>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008066:	4413      	add	r3, r2
 8008068:	657b      	str	r3, [r7, #84]	; 0x54
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	011a      	lsls	r2, r3, #4
 8008070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008072:	4413      	add	r3, r2
 8008074:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008078:	653b      	str	r3, [r7, #80]	; 0x50
 800807a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800807e:	b29a      	uxth	r2, r3
 8008080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008082:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6959      	ldr	r1, [r3, #20]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	895a      	ldrh	r2, [r3, #10]
 8008090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008094:	b29b      	uxth	r3, r3
 8008096:	f006 fd7e 	bl	800eb96 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b4:	82bb      	strh	r3, [r7, #20]
 80080b6:	8abb      	ldrh	r3, [r7, #20]
 80080b8:	f083 0310 	eor.w	r3, r3, #16
 80080bc:	82bb      	strh	r3, [r7, #20]
 80080be:	8abb      	ldrh	r3, [r7, #20]
 80080c0:	f083 0320 	eor.w	r3, r3, #32
 80080c4:	82bb      	strh	r3, [r7, #20]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	441a      	add	r2, r3
 80080d4:	8abb      	ldrh	r3, [r7, #20]
 80080d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3790      	adds	r7, #144	; 0x90
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	817b      	strh	r3, [r7, #10]
 8008102:	4613      	mov	r3, r2
 8008104:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008106:	897b      	ldrh	r3, [r7, #10]
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008112:	897b      	ldrh	r3, [r7, #10]
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4413      	add	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e009      	b.n	800813e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800812a:	897a      	ldrh	r2, [r7, #10]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800813e:	893b      	ldrh	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d107      	bne.n	8008154 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2200      	movs	r2, #0
 8008148:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	b29a      	uxth	r2, r3
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	80da      	strh	r2, [r3, #6]
 8008152:	e00b      	b.n	800816c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2201      	movs	r2, #1
 8008158:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	b29a      	uxth	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	0c1b      	lsrs	r3, r3, #16
 8008166:	b29a      	uxth	r2, r3
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e272      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8087 	beq.w	80082a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008198:	4b92      	ldr	r3, [pc, #584]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f003 030c 	and.w	r3, r3, #12
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d00c      	beq.n	80081be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80081a4:	4b8f      	ldr	r3, [pc, #572]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f003 030c 	and.w	r3, r3, #12
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d112      	bne.n	80081d6 <HAL_RCC_OscConfig+0x5e>
 80081b0:	4b8c      	ldr	r3, [pc, #560]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d10b      	bne.n	80081d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081be:	4b89      	ldr	r3, [pc, #548]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d06c      	beq.n	80082a4 <HAL_RCC_OscConfig+0x12c>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d168      	bne.n	80082a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e24c      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081de:	d106      	bne.n	80081ee <HAL_RCC_OscConfig+0x76>
 80081e0:	4b80      	ldr	r3, [pc, #512]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a7f      	ldr	r2, [pc, #508]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	e02e      	b.n	800824c <HAL_RCC_OscConfig+0xd4>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10c      	bne.n	8008210 <HAL_RCC_OscConfig+0x98>
 80081f6:	4b7b      	ldr	r3, [pc, #492]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a7a      	ldr	r2, [pc, #488]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80081fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	4b78      	ldr	r3, [pc, #480]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a77      	ldr	r2, [pc, #476]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	e01d      	b.n	800824c <HAL_RCC_OscConfig+0xd4>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008218:	d10c      	bne.n	8008234 <HAL_RCC_OscConfig+0xbc>
 800821a:	4b72      	ldr	r3, [pc, #456]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a71      	ldr	r2, [pc, #452]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	4b6f      	ldr	r3, [pc, #444]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a6e      	ldr	r2, [pc, #440]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e00b      	b.n	800824c <HAL_RCC_OscConfig+0xd4>
 8008234:	4b6b      	ldr	r3, [pc, #428]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a6a      	ldr	r2, [pc, #424]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 800823a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	4b68      	ldr	r3, [pc, #416]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a67      	ldr	r2, [pc, #412]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800824a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d013      	beq.n	800827c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008254:	f7fb fbee 	bl	8003a34 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800825c:	f7fb fbea 	bl	8003a34 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b64      	cmp	r3, #100	; 0x64
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e200      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800826e:	4b5d      	ldr	r3, [pc, #372]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <HAL_RCC_OscConfig+0xe4>
 800827a:	e014      	b.n	80082a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800827c:	f7fb fbda 	bl	8003a34 <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008284:	f7fb fbd6 	bl	8003a34 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b64      	cmp	r3, #100	; 0x64
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e1ec      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008296:	4b53      	ldr	r3, [pc, #332]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f0      	bne.n	8008284 <HAL_RCC_OscConfig+0x10c>
 80082a2:	e000      	b.n	80082a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d063      	beq.n	800837a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082b2:	4b4c      	ldr	r3, [pc, #304]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f003 030c 	and.w	r3, r3, #12
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80082be:	4b49      	ldr	r3, [pc, #292]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f003 030c 	and.w	r3, r3, #12
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d11c      	bne.n	8008304 <HAL_RCC_OscConfig+0x18c>
 80082ca:	4b46      	ldr	r3, [pc, #280]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d116      	bne.n	8008304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082d6:	4b43      	ldr	r3, [pc, #268]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_RCC_OscConfig+0x176>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d001      	beq.n	80082ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e1c0      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ee:	4b3d      	ldr	r3, [pc, #244]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4939      	ldr	r1, [pc, #228]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008302:	e03a      	b.n	800837a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d020      	beq.n	800834e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800830c:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <HAL_RCC_OscConfig+0x270>)
 800830e:	2201      	movs	r2, #1
 8008310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008312:	f7fb fb8f 	bl	8003a34 <HAL_GetTick>
 8008316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008318:	e008      	b.n	800832c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800831a:	f7fb fb8b 	bl	8003a34 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e1a1      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800832c:	4b2d      	ldr	r3, [pc, #180]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0f0      	beq.n	800831a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008338:	4b2a      	ldr	r3, [pc, #168]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4927      	ldr	r1, [pc, #156]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008348:	4313      	orrs	r3, r2
 800834a:	600b      	str	r3, [r1, #0]
 800834c:	e015      	b.n	800837a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800834e:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008354:	f7fb fb6e 	bl	8003a34 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800835c:	f7fb fb6a 	bl	8003a34 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e180      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800836e:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d03a      	beq.n	80083fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d019      	beq.n	80083c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800838e:	4b17      	ldr	r3, [pc, #92]	; (80083ec <HAL_RCC_OscConfig+0x274>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008394:	f7fb fb4e 	bl	8003a34 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800839c:	f7fb fb4a 	bl	8003a34 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e160      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <HAL_RCC_OscConfig+0x26c>)
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80083ba:	2001      	movs	r0, #1
 80083bc:	f000 face 	bl	800895c <RCC_Delay>
 80083c0:	e01c      	b.n	80083fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <HAL_RCC_OscConfig+0x274>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c8:	f7fb fb34 	bl	8003a34 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ce:	e00f      	b.n	80083f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083d0:	f7fb fb30 	bl	8003a34 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d908      	bls.n	80083f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e146      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
 80083e2:	bf00      	nop
 80083e4:	40021000 	.word	0x40021000
 80083e8:	42420000 	.word	0x42420000
 80083ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083f0:	4b92      	ldr	r3, [pc, #584]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e9      	bne.n	80083d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80a6 	beq.w	8008556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800840e:	4b8b      	ldr	r3, [pc, #556]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10d      	bne.n	8008436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800841a:	4b88      	ldr	r3, [pc, #544]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	4a87      	ldr	r2, [pc, #540]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008424:	61d3      	str	r3, [r2, #28]
 8008426:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008432:	2301      	movs	r3, #1
 8008434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008436:	4b82      	ldr	r3, [pc, #520]	; (8008640 <HAL_RCC_OscConfig+0x4c8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	2b00      	cmp	r3, #0
 8008440:	d118      	bne.n	8008474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008442:	4b7f      	ldr	r3, [pc, #508]	; (8008640 <HAL_RCC_OscConfig+0x4c8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a7e      	ldr	r2, [pc, #504]	; (8008640 <HAL_RCC_OscConfig+0x4c8>)
 8008448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800844c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800844e:	f7fb faf1 	bl	8003a34 <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008456:	f7fb faed 	bl	8003a34 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b64      	cmp	r3, #100	; 0x64
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e103      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008468:	4b75      	ldr	r3, [pc, #468]	; (8008640 <HAL_RCC_OscConfig+0x4c8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0f0      	beq.n	8008456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d106      	bne.n	800848a <HAL_RCC_OscConfig+0x312>
 800847c:	4b6f      	ldr	r3, [pc, #444]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	4a6e      	ldr	r2, [pc, #440]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008482:	f043 0301 	orr.w	r3, r3, #1
 8008486:	6213      	str	r3, [r2, #32]
 8008488:	e02d      	b.n	80084e6 <HAL_RCC_OscConfig+0x36e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10c      	bne.n	80084ac <HAL_RCC_OscConfig+0x334>
 8008492:	4b6a      	ldr	r3, [pc, #424]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	4a69      	ldr	r2, [pc, #420]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008498:	f023 0301 	bic.w	r3, r3, #1
 800849c:	6213      	str	r3, [r2, #32]
 800849e:	4b67      	ldr	r3, [pc, #412]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	4a66      	ldr	r2, [pc, #408]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084a4:	f023 0304 	bic.w	r3, r3, #4
 80084a8:	6213      	str	r3, [r2, #32]
 80084aa:	e01c      	b.n	80084e6 <HAL_RCC_OscConfig+0x36e>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d10c      	bne.n	80084ce <HAL_RCC_OscConfig+0x356>
 80084b4:	4b61      	ldr	r3, [pc, #388]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	4a60      	ldr	r2, [pc, #384]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084ba:	f043 0304 	orr.w	r3, r3, #4
 80084be:	6213      	str	r3, [r2, #32]
 80084c0:	4b5e      	ldr	r3, [pc, #376]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	4a5d      	ldr	r2, [pc, #372]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	6213      	str	r3, [r2, #32]
 80084cc:	e00b      	b.n	80084e6 <HAL_RCC_OscConfig+0x36e>
 80084ce:	4b5b      	ldr	r3, [pc, #364]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	4a5a      	ldr	r2, [pc, #360]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	6213      	str	r3, [r2, #32]
 80084da:	4b58      	ldr	r3, [pc, #352]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	4a57      	ldr	r2, [pc, #348]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d015      	beq.n	800851a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084ee:	f7fb faa1 	bl	8003a34 <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084f4:	e00a      	b.n	800850c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084f6:	f7fb fa9d 	bl	8003a34 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	f241 3288 	movw	r2, #5000	; 0x1388
 8008504:	4293      	cmp	r3, r2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e0b1      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800850c:	4b4b      	ldr	r3, [pc, #300]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0ee      	beq.n	80084f6 <HAL_RCC_OscConfig+0x37e>
 8008518:	e014      	b.n	8008544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800851a:	f7fb fa8b 	bl	8003a34 <HAL_GetTick>
 800851e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008520:	e00a      	b.n	8008538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008522:	f7fb fa87 	bl	8003a34 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008530:	4293      	cmp	r3, r2
 8008532:	d901      	bls.n	8008538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e09b      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008538:	4b40      	ldr	r3, [pc, #256]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1ee      	bne.n	8008522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d105      	bne.n	8008556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800854a:	4b3c      	ldr	r3, [pc, #240]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	4a3b      	ldr	r2, [pc, #236]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8087 	beq.w	800866e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008560:	4b36      	ldr	r3, [pc, #216]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f003 030c 	and.w	r3, r3, #12
 8008568:	2b08      	cmp	r3, #8
 800856a:	d061      	beq.n	8008630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d146      	bne.n	8008602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008574:	4b33      	ldr	r3, [pc, #204]	; (8008644 <HAL_RCC_OscConfig+0x4cc>)
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800857a:	f7fb fa5b 	bl	8003a34 <HAL_GetTick>
 800857e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008580:	e008      	b.n	8008594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008582:	f7fb fa57 	bl	8003a34 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d901      	bls.n	8008594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e06d      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008594:	4b29      	ldr	r3, [pc, #164]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1f0      	bne.n	8008582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a8:	d108      	bne.n	80085bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80085aa:	4b24      	ldr	r3, [pc, #144]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	4921      	ldr	r1, [pc, #132]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085bc:	4b1f      	ldr	r3, [pc, #124]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a19      	ldr	r1, [r3, #32]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	430b      	orrs	r3, r1
 80085ce:	491b      	ldr	r1, [pc, #108]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085d4:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <HAL_RCC_OscConfig+0x4cc>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085da:	f7fb fa2b 	bl	8003a34 <HAL_GetTick>
 80085de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085e0:	e008      	b.n	80085f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085e2:	f7fb fa27 	bl	8003a34 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d901      	bls.n	80085f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e03d      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0f0      	beq.n	80085e2 <HAL_RCC_OscConfig+0x46a>
 8008600:	e035      	b.n	800866e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <HAL_RCC_OscConfig+0x4cc>)
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008608:	f7fb fa14 	bl	8003a34 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008610:	f7fb fa10 	bl	8003a34 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e026      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008622:	4b06      	ldr	r3, [pc, #24]	; (800863c <HAL_RCC_OscConfig+0x4c4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <HAL_RCC_OscConfig+0x498>
 800862e:	e01e      	b.n	800866e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d107      	bne.n	8008648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e019      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
 800863c:	40021000 	.word	0x40021000
 8008640:	40007000 	.word	0x40007000
 8008644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008648:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_RCC_OscConfig+0x500>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	429a      	cmp	r2, r3
 800865a:	d106      	bne.n	800866a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008666:	429a      	cmp	r2, r3
 8008668:	d001      	beq.n	800866e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e000      	b.n	8008670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	40021000 	.word	0x40021000

0800867c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e0d0      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008690:	4b6a      	ldr	r3, [pc, #424]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0307 	and.w	r3, r3, #7
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d910      	bls.n	80086c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800869e:	4b67      	ldr	r3, [pc, #412]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f023 0207 	bic.w	r2, r3, #7
 80086a6:	4965      	ldr	r1, [pc, #404]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	4b63      	ldr	r3, [pc, #396]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0b8      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d020      	beq.n	800870e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086d8:	4b59      	ldr	r3, [pc, #356]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4a58      	ldr	r2, [pc, #352]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80086de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80086e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086f0:	4b53      	ldr	r3, [pc, #332]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	4a52      	ldr	r2, [pc, #328]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80086f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80086fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086fc:	4b50      	ldr	r3, [pc, #320]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	494d      	ldr	r1, [pc, #308]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 800870a:	4313      	orrs	r3, r2
 800870c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d040      	beq.n	800879c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d107      	bne.n	8008732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008722:	4b47      	ldr	r3, [pc, #284]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d115      	bne.n	800875a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e07f      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d107      	bne.n	800874a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800873a:	4b41      	ldr	r3, [pc, #260]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e073      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800874a:	4b3d      	ldr	r3, [pc, #244]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e06b      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800875a:	4b39      	ldr	r3, [pc, #228]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f023 0203 	bic.w	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	4936      	ldr	r1, [pc, #216]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 8008768:	4313      	orrs	r3, r2
 800876a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800876c:	f7fb f962 	bl	8003a34 <HAL_GetTick>
 8008770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008772:	e00a      	b.n	800878a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008774:	f7fb f95e 	bl	8003a34 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e053      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800878a:	4b2d      	ldr	r3, [pc, #180]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f003 020c 	and.w	r2, r3, #12
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	429a      	cmp	r2, r3
 800879a:	d1eb      	bne.n	8008774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800879c:	4b27      	ldr	r3, [pc, #156]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d210      	bcs.n	80087cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f023 0207 	bic.w	r2, r3, #7
 80087b2:	4922      	ldr	r1, [pc, #136]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ba:	4b20      	ldr	r3, [pc, #128]	; (800883c <HAL_RCC_ClockConfig+0x1c0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d001      	beq.n	80087cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e032      	b.n	8008832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087d8:	4b19      	ldr	r3, [pc, #100]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	4916      	ldr	r1, [pc, #88]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80087f6:	4b12      	ldr	r3, [pc, #72]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	490e      	ldr	r1, [pc, #56]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 8008806:	4313      	orrs	r3, r2
 8008808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800880a:	f000 f821 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 800880e:	4602      	mov	r2, r0
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <HAL_RCC_ClockConfig+0x1c4>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	091b      	lsrs	r3, r3, #4
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	490a      	ldr	r1, [pc, #40]	; (8008844 <HAL_RCC_ClockConfig+0x1c8>)
 800881c:	5ccb      	ldrb	r3, [r1, r3]
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	4a09      	ldr	r2, [pc, #36]	; (8008848 <HAL_RCC_ClockConfig+0x1cc>)
 8008824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <HAL_RCC_ClockConfig+0x1d0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f7fb f8c0 	bl	80039b0 <HAL_InitTick>

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40022000 	.word	0x40022000
 8008840:	40021000 	.word	0x40021000
 8008844:	08031dec 	.word	0x08031dec
 8008848:	20000010 	.word	0x20000010
 800884c:	20000014 	.word	0x20000014

08008850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800886a:	4b1e      	ldr	r3, [pc, #120]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 030c 	and.w	r3, r3, #12
 8008876:	2b04      	cmp	r3, #4
 8008878:	d002      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0x30>
 800887a:	2b08      	cmp	r3, #8
 800887c:	d003      	beq.n	8008886 <HAL_RCC_GetSysClockFreq+0x36>
 800887e:	e027      	b.n	80088d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008880:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008882:	613b      	str	r3, [r7, #16]
      break;
 8008884:	e027      	b.n	80088d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	0c9b      	lsrs	r3, r3, #18
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	4a17      	ldr	r2, [pc, #92]	; (80088ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8008890:	5cd3      	ldrb	r3, [r2, r3]
 8008892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d010      	beq.n	80088c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	0c5b      	lsrs	r3, r3, #17
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80088aa:	5cd3      	ldrb	r3, [r2, r3]
 80088ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a0d      	ldr	r2, [pc, #52]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80088b2:	fb03 f202 	mul.w	r2, r3, r2
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	e004      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a0c      	ldr	r2, [pc, #48]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
 80088c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	613b      	str	r3, [r7, #16]
      break;
 80088ce:	e002      	b.n	80088d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80088d0:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80088d2:	613b      	str	r3, [r7, #16]
      break;
 80088d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088d6:	693b      	ldr	r3, [r7, #16]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	40021000 	.word	0x40021000
 80088e8:	007a1200 	.word	0x007a1200
 80088ec:	08031e04 	.word	0x08031e04
 80088f0:	08031e14 	.word	0x08031e14
 80088f4:	003d0900 	.word	0x003d0900

080088f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <HAL_RCC_GetHCLKFreq+0x10>)
 80088fe:	681b      	ldr	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr
 8008908:	20000010 	.word	0x20000010

0800890c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008910:	f7ff fff2 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8008914:	4602      	mov	r2, r0
 8008916:	4b05      	ldr	r3, [pc, #20]	; (800892c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	4903      	ldr	r1, [pc, #12]	; (8008930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008922:	5ccb      	ldrb	r3, [r1, r3]
 8008924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008928:	4618      	mov	r0, r3
 800892a:	bd80      	pop	{r7, pc}
 800892c:	40021000 	.word	0x40021000
 8008930:	08031dfc 	.word	0x08031dfc

08008934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008938:	f7ff ffde 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 800893c:	4602      	mov	r2, r0
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	0adb      	lsrs	r3, r3, #11
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	4903      	ldr	r1, [pc, #12]	; (8008958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800894a:	5ccb      	ldrb	r3, [r1, r3]
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	40021000 	.word	0x40021000
 8008958:	08031dfc 	.word	0x08031dfc

0800895c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008964:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <RCC_Delay+0x34>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a0a      	ldr	r2, [pc, #40]	; (8008994 <RCC_Delay+0x38>)
 800896a:	fba2 2303 	umull	r2, r3, r2, r3
 800896e:	0a5b      	lsrs	r3, r3, #9
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008978:	bf00      	nop
  }
  while (Delay --);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1e5a      	subs	r2, r3, #1
 800897e:	60fa      	str	r2, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1f9      	bne.n	8008978 <RCC_Delay+0x1c>
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr
 8008990:	20000010 	.word	0x20000010
 8008994:	10624dd3 	.word	0x10624dd3

08008998 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d07d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089b8:	4b4f      	ldr	r3, [pc, #316]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10d      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c4:	4b4c      	ldr	r3, [pc, #304]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	4a4b      	ldr	r2, [pc, #300]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ce:	61d3      	str	r3, [r2, #28]
 80089d0:	4b49      	ldr	r3, [pc, #292]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089dc:	2301      	movs	r3, #1
 80089de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e0:	4b46      	ldr	r3, [pc, #280]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d118      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089ec:	4b43      	ldr	r3, [pc, #268]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a42      	ldr	r2, [pc, #264]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089f8:	f7fb f81c 	bl	8003a34 <HAL_GetTick>
 80089fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089fe:	e008      	b.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a00:	f7fb f818 	bl	8003a34 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b64      	cmp	r3, #100	; 0x64
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e06d      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a12:	4b3a      	ldr	r3, [pc, #232]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f0      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a1e:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d02e      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d027      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a3c:	4b2e      	ldr	r3, [pc, #184]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a46:	4b2e      	ldr	r3, [pc, #184]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a48:	2201      	movs	r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a4c:	4b2c      	ldr	r3, [pc, #176]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008a52:	4a29      	ldr	r2, [pc, #164]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d014      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a62:	f7fa ffe7 	bl	8003a34 <HAL_GetTick>
 8008a66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fa ffe3 	bl	8003a34 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e036      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a80:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f003 0302 	and.w	r3, r3, #2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0ee      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	4917      	ldr	r1, [pc, #92]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa4:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008abc:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	490b      	ldr	r1, [pc, #44]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	4904      	ldr	r1, [pc, #16]	; (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40021000 	.word	0x40021000
 8008afc:	40007000 	.word	0x40007000
 8008b00:	42420440 	.word	0x42420440

08008b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	2300      	movs	r3, #0
 8008b16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	2b0f      	cmp	r3, #15
 8008b26:	f200 80af 	bhi.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008c07 	.word	0x08008c07
 8008b34:	08008c6d 	.word	0x08008c6d
 8008b38:	08008c89 	.word	0x08008c89
 8008b3c:	08008bf7 	.word	0x08008bf7
 8008b40:	08008c89 	.word	0x08008c89
 8008b44:	08008c89 	.word	0x08008c89
 8008b48:	08008c89 	.word	0x08008c89
 8008b4c:	08008bff 	.word	0x08008bff
 8008b50:	08008c89 	.word	0x08008c89
 8008b54:	08008c89 	.word	0x08008c89
 8008b58:	08008c89 	.word	0x08008c89
 8008b5c:	08008c89 	.word	0x08008c89
 8008b60:	08008c89 	.word	0x08008c89
 8008b64:	08008c89 	.word	0x08008c89
 8008b68:	08008c89 	.word	0x08008c89
 8008b6c:	08008b71 	.word	0x08008b71
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008b70:	4b4a      	ldr	r3, [pc, #296]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008b76:	4b49      	ldr	r3, [pc, #292]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8084 	beq.w	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	0c9b      	lsrs	r3, r3, #18
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	4a44      	ldr	r2, [pc, #272]	; (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8008b8e:	5cd3      	ldrb	r3, [r2, r3]
 8008b90:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d015      	beq.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b9c:	4b3f      	ldr	r3, [pc, #252]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	0c5b      	lsrs	r3, r3, #17
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	4a3f      	ldr	r2, [pc, #252]	; (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8008ba8:	5cd3      	ldrb	r3, [r2, r3]
 8008baa:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00d      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008bb6:	4a3c      	ldr	r2, [pc, #240]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	fb02 f303 	mul.w	r3, r2, r3
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	e004      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4a38      	ldr	r2, [pc, #224]	; (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008bd2:	4b32      	ldr	r3, [pc, #200]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bde:	d102      	bne.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008be4:	e052      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4a31      	ldr	r2, [pc, #196]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8008bec:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	61bb      	str	r3, [r7, #24]
      break;
 8008bf4:	e04a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008bf6:	f7ff fe2b 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 8008bfa:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008bfc:	e049      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008bfe:	f7ff fe27 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 8008c02:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008c04:	e045      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008c06:	4b25      	ldr	r3, [pc, #148]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d108      	bne.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8008c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c26:	61bb      	str	r3, [r7, #24]
 8008c28:	e01f      	b.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d109      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8008c42:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008c46:	61bb      	str	r3, [r7, #24]
 8008c48:	e00f      	b.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c54:	d11c      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008c56:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d016      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8008c62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c66:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008c68:	e012      	b.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008c6a:	e011      	b.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008c6c:	f7ff fe62 	bl	8008934 <HAL_RCC_GetPCLK2Freq>
 8008c70:	4602      	mov	r2, r0
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	0b9b      	lsrs	r3, r3, #14
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c84:	61bb      	str	r3, [r7, #24]
      break;
 8008c86:	e004      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8008c88:	bf00      	nop
 8008c8a:	e002      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008c8c:	bf00      	nop
 8008c8e:	e000      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008c90:	bf00      	nop
    }
  }
  return (frequency);
 8008c92:	69bb      	ldr	r3, [r7, #24]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40021000 	.word	0x40021000
 8008ca0:	08031e18 	.word	0x08031e18
 8008ca4:	08031e28 	.word	0x08031e28
 8008ca8:	007a1200 	.word	0x007a1200
 8008cac:	003d0900 	.word	0x003d0900
 8008cb0:	aaaaaaab 	.word	0xaaaaaaab

08008cb4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e022      	b.n	8008d0c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fa fb31 	bl	8003340 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2203      	movs	r2, #3
 8008ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f814 	bl	8008d14 <HAL_SD_InitCard>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e00a      	b.n	8008d0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d14:	b5b0      	push	{r4, r5, r7, lr}
 8008d16:	b08e      	sub	sp, #56	; 0x38
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008d30:	2376      	movs	r3, #118	; 0x76
 8008d32:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681d      	ldr	r5, [r3, #0]
 8008d38:	466c      	mov	r4, sp
 8008d3a:	f107 0314 	add.w	r3, r7, #20
 8008d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f002 feb5 	bl	800babc <SDIO_Init>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e04f      	b.n	8008e04 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008d64:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <HAL_SD_InitCard+0xf8>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 feea 	bl	800bb48 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008d74:	4b25      	ldr	r3, [pc, #148]	; (8008e0c <HAL_SD_InitCard+0xf8>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008d7a:	2002      	movs	r0, #2
 8008d7c:	f7fa fe64 	bl	8003a48 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 ff03 	bl	8009b8c <SD_PowerON>
 8008d86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00b      	beq.n	8008da6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e02e      	b.n	8008e04 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fe22 	bl	80099f0 <SD_InitCard>
 8008dac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e01b      	b.n	8008e04 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 ff43 	bl	800bc60 <SDMMC_CmdBlockLength>
 8008dda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00f      	beq.n	8008e02 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <HAL_SD_InitCard+0xfc>)
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3728      	adds	r7, #40	; 0x28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e0c:	423000a0 	.word	0x423000a0
 8008e10:	004005ff 	.word	0x004005ff

08008e14 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b092      	sub	sp, #72	; 0x48
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e22:	f7fa fe07 	bl	8003a34 <HAL_GetTick>
 8008e26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d107      	bne.n	8008e46 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e1bd      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	f040 81b0 	bne.w	80091b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	441a      	add	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d907      	bls.n	8008e78 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e1a4      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2200      	movs	r2, #0
 8008e86:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d002      	beq.n	8008e96 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	025b      	lsls	r3, r3, #9
 8008e94:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e96:	f04f 33ff 	mov.w	r3, #4294967295
 8008e9a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	025b      	lsls	r3, r3, #9
 8008ea0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008ea2:	2390      	movs	r3, #144	; 0x90
 8008ea4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f107 0214 	add.w	r2, r7, #20
 8008eba:	4611      	mov	r1, r2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f002 fea4 	bl	800bc0a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d90a      	bls.n	8008ede <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 ff07 	bl	800bce8 <SDMMC_CmdReadMultiBlock>
 8008eda:	6478      	str	r0, [r7, #68]	; 0x44
 8008edc:	e009      	b.n	8008ef2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eea:	4618      	mov	r0, r3
 8008eec:	f002 feda 	bl	800bca4 <SDMMC_CmdReadSingleBlock>
 8008ef0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d012      	beq.n	8008f1e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a7a      	ldr	r2, [pc, #488]	; (80090e8 <HAL_SD_ReadBlocks+0x2d4>)
 8008efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f06:	431a      	orrs	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e151      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008f22:	e061      	b.n	8008fe8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d03c      	beq.n	8008fac <HAL_SD_ReadBlocks+0x198>
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d039      	beq.n	8008fac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f3c:	e033      	b.n	8008fa6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f002 fde4 	bl	800bb10 <SDIO_ReadFIFO>
 8008f48:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f54:	3301      	adds	r3, #1
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	0a1b      	lsrs	r3, r3, #8
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f70:	3b01      	subs	r3, #1
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	0c1b      	lsrs	r3, r3, #16
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f80:	3301      	adds	r3, #1
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f86:	3b01      	subs	r3, #1
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	0e1b      	lsrs	r3, r3, #24
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	3301      	adds	r3, #1
 8008f98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa8:	2b07      	cmp	r3, #7
 8008faa:	d9c8      	bls.n	8008f3e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008fac:	f7fa fd42 	bl	8003a34 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d902      	bls.n	8008fc2 <HAL_SD_ReadBlocks+0x1ae>
 8008fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d112      	bne.n	8008fe8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a48      	ldr	r2, [pc, #288]	; (80090e8 <HAL_SD_ReadBlocks+0x2d4>)
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e0ec      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fee:	f240 332a 	movw	r3, #810	; 0x32a
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d095      	beq.n	8008f24 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009002:	2b00      	cmp	r3, #0
 8009004:	d022      	beq.n	800904c <HAL_SD_ReadBlocks+0x238>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d91f      	bls.n	800904c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009010:	2b03      	cmp	r3, #3
 8009012:	d01b      	beq.n	800904c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f002 fecb 	bl	800bdb4 <SDMMC_CmdStopTransfer>
 800901e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009022:	2b00      	cmp	r3, #0
 8009024:	d012      	beq.n	800904c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a2f      	ldr	r2, [pc, #188]	; (80090e8 <HAL_SD_ReadBlocks+0x2d4>)
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009034:	431a      	orrs	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e0ba      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d012      	beq.n	8009080 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a22      	ldr	r2, [pc, #136]	; (80090e8 <HAL_SD_ReadBlocks+0x2d4>)
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	f043 0208 	orr.w	r2, r3, #8
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e0a0      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d012      	beq.n	80090b4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a15      	ldr	r2, [pc, #84]	; (80090e8 <HAL_SD_ReadBlocks+0x2d4>)
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	f043 0202 	orr.w	r2, r3, #2
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e086      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d063      	beq.n	800918a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a08      	ldr	r2, [pc, #32]	; (80090e8 <HAL_SD_ReadBlocks+0x2d4>)
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	f043 0220 	orr.w	r2, r3, #32
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e06c      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
 80090e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 fd0d 	bl	800bb10 <SDIO_ReadFIFO>
 80090f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009102:	3301      	adds	r3, #1
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009108:	3b01      	subs	r3, #1
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b2da      	uxtb	r2, r3
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009118:	3301      	adds	r3, #1
 800911a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800911c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911e:	3b01      	subs	r3, #1
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	0c1b      	lsrs	r3, r3, #16
 8009126:	b2da      	uxtb	r2, r3
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800912c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912e:	3301      	adds	r3, #1
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009134:	3b01      	subs	r3, #1
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	0e1b      	lsrs	r3, r3, #24
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009140:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	3301      	adds	r3, #1
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	3b01      	subs	r3, #1
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800914e:	f7fa fc71 	bl	8003a34 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800915a:	429a      	cmp	r2, r3
 800915c:	d902      	bls.n	8009164 <HAL_SD_ReadBlocks+0x350>
 800915e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009160:	2b00      	cmp	r3, #0
 8009162:	d112      	bne.n	800918a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a18      	ldr	r2, [pc, #96]	; (80091cc <HAL_SD_ReadBlocks+0x3b8>)
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e01b      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <HAL_SD_ReadBlocks+0x38a>
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1a6      	bne.n	80090ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e006      	b.n	80091c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
  }
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3748      	adds	r7, #72	; 0x48
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	004005ff 	.word	0x004005ff

080091d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b092      	sub	sp, #72	; 0x48
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091de:	f7fa fc29 	bl	8003a34 <HAL_GetTick>
 80091e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d107      	bne.n	8009202 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e166      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b01      	cmp	r3, #1
 800920c:	f040 8159 	bne.w	80094c2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	441a      	add	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009220:	429a      	cmp	r2, r3
 8009222:	d907      	bls.n	8009234 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e14d      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2203      	movs	r2, #3
 8009238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2200      	movs	r2, #0
 8009242:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009248:	2b01      	cmp	r3, #1
 800924a:	d002      	beq.n	8009252 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	025b      	lsls	r3, r3, #9
 8009250:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009252:	f04f 33ff 	mov.w	r3, #4294967295
 8009256:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	025b      	lsls	r3, r3, #9
 800925c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800925e:	2390      	movs	r3, #144	; 0x90
 8009260:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009262:	2300      	movs	r3, #0
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009266:	2300      	movs	r3, #0
 8009268:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800926a:	2301      	movs	r3, #1
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f107 0218 	add.w	r2, r7, #24
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f002 fcc6 	bl	800bc0a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d90a      	bls.n	800929a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2220      	movs	r2, #32
 8009288:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009290:	4618      	mov	r0, r3
 8009292:	f002 fd6d 	bl	800bd70 <SDMMC_CmdWriteMultiBlock>
 8009296:	6478      	str	r0, [r7, #68]	; 0x44
 8009298:	e009      	b.n	80092ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2210      	movs	r2, #16
 800929e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092a6:	4618      	mov	r0, r3
 80092a8:	f002 fd40 	bl	800bd2c <SDMMC_CmdWriteSingleBlock>
 80092ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80092ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d012      	beq.n	80092da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a87      	ldr	r2, [pc, #540]	; (80094d8 <HAL_SD_WriteBlocks+0x308>)
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c2:	431a      	orrs	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e0fa      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80092de:	e065      	b.n	80093ac <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d040      	beq.n	8009370 <HAL_SD_WriteBlocks+0x1a0>
 80092ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d03d      	beq.n	8009370 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80092f4:	2300      	movs	r3, #0
 80092f6:	643b      	str	r3, [r7, #64]	; 0x40
 80092f8:	e037      	b.n	800936a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80092fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	3301      	adds	r3, #1
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009308:	3b01      	subs	r3, #1
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800930c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	021a      	lsls	r2, r3, #8
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	3301      	adds	r3, #1
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800931e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009320:	3b01      	subs	r3, #1
 8009322:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	041a      	lsls	r2, r3, #16
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009332:	3301      	adds	r3, #1
 8009334:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009338:	3b01      	subs	r3, #1
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800933c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	061a      	lsls	r2, r3, #24
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	4313      	orrs	r3, r2
 8009346:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	3301      	adds	r3, #1
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800934e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009350:	3b01      	subs	r3, #1
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f107 0214 	add.w	r2, r7, #20
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f002 fbe2 	bl	800bb28 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009366:	3301      	adds	r3, #1
 8009368:	643b      	str	r3, [r7, #64]	; 0x40
 800936a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936c:	2b07      	cmp	r3, #7
 800936e:	d9c4      	bls.n	80092fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009370:	f7fa fb60 	bl	8003a34 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800937c:	429a      	cmp	r2, r3
 800937e:	d902      	bls.n	8009386 <HAL_SD_WriteBlocks+0x1b6>
 8009380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009382:	2b00      	cmp	r3, #0
 8009384:	d112      	bne.n	80093ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a53      	ldr	r2, [pc, #332]	; (80094d8 <HAL_SD_WriteBlocks+0x308>)
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009394:	431a      	orrs	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e091      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b2:	f240 331a 	movw	r3, #794	; 0x31a
 80093b6:	4013      	ands	r3, r2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d091      	beq.n	80092e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d022      	beq.n	8009410 <HAL_SD_WriteBlocks+0x240>
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d91f      	bls.n	8009410 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d01b      	beq.n	8009410 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 fce9 	bl	800bdb4 <SDMMC_CmdStopTransfer>
 80093e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80093e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d012      	beq.n	8009410 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a3a      	ldr	r2, [pc, #232]	; (80094d8 <HAL_SD_WriteBlocks+0x308>)
 80093f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e05f      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	f003 0308 	and.w	r3, r3, #8
 800941a:	2b00      	cmp	r3, #0
 800941c:	d012      	beq.n	8009444 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a2d      	ldr	r2, [pc, #180]	; (80094d8 <HAL_SD_WriteBlocks+0x308>)
 8009424:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	f043 0208 	orr.w	r2, r3, #8
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e045      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d012      	beq.n	8009478 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a20      	ldr	r2, [pc, #128]	; (80094d8 <HAL_SD_WriteBlocks+0x308>)
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	f043 0202 	orr.w	r2, r3, #2
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e02b      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	f003 0310 	and.w	r3, r3, #16
 8009482:	2b00      	cmp	r3, #0
 8009484:	d012      	beq.n	80094ac <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a13      	ldr	r2, [pc, #76]	; (80094d8 <HAL_SD_WriteBlocks+0x308>)
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	f043 0210 	orr.w	r2, r3, #16
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e011      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	e006      	b.n	80094d0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
  }
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3748      	adds	r7, #72	; 0x48
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	004005ff 	.word	0x004005ff

080094dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ea:	0f9b      	lsrs	r3, r3, #30
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f6:	0e9b      	lsrs	r3, r3, #26
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009508:	0e1b      	lsrs	r3, r3, #24
 800950a:	b2db      	uxtb	r3, r3
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	b2da      	uxtb	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	b2da      	uxtb	r2, r3
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b2da      	uxtb	r2, r3
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009532:	b2da      	uxtb	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800953c:	0d1b      	lsrs	r3, r3, #20
 800953e:	b29a      	uxth	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009548:	0c1b      	lsrs	r3, r3, #16
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f003 030f 	and.w	r3, r3, #15
 8009550:	b2da      	uxtb	r2, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800955a:	0bdb      	lsrs	r3, r3, #15
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956c:	0b9b      	lsrs	r3, r3, #14
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	b2da      	uxtb	r2, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957e:	0b5b      	lsrs	r3, r3, #13
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009590:	0b1b      	lsrs	r3, r3, #12
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	b2da      	uxtb	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2200      	movs	r2, #0
 80095a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d163      	bne.n	8009674 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b0:	009a      	lsls	r2, r3, #2
 80095b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095b6:	4013      	ands	r3, r2
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095bc:	0f92      	lsrs	r2, r2, #30
 80095be:	431a      	orrs	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c8:	0edb      	lsrs	r3, r3, #27
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095da:	0e1b      	lsrs	r3, r3, #24
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ec:	0d5b      	lsrs	r3, r3, #21
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fe:	0c9b      	lsrs	r3, r3, #18
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009610:	0bdb      	lsrs	r3, r3, #15
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	b2da      	uxtb	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	7e1b      	ldrb	r3, [r3, #24]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	3302      	adds	r3, #2
 8009634:	2201      	movs	r2, #1
 8009636:	fa02 f303 	lsl.w	r3, r2, r3
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800963e:	fb03 f202 	mul.w	r2, r3, r2
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	7a1b      	ldrb	r3, [r3, #8]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 030f 	and.w	r3, r3, #15
 8009650:	2201      	movs	r2, #1
 8009652:	409a      	lsls	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009660:	0a52      	lsrs	r2, r2, #9
 8009662:	fb03 f202 	mul.w	r2, r3, r2
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009670:	661a      	str	r2, [r3, #96]	; 0x60
 8009672:	e031      	b.n	80096d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009678:	2b01      	cmp	r3, #1
 800967a:	d11d      	bne.n	80096b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009680:	041b      	lsls	r3, r3, #16
 8009682:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	431a      	orrs	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	3301      	adds	r3, #1
 8009698:	029a      	lsls	r2, r3, #10
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	661a      	str	r2, [r3, #96]	; 0x60
 80096b6:	e00f      	b.n	80096d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a58      	ldr	r2, [pc, #352]	; (8009820 <HAL_SD_GetCardCSD+0x344>)
 80096be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e09d      	b.n	8009814 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	0b9b      	lsrs	r3, r3, #14
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ee:	09db      	lsrs	r3, r3, #7
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009706:	b2da      	uxtb	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009710:	0fdb      	lsrs	r3, r3, #31
 8009712:	b2da      	uxtb	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971c:	0f5b      	lsrs	r3, r3, #29
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	b2da      	uxtb	r2, r3
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972e:	0e9b      	lsrs	r3, r3, #26
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	b2da      	uxtb	r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009740:	0d9b      	lsrs	r3, r3, #22
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	b2da      	uxtb	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	0d5b      	lsrs	r3, r3, #21
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976e:	0c1b      	lsrs	r3, r3, #16
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	b2da      	uxtb	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009782:	0bdb      	lsrs	r3, r3, #15
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	0b9b      	lsrs	r3, r3, #14
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097aa:	0b5b      	lsrs	r3, r3, #13
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	0b1b      	lsrs	r3, r3, #12
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d2:	0a9b      	lsrs	r3, r3, #10
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e6:	0a1b      	lsrs	r3, r3, #8
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	085b      	lsrs	r3, r3, #1
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009802:	b2da      	uxtb	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	004005ff 	.word	0x004005ff

08009824 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	bc80      	pop	{r7}
 8009878:	4770      	bx	lr
	...

0800987c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800987c:	b5b0      	push	{r4, r5, r7, lr}
 800987e:	b08e      	sub	sp, #56	; 0x38
 8009880:	af04      	add	r7, sp, #16
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2203      	movs	r2, #3
 8009890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009898:	2b03      	cmp	r3, #3
 800989a:	d02e      	beq.n	80098fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a2:	d106      	bne.n	80098b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	639a      	str	r2, [r3, #56]	; 0x38
 80098b0:	e029      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098b8:	d10a      	bne.n	80098d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa1c 	bl	8009cf8 <SD_WideBus_Enable>
 80098c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	639a      	str	r2, [r3, #56]	; 0x38
 80098ce:	e01a      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fa59 	bl	8009d8e <SD_WideBus_Disable>
 80098dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	639a      	str	r2, [r3, #56]	; 0x38
 80098ea:	e00c      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
 80098f8:	e005      	b.n	8009906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a26      	ldr	r2, [pc, #152]	; (80099ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009924:	e01f      	b.n	8009966 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681d      	ldr	r5, [r3, #0]
 800994c:	466c      	mov	r4, sp
 800994e:	f107 0314 	add.w	r3, r7, #20
 8009952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009960:	4628      	mov	r0, r5
 8009962:	f002 f8ab 	bl	800babc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800996e:	4618      	mov	r0, r3
 8009970:	f002 f976 	bl	800bc60 <SDMMC_CmdBlockLength>
 8009974:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00c      	beq.n	8009996 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8009982:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800999e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3728      	adds	r7, #40	; 0x28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdb0      	pop	{r4, r5, r7, pc}
 80099aa:	bf00      	nop
 80099ac:	004005ff 	.word	0x004005ff

080099b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099bc:	f107 030c 	add.w	r3, r7, #12
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f970 	bl	8009ca8 <SD_SendStatus>
 80099c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d005      	beq.n	80099dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	0a5b      	lsrs	r3, r3, #9
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099e6:	693b      	ldr	r3, [r7, #16]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099f0:	b5b0      	push	{r4, r5, r7, lr}
 80099f2:	b094      	sub	sp, #80	; 0x50
 80099f4:	af04      	add	r7, sp, #16
 80099f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80099f8:	2301      	movs	r3, #1
 80099fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f002 f8ae 	bl	800bb62 <SDIO_GetPowerState>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a10:	e0b8      	b.n	8009b84 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d02f      	beq.n	8009a7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f002 fad2 	bl	800bfc8 <SDMMC_CmdSendCID>
 8009a24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <SD_InitCard+0x40>
    {
      return errorstate;
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	e0a9      	b.n	8009b84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2100      	movs	r1, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f002 f8d5 	bl	800bbe6 <SDIO_GetResponse>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2104      	movs	r1, #4
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f002 f8cc 	bl	800bbe6 <SDIO_GetResponse>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2108      	movs	r1, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f002 f8c3 	bl	800bbe6 <SDIO_GetResponse>
 8009a60:	4602      	mov	r2, r0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	210c      	movs	r1, #12
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f002 f8ba 	bl	800bbe6 <SDIO_GetResponse>
 8009a72:	4602      	mov	r2, r0
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d00d      	beq.n	8009a9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f107 020e 	add.w	r2, r7, #14
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f002 fad8 	bl	800c042 <SDMMC_CmdSetRelAdd>
 8009a92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <SD_InitCard+0xae>
    {
      return errorstate;
 8009a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9c:	e072      	b.n	8009b84 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d036      	beq.n	8009b14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009aa6:	89fb      	ldrh	r3, [r7, #14]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab6:	041b      	lsls	r3, r3, #16
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f002 faa2 	bl	800c004 <SDMMC_CmdSendCSD>
 8009ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aca:	e05b      	b.n	8009b84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f002 f887 	bl	800bbe6 <SDIO_GetResponse>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f002 f87e 	bl	800bbe6 <SDIO_GetResponse>
 8009aea:	4602      	mov	r2, r0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2108      	movs	r1, #8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f002 f875 	bl	800bbe6 <SDIO_GetResponse>
 8009afc:	4602      	mov	r2, r0
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	210c      	movs	r1, #12
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f002 f86c 	bl	800bbe6 <SDIO_GetResponse>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2104      	movs	r1, #4
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f002 f863 	bl	800bbe6 <SDIO_GetResponse>
 8009b20:	4603      	mov	r3, r0
 8009b22:	0d1a      	lsrs	r2, r3, #20
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7ff fcd4 	bl	80094dc <HAL_SD_GetCardCSD>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b3e:	e021      	b.n	8009b84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b48:	041b      	lsls	r3, r3, #16
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	461c      	mov	r4, r3
 8009b4e:	4615      	mov	r5, r2
 8009b50:	4622      	mov	r2, r4
 8009b52:	462b      	mov	r3, r5
 8009b54:	4608      	mov	r0, r1
 8009b56:	f002 f94f 	bl	800bdf8 <SDMMC_CmdSelDesel>
 8009b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <SD_InitCard+0x176>
  {
    return errorstate;
 8009b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b64:	e00e      	b.n	8009b84 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681d      	ldr	r5, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	466c      	mov	r4, sp
 8009b6e:	f103 0210 	add.w	r2, r3, #16
 8009b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b78:	3304      	adds	r3, #4
 8009b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f001 ff9d 	bl	800babc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3740      	adds	r7, #64	; 0x40
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bdb0      	pop	{r4, r5, r7, pc}

08009b8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f002 f94a 	bl	800be3e <SDMMC_CmdGoIdleState>
 8009baa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	e072      	b.n	8009c9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f002 f95d 	bl	800be7a <SDMMC_CmdOperCond>
 8009bc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00d      	beq.n	8009be4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 f933 	bl	800be3e <SDMMC_CmdGoIdleState>
 8009bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <SD_PowerON+0x5e>
    {
      return errorstate;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	e05b      	b.n	8009c9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d137      	bne.n	8009c62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 f95d 	bl	800beb8 <SDMMC_CmdAppCommand>
 8009bfe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d02d      	beq.n	8009c62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c0a:	e047      	b.n	8009c9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f002 f950 	bl	800beb8 <SDMMC_CmdAppCommand>
 8009c18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <SD_PowerON+0x98>
    {
      return errorstate;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	e03b      	b.n	8009c9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	491e      	ldr	r1, [pc, #120]	; (8009ca4 <SD_PowerON+0x118>)
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 f966 	bl	800befc <SDMMC_CmdAppOperCommand>
 8009c30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c3c:	e02e      	b.n	8009c9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f001 ffce 	bl	800bbe6 <SDIO_GetResponse>
 8009c4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	0fdb      	lsrs	r3, r3, #31
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d101      	bne.n	8009c58 <SD_PowerON+0xcc>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e000      	b.n	8009c5a <SD_PowerON+0xce>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	613b      	str	r3, [r7, #16]

    count++;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d802      	bhi.n	8009c72 <SD_PowerON+0xe6>
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0cc      	beq.n	8009c0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d902      	bls.n	8009c82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c80:	e00c      	b.n	8009c9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	645a      	str	r2, [r3, #68]	; 0x44
 8009c92:	e002      	b.n	8009c9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	c1100000 	.word	0xc1100000

08009ca8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009cbc:	e018      	b.n	8009cf0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f002 f9da 	bl	800c084 <SDMMC_CmdSendStatus>
 8009cd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	e009      	b.n	8009cf0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f001 ff7f 	bl	800bbe6 <SDIO_GetResponse>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	2300      	movs	r3, #0
 8009d06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 ff69 	bl	800bbe6 <SDIO_GetResponse>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d1e:	d102      	bne.n	8009d26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d24:	e02f      	b.n	8009d86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f879 	bl	8009e24 <SD_FindSCR>
 8009d32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	e023      	b.n	8009d86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01c      	beq.n	8009d82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d50:	041b      	lsls	r3, r3, #16
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f002 f8af 	bl	800beb8 <SDMMC_CmdAppCommand>
 8009d5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	e00f      	b.n	8009d86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2102      	movs	r1, #2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f002 f8e8 	bl	800bf42 <SDMMC_CmdBusWidth>
 8009d72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	e003      	b.n	8009d86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e001      	b.n	8009d86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b086      	sub	sp, #24
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2100      	movs	r1, #0
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 ff1e 	bl	800bbe6 <SDIO_GetResponse>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009db4:	d102      	bne.n	8009dbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dba:	e02f      	b.n	8009e1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009dbc:	f107 030c 	add.w	r3, r7, #12
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f82e 	bl	8009e24 <SD_FindSCR>
 8009dc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	e023      	b.n	8009e1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01c      	beq.n	8009e18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f002 f864 	bl	800beb8 <SDMMC_CmdAppCommand>
 8009df0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d001      	beq.n	8009dfc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	e00f      	b.n	8009e1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2100      	movs	r1, #0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f002 f89d 	bl	800bf42 <SDMMC_CmdBusWidth>
 8009e08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	e003      	b.n	8009e1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	e001      	b.n	8009e1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3718      	adds	r7, #24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e24:	b590      	push	{r4, r7, lr}
 8009e26:	b08f      	sub	sp, #60	; 0x3c
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e2e:	f7f9 fe01 	bl	8003a34 <HAL_GetTick>
 8009e32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60bb      	str	r3, [r7, #8]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2108      	movs	r1, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 ff08 	bl	800bc60 <SDMMC_CmdBlockLength>
 8009e50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	e0b2      	b.n	8009fc2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e64:	041b      	lsls	r3, r3, #16
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f002 f825 	bl	800beb8 <SDMMC_CmdAppCommand>
 8009e6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	e0a3      	b.n	8009fc2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009e80:	2308      	movs	r3, #8
 8009e82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009e84:	2330      	movs	r3, #48	; 0x30
 8009e86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009e90:	2301      	movs	r3, #1
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f107 0210 	add.w	r2, r7, #16
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 feb3 	bl	800bc0a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f002 f86c 	bl	800bf86 <SDMMC_CmdSendSCR>
 8009eae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d02a      	beq.n	8009f0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	e083      	b.n	8009fc2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00f      	beq.n	8009ee8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6819      	ldr	r1, [r3, #0]
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	f107 0208 	add.w	r2, r7, #8
 8009ed4:	18d4      	adds	r4, r2, r3
 8009ed6:	4608      	mov	r0, r1
 8009ed8:	f001 fe1a 	bl	800bb10 <SDIO_ReadFIFO>
 8009edc:	4603      	mov	r3, r0
 8009ede:	6023      	str	r3, [r4, #0]
      index++;
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee6:	e006      	b.n	8009ef6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d012      	beq.n	8009f1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ef6:	f7f9 fd9d 	bl	8003a34 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d102      	bne.n	8009f0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f0a:	e05a      	b.n	8009fc2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f12:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0cf      	beq.n	8009eba <SD_FindSCR+0x96>
 8009f1a:	e000      	b.n	8009f1e <SD_FindSCR+0xfa>
      break;
 8009f1c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2208      	movs	r2, #8
 8009f32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f34:	2308      	movs	r3, #8
 8009f36:	e044      	b.n	8009fc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d005      	beq.n	8009f52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e037      	b.n	8009fc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d005      	beq.n	8009f6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2220      	movs	r2, #32
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009f68:	2320      	movs	r3, #32
 8009f6a:	e02a      	b.n	8009fc2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f240 523a 	movw	r2, #1338	; 0x53a
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	061a      	lsls	r2, r3, #24
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	0a1b      	lsrs	r3, r3, #8
 8009f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	0e1b      	lsrs	r3, r3, #24
 8009f92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	601a      	str	r2, [r3, #0]
    scr++;
 8009f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9a:	3304      	adds	r3, #4
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	061a      	lsls	r2, r3, #24
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	021b      	lsls	r3, r3, #8
 8009fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009faa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009fb4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	0e1b      	lsrs	r3, r3, #24
 8009fba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	373c      	adds	r7, #60	; 0x3c
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd90      	pop	{r4, r7, pc}

08009fca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e076      	b.n	800a0ca <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d108      	bne.n	8009ff6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fec:	d009      	beq.n	800a002 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	61da      	str	r2, [r3, #28]
 8009ff4:	e005      	b.n	800a002 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7f9 f9e9 	bl	80033f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a038:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a04a:	431a      	orrs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	431a      	orrs	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a086:	ea42 0103 	orr.w	r1, r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	0c1a      	lsrs	r2, r3, #16
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f002 0204 	and.w	r2, r2, #4
 800a0a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b088      	sub	sp, #32
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	603b      	str	r3, [r7, #0]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d101      	bne.n	800a0f4 <HAL_SPI_Transmit+0x22>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	e12d      	b.n	800a350 <HAL_SPI_Transmit+0x27e>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0fc:	f7f9 fc9a 	bl	8003a34 <HAL_GetTick>
 800a100:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d002      	beq.n	800a118 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a112:	2302      	movs	r3, #2
 800a114:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a116:	e116      	b.n	800a346 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <HAL_SPI_Transmit+0x52>
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a128:	e10d      	b.n	800a346 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2203      	movs	r2, #3
 800a12e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	88fa      	ldrh	r2, [r7, #6]
 800a142:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	88fa      	ldrh	r2, [r7, #6]
 800a148:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a170:	d10f      	bne.n	800a192 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a180:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a190:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19c:	2b40      	cmp	r3, #64	; 0x40
 800a19e:	d007      	beq.n	800a1b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1b8:	d14f      	bne.n	800a25a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <HAL_SPI_Transmit+0xf6>
 800a1c2:	8afb      	ldrh	r3, [r7, #22]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d142      	bne.n	800a24e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1cc:	881a      	ldrh	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d8:	1c9a      	adds	r2, r3, #2
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a1ec:	e02f      	b.n	800a24e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d112      	bne.n	800a222 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a200:	881a      	ldrh	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	1c9a      	adds	r2, r3, #2
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a216:	b29b      	uxth	r3, r3
 800a218:	3b01      	subs	r3, #1
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a220:	e015      	b.n	800a24e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a222:	f7f9 fc07 	bl	8003a34 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d803      	bhi.n	800a23a <HAL_SPI_Transmit+0x168>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a238:	d102      	bne.n	800a240 <HAL_SPI_Transmit+0x16e>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d106      	bne.n	800a24e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a24c:	e07b      	b.n	800a346 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a252:	b29b      	uxth	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1ca      	bne.n	800a1ee <HAL_SPI_Transmit+0x11c>
 800a258:	e050      	b.n	800a2fc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <HAL_SPI_Transmit+0x196>
 800a262:	8afb      	ldrh	r3, [r7, #22]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d144      	bne.n	800a2f2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	7812      	ldrb	r2, [r2, #0]
 800a274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a28e:	e030      	b.n	800a2f2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 0302 	and.w	r3, r3, #2
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d113      	bne.n	800a2c6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	7812      	ldrb	r2, [r2, #0]
 800a2aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	86da      	strh	r2, [r3, #54]	; 0x36
 800a2c4:	e015      	b.n	800a2f2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2c6:	f7f9 fbb5 	bl	8003a34 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d803      	bhi.n	800a2de <HAL_SPI_Transmit+0x20c>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2dc:	d102      	bne.n	800a2e4 <HAL_SPI_Transmit+0x212>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a2f0:	e029      	b.n	800a346 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1c9      	bne.n	800a290 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f8b1 	bl	800a468 <SPI_EndRxTxTransaction>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2220      	movs	r2, #32
 800a310:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a31a:	2300      	movs	r3, #0
 800a31c:	613b      	str	r3, [r7, #16]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e003      	b.n	800a346 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a34e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	4613      	mov	r3, r2
 800a366:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a368:	f7f9 fb64 	bl	8003a34 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4413      	add	r3, r2
 800a376:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a378:	f7f9 fb5c 	bl	8003a34 <HAL_GetTick>
 800a37c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a37e:	4b39      	ldr	r3, [pc, #228]	; (800a464 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	015b      	lsls	r3, r3, #5
 800a384:	0d1b      	lsrs	r3, r3, #20
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	fb02 f303 	mul.w	r3, r2, r3
 800a38c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a38e:	e054      	b.n	800a43a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	d050      	beq.n	800a43a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a398:	f7f9 fb4c 	bl	8003a34 <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d902      	bls.n	800a3ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d13d      	bne.n	800a42a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a3bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3c6:	d111      	bne.n	800a3ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d0:	d004      	beq.n	800a3dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3da:	d107      	bne.n	800a3ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f4:	d10f      	bne.n	800a416 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e017      	b.n	800a45a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	3b01      	subs	r3, #1
 800a438:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4013      	ands	r3, r2
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	429a      	cmp	r2, r3
 800a448:	bf0c      	ite	eq
 800a44a:	2301      	moveq	r3, #1
 800a44c:	2300      	movne	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	461a      	mov	r2, r3
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	429a      	cmp	r2, r3
 800a456:	d19b      	bne.n	800a390 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3720      	adds	r7, #32
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000010 	.word	0x20000010

0800a468 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af02      	add	r7, sp, #8
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2200      	movs	r2, #0
 800a47c:	2180      	movs	r1, #128	; 0x80
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff ff6a 	bl	800a358 <SPI_WaitFlagStateUntilTimeout>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a48e:	f043 0220 	orr.w	r2, r3, #32
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e000      	b.n	800a49c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e041      	b.n	800a53a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d106      	bne.n	800a4d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7f9 f842 	bl	8003554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	f000 fb42 	bl	800ab6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b01      	cmp	r3, #1
 800a556:	d001      	beq.n	800a55c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e03c      	b.n	800a5d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a1d      	ldr	r2, [pc, #116]	; (800a5e0 <HAL_TIM_Base_Start+0x9c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d018      	beq.n	800a5a0 <HAL_TIM_Base_Start+0x5c>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a1c      	ldr	r2, [pc, #112]	; (800a5e4 <HAL_TIM_Base_Start+0xa0>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d013      	beq.n	800a5a0 <HAL_TIM_Base_Start+0x5c>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a580:	d00e      	beq.n	800a5a0 <HAL_TIM_Base_Start+0x5c>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a18      	ldr	r2, [pc, #96]	; (800a5e8 <HAL_TIM_Base_Start+0xa4>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d009      	beq.n	800a5a0 <HAL_TIM_Base_Start+0x5c>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a16      	ldr	r2, [pc, #88]	; (800a5ec <HAL_TIM_Base_Start+0xa8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d004      	beq.n	800a5a0 <HAL_TIM_Base_Start+0x5c>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a15      	ldr	r2, [pc, #84]	; (800a5f0 <HAL_TIM_Base_Start+0xac>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d111      	bne.n	800a5c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b06      	cmp	r3, #6
 800a5b0:	d010      	beq.n	800a5d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f042 0201 	orr.w	r2, r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c2:	e007      	b.n	800a5d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr
 800a5e0:	40012c00 	.word	0x40012c00
 800a5e4:	40013400 	.word	0x40013400
 800a5e8:	40000400 	.word	0x40000400
 800a5ec:	40000800 	.word	0x40000800
 800a5f0:	40000c00 	.word	0x40000c00

0800a5f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6a1a      	ldr	r2, [r3, #32]
 800a602:	f241 1311 	movw	r3, #4369	; 0x1111
 800a606:	4013      	ands	r3, r2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10f      	bne.n	800a62c <HAL_TIM_Base_Stop+0x38>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6a1a      	ldr	r2, [r3, #32]
 800a612:	f240 4344 	movw	r3, #1092	; 0x444
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d107      	bne.n	800a62c <HAL_TIM_Base_Stop+0x38>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0201 	bic.w	r2, r2, #1
 800a62a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bc80      	pop	{r7}
 800a63e:	4770      	bx	lr

0800a640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	d001      	beq.n	800a658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e044      	b.n	800a6e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f042 0201 	orr.w	r2, r2, #1
 800a66e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a1d      	ldr	r2, [pc, #116]	; (800a6ec <HAL_TIM_Base_Start_IT+0xac>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d018      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x6c>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a1c      	ldr	r2, [pc, #112]	; (800a6f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d013      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x6c>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a68c:	d00e      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x6c>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x6c>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a16      	ldr	r2, [pc, #88]	; (800a6f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d004      	beq.n	800a6ac <HAL_TIM_Base_Start_IT+0x6c>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a15      	ldr	r2, [pc, #84]	; (800a6fc <HAL_TIM_Base_Start_IT+0xbc>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d111      	bne.n	800a6d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b06      	cmp	r3, #6
 800a6bc:	d010      	beq.n	800a6e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f042 0201 	orr.w	r2, r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ce:	e007      	b.n	800a6e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0201 	orr.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bc80      	pop	{r7}
 800a6ea:	4770      	bx	lr
 800a6ec:	40012c00 	.word	0x40012c00
 800a6f0:	40013400 	.word	0x40013400
 800a6f4:	40000400 	.word	0x40000400
 800a6f8:	40000800 	.word	0x40000800
 800a6fc:	40000c00 	.word	0x40000c00

0800a700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b02      	cmp	r3, #2
 800a714:	d122      	bne.n	800a75c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	f003 0302 	and.w	r3, r3, #2
 800a720:	2b02      	cmp	r3, #2
 800a722:	d11b      	bne.n	800a75c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f06f 0202 	mvn.w	r2, #2
 800a72c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f9f6 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a748:	e005      	b.n	800a756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f9e9 	bl	800ab22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f9f8 	bl	800ab46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	2b04      	cmp	r3, #4
 800a768:	d122      	bne.n	800a7b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b04      	cmp	r3, #4
 800a776:	d11b      	bne.n	800a7b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f06f 0204 	mvn.w	r2, #4
 800a780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2202      	movs	r2, #2
 800a786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f9cc 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a79c:	e005      	b.n	800a7aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f9bf 	bl	800ab22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f9ce 	bl	800ab46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b08      	cmp	r3, #8
 800a7bc:	d122      	bne.n	800a804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f003 0308 	and.w	r3, r3, #8
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d11b      	bne.n	800a804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f06f 0208 	mvn.w	r2, #8
 800a7d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2204      	movs	r2, #4
 800a7da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f003 0303 	and.w	r3, r3, #3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f9a2 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a7f0:	e005      	b.n	800a7fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f995 	bl	800ab22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f9a4 	bl	800ab46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	f003 0310 	and.w	r3, r3, #16
 800a80e:	2b10      	cmp	r3, #16
 800a810:	d122      	bne.n	800a858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f003 0310 	and.w	r3, r3, #16
 800a81c:	2b10      	cmp	r3, #16
 800a81e:	d11b      	bne.n	800a858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f06f 0210 	mvn.w	r2, #16
 800a828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2208      	movs	r2, #8
 800a82e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f978 	bl	800ab34 <HAL_TIM_IC_CaptureCallback>
 800a844:	e005      	b.n	800a852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f96b 	bl	800ab22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f97a 	bl	800ab46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b01      	cmp	r3, #1
 800a864:	d10e      	bne.n	800a884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b01      	cmp	r3, #1
 800a872:	d107      	bne.n	800a884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f06f 0201 	mvn.w	r2, #1
 800a87c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7f7 fc16 	bl	80020b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a88e:	2b80      	cmp	r3, #128	; 0x80
 800a890:	d10e      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a89c:	2b80      	cmp	r3, #128	; 0x80
 800a89e:	d107      	bne.n	800a8b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fb75 	bl	800af9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d10e      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c8:	2b40      	cmp	r3, #64	; 0x40
 800a8ca:	d107      	bne.n	800a8dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f93e 	bl	800ab58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	f003 0320 	and.w	r3, r3, #32
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d10e      	bne.n	800a908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	d107      	bne.n	800a908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f06f 0220 	mvn.w	r2, #32
 800a900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fb40 	bl	800af88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a924:	2b01      	cmp	r3, #1
 800a926:	d101      	bne.n	800a92c <HAL_TIM_ConfigClockSource+0x1c>
 800a928:	2302      	movs	r3, #2
 800a92a:	e0b4      	b.n	800aa96 <HAL_TIM_ConfigClockSource+0x186>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a94a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a964:	d03e      	beq.n	800a9e4 <HAL_TIM_ConfigClockSource+0xd4>
 800a966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a96a:	f200 8087 	bhi.w	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a972:	f000 8086 	beq.w	800aa82 <HAL_TIM_ConfigClockSource+0x172>
 800a976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a97a:	d87f      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a97c:	2b70      	cmp	r3, #112	; 0x70
 800a97e:	d01a      	beq.n	800a9b6 <HAL_TIM_ConfigClockSource+0xa6>
 800a980:	2b70      	cmp	r3, #112	; 0x70
 800a982:	d87b      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a984:	2b60      	cmp	r3, #96	; 0x60
 800a986:	d050      	beq.n	800aa2a <HAL_TIM_ConfigClockSource+0x11a>
 800a988:	2b60      	cmp	r3, #96	; 0x60
 800a98a:	d877      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a98c:	2b50      	cmp	r3, #80	; 0x50
 800a98e:	d03c      	beq.n	800aa0a <HAL_TIM_ConfigClockSource+0xfa>
 800a990:	2b50      	cmp	r3, #80	; 0x50
 800a992:	d873      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a994:	2b40      	cmp	r3, #64	; 0x40
 800a996:	d058      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0x13a>
 800a998:	2b40      	cmp	r3, #64	; 0x40
 800a99a:	d86f      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a99c:	2b30      	cmp	r3, #48	; 0x30
 800a99e:	d064      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x15a>
 800a9a0:	2b30      	cmp	r3, #48	; 0x30
 800a9a2:	d86b      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d060      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x15a>
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d867      	bhi.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d05c      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x15a>
 800a9b0:	2b10      	cmp	r3, #16
 800a9b2:	d05a      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x15a>
 800a9b4:	e062      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6818      	ldr	r0, [r3, #0]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	6899      	ldr	r1, [r3, #8]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	f000 fa53 	bl	800ae70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	609a      	str	r2, [r3, #8]
      break;
 800a9e2:	e04f      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	6899      	ldr	r1, [r3, #8]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f000 fa3c 	bl	800ae70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa06:	609a      	str	r2, [r3, #8]
      break;
 800aa08:	e03c      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	6859      	ldr	r1, [r3, #4]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	461a      	mov	r2, r3
 800aa18:	f000 f9b3 	bl	800ad82 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2150      	movs	r1, #80	; 0x50
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fa0a 	bl	800ae3c <TIM_ITRx_SetConfig>
      break;
 800aa28:	e02c      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6859      	ldr	r1, [r3, #4]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f000 f9d1 	bl	800adde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2160      	movs	r1, #96	; 0x60
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 f9fa 	bl	800ae3c <TIM_ITRx_SetConfig>
      break;
 800aa48:	e01c      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6818      	ldr	r0, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6859      	ldr	r1, [r3, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f000 f993 	bl	800ad82 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2140      	movs	r1, #64	; 0x40
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 f9ea 	bl	800ae3c <TIM_ITRx_SetConfig>
      break;
 800aa68:	e00c      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4619      	mov	r1, r3
 800aa74:	4610      	mov	r0, r2
 800aa76:	f000 f9e1 	bl	800ae3c <TIM_ITRx_SetConfig>
      break;
 800aa7a:	e003      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa80:	e000      	b.n	800aa84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d101      	bne.n	800aab6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800aab2:	2302      	movs	r3, #2
 800aab4:	e031      	b.n	800ab1a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2202      	movs	r2, #2
 800aac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f8c9 	bl	800ac60 <TIM_SlaveTimer_SetConfig>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d009      	beq.n	800aae8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e018      	b.n	800ab1a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaf6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68da      	ldr	r2, [r3, #12]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab06:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab2a:	bf00      	nop
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bc80      	pop	{r7}
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bc80      	pop	{r7}
 800ab44:	4770      	bx	lr

0800ab46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr

0800ab58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bc80      	pop	{r7}
 800ab68:	4770      	bx	lr
	...

0800ab6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a33      	ldr	r2, [pc, #204]	; (800ac4c <TIM_Base_SetConfig+0xe0>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d013      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a32      	ldr	r2, [pc, #200]	; (800ac50 <TIM_Base_SetConfig+0xe4>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00f      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab92:	d00b      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a2f      	ldr	r2, [pc, #188]	; (800ac54 <TIM_Base_SetConfig+0xe8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d007      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a2e      	ldr	r2, [pc, #184]	; (800ac58 <TIM_Base_SetConfig+0xec>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d003      	beq.n	800abac <TIM_Base_SetConfig+0x40>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a2d      	ldr	r2, [pc, #180]	; (800ac5c <TIM_Base_SetConfig+0xf0>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d108      	bne.n	800abbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a22      	ldr	r2, [pc, #136]	; (800ac4c <TIM_Base_SetConfig+0xe0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d013      	beq.n	800abee <TIM_Base_SetConfig+0x82>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a21      	ldr	r2, [pc, #132]	; (800ac50 <TIM_Base_SetConfig+0xe4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d00f      	beq.n	800abee <TIM_Base_SetConfig+0x82>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd4:	d00b      	beq.n	800abee <TIM_Base_SetConfig+0x82>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a1e      	ldr	r2, [pc, #120]	; (800ac54 <TIM_Base_SetConfig+0xe8>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d007      	beq.n	800abee <TIM_Base_SetConfig+0x82>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a1d      	ldr	r2, [pc, #116]	; (800ac58 <TIM_Base_SetConfig+0xec>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d003      	beq.n	800abee <TIM_Base_SetConfig+0x82>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a1c      	ldr	r2, [pc, #112]	; (800ac5c <TIM_Base_SetConfig+0xf0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d108      	bne.n	800ac00 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a09      	ldr	r2, [pc, #36]	; (800ac4c <TIM_Base_SetConfig+0xe0>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d003      	beq.n	800ac34 <TIM_Base_SetConfig+0xc8>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a08      	ldr	r2, [pc, #32]	; (800ac50 <TIM_Base_SetConfig+0xe4>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d103      	bne.n	800ac3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	615a      	str	r2, [r3, #20]
}
 800ac42:	bf00      	nop
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bc80      	pop	{r7}
 800ac4a:	4770      	bx	lr
 800ac4c:	40012c00 	.word	0x40012c00
 800ac50:	40013400 	.word	0x40013400
 800ac54:	40000400 	.word	0x40000400
 800ac58:	40000800 	.word	0x40000800
 800ac5c:	40000c00 	.word	0x40000c00

0800ac60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f023 0307 	bic.w	r3, r3, #7
 800ac8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	2b70      	cmp	r3, #112	; 0x70
 800aca8:	d01a      	beq.n	800ace0 <TIM_SlaveTimer_SetConfig+0x80>
 800acaa:	2b70      	cmp	r3, #112	; 0x70
 800acac:	d860      	bhi.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
 800acae:	2b60      	cmp	r3, #96	; 0x60
 800acb0:	d054      	beq.n	800ad5c <TIM_SlaveTimer_SetConfig+0xfc>
 800acb2:	2b60      	cmp	r3, #96	; 0x60
 800acb4:	d85c      	bhi.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
 800acb6:	2b50      	cmp	r3, #80	; 0x50
 800acb8:	d046      	beq.n	800ad48 <TIM_SlaveTimer_SetConfig+0xe8>
 800acba:	2b50      	cmp	r3, #80	; 0x50
 800acbc:	d858      	bhi.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
 800acbe:	2b40      	cmp	r3, #64	; 0x40
 800acc0:	d019      	beq.n	800acf6 <TIM_SlaveTimer_SetConfig+0x96>
 800acc2:	2b40      	cmp	r3, #64	; 0x40
 800acc4:	d854      	bhi.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
 800acc6:	2b30      	cmp	r3, #48	; 0x30
 800acc8:	d055      	beq.n	800ad76 <TIM_SlaveTimer_SetConfig+0x116>
 800acca:	2b30      	cmp	r3, #48	; 0x30
 800accc:	d850      	bhi.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d051      	beq.n	800ad76 <TIM_SlaveTimer_SetConfig+0x116>
 800acd2:	2b20      	cmp	r3, #32
 800acd4:	d84c      	bhi.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d04d      	beq.n	800ad76 <TIM_SlaveTimer_SetConfig+0x116>
 800acda:	2b10      	cmp	r3, #16
 800acdc:	d04b      	beq.n	800ad76 <TIM_SlaveTimer_SetConfig+0x116>
 800acde:	e047      	b.n	800ad70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	68d9      	ldr	r1, [r3, #12]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	f000 f8be 	bl	800ae70 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800acf4:	e040      	b.n	800ad78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d101      	bne.n	800ad02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e03b      	b.n	800ad7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6a1a      	ldr	r2, [r3, #32]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 0201 	bic.w	r2, r2, #1
 800ad18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	011b      	lsls	r3, r3, #4
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	621a      	str	r2, [r3, #32]
      break;
 800ad46:	e017      	b.n	800ad78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	6899      	ldr	r1, [r3, #8]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	461a      	mov	r2, r3
 800ad56:	f000 f814 	bl	800ad82 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800ad5a:	e00d      	b.n	800ad78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	6899      	ldr	r1, [r3, #8]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	f000 f838 	bl	800adde <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800ad6e:	e003      	b.n	800ad78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	75fb      	strb	r3, [r7, #23]
      break;
 800ad74:	e000      	b.n	800ad78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800ad76:	bf00      	nop
  }

  return status;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad82:	b480      	push	{r7}
 800ad84:	b087      	sub	sp, #28
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	60b9      	str	r1, [r7, #8]
 800ad8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	f023 0201 	bic.w	r2, r3, #1
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f023 030a 	bic.w	r3, r3, #10
 800adbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	621a      	str	r2, [r3, #32]
}
 800add4:	bf00      	nop
 800add6:	371c      	adds	r7, #28
 800add8:	46bd      	mov	sp, r7
 800adda:	bc80      	pop	{r7}
 800addc:	4770      	bx	lr

0800adde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adde:	b480      	push	{r7}
 800ade0:	b087      	sub	sp, #28
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	f023 0210 	bic.w	r2, r3, #16
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	031b      	lsls	r3, r3, #12
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	621a      	str	r2, [r3, #32]
}
 800ae32:	bf00      	nop
 800ae34:	371c      	adds	r7, #28
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bc80      	pop	{r7}
 800ae3a:	4770      	bx	lr

0800ae3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	f043 0307 	orr.w	r3, r3, #7
 800ae5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	609a      	str	r2, [r3, #8]
}
 800ae66:	bf00      	nop
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bc80      	pop	{r7}
 800ae6e:	4770      	bx	lr

0800ae70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	021a      	lsls	r2, r3, #8
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	bf00      	nop
 800aea6:	371c      	adds	r7, #28
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr
	...

0800aeb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d101      	bne.n	800aec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aec4:	2302      	movs	r3, #2
 800aec6:	e050      	b.n	800af6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2202      	movs	r2, #2
 800aed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d018      	beq.n	800af3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a19      	ldr	r2, [pc, #100]	; (800af78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d013      	beq.n	800af3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1e:	d00e      	beq.n	800af3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a15      	ldr	r2, [pc, #84]	; (800af7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d009      	beq.n	800af3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a14      	ldr	r2, [pc, #80]	; (800af80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d004      	beq.n	800af3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a12      	ldr	r2, [pc, #72]	; (800af84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d10c      	bne.n	800af58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr
 800af74:	40012c00 	.word	0x40012c00
 800af78:	40013400 	.word	0x40013400
 800af7c:	40000400 	.word	0x40000400
 800af80:	40000800 	.word	0x40000800
 800af84:	40000c00 	.word	0x40000c00

0800af88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	bc80      	pop	{r7}
 800af98:	4770      	bx	lr

0800af9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa2:	bf00      	nop
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bc80      	pop	{r7}
 800afaa:	4770      	bx	lr

0800afac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e042      	b.n	800b044 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7f8 fb12 	bl	80035fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2224      	movs	r2, #36	; 0x24
 800afdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fcd5 	bl	800b9a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	691a      	ldr	r2, [r3, #16]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	695a      	ldr	r2, [r3, #20]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2220      	movs	r2, #32
 800b038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b20      	cmp	r3, #32
 800b064:	d112      	bne.n	800b08c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <HAL_UART_Receive_IT+0x26>
 800b06c:	88fb      	ldrh	r3, [r7, #6]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	e00b      	b.n	800b08e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b07c:	88fb      	ldrh	r3, [r7, #6]
 800b07e:	461a      	mov	r2, r3
 800b080:	68b9      	ldr	r1, [r7, #8]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 fab7 	bl	800b5f6 <UART_Start_Receive_IT>
 800b088:	4603      	mov	r3, r0
 800b08a:	e000      	b.n	800b08e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b08c:	2302      	movs	r3, #2
  }
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b0ba      	sub	sp, #232	; 0xe8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ce:	f003 030f 	and.w	r3, r3, #15
 800b0d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b0d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10f      	bne.n	800b0fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d009      	beq.n	800b0fe <HAL_UART_IRQHandler+0x66>
 800b0ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ee:	f003 0320 	and.w	r3, r3, #32
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fb93 	bl	800b822 <UART_Receive_IT>
      return;
 800b0fc:	e25b      	b.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 80de 	beq.w	800b2c4 <HAL_UART_IRQHandler+0x22c>
 800b108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b118:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f000 80d1 	beq.w	800b2c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00b      	beq.n	800b146 <HAL_UART_IRQHandler+0xae>
 800b12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b136:	2b00      	cmp	r3, #0
 800b138:	d005      	beq.n	800b146 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b13e:	f043 0201 	orr.w	r2, r3, #1
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14a:	f003 0304 	and.w	r3, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00b      	beq.n	800b16a <HAL_UART_IRQHandler+0xd2>
 800b152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d005      	beq.n	800b16a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b162:	f043 0202 	orr.w	r2, r3, #2
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00b      	beq.n	800b18e <HAL_UART_IRQHandler+0xf6>
 800b176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d005      	beq.n	800b18e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b186:	f043 0204 	orr.w	r2, r3, #4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b192:	f003 0308 	and.w	r3, r3, #8
 800b196:	2b00      	cmp	r3, #0
 800b198:	d011      	beq.n	800b1be <HAL_UART_IRQHandler+0x126>
 800b19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d105      	bne.n	800b1b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	f043 0208 	orr.w	r2, r3, #8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 81f2 	beq.w	800b5ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1cc:	f003 0320 	and.w	r3, r3, #32
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d008      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x14e>
 800b1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d8:	f003 0320 	and.w	r3, r3, #32
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fb1e 	bl	800b822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bf14      	ite	ne
 800b1f4:	2301      	movne	r3, #1
 800b1f6:	2300      	moveq	r3, #0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b202:	f003 0308 	and.w	r3, r3, #8
 800b206:	2b00      	cmp	r3, #0
 800b208:	d103      	bne.n	800b212 <HAL_UART_IRQHandler+0x17a>
 800b20a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d04f      	beq.n	800b2b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa28 	bl	800b668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b222:	2b00      	cmp	r3, #0
 800b224:	d041      	beq.n	800b2aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3314      	adds	r3, #20
 800b22c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b234:	e853 3f00 	ldrex	r3, [r3]
 800b238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3314      	adds	r3, #20
 800b24e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b252:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b25e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b26a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1d9      	bne.n	800b226 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b276:	2b00      	cmp	r3, #0
 800b278:	d013      	beq.n	800b2a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27e:	4a7e      	ldr	r2, [pc, #504]	; (800b478 <HAL_UART_IRQHandler+0x3e0>)
 800b280:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b286:	4618      	mov	r0, r3
 800b288:	f7f9 fb58 	bl	800493c <HAL_DMA_Abort_IT>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d016      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b29c:	4610      	mov	r0, r2
 800b29e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a0:	e00e      	b.n	800b2c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f993 	bl	800b5ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a8:	e00a      	b.n	800b2c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f98f 	bl	800b5ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2b0:	e006      	b.n	800b2c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f98b 	bl	800b5ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b2be:	e175      	b.n	800b5ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c0:	bf00      	nop
    return;
 800b2c2:	e173      	b.n	800b5ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	f040 814f 	bne.w	800b56c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d2:	f003 0310 	and.w	r3, r3, #16
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 8148 	beq.w	800b56c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e0:	f003 0310 	and.w	r3, r3, #16
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 8141 	beq.w	800b56c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	60bb      	str	r3, [r7, #8]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	60bb      	str	r3, [r7, #8]
 800b2fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 80b6 	beq.w	800b47c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b31c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 8145 	beq.w	800b5b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b32a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b32e:	429a      	cmp	r2, r3
 800b330:	f080 813e 	bcs.w	800b5b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b33a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	2b20      	cmp	r3, #32
 800b344:	f000 8088 	beq.w	800b458 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	330c      	adds	r3, #12
 800b34e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b35e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b362:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b366:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	330c      	adds	r3, #12
 800b370:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b374:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b380:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b38c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1d9      	bne.n	800b348 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3314      	adds	r3, #20
 800b39a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b39e:	e853 3f00 	ldrex	r3, [r3]
 800b3a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b3a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3a6:	f023 0301 	bic.w	r3, r3, #1
 800b3aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3314      	adds	r3, #20
 800b3b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b3b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b3bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b3c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b3ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e1      	bne.n	800b394 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3da:	e853 3f00 	ldrex	r3, [r3]
 800b3de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3314      	adds	r3, #20
 800b3f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3fc:	e841 2300 	strex	r3, r2, [r1]
 800b400:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e3      	bne.n	800b3d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b428:	f023 0310 	bic.w	r3, r3, #16
 800b42c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	330c      	adds	r3, #12
 800b436:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b43a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b43c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e3      	bne.n	800b416 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b452:	4618      	mov	r0, r3
 800b454:	f7f9 fa36 	bl	80048c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b466:	b29b      	uxth	r3, r3
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f8b6 	bl	800b5e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b474:	e09c      	b.n	800b5b0 <HAL_UART_IRQHandler+0x518>
 800b476:	bf00      	nop
 800b478:	0800b72d 	.word	0x0800b72d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b484:	b29b      	uxth	r3, r3
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b490:	b29b      	uxth	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 808e 	beq.w	800b5b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8089 	beq.w	800b5b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	330c      	adds	r3, #12
 800b4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	330c      	adds	r3, #12
 800b4c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4c6:	647a      	str	r2, [r7, #68]	; 0x44
 800b4c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e3      	bne.n	800b4a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3314      	adds	r3, #20
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3314      	adds	r3, #20
 800b4fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4fe:	633a      	str	r2, [r7, #48]	; 0x30
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e3      	bne.n	800b4da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f023 0310 	bic.w	r3, r3, #16
 800b536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	330c      	adds	r3, #12
 800b540:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b544:	61fa      	str	r2, [r7, #28]
 800b546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	69b9      	ldr	r1, [r7, #24]
 800b54a:	69fa      	ldr	r2, [r7, #28]
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	617b      	str	r3, [r7, #20]
   return(result);
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e3      	bne.n	800b520 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b55e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f83b 	bl	800b5e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b56a:	e023      	b.n	800b5b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b574:	2b00      	cmp	r3, #0
 800b576:	d009      	beq.n	800b58c <HAL_UART_IRQHandler+0x4f4>
 800b578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f8e5 	bl	800b754 <UART_Transmit_IT>
    return;
 800b58a:	e014      	b.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00e      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
 800b598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d008      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f924 	bl	800b7f2 <UART_EndTransmit_IT>
    return;
 800b5aa:	e004      	b.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
    return;
 800b5ac:	bf00      	nop
 800b5ae:	e002      	b.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b5b0:	bf00      	nop
 800b5b2:	e000      	b.n	800b5b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b5b4:	bf00      	nop
  }
}
 800b5b6:	37e8      	adds	r7, #232	; 0xe8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bc80      	pop	{r7}
 800b5cc:	4770      	bx	lr

0800b5ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b083      	sub	sp, #12
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bc80      	pop	{r7}
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr

0800b5f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b085      	sub	sp, #20
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	4613      	mov	r3, r2
 800b602:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	88fa      	ldrh	r2, [r7, #6]
 800b60e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	88fa      	ldrh	r2, [r7, #6]
 800b614:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2222      	movs	r2, #34	; 0x22
 800b620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d007      	beq.n	800b63c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b63a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	695a      	ldr	r2, [r3, #20]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f042 0201 	orr.w	r2, r2, #1
 800b64a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f042 0220 	orr.w	r2, r2, #32
 800b65a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	bc80      	pop	{r7}
 800b666:	4770      	bx	lr

0800b668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b668:	b480      	push	{r7}
 800b66a:	b095      	sub	sp, #84	; 0x54
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	330c      	adds	r3, #12
 800b676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67a:	e853 3f00 	ldrex	r3, [r3]
 800b67e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b686:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	330c      	adds	r3, #12
 800b68e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b690:	643a      	str	r2, [r7, #64]	; 0x40
 800b692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e5      	bne.n	800b670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3314      	adds	r3, #20
 800b6aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	e853 3f00 	ldrex	r3, [r3]
 800b6b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	f023 0301 	bic.w	r3, r3, #1
 800b6ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3314      	adds	r3, #20
 800b6c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6cc:	e841 2300 	strex	r3, r2, [r1]
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1e5      	bne.n	800b6a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d119      	bne.n	800b714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	e853 3f00 	ldrex	r3, [r3]
 800b6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	f023 0310 	bic.w	r3, r3, #16
 800b6f6:	647b      	str	r3, [r7, #68]	; 0x44
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	330c      	adds	r3, #12
 800b6fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b700:	61ba      	str	r2, [r7, #24]
 800b702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b704:	6979      	ldr	r1, [r7, #20]
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	e841 2300 	strex	r3, r2, [r1]
 800b70c:	613b      	str	r3, [r7, #16]
   return(result);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e5      	bne.n	800b6e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2220      	movs	r2, #32
 800b718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b722:	bf00      	nop
 800b724:	3754      	adds	r7, #84	; 0x54
 800b726:	46bd      	mov	sp, r7
 800b728:	bc80      	pop	{r7}
 800b72a:	4770      	bx	lr

0800b72c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff ff41 	bl	800b5ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b21      	cmp	r3, #33	; 0x21
 800b766:	d13e      	bne.n	800b7e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b770:	d114      	bne.n	800b79c <UART_Transmit_IT+0x48>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d110      	bne.n	800b79c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	461a      	mov	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b78e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a1b      	ldr	r3, [r3, #32]
 800b794:	1c9a      	adds	r2, r3, #2
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	621a      	str	r2, [r3, #32]
 800b79a:	e008      	b.n	800b7ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	1c59      	adds	r1, r3, #1
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	6211      	str	r1, [r2, #32]
 800b7a6:	781a      	ldrb	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10f      	bne.n	800b7e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e000      	b.n	800b7e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b7e6:	2302      	movs	r3, #2
  }
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bc80      	pop	{r7}
 800b7f0:	4770      	bx	lr

0800b7f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68da      	ldr	r2, [r3, #12]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fed2 	bl	800b5bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b08c      	sub	sp, #48	; 0x30
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b22      	cmp	r3, #34	; 0x22
 800b834:	f040 80ae 	bne.w	800b994 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b840:	d117      	bne.n	800b872 <UART_Receive_IT+0x50>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d113      	bne.n	800b872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b860:	b29a      	uxth	r2, r3
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86a:	1c9a      	adds	r2, r3, #2
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	629a      	str	r2, [r3, #40]	; 0x28
 800b870:	e026      	b.n	800b8c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b884:	d007      	beq.n	800b896 <UART_Receive_IT+0x74>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <UART_Receive_IT+0x82>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	e008      	b.n	800b8b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ba:	1c5a      	adds	r2, r3, #1
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d15d      	bne.n	800b990 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f022 0220 	bic.w	r2, r2, #32
 800b8e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68da      	ldr	r2, [r3, #12]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	695a      	ldr	r2, [r3, #20]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f022 0201 	bic.w	r2, r2, #1
 800b902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b916:	2b01      	cmp	r3, #1
 800b918:	d135      	bne.n	800b986 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	330c      	adds	r3, #12
 800b926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	e853 3f00 	ldrex	r3, [r3]
 800b92e:	613b      	str	r3, [r7, #16]
   return(result);
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f023 0310 	bic.w	r3, r3, #16
 800b936:	627b      	str	r3, [r7, #36]	; 0x24
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	330c      	adds	r3, #12
 800b93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b940:	623a      	str	r2, [r7, #32]
 800b942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b944:	69f9      	ldr	r1, [r7, #28]
 800b946:	6a3a      	ldr	r2, [r7, #32]
 800b948:	e841 2300 	strex	r3, r2, [r1]
 800b94c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1e5      	bne.n	800b920 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f003 0310 	and.w	r3, r3, #16
 800b95e:	2b10      	cmp	r3, #16
 800b960:	d10a      	bne.n	800b978 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b962:	2300      	movs	r3, #0
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff fe2e 	bl	800b5e0 <HAL_UARTEx_RxEventCallback>
 800b984:	e002      	b.n	800b98c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7f6 fc56 	bl	8002238 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	e002      	b.n	800b996 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	e000      	b.n	800b996 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b994:	2302      	movs	r3, #2
  }
}
 800b996:	4618      	mov	r0, r3
 800b998:	3730      	adds	r7, #48	; 0x30
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	689a      	ldr	r2, [r3, #8]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	431a      	orrs	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b9da:	f023 030c 	bic.w	r3, r3, #12
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6812      	ldr	r2, [r2, #0]
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	430b      	orrs	r3, r1
 800b9e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	699a      	ldr	r2, [r3, #24]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	430a      	orrs	r2, r1
 800b9fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a2c      	ldr	r2, [pc, #176]	; (800bab4 <UART_SetConfig+0x114>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d103      	bne.n	800ba10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ba08:	f7fc ff94 	bl	8008934 <HAL_RCC_GetPCLK2Freq>
 800ba0c:	60f8      	str	r0, [r7, #12]
 800ba0e:	e002      	b.n	800ba16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ba10:	f7fc ff7c 	bl	800890c <HAL_RCC_GetPCLK1Freq>
 800ba14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009a      	lsls	r2, r3, #2
 800ba20:	441a      	add	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba2c:	4a22      	ldr	r2, [pc, #136]	; (800bab8 <UART_SetConfig+0x118>)
 800ba2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba32:	095b      	lsrs	r3, r3, #5
 800ba34:	0119      	lsls	r1, r3, #4
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009a      	lsls	r2, r3, #2
 800ba40:	441a      	add	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba4c:	4b1a      	ldr	r3, [pc, #104]	; (800bab8 <UART_SetConfig+0x118>)
 800ba4e:	fba3 0302 	umull	r0, r3, r3, r2
 800ba52:	095b      	lsrs	r3, r3, #5
 800ba54:	2064      	movs	r0, #100	; 0x64
 800ba56:	fb00 f303 	mul.w	r3, r0, r3
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	3332      	adds	r3, #50	; 0x32
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <UART_SetConfig+0x118>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	095b      	lsrs	r3, r3, #5
 800ba68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba6c:	4419      	add	r1, r3
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009a      	lsls	r2, r3, #2
 800ba78:	441a      	add	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <UART_SetConfig+0x118>)
 800ba86:	fba3 0302 	umull	r0, r3, r3, r2
 800ba8a:	095b      	lsrs	r3, r3, #5
 800ba8c:	2064      	movs	r0, #100	; 0x64
 800ba8e:	fb00 f303 	mul.w	r3, r0, r3
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	011b      	lsls	r3, r3, #4
 800ba96:	3332      	adds	r3, #50	; 0x32
 800ba98:	4a07      	ldr	r2, [pc, #28]	; (800bab8 <UART_SetConfig+0x118>)
 800ba9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9e:	095b      	lsrs	r3, r3, #5
 800baa0:	f003 020f 	and.w	r2, r3, #15
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	440a      	add	r2, r1
 800baaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800baac:	bf00      	nop
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	40013800 	.word	0x40013800
 800bab8:	51eb851f 	.word	0x51eb851f

0800babc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800babc:	b084      	sub	sp, #16
 800babe:	b480      	push	{r7}
 800bac0:	b085      	sub	sp, #20
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	f107 001c 	add.w	r0, r7, #28
 800baca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bad2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bad4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bad6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bada:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bade:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bae2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bae6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	4313      	orrs	r3, r2
 800baec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800baf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bc80      	pop	{r7}
 800bb0c:	b004      	add	sp, #16
 800bb0e:	4770      	bx	lr

0800bb10 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bc80      	pop	{r7}
 800bb26:	4770      	bx	lr

0800bb28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bc80      	pop	{r7}
 800bb46:	4770      	bx	lr

0800bb48 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2203      	movs	r2, #3
 800bb54:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bc80      	pop	{r7}
 800bb60:	4770      	bx	lr

0800bb62 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0303 	and.w	r3, r3, #3
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bc80      	pop	{r7}
 800bb7a:	4770      	bx	lr

0800bb7c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bb9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bba0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bba6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bbb6:	f023 030f 	bic.w	r3, r3, #15
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	431a      	orrs	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bc80      	pop	{r7}
 800bbcc:	4770      	bx	lr

0800bbce <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	b2db      	uxtb	r3, r3
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bc80      	pop	{r7}
 800bbe4:	4770      	bx	lr

0800bbe6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b085      	sub	sp, #20
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3314      	adds	r3, #20
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
}  
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bc80      	pop	{r7}
 800bc08:	4770      	bx	lr

0800bc0a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b085      	sub	sp, #20
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc30:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bc36:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bc3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc48:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	431a      	orrs	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bc54:	2300      	movs	r3, #0

}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bc80      	pop	{r7}
 800bc5e:	4770      	bx	lr

0800bc60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bc6e:	2310      	movs	r3, #16
 800bc70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc72:	2340      	movs	r3, #64	; 0x40
 800bc74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc76:	2300      	movs	r3, #0
 800bc78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc80:	f107 0308 	add.w	r3, r7, #8
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff ff78 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bc8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc90:	2110      	movs	r1, #16
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa18 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bc98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc9a:	69fb      	ldr	r3, [r7, #28]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bcb2:	2311      	movs	r3, #17
 800bcb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcb6:	2340      	movs	r3, #64	; 0x40
 800bcb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcc4:	f107 0308 	add.w	r3, r7, #8
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7ff ff56 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bcd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd4:	2111      	movs	r1, #17
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f9f6 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bcdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcde:	69fb      	ldr	r3, [r7, #28]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bcf6:	2312      	movs	r3, #18
 800bcf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcfa:	2340      	movs	r3, #64	; 0x40
 800bcfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd08:	f107 0308 	add.w	r3, r7, #8
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff ff34 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bd14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd18:	2112      	movs	r1, #18
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f9d4 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bd20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd22:	69fb      	ldr	r3, [r7, #28]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3720      	adds	r7, #32
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bd3a:	2318      	movs	r3, #24
 800bd3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd3e:	2340      	movs	r3, #64	; 0x40
 800bd40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd42:	2300      	movs	r3, #0
 800bd44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd4c:	f107 0308 	add.w	r3, r7, #8
 800bd50:	4619      	mov	r1, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7ff ff12 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bd58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd5c:	2118      	movs	r1, #24
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f9b2 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bd64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd66:	69fb      	ldr	r3, [r7, #28]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3720      	adds	r7, #32
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bd7e:	2319      	movs	r3, #25
 800bd80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd82:	2340      	movs	r3, #64	; 0x40
 800bd84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd90:	f107 0308 	add.w	r3, r7, #8
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff fef0 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bd9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda0:	2119      	movs	r1, #25
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f990 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bda8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdaa:	69fb      	ldr	r3, [r7, #28]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3720      	adds	r7, #32
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bdc0:	230c      	movs	r3, #12
 800bdc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdd2:	f107 0308 	add.w	r3, r7, #8
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff fecf 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800bdde:	4a05      	ldr	r2, [pc, #20]	; (800bdf4 <SDMMC_CmdStopTransfer+0x40>)
 800bde0:	210c      	movs	r1, #12
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f970 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bde8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdea:	69fb      	ldr	r3, [r7, #28]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3720      	adds	r7, #32
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	05f5e100 	.word	0x05f5e100

0800bdf8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08a      	sub	sp, #40	; 0x28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800be08:	2307      	movs	r3, #7
 800be0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be0c:	2340      	movs	r3, #64	; 0x40
 800be0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be10:	2300      	movs	r3, #0
 800be12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be1a:	f107 0310 	add.w	r3, r7, #16
 800be1e:	4619      	mov	r1, r3
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff feab 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800be26:	f241 3288 	movw	r2, #5000	; 0x1388
 800be2a:	2107      	movs	r1, #7
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 f94b 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800be32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be36:	4618      	mov	r0, r3
 800be38:	3728      	adds	r7, #40	; 0x28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b088      	sub	sp, #32
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800be4e:	2300      	movs	r3, #0
 800be50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be5c:	f107 0308 	add.w	r3, r7, #8
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fe8a 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fb63 	bl	800c534 <SDMMC_GetCmdError>
 800be6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be70:	69fb      	ldr	r3, [r7, #28]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b088      	sub	sp, #32
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800be82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800be86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800be88:	2308      	movs	r3, #8
 800be8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be90:	2300      	movs	r3, #0
 800be92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fe6b 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 faf6 	bl	800c498 <SDMMC_GetCmdResp7>
 800beac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beae:	69fb      	ldr	r3, [r7, #28]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bec6:	2337      	movs	r3, #55	; 0x37
 800bec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800beca:	2340      	movs	r3, #64	; 0x40
 800becc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bece:	2300      	movs	r3, #0
 800bed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff fe4c 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bee8:	2137      	movs	r1, #55	; 0x37
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f8ec 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bef2:	69fb      	ldr	r3, [r7, #28]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3720      	adds	r7, #32
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bf12:	2329      	movs	r3, #41	; 0x29
 800bf14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf16:	2340      	movs	r3, #64	; 0x40
 800bf18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf24:	f107 0308 	add.w	r3, r7, #8
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fe26 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f9ff 	bl	800c334 <SDMMC_GetCmdResp3>
 800bf36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf38:	69fb      	ldr	r3, [r7, #28]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3720      	adds	r7, #32
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b088      	sub	sp, #32
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bf50:	2306      	movs	r3, #6
 800bf52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf54:	2340      	movs	r3, #64	; 0x40
 800bf56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	4619      	mov	r1, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7ff fe07 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bf6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf72:	2106      	movs	r1, #6
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f8a7 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bf7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf7c:	69fb      	ldr	r3, [r7, #28]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3720      	adds	r7, #32
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b088      	sub	sp, #32
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bf92:	2333      	movs	r3, #51	; 0x33
 800bf94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf96:	2340      	movs	r3, #64	; 0x40
 800bf98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfa4:	f107 0308 	add.w	r3, r7, #8
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fde6 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bfb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb4:	2133      	movs	r1, #51	; 0x33
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f886 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800bfbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfbe:	69fb      	ldr	r3, [r7, #28]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3720      	adds	r7, #32
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bfd8:	23c0      	movs	r3, #192	; 0xc0
 800bfda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfe6:	f107 0308 	add.w	r3, r7, #8
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff fdc5 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f956 	bl	800c2a4 <SDMMC_GetCmdResp2>
 800bff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bffa:	69fb      	ldr	r3, [r7, #28]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c012:	2309      	movs	r3, #9
 800c014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c016:	23c0      	movs	r3, #192	; 0xc0
 800c018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c01a:	2300      	movs	r3, #0
 800c01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c022:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c024:	f107 0308 	add.w	r3, r7, #8
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff fda6 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f937 	bl	800c2a4 <SDMMC_GetCmdResp2>
 800c036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c038:	69fb      	ldr	r3, [r7, #28]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3720      	adds	r7, #32
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b088      	sub	sp, #32
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c04c:	2300      	movs	r3, #0
 800c04e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c050:	2303      	movs	r3, #3
 800c052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c054:	2340      	movs	r3, #64	; 0x40
 800c056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c058:	2300      	movs	r3, #0
 800c05a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c05c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c060:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c062:	f107 0308 	add.w	r3, r7, #8
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff fd87 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	2103      	movs	r1, #3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f99a 	bl	800c3ac <SDMMC_GetCmdResp6>
 800c078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c07a:	69fb      	ldr	r3, [r7, #28]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3720      	adds	r7, #32
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c092:	230d      	movs	r3, #13
 800c094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c096:	2340      	movs	r3, #64	; 0x40
 800c098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c09a:	2300      	movs	r3, #0
 800c09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0a4:	f107 0308 	add.w	r3, r7, #8
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fd66 	bl	800bb7c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b4:	210d      	movs	r1, #13
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f806 	bl	800c0c8 <SDMMC_GetCmdResp1>
 800c0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0be:	69fb      	ldr	r3, [r7, #28]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3720      	adds	r7, #32
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0d6:	4b70      	ldr	r3, [pc, #448]	; (800c298 <SDMMC_GetCmdResp1+0x1d0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a70      	ldr	r2, [pc, #448]	; (800c29c <SDMMC_GetCmdResp1+0x1d4>)
 800c0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e0:	0a5a      	lsrs	r2, r3, #9
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	fb02 f303 	mul.w	r3, r2, r3
 800c0e8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	1e5a      	subs	r2, r3, #1
 800c0ee:	61fa      	str	r2, [r7, #28]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0f8:	e0c9      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0ef      	beq.n	800c0ea <SDMMC_GetCmdResp1+0x22>
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1ea      	bne.n	800c0ea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c118:	f003 0304 	and.w	r3, r3, #4
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d004      	beq.n	800c12a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2204      	movs	r2, #4
 800c124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c126:	2304      	movs	r3, #4
 800c128:	e0b1      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	2b00      	cmp	r3, #0
 800c134:	d004      	beq.n	800c140 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2201      	movs	r2, #1
 800c13a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c13c:	2301      	movs	r3, #1
 800c13e:	e0a6      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	22c5      	movs	r2, #197	; 0xc5
 800c144:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff fd41 	bl	800bbce <SDIO_GetCommandResponse>
 800c14c:	4603      	mov	r3, r0
 800c14e:	461a      	mov	r2, r3
 800c150:	7afb      	ldrb	r3, [r7, #11]
 800c152:	4293      	cmp	r3, r2
 800c154:	d001      	beq.n	800c15a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c156:	2301      	movs	r3, #1
 800c158:	e099      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c15a:	2100      	movs	r1, #0
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f7ff fd42 	bl	800bbe6 <SDIO_GetResponse>
 800c162:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	4b4e      	ldr	r3, [pc, #312]	; (800c2a0 <SDMMC_GetCmdResp1+0x1d8>)
 800c168:	4013      	ands	r3, r2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c16e:	2300      	movs	r3, #0
 800c170:	e08d      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2b00      	cmp	r3, #0
 800c176:	da02      	bge.n	800c17e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c17c:	e087      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c188:	2340      	movs	r3, #64	; 0x40
 800c18a:	e080      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c196:	2380      	movs	r3, #128	; 0x80
 800c198:	e079      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c1a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1a8:	e071      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1b8:	e069      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1c8:	e061      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c1d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1d8:	e059      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1e8:	e051      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1f8:	e049      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c208:	e041      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c218:	e039      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c228:	e031      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c238:	e029      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c244:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c248:	e021      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c254:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c258:	e019      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c268:	e011      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c278:	e009      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f003 0308 	and.w	r3, r3, #8
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c284:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c288:	e001      	b.n	800c28e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c28a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3720      	adds	r7, #32
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20000010 	.word	0x20000010
 800c29c:	10624dd3 	.word	0x10624dd3
 800c2a0:	fdffe008 	.word	0xfdffe008

0800c2a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2ac:	4b1f      	ldr	r3, [pc, #124]	; (800c32c <SDMMC_GetCmdResp2+0x88>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a1f      	ldr	r2, [pc, #124]	; (800c330 <SDMMC_GetCmdResp2+0x8c>)
 800c2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b6:	0a5b      	lsrs	r3, r3, #9
 800c2b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2bc:	fb02 f303 	mul.w	r3, r2, r3
 800c2c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1e5a      	subs	r2, r3, #1
 800c2c6:	60fa      	str	r2, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d102      	bne.n	800c2d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2d0:	e026      	b.n	800c320 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d0ef      	beq.n	800c2c2 <SDMMC_GetCmdResp2+0x1e>
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1ea      	bne.n	800c2c2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f0:	f003 0304 	and.w	r3, r3, #4
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d004      	beq.n	800c302 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2fe:	2304      	movs	r3, #4
 800c300:	e00e      	b.n	800c320 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d004      	beq.n	800c318 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c314:	2301      	movs	r3, #1
 800c316:	e003      	b.n	800c320 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	22c5      	movs	r2, #197	; 0xc5
 800c31c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	bc80      	pop	{r7}
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	20000010 	.word	0x20000010
 800c330:	10624dd3 	.word	0x10624dd3

0800c334 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c33c:	4b19      	ldr	r3, [pc, #100]	; (800c3a4 <SDMMC_GetCmdResp3+0x70>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a19      	ldr	r2, [pc, #100]	; (800c3a8 <SDMMC_GetCmdResp3+0x74>)
 800c342:	fba2 2303 	umull	r2, r3, r2, r3
 800c346:	0a5b      	lsrs	r3, r3, #9
 800c348:	f241 3288 	movw	r2, #5000	; 0x1388
 800c34c:	fb02 f303 	mul.w	r3, r2, r3
 800c350:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	1e5a      	subs	r2, r3, #1
 800c356:	60fa      	str	r2, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d102      	bne.n	800c362 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c35c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c360:	e01b      	b.n	800c39a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c366:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0ef      	beq.n	800c352 <SDMMC_GetCmdResp3+0x1e>
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1ea      	bne.n	800c352 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2204      	movs	r2, #4
 800c38c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c38e:	2304      	movs	r3, #4
 800c390:	e003      	b.n	800c39a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	22c5      	movs	r2, #197	; 0xc5
 800c396:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bc80      	pop	{r7}
 800c3a2:	4770      	bx	lr
 800c3a4:	20000010 	.word	0x20000010
 800c3a8:	10624dd3 	.word	0x10624dd3

0800c3ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3ba:	4b35      	ldr	r3, [pc, #212]	; (800c490 <SDMMC_GetCmdResp6+0xe4>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a35      	ldr	r2, [pc, #212]	; (800c494 <SDMMC_GetCmdResp6+0xe8>)
 800c3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c4:	0a5b      	lsrs	r3, r3, #9
 800c3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ca:	fb02 f303 	mul.w	r3, r2, r3
 800c3ce:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	1e5a      	subs	r2, r3, #1
 800c3d4:	61fa      	str	r2, [r7, #28]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3de:	e052      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0ef      	beq.n	800c3d0 <SDMMC_GetCmdResp6+0x24>
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1ea      	bne.n	800c3d0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fe:	f003 0304 	and.w	r3, r3, #4
 800c402:	2b00      	cmp	r3, #0
 800c404:	d004      	beq.n	800c410 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2204      	movs	r2, #4
 800c40a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c40c:	2304      	movs	r3, #4
 800c40e:	e03a      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c414:	f003 0301 	and.w	r3, r3, #1
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2201      	movs	r2, #1
 800c420:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c422:	2301      	movs	r3, #1
 800c424:	e02f      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f7ff fbd1 	bl	800bbce <SDIO_GetCommandResponse>
 800c42c:	4603      	mov	r3, r0
 800c42e:	461a      	mov	r2, r3
 800c430:	7afb      	ldrb	r3, [r7, #11]
 800c432:	4293      	cmp	r3, r2
 800c434:	d001      	beq.n	800c43a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c436:	2301      	movs	r3, #1
 800c438:	e025      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	22c5      	movs	r2, #197	; 0xc5
 800c43e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c440:	2100      	movs	r1, #0
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f7ff fbcf 	bl	800bbe6 <SDIO_GetResponse>
 800c448:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d106      	bne.n	800c462 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	0c1b      	lsrs	r3, r3, #16
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c45e:	2300      	movs	r3, #0
 800c460:	e011      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c46c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c470:	e009      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c47c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c480:	e001      	b.n	800c486 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c486:	4618      	mov	r0, r3
 800c488:	3720      	adds	r7, #32
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20000010 	.word	0x20000010
 800c494:	10624dd3 	.word	0x10624dd3

0800c498 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4a0:	4b22      	ldr	r3, [pc, #136]	; (800c52c <SDMMC_GetCmdResp7+0x94>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a22      	ldr	r2, [pc, #136]	; (800c530 <SDMMC_GetCmdResp7+0x98>)
 800c4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4aa:	0a5b      	lsrs	r3, r3, #9
 800c4ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b0:	fb02 f303 	mul.w	r3, r2, r3
 800c4b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1e5a      	subs	r2, r3, #1
 800c4ba:	60fa      	str	r2, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4c4:	e02c      	b.n	800c520 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0ef      	beq.n	800c4b6 <SDMMC_GetCmdResp7+0x1e>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1ea      	bne.n	800c4b6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	f003 0304 	and.w	r3, r3, #4
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d004      	beq.n	800c4f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4f2:	2304      	movs	r3, #4
 800c4f4:	e014      	b.n	800c520 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d004      	beq.n	800c50c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c508:	2301      	movs	r3, #1
 800c50a:	e009      	b.n	800c520 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2240      	movs	r2, #64	; 0x40
 800c51c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c51e:	2300      	movs	r3, #0
  
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20000010 	.word	0x20000010
 800c530:	10624dd3 	.word	0x10624dd3

0800c534 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c53c:	4b10      	ldr	r3, [pc, #64]	; (800c580 <SDMMC_GetCmdError+0x4c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a10      	ldr	r2, [pc, #64]	; (800c584 <SDMMC_GetCmdError+0x50>)
 800c542:	fba2 2303 	umull	r2, r3, r2, r3
 800c546:	0a5b      	lsrs	r3, r3, #9
 800c548:	f241 3288 	movw	r2, #5000	; 0x1388
 800c54c:	fb02 f303 	mul.w	r3, r2, r3
 800c550:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1e5a      	subs	r2, r3, #1
 800c556:	60fa      	str	r2, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c560:	e009      	b.n	800c576 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0f1      	beq.n	800c552 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	22c5      	movs	r2, #197	; 0xc5
 800c572:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr
 800c580:	20000010 	.word	0x20000010
 800c584:	10624dd3 	.word	0x10624dd3

0800c588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c588:	b084      	sub	sp, #16
 800c58a:	b480      	push	{r7}
 800c58c:	b083      	sub	sp, #12
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	f107 0014 	add.w	r0, r7, #20
 800c596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bc80      	pop	{r7}
 800c5a4:	b004      	add	sp, #16
 800c5a6:	4770      	bx	lr

0800c5a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c5b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c5bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bc80      	pop	{r7}
 800c5d2:	4770      	bx	lr

0800c5d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c5dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c5e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	43db      	mvns	r3, r3
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	bc80      	pop	{r7}
 800c606:	4770      	bx	lr

0800c608 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bc80      	pop	{r7}
 800c61e:	4770      	bx	lr

0800c620 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c620:	b084      	sub	sp, #16
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	f107 0014 	add.w	r0, r7, #20
 800c62e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	bc80      	pop	{r7}
 800c65c:	b004      	add	sp, #16
 800c65e:	4770      	bx	lr

0800c660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c660:	b480      	push	{r7}
 800c662:	b09d      	sub	sp, #116	; 0x74
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	881b      	ldrh	r3, [r3, #0]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c686:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	78db      	ldrb	r3, [r3, #3]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d81f      	bhi.n	800c6d2 <USB_ActivateEndpoint+0x72>
 800c692:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <USB_ActivateEndpoint+0x38>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c6a9 	.word	0x0800c6a9
 800c69c:	0800c6c5 	.word	0x0800c6c5
 800c6a0:	0800c6db 	.word	0x0800c6db
 800c6a4:	0800c6b7 	.word	0x0800c6b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c6a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c6ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c6b4:	e012      	b.n	800c6dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c6b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c6ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c6be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c6c2:	e00b      	b.n	800c6dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c6c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c6c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c6cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c6d0:	e004      	b.n	800c6dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c6d8:	e000      	b.n	800c6dc <USB_ActivateEndpoint+0x7c>
      break;
 800c6da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	441a      	add	r2, r3
 800c6e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c6ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c714:	b29a      	uxth	r2, r3
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	4313      	orrs	r3, r2
 800c71e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	441a      	add	r2, r3
 800c72c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c740:	b29b      	uxth	r3, r3
 800c742:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	7b1b      	ldrb	r3, [r3, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f040 8178 	bne.w	800ca3e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	2b00      	cmp	r3, #0
 800c754:	f000 8084 	beq.w	800c860 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	61bb      	str	r3, [r7, #24]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c762:	b29b      	uxth	r3, r3
 800c764:	461a      	mov	r2, r3
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	4413      	add	r3, r2
 800c76a:	61bb      	str	r3, [r7, #24]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	011a      	lsls	r2, r3, #4
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	4413      	add	r3, r2
 800c776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	88db      	ldrh	r3, [r3, #6]
 800c780:	085b      	lsrs	r3, r3, #1
 800c782:	b29b      	uxth	r3, r3
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	b29a      	uxth	r2, r3
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	827b      	strh	r3, [r7, #18]
 800c79a:	8a7b      	ldrh	r3, [r7, #18]
 800c79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01b      	beq.n	800c7dc <USB_ActivateEndpoint+0x17c>
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ba:	823b      	strh	r3, [r7, #16]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	441a      	add	r2, r3
 800c7c6:	8a3b      	ldrh	r3, [r7, #16]
 800c7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	78db      	ldrb	r3, [r3, #3]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d020      	beq.n	800c826 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	881b      	ldrh	r3, [r3, #0]
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7fa:	81bb      	strh	r3, [r7, #12]
 800c7fc:	89bb      	ldrh	r3, [r7, #12]
 800c7fe:	f083 0320 	eor.w	r3, r3, #32
 800c802:	81bb      	strh	r3, [r7, #12]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	441a      	add	r2, r3
 800c80e:	89bb      	ldrh	r3, [r7, #12]
 800c810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c820:	b29b      	uxth	r3, r3
 800c822:	8013      	strh	r3, [r2, #0]
 800c824:	e2d5      	b.n	800cdd2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	b29b      	uxth	r3, r3
 800c834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c83c:	81fb      	strh	r3, [r7, #14]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	441a      	add	r2, r3
 800c848:	89fb      	ldrh	r3, [r7, #14]
 800c84a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c84e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	8013      	strh	r3, [r2, #0]
 800c85e:	e2b8      	b.n	800cdd2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	633b      	str	r3, [r7, #48]	; 0x30
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	461a      	mov	r2, r3
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	4413      	add	r3, r2
 800c872:	633b      	str	r3, [r7, #48]	; 0x30
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	011a      	lsls	r2, r3, #4
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	4413      	add	r3, r2
 800c87e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	88db      	ldrh	r3, [r3, #6]
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	005b      	lsls	r3, r3, #1
 800c88e:	b29a      	uxth	r2, r3
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	62bb      	str	r3, [r7, #40]	; 0x28
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	4413      	add	r3, r2
 800c8a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	011a      	lsls	r2, r3, #4
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	4413      	add	r3, r2
 800c8b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	801a      	strh	r2, [r3, #0]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b3e      	cmp	r3, #62	; 0x3e
 800c8ce:	d91d      	bls.n	800c90c <USB_ActivateEndpoint+0x2ac>
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	095b      	lsrs	r3, r3, #5
 800c8d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	f003 031f 	and.w	r3, r3, #31
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d102      	bne.n	800c8ea <USB_ActivateEndpoint+0x28a>
 800c8e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	029b      	lsls	r3, r3, #10
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c904:	b29a      	uxth	r2, r3
 800c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c908:	801a      	strh	r2, [r3, #0]
 800c90a:	e026      	b.n	800c95a <USB_ActivateEndpoint+0x2fa>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <USB_ActivateEndpoint+0x2ca>
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c91e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c922:	b29a      	uxth	r2, r3
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	801a      	strh	r2, [r3, #0]
 800c928:	e017      	b.n	800c95a <USB_ActivateEndpoint+0x2fa>
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	085b      	lsrs	r3, r3, #1
 800c930:	66bb      	str	r3, [r7, #104]	; 0x68
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <USB_ActivateEndpoint+0x2e4>
 800c93e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c940:	3301      	adds	r3, #1
 800c942:	66bb      	str	r3, [r7, #104]	; 0x68
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	b29a      	uxth	r2, r3
 800c94a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	029b      	lsls	r3, r3, #10
 800c950:	b29b      	uxth	r3, r3
 800c952:	4313      	orrs	r3, r2
 800c954:	b29a      	uxth	r2, r3
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	4413      	add	r3, r2
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	847b      	strh	r3, [r7, #34]	; 0x22
 800c968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c96a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d01b      	beq.n	800c9aa <USB_ActivateEndpoint+0x34a>
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	881b      	ldrh	r3, [r3, #0]
 800c97e:	b29b      	uxth	r3, r3
 800c980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c988:	843b      	strh	r3, [r7, #32]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	441a      	add	r2, r3
 800c994:	8c3b      	ldrh	r3, [r7, #32]
 800c996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c99a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c99e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d124      	bne.n	800c9fc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c8:	83bb      	strh	r3, [r7, #28]
 800c9ca:	8bbb      	ldrh	r3, [r7, #28]
 800c9cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c9d0:	83bb      	strh	r3, [r7, #28]
 800c9d2:	8bbb      	ldrh	r3, [r7, #28]
 800c9d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c9d8:	83bb      	strh	r3, [r7, #28]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	441a      	add	r2, r3
 800c9e4:	8bbb      	ldrh	r3, [r7, #28]
 800c9e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	8013      	strh	r3, [r2, #0]
 800c9fa:	e1ea      	b.n	800cdd2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca12:	83fb      	strh	r3, [r7, #30]
 800ca14:	8bfb      	ldrh	r3, [r7, #30]
 800ca16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ca1a:	83fb      	strh	r3, [r7, #30]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	441a      	add	r2, r3
 800ca26:	8bfb      	ldrh	r3, [r7, #30]
 800ca28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	8013      	strh	r3, [r2, #0]
 800ca3c:	e1c9      	b.n	800cdd2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	78db      	ldrb	r3, [r3, #3]
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d11e      	bne.n	800ca84 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	441a      	add	r2, r3
 800ca6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ca6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ca7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	8013      	strh	r3, [r2, #0]
 800ca82:	e01d      	b.n	800cac0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	881b      	ldrh	r3, [r3, #0]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ca96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	441a      	add	r2, r3
 800caa8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800caac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caca:	b29b      	uxth	r3, r3
 800cacc:	461a      	mov	r2, r3
 800cace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cad0:	4413      	add	r3, r2
 800cad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	011a      	lsls	r2, r3, #4
 800cada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cae2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	891b      	ldrh	r3, [r3, #8]
 800cae8:	085b      	lsrs	r3, r3, #1
 800caea:	b29b      	uxth	r3, r3
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	b29a      	uxth	r2, r3
 800caf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caf2:	801a      	strh	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	657b      	str	r3, [r7, #84]	; 0x54
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	461a      	mov	r2, r3
 800cb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb04:	4413      	add	r3, r2
 800cb06:	657b      	str	r3, [r7, #84]	; 0x54
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	011a      	lsls	r2, r3, #4
 800cb0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb10:	4413      	add	r3, r2
 800cb12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cb16:	653b      	str	r3, [r7, #80]	; 0x50
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	895b      	ldrh	r3, [r3, #10]
 800cb1c:	085b      	lsrs	r3, r3, #1
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	005b      	lsls	r3, r3, #1
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	785b      	ldrb	r3, [r3, #1]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f040 8093 	bne.w	800cc58 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800cb42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d01b      	beq.n	800cb86 <USB_ActivateEndpoint+0x526>
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	881b      	ldrh	r3, [r3, #0]
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	441a      	add	r2, r3
 800cb70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	881b      	ldrh	r3, [r3, #0]
 800cb92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800cb94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01b      	beq.n	800cbd6 <USB_ActivateEndpoint+0x576>
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	441a      	add	r2, r3
 800cbc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cbc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4413      	add	r3, r2
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cbe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbec:	873b      	strh	r3, [r7, #56]	; 0x38
 800cbee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cbf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cbf4:	873b      	strh	r3, [r7, #56]	; 0x38
 800cbf6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cbf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cbfc:	873b      	strh	r3, [r7, #56]	; 0x38
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	441a      	add	r2, r3
 800cc08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cc0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc34:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	441a      	add	r2, r3
 800cc40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	8013      	strh	r3, [r2, #0]
 800cc56:	e0bc      	b.n	800cdd2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4413      	add	r3, r2
 800cc62:	881b      	ldrh	r3, [r3, #0]
 800cc64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800cc68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cc6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d01d      	beq.n	800ccb0 <USB_ActivateEndpoint+0x650>
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	441a      	add	r2, r3
 800cc98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800cc9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ccc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ccc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01d      	beq.n	800cd08 <USB_ActivateEndpoint+0x6a8>
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cce2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	441a      	add	r2, r3
 800ccf0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ccf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	78db      	ldrb	r3, [r3, #3]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d024      	beq.n	800cd5a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	4413      	add	r3, r2
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cd2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cd2e:	f083 0320 	eor.w	r3, r3, #32
 800cd32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	441a      	add	r2, r3
 800cd40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cd44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	8013      	strh	r3, [r2, #0]
 800cd58:	e01d      	b.n	800cd96 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	881b      	ldrh	r3, [r3, #0]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	441a      	add	r2, r3
 800cd7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cda8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	441a      	add	r2, r3
 800cdba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cdd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3774      	adds	r7, #116	; 0x74
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bc80      	pop	{r7}
 800cdde:	4770      	bx	lr

0800cde0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b08d      	sub	sp, #52	; 0x34
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	7b1b      	ldrb	r3, [r3, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f040 808e 	bne.w	800cf10 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	785b      	ldrb	r3, [r3, #1]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d044      	beq.n	800ce86 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4413      	add	r3, r2
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	81bb      	strh	r3, [r7, #12]
 800ce0a:	89bb      	ldrh	r3, [r7, #12]
 800ce0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d01b      	beq.n	800ce4c <USB_DeactivateEndpoint+0x6c>
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce2a:	817b      	strh	r3, [r7, #10]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	441a      	add	r2, r3
 800ce36:	897b      	ldrh	r3, [r7, #10]
 800ce38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce62:	813b      	strh	r3, [r7, #8]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	441a      	add	r2, r3
 800ce6e:	893b      	ldrh	r3, [r7, #8]
 800ce70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	8013      	strh	r3, [r2, #0]
 800ce84:	e192      	b.n	800d1ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	881b      	ldrh	r3, [r3, #0]
 800ce92:	827b      	strh	r3, [r7, #18]
 800ce94:	8a7b      	ldrh	r3, [r7, #18]
 800ce96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d01b      	beq.n	800ced6 <USB_DeactivateEndpoint+0xf6>
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb4:	823b      	strh	r3, [r7, #16]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	441a      	add	r2, r3
 800cec0:	8a3b      	ldrh	r3, [r7, #16]
 800cec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ceca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceec:	81fb      	strh	r3, [r7, #14]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	441a      	add	r2, r3
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cefe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	8013      	strh	r3, [r2, #0]
 800cf0e:	e14d      	b.n	800d1ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	785b      	ldrb	r3, [r3, #1]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f040 80a5 	bne.w	800d064 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	843b      	strh	r3, [r7, #32]
 800cf28:	8c3b      	ldrh	r3, [r7, #32]
 800cf2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01b      	beq.n	800cf6a <USB_DeactivateEndpoint+0x18a>
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf48:	83fb      	strh	r3, [r7, #30]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	441a      	add	r2, r3
 800cf54:	8bfb      	ldrh	r3, [r7, #30]
 800cf56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	83bb      	strh	r3, [r7, #28]
 800cf78:	8bbb      	ldrh	r3, [r7, #28]
 800cf7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01b      	beq.n	800cfba <USB_DeactivateEndpoint+0x1da>
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf98:	837b      	strh	r3, [r7, #26]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	441a      	add	r2, r3
 800cfa4:	8b7b      	ldrh	r3, [r7, #26]
 800cfa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfd0:	833b      	strh	r3, [r7, #24]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	441a      	add	r2, r3
 800cfdc:	8b3b      	ldrh	r3, [r7, #24]
 800cfde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	4413      	add	r3, r2
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d008:	82fb      	strh	r3, [r7, #22]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	441a      	add	r2, r3
 800d014:	8afb      	ldrh	r3, [r7, #22]
 800d016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d01a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d01e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d026:	b29b      	uxth	r3, r3
 800d028:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	881b      	ldrh	r3, [r3, #0]
 800d036:	b29b      	uxth	r3, r3
 800d038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d040:	82bb      	strh	r3, [r7, #20]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	441a      	add	r2, r3
 800d04c:	8abb      	ldrh	r3, [r7, #20]
 800d04e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d05e:	b29b      	uxth	r3, r3
 800d060:	8013      	strh	r3, [r2, #0]
 800d062:	e0a3      	b.n	800d1ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d072:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d01b      	beq.n	800d0b4 <USB_DeactivateEndpoint+0x2d4>
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4413      	add	r3, r2
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	b29b      	uxth	r3, r3
 800d08a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d092:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	441a      	add	r2, r3
 800d09e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d0a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4413      	add	r3, r2
 800d0be:	881b      	ldrh	r3, [r3, #0]
 800d0c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d0c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d01b      	beq.n	800d104 <USB_DeactivateEndpoint+0x324>
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0e2:	853b      	strh	r3, [r7, #40]	; 0x28
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	441a      	add	r2, r3
 800d0ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d100:	b29b      	uxth	r3, r3
 800d102:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	b29b      	uxth	r3, r3
 800d112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d11a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	441a      	add	r2, r3
 800d126:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d12c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d138:	b29b      	uxth	r3, r3
 800d13a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d152:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	441a      	add	r2, r3
 800d15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d170:	b29b      	uxth	r3, r3
 800d172:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	b29b      	uxth	r3, r3
 800d182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d18a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	441a      	add	r2, r3
 800d196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d19c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3734      	adds	r7, #52	; 0x34
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bc80      	pop	{r7}
 800d1b6:	4770      	bx	lr

0800d1b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b0c2      	sub	sp, #264	; 0x108
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1c6:	6018      	str	r0, [r3, #0]
 800d1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1d0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	785b      	ldrb	r3, [r3, #1]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	f040 86b7 	bne.w	800df52 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	699a      	ldr	r2, [r3, #24]
 800d1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d908      	bls.n	800d212 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d210:	e007      	b.n	800d222 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	7b1b      	ldrb	r3, [r3, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d13a      	bne.n	800d2a8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6959      	ldr	r1, [r3, #20]
 800d23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	88da      	ldrh	r2, [r3, #6]
 800d24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d24e:	b29b      	uxth	r3, r3
 800d250:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d254:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d258:	6800      	ldr	r0, [r0, #0]
 800d25a:	f001 fc9c 	bl	800eb96 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	613b      	str	r3, [r7, #16]
 800d26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d26e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d278:	b29b      	uxth	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	4413      	add	r3, r2
 800d280:	613b      	str	r3, [r7, #16]
 800d282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	011a      	lsls	r2, r3, #4
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	4413      	add	r3, r2
 800d294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d298:	60fb      	str	r3, [r7, #12]
 800d29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	801a      	strh	r2, [r3, #0]
 800d2a4:	f000 be1f 	b.w	800dee6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	78db      	ldrb	r3, [r3, #3]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	f040 8462 	bne.w	800db7e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	6a1a      	ldr	r2, [r3, #32]
 800d2c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	f240 83df 	bls.w	800da96 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800d302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	441a      	add	r2, r3
 800d31c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d328:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d330:	b29b      	uxth	r3, r3
 800d332:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6a1a      	ldr	r2, [r3, #32]
 800d340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d344:	1ad2      	subs	r2, r2, r3
 800d346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	b29b      	uxth	r3, r3
 800d370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 81c7 	beq.w	800d708 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d37e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	633b      	str	r3, [r7, #48]	; 0x30
 800d386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	785b      	ldrb	r3, [r3, #1]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d177      	bne.n	800d486 <USB_EPStartXfer+0x2ce>
 800d396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b6:	4413      	add	r3, r2
 800d3b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	011a      	lsls	r2, r3, #4
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	4413      	add	r3, r2
 800d3cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	801a      	strh	r2, [r3, #0]
 800d3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3e6:	2b3e      	cmp	r3, #62	; 0x3e
 800d3e8:	d921      	bls.n	800d42e <USB_EPStartXfer+0x276>
 800d3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3ee:	095b      	lsrs	r3, r3, #5
 800d3f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3f8:	f003 031f 	and.w	r3, r3, #31
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d104      	bne.n	800d40a <USB_EPStartXfer+0x252>
 800d400:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d404:	3b01      	subs	r3, #1
 800d406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	b29a      	uxth	r2, r3
 800d410:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d414:	b29b      	uxth	r3, r3
 800d416:	029b      	lsls	r3, r3, #10
 800d418:	b29b      	uxth	r3, r3
 800d41a:	4313      	orrs	r3, r2
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d426:	b29a      	uxth	r2, r3
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	801a      	strh	r2, [r3, #0]
 800d42c:	e050      	b.n	800d4d0 <USB_EPStartXfer+0x318>
 800d42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10a      	bne.n	800d44c <USB_EPStartXfer+0x294>
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d444:	b29a      	uxth	r2, r3
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	801a      	strh	r2, [r3, #0]
 800d44a:	e041      	b.n	800d4d0 <USB_EPStartXfer+0x318>
 800d44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d450:	085b      	lsrs	r3, r3, #1
 800d452:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <USB_EPStartXfer+0x2b4>
 800d462:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d466:	3301      	adds	r3, #1
 800d468:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	b29a      	uxth	r2, r3
 800d472:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d476:	b29b      	uxth	r3, r3
 800d478:	029b      	lsls	r3, r3, #10
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4313      	orrs	r3, r2
 800d47e:	b29a      	uxth	r2, r3
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	801a      	strh	r2, [r3, #0]
 800d484:	e024      	b.n	800d4d0 <USB_EPStartXfer+0x318>
 800d486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d11c      	bne.n	800d4d0 <USB_EPStartXfer+0x318>
 800d496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d49a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4aa:	4413      	add	r3, r2
 800d4ac:	633b      	str	r3, [r7, #48]	; 0x30
 800d4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	011a      	lsls	r2, r3, #4
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	4413      	add	r3, r2
 800d4c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	895b      	ldrh	r3, [r3, #10]
 800d4dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6959      	ldr	r1, [r3, #20]
 800d4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d4f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d4fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d4fe:	6800      	ldr	r0, [r0, #0]
 800d500:	f001 fb49 	bl	800eb96 <USB_WritePMA>
            ep->xfer_buff += len;
 800d504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	695a      	ldr	r2, [r3, #20]
 800d510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d514:	441a      	add	r2, r3
 800d516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6a1a      	ldr	r2, [r3, #32]
 800d52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d90f      	bls.n	800d55e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6a1a      	ldr	r2, [r3, #32]
 800d54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d54e:	1ad2      	subs	r2, r2, r3
 800d550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	621a      	str	r2, [r3, #32]
 800d55c:	e00e      	b.n	800d57c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6a1b      	ldr	r3, [r3, #32]
 800d56a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2200      	movs	r2, #0
 800d57a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	785b      	ldrb	r3, [r3, #1]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d177      	bne.n	800d67c <USB_EPStartXfer+0x4c4>
 800d58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	61bb      	str	r3, [r7, #24]
 800d598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d59c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61bb      	str	r3, [r7, #24]
 800d5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	011a      	lsls	r2, r3, #4
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d5c6:	617b      	str	r3, [r7, #20]
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	801a      	strh	r2, [r3, #0]
 800d5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5dc:	2b3e      	cmp	r3, #62	; 0x3e
 800d5de:	d921      	bls.n	800d624 <USB_EPStartXfer+0x46c>
 800d5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5e4:	095b      	lsrs	r3, r3, #5
 800d5e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5ee:	f003 031f 	and.w	r3, r3, #31
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <USB_EPStartXfer+0x448>
 800d5f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	b29a      	uxth	r2, r3
 800d606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	029b      	lsls	r3, r3, #10
 800d60e:	b29b      	uxth	r3, r3
 800d610:	4313      	orrs	r3, r2
 800d612:	b29b      	uxth	r3, r3
 800d614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	801a      	strh	r2, [r3, #0]
 800d622:	e056      	b.n	800d6d2 <USB_EPStartXfer+0x51a>
 800d624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10a      	bne.n	800d642 <USB_EPStartXfer+0x48a>
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	b29b      	uxth	r3, r3
 800d632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	801a      	strh	r2, [r3, #0]
 800d640:	e047      	b.n	800d6d2 <USB_EPStartXfer+0x51a>
 800d642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d646:	085b      	lsrs	r3, r3, #1
 800d648:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d650:	f003 0301 	and.w	r3, r3, #1
 800d654:	2b00      	cmp	r3, #0
 800d656:	d004      	beq.n	800d662 <USB_EPStartXfer+0x4aa>
 800d658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d65c:	3301      	adds	r3, #1
 800d65e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	b29a      	uxth	r2, r3
 800d668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	029b      	lsls	r3, r3, #10
 800d670:	b29b      	uxth	r3, r3
 800d672:	4313      	orrs	r3, r2
 800d674:	b29a      	uxth	r2, r3
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	801a      	strh	r2, [r3, #0]
 800d67a:	e02a      	b.n	800d6d2 <USB_EPStartXfer+0x51a>
 800d67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	785b      	ldrb	r3, [r3, #1]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d122      	bne.n	800d6d2 <USB_EPStartXfer+0x51a>
 800d68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	623b      	str	r3, [r7, #32]
 800d698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	623b      	str	r3, [r7, #32]
 800d6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	011a      	lsls	r2, r3, #4
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d6c6:	61fb      	str	r3, [r7, #28]
 800d6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	891b      	ldrh	r3, [r3, #8]
 800d6de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6959      	ldr	r1, [r3, #20]
 800d6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d6f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d6fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d700:	6800      	ldr	r0, [r0, #0]
 800d702:	f001 fa48 	bl	800eb96 <USB_WritePMA>
 800d706:	e3ee      	b.n	800dee6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	785b      	ldrb	r3, [r3, #1]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d177      	bne.n	800d808 <USB_EPStartXfer+0x650>
 800d718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d71c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	64bb      	str	r3, [r7, #72]	; 0x48
 800d724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d732:	b29b      	uxth	r3, r3
 800d734:	461a      	mov	r2, r3
 800d736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d738:	4413      	add	r3, r2
 800d73a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	011a      	lsls	r2, r3, #4
 800d74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d74c:	4413      	add	r3, r2
 800d74e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d752:	647b      	str	r3, [r7, #68]	; 0x44
 800d754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d756:	881b      	ldrh	r3, [r3, #0]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d75e:	b29a      	uxth	r2, r3
 800d760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d762:	801a      	strh	r2, [r3, #0]
 800d764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d768:	2b3e      	cmp	r3, #62	; 0x3e
 800d76a:	d921      	bls.n	800d7b0 <USB_EPStartXfer+0x5f8>
 800d76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d770:	095b      	lsrs	r3, r3, #5
 800d772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d77a:	f003 031f 	and.w	r3, r3, #31
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d104      	bne.n	800d78c <USB_EPStartXfer+0x5d4>
 800d782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d786:	3b01      	subs	r3, #1
 800d788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	b29a      	uxth	r2, r3
 800d792:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d796:	b29b      	uxth	r3, r3
 800d798:	029b      	lsls	r3, r3, #10
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	4313      	orrs	r3, r2
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ac:	801a      	strh	r2, [r3, #0]
 800d7ae:	e056      	b.n	800d85e <USB_EPStartXfer+0x6a6>
 800d7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10a      	bne.n	800d7ce <USB_EPStartXfer+0x616>
 800d7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ca:	801a      	strh	r2, [r3, #0]
 800d7cc:	e047      	b.n	800d85e <USB_EPStartXfer+0x6a6>
 800d7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7d2:	085b      	lsrs	r3, r3, #1
 800d7d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d004      	beq.n	800d7ee <USB_EPStartXfer+0x636>
 800d7e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	029b      	lsls	r3, r3, #10
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	4313      	orrs	r3, r2
 800d800:	b29a      	uxth	r2, r3
 800d802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d804:	801a      	strh	r2, [r3, #0]
 800d806:	e02a      	b.n	800d85e <USB_EPStartXfer+0x6a6>
 800d808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	785b      	ldrb	r3, [r3, #1]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d122      	bne.n	800d85e <USB_EPStartXfer+0x6a6>
 800d818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d81c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	653b      	str	r3, [r7, #80]	; 0x50
 800d824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d832:	b29b      	uxth	r3, r3
 800d834:	461a      	mov	r2, r3
 800d836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d838:	4413      	add	r3, r2
 800d83a:	653b      	str	r3, [r7, #80]	; 0x50
 800d83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	011a      	lsls	r2, r3, #4
 800d84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d84c:	4413      	add	r3, r2
 800d84e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d852:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d858:	b29a      	uxth	r2, r3
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	891b      	ldrh	r3, [r3, #8]
 800d86a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6959      	ldr	r1, [r3, #20]
 800d87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d87e:	b29b      	uxth	r3, r3
 800d880:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d884:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d888:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d88c:	6800      	ldr	r0, [r0, #0]
 800d88e:	f001 f982 	bl	800eb96 <USB_WritePMA>
            ep->xfer_buff += len;
 800d892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	695a      	ldr	r2, [r3, #20]
 800d89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8a2:	441a      	add	r2, r3
 800d8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6a1a      	ldr	r2, [r3, #32]
 800d8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	691b      	ldr	r3, [r3, #16]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d90f      	bls.n	800d8ec <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	6a1a      	ldr	r2, [r3, #32]
 800d8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8dc:	1ad2      	subs	r2, r2, r3
 800d8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	621a      	str	r2, [r3, #32]
 800d8ea:	e00e      	b.n	800d90a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6a1b      	ldr	r3, [r3, #32]
 800d8f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2200      	movs	r2, #0
 800d908:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d90e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	643b      	str	r3, [r7, #64]	; 0x40
 800d916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	785b      	ldrb	r3, [r3, #1]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d177      	bne.n	800da16 <USB_EPStartXfer+0x85e>
 800d926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	63bb      	str	r3, [r7, #56]	; 0x38
 800d932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d940:	b29b      	uxth	r3, r3
 800d942:	461a      	mov	r2, r3
 800d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d946:	4413      	add	r3, r2
 800d948:	63bb      	str	r3, [r7, #56]	; 0x38
 800d94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	011a      	lsls	r2, r3, #4
 800d958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95a:	4413      	add	r3, r2
 800d95c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d960:	637b      	str	r3, [r7, #52]	; 0x34
 800d962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	b29b      	uxth	r3, r3
 800d968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d970:	801a      	strh	r2, [r3, #0]
 800d972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d976:	2b3e      	cmp	r3, #62	; 0x3e
 800d978:	d921      	bls.n	800d9be <USB_EPStartXfer+0x806>
 800d97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d97e:	095b      	lsrs	r3, r3, #5
 800d980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d988:	f003 031f 	and.w	r3, r3, #31
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <USB_EPStartXfer+0x7e2>
 800d990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d994:	3b01      	subs	r3, #1
 800d996:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	029b      	lsls	r3, r3, #10
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ba:	801a      	strh	r2, [r3, #0]
 800d9bc:	e050      	b.n	800da60 <USB_EPStartXfer+0x8a8>
 800d9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <USB_EPStartXfer+0x824>
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	e041      	b.n	800da60 <USB_EPStartXfer+0x8a8>
 800d9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e0:	085b      	lsrs	r3, r3, #1
 800d9e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <USB_EPStartXfer+0x844>
 800d9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29a      	uxth	r2, r3
 800da02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da06:	b29b      	uxth	r3, r3
 800da08:	029b      	lsls	r3, r3, #10
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4313      	orrs	r3, r2
 800da0e:	b29a      	uxth	r2, r3
 800da10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da12:	801a      	strh	r2, [r3, #0]
 800da14:	e024      	b.n	800da60 <USB_EPStartXfer+0x8a8>
 800da16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	785b      	ldrb	r3, [r3, #1]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d11c      	bne.n	800da60 <USB_EPStartXfer+0x8a8>
 800da26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da34:	b29b      	uxth	r3, r3
 800da36:	461a      	mov	r2, r3
 800da38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3a:	4413      	add	r3, r2
 800da3c:	643b      	str	r3, [r7, #64]	; 0x40
 800da3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	011a      	lsls	r2, r3, #4
 800da4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da4e:	4413      	add	r3, r2
 800da50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800da54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800da60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	895b      	ldrh	r3, [r3, #10]
 800da6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6959      	ldr	r1, [r3, #20]
 800da7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da80:	b29b      	uxth	r3, r3
 800da82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800da86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800da8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800da8e:	6800      	ldr	r0, [r0, #0]
 800da90:	f001 f881 	bl	800eb96 <USB_WritePMA>
 800da94:	e227      	b.n	800dee6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800da96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6a1b      	ldr	r3, [r3, #32]
 800daa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800daa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dacc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800dad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	441a      	add	r2, r3
 800daea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800daee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800daf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800daf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dafe:	b29b      	uxth	r3, r3
 800db00:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	461a      	mov	r2, r3
 800db20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db22:	4413      	add	r3, r2
 800db24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	011a      	lsls	r2, r3, #4
 800db34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db36:	4413      	add	r3, r2
 800db38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800db3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800db3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db42:	b29a      	uxth	r2, r3
 800db44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800db48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	891b      	ldrh	r3, [r3, #8]
 800db54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	6959      	ldr	r1, [r3, #20]
 800db64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db68:	b29b      	uxth	r3, r3
 800db6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800db6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800db72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800db76:	6800      	ldr	r0, [r0, #0]
 800db78:	f001 f80d 	bl	800eb96 <USB_WritePMA>
 800db7c:	e1b3      	b.n	800dee6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800db7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6a1a      	ldr	r2, [r3, #32]
 800db8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db8e:	1ad2      	subs	r2, r2, r3
 800db90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800db9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	881b      	ldrh	r3, [r3, #0]
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 80c6 	beq.w	800dd50 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	673b      	str	r3, [r7, #112]	; 0x70
 800dbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	785b      	ldrb	r3, [r3, #1]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d177      	bne.n	800dcd0 <USB_EPStartXfer+0xb18>
 800dbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc00:	4413      	add	r3, r2
 800dc02:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	011a      	lsls	r2, r3, #4
 800dc12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc14:	4413      	add	r3, r2
 800dc16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dc1a:	667b      	str	r3, [r7, #100]	; 0x64
 800dc1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc2a:	801a      	strh	r2, [r3, #0]
 800dc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc30:	2b3e      	cmp	r3, #62	; 0x3e
 800dc32:	d921      	bls.n	800dc78 <USB_EPStartXfer+0xac0>
 800dc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc38:	095b      	lsrs	r3, r3, #5
 800dc3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dc3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc42:	f003 031f 	and.w	r3, r3, #31
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d104      	bne.n	800dc54 <USB_EPStartXfer+0xa9c>
 800dc4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dc54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	029b      	lsls	r3, r3, #10
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4313      	orrs	r3, r2
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc74:	801a      	strh	r2, [r3, #0]
 800dc76:	e050      	b.n	800dd1a <USB_EPStartXfer+0xb62>
 800dc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10a      	bne.n	800dc96 <USB_EPStartXfer+0xade>
 800dc80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc92:	801a      	strh	r2, [r3, #0]
 800dc94:	e041      	b.n	800dd1a <USB_EPStartXfer+0xb62>
 800dc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc9a:	085b      	lsrs	r3, r3, #1
 800dc9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <USB_EPStartXfer+0xafe>
 800dcac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dcb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcb8:	881b      	ldrh	r3, [r3, #0]
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	029b      	lsls	r3, r3, #10
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dccc:	801a      	strh	r2, [r3, #0]
 800dcce:	e024      	b.n	800dd1a <USB_EPStartXfer+0xb62>
 800dcd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	785b      	ldrb	r3, [r3, #1]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d11c      	bne.n	800dd1a <USB_EPStartXfer+0xb62>
 800dce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcf4:	4413      	add	r3, r2
 800dcf6:	673b      	str	r3, [r7, #112]	; 0x70
 800dcf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	011a      	lsls	r2, r3, #4
 800dd06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd08:	4413      	add	r3, r2
 800dd0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dd0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dd1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	895b      	ldrh	r3, [r3, #10]
 800dd26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6959      	ldr	r1, [r3, #20]
 800dd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dd40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dd44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dd48:	6800      	ldr	r0, [r0, #0]
 800dd4a:	f000 ff24 	bl	800eb96 <USB_WritePMA>
 800dd4e:	e0ca      	b.n	800dee6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	785b      	ldrb	r3, [r3, #1]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d177      	bne.n	800de50 <USB_EPStartXfer+0xc98>
 800dd60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd80:	4413      	add	r3, r2
 800dd82:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	011a      	lsls	r2, r3, #4
 800dd92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd94:	4413      	add	r3, r2
 800dd96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dd9a:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddaa:	801a      	strh	r2, [r3, #0]
 800ddac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddb0:	2b3e      	cmp	r3, #62	; 0x3e
 800ddb2:	d921      	bls.n	800ddf8 <USB_EPStartXfer+0xc40>
 800ddb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddb8:	095b      	lsrs	r3, r3, #5
 800ddba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ddbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddc2:	f003 031f 	and.w	r3, r3, #31
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d104      	bne.n	800ddd4 <USB_EPStartXfer+0xc1c>
 800ddca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ddce:	3b01      	subs	r3, #1
 800ddd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ddd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	029b      	lsls	r3, r3, #10
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	4313      	orrs	r3, r2
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddf4:	801a      	strh	r2, [r3, #0]
 800ddf6:	e05c      	b.n	800deb2 <USB_EPStartXfer+0xcfa>
 800ddf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10a      	bne.n	800de16 <USB_EPStartXfer+0xc5e>
 800de00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	b29b      	uxth	r3, r3
 800de06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de0e:	b29a      	uxth	r2, r3
 800de10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de12:	801a      	strh	r2, [r3, #0]
 800de14:	e04d      	b.n	800deb2 <USB_EPStartXfer+0xcfa>
 800de16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de1a:	085b      	lsrs	r3, r3, #1
 800de1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d004      	beq.n	800de36 <USB_EPStartXfer+0xc7e>
 800de2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800de30:	3301      	adds	r3, #1
 800de32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800de36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800de40:	b29b      	uxth	r3, r3
 800de42:	029b      	lsls	r3, r3, #10
 800de44:	b29b      	uxth	r3, r3
 800de46:	4313      	orrs	r3, r2
 800de48:	b29a      	uxth	r2, r3
 800de4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de4c:	801a      	strh	r2, [r3, #0]
 800de4e:	e030      	b.n	800deb2 <USB_EPStartXfer+0xcfa>
 800de50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	785b      	ldrb	r3, [r3, #1]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d128      	bne.n	800deb2 <USB_EPStartXfer+0xcfa>
 800de60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	461a      	mov	r2, r3
 800de80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de84:	4413      	add	r3, r2
 800de86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	011a      	lsls	r2, r3, #4
 800de98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de9c:	4413      	add	r3, r2
 800de9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deaa:	b29a      	uxth	r2, r3
 800deac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800deb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800deb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	891b      	ldrh	r3, [r3, #8]
 800debe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6959      	ldr	r1, [r3, #20]
 800dece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ded8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dedc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dee0:	6800      	ldr	r0, [r0, #0]
 800dee2:	f000 fe58 	bl	800eb96 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	4413      	add	r3, r2
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	b29b      	uxth	r3, r3
 800df04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df0c:	817b      	strh	r3, [r7, #10]
 800df0e:	897b      	ldrh	r3, [r7, #10]
 800df10:	f083 0310 	eor.w	r3, r3, #16
 800df14:	817b      	strh	r3, [r7, #10]
 800df16:	897b      	ldrh	r3, [r7, #10]
 800df18:	f083 0320 	eor.w	r3, r3, #32
 800df1c:	817b      	strh	r3, [r7, #10]
 800df1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	441a      	add	r2, r3
 800df38:	897b      	ldrh	r3, [r7, #10]
 800df3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	8013      	strh	r3, [r2, #0]
 800df4e:	f000 bcde 	b.w	800e90e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800df52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	7b1b      	ldrb	r3, [r3, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f040 80bb 	bne.w	800e0da <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800df64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	699a      	ldr	r2, [r3, #24]
 800df70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d917      	bls.n	800dfb0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800df80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800df90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	699a      	ldr	r2, [r3, #24]
 800df9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfa0:	1ad2      	subs	r2, r2, r3
 800dfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	619a      	str	r2, [r3, #24]
 800dfae:	e00e      	b.n	800dfce <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dfb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800dfc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800dfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dfdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	461a      	mov	r2, r3
 800dfee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dff2:	4413      	add	r3, r2
 800dff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	011a      	lsls	r2, r3, #4
 800e006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e00a:	4413      	add	r3, r2
 800e00c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e020:	b29a      	uxth	r2, r3
 800e022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e026:	801a      	strh	r2, [r3, #0]
 800e028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e02c:	2b3e      	cmp	r3, #62	; 0x3e
 800e02e:	d924      	bls.n	800e07a <USB_EPStartXfer+0xec2>
 800e030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e034:	095b      	lsrs	r3, r3, #5
 800e036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e03e:	f003 031f 	and.w	r3, r3, #31
 800e042:	2b00      	cmp	r3, #0
 800e044:	d104      	bne.n	800e050 <USB_EPStartXfer+0xe98>
 800e046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e04a:	3b01      	subs	r3, #1
 800e04c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	b29a      	uxth	r2, r3
 800e058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	029b      	lsls	r3, r3, #10
 800e060:	b29b      	uxth	r3, r3
 800e062:	4313      	orrs	r3, r2
 800e064:	b29b      	uxth	r3, r3
 800e066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e06a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e06e:	b29a      	uxth	r2, r3
 800e070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e074:	801a      	strh	r2, [r3, #0]
 800e076:	f000 bc10 	b.w	800e89a <USB_EPStartXfer+0x16e2>
 800e07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10c      	bne.n	800e09c <USB_EPStartXfer+0xee4>
 800e082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	b29b      	uxth	r3, r3
 800e08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e092:	b29a      	uxth	r2, r3
 800e094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e098:	801a      	strh	r2, [r3, #0]
 800e09a:	e3fe      	b.n	800e89a <USB_EPStartXfer+0x16e2>
 800e09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0a0:	085b      	lsrs	r3, r3, #1
 800e0a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d004      	beq.n	800e0bc <USB_EPStartXfer+0xf04>
 800e0b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e0bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	029b      	lsls	r3, r3, #10
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e0d6:	801a      	strh	r2, [r3, #0]
 800e0d8:	e3df      	b.n	800e89a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	78db      	ldrb	r3, [r3, #3]
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	f040 8218 	bne.w	800e51c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	785b      	ldrb	r3, [r3, #1]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 809d 	bne.w	800e238 <USB_EPStartXfer+0x1080>
 800e0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	461a      	mov	r2, r3
 800e11e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e122:	4413      	add	r3, r2
 800e124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e12c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	011a      	lsls	r2, r3, #4
 800e136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e13a:	4413      	add	r3, r2
 800e13c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e150:	b29a      	uxth	r2, r3
 800e152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e156:	801a      	strh	r2, [r3, #0]
 800e158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e15c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	2b3e      	cmp	r3, #62	; 0x3e
 800e166:	d92b      	bls.n	800e1c0 <USB_EPStartXfer+0x1008>
 800e168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	095b      	lsrs	r3, r3, #5
 800e176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	f003 031f 	and.w	r3, r3, #31
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d104      	bne.n	800e198 <USB_EPStartXfer+0xfe0>
 800e18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e192:	3b01      	subs	r3, #1
 800e194:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e19c:	881b      	ldrh	r3, [r3, #0]
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	029b      	lsls	r3, r3, #10
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e1bc:	801a      	strh	r2, [r3, #0]
 800e1be:	e070      	b.n	800e2a2 <USB_EPStartXfer+0x10ea>
 800e1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10c      	bne.n	800e1ea <USB_EPStartXfer+0x1032>
 800e1d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e1e6:	801a      	strh	r2, [r3, #0]
 800e1e8:	e05b      	b.n	800e2a2 <USB_EPStartXfer+0x10ea>
 800e1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	085b      	lsrs	r3, r3, #1
 800e1f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d004      	beq.n	800e21a <USB_EPStartXfer+0x1062>
 800e210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e214:	3301      	adds	r3, #1
 800e216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e21a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b29a      	uxth	r2, r3
 800e222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e226:	b29b      	uxth	r3, r3
 800e228:	029b      	lsls	r3, r3, #10
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	4313      	orrs	r3, r2
 800e22e:	b29a      	uxth	r2, r3
 800e230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e234:	801a      	strh	r2, [r3, #0]
 800e236:	e034      	b.n	800e2a2 <USB_EPStartXfer+0x10ea>
 800e238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e23c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	785b      	ldrb	r3, [r3, #1]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d12c      	bne.n	800e2a2 <USB_EPStartXfer+0x10ea>
 800e248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e24c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e25a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e264:	b29b      	uxth	r3, r3
 800e266:	461a      	mov	r2, r3
 800e268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e26c:	4413      	add	r3, r2
 800e26e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	011a      	lsls	r2, r3, #4
 800e280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e284:	4413      	add	r3, r2
 800e286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e28a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e2a0:	801a      	strh	r2, [r3, #0]
 800e2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	785b      	ldrb	r3, [r3, #1]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f040 809d 	bne.w	800e3fc <USB_EPStartXfer+0x1244>
 800e2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2e6:	4413      	add	r3, r2
 800e2e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	011a      	lsls	r2, r3, #4
 800e2fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2fe:	4413      	add	r3, r2
 800e300:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	b29b      	uxth	r3, r3
 800e310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e314:	b29a      	uxth	r2, r3
 800e316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e31a:	801a      	strh	r2, [r3, #0]
 800e31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	2b3e      	cmp	r3, #62	; 0x3e
 800e32a:	d92b      	bls.n	800e384 <USB_EPStartXfer+0x11cc>
 800e32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	095b      	lsrs	r3, r3, #5
 800e33a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	f003 031f 	and.w	r3, r3, #31
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <USB_EPStartXfer+0x11a4>
 800e352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e356:	3b01      	subs	r3, #1
 800e358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e35c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	b29a      	uxth	r2, r3
 800e364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e368:	b29b      	uxth	r3, r3
 800e36a:	029b      	lsls	r3, r3, #10
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	4313      	orrs	r3, r2
 800e370:	b29b      	uxth	r3, r3
 800e372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e380:	801a      	strh	r2, [r3, #0]
 800e382:	e069      	b.n	800e458 <USB_EPStartXfer+0x12a0>
 800e384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10c      	bne.n	800e3ae <USB_EPStartXfer+0x11f6>
 800e394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3aa:	801a      	strh	r2, [r3, #0]
 800e3ac:	e054      	b.n	800e458 <USB_EPStartXfer+0x12a0>
 800e3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	085b      	lsrs	r3, r3, #1
 800e3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <USB_EPStartXfer+0x1226>
 800e3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3d8:	3301      	adds	r3, #1
 800e3da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e3de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3e2:	881b      	ldrh	r3, [r3, #0]
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	029b      	lsls	r3, r3, #10
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3f8:	801a      	strh	r2, [r3, #0]
 800e3fa:	e02d      	b.n	800e458 <USB_EPStartXfer+0x12a0>
 800e3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	785b      	ldrb	r3, [r3, #1]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d125      	bne.n	800e458 <USB_EPStartXfer+0x12a0>
 800e40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	461a      	mov	r2, r3
 800e41e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e422:	4413      	add	r3, r2
 800e424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e42c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	011a      	lsls	r2, r3, #4
 800e436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e43a:	4413      	add	r3, r2
 800e43c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e440:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	b29a      	uxth	r2, r3
 800e452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e456:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 8218 	beq.w	800e89a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e46e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e48a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e48e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e492:	2b00      	cmp	r3, #0
 800e494:	d005      	beq.n	800e4a2 <USB_EPStartXfer+0x12ea>
 800e496:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10d      	bne.n	800e4be <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e4a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e4a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f040 81f5 	bne.w	800e89a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e4b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f040 81ee 	bne.w	800e89a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	441a      	add	r2, r3
 800e502:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e50a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e50e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e516:	b29b      	uxth	r3, r3
 800e518:	8013      	strh	r3, [r2, #0]
 800e51a:	e1be      	b.n	800e89a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	78db      	ldrb	r3, [r3, #3]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	f040 81b4 	bne.w	800e896 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	699a      	ldr	r2, [r3, #24]
 800e53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	429a      	cmp	r2, r3
 800e548:	d917      	bls.n	800e57a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	691b      	ldr	r3, [r3, #16]
 800e556:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e55e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	699a      	ldr	r2, [r3, #24]
 800e566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e56a:	1ad2      	subs	r2, r2, r3
 800e56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	619a      	str	r2, [r3, #24]
 800e578:	e00e      	b.n	800e598 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2200      	movs	r2, #0
 800e596:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	785b      	ldrb	r3, [r3, #1]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f040 8085 	bne.w	800e6b4 <USB_EPStartXfer+0x14fc>
 800e5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e5ce:	4413      	add	r3, r2
 800e5d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	011a      	lsls	r2, r3, #4
 800e5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e5e6:	4413      	add	r3, r2
 800e5e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e5ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e5f4:	881b      	ldrh	r3, [r3, #0]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e602:	801a      	strh	r2, [r3, #0]
 800e604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e608:	2b3e      	cmp	r3, #62	; 0x3e
 800e60a:	d923      	bls.n	800e654 <USB_EPStartXfer+0x149c>
 800e60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e610:	095b      	lsrs	r3, r3, #5
 800e612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e61a:	f003 031f 	and.w	r3, r3, #31
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d104      	bne.n	800e62c <USB_EPStartXfer+0x1474>
 800e622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e626:	3b01      	subs	r3, #1
 800e628:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e62c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	b29a      	uxth	r2, r3
 800e634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e638:	b29b      	uxth	r3, r3
 800e63a:	029b      	lsls	r3, r3, #10
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	4313      	orrs	r3, r2
 800e640:	b29b      	uxth	r3, r3
 800e642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e650:	801a      	strh	r2, [r3, #0]
 800e652:	e060      	b.n	800e716 <USB_EPStartXfer+0x155e>
 800e654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <USB_EPStartXfer+0x14be>
 800e65c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e660:	881b      	ldrh	r3, [r3, #0]
 800e662:	b29b      	uxth	r3, r3
 800e664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e672:	801a      	strh	r2, [r3, #0]
 800e674:	e04f      	b.n	800e716 <USB_EPStartXfer+0x155e>
 800e676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e67a:	085b      	lsrs	r3, r3, #1
 800e67c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d004      	beq.n	800e696 <USB_EPStartXfer+0x14de>
 800e68c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e690:	3301      	adds	r3, #1
 800e692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	029b      	lsls	r3, r3, #10
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e6b0:	801a      	strh	r2, [r3, #0]
 800e6b2:	e030      	b.n	800e716 <USB_EPStartXfer+0x155e>
 800e6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	785b      	ldrb	r3, [r3, #1]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d128      	bne.n	800e716 <USB_EPStartXfer+0x155e>
 800e6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e6e8:	4413      	add	r3, r2
 800e6ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	011a      	lsls	r2, r3, #4
 800e6fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e700:	4413      	add	r3, r2
 800e702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e706:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e70e:	b29a      	uxth	r2, r3
 800e710:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e714:	801a      	strh	r2, [r3, #0]
 800e716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	785b      	ldrb	r3, [r3, #1]
 800e730:	2b00      	cmp	r3, #0
 800e732:	f040 8085 	bne.w	800e840 <USB_EPStartXfer+0x1688>
 800e736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e73a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e752:	b29b      	uxth	r3, r3
 800e754:	461a      	mov	r2, r3
 800e756:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e75a:	4413      	add	r3, r2
 800e75c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	011a      	lsls	r2, r3, #4
 800e76e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e772:	4413      	add	r3, r2
 800e774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e77c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e780:	881b      	ldrh	r3, [r3, #0]
 800e782:	b29b      	uxth	r3, r3
 800e784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e788:	b29a      	uxth	r2, r3
 800e78a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e78e:	801a      	strh	r2, [r3, #0]
 800e790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e794:	2b3e      	cmp	r3, #62	; 0x3e
 800e796:	d923      	bls.n	800e7e0 <USB_EPStartXfer+0x1628>
 800e798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e79c:	095b      	lsrs	r3, r3, #5
 800e79e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7a6:	f003 031f 	and.w	r3, r3, #31
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d104      	bne.n	800e7b8 <USB_EPStartXfer+0x1600>
 800e7ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e7b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7bc:	881b      	ldrh	r3, [r3, #0]
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	029b      	lsls	r3, r3, #10
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7dc:	801a      	strh	r2, [r3, #0]
 800e7de:	e05c      	b.n	800e89a <USB_EPStartXfer+0x16e2>
 800e7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10c      	bne.n	800e802 <USB_EPStartXfer+0x164a>
 800e7e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7ec:	881b      	ldrh	r3, [r3, #0]
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e7fe:	801a      	strh	r2, [r3, #0]
 800e800:	e04b      	b.n	800e89a <USB_EPStartXfer+0x16e2>
 800e802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e806:	085b      	lsrs	r3, r3, #1
 800e808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <USB_EPStartXfer+0x166a>
 800e818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e81c:	3301      	adds	r3, #1
 800e81e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e826:	881b      	ldrh	r3, [r3, #0]
 800e828:	b29a      	uxth	r2, r3
 800e82a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e82e:	b29b      	uxth	r3, r3
 800e830:	029b      	lsls	r3, r3, #10
 800e832:	b29b      	uxth	r3, r3
 800e834:	4313      	orrs	r3, r2
 800e836:	b29a      	uxth	r2, r3
 800e838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e83c:	801a      	strh	r2, [r3, #0]
 800e83e:	e02c      	b.n	800e89a <USB_EPStartXfer+0x16e2>
 800e840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	785b      	ldrb	r3, [r3, #1]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d124      	bne.n	800e89a <USB_EPStartXfer+0x16e2>
 800e850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e85e:	b29b      	uxth	r3, r3
 800e860:	461a      	mov	r2, r3
 800e862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e866:	4413      	add	r3, r2
 800e868:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	011a      	lsls	r2, r3, #4
 800e87a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e87e:	4413      	add	r3, r2
 800e880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e892:	801a      	strh	r2, [r3, #0]
 800e894:	e001      	b.n	800e89a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e03a      	b.n	800e910 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e89e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	4413      	add	r3, r2
 800e8b4:	881b      	ldrh	r3, [r3, #0]
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e8c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e8c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e8cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e8d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e8d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e8d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	441a      	add	r2, r3
 800e8f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e8fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b085      	sub	sp, #20
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	785b      	ldrb	r3, [r3, #1]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d020      	beq.n	800e96e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4413      	add	r3, r2
 800e936:	881b      	ldrh	r3, [r3, #0]
 800e938:	b29b      	uxth	r3, r3
 800e93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e942:	81bb      	strh	r3, [r7, #12]
 800e944:	89bb      	ldrh	r3, [r7, #12]
 800e946:	f083 0310 	eor.w	r3, r3, #16
 800e94a:	81bb      	strh	r3, [r7, #12]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	441a      	add	r2, r3
 800e956:	89bb      	ldrh	r3, [r7, #12]
 800e958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e95c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e968:	b29b      	uxth	r3, r3
 800e96a:	8013      	strh	r3, [r2, #0]
 800e96c:	e01f      	b.n	800e9ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4413      	add	r3, r2
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e984:	81fb      	strh	r3, [r7, #14]
 800e986:	89fb      	ldrh	r3, [r7, #14]
 800e988:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e98c:	81fb      	strh	r3, [r7, #14]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	441a      	add	r2, r3
 800e998:	89fb      	ldrh	r3, [r7, #14]
 800e99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bc80      	pop	{r7}
 800e9b8:	4770      	bx	lr

0800e9ba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b087      	sub	sp, #28
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	7b1b      	ldrb	r3, [r3, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f040 809d 	bne.w	800eb08 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	785b      	ldrb	r3, [r3, #1]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d04c      	beq.n	800ea70 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	4413      	add	r3, r2
 800e9e0:	881b      	ldrh	r3, [r3, #0]
 800e9e2:	823b      	strh	r3, [r7, #16]
 800e9e4:	8a3b      	ldrh	r3, [r7, #16]
 800e9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d01b      	beq.n	800ea26 <USB_EPClearStall+0x6c>
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea04:	81fb      	strh	r3, [r7, #14]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	441a      	add	r2, r3
 800ea10:	89fb      	ldrh	r3, [r7, #14]
 800ea12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	78db      	ldrb	r3, [r3, #3]
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d06c      	beq.n	800eb08 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4413      	add	r3, r2
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea44:	81bb      	strh	r3, [r7, #12]
 800ea46:	89bb      	ldrh	r3, [r7, #12]
 800ea48:	f083 0320 	eor.w	r3, r3, #32
 800ea4c:	81bb      	strh	r3, [r7, #12]
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	441a      	add	r2, r3
 800ea58:	89bb      	ldrh	r3, [r7, #12]
 800ea5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	8013      	strh	r3, [r2, #0]
 800ea6e:	e04b      	b.n	800eb08 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	82fb      	strh	r3, [r7, #22]
 800ea7e:	8afb      	ldrh	r3, [r7, #22]
 800ea80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d01b      	beq.n	800eac0 <USB_EPClearStall+0x106>
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	881b      	ldrh	r3, [r3, #0]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea9e:	82bb      	strh	r3, [r7, #20]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	441a      	add	r2, r3
 800eaaa:	8abb      	ldrh	r3, [r7, #20]
 800eaac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	4413      	add	r3, r2
 800eaca:	881b      	ldrh	r3, [r3, #0]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ead2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ead6:	827b      	strh	r3, [r7, #18]
 800ead8:	8a7b      	ldrh	r3, [r7, #18]
 800eada:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800eade:	827b      	strh	r3, [r7, #18]
 800eae0:	8a7b      	ldrh	r3, [r7, #18]
 800eae2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800eae6:	827b      	strh	r3, [r7, #18]
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	441a      	add	r2, r3
 800eaf2:	8a7b      	ldrh	r3, [r7, #18]
 800eaf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eaf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	371c      	adds	r7, #28
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bc80      	pop	{r7}
 800eb12:	4770      	bx	lr

0800eb14 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d103      	bne.n	800eb2e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2280      	movs	r2, #128	; 0x80
 800eb2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bc80      	pop	{r7}
 800eb38:	4770      	bx	lr

0800eb3a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800eb3a:	b480      	push	{r7}
 800eb3c:	b083      	sub	sp, #12
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bc80      	pop	{r7}
 800eb4c:	4770      	bx	lr

0800eb4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b083      	sub	sp, #12
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bc80      	pop	{r7}
 800eb60:	4770      	bx	lr

0800eb62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b085      	sub	sp, #20
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800eb74:	68fb      	ldr	r3, [r7, #12]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bc80      	pop	{r7}
 800eb7e:	4770      	bx	lr

0800eb80 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bc80      	pop	{r7}
 800eb94:	4770      	bx	lr

0800eb96 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eb96:	b480      	push	{r7}
 800eb98:	b08b      	sub	sp, #44	; 0x2c
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	60f8      	str	r0, [r7, #12]
 800eb9e:	60b9      	str	r1, [r7, #8]
 800eba0:	4611      	mov	r1, r2
 800eba2:	461a      	mov	r2, r3
 800eba4:	460b      	mov	r3, r1
 800eba6:	80fb      	strh	r3, [r7, #6]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ebac:	88bb      	ldrh	r3, [r7, #4]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	085b      	lsrs	r3, r3, #1
 800ebb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ebbc:	88fb      	ldrh	r3, [r7, #6]
 800ebbe:	005a      	lsls	r2, r3, #1
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ebc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	627b      	str	r3, [r7, #36]	; 0x24
 800ebce:	e01e      	b.n	800ec0e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	021b      	lsls	r3, r3, #8
 800ebde:	b21a      	sxth	r2, r3
 800ebe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	b21b      	sxth	r3, r3
 800ebe8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ebea:	6a3b      	ldr	r3, [r7, #32]
 800ebec:	8a7a      	ldrh	r2, [r7, #18]
 800ebee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ebf0:	6a3b      	ldr	r3, [r7, #32]
 800ebf2:	3302      	adds	r3, #2
 800ebf4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ebf6:	6a3b      	ldr	r3, [r7, #32]
 800ebf8:	3302      	adds	r3, #2
 800ebfa:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	3301      	adds	r3, #1
 800ec06:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ec08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ec0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1dd      	bne.n	800ebd0 <USB_WritePMA+0x3a>
  }
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop
 800ec18:	372c      	adds	r7, #44	; 0x2c
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bc80      	pop	{r7}
 800ec1e:	4770      	bx	lr

0800ec20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b08b      	sub	sp, #44	; 0x2c
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	460b      	mov	r3, r1
 800ec30:	80fb      	strh	r3, [r7, #6]
 800ec32:	4613      	mov	r3, r2
 800ec34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ec36:	88bb      	ldrh	r3, [r7, #4]
 800ec38:	085b      	lsrs	r3, r3, #1
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ec46:	88fb      	ldrh	r3, [r7, #6]
 800ec48:	005a      	lsls	r2, r3, #1
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24
 800ec58:	e01b      	b.n	800ec92 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	3302      	adds	r3, #2
 800ec66:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	3301      	adds	r3, #1
 800ec74:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	0a1b      	lsrs	r3, r3, #8
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	3301      	adds	r3, #1
 800ec84:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	3302      	adds	r3, #2
 800ec8a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	627b      	str	r3, [r7, #36]	; 0x24
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1e0      	bne.n	800ec5a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ec98:	88bb      	ldrh	r3, [r7, #4]
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d007      	beq.n	800ecb4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	701a      	strb	r2, [r3, #0]
  }
}
 800ecb4:	bf00      	nop
 800ecb6:	372c      	adds	r7, #44	; 0x2c
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bc80      	pop	{r7}
 800ecbc:	4770      	bx	lr
	...

0800ecc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ecc4:	4904      	ldr	r1, [pc, #16]	; (800ecd8 <MX_FATFS_Init+0x18>)
 800ecc6:	4805      	ldr	r0, [pc, #20]	; (800ecdc <MX_FATFS_Init+0x1c>)
 800ecc8:	f003 fff8 	bl	8012cbc <FATFS_LinkDriver>
 800eccc:	4603      	mov	r3, r0
 800ecce:	461a      	mov	r2, r3
 800ecd0:	4b03      	ldr	r3, [pc, #12]	; (800ece0 <MX_FATFS_Init+0x20>)
 800ecd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ecd4:	bf00      	nop
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20000f04 	.word	0x20000f04
 800ecdc:	08031eac 	.word	0x08031eac
 800ece0:	20000f00 	.word	0x20000f00

0800ece4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ece4:	b480      	push	{r7}
 800ece6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ece8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bc80      	pop	{r7}
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ecfe:	f000 f879 	bl	800edf4 <BSP_SD_IsDetected>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d001      	beq.n	800ed0c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e012      	b.n	800ed32 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ed0c:	480b      	ldr	r0, [pc, #44]	; (800ed3c <BSP_SD_Init+0x48>)
 800ed0e:	f7f9 ffd1 	bl	8008cb4 <HAL_SD_Init>
 800ed12:	4603      	mov	r3, r0
 800ed14:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d109      	bne.n	800ed30 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ed1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ed20:	4806      	ldr	r0, [pc, #24]	; (800ed3c <BSP_SD_Init+0x48>)
 800ed22:	f7fa fdab 	bl	800987c <HAL_SD_ConfigWideBusOperation>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ed30:	79fb      	ldrb	r3, [r7, #7]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20000c54 	.word	0x20000c54

0800ed40 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68ba      	ldr	r2, [r7, #8]
 800ed5a:	68f9      	ldr	r1, [r7, #12]
 800ed5c:	4806      	ldr	r0, [pc, #24]	; (800ed78 <BSP_SD_ReadBlocks+0x38>)
 800ed5e:	f7fa f859 	bl	8008e14 <HAL_SD_ReadBlocks>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000c54 	.word	0x20000c54

0800ed7c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af02      	add	r7, sp, #8
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	68f9      	ldr	r1, [r7, #12]
 800ed98:	4806      	ldr	r0, [pc, #24]	; (800edb4 <BSP_SD_WriteBlocks+0x38>)
 800ed9a:	f7fa fa19 	bl	80091d0 <HAL_SD_WriteBlocks>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d001      	beq.n	800eda8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800eda4:	2301      	movs	r3, #1
 800eda6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	20000c54 	.word	0x20000c54

0800edb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800edbc:	4805      	ldr	r0, [pc, #20]	; (800edd4 <BSP_SD_GetCardState+0x1c>)
 800edbe:	f7fa fdf7 	bl	80099b0 <HAL_SD_GetCardState>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b04      	cmp	r3, #4
 800edc6:	bf14      	ite	ne
 800edc8:	2301      	movne	r3, #1
 800edca:	2300      	moveq	r3, #0
 800edcc:	b2db      	uxtb	r3, r3
}
 800edce:	4618      	mov	r0, r3
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	20000c54 	.word	0x20000c54

0800edd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ede0:	6879      	ldr	r1, [r7, #4]
 800ede2:	4803      	ldr	r0, [pc, #12]	; (800edf0 <BSP_SD_GetCardInfo+0x18>)
 800ede4:	f7fa fd1e 	bl	8009824 <HAL_SD_GetCardInfo>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	20000c54 	.word	0x20000c54

0800edf4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800edfa:	2301      	movs	r3, #1
 800edfc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	b2db      	uxtb	r3, r3
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bc80      	pop	{r7}
 800ee0a:	4770      	bx	lr

0800ee0c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	2203      	movs	r2, #3
 800ee20:	2181      	movs	r1, #129	; 0x81
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f006 fcd5 	bl	80157d2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800ee2e:	2302      	movs	r3, #2
 800ee30:	2203      	movs	r2, #3
 800ee32:	2101      	movs	r1, #1
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f006 fccc 	bl	80157d2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800ee42:	2018      	movs	r0, #24
 800ee44:	f006 fdda 	bl	80159fc <USBD_static_malloc>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	73fb      	strb	r3, [r7, #15]
 800ee5e:	e011      	b.n	800ee84 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee66:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	2302      	movs	r3, #2
 800ee7c:	2101      	movs	r1, #1
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f006 fd98 	bl	80159b4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b082      	sub	sp, #8
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800ee9a:	2181      	movs	r1, #129	; 0x81
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f006 fcbe 	bl	801581e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800eea8:	2101      	movs	r1, #1
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f006 fcb7 	bl	801581e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00e      	beq.n	800eee0 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed2:	4618      	mov	r0, r3
 800eed4:	f006 fd9e 	bl	8015a14 <USBD_static_free>
    pdev->pClassData = NULL;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eefc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800eefe:	2300      	movs	r3, #0
 800ef00:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800ef02:	2300      	movs	r3, #0
 800ef04:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800ef06:	2300      	movs	r3, #0
 800ef08:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d051      	beq.n	800efbe <USBD_CUSTOM_HID_Setup+0xd2>
 800ef1a:	2b20      	cmp	r3, #32
 800ef1c:	f040 80e1 	bne.w	800f0e2 <USBD_CUSTOM_HID_Setup+0x1f6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	785b      	ldrb	r3, [r3, #1]
 800ef24:	3b02      	subs	r3, #2
 800ef26:	2b09      	cmp	r3, #9
 800ef28:	d841      	bhi.n	800efae <USBD_CUSTOM_HID_Setup+0xc2>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <USBD_CUSTOM_HID_Setup+0x44>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef89 	.word	0x0800ef89
 800ef34:	0800ef67 	.word	0x0800ef67
 800ef38:	0800efaf 	.word	0x0800efaf
 800ef3c:	0800efaf 	.word	0x0800efaf
 800ef40:	0800efaf 	.word	0x0800efaf
 800ef44:	0800efaf 	.word	0x0800efaf
 800ef48:	0800efaf 	.word	0x0800efaf
 800ef4c:	0800ef99 	.word	0x0800ef99
 800ef50:	0800ef77 	.word	0x0800ef77
 800ef54:	0800ef59 	.word	0x0800ef59
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	885b      	ldrh	r3, [r3, #2]
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	461a      	mov	r2, r3
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	605a      	str	r2, [r3, #4]
          break;
 800ef64:	e02a      	b.n	800efbc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	3304      	adds	r3, #4
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f001 f995 	bl	801029e <USBD_CtlSendData>
          break;
 800ef74:	e022      	b.n	800efbc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	885b      	ldrh	r3, [r3, #2]
 800ef7a:	0a1b      	lsrs	r3, r3, #8
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	461a      	mov	r2, r3
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	609a      	str	r2, [r3, #8]
          break;
 800ef86:	e019      	b.n	800efbc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	3308      	adds	r3, #8
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f001 f984 	bl	801029e <USBD_CtlSendData>
          break;
 800ef96:	e011      	b.n	800efbc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800ef9e:	6939      	ldr	r1, [r7, #16]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	88db      	ldrh	r3, [r3, #6]
 800efa4:	461a      	mov	r2, r3
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f001 f9a7 	bl	80102fa <USBD_CtlPrepareRx>
          break;
 800efac:	e006      	b.n	800efbc <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800efae:	6839      	ldr	r1, [r7, #0]
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f001 f90a 	bl	80101ca <USBD_CtlError>
          ret = USBD_FAIL;
 800efb6:	2302      	movs	r3, #2
 800efb8:	75fb      	strb	r3, [r7, #23]
          break;
 800efba:	bf00      	nop
      }
      break;
 800efbc:	e098      	b.n	800f0f0 <USBD_CUSTOM_HID_Setup+0x204>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	785b      	ldrb	r3, [r3, #1]
 800efc2:	2b0b      	cmp	r3, #11
 800efc4:	f200 8085 	bhi.w	800f0d2 <USBD_CUSTOM_HID_Setup+0x1e6>
 800efc8:	a201      	add	r2, pc, #4	; (adr r2, 800efd0 <USBD_CUSTOM_HID_Setup+0xe4>)
 800efca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efce:	bf00      	nop
 800efd0:	0800f001 	.word	0x0800f001
 800efd4:	0800f0d3 	.word	0x0800f0d3
 800efd8:	0800f0d3 	.word	0x0800f0d3
 800efdc:	0800f0d3 	.word	0x0800f0d3
 800efe0:	0800f0d3 	.word	0x0800f0d3
 800efe4:	0800f0d3 	.word	0x0800f0d3
 800efe8:	0800f029 	.word	0x0800f029
 800efec:	0800f0d3 	.word	0x0800f0d3
 800eff0:	0800f0d3 	.word	0x0800f0d3
 800eff4:	0800f0d3 	.word	0x0800f0d3
 800eff8:	0800f085 	.word	0x0800f085
 800effc:	0800f0ad 	.word	0x0800f0ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f006:	2b03      	cmp	r3, #3
 800f008:	d107      	bne.n	800f01a <USBD_CUSTOM_HID_Setup+0x12e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f00a:	f107 030e 	add.w	r3, r7, #14
 800f00e:	2202      	movs	r2, #2
 800f010:	4619      	mov	r1, r3
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f001 f943 	bl	801029e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f018:	e062      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f001 f8d4 	bl	80101ca <USBD_CtlError>
            ret = USBD_FAIL;
 800f022:	2302      	movs	r3, #2
 800f024:	75fb      	strb	r3, [r7, #23]
          break;
 800f026:	e05b      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	885b      	ldrh	r3, [r3, #2]
 800f02c:	0a1b      	lsrs	r3, r3, #8
 800f02e:	b29b      	uxth	r3, r3
 800f030:	2b22      	cmp	r3, #34	; 0x22
 800f032:	d10d      	bne.n	800f050 <USBD_CUSTOM_HID_Setup+0x164>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	88da      	ldrh	r2, [r3, #6]
 800f038:	4b30      	ldr	r3, [pc, #192]	; (800f0fc <USBD_CUSTOM_HID_Setup+0x210>)
 800f03a:	881b      	ldrh	r3, [r3, #0]
 800f03c:	4293      	cmp	r3, r2
 800f03e:	bf28      	it	cs
 800f040:	4613      	movcs	r3, r2
 800f042:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	61bb      	str	r3, [r7, #24]
 800f04e:	e012      	b.n	800f076 <USBD_CUSTOM_HID_Setup+0x18a>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	885b      	ldrh	r3, [r3, #2]
 800f054:	0a1b      	lsrs	r3, r3, #8
 800f056:	b29b      	uxth	r3, r3
 800f058:	2b21      	cmp	r3, #33	; 0x21
 800f05a:	d10c      	bne.n	800f076 <USBD_CUSTOM_HID_Setup+0x18a>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800f05c:	4b28      	ldr	r3, [pc, #160]	; (800f100 <USBD_CUSTOM_HID_Setup+0x214>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	88db      	ldrh	r3, [r3, #6]
 800f066:	461a      	mov	r2, r3
 800f068:	4b26      	ldr	r3, [pc, #152]	; (800f104 <USBD_CUSTOM_HID_Setup+0x218>)
 800f06a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f06e:	4293      	cmp	r3, r2
 800f070:	bfa8      	it	ge
 800f072:	4613      	movge	r3, r2
 800f074:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800f076:	8bfb      	ldrh	r3, [r7, #30]
 800f078:	461a      	mov	r2, r3
 800f07a:	69b9      	ldr	r1, [r7, #24]
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f001 f90e 	bl	801029e <USBD_CtlSendData>
          break;
 800f082:	e02d      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d107      	bne.n	800f09e <USBD_CUSTOM_HID_Setup+0x1b2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	330c      	adds	r3, #12
 800f092:	2201      	movs	r2, #1
 800f094:	4619      	mov	r1, r3
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f001 f901 	bl	801029e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f09c:	e020      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f001 f892 	bl	80101ca <USBD_CtlError>
            ret = USBD_FAIL;
 800f0a6:	2302      	movs	r3, #2
 800f0a8:	75fb      	strb	r3, [r7, #23]
          break;
 800f0aa:	e019      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d106      	bne.n	800f0c4 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	885b      	ldrh	r3, [r3, #2]
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	461a      	mov	r2, r3
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f0c2:	e00d      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800f0c4:	6839      	ldr	r1, [r7, #0]
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f001 f87f 	bl	80101ca <USBD_CtlError>
            ret = USBD_FAIL;
 800f0cc:	2302      	movs	r3, #2
 800f0ce:	75fb      	strb	r3, [r7, #23]
          break;
 800f0d0:	e006      	b.n	800f0e0 <USBD_CUSTOM_HID_Setup+0x1f4>

        default:
          USBD_CtlError(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f001 f878 	bl	80101ca <USBD_CtlError>
          ret = USBD_FAIL;
 800f0da:	2302      	movs	r3, #2
 800f0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800f0de:	bf00      	nop
      }
      break;
 800f0e0:	e006      	b.n	800f0f0 <USBD_CUSTOM_HID_Setup+0x204>

    default:
      USBD_CtlError(pdev, req);
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f001 f870 	bl	80101ca <USBD_CtlError>
      ret = USBD_FAIL;
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	75fb      	strb	r3, [r7, #23]
      break;
 800f0ee:	bf00      	nop
  }
  return ret;
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3720      	adds	r7, #32
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20001f5c 	.word	0x20001f5c
 800f100:	20000f14 	.word	0x20000f14
 800f104:	20000f1a 	.word	0x20000f1a

0800f108 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800f110:	4b06      	ldr	r3, [pc, #24]	; (800f12c <USBD_CUSTOM_HID_GetFSCfgDesc+0x24>)
 800f112:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f116:	b29a      	uxth	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800f11c:	4b04      	ldr	r3, [pc, #16]	; (800f130 <USBD_CUSTOM_HID_GetFSCfgDesc+0x28>)
 800f11e:	681b      	ldr	r3, [r3, #0]
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	bc80      	pop	{r7}
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	20000f18 	.word	0x20000f18
 800f130:	20000f08 	.word	0x20000f08

0800f134 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800f13c:	4b06      	ldr	r3, [pc, #24]	; (800f158 <USBD_CUSTOM_HID_GetHSCfgDesc+0x24>)
 800f13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f142:	b29a      	uxth	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800f148:	4b04      	ldr	r3, [pc, #16]	; (800f15c <USBD_CUSTOM_HID_GetHSCfgDesc+0x28>)
 800f14a:	681b      	ldr	r3, [r3, #0]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	bc80      	pop	{r7}
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	20000f18 	.word	0x20000f18
 800f15c:	20000f0c 	.word	0x20000f0c

0800f160 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800f168:	4b06      	ldr	r3, [pc, #24]	; (800f184 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x24>)
 800f16a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800f174:	4b04      	ldr	r3, [pc, #16]	; (800f188 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x28>)
 800f176:	681b      	ldr	r3, [r3, #0]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bc80      	pop	{r7}
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	20000f18 	.word	0x20000f18
 800f188:	20000f10 	.word	0x20000f10

0800f18c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f19e:	2200      	movs	r2, #0
 800f1a0:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bc80      	pop	{r7}
 800f1ac:	4770      	bx	lr

0800f1ae <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b084      	sub	sp, #16
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1c0:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	7810      	ldrb	r0, [r2, #0]
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	7852      	ldrb	r2, [r2, #1]
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	2302      	movs	r3, #2
 800f1da:	2101      	movs	r1, #1
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f006 fbe9 	bl	80159b4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1fa:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d10c      	bne.n	800f21e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	7810      	ldrb	r0, [r2, #0]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	7852      	ldrb	r2, [r2, #1]
 800f214:	4611      	mov	r1, r2
 800f216:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2200      	movs	r2, #0
 800f21c:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800f228:	b480      	push	{r7}
 800f22a:	b083      	sub	sp, #12
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	220a      	movs	r2, #10
 800f234:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800f236:	4b03      	ldr	r3, [pc, #12]	; (800f244 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bc80      	pop	{r7}
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	2000001c 	.word	0x2000001c

0800f248 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800f248:	b480      	push	{r7}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f252:	2302      	movs	r3, #2
 800f254:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d005      	beq.n	800f268 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800f264:	2300      	movs	r3, #0
 800f266:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f268:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	bc80      	pop	{r7}
 800f272:	4770      	bx	lr

0800f274 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	4613      	mov	r3, r2
 800f280:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d101      	bne.n	800f28c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f288:	2302      	movs	r3, #2
 800f28a:	e01a      	b.n	800f2c2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f292:	2b00      	cmp	r3, #0
 800f294:	d003      	beq.n	800f29e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2200      	movs	r2, #0
 800f29a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d003      	beq.n	800f2ac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	68ba      	ldr	r2, [r7, #8]
 800f2a8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	79fa      	ldrb	r2, [r7, #7]
 800f2b8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f006 fa1e 	bl	80156fc <USBD_LL_Init>

  return USBD_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b085      	sub	sp, #20
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
 800f2d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d006      	beq.n	800f2ec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	683a      	ldr	r2, [r7, #0]
 800f2e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	73fb      	strb	r3, [r7, #15]
 800f2ea:	e001      	b.n	800f2f0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f2ec:	2302      	movs	r3, #2
 800f2ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bc80      	pop	{r7}
 800f2fa:	4770      	bx	lr

0800f2fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f006 fa49 	bl	801579c <USBD_LL_Start>

  return USBD_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	bc80      	pop	{r7}
 800f326:	4770      	bx	lr

0800f328 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f334:	2302      	movs	r3, #2
 800f336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00c      	beq.n	800f35c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	78fa      	ldrb	r2, [r7, #3]
 800f34c:	4611      	mov	r1, r2
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	4798      	blx	r3
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f358:	2300      	movs	r3, #0
 800f35a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3710      	adds	r7, #16
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b082      	sub	sp, #8
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	460b      	mov	r3, r1
 800f370:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	78fa      	ldrb	r2, [r7, #3]
 800f37c:	4611      	mov	r1, r2
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	4798      	blx	r3

  return USBD_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 fed7 	bl	8010152 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f3c0:	f003 031f 	and.w	r3, r3, #31
 800f3c4:	2b02      	cmp	r3, #2
 800f3c6:	d016      	beq.n	800f3f6 <USBD_LL_SetupStage+0x6a>
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d81c      	bhi.n	800f406 <USBD_LL_SetupStage+0x7a>
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d002      	beq.n	800f3d6 <USBD_LL_SetupStage+0x4a>
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d008      	beq.n	800f3e6 <USBD_LL_SetupStage+0x5a>
 800f3d4:	e017      	b.n	800f406 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f9ca 	bl	800f778 <USBD_StdDevReq>
      break;
 800f3e4:	e01a      	b.n	800f41c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 fa2c 	bl	800f84c <USBD_StdItfReq>
      break;
 800f3f4:	e012      	b.n	800f41c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fa6c 	bl	800f8dc <USBD_StdEPReq>
      break;
 800f404:	e00a      	b.n	800f41c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f40c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f410:	b2db      	uxtb	r3, r3
 800f412:	4619      	mov	r1, r3
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f006 fa21 	bl	801585c <USBD_LL_StallEP>
      break;
 800f41a:	bf00      	nop
  }

  return USBD_OK;
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b086      	sub	sp, #24
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	460b      	mov	r3, r1
 800f430:	607a      	str	r2, [r7, #4]
 800f432:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f434:	7afb      	ldrb	r3, [r7, #11]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d14b      	bne.n	800f4d2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f440:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f448:	2b03      	cmp	r3, #3
 800f44a:	d134      	bne.n	800f4b6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	68da      	ldr	r2, [r3, #12]
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	429a      	cmp	r2, r3
 800f456:	d919      	bls.n	800f48c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	68da      	ldr	r2, [r3, #12]
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	1ad2      	subs	r2, r2, r3
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	68da      	ldr	r2, [r3, #12]
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f46e:	429a      	cmp	r2, r3
 800f470:	d203      	bcs.n	800f47a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800f476:	b29b      	uxth	r3, r3
 800f478:	e002      	b.n	800f480 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f47e:	b29b      	uxth	r3, r3
 800f480:	461a      	mov	r2, r3
 800f482:	6879      	ldr	r1, [r7, #4]
 800f484:	68f8      	ldr	r0, [r7, #12]
 800f486:	f000 ff56 	bl	8010336 <USBD_CtlContinueRx>
 800f48a:	e038      	b.n	800f4fe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00a      	beq.n	800f4ae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d105      	bne.n	800f4ae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f000 ff53 	bl	801035a <USBD_CtlSendStatus>
 800f4b4:	e023      	b.n	800f4fe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f4bc:	2b05      	cmp	r3, #5
 800f4be:	d11e      	bne.n	800f4fe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800f4c8:	2100      	movs	r1, #0
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f006 f9c6 	bl	801585c <USBD_LL_StallEP>
 800f4d0:	e015      	b.n	800f4fe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4d8:	699b      	ldr	r3, [r3, #24]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00d      	beq.n	800f4fa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f4e4:	2b03      	cmp	r3, #3
 800f4e6:	d108      	bne.n	800f4fa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ee:	699b      	ldr	r3, [r3, #24]
 800f4f0:	7afa      	ldrb	r2, [r7, #11]
 800f4f2:	4611      	mov	r1, r2
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	4798      	blx	r3
 800f4f8:	e001      	b.n	800f4fe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	e000      	b.n	800f500 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	460b      	mov	r3, r1
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f516:	7afb      	ldrb	r3, [r7, #11]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d17f      	bne.n	800f61c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	3314      	adds	r3, #20
 800f520:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f528:	2b02      	cmp	r3, #2
 800f52a:	d15c      	bne.n	800f5e6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	68da      	ldr	r2, [r3, #12]
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	691b      	ldr	r3, [r3, #16]
 800f534:	429a      	cmp	r2, r3
 800f536:	d915      	bls.n	800f564 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	68da      	ldr	r2, [r3, #12]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	1ad2      	subs	r2, r2, r3
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	461a      	mov	r2, r3
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f000 fec0 	bl	80102d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f556:	2300      	movs	r3, #0
 800f558:	2200      	movs	r2, #0
 800f55a:	2100      	movs	r1, #0
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f006 fa29 	bl	80159b4 <USBD_LL_PrepareReceive>
 800f562:	e04e      	b.n	800f602 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	697a      	ldr	r2, [r7, #20]
 800f56a:	6912      	ldr	r2, [r2, #16]
 800f56c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f570:	fb01 f202 	mul.w	r2, r1, r2
 800f574:	1a9b      	subs	r3, r3, r2
 800f576:	2b00      	cmp	r3, #0
 800f578:	d11c      	bne.n	800f5b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	689a      	ldr	r2, [r3, #8]
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f582:	429a      	cmp	r2, r3
 800f584:	d316      	bcc.n	800f5b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	689a      	ldr	r2, [r3, #8]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f590:	429a      	cmp	r2, r3
 800f592:	d20f      	bcs.n	800f5b4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f594:	2200      	movs	r2, #0
 800f596:	2100      	movs	r1, #0
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 fe9c 	bl	80102d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f006 fa01 	bl	80159b4 <USBD_LL_PrepareReceive>
 800f5b2:	e026      	b.n	800f602 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00a      	beq.n	800f5d6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f5c6:	2b03      	cmp	r3, #3
 800f5c8:	d105      	bne.n	800f5d6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f5d6:	2180      	movs	r1, #128	; 0x80
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f006 f93f 	bl	801585c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f000 fece 	bl	8010380 <USBD_CtlReceiveStatus>
 800f5e4:	e00d      	b.n	800f602 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f5ec:	2b04      	cmp	r3, #4
 800f5ee:	d004      	beq.n	800f5fa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d103      	bne.n	800f602 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f5fa:	2180      	movs	r1, #128	; 0x80
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f006 f92d 	bl	801585c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d11d      	bne.n	800f648 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f7ff fe81 	bl	800f314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2200      	movs	r2, #0
 800f616:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f61a:	e015      	b.n	800f648 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00d      	beq.n	800f644 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d108      	bne.n	800f644 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	7afa      	ldrb	r2, [r7, #11]
 800f63c:	4611      	mov	r1, r2
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	4798      	blx	r3
 800f642:	e001      	b.n	800f648 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f644:	2302      	movs	r3, #2
 800f646:	e000      	b.n	800f64a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3718      	adds	r7, #24
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b082      	sub	sp, #8
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f65a:	2340      	movs	r3, #64	; 0x40
 800f65c:	2200      	movs	r2, #0
 800f65e:	2100      	movs	r1, #0
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f006 f8b6 	bl	80157d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2201      	movs	r2, #1
 800f66a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2240      	movs	r2, #64	; 0x40
 800f672:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f676:	2340      	movs	r3, #64	; 0x40
 800f678:	2200      	movs	r2, #0
 800f67a:	2180      	movs	r1, #128	; 0x80
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f006 f8a8 	bl	80157d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2240      	movs	r2, #64	; 0x40
 800f68c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	6852      	ldr	r2, [r2, #4]
 800f6c2:	b2d2      	uxtb	r2, r2
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	4798      	blx	r3
  }

  return USBD_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	78fa      	ldrb	r2, [r7, #3]
 800f6e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bc80      	pop	{r7}
 800f6f0:	4770      	bx	lr

0800f6f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f6f2:	b480      	push	{r7}
 800f6f4:	b083      	sub	sp, #12
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2204      	movs	r2, #4
 800f70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	bc80      	pop	{r7}
 800f718:	4770      	bx	lr

0800f71a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b083      	sub	sp, #12
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f728:	2b04      	cmp	r3, #4
 800f72a:	d105      	bne.n	800f738 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	bc80      	pop	{r7}
 800f742:	4770      	bx	lr

0800f744 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f752:	2b03      	cmp	r3, #3
 800f754:	d10b      	bne.n	800f76e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f75c:	69db      	ldr	r3, [r3, #28]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d005      	beq.n	800f76e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f768:	69db      	ldr	r3, [r3, #28]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f782:	2300      	movs	r3, #0
 800f784:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f78e:	2b40      	cmp	r3, #64	; 0x40
 800f790:	d005      	beq.n	800f79e <USBD_StdDevReq+0x26>
 800f792:	2b40      	cmp	r3, #64	; 0x40
 800f794:	d84f      	bhi.n	800f836 <USBD_StdDevReq+0xbe>
 800f796:	2b00      	cmp	r3, #0
 800f798:	d009      	beq.n	800f7ae <USBD_StdDevReq+0x36>
 800f79a:	2b20      	cmp	r3, #32
 800f79c:	d14b      	bne.n	800f836 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	6839      	ldr	r1, [r7, #0]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	4798      	blx	r3
      break;
 800f7ac:	e048      	b.n	800f840 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	785b      	ldrb	r3, [r3, #1]
 800f7b2:	2b09      	cmp	r3, #9
 800f7b4:	d839      	bhi.n	800f82a <USBD_StdDevReq+0xb2>
 800f7b6:	a201      	add	r2, pc, #4	; (adr r2, 800f7bc <USBD_StdDevReq+0x44>)
 800f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7bc:	0800f80d 	.word	0x0800f80d
 800f7c0:	0800f821 	.word	0x0800f821
 800f7c4:	0800f82b 	.word	0x0800f82b
 800f7c8:	0800f817 	.word	0x0800f817
 800f7cc:	0800f82b 	.word	0x0800f82b
 800f7d0:	0800f7ef 	.word	0x0800f7ef
 800f7d4:	0800f7e5 	.word	0x0800f7e5
 800f7d8:	0800f82b 	.word	0x0800f82b
 800f7dc:	0800f803 	.word	0x0800f803
 800f7e0:	0800f7f9 	.word	0x0800f7f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 f9dc 	bl	800fba4 <USBD_GetDescriptor>
          break;
 800f7ec:	e022      	b.n	800f834 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f7ee:	6839      	ldr	r1, [r7, #0]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 fb3f 	bl	800fe74 <USBD_SetAddress>
          break;
 800f7f6:	e01d      	b.n	800f834 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800f7f8:	6839      	ldr	r1, [r7, #0]
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fb7e 	bl	800fefc <USBD_SetConfig>
          break;
 800f800:	e018      	b.n	800f834 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f802:	6839      	ldr	r1, [r7, #0]
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f000 fc07 	bl	8010018 <USBD_GetConfig>
          break;
 800f80a:	e013      	b.n	800f834 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f80c:	6839      	ldr	r1, [r7, #0]
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f000 fc37 	bl	8010082 <USBD_GetStatus>
          break;
 800f814:	e00e      	b.n	800f834 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 fc65 	bl	80100e8 <USBD_SetFeature>
          break;
 800f81e:	e009      	b.n	800f834 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 fc74 	bl	8010110 <USBD_ClrFeature>
          break;
 800f828:	e004      	b.n	800f834 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fccc 	bl	80101ca <USBD_CtlError>
          break;
 800f832:	bf00      	nop
      }
      break;
 800f834:	e004      	b.n	800f840 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800f836:	6839      	ldr	r1, [r7, #0]
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fcc6 	bl	80101ca <USBD_CtlError>
      break;
 800f83e:	bf00      	nop
  }

  return ret;
 800f840:	7bfb      	ldrb	r3, [r7, #15]
}
 800f842:	4618      	mov	r0, r3
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop

0800f84c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f856:	2300      	movs	r3, #0
 800f858:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f862:	2b40      	cmp	r3, #64	; 0x40
 800f864:	d005      	beq.n	800f872 <USBD_StdItfReq+0x26>
 800f866:	2b40      	cmp	r3, #64	; 0x40
 800f868:	d82e      	bhi.n	800f8c8 <USBD_StdItfReq+0x7c>
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d001      	beq.n	800f872 <USBD_StdItfReq+0x26>
 800f86e:	2b20      	cmp	r3, #32
 800f870:	d12a      	bne.n	800f8c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f878:	3b01      	subs	r3, #1
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d81d      	bhi.n	800f8ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	889b      	ldrh	r3, [r3, #4]
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b01      	cmp	r3, #1
 800f886:	d813      	bhi.n	800f8b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f88e:	689b      	ldr	r3, [r3, #8]
 800f890:	6839      	ldr	r1, [r7, #0]
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	4798      	blx	r3
 800f896:	4603      	mov	r3, r0
 800f898:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	88db      	ldrh	r3, [r3, #6]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d110      	bne.n	800f8c4 <USBD_StdItfReq+0x78>
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d10d      	bne.n	800f8c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fd56 	bl	801035a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f8ae:	e009      	b.n	800f8c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800f8b0:	6839      	ldr	r1, [r7, #0]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fc89 	bl	80101ca <USBD_CtlError>
          break;
 800f8b8:	e004      	b.n	800f8c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 fc84 	bl	80101ca <USBD_CtlError>
          break;
 800f8c2:	e000      	b.n	800f8c6 <USBD_StdItfReq+0x7a>
          break;
 800f8c4:	bf00      	nop
      }
      break;
 800f8c6:	e004      	b.n	800f8d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fc7d 	bl	80101ca <USBD_CtlError>
      break;
 800f8d0:	bf00      	nop
  }

  return USBD_OK;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	889b      	ldrh	r3, [r3, #4]
 800f8ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8f8:	2b40      	cmp	r3, #64	; 0x40
 800f8fa:	d007      	beq.n	800f90c <USBD_StdEPReq+0x30>
 800f8fc:	2b40      	cmp	r3, #64	; 0x40
 800f8fe:	f200 8146 	bhi.w	800fb8e <USBD_StdEPReq+0x2b2>
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00a      	beq.n	800f91c <USBD_StdEPReq+0x40>
 800f906:	2b20      	cmp	r3, #32
 800f908:	f040 8141 	bne.w	800fb8e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	4798      	blx	r3
      break;
 800f91a:	e13d      	b.n	800fb98 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f924:	2b20      	cmp	r3, #32
 800f926:	d10a      	bne.n	800f93e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	6839      	ldr	r1, [r7, #0]
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	4798      	blx	r3
 800f936:	4603      	mov	r3, r0
 800f938:	73fb      	strb	r3, [r7, #15]

        return ret;
 800f93a:	7bfb      	ldrb	r3, [r7, #15]
 800f93c:	e12d      	b.n	800fb9a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	785b      	ldrb	r3, [r3, #1]
 800f942:	2b03      	cmp	r3, #3
 800f944:	d007      	beq.n	800f956 <USBD_StdEPReq+0x7a>
 800f946:	2b03      	cmp	r3, #3
 800f948:	f300 811b 	bgt.w	800fb82 <USBD_StdEPReq+0x2a6>
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d072      	beq.n	800fa36 <USBD_StdEPReq+0x15a>
 800f950:	2b01      	cmp	r3, #1
 800f952:	d03a      	beq.n	800f9ca <USBD_StdEPReq+0xee>
 800f954:	e115      	b.n	800fb82 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d002      	beq.n	800f966 <USBD_StdEPReq+0x8a>
 800f960:	2b03      	cmp	r3, #3
 800f962:	d015      	beq.n	800f990 <USBD_StdEPReq+0xb4>
 800f964:	e02b      	b.n	800f9be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f966:	7bbb      	ldrb	r3, [r7, #14]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00c      	beq.n	800f986 <USBD_StdEPReq+0xaa>
 800f96c:	7bbb      	ldrb	r3, [r7, #14]
 800f96e:	2b80      	cmp	r3, #128	; 0x80
 800f970:	d009      	beq.n	800f986 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f972:	7bbb      	ldrb	r3, [r7, #14]
 800f974:	4619      	mov	r1, r3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f005 ff70 	bl	801585c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f97c:	2180      	movs	r1, #128	; 0x80
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f005 ff6c 	bl	801585c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f984:	e020      	b.n	800f9c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 fc1e 	bl	80101ca <USBD_CtlError>
              break;
 800f98e:	e01b      	b.n	800f9c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	885b      	ldrh	r3, [r3, #2]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10e      	bne.n	800f9b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800f998:	7bbb      	ldrb	r3, [r7, #14]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d00b      	beq.n	800f9b6 <USBD_StdEPReq+0xda>
 800f99e:	7bbb      	ldrb	r3, [r7, #14]
 800f9a0:	2b80      	cmp	r3, #128	; 0x80
 800f9a2:	d008      	beq.n	800f9b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	88db      	ldrh	r3, [r3, #6]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d104      	bne.n	800f9b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800f9ac:	7bbb      	ldrb	r3, [r7, #14]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f005 ff53 	bl	801585c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fccf 	bl	801035a <USBD_CtlSendStatus>

              break;
 800f9bc:	e004      	b.n	800f9c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800f9be:	6839      	ldr	r1, [r7, #0]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fc02 	bl	80101ca <USBD_CtlError>
              break;
 800f9c6:	bf00      	nop
          }
          break;
 800f9c8:	e0e0      	b.n	800fb8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d002      	beq.n	800f9da <USBD_StdEPReq+0xfe>
 800f9d4:	2b03      	cmp	r3, #3
 800f9d6:	d015      	beq.n	800fa04 <USBD_StdEPReq+0x128>
 800f9d8:	e026      	b.n	800fa28 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9da:	7bbb      	ldrb	r3, [r7, #14]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00c      	beq.n	800f9fa <USBD_StdEPReq+0x11e>
 800f9e0:	7bbb      	ldrb	r3, [r7, #14]
 800f9e2:	2b80      	cmp	r3, #128	; 0x80
 800f9e4:	d009      	beq.n	800f9fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f9e6:	7bbb      	ldrb	r3, [r7, #14]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f005 ff36 	bl	801585c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f9f0:	2180      	movs	r1, #128	; 0x80
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f005 ff32 	bl	801585c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9f8:	e01c      	b.n	800fa34 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fbe4 	bl	80101ca <USBD_CtlError>
              break;
 800fa02:	e017      	b.n	800fa34 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	885b      	ldrh	r3, [r3, #2]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d112      	bne.n	800fa32 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fa0c:	7bbb      	ldrb	r3, [r7, #14]
 800fa0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d004      	beq.n	800fa20 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800fa16:	7bbb      	ldrb	r3, [r7, #14]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f005 ff3d 	bl	801589a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 fc9a 	bl	801035a <USBD_CtlSendStatus>
              }
              break;
 800fa26:	e004      	b.n	800fa32 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f000 fbcd 	bl	80101ca <USBD_CtlError>
              break;
 800fa30:	e000      	b.n	800fa34 <USBD_StdEPReq+0x158>
              break;
 800fa32:	bf00      	nop
          }
          break;
 800fa34:	e0aa      	b.n	800fb8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa3c:	2b02      	cmp	r3, #2
 800fa3e:	d002      	beq.n	800fa46 <USBD_StdEPReq+0x16a>
 800fa40:	2b03      	cmp	r3, #3
 800fa42:	d032      	beq.n	800faaa <USBD_StdEPReq+0x1ce>
 800fa44:	e097      	b.n	800fb76 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa46:	7bbb      	ldrb	r3, [r7, #14]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d007      	beq.n	800fa5c <USBD_StdEPReq+0x180>
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	2b80      	cmp	r3, #128	; 0x80
 800fa50:	d004      	beq.n	800fa5c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 fbb8 	bl	80101ca <USBD_CtlError>
                break;
 800fa5a:	e091      	b.n	800fb80 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	da0b      	bge.n	800fa7c <USBD_StdEPReq+0x1a0>
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
 800fa66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4413      	add	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	3310      	adds	r3, #16
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	4413      	add	r3, r2
 800fa78:	3304      	adds	r3, #4
 800fa7a:	e00b      	b.n	800fa94 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
 800fa7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa82:	4613      	mov	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4413      	add	r3, r2
 800fa88:	009b      	lsls	r3, r3, #2
 800fa8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	4413      	add	r3, r2
 800fa92:	3304      	adds	r3, #4
 800fa94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fbfb 	bl	801029e <USBD_CtlSendData>
              break;
 800faa8:	e06a      	b.n	800fb80 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800faaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	da11      	bge.n	800fad6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fab2:	7bbb      	ldrb	r3, [r7, #14]
 800fab4:	f003 020f 	and.w	r2, r3, #15
 800fab8:	6879      	ldr	r1, [r7, #4]
 800faba:	4613      	mov	r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	4413      	add	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	440b      	add	r3, r1
 800fac4:	3318      	adds	r3, #24
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d117      	bne.n	800fafc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800facc:	6839      	ldr	r1, [r7, #0]
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 fb7b 	bl	80101ca <USBD_CtlError>
                  break;
 800fad4:	e054      	b.n	800fb80 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fad6:	7bbb      	ldrb	r3, [r7, #14]
 800fad8:	f003 020f 	and.w	r2, r3, #15
 800fadc:	6879      	ldr	r1, [r7, #4]
 800fade:	4613      	mov	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	440b      	add	r3, r1
 800fae8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d104      	bne.n	800fafc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800faf2:	6839      	ldr	r1, [r7, #0]
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 fb68 	bl	80101ca <USBD_CtlError>
                  break;
 800fafa:	e041      	b.n	800fb80 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fafc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	da0b      	bge.n	800fb1c <USBD_StdEPReq+0x240>
 800fb04:	7bbb      	ldrb	r3, [r7, #14]
 800fb06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	3310      	adds	r3, #16
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	4413      	add	r3, r2
 800fb18:	3304      	adds	r3, #4
 800fb1a:	e00b      	b.n	800fb34 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb1c:	7bbb      	ldrb	r3, [r7, #14]
 800fb1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb22:	4613      	mov	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	4413      	add	r3, r2
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	4413      	add	r3, r2
 800fb32:	3304      	adds	r3, #4
 800fb34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb36:	7bbb      	ldrb	r3, [r7, #14]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d002      	beq.n	800fb42 <USBD_StdEPReq+0x266>
 800fb3c:	7bbb      	ldrb	r3, [r7, #14]
 800fb3e:	2b80      	cmp	r3, #128	; 0x80
 800fb40:	d103      	bne.n	800fb4a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	2200      	movs	r2, #0
 800fb46:	601a      	str	r2, [r3, #0]
 800fb48:	e00e      	b.n	800fb68 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800fb4a:	7bbb      	ldrb	r3, [r7, #14]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f005 fec2 	bl	80158d8 <USBD_LL_IsStallEP>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	e002      	b.n	800fb68 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2200      	movs	r2, #0
 800fb66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	2202      	movs	r2, #2
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fb95 	bl	801029e <USBD_CtlSendData>
              break;
 800fb74:	e004      	b.n	800fb80 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 fb26 	bl	80101ca <USBD_CtlError>
              break;
 800fb7e:	bf00      	nop
          }
          break;
 800fb80:	e004      	b.n	800fb8c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800fb82:	6839      	ldr	r1, [r7, #0]
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 fb20 	bl	80101ca <USBD_CtlError>
          break;
 800fb8a:	bf00      	nop
      }
      break;
 800fb8c:	e004      	b.n	800fb98 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fb1a 	bl	80101ca <USBD_CtlError>
      break;
 800fb96:	bf00      	nop
  }

  return ret;
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	885b      	ldrh	r3, [r3, #2]
 800fbbe:	0a1b      	lsrs	r3, r3, #8
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	2b06      	cmp	r3, #6
 800fbc6:	f200 8128 	bhi.w	800fe1a <USBD_GetDescriptor+0x276>
 800fbca:	a201      	add	r2, pc, #4	; (adr r2, 800fbd0 <USBD_GetDescriptor+0x2c>)
 800fbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd0:	0800fbed 	.word	0x0800fbed
 800fbd4:	0800fc05 	.word	0x0800fc05
 800fbd8:	0800fc45 	.word	0x0800fc45
 800fbdc:	0800fe1b 	.word	0x0800fe1b
 800fbe0:	0800fe1b 	.word	0x0800fe1b
 800fbe4:	0800fdbb 	.word	0x0800fdbb
 800fbe8:	0800fde7 	.word	0x0800fde7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	7c12      	ldrb	r2, [r2, #16]
 800fbf8:	f107 0108 	add.w	r1, r7, #8
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4798      	blx	r3
 800fc00:	60f8      	str	r0, [r7, #12]
      break;
 800fc02:	e112      	b.n	800fe2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	7c1b      	ldrb	r3, [r3, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10d      	bne.n	800fc28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc14:	f107 0208 	add.w	r2, r7, #8
 800fc18:	4610      	mov	r0, r2
 800fc1a:	4798      	blx	r3
 800fc1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	3301      	adds	r3, #1
 800fc22:	2202      	movs	r2, #2
 800fc24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fc26:	e100      	b.n	800fe2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc30:	f107 0208 	add.w	r2, r7, #8
 800fc34:	4610      	mov	r0, r2
 800fc36:	4798      	blx	r3
 800fc38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	2202      	movs	r2, #2
 800fc40:	701a      	strb	r2, [r3, #0]
      break;
 800fc42:	e0f2      	b.n	800fe2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	885b      	ldrh	r3, [r3, #2]
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b05      	cmp	r3, #5
 800fc4c:	f200 80ac 	bhi.w	800fda8 <USBD_GetDescriptor+0x204>
 800fc50:	a201      	add	r2, pc, #4	; (adr r2, 800fc58 <USBD_GetDescriptor+0xb4>)
 800fc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc56:	bf00      	nop
 800fc58:	0800fc71 	.word	0x0800fc71
 800fc5c:	0800fca5 	.word	0x0800fca5
 800fc60:	0800fcd9 	.word	0x0800fcd9
 800fc64:	0800fd0d 	.word	0x0800fd0d
 800fc68:	0800fd41 	.word	0x0800fd41
 800fc6c:	0800fd75 	.word	0x0800fd75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00b      	beq.n	800fc94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	7c12      	ldrb	r2, [r2, #16]
 800fc88:	f107 0108 	add.w	r1, r7, #8
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	4798      	blx	r3
 800fc90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc92:	e091      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 fa97 	bl	80101ca <USBD_CtlError>
            err++;
 800fc9c:	7afb      	ldrb	r3, [r7, #11]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	72fb      	strb	r3, [r7, #11]
          break;
 800fca2:	e089      	b.n	800fdb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00b      	beq.n	800fcc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	7c12      	ldrb	r2, [r2, #16]
 800fcbc:	f107 0108 	add.w	r1, r7, #8
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	4798      	blx	r3
 800fcc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcc6:	e077      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcc8:	6839      	ldr	r1, [r7, #0]
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fa7d 	bl	80101ca <USBD_CtlError>
            err++;
 800fcd0:	7afb      	ldrb	r3, [r7, #11]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	72fb      	strb	r3, [r7, #11]
          break;
 800fcd6:	e06f      	b.n	800fdb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00b      	beq.n	800fcfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	7c12      	ldrb	r2, [r2, #16]
 800fcf0:	f107 0108 	add.w	r1, r7, #8
 800fcf4:	4610      	mov	r0, r2
 800fcf6:	4798      	blx	r3
 800fcf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcfa:	e05d      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcfc:	6839      	ldr	r1, [r7, #0]
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 fa63 	bl	80101ca <USBD_CtlError>
            err++;
 800fd04:	7afb      	ldrb	r3, [r7, #11]
 800fd06:	3301      	adds	r3, #1
 800fd08:	72fb      	strb	r3, [r7, #11]
          break;
 800fd0a:	e055      	b.n	800fdb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00b      	beq.n	800fd30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	7c12      	ldrb	r2, [r2, #16]
 800fd24:	f107 0108 	add.w	r1, r7, #8
 800fd28:	4610      	mov	r0, r2
 800fd2a:	4798      	blx	r3
 800fd2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd2e:	e043      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 fa49 	bl	80101ca <USBD_CtlError>
            err++;
 800fd38:	7afb      	ldrb	r3, [r7, #11]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd3e:	e03b      	b.n	800fdb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00b      	beq.n	800fd64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd52:	695b      	ldr	r3, [r3, #20]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	7c12      	ldrb	r2, [r2, #16]
 800fd58:	f107 0108 	add.w	r1, r7, #8
 800fd5c:	4610      	mov	r0, r2
 800fd5e:	4798      	blx	r3
 800fd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd62:	e029      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd64:	6839      	ldr	r1, [r7, #0]
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fa2f 	bl	80101ca <USBD_CtlError>
            err++;
 800fd6c:	7afb      	ldrb	r3, [r7, #11]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	72fb      	strb	r3, [r7, #11]
          break;
 800fd72:	e021      	b.n	800fdb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd7a:	699b      	ldr	r3, [r3, #24]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00b      	beq.n	800fd98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd86:	699b      	ldr	r3, [r3, #24]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	7c12      	ldrb	r2, [r2, #16]
 800fd8c:	f107 0108 	add.w	r1, r7, #8
 800fd90:	4610      	mov	r0, r2
 800fd92:	4798      	blx	r3
 800fd94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd96:	e00f      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 fa15 	bl	80101ca <USBD_CtlError>
            err++;
 800fda0:	7afb      	ldrb	r3, [r7, #11]
 800fda2:	3301      	adds	r3, #1
 800fda4:	72fb      	strb	r3, [r7, #11]
          break;
 800fda6:	e007      	b.n	800fdb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fa0d 	bl	80101ca <USBD_CtlError>
          err++;
 800fdb0:	7afb      	ldrb	r3, [r7, #11]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800fdb6:	e038      	b.n	800fe2a <USBD_GetDescriptor+0x286>
 800fdb8:	e037      	b.n	800fe2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	7c1b      	ldrb	r3, [r3, #16]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d109      	bne.n	800fdd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdca:	f107 0208 	add.w	r2, r7, #8
 800fdce:	4610      	mov	r0, r2
 800fdd0:	4798      	blx	r3
 800fdd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fdd4:	e029      	b.n	800fe2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fdd6:	6839      	ldr	r1, [r7, #0]
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 f9f6 	bl	80101ca <USBD_CtlError>
        err++;
 800fdde:	7afb      	ldrb	r3, [r7, #11]
 800fde0:	3301      	adds	r3, #1
 800fde2:	72fb      	strb	r3, [r7, #11]
      break;
 800fde4:	e021      	b.n	800fe2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	7c1b      	ldrb	r3, [r3, #16]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10d      	bne.n	800fe0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf6:	f107 0208 	add.w	r2, r7, #8
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	4798      	blx	r3
 800fdfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	3301      	adds	r3, #1
 800fe04:	2207      	movs	r2, #7
 800fe06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe08:	e00f      	b.n	800fe2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fe0a:	6839      	ldr	r1, [r7, #0]
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f9dc 	bl	80101ca <USBD_CtlError>
        err++;
 800fe12:	7afb      	ldrb	r3, [r7, #11]
 800fe14:	3301      	adds	r3, #1
 800fe16:	72fb      	strb	r3, [r7, #11]
      break;
 800fe18:	e007      	b.n	800fe2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 f9d4 	bl	80101ca <USBD_CtlError>
      err++;
 800fe22:	7afb      	ldrb	r3, [r7, #11]
 800fe24:	3301      	adds	r3, #1
 800fe26:	72fb      	strb	r3, [r7, #11]
      break;
 800fe28:	bf00      	nop
  }

  if (err != 0U)
 800fe2a:	7afb      	ldrb	r3, [r7, #11]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d11c      	bne.n	800fe6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800fe30:	893b      	ldrh	r3, [r7, #8]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d011      	beq.n	800fe5a <USBD_GetDescriptor+0x2b6>
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	88db      	ldrh	r3, [r3, #6]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d00d      	beq.n	800fe5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	88da      	ldrh	r2, [r3, #6]
 800fe42:	893b      	ldrh	r3, [r7, #8]
 800fe44:	4293      	cmp	r3, r2
 800fe46:	bf28      	it	cs
 800fe48:	4613      	movcs	r3, r2
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe4e:	893b      	ldrh	r3, [r7, #8]
 800fe50:	461a      	mov	r2, r3
 800fe52:	68f9      	ldr	r1, [r7, #12]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fa22 	bl	801029e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	88db      	ldrh	r3, [r3, #6]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d104      	bne.n	800fe6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fa79 	bl	801035a <USBD_CtlSendStatus>
 800fe68:	e000      	b.n	800fe6c <USBD_GetDescriptor+0x2c8>
    return;
 800fe6a:	bf00      	nop
    }
  }
}
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop

0800fe74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	889b      	ldrh	r3, [r3, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d130      	bne.n	800fee8 <USBD_SetAddress+0x74>
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	88db      	ldrh	r3, [r3, #6]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d12c      	bne.n	800fee8 <USBD_SetAddress+0x74>
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	885b      	ldrh	r3, [r3, #2]
 800fe92:	2b7f      	cmp	r3, #127	; 0x7f
 800fe94:	d828      	bhi.n	800fee8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	885b      	ldrh	r3, [r3, #2]
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fea8:	2b03      	cmp	r3, #3
 800feaa:	d104      	bne.n	800feb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800feac:	6839      	ldr	r1, [r7, #0]
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f98b 	bl	80101ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb4:	e01d      	b.n	800fef2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	7bfa      	ldrb	r2, [r7, #15]
 800feba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f005 fd34 	bl	8015930 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fa46 	bl	801035a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fece:	7bfb      	ldrb	r3, [r7, #15]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2202      	movs	r2, #2
 800fed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fedc:	e009      	b.n	800fef2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2201      	movs	r2, #1
 800fee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fee6:	e004      	b.n	800fef2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f96d 	bl	80101ca <USBD_CtlError>
  }
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
	...

0800fefc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	885b      	ldrh	r3, [r3, #2]
 800ff0a:	b2da      	uxtb	r2, r3
 800ff0c:	4b41      	ldr	r3, [pc, #260]	; (8010014 <USBD_SetConfig+0x118>)
 800ff0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff10:	4b40      	ldr	r3, [pc, #256]	; (8010014 <USBD_SetConfig+0x118>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d904      	bls.n	800ff22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f955 	bl	80101ca <USBD_CtlError>
 800ff20:	e075      	b.n	801000e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff28:	2b02      	cmp	r3, #2
 800ff2a:	d002      	beq.n	800ff32 <USBD_SetConfig+0x36>
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d023      	beq.n	800ff78 <USBD_SetConfig+0x7c>
 800ff30:	e062      	b.n	800fff8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ff32:	4b38      	ldr	r3, [pc, #224]	; (8010014 <USBD_SetConfig+0x118>)
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d01a      	beq.n	800ff70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ff3a:	4b36      	ldr	r3, [pc, #216]	; (8010014 <USBD_SetConfig+0x118>)
 800ff3c:	781b      	ldrb	r3, [r3, #0]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2203      	movs	r2, #3
 800ff48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ff4c:	4b31      	ldr	r3, [pc, #196]	; (8010014 <USBD_SetConfig+0x118>)
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	4619      	mov	r1, r3
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7ff f9e8 	bl	800f328 <USBD_SetClassConfig>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d104      	bne.n	800ff68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ff5e:	6839      	ldr	r1, [r7, #0]
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f932 	bl	80101ca <USBD_CtlError>
            return;
 800ff66:	e052      	b.n	801000e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f9f6 	bl	801035a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ff6e:	e04e      	b.n	801000e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f9f2 	bl	801035a <USBD_CtlSendStatus>
        break;
 800ff76:	e04a      	b.n	801000e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ff78:	4b26      	ldr	r3, [pc, #152]	; (8010014 <USBD_SetConfig+0x118>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d112      	bne.n	800ffa6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2202      	movs	r2, #2
 800ff84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ff88:	4b22      	ldr	r3, [pc, #136]	; (8010014 <USBD_SetConfig+0x118>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ff92:	4b20      	ldr	r3, [pc, #128]	; (8010014 <USBD_SetConfig+0x118>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	4619      	mov	r1, r3
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff f9e4 	bl	800f366 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f9db 	bl	801035a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ffa4:	e033      	b.n	801000e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ffa6:	4b1b      	ldr	r3, [pc, #108]	; (8010014 <USBD_SetConfig+0x118>)
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d01d      	beq.n	800fff0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	4619      	mov	r1, r3
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff f9d2 	bl	800f366 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ffc2:	4b14      	ldr	r3, [pc, #80]	; (8010014 <USBD_SetConfig+0x118>)
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ffcc:	4b11      	ldr	r3, [pc, #68]	; (8010014 <USBD_SetConfig+0x118>)
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7ff f9a8 	bl	800f328 <USBD_SetClassConfig>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d104      	bne.n	800ffe8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ffde:	6839      	ldr	r1, [r7, #0]
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 f8f2 	bl	80101ca <USBD_CtlError>
            return;
 800ffe6:	e012      	b.n	801000e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 f9b6 	bl	801035a <USBD_CtlSendStatus>
        break;
 800ffee:	e00e      	b.n	801000e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f9b2 	bl	801035a <USBD_CtlSendStatus>
        break;
 800fff6:	e00a      	b.n	801000e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f8e5 	bl	80101ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8010000:	4b04      	ldr	r3, [pc, #16]	; (8010014 <USBD_SetConfig+0x118>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	4619      	mov	r1, r3
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f7ff f9ad 	bl	800f366 <USBD_ClrClassConfig>
        break;
 801000c:	bf00      	nop
    }
  }
}
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	20000f1c 	.word	0x20000f1c

08010018 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	88db      	ldrh	r3, [r3, #6]
 8010026:	2b01      	cmp	r3, #1
 8010028:	d004      	beq.n	8010034 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801002a:	6839      	ldr	r1, [r7, #0]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 f8cc 	bl	80101ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010032:	e022      	b.n	801007a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801003a:	2b02      	cmp	r3, #2
 801003c:	dc02      	bgt.n	8010044 <USBD_GetConfig+0x2c>
 801003e:	2b00      	cmp	r3, #0
 8010040:	dc03      	bgt.n	801004a <USBD_GetConfig+0x32>
 8010042:	e015      	b.n	8010070 <USBD_GetConfig+0x58>
 8010044:	2b03      	cmp	r3, #3
 8010046:	d00b      	beq.n	8010060 <USBD_GetConfig+0x48>
 8010048:	e012      	b.n	8010070 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2200      	movs	r2, #0
 801004e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	3308      	adds	r3, #8
 8010054:	2201      	movs	r2, #1
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f920 	bl	801029e <USBD_CtlSendData>
        break;
 801005e:	e00c      	b.n	801007a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	3304      	adds	r3, #4
 8010064:	2201      	movs	r2, #1
 8010066:	4619      	mov	r1, r3
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f918 	bl	801029e <USBD_CtlSendData>
        break;
 801006e:	e004      	b.n	801007a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f8a9 	bl	80101ca <USBD_CtlError>
        break;
 8010078:	bf00      	nop
}
 801007a:	bf00      	nop
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b082      	sub	sp, #8
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010092:	3b01      	subs	r3, #1
 8010094:	2b02      	cmp	r3, #2
 8010096:	d81e      	bhi.n	80100d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	88db      	ldrh	r3, [r3, #6]
 801009c:	2b02      	cmp	r3, #2
 801009e:	d004      	beq.n	80100aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f891 	bl	80101ca <USBD_CtlError>
        break;
 80100a8:	e01a      	b.n	80100e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2201      	movs	r2, #1
 80100ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d005      	beq.n	80100c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	f043 0202 	orr.w	r2, r3, #2
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	330c      	adds	r3, #12
 80100ca:	2202      	movs	r2, #2
 80100cc:	4619      	mov	r1, r3
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 f8e5 	bl	801029e <USBD_CtlSendData>
      break;
 80100d4:	e004      	b.n	80100e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80100d6:	6839      	ldr	r1, [r7, #0]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 f876 	bl	80101ca <USBD_CtlError>
      break;
 80100de:	bf00      	nop
  }
}
 80100e0:	bf00      	nop
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	885b      	ldrh	r3, [r3, #2]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d106      	bne.n	8010108 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f929 	bl	801035a <USBD_CtlSendStatus>
  }
}
 8010108:	bf00      	nop
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b082      	sub	sp, #8
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010120:	3b01      	subs	r3, #1
 8010122:	2b02      	cmp	r3, #2
 8010124:	d80b      	bhi.n	801013e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	885b      	ldrh	r3, [r3, #2]
 801012a:	2b01      	cmp	r3, #1
 801012c:	d10c      	bne.n	8010148 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f90f 	bl	801035a <USBD_CtlSendStatus>
      }
      break;
 801013c:	e004      	b.n	8010148 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801013e:	6839      	ldr	r1, [r7, #0]
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 f842 	bl	80101ca <USBD_CtlError>
      break;
 8010146:	e000      	b.n	801014a <USBD_ClrFeature+0x3a>
      break;
 8010148:	bf00      	nop
  }
}
 801014a:	bf00      	nop
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010152:	b480      	push	{r7}
 8010154:	b083      	sub	sp, #12
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	781a      	ldrb	r2, [r3, #0]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	785a      	ldrb	r2, [r3, #1]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	3302      	adds	r3, #2
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	b29a      	uxth	r2, r3
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	3303      	adds	r3, #3
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	b29b      	uxth	r3, r3
 801017c:	021b      	lsls	r3, r3, #8
 801017e:	b29b      	uxth	r3, r3
 8010180:	4413      	add	r3, r2
 8010182:	b29a      	uxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	3304      	adds	r3, #4
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	b29a      	uxth	r2, r3
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	3305      	adds	r3, #5
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	b29b      	uxth	r3, r3
 8010198:	021b      	lsls	r3, r3, #8
 801019a:	b29b      	uxth	r3, r3
 801019c:	4413      	add	r3, r2
 801019e:	b29a      	uxth	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	3306      	adds	r3, #6
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	3307      	adds	r3, #7
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	021b      	lsls	r3, r3, #8
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	4413      	add	r3, r2
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	80da      	strh	r2, [r3, #6]

}
 80101c0:	bf00      	nop
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bc80      	pop	{r7}
 80101c8:	4770      	bx	lr

080101ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b082      	sub	sp, #8
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80101d4:	2180      	movs	r1, #128	; 0x80
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f005 fb40 	bl	801585c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80101dc:	2100      	movs	r1, #0
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f005 fb3c 	bl	801585c <USBD_LL_StallEP>
}
 80101e4:	bf00      	nop
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80101f8:	2300      	movs	r3, #0
 80101fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d032      	beq.n	8010268 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010202:	68f8      	ldr	r0, [r7, #12]
 8010204:	f000 f834 	bl	8010270 <USBD_GetLen>
 8010208:	4603      	mov	r3, r0
 801020a:	3301      	adds	r3, #1
 801020c:	b29b      	uxth	r3, r3
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	b29a      	uxth	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010216:	7dfb      	ldrb	r3, [r7, #23]
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	75fa      	strb	r2, [r7, #23]
 801021c:	461a      	mov	r2, r3
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	4413      	add	r3, r2
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	7812      	ldrb	r2, [r2, #0]
 8010226:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010228:	7dfb      	ldrb	r3, [r7, #23]
 801022a:	1c5a      	adds	r2, r3, #1
 801022c:	75fa      	strb	r2, [r7, #23]
 801022e:	461a      	mov	r2, r3
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	4413      	add	r3, r2
 8010234:	2203      	movs	r2, #3
 8010236:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010238:	e012      	b.n	8010260 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	1c5a      	adds	r2, r3, #1
 801023e:	60fa      	str	r2, [r7, #12]
 8010240:	7dfa      	ldrb	r2, [r7, #23]
 8010242:	1c51      	adds	r1, r2, #1
 8010244:	75f9      	strb	r1, [r7, #23]
 8010246:	4611      	mov	r1, r2
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	440a      	add	r2, r1
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010250:	7dfb      	ldrb	r3, [r7, #23]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	75fa      	strb	r2, [r7, #23]
 8010256:	461a      	mov	r2, r3
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	4413      	add	r3, r2
 801025c:	2200      	movs	r2, #0
 801025e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d1e8      	bne.n	801023a <USBD_GetString+0x4e>
    }
  }
}
 8010268:	bf00      	nop
 801026a:	3718      	adds	r7, #24
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010278:	2300      	movs	r3, #0
 801027a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801027c:	e005      	b.n	801028a <USBD_GetLen+0x1a>
  {
    len++;
 801027e:	7bfb      	ldrb	r3, [r7, #15]
 8010280:	3301      	adds	r3, #1
 8010282:	73fb      	strb	r3, [r7, #15]
    buf++;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3301      	adds	r3, #1
 8010288:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1f5      	bne.n	801027e <USBD_GetLen+0xe>
  }

  return len;
 8010292:	7bfb      	ldrb	r3, [r7, #15]
}
 8010294:	4618      	mov	r0, r3
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	bc80      	pop	{r7}
 801029c:	4770      	bx	lr

0801029e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801029e:	b580      	push	{r7, lr}
 80102a0:	b084      	sub	sp, #16
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	60f8      	str	r0, [r7, #12]
 80102a6:	60b9      	str	r1, [r7, #8]
 80102a8:	4613      	mov	r3, r2
 80102aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2202      	movs	r2, #2
 80102b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80102b4:	88fa      	ldrh	r2, [r7, #6]
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80102ba:	88fa      	ldrh	r2, [r7, #6]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102c0:	88fb      	ldrh	r3, [r7, #6]
 80102c2:	68ba      	ldr	r2, [r7, #8]
 80102c4:	2100      	movs	r1, #0
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f005 fb51 	bl	801596e <USBD_LL_Transmit>

  return USBD_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b084      	sub	sp, #16
 80102da:	af00      	add	r7, sp, #0
 80102dc:	60f8      	str	r0, [r7, #12]
 80102de:	60b9      	str	r1, [r7, #8]
 80102e0:	4613      	mov	r3, r2
 80102e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102e4:	88fb      	ldrh	r3, [r7, #6]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	2100      	movs	r1, #0
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f005 fb3f 	bl	801596e <USBD_LL_Transmit>

  return USBD_OK;
 80102f0:	2300      	movs	r3, #0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b084      	sub	sp, #16
 80102fe:	af00      	add	r7, sp, #0
 8010300:	60f8      	str	r0, [r7, #12]
 8010302:	60b9      	str	r1, [r7, #8]
 8010304:	4613      	mov	r3, r2
 8010306:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2203      	movs	r2, #3
 801030c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010310:	88fa      	ldrh	r2, [r7, #6]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8010318:	88fa      	ldrh	r2, [r7, #6]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010320:	88fb      	ldrh	r3, [r7, #6]
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	2100      	movs	r1, #0
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f005 fb44 	bl	80159b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b084      	sub	sp, #16
 801033a:	af00      	add	r7, sp, #0
 801033c:	60f8      	str	r0, [r7, #12]
 801033e:	60b9      	str	r1, [r7, #8]
 8010340:	4613      	mov	r3, r2
 8010342:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010344:	88fb      	ldrh	r3, [r7, #6]
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	2100      	movs	r1, #0
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f005 fb32 	bl	80159b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2204      	movs	r2, #4
 8010366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801036a:	2300      	movs	r3, #0
 801036c:	2200      	movs	r2, #0
 801036e:	2100      	movs	r1, #0
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f005 fafc 	bl	801596e <USBD_LL_Transmit>

  return USBD_OK;
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2205      	movs	r2, #5
 801038c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010390:	2300      	movs	r3, #0
 8010392:	2200      	movs	r2, #0
 8010394:	2100      	movs	r1, #0
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f005 fb0c 	bl	80159b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801039c:	2300      	movs	r3, #0
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	4603      	mov	r3, r0
 80103b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80103b2:	79fb      	ldrb	r3, [r7, #7]
 80103b4:	4a08      	ldr	r2, [pc, #32]	; (80103d8 <disk_status+0x30>)
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4413      	add	r3, r2
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	79fa      	ldrb	r2, [r7, #7]
 80103c0:	4905      	ldr	r1, [pc, #20]	; (80103d8 <disk_status+0x30>)
 80103c2:	440a      	add	r2, r1
 80103c4:	7a12      	ldrb	r2, [r2, #8]
 80103c6:	4610      	mov	r0, r2
 80103c8:	4798      	blx	r3
 80103ca:	4603      	mov	r3, r0
 80103cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	20000f40 	.word	0x20000f40

080103dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80103e6:	2300      	movs	r3, #0
 80103e8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80103ea:	79fb      	ldrb	r3, [r7, #7]
 80103ec:	4a0d      	ldr	r2, [pc, #52]	; (8010424 <disk_initialize+0x48>)
 80103ee:	5cd3      	ldrb	r3, [r2, r3]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d111      	bne.n	8010418 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	4a0b      	ldr	r2, [pc, #44]	; (8010424 <disk_initialize+0x48>)
 80103f8:	2101      	movs	r1, #1
 80103fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80103fc:	79fb      	ldrb	r3, [r7, #7]
 80103fe:	4a09      	ldr	r2, [pc, #36]	; (8010424 <disk_initialize+0x48>)
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	79fa      	ldrb	r2, [r7, #7]
 801040a:	4906      	ldr	r1, [pc, #24]	; (8010424 <disk_initialize+0x48>)
 801040c:	440a      	add	r2, r1
 801040e:	7a12      	ldrb	r2, [r2, #8]
 8010410:	4610      	mov	r0, r2
 8010412:	4798      	blx	r3
 8010414:	4603      	mov	r3, r0
 8010416:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010418:	7bfb      	ldrb	r3, [r7, #15]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	20000f40 	.word	0x20000f40

08010428 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010428:	b590      	push	{r4, r7, lr}
 801042a:	b087      	sub	sp, #28
 801042c:	af00      	add	r7, sp, #0
 801042e:	60b9      	str	r1, [r7, #8]
 8010430:	607a      	str	r2, [r7, #4]
 8010432:	603b      	str	r3, [r7, #0]
 8010434:	4603      	mov	r3, r0
 8010436:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	4a0a      	ldr	r2, [pc, #40]	; (8010464 <disk_read+0x3c>)
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	4413      	add	r3, r2
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	689c      	ldr	r4, [r3, #8]
 8010444:	7bfb      	ldrb	r3, [r7, #15]
 8010446:	4a07      	ldr	r2, [pc, #28]	; (8010464 <disk_read+0x3c>)
 8010448:	4413      	add	r3, r2
 801044a:	7a18      	ldrb	r0, [r3, #8]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	68b9      	ldr	r1, [r7, #8]
 8010452:	47a0      	blx	r4
 8010454:	4603      	mov	r3, r0
 8010456:	75fb      	strb	r3, [r7, #23]
  return res;
 8010458:	7dfb      	ldrb	r3, [r7, #23]
}
 801045a:	4618      	mov	r0, r3
 801045c:	371c      	adds	r7, #28
 801045e:	46bd      	mov	sp, r7
 8010460:	bd90      	pop	{r4, r7, pc}
 8010462:	bf00      	nop
 8010464:	20000f40 	.word	0x20000f40

08010468 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010468:	b590      	push	{r4, r7, lr}
 801046a:	b087      	sub	sp, #28
 801046c:	af00      	add	r7, sp, #0
 801046e:	60b9      	str	r1, [r7, #8]
 8010470:	607a      	str	r2, [r7, #4]
 8010472:	603b      	str	r3, [r7, #0]
 8010474:	4603      	mov	r3, r0
 8010476:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010478:	7bfb      	ldrb	r3, [r7, #15]
 801047a:	4a0a      	ldr	r2, [pc, #40]	; (80104a4 <disk_write+0x3c>)
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4413      	add	r3, r2
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	68dc      	ldr	r4, [r3, #12]
 8010484:	7bfb      	ldrb	r3, [r7, #15]
 8010486:	4a07      	ldr	r2, [pc, #28]	; (80104a4 <disk_write+0x3c>)
 8010488:	4413      	add	r3, r2
 801048a:	7a18      	ldrb	r0, [r3, #8]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	68b9      	ldr	r1, [r7, #8]
 8010492:	47a0      	blx	r4
 8010494:	4603      	mov	r3, r0
 8010496:	75fb      	strb	r3, [r7, #23]
  return res;
 8010498:	7dfb      	ldrb	r3, [r7, #23]
}
 801049a:	4618      	mov	r0, r3
 801049c:	371c      	adds	r7, #28
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd90      	pop	{r4, r7, pc}
 80104a2:	bf00      	nop
 80104a4:	20000f40 	.word	0x20000f40

080104a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	4603      	mov	r3, r0
 80104b0:	603a      	str	r2, [r7, #0]
 80104b2:	71fb      	strb	r3, [r7, #7]
 80104b4:	460b      	mov	r3, r1
 80104b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	4a09      	ldr	r2, [pc, #36]	; (80104e0 <disk_ioctl+0x38>)
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	4413      	add	r3, r2
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	79fa      	ldrb	r2, [r7, #7]
 80104c6:	4906      	ldr	r1, [pc, #24]	; (80104e0 <disk_ioctl+0x38>)
 80104c8:	440a      	add	r2, r1
 80104ca:	7a10      	ldrb	r0, [r2, #8]
 80104cc:	79b9      	ldrb	r1, [r7, #6]
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	4798      	blx	r3
 80104d2:	4603      	mov	r3, r0
 80104d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80104d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	20000f40 	.word	0x20000f40

080104e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80104e4:	b480      	push	{r7}
 80104e6:	b087      	sub	sp, #28
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80104f8:	e007      	b.n	801050a <mem_cpy+0x26>
		*d++ = *s++;
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	1c53      	adds	r3, r2, #1
 80104fe:	613b      	str	r3, [r7, #16]
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	1c59      	adds	r1, r3, #1
 8010504:	6179      	str	r1, [r7, #20]
 8010506:	7812      	ldrb	r2, [r2, #0]
 8010508:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	1e5a      	subs	r2, r3, #1
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d1f2      	bne.n	80104fa <mem_cpy+0x16>
}
 8010514:	bf00      	nop
 8010516:	bf00      	nop
 8010518:	371c      	adds	r7, #28
 801051a:	46bd      	mov	sp, r7
 801051c:	bc80      	pop	{r7}
 801051e:	4770      	bx	lr

08010520 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010520:	b480      	push	{r7}
 8010522:	b087      	sub	sp, #28
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8010530:	e005      	b.n	801053e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	1c5a      	adds	r2, r3, #1
 8010536:	617a      	str	r2, [r7, #20]
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	b2d2      	uxtb	r2, r2
 801053c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	1e5a      	subs	r2, r3, #1
 8010542:	607a      	str	r2, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1f4      	bne.n	8010532 <mem_set+0x12>
}
 8010548:	bf00      	nop
 801054a:	bf00      	nop
 801054c:	371c      	adds	r7, #28
 801054e:	46bd      	mov	sp, r7
 8010550:	bc80      	pop	{r7}
 8010552:	4770      	bx	lr

08010554 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8010554:	b480      	push	{r7}
 8010556:	b089      	sub	sp, #36	; 0x24
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	61fb      	str	r3, [r7, #28]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 801056c:	bf00      	nop
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	1e5a      	subs	r2, r3, #1
 8010572:	607a      	str	r2, [r7, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00d      	beq.n	8010594 <mem_cmp+0x40>
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	61fa      	str	r2, [r7, #28]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	4619      	mov	r1, r3
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	61ba      	str	r2, [r7, #24]
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	1acb      	subs	r3, r1, r3
 801058c:	617b      	str	r3, [r7, #20]
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d0ec      	beq.n	801056e <mem_cmp+0x1a>
	return r;
 8010594:	697b      	ldr	r3, [r7, #20]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3724      	adds	r7, #36	; 0x24
 801059a:	46bd      	mov	sp, r7
 801059c:	bc80      	pop	{r7}
 801059e:	4770      	bx	lr

080105a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80105aa:	e002      	b.n	80105b2 <chk_chr+0x12>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	3301      	adds	r3, #1
 80105b0:	607b      	str	r3, [r7, #4]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d005      	beq.n	80105c6 <chk_chr+0x26>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d1f2      	bne.n	80105ac <chk_chr+0xc>
	return *str;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	781b      	ldrb	r3, [r3, #0]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	370c      	adds	r7, #12
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bc80      	pop	{r7}
 80105d2:	4770      	bx	lr

080105d4 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80105e2:	4618      	mov	r0, r3
 80105e4:	f002 fc68 	bl	8012eb8 <ff_req_grant>
 80105e8:	4603      	mov	r3, r0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3708      	adds	r7, #8
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b082      	sub	sp, #8
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
 80105fa:	460b      	mov	r3, r1
 80105fc:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d011      	beq.n	8010628 <unlock_fs+0x36>
 8010604:	78fb      	ldrb	r3, [r7, #3]
 8010606:	2b0c      	cmp	r3, #12
 8010608:	d00e      	beq.n	8010628 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 801060a:	78fb      	ldrb	r3, [r7, #3]
 801060c:	2b0b      	cmp	r3, #11
 801060e:	d00b      	beq.n	8010628 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8010610:	78fb      	ldrb	r3, [r7, #3]
 8010612:	2b09      	cmp	r3, #9
 8010614:	d008      	beq.n	8010628 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8010616:	78fb      	ldrb	r3, [r7, #3]
 8010618:	2b0f      	cmp	r3, #15
 801061a:	d005      	beq.n	8010628 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010622:	4618      	mov	r0, r3
 8010624:	f002 fc5d 	bl	8012ee2 <ff_rel_grant>
	}
}
 8010628:	bf00      	nop
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010630:	b480      	push	{r7}
 8010632:	b085      	sub	sp, #20
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801063a:	2300      	movs	r3, #0
 801063c:	60bb      	str	r3, [r7, #8]
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	e038      	b.n	80106b6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8010644:	492f      	ldr	r1, [pc, #188]	; (8010704 <chk_lock+0xd4>)
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	4613      	mov	r3, r2
 801064a:	005b      	lsls	r3, r3, #1
 801064c:	4413      	add	r3, r2
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	440b      	add	r3, r1
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d029      	beq.n	80106ac <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8010658:	492a      	ldr	r1, [pc, #168]	; (8010704 <chk_lock+0xd4>)
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	4613      	mov	r3, r2
 801065e:	005b      	lsls	r3, r3, #1
 8010660:	4413      	add	r3, r2
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	440b      	add	r3, r1
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801066e:	429a      	cmp	r2, r3
 8010670:	d11e      	bne.n	80106b0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8010672:	4924      	ldr	r1, [pc, #144]	; (8010704 <chk_lock+0xd4>)
 8010674:	68fa      	ldr	r2, [r7, #12]
 8010676:	4613      	mov	r3, r2
 8010678:	005b      	lsls	r3, r3, #1
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	440b      	add	r3, r1
 8010680:	3304      	adds	r3, #4
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801068a:	429a      	cmp	r2, r3
 801068c:	d110      	bne.n	80106b0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801068e:	491d      	ldr	r1, [pc, #116]	; (8010704 <chk_lock+0xd4>)
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	4613      	mov	r3, r2
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	440b      	add	r3, r1
 801069c:	3308      	adds	r3, #8
 801069e:	881a      	ldrh	r2, [r3, #0]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d102      	bne.n	80106b0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80106aa:	e007      	b.n	80106bc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80106ac:	2301      	movs	r3, #1
 80106ae:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	3301      	adds	r3, #1
 80106b4:	60fb      	str	r3, [r7, #12]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d9c3      	bls.n	8010644 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d109      	bne.n	80106d6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d102      	bne.n	80106ce <chk_lock+0x9e>
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	d101      	bne.n	80106d2 <chk_lock+0xa2>
 80106ce:	2300      	movs	r3, #0
 80106d0:	e013      	b.n	80106fa <chk_lock+0xca>
 80106d2:	2312      	movs	r3, #18
 80106d4:	e011      	b.n	80106fa <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10b      	bne.n	80106f4 <chk_lock+0xc4>
 80106dc:	4909      	ldr	r1, [pc, #36]	; (8010704 <chk_lock+0xd4>)
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	4613      	mov	r3, r2
 80106e2:	005b      	lsls	r3, r3, #1
 80106e4:	4413      	add	r3, r2
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	440b      	add	r3, r1
 80106ea:	330a      	adds	r3, #10
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106f2:	d101      	bne.n	80106f8 <chk_lock+0xc8>
 80106f4:	2310      	movs	r3, #16
 80106f6:	e000      	b.n	80106fa <chk_lock+0xca>
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3714      	adds	r7, #20
 80106fe:	46bd      	mov	sp, r7
 8010700:	bc80      	pop	{r7}
 8010702:	4770      	bx	lr
 8010704:	20000f28 	.word	0x20000f28

08010708 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801070e:	2300      	movs	r3, #0
 8010710:	607b      	str	r3, [r7, #4]
 8010712:	e002      	b.n	801071a <enq_lock+0x12>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	3301      	adds	r3, #1
 8010718:	607b      	str	r3, [r7, #4]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b01      	cmp	r3, #1
 801071e:	d809      	bhi.n	8010734 <enq_lock+0x2c>
 8010720:	490a      	ldr	r1, [pc, #40]	; (801074c <enq_lock+0x44>)
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	4613      	mov	r3, r2
 8010726:	005b      	lsls	r3, r3, #1
 8010728:	4413      	add	r3, r2
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	440b      	add	r3, r1
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d1ef      	bne.n	8010714 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2b02      	cmp	r3, #2
 8010738:	bf14      	ite	ne
 801073a:	2301      	movne	r3, #1
 801073c:	2300      	moveq	r3, #0
 801073e:	b2db      	uxtb	r3, r3
}
 8010740:	4618      	mov	r0, r3
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	bc80      	pop	{r7}
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	20000f28 	.word	0x20000f28

08010750 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801075a:	2300      	movs	r3, #0
 801075c:	60fb      	str	r3, [r7, #12]
 801075e:	e02b      	b.n	80107b8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8010760:	4955      	ldr	r1, [pc, #340]	; (80108b8 <inc_lock+0x168>)
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	4613      	mov	r3, r2
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	4413      	add	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	440b      	add	r3, r1
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010776:	429a      	cmp	r2, r3
 8010778:	d11b      	bne.n	80107b2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 801077a:	494f      	ldr	r1, [pc, #316]	; (80108b8 <inc_lock+0x168>)
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	4613      	mov	r3, r2
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	4413      	add	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	440b      	add	r3, r1
 8010788:	3304      	adds	r3, #4
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8010792:	429a      	cmp	r2, r3
 8010794:	d10d      	bne.n	80107b2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8010796:	4948      	ldr	r1, [pc, #288]	; (80108b8 <inc_lock+0x168>)
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	4613      	mov	r3, r2
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	4413      	add	r3, r2
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	440b      	add	r3, r1
 80107a4:	3308      	adds	r3, #8
 80107a6:	881a      	ldrh	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d006      	beq.n	80107c0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	3301      	adds	r3, #1
 80107b6:	60fb      	str	r3, [r7, #12]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d9d0      	bls.n	8010760 <inc_lock+0x10>
 80107be:	e000      	b.n	80107c2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80107c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d145      	bne.n	8010854 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80107c8:	2300      	movs	r3, #0
 80107ca:	60fb      	str	r3, [r7, #12]
 80107cc:	e002      	b.n	80107d4 <inc_lock+0x84>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3301      	adds	r3, #1
 80107d2:	60fb      	str	r3, [r7, #12]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d809      	bhi.n	80107ee <inc_lock+0x9e>
 80107da:	4937      	ldr	r1, [pc, #220]	; (80108b8 <inc_lock+0x168>)
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	4613      	mov	r3, r2
 80107e0:	005b      	lsls	r3, r3, #1
 80107e2:	4413      	add	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	440b      	add	r3, r1
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d1ef      	bne.n	80107ce <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d101      	bne.n	80107f8 <inc_lock+0xa8>
 80107f4:	2300      	movs	r3, #0
 80107f6:	e05a      	b.n	80108ae <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80107fe:	482e      	ldr	r0, [pc, #184]	; (80108b8 <inc_lock+0x168>)
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	4613      	mov	r3, r2
 8010804:	005b      	lsls	r3, r3, #1
 8010806:	4413      	add	r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4403      	add	r3, r0
 801080c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8010814:	4828      	ldr	r0, [pc, #160]	; (80108b8 <inc_lock+0x168>)
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	4613      	mov	r3, r2
 801081a:	005b      	lsls	r3, r3, #1
 801081c:	4413      	add	r3, r2
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	4403      	add	r3, r0
 8010822:	3304      	adds	r3, #4
 8010824:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 801082c:	4922      	ldr	r1, [pc, #136]	; (80108b8 <inc_lock+0x168>)
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	4613      	mov	r3, r2
 8010832:	005b      	lsls	r3, r3, #1
 8010834:	4413      	add	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	440b      	add	r3, r1
 801083a:	3308      	adds	r3, #8
 801083c:	4602      	mov	r2, r0
 801083e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8010840:	491d      	ldr	r1, [pc, #116]	; (80108b8 <inc_lock+0x168>)
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	4613      	mov	r3, r2
 8010846:	005b      	lsls	r3, r3, #1
 8010848:	4413      	add	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	440b      	add	r3, r1
 801084e:	330a      	adds	r3, #10
 8010850:	2200      	movs	r2, #0
 8010852:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00c      	beq.n	8010874 <inc_lock+0x124>
 801085a:	4917      	ldr	r1, [pc, #92]	; (80108b8 <inc_lock+0x168>)
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4613      	mov	r3, r2
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	4413      	add	r3, r2
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	440b      	add	r3, r1
 8010868:	330a      	adds	r3, #10
 801086a:	881b      	ldrh	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d001      	beq.n	8010874 <inc_lock+0x124>
 8010870:	2300      	movs	r3, #0
 8010872:	e01c      	b.n	80108ae <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10b      	bne.n	8010892 <inc_lock+0x142>
 801087a:	490f      	ldr	r1, [pc, #60]	; (80108b8 <inc_lock+0x168>)
 801087c:	68fa      	ldr	r2, [r7, #12]
 801087e:	4613      	mov	r3, r2
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	4413      	add	r3, r2
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	440b      	add	r3, r1
 8010888:	330a      	adds	r3, #10
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	3301      	adds	r3, #1
 801088e:	b299      	uxth	r1, r3
 8010890:	e001      	b.n	8010896 <inc_lock+0x146>
 8010892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010896:	4808      	ldr	r0, [pc, #32]	; (80108b8 <inc_lock+0x168>)
 8010898:	68fa      	ldr	r2, [r7, #12]
 801089a:	4613      	mov	r3, r2
 801089c:	005b      	lsls	r3, r3, #1
 801089e:	4413      	add	r3, r2
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	4403      	add	r3, r0
 80108a4:	330a      	adds	r3, #10
 80108a6:	460a      	mov	r2, r1
 80108a8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	3301      	adds	r3, #1
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3714      	adds	r7, #20
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bc80      	pop	{r7}
 80108b6:	4770      	bx	lr
 80108b8:	20000f28 	.word	0x20000f28

080108bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80108bc:	b480      	push	{r7}
 80108be:	b085      	sub	sp, #20
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	3b01      	subs	r3, #1
 80108c8:	607b      	str	r3, [r7, #4]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d82e      	bhi.n	801092e <dec_lock+0x72>
		n = Files[i].ctr;
 80108d0:	491b      	ldr	r1, [pc, #108]	; (8010940 <dec_lock+0x84>)
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	4613      	mov	r3, r2
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	4413      	add	r3, r2
 80108da:	009b      	lsls	r3, r3, #2
 80108dc:	440b      	add	r3, r1
 80108de:	330a      	adds	r3, #10
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80108e4:	89fb      	ldrh	r3, [r7, #14]
 80108e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ea:	d101      	bne.n	80108f0 <dec_lock+0x34>
 80108ec:	2300      	movs	r3, #0
 80108ee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80108f0:	89fb      	ldrh	r3, [r7, #14]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d002      	beq.n	80108fc <dec_lock+0x40>
 80108f6:	89fb      	ldrh	r3, [r7, #14]
 80108f8:	3b01      	subs	r3, #1
 80108fa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80108fc:	4910      	ldr	r1, [pc, #64]	; (8010940 <dec_lock+0x84>)
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	4613      	mov	r3, r2
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	4413      	add	r3, r2
 8010906:	009b      	lsls	r3, r3, #2
 8010908:	440b      	add	r3, r1
 801090a:	330a      	adds	r3, #10
 801090c:	89fa      	ldrh	r2, [r7, #14]
 801090e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010910:	89fb      	ldrh	r3, [r7, #14]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d108      	bne.n	8010928 <dec_lock+0x6c>
 8010916:	490a      	ldr	r1, [pc, #40]	; (8010940 <dec_lock+0x84>)
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	440b      	add	r3, r1
 8010924:	2200      	movs	r2, #0
 8010926:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010928:	2300      	movs	r3, #0
 801092a:	737b      	strb	r3, [r7, #13]
 801092c:	e001      	b.n	8010932 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801092e:	2302      	movs	r3, #2
 8010930:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010932:	7b7b      	ldrb	r3, [r7, #13]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	bc80      	pop	{r7}
 801093c:	4770      	bx	lr
 801093e:	bf00      	nop
 8010940:	20000f28 	.word	0x20000f28

08010944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801094c:	2300      	movs	r3, #0
 801094e:	60fb      	str	r3, [r7, #12]
 8010950:	e016      	b.n	8010980 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010952:	4910      	ldr	r1, [pc, #64]	; (8010994 <clear_lock+0x50>)
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	4613      	mov	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	440b      	add	r3, r1
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	429a      	cmp	r2, r3
 8010966:	d108      	bne.n	801097a <clear_lock+0x36>
 8010968:	490a      	ldr	r1, [pc, #40]	; (8010994 <clear_lock+0x50>)
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	4613      	mov	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	4413      	add	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	440b      	add	r3, r1
 8010976:	2200      	movs	r2, #0
 8010978:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3301      	adds	r3, #1
 801097e:	60fb      	str	r3, [r7, #12]
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b01      	cmp	r3, #1
 8010984:	d9e5      	bls.n	8010952 <clear_lock+0xe>
	}
}
 8010986:	bf00      	nop
 8010988:	bf00      	nop
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	bc80      	pop	{r7}
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	20000f28 	.word	0x20000f28

08010998 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d038      	beq.n	8010a20 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80109b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80109bc:	6879      	ldr	r1, [r7, #4]
 80109be:	2301      	movs	r3, #1
 80109c0:	697a      	ldr	r2, [r7, #20]
 80109c2:	f7ff fd51 	bl	8010468 <disk_write>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d002      	beq.n	80109d2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 80109cc:	2301      	movs	r3, #1
 80109ce:	73fb      	strb	r3, [r7, #15]
 80109d0:	e026      	b.n	8010a20 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80109e0:	697a      	ldr	r2, [r7, #20]
 80109e2:	1ad2      	subs	r2, r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d218      	bcs.n	8010a20 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80109f4:	613b      	str	r3, [r7, #16]
 80109f6:	e010      	b.n	8010a1a <sync_window+0x82>
					wsect += fs->fsize;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	4413      	add	r3, r2
 8010a02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010a0a:	6879      	ldr	r1, [r7, #4]
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	697a      	ldr	r2, [r7, #20]
 8010a10:	f7ff fd2a 	bl	8010468 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	3b01      	subs	r3, #1
 8010a18:	613b      	str	r3, [r7, #16]
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d8eb      	bhi.n	80109f8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8010a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3718      	adds	r7, #24
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8010a3e:	683a      	ldr	r2, [r7, #0]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d01b      	beq.n	8010a7c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f7ff ffa7 	bl	8010998 <sync_window>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010a4e:	7bfb      	ldrb	r3, [r7, #15]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d113      	bne.n	8010a7c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	f7ff fce2 	bl	8010428 <disk_read>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d004      	beq.n	8010a74 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010a70:	2301      	movs	r3, #1
 8010a72:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8010a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b084      	sub	sp, #16
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7ff ff82 	bl	8010998 <sync_window>
 8010a94:	4603      	mov	r3, r0
 8010a96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f040 809b 	bne.w	8010bd6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	f040 8088 	bne.w	8010bbc <sync_fs+0x136>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	f040 8082 	bne.w	8010bbc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010abe:	2100      	movs	r1, #0
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff fd2d 	bl	8010520 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2255      	movs	r2, #85	; 0x55
 8010aca:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	22aa      	movs	r2, #170	; 0xaa
 8010ad2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2252      	movs	r2, #82	; 0x52
 8010ada:	701a      	strb	r2, [r3, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2252      	movs	r2, #82	; 0x52
 8010ae0:	705a      	strb	r2, [r3, #1]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2261      	movs	r2, #97	; 0x61
 8010ae6:	709a      	strb	r2, [r3, #2]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2241      	movs	r2, #65	; 0x41
 8010aec:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2272      	movs	r2, #114	; 0x72
 8010af2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2272      	movs	r2, #114	; 0x72
 8010afa:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2241      	movs	r2, #65	; 0x41
 8010b02:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2261      	movs	r2, #97	; 0x61
 8010b0a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	0a1b      	lsrs	r3, r3, #8
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b36:	0c1b      	lsrs	r3, r3, #16
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b46:	0e1b      	lsrs	r3, r3, #24
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	0a1b      	lsrs	r3, r3, #8
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b78:	0c1b      	lsrs	r3, r3, #16
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b88:	0e1b      	lsrs	r3, r3, #24
 8010b8a:	b2da      	uxtb	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010b98:	1c5a      	adds	r2, r3, #1
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010ba6:	6879      	ldr	r1, [r7, #4]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8010bae:	2301      	movs	r3, #1
 8010bb0:	f7ff fc5a 	bl	8010468 <disk_write>
			fs->fsi_flag = 0;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7ff fc6e 	bl	80104a8 <disk_ioctl>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	3b02      	subs	r3, #2
 8010bee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010bf6:	3b02      	subs	r3, #2
 8010bf8:	683a      	ldr	r2, [r7, #0]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d301      	bcc.n	8010c02 <clust2sect+0x22>
 8010bfe:	2300      	movs	r3, #0
 8010c00:	e00a      	b.n	8010c18 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010c08:	461a      	mov	r2, r3
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	fb03 f202 	mul.w	r2, r3, r2
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010c16:	4413      	add	r3, r2
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bc80      	pop	{r7}
 8010c20:	4770      	bx	lr

08010c22 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b086      	sub	sp, #24
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d905      	bls.n	8010c3e <get_fat+0x1c>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c38:	683a      	ldr	r2, [r7, #0]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d302      	bcc.n	8010c44 <get_fat+0x22>
		val = 1;	/* Internal error */
 8010c3e:	2301      	movs	r3, #1
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	e0a3      	b.n	8010d8c <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c44:	f04f 33ff 	mov.w	r3, #4294967295
 8010c48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010c50:	2b03      	cmp	r3, #3
 8010c52:	d068      	beq.n	8010d26 <get_fat+0x104>
 8010c54:	2b03      	cmp	r3, #3
 8010c56:	f300 808f 	bgt.w	8010d78 <get_fat+0x156>
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d002      	beq.n	8010c64 <get_fat+0x42>
 8010c5e:	2b02      	cmp	r3, #2
 8010c60:	d040      	beq.n	8010ce4 <get_fat+0xc2>
 8010c62:	e089      	b.n	8010d78 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	085b      	lsrs	r3, r3, #1
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	4413      	add	r3, r2
 8010c70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	0a5b      	lsrs	r3, r3, #9
 8010c7c:	4413      	add	r3, r2
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fed2 	bl	8010a2a <move_window>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d178      	bne.n	8010d7e <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	60fa      	str	r2, [r7, #12]
 8010c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	5cd3      	ldrb	r3, [r2, r3]
 8010c9a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	0a5b      	lsrs	r3, r3, #9
 8010ca6:	4413      	add	r3, r2
 8010ca8:	4619      	mov	r1, r3
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7ff febd 	bl	8010a2a <move_window>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d165      	bne.n	8010d82 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	5cd3      	ldrb	r3, [r2, r3]
 8010cc0:	021b      	lsls	r3, r3, #8
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d002      	beq.n	8010cda <get_fat+0xb8>
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	091b      	lsrs	r3, r3, #4
 8010cd8:	e002      	b.n	8010ce0 <get_fat+0xbe>
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ce0:	617b      	str	r3, [r7, #20]
			break;
 8010ce2:	e053      	b.n	8010d8c <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	0a1b      	lsrs	r3, r3, #8
 8010cee:	4413      	add	r3, r2
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7ff fe99 	bl	8010a2a <move_window>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d143      	bne.n	8010d86 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010d06:	687a      	ldr	r2, [r7, #4]
 8010d08:	4413      	add	r3, r2
 8010d0a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	021b      	lsls	r3, r3, #8
 8010d14:	b21a      	sxth	r2, r3
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	b21b      	sxth	r3, r3
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	b21b      	sxth	r3, r3
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	617b      	str	r3, [r7, #20]
			break;
 8010d24:	e032      	b.n	8010d8c <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	09db      	lsrs	r3, r3, #7
 8010d30:	4413      	add	r3, r2
 8010d32:	4619      	mov	r1, r3
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff fe78 	bl	8010a2a <move_window>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d124      	bne.n	8010d8a <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	4413      	add	r3, r2
 8010d4c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	3303      	adds	r3, #3
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	061a      	lsls	r2, r3, #24
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	3302      	adds	r3, #2
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	041b      	lsls	r3, r3, #16
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	693a      	ldr	r2, [r7, #16]
 8010d62:	3201      	adds	r2, #1
 8010d64:	7812      	ldrb	r2, [r2, #0]
 8010d66:	0212      	lsls	r2, r2, #8
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	693a      	ldr	r2, [r7, #16]
 8010d6c:	7812      	ldrb	r2, [r2, #0]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010d74:	617b      	str	r3, [r7, #20]
			break;
 8010d76:	e009      	b.n	8010d8c <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8010d78:	2301      	movs	r3, #1
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	e006      	b.n	8010d8c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d7e:	bf00      	nop
 8010d80:	e004      	b.n	8010d8c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d82:	bf00      	nop
 8010d84:	e002      	b.n	8010d8c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d86:	bf00      	nop
 8010d88:	e000      	b.n	8010d8c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d8a:	bf00      	nop
		}
	}

	return val;
 8010d8c:	697b      	ldr	r3, [r7, #20]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3718      	adds	r7, #24
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b088      	sub	sp, #32
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	60f8      	str	r0, [r7, #12]
 8010d9e:	60b9      	str	r1, [r7, #8]
 8010da0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d905      	bls.n	8010db4 <put_fat+0x1e>
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010dae:	68ba      	ldr	r2, [r7, #8]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d302      	bcc.n	8010dba <put_fat+0x24>
		res = FR_INT_ERR;
 8010db4:	2302      	movs	r3, #2
 8010db6:	77fb      	strb	r3, [r7, #31]
 8010db8:	e0f6      	b.n	8010fa8 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010dc0:	2b03      	cmp	r3, #3
 8010dc2:	f000 809e 	beq.w	8010f02 <put_fat+0x16c>
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	f300 80e4 	bgt.w	8010f94 <put_fat+0x1fe>
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d002      	beq.n	8010dd6 <put_fat+0x40>
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	d06f      	beq.n	8010eb4 <put_fat+0x11e>
 8010dd4:	e0de      	b.n	8010f94 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	617b      	str	r3, [r7, #20]
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	085b      	lsrs	r3, r3, #1
 8010dde:	697a      	ldr	r2, [r7, #20]
 8010de0:	4413      	add	r3, r2
 8010de2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	0a5b      	lsrs	r3, r3, #9
 8010dee:	4413      	add	r3, r2
 8010df0:	4619      	mov	r1, r3
 8010df2:	68f8      	ldr	r0, [r7, #12]
 8010df4:	f7ff fe19 	bl	8010a2a <move_window>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010dfc:	7ffb      	ldrb	r3, [r7, #31]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f040 80cb 	bne.w	8010f9a <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	1c5a      	adds	r2, r3, #1
 8010e08:	617a      	str	r2, [r7, #20]
 8010e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	4413      	add	r3, r2
 8010e12:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	f003 0301 	and.w	r3, r3, #1
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00d      	beq.n	8010e3a <put_fat+0xa4>
 8010e1e:	69bb      	ldr	r3, [r7, #24]
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	b25b      	sxtb	r3, r3
 8010e24:	f003 030f 	and.w	r3, r3, #15
 8010e28:	b25a      	sxtb	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	011b      	lsls	r3, r3, #4
 8010e30:	b25b      	sxtb	r3, r3
 8010e32:	4313      	orrs	r3, r2
 8010e34:	b25b      	sxtb	r3, r3
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	e001      	b.n	8010e3e <put_fat+0xa8>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	69ba      	ldr	r2, [r7, #24]
 8010e40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2201      	movs	r2, #1
 8010e46:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	0a5b      	lsrs	r3, r3, #9
 8010e54:	4413      	add	r3, r2
 8010e56:	4619      	mov	r1, r3
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f7ff fde6 	bl	8010a2a <move_window>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e62:	7ffb      	ldrb	r3, [r7, #31]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f040 809a 	bne.w	8010f9e <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	4413      	add	r3, r2
 8010e74:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	f003 0301 	and.w	r3, r3, #1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d003      	beq.n	8010e88 <put_fat+0xf2>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	091b      	lsrs	r3, r3, #4
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	e00e      	b.n	8010ea6 <put_fat+0x110>
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	b25b      	sxtb	r3, r3
 8010e8e:	f023 030f 	bic.w	r3, r3, #15
 8010e92:	b25a      	sxtb	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	0a1b      	lsrs	r3, r3, #8
 8010e98:	b25b      	sxtb	r3, r3
 8010e9a:	f003 030f 	and.w	r3, r3, #15
 8010e9e:	b25b      	sxtb	r3, r3
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	b25b      	sxtb	r3, r3
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	69ba      	ldr	r2, [r7, #24]
 8010ea8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2201      	movs	r2, #1
 8010eae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010eb2:	e079      	b.n	8010fa8 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	0a1b      	lsrs	r3, r3, #8
 8010ebe:	4413      	add	r3, r2
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f7ff fdb1 	bl	8010a2a <move_window>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ecc:	7ffb      	ldrb	r3, [r7, #31]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d167      	bne.n	8010fa2 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	4413      	add	r3, r2
 8010ede:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	b2da      	uxtb	r2, r3
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	701a      	strb	r2, [r3, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	0a1b      	lsrs	r3, r3, #8
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	b2d2      	uxtb	r2, r2
 8010ef6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2201      	movs	r2, #1
 8010efc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010f00:	e052      	b.n	8010fa8 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	09db      	lsrs	r3, r3, #7
 8010f0c:	4413      	add	r3, r2
 8010f0e:	4619      	mov	r1, r3
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7ff fd8a 	bl	8010a2a <move_window>
 8010f16:	4603      	mov	r3, r0
 8010f18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f1a:	7ffb      	ldrb	r3, [r7, #31]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d142      	bne.n	8010fa6 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	3303      	adds	r3, #3
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	061a      	lsls	r2, r3, #24
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	3302      	adds	r3, #2
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	041b      	lsls	r3, r3, #16
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	69ba      	ldr	r2, [r7, #24]
 8010f42:	3201      	adds	r2, #1
 8010f44:	7812      	ldrb	r2, [r2, #0]
 8010f46:	0212      	lsls	r2, r2, #8
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	69ba      	ldr	r2, [r7, #24]
 8010f4c:	7812      	ldrb	r2, [r2, #0]
 8010f4e:	4313      	orrs	r3, r2
 8010f50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	4313      	orrs	r3, r2
 8010f58:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	701a      	strb	r2, [r3, #0]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	0a1b      	lsrs	r3, r3, #8
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	b2d2      	uxtb	r2, r2
 8010f70:	701a      	strb	r2, [r3, #0]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	0c1a      	lsrs	r2, r3, #16
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	3302      	adds	r3, #2
 8010f7a:	b2d2      	uxtb	r2, r2
 8010f7c:	701a      	strb	r2, [r3, #0]
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	0e1a      	lsrs	r2, r3, #24
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	3303      	adds	r3, #3
 8010f86:	b2d2      	uxtb	r2, r2
 8010f88:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010f92:	e009      	b.n	8010fa8 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8010f94:	2302      	movs	r3, #2
 8010f96:	77fb      	strb	r3, [r7, #31]
 8010f98:	e006      	b.n	8010fa8 <put_fat+0x212>
			if (res != FR_OK) break;
 8010f9a:	bf00      	nop
 8010f9c:	e004      	b.n	8010fa8 <put_fat+0x212>
			if (res != FR_OK) break;
 8010f9e:	bf00      	nop
 8010fa0:	e002      	b.n	8010fa8 <put_fat+0x212>
			if (res != FR_OK) break;
 8010fa2:	bf00      	nop
 8010fa4:	e000      	b.n	8010fa8 <put_fat+0x212>
			if (res != FR_OK) break;
 8010fa6:	bf00      	nop
		}
	}

	return res;
 8010fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3720      	adds	r7, #32
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
 8010fba:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d905      	bls.n	8010fce <remove_chain+0x1c>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010fc8:	683a      	ldr	r2, [r7, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d302      	bcc.n	8010fd4 <remove_chain+0x22>
		res = FR_INT_ERR;
 8010fce:	2302      	movs	r3, #2
 8010fd0:	73fb      	strb	r3, [r7, #15]
 8010fd2:	e043      	b.n	801105c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8010fd8:	e036      	b.n	8011048 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8010fda:	6839      	ldr	r1, [r7, #0]
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7ff fe20 	bl	8010c22 <get_fat>
 8010fe2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d035      	beq.n	8011056 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d102      	bne.n	8010ff6 <remove_chain+0x44>
 8010ff0:	2302      	movs	r3, #2
 8010ff2:	73fb      	strb	r3, [r7, #15]
 8010ff4:	e032      	b.n	801105c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffc:	d102      	bne.n	8011004 <remove_chain+0x52>
 8010ffe:	2301      	movs	r3, #1
 8011000:	73fb      	strb	r3, [r7, #15]
 8011002:	e02b      	b.n	801105c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8011004:	2200      	movs	r2, #0
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff fec4 	bl	8010d96 <put_fat>
 801100e:	4603      	mov	r3, r0
 8011010:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011012:	7bfb      	ldrb	r3, [r7, #15]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d120      	bne.n	801105a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801101e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011022:	d00f      	beq.n	8011044 <remove_chain+0x92>
				fs->free_clust++;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8011038:	f043 0301 	orr.w	r3, r3, #1
 801103c:	b2da      	uxtb	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	429a      	cmp	r2, r3
 8011052:	d3c2      	bcc.n	8010fda <remove_chain+0x28>
 8011054:	e002      	b.n	801105c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8011056:	bf00      	nop
 8011058:	e000      	b.n	801105c <remove_chain+0xaa>
			if (res != FR_OK) break;
 801105a:	bf00      	nop
		}
	}

	return res;
 801105c:	7bfb      	ldrb	r3, [r7, #15]
}
 801105e:	4618      	mov	r0, r3
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b086      	sub	sp, #24
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
 801106e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d10f      	bne.n	8011096 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801107c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d005      	beq.n	8011090 <create_chain+0x2a>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801108a:	693a      	ldr	r2, [r7, #16]
 801108c:	429a      	cmp	r2, r3
 801108e:	d31c      	bcc.n	80110ca <create_chain+0x64>
 8011090:	2301      	movs	r3, #1
 8011092:	613b      	str	r3, [r7, #16]
 8011094:	e019      	b.n	80110ca <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7ff fdc2 	bl	8010c22 <get_fat>
 801109e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d801      	bhi.n	80110aa <create_chain+0x44>
 80110a6:	2301      	movs	r3, #1
 80110a8:	e076      	b.n	8011198 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b0:	d101      	bne.n	80110b6 <create_chain+0x50>
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	e070      	b.n	8011198 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d201      	bcs.n	80110c6 <create_chain+0x60>
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	e068      	b.n	8011198 <create_chain+0x132>
		scl = clst;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	3301      	adds	r3, #1
 80110d2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d307      	bcc.n	80110f0 <create_chain+0x8a>
			ncl = 2;
 80110e0:	2302      	movs	r3, #2
 80110e2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80110e4:	697a      	ldr	r2, [r7, #20]
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d901      	bls.n	80110f0 <create_chain+0x8a>
 80110ec:	2300      	movs	r3, #0
 80110ee:	e053      	b.n	8011198 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80110f0:	6979      	ldr	r1, [r7, #20]
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f7ff fd95 	bl	8010c22 <get_fat>
 80110f8:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00e      	beq.n	801111e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011106:	d002      	beq.n	801110e <create_chain+0xa8>
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d101      	bne.n	8011112 <create_chain+0xac>
			return cs;
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	e042      	b.n	8011198 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	429a      	cmp	r2, r3
 8011118:	d1d9      	bne.n	80110ce <create_chain+0x68>
 801111a:	2300      	movs	r3, #0
 801111c:	e03c      	b.n	8011198 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 801111e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8011120:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011124:	6979      	ldr	r1, [r7, #20]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f7ff fe35 	bl	8010d96 <put_fat>
 801112c:	4603      	mov	r3, r0
 801112e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8011130:	7bfb      	ldrb	r3, [r7, #15]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d109      	bne.n	801114a <create_chain+0xe4>
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d006      	beq.n	801114a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 801113c:	697a      	ldr	r2, [r7, #20]
 801113e:	6839      	ldr	r1, [r7, #0]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff fe28 	bl	8010d96 <put_fat>
 8011146:	4603      	mov	r3, r0
 8011148:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d11a      	bne.n	8011186 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	697a      	ldr	r2, [r7, #20]
 8011154:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801115e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011162:	d018      	beq.n	8011196 <create_chain+0x130>
			fs->free_clust--;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801116a:	1e5a      	subs	r2, r3, #1
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8011178:	f043 0301 	orr.w	r3, r3, #1
 801117c:	b2da      	uxtb	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8011184:	e007      	b.n	8011196 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8011186:	7bfb      	ldrb	r3, [r7, #15]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d102      	bne.n	8011192 <create_chain+0x12c>
 801118c:	f04f 33ff 	mov.w	r3, #4294967295
 8011190:	e000      	b.n	8011194 <create_chain+0x12e>
 8011192:	2301      	movs	r3, #1
 8011194:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8011196:	697b      	ldr	r3, [r7, #20]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3718      	adds	r7, #24
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b087      	sub	sp, #28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80111b0:	3304      	adds	r3, #4
 80111b2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	0a5b      	lsrs	r3, r3, #9
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80111be:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80111c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80111c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	1d1a      	adds	r2, r3, #4
 80111cc:	613a      	str	r2, [r7, #16]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d101      	bne.n	80111dc <clmt_clust+0x3c>
 80111d8:	2300      	movs	r3, #0
 80111da:	e010      	b.n	80111fe <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80111dc:	697a      	ldr	r2, [r7, #20]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d307      	bcc.n	80111f4 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	617b      	str	r3, [r7, #20]
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	3304      	adds	r3, #4
 80111f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80111f2:	e7e9      	b.n	80111c8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80111f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	4413      	add	r3, r2
}
 80111fe:	4618      	mov	r0, r3
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	bc80      	pop	{r7}
 8011206:	4770      	bx	lr

08011208 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	b29a      	uxth	r2, r3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011222:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	2b01      	cmp	r3, #1
 8011228:	d007      	beq.n	801123a <dir_sdi+0x32>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011230:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011234:	697a      	ldr	r2, [r7, #20]
 8011236:	429a      	cmp	r2, r3
 8011238:	d301      	bcc.n	801123e <dir_sdi+0x36>
		return FR_INT_ERR;
 801123a:	2302      	movs	r3, #2
 801123c:	e074      	b.n	8011328 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d10c      	bne.n	801125e <dir_sdi+0x56>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801124a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801124e:	2b03      	cmp	r3, #3
 8011250:	d105      	bne.n	801125e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011258:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801125c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d111      	bne.n	8011288 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801126a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801126e:	461a      	mov	r2, r3
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	4293      	cmp	r3, r2
 8011274:	d301      	bcc.n	801127a <dir_sdi+0x72>
			return FR_INT_ERR;
 8011276:	2302      	movs	r3, #2
 8011278:	e056      	b.n	8011328 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011280:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011284:	613b      	str	r3, [r7, #16]
 8011286:	e032      	b.n	80112ee <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801128e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011292:	011b      	lsls	r3, r3, #4
 8011294:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8011296:	e01e      	b.n	80112d6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801129e:	6979      	ldr	r1, [r7, #20]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ff fcbe 	bl	8010c22 <get_fat>
 80112a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ae:	d101      	bne.n	80112b4 <dir_sdi+0xac>
 80112b0:	2301      	movs	r3, #1
 80112b2:	e039      	b.n	8011328 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d907      	bls.n	80112ca <dir_sdi+0xc2>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80112c4:	697a      	ldr	r2, [r7, #20]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d301      	bcc.n	80112ce <dir_sdi+0xc6>
				return FR_INT_ERR;
 80112ca:	2302      	movs	r3, #2
 80112cc:	e02c      	b.n	8011328 <dir_sdi+0x120>
			idx -= ic;
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80112d6:	683a      	ldr	r2, [r7, #0]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d2dc      	bcs.n	8011298 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112e4:	6979      	ldr	r1, [r7, #20]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7ff fc7a 	bl	8010be0 <clust2sect>
 80112ec:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	697a      	ldr	r2, [r7, #20]
 80112f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <dir_sdi+0xf8>
 80112fc:	2302      	movs	r3, #2
 80112fe:	e013      	b.n	8011328 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	091a      	lsrs	r2, r3, #4
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	441a      	add	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011314:	461a      	mov	r2, r3
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	f003 030f 	and.w	r3, r3, #15
 801131c:	015b      	lsls	r3, r3, #5
 801131e:	441a      	add	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8011326:	2300      	movs	r3, #0
}
 8011328:	4618      	mov	r0, r3
 801132a:	3718      	adds	r7, #24
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b087      	sub	sp, #28
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8011340:	3301      	adds	r3, #1
 8011342:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	b29b      	uxth	r3, r3
 8011348:	2b00      	cmp	r3, #0
 801134a:	d004      	beq.n	8011356 <dir_next+0x26>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <dir_next+0x2a>
		return FR_NO_FILE;
 8011356:	2304      	movs	r3, #4
 8011358:	e0dd      	b.n	8011516 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f003 030f 	and.w	r3, r3, #15
 8011360:	2b00      	cmp	r3, #0
 8011362:	f040 80c6 	bne.w	80114f2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801136c:	1c5a      	adds	r2, r3, #1
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10b      	bne.n	8011396 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011384:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011388:	461a      	mov	r2, r3
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	4293      	cmp	r3, r2
 801138e:	f0c0 80b0 	bcc.w	80114f2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8011392:	2304      	movs	r3, #4
 8011394:	e0bf      	b.n	8011516 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	091b      	lsrs	r3, r3, #4
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80113a0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80113a4:	3a01      	subs	r2, #1
 80113a6:	4013      	ands	r3, r2
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f040 80a2 	bne.w	80114f2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80113ba:	4619      	mov	r1, r3
 80113bc:	4610      	mov	r0, r2
 80113be:	f7ff fc30 	bl	8010c22 <get_fat>
 80113c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d801      	bhi.n	80113ce <dir_next+0x9e>
 80113ca:	2302      	movs	r3, #2
 80113cc:	e0a3      	b.n	8011516 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113d4:	d101      	bne.n	80113da <dir_next+0xaa>
 80113d6:	2301      	movs	r3, #1
 80113d8:	e09d      	b.n	8011516 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80113e4:	697a      	ldr	r2, [r7, #20]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d374      	bcc.n	80114d4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d101      	bne.n	80113f4 <dir_next+0xc4>
 80113f0:	2304      	movs	r3, #4
 80113f2:	e090      	b.n	8011516 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011400:	4619      	mov	r1, r3
 8011402:	4610      	mov	r0, r2
 8011404:	f7ff fe2f 	bl	8011066 <create_chain>
 8011408:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <dir_next+0xe4>
 8011410:	2307      	movs	r3, #7
 8011412:	e080      	b.n	8011516 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	2b01      	cmp	r3, #1
 8011418:	d101      	bne.n	801141e <dir_next+0xee>
 801141a:	2302      	movs	r3, #2
 801141c:	e07b      	b.n	8011516 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011424:	d101      	bne.n	801142a <dir_next+0xfa>
 8011426:	2301      	movs	r3, #1
 8011428:	e075      	b.n	8011516 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff fab1 	bl	8010998 <sync_window>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d001      	beq.n	8011440 <dir_next+0x110>
 801143c:	2301      	movs	r3, #1
 801143e:	e06a      	b.n	8011516 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011446:	f44f 7200 	mov.w	r2, #512	; 0x200
 801144a:	2100      	movs	r1, #0
 801144c:	4618      	mov	r0, r3
 801144e:	f7ff f867 	bl	8010520 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 801145e:	6979      	ldr	r1, [r7, #20]
 8011460:	4610      	mov	r0, r2
 8011462:	f7ff fbbd 	bl	8010be0 <clust2sect>
 8011466:	4603      	mov	r3, r0
 8011468:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801146c:	2300      	movs	r3, #0
 801146e:	613b      	str	r3, [r7, #16]
 8011470:	e01b      	b.n	80114aa <dir_next+0x17a>
						dp->fs->wflag = 1;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011478:	2201      	movs	r2, #1
 801147a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff fa87 	bl	8010998 <sync_window>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d001      	beq.n	8011494 <dir_next+0x164>
 8011490:	2301      	movs	r3, #1
 8011492:	e040      	b.n	8011516 <dir_next+0x1e6>
						dp->fs->winsect++;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801149a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 801149e:	3201      	adds	r2, #1
 80114a0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	3301      	adds	r3, #1
 80114a8:	613b      	str	r3, [r7, #16]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114b0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80114b4:	461a      	mov	r2, r3
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d3da      	bcc.n	8011472 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114c2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114cc:	693a      	ldr	r2, [r7, #16]
 80114ce:	1a8a      	subs	r2, r1, r2
 80114d0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	697a      	ldr	r2, [r7, #20]
 80114d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114e2:	6979      	ldr	r1, [r7, #20]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7ff fb7b 	bl	8010be0 <clust2sect>
 80114ea:	4602      	mov	r2, r0
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011502:	461a      	mov	r2, r3
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f003 030f 	and.w	r3, r3, #15
 801150a:	015b      	lsls	r3, r3, #5
 801150c:	441a      	add	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8011514:	2300      	movs	r3, #0
}
 8011516:	4618      	mov	r0, r3
 8011518:	371c      	adds	r7, #28
 801151a:	46bd      	mov	sp, r7
 801151c:	bd90      	pop	{r4, r7, pc}

0801151e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b084      	sub	sp, #16
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8011528:	2100      	movs	r1, #0
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7ff fe6c 	bl	8011208 <dir_sdi>
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011534:	7bfb      	ldrb	r3, [r7, #15]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d131      	bne.n	801159e <dir_alloc+0x80>
		n = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801154a:	4619      	mov	r1, r3
 801154c:	4610      	mov	r0, r2
 801154e:	f7ff fa6c 	bl	8010a2a <move_window>
 8011552:	4603      	mov	r3, r0
 8011554:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011556:	7bfb      	ldrb	r3, [r7, #15]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d11f      	bne.n	801159c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2be5      	cmp	r3, #229	; 0xe5
 8011566:	d005      	beq.n	8011574 <dir_alloc+0x56>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d107      	bne.n	8011584 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	3301      	adds	r3, #1
 8011578:	60bb      	str	r3, [r7, #8]
 801157a:	68ba      	ldr	r2, [r7, #8]
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	429a      	cmp	r2, r3
 8011580:	d102      	bne.n	8011588 <dir_alloc+0x6a>
 8011582:	e00c      	b.n	801159e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011584:	2300      	movs	r3, #0
 8011586:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8011588:	2101      	movs	r1, #1
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7ff fed0 	bl	8011330 <dir_next>
 8011590:	4603      	mov	r3, r0
 8011592:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8011594:	7bfb      	ldrb	r3, [r7, #15]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d0d1      	beq.n	801153e <dir_alloc+0x20>
 801159a:	e000      	b.n	801159e <dir_alloc+0x80>
			if (res != FR_OK) break;
 801159c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801159e:	7bfb      	ldrb	r3, [r7, #15]
 80115a0:	2b04      	cmp	r3, #4
 80115a2:	d101      	bne.n	80115a8 <dir_alloc+0x8a>
 80115a4:	2307      	movs	r3, #7
 80115a6:	73fb      	strb	r3, [r7, #15]
	return res;
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80115b2:	b480      	push	{r7}
 80115b4:	b085      	sub	sp, #20
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	331b      	adds	r3, #27
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	021b      	lsls	r3, r3, #8
 80115c4:	b21a      	sxth	r2, r3
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	331a      	adds	r3, #26
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	b21b      	sxth	r3, r3
 80115ce:	4313      	orrs	r3, r2
 80115d0:	b21b      	sxth	r3, r3
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80115dc:	2b03      	cmp	r3, #3
 80115de:	d10f      	bne.n	8011600 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	3315      	adds	r3, #21
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	021b      	lsls	r3, r3, #8
 80115e8:	b21a      	sxth	r2, r3
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	3314      	adds	r3, #20
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	b21b      	sxth	r3, r3
 80115f2:	4313      	orrs	r3, r2
 80115f4:	b21b      	sxth	r3, r3
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	041b      	lsls	r3, r3, #16
 80115fa:	68fa      	ldr	r2, [r7, #12]
 80115fc:	4313      	orrs	r3, r2
 80115fe:	60fb      	str	r3, [r7, #12]

	return cl;
 8011600:	68fb      	ldr	r3, [r7, #12]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3714      	adds	r7, #20
 8011606:	46bd      	mov	sp, r7
 8011608:	bc80      	pop	{r7}
 801160a:	4770      	bx	lr

0801160c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	331a      	adds	r3, #26
 801161a:	683a      	ldr	r2, [r7, #0]
 801161c:	b2d2      	uxtb	r2, r2
 801161e:	701a      	strb	r2, [r3, #0]
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	b29b      	uxth	r3, r3
 8011624:	0a1b      	lsrs	r3, r3, #8
 8011626:	b29a      	uxth	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	331b      	adds	r3, #27
 801162c:	b2d2      	uxtb	r2, r2
 801162e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	0c1a      	lsrs	r2, r3, #16
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	3314      	adds	r3, #20
 8011638:	b2d2      	uxtb	r2, r2
 801163a:	701a      	strb	r2, [r3, #0]
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	0c1b      	lsrs	r3, r3, #16
 8011640:	b29b      	uxth	r3, r3
 8011642:	0a1b      	lsrs	r3, r3, #8
 8011644:	b29a      	uxth	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	3315      	adds	r3, #21
 801164a:	b2d2      	uxtb	r2, r2
 801164c:	701a      	strb	r2, [r3, #0]
}
 801164e:	bf00      	nop
 8011650:	370c      	adds	r7, #12
 8011652:	46bd      	mov	sp, r7
 8011654:	bc80      	pop	{r7}
 8011656:	4770      	bx	lr

08011658 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b086      	sub	sp, #24
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011660:	2100      	movs	r1, #0
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7ff fdd0 	bl	8011208 <dir_sdi>
 8011668:	4603      	mov	r3, r0
 801166a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801166c:	7dfb      	ldrb	r3, [r7, #23]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d001      	beq.n	8011676 <dir_find+0x1e>
 8011672:	7dfb      	ldrb	r3, [r7, #23]
 8011674:	e03b      	b.n	80116ee <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011682:	4619      	mov	r1, r3
 8011684:	4610      	mov	r0, r2
 8011686:	f7ff f9d0 	bl	8010a2a <move_window>
 801168a:	4603      	mov	r3, r0
 801168c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801168e:	7dfb      	ldrb	r3, [r7, #23]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d128      	bne.n	80116e6 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801169a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80116a2:	7bfb      	ldrb	r3, [r7, #15]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d102      	bne.n	80116ae <dir_find+0x56>
 80116a8:	2304      	movs	r3, #4
 80116aa:	75fb      	strb	r3, [r7, #23]
 80116ac:	e01e      	b.n	80116ec <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	330b      	adds	r3, #11
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	f003 0308 	and.w	r3, r3, #8
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d10a      	bne.n	80116d2 <dir_find+0x7a>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80116c2:	220b      	movs	r2, #11
 80116c4:	4619      	mov	r1, r3
 80116c6:	6938      	ldr	r0, [r7, #16]
 80116c8:	f7fe ff44 	bl	8010554 <mem_cmp>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d00b      	beq.n	80116ea <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80116d2:	2100      	movs	r1, #0
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7ff fe2b 	bl	8011330 <dir_next>
 80116da:	4603      	mov	r3, r0
 80116dc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80116de:	7dfb      	ldrb	r3, [r7, #23]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d0c8      	beq.n	8011676 <dir_find+0x1e>
 80116e4:	e002      	b.n	80116ec <dir_find+0x94>
		if (res != FR_OK) break;
 80116e6:	bf00      	nop
 80116e8:	e000      	b.n	80116ec <dir_find+0x94>
			break;
 80116ea:	bf00      	nop

	return res;
 80116ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3718      	adds	r7, #24
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80116fe:	2101      	movs	r1, #1
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff ff0c 	bl	801151e <dir_alloc>
 8011706:	4603      	mov	r3, r0
 8011708:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 801170a:	7bfb      	ldrb	r3, [r7, #15]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d126      	bne.n	801175e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801171c:	4619      	mov	r1, r3
 801171e:	4610      	mov	r0, r2
 8011720:	f7ff f983 	bl	8010a2a <move_window>
 8011724:	4603      	mov	r3, r0
 8011726:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011728:	7bfb      	ldrb	r3, [r7, #15]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d117      	bne.n	801175e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011734:	2220      	movs	r2, #32
 8011736:	2100      	movs	r1, #0
 8011738:	4618      	mov	r0, r3
 801173a:	f7fe fef1 	bl	8010520 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801174a:	220b      	movs	r2, #11
 801174c:	4619      	mov	r1, r3
 801174e:	f7fe fec9 	bl	80104e4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011758:	2201      	movs	r2, #1
 801175a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 801175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011760:	4618      	mov	r0, r3
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b088      	sub	sp, #32
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	60fb      	str	r3, [r7, #12]
 8011778:	e002      	b.n	8011780 <create_name+0x18>
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	3301      	adds	r3, #1
 801177e:	60fb      	str	r3, [r7, #12]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	2b2f      	cmp	r3, #47	; 0x2f
 8011786:	d0f8      	beq.n	801177a <create_name+0x12>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b5c      	cmp	r3, #92	; 0x5c
 801178e:	d0f4      	beq.n	801177a <create_name+0x12>
	sfn = dp->fn;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011796:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011798:	220b      	movs	r2, #11
 801179a:	2120      	movs	r1, #32
 801179c:	68b8      	ldr	r0, [r7, #8]
 801179e:	f7fe febf 	bl	8010520 <mem_set>
	si = i = b = 0; ni = 8;
 80117a2:	2300      	movs	r3, #0
 80117a4:	77fb      	strb	r3, [r7, #31]
 80117a6:	2300      	movs	r3, #0
 80117a8:	613b      	str	r3, [r7, #16]
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	617b      	str	r3, [r7, #20]
 80117ae:	2308      	movs	r3, #8
 80117b0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	617a      	str	r2, [r7, #20]
 80117b8:	68fa      	ldr	r2, [r7, #12]
 80117ba:	4413      	add	r3, r2
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80117c0:	7fbb      	ldrb	r3, [r7, #30]
 80117c2:	2b20      	cmp	r3, #32
 80117c4:	d953      	bls.n	801186e <create_name+0x106>
 80117c6:	7fbb      	ldrb	r3, [r7, #30]
 80117c8:	2b2f      	cmp	r3, #47	; 0x2f
 80117ca:	d050      	beq.n	801186e <create_name+0x106>
 80117cc:	7fbb      	ldrb	r3, [r7, #30]
 80117ce:	2b5c      	cmp	r3, #92	; 0x5c
 80117d0:	d04d      	beq.n	801186e <create_name+0x106>
		if (c == '.' || i >= ni) {
 80117d2:	7fbb      	ldrb	r3, [r7, #30]
 80117d4:	2b2e      	cmp	r3, #46	; 0x2e
 80117d6:	d003      	beq.n	80117e0 <create_name+0x78>
 80117d8:	693a      	ldr	r2, [r7, #16]
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d30f      	bcc.n	8011800 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80117e0:	69bb      	ldr	r3, [r7, #24]
 80117e2:	2b08      	cmp	r3, #8
 80117e4:	d102      	bne.n	80117ec <create_name+0x84>
 80117e6:	7fbb      	ldrb	r3, [r7, #30]
 80117e8:	2b2e      	cmp	r3, #46	; 0x2e
 80117ea:	d001      	beq.n	80117f0 <create_name+0x88>
 80117ec:	2306      	movs	r3, #6
 80117ee:	e073      	b.n	80118d8 <create_name+0x170>
			i = 8; ni = 11;
 80117f0:	2308      	movs	r3, #8
 80117f2:	613b      	str	r3, [r7, #16]
 80117f4:	230b      	movs	r3, #11
 80117f6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80117f8:	7ffb      	ldrb	r3, [r7, #31]
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	77fb      	strb	r3, [r7, #31]
 80117fe:	e035      	b.n	801186c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011800:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011804:	2b00      	cmp	r3, #0
 8011806:	da08      	bge.n	801181a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8011808:	7ffb      	ldrb	r3, [r7, #31]
 801180a:	f043 0303 	orr.w	r3, r3, #3
 801180e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011810:	7fbb      	ldrb	r3, [r7, #30]
 8011812:	3b80      	subs	r3, #128	; 0x80
 8011814:	4a32      	ldr	r2, [pc, #200]	; (80118e0 <create_name+0x178>)
 8011816:	5cd3      	ldrb	r3, [r2, r3]
 8011818:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 801181a:	7fbb      	ldrb	r3, [r7, #30]
 801181c:	4619      	mov	r1, r3
 801181e:	4831      	ldr	r0, [pc, #196]	; (80118e4 <create_name+0x17c>)
 8011820:	f7fe febe 	bl	80105a0 <chk_chr>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d001      	beq.n	801182e <create_name+0xc6>
				return FR_INVALID_NAME;
 801182a:	2306      	movs	r3, #6
 801182c:	e054      	b.n	80118d8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 801182e:	7fbb      	ldrb	r3, [r7, #30]
 8011830:	2b40      	cmp	r3, #64	; 0x40
 8011832:	d907      	bls.n	8011844 <create_name+0xdc>
 8011834:	7fbb      	ldrb	r3, [r7, #30]
 8011836:	2b5a      	cmp	r3, #90	; 0x5a
 8011838:	d804      	bhi.n	8011844 <create_name+0xdc>
				b |= 2;
 801183a:	7ffb      	ldrb	r3, [r7, #31]
 801183c:	f043 0302 	orr.w	r3, r3, #2
 8011840:	77fb      	strb	r3, [r7, #31]
 8011842:	e00c      	b.n	801185e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8011844:	7fbb      	ldrb	r3, [r7, #30]
 8011846:	2b60      	cmp	r3, #96	; 0x60
 8011848:	d909      	bls.n	801185e <create_name+0xf6>
 801184a:	7fbb      	ldrb	r3, [r7, #30]
 801184c:	2b7a      	cmp	r3, #122	; 0x7a
 801184e:	d806      	bhi.n	801185e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8011850:	7ffb      	ldrb	r3, [r7, #31]
 8011852:	f043 0301 	orr.w	r3, r3, #1
 8011856:	77fb      	strb	r3, [r7, #31]
 8011858:	7fbb      	ldrb	r3, [r7, #30]
 801185a:	3b20      	subs	r3, #32
 801185c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	1c5a      	adds	r2, r3, #1
 8011862:	613a      	str	r2, [r7, #16]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	4413      	add	r3, r2
 8011868:	7fba      	ldrb	r2, [r7, #30]
 801186a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801186c:	e7a1      	b.n	80117b2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	441a      	add	r2, r3
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8011878:	7fbb      	ldrb	r3, [r7, #30]
 801187a:	2b20      	cmp	r3, #32
 801187c:	d801      	bhi.n	8011882 <create_name+0x11a>
 801187e:	2304      	movs	r3, #4
 8011880:	e000      	b.n	8011884 <create_name+0x11c>
 8011882:	2300      	movs	r3, #0
 8011884:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d101      	bne.n	8011890 <create_name+0x128>
 801188c:	2306      	movs	r3, #6
 801188e:	e023      	b.n	80118d8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	2be5      	cmp	r3, #229	; 0xe5
 8011896:	d102      	bne.n	801189e <create_name+0x136>
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	2205      	movs	r2, #5
 801189c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	2b08      	cmp	r3, #8
 80118a2:	d102      	bne.n	80118aa <create_name+0x142>
 80118a4:	7ffb      	ldrb	r3, [r7, #31]
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80118aa:	7ffb      	ldrb	r3, [r7, #31]
 80118ac:	f003 0303 	and.w	r3, r3, #3
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d103      	bne.n	80118bc <create_name+0x154>
 80118b4:	7fbb      	ldrb	r3, [r7, #30]
 80118b6:	f043 0310 	orr.w	r3, r3, #16
 80118ba:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80118bc:	7ffb      	ldrb	r3, [r7, #31]
 80118be:	f003 030c 	and.w	r3, r3, #12
 80118c2:	2b04      	cmp	r3, #4
 80118c4:	d103      	bne.n	80118ce <create_name+0x166>
 80118c6:	7fbb      	ldrb	r3, [r7, #30]
 80118c8:	f043 0308 	orr.w	r3, r3, #8
 80118cc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	330b      	adds	r3, #11
 80118d2:	7fba      	ldrb	r2, [r7, #30]
 80118d4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80118d6:	2300      	movs	r3, #0
#endif
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3720      	adds	r7, #32
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	08031e2c 	.word	0x08031e2c
 80118e4:	08018b40 	.word	0x08018b40

080118e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	2b2f      	cmp	r3, #47	; 0x2f
 80118f8:	d003      	beq.n	8011902 <follow_path+0x1a>
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b5c      	cmp	r3, #92	; 0x5c
 8011900:	d102      	bne.n	8011908 <follow_path+0x20>
		path++;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	3301      	adds	r3, #1
 8011906:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	2b1f      	cmp	r3, #31
 8011916:	d80a      	bhi.n	801192e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8011918:	2100      	movs	r1, #0
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff fc74 	bl	8011208 <dir_sdi>
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801192c:	e045      	b.n	80119ba <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801192e:	463b      	mov	r3, r7
 8011930:	4619      	mov	r1, r3
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7ff ff18 	bl	8011768 <create_name>
 8011938:	4603      	mov	r3, r0
 801193a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801193c:	7bfb      	ldrb	r3, [r7, #15]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d136      	bne.n	80119b0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff fe88 	bl	8011658 <dir_find>
 8011948:	4603      	mov	r3, r0
 801194a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011952:	7adb      	ldrb	r3, [r3, #11]
 8011954:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8011956:	7bfb      	ldrb	r3, [r7, #15]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d00a      	beq.n	8011972 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801195c:	7bfb      	ldrb	r3, [r7, #15]
 801195e:	2b04      	cmp	r3, #4
 8011960:	d128      	bne.n	80119b4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011962:	7bbb      	ldrb	r3, [r7, #14]
 8011964:	f003 0304 	and.w	r3, r3, #4
 8011968:	2b00      	cmp	r3, #0
 801196a:	d123      	bne.n	80119b4 <follow_path+0xcc>
 801196c:	2305      	movs	r3, #5
 801196e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8011970:	e020      	b.n	80119b4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011972:	7bbb      	ldrb	r3, [r7, #14]
 8011974:	f003 0304 	and.w	r3, r3, #4
 8011978:	2b00      	cmp	r3, #0
 801197a:	d11d      	bne.n	80119b8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011982:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	330b      	adds	r3, #11
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	f003 0310 	and.w	r3, r3, #16
 801198e:	2b00      	cmp	r3, #0
 8011990:	d102      	bne.n	8011998 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8011992:	2305      	movs	r3, #5
 8011994:	73fb      	strb	r3, [r7, #15]
 8011996:	e010      	b.n	80119ba <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801199e:	68b9      	ldr	r1, [r7, #8]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7ff fe06 	bl	80115b2 <ld_clust>
 80119a6:	4602      	mov	r2, r0
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80119ae:	e7be      	b.n	801192e <follow_path+0x46>
			if (res != FR_OK) break;
 80119b0:	bf00      	nop
 80119b2:	e002      	b.n	80119ba <follow_path+0xd2>
				break;
 80119b4:	bf00      	nop
 80119b6:	e000      	b.n	80119ba <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80119b8:	bf00      	nop
		}
	}

	return res;
 80119ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b087      	sub	sp, #28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80119cc:	f04f 33ff 	mov.w	r3, #4294967295
 80119d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d031      	beq.n	8011a3e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	617b      	str	r3, [r7, #20]
 80119e0:	e002      	b.n	80119e8 <get_ldnumber+0x24>
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	3301      	adds	r3, #1
 80119e6:	617b      	str	r3, [r7, #20]
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b20      	cmp	r3, #32
 80119ee:	d903      	bls.n	80119f8 <get_ldnumber+0x34>
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	2b3a      	cmp	r3, #58	; 0x3a
 80119f6:	d1f4      	bne.n	80119e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	2b3a      	cmp	r3, #58	; 0x3a
 80119fe:	d11c      	bne.n	8011a3a <get_ldnumber+0x76>
			tp = *path;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	1c5a      	adds	r2, r3, #1
 8011a0a:	60fa      	str	r2, [r7, #12]
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	3b30      	subs	r3, #48	; 0x30
 8011a10:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	2b09      	cmp	r3, #9
 8011a16:	d80e      	bhi.n	8011a36 <get_ldnumber+0x72>
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d10a      	bne.n	8011a36 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d107      	bne.n	8011a36 <get_ldnumber+0x72>
					vol = (int)i;
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	617b      	str	r3, [r7, #20]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	697a      	ldr	r2, [r7, #20]
 8011a34:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	e002      	b.n	8011a40 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011a3e:	693b      	ldr	r3, [r7, #16]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	371c      	adds	r7, #28
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bc80      	pop	{r7}
 8011a48:	4770      	bx	lr
	...

08011a4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f04f 32ff 	mov.w	r2, #4294967295
 8011a64:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8011a68:	6839      	ldr	r1, [r7, #0]
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7fe ffdd 	bl	8010a2a <move_window>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d001      	beq.n	8011a7a <check_fs+0x2e>
		return 3;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e04a      	b.n	8011b10 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a80:	3301      	adds	r3, #1
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	021b      	lsls	r3, r3, #8
 8011a86:	b21a      	sxth	r2, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011a8e:	b21b      	sxth	r3, r3
 8011a90:	4313      	orrs	r3, r2
 8011a92:	b21b      	sxth	r3, r3
 8011a94:	4a20      	ldr	r2, [pc, #128]	; (8011b18 <check_fs+0xcc>)
 8011a96:	4293      	cmp	r3, r2
 8011a98:	d001      	beq.n	8011a9e <check_fs+0x52>
		return 2;
 8011a9a:	2302      	movs	r3, #2
 8011a9c:	e038      	b.n	8011b10 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3336      	adds	r3, #54	; 0x36
 8011aa2:	3303      	adds	r3, #3
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	061a      	lsls	r2, r3, #24
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	3336      	adds	r3, #54	; 0x36
 8011aac:	3302      	adds	r3, #2
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	041b      	lsls	r3, r3, #16
 8011ab2:	4313      	orrs	r3, r2
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	3236      	adds	r2, #54	; 0x36
 8011ab8:	3201      	adds	r2, #1
 8011aba:	7812      	ldrb	r2, [r2, #0]
 8011abc:	0212      	lsls	r2, r2, #8
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	687a      	ldr	r2, [r7, #4]
 8011ac2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011acc:	4a13      	ldr	r2, [pc, #76]	; (8011b1c <check_fs+0xd0>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d101      	bne.n	8011ad6 <check_fs+0x8a>
		return 0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e01c      	b.n	8011b10 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	3352      	adds	r3, #82	; 0x52
 8011ada:	3303      	adds	r3, #3
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	061a      	lsls	r2, r3, #24
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	3352      	adds	r3, #82	; 0x52
 8011ae4:	3302      	adds	r3, #2
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	041b      	lsls	r3, r3, #16
 8011aea:	4313      	orrs	r3, r2
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	3252      	adds	r2, #82	; 0x52
 8011af0:	3201      	adds	r2, #1
 8011af2:	7812      	ldrb	r2, [r2, #0]
 8011af4:	0212      	lsls	r2, r2, #8
 8011af6:	4313      	orrs	r3, r2
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8011afe:	4313      	orrs	r3, r2
 8011b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011b04:	4a05      	ldr	r2, [pc, #20]	; (8011b1c <check_fs+0xd0>)
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d101      	bne.n	8011b0e <check_fs+0xc2>
		return 0;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e000      	b.n	8011b10 <check_fs+0xc4>

	return 1;
 8011b0e:	2301      	movs	r3, #1
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	ffffaa55 	.word	0xffffaa55
 8011b1c:	00544146 	.word	0x00544146

08011b20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b096      	sub	sp, #88	; 0x58
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	60f8      	str	r0, [r7, #12]
 8011b28:	60b9      	str	r1, [r7, #8]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2200      	movs	r2, #0
 8011b32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011b34:	68b8      	ldr	r0, [r7, #8]
 8011b36:	f7ff ff45 	bl	80119c4 <get_ldnumber>
 8011b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	da01      	bge.n	8011b46 <find_volume+0x26>
 8011b42:	230b      	movs	r3, #11
 8011b44:	e2b0      	b.n	80120a8 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011b46:	4aa1      	ldr	r2, [pc, #644]	; (8011dcc <find_volume+0x2ac>)
 8011b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d101      	bne.n	8011b5a <find_volume+0x3a>
 8011b56:	230c      	movs	r3, #12
 8011b58:	e2a6      	b.n	80120a8 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 8011b5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b5c:	f7fe fd3a 	bl	80105d4 <lock_fs>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d101      	bne.n	8011b6a <find_volume+0x4a>
 8011b66:	230f      	movs	r3, #15
 8011b68:	e29e      	b.n	80120a8 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b6e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8011b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d01b      	beq.n	8011bb2 <find_volume+0x92>
		stat = disk_status(fs->drv);
 8011b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe fc11 	bl	80103a8 <disk_status>
 8011b86:	4603      	mov	r3, r0
 8011b88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b90:	f003 0301 	and.w	r3, r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10c      	bne.n	8011bb2 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8011b98:	79fb      	ldrb	r3, [r7, #7]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d007      	beq.n	8011bae <find_volume+0x8e>
 8011b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ba2:	f003 0304 	and.w	r3, r3, #4
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d001      	beq.n	8011bae <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8011baa:	230a      	movs	r3, #10
 8011bac:	e27c      	b.n	80120a8 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e27a      	b.n	80120a8 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bbc:	b2da      	uxtb	r2, r3
 8011bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fe fc06 	bl	80103dc <disk_initialize>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8011bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bda:	f003 0301 	and.w	r3, r3, #1
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d001      	beq.n	8011be6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011be2:	2303      	movs	r3, #3
 8011be4:	e260      	b.n	80120a8 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8011be6:	79fb      	ldrb	r3, [r7, #7]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d007      	beq.n	8011bfc <find_volume+0xdc>
 8011bec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bf0:	f003 0304 	and.w	r3, r3, #4
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8011bf8:	230a      	movs	r3, #10
 8011bfa:	e255      	b.n	80120a8 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8011c00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c04:	f7ff ff22 	bl	8011a4c <check_fs>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8011c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d153      	bne.n	8011cbe <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011c16:	2300      	movs	r3, #0
 8011c18:	643b      	str	r3, [r7, #64]	; 0x40
 8011c1a:	e028      	b.n	8011c6e <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8011c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c20:	011b      	lsls	r3, r3, #4
 8011c22:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011c26:	4413      	add	r3, r2
 8011c28:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8011c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d012      	beq.n	8011c5a <find_volume+0x13a>
 8011c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c36:	330b      	adds	r3, #11
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	061a      	lsls	r2, r3, #24
 8011c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3e:	330a      	adds	r3, #10
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	041b      	lsls	r3, r3, #16
 8011c44:	4313      	orrs	r3, r2
 8011c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c48:	3209      	adds	r2, #9
 8011c4a:	7812      	ldrb	r2, [r2, #0]
 8011c4c:	0212      	lsls	r2, r2, #8
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c52:	3208      	adds	r2, #8
 8011c54:	7812      	ldrb	r2, [r2, #0]
 8011c56:	431a      	orrs	r2, r3
 8011c58:	e000      	b.n	8011c5c <find_volume+0x13c>
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c5e:	009b      	lsls	r3, r3, #2
 8011c60:	3358      	adds	r3, #88	; 0x58
 8011c62:	443b      	add	r3, r7
 8011c64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8011c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c70:	2b03      	cmp	r3, #3
 8011c72:	d9d3      	bls.n	8011c1c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8011c74:	2300      	movs	r3, #0
 8011c76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d002      	beq.n	8011c84 <find_volume+0x164>
 8011c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c80:	3b01      	subs	r3, #1
 8011c82:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8011c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	3358      	adds	r3, #88	; 0x58
 8011c8a:	443b      	add	r3, r7
 8011c8c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011c90:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8011c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d005      	beq.n	8011ca4 <find_volume+0x184>
 8011c98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c9c:	f7ff fed6 	bl	8011a4c <check_fs>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	e000      	b.n	8011ca6 <find_volume+0x186>
 8011ca4:	2302      	movs	r3, #2
 8011ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8011caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d005      	beq.n	8011cbe <find_volume+0x19e>
 8011cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8011cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cba:	2b03      	cmp	r3, #3
 8011cbc:	d9e2      	bls.n	8011c84 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d101      	bne.n	8011cca <find_volume+0x1aa>
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e1ee      	b.n	80120a8 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8011cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <find_volume+0x1b6>
 8011cd2:	230d      	movs	r3, #13
 8011cd4:	e1e8      	b.n	80120a8 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	7b1b      	ldrb	r3, [r3, #12]
 8011cda:	021b      	lsls	r3, r3, #8
 8011cdc:	b21a      	sxth	r2, r3
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	7adb      	ldrb	r3, [r3, #11]
 8011ce2:	b21b      	sxth	r3, r3
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	b21b      	sxth	r3, r3
 8011ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cec:	d001      	beq.n	8011cf2 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8011cee:	230d      	movs	r3, #13
 8011cf0:	e1da      	b.n	80120a8 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	7ddb      	ldrb	r3, [r3, #23]
 8011cf6:	021b      	lsls	r3, r3, #8
 8011cf8:	b21a      	sxth	r2, r3
 8011cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfc:	7d9b      	ldrb	r3, [r3, #22]
 8011cfe:	b21b      	sxth	r3, r3
 8011d00:	4313      	orrs	r3, r2
 8011d02:	b21b      	sxth	r3, r3
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8011d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d112      	bne.n	8011d34 <find_volume+0x214>
 8011d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011d14:	061a      	lsls	r2, r3, #24
 8011d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d18:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011d1c:	041b      	lsls	r3, r3, #16
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d22:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8011d26:	0212      	lsls	r2, r2, #8
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d2c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011d30:	4313      	orrs	r3, r2
 8011d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8011d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	7c1a      	ldrb	r2, [r3, #16]
 8011d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d42:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8011d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d48:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d006      	beq.n	8011d5e <find_volume+0x23e>
 8011d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d52:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d001      	beq.n	8011d5e <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 8011d5a:	230d      	movs	r3, #13
 8011d5c:	e1a4      	b.n	80120a8 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d60:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011d64:	461a      	mov	r2, r3
 8011d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d68:	fb02 f303 	mul.w	r3, r2, r3
 8011d6c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8011d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d70:	7b5a      	ldrb	r2, [r3, #13]
 8011d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d74:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00a      	beq.n	8011d98 <find_volume+0x278>
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011d88:	461a      	mov	r2, r3
 8011d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011d90:	3b01      	subs	r3, #1
 8011d92:	4013      	ands	r3, r2
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d001      	beq.n	8011d9c <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8011d98:	230d      	movs	r3, #13
 8011d9a:	e185      	b.n	80120a8 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	7c9b      	ldrb	r3, [r3, #18]
 8011da0:	021b      	lsls	r3, r3, #8
 8011da2:	b21a      	sxth	r2, r3
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	7c5b      	ldrb	r3, [r3, #17]
 8011da8:	b21b      	sxth	r3, r3
 8011daa:	4313      	orrs	r3, r2
 8011dac:	b21b      	sxth	r3, r3
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8011db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011dbc:	f003 030f 	and.w	r3, r3, #15
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d004      	beq.n	8011dd0 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8011dc6:	230d      	movs	r3, #13
 8011dc8:	e16e      	b.n	80120a8 <find_volume+0x588>
 8011dca:	bf00      	nop
 8011dcc:	20000f20 	.word	0x20000f20

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8011dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd2:	7d1b      	ldrb	r3, [r3, #20]
 8011dd4:	021b      	lsls	r3, r3, #8
 8011dd6:	b21a      	sxth	r2, r3
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dda:	7cdb      	ldrb	r3, [r3, #19]
 8011ddc:	b21b      	sxth	r3, r3
 8011dde:	4313      	orrs	r3, r2
 8011de0:	b21b      	sxth	r3, r3
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8011de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d112      	bne.n	8011e12 <find_volume+0x2f2>
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011df2:	061a      	lsls	r2, r3, #24
 8011df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011dfa:	041b      	lsls	r3, r3, #16
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e00:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8011e04:	0212      	lsls	r2, r2, #8
 8011e06:	4313      	orrs	r3, r2
 8011e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8011e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e14:	7bdb      	ldrb	r3, [r3, #15]
 8011e16:	021b      	lsls	r3, r3, #8
 8011e18:	b21a      	sxth	r2, r3
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	7b9b      	ldrb	r3, [r3, #14]
 8011e1e:	b21b      	sxth	r3, r3
 8011e20:	4313      	orrs	r3, r2
 8011e22:	b21b      	sxth	r3, r3
 8011e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8011e26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d101      	bne.n	8011e30 <find_volume+0x310>
 8011e2c:	230d      	movs	r3, #13
 8011e2e:	e13b      	b.n	80120a8 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8011e30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e34:	4413      	add	r3, r2
 8011e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e38:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8011e3c:	0912      	lsrs	r2, r2, #4
 8011e3e:	b292      	uxth	r2, r2
 8011e40:	4413      	add	r3, r2
 8011e42:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d201      	bcs.n	8011e50 <find_volume+0x330>
 8011e4c:	230d      	movs	r3, #13
 8011e4e:	e12b      	b.n	80120a8 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8011e50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e54:	1ad3      	subs	r3, r2, r3
 8011e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e58:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e60:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8011e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d101      	bne.n	8011e6c <find_volume+0x34c>
 8011e68:	230d      	movs	r3, #13
 8011e6a:	e11d      	b.n	80120a8 <find_volume+0x588>
	fmt = FS_FAT12;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8011e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e74:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d902      	bls.n	8011e82 <find_volume+0x362>
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8011e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d902      	bls.n	8011e92 <find_volume+0x372>
 8011e8c:	2303      	movs	r3, #3
 8011e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8011e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e94:	1c9a      	adds	r2, r3, #2
 8011e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011ea0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8011ea4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ea8:	441a      	add	r2, r3
 8011eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eac:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8011eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb4:	441a      	add	r2, r3
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8011ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ec0:	2b03      	cmp	r3, #3
 8011ec2:	d121      	bne.n	8011f08 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <find_volume+0x3b2>
 8011ece:	230d      	movs	r3, #13
 8011ed0:	e0ea      	b.n	80120a8 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8011ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ed8:	061a      	lsls	r2, r3, #24
 8011eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011edc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011ee0:	041b      	lsls	r3, r3, #16
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ee6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8011eea:	0212      	lsls	r2, r2, #8
 8011eec:	4313      	orrs	r3, r2
 8011eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ef0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8011ef4:	431a      	orrs	r2, r3
 8011ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8011efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	647b      	str	r3, [r7, #68]	; 0x44
 8011f06:	e025      	b.n	8011f54 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8011f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d101      	bne.n	8011f16 <find_volume+0x3f6>
 8011f12:	230d      	movs	r3, #13
 8011f14:	e0c8      	b.n	80120a8 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8011f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f18:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8011f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f1e:	441a      	add	r2, r3
 8011f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f22:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011f26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d104      	bne.n	8011f38 <find_volume+0x418>
 8011f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	e00c      	b.n	8011f52 <find_volume+0x432>
 8011f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011f3e:	4613      	mov	r3, r2
 8011f40:	005b      	lsls	r3, r3, #1
 8011f42:	4413      	add	r3, r2
 8011f44:	085a      	lsrs	r2, r3, #1
 8011f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f48:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011f4c:	f003 0301 	and.w	r3, r3, #1
 8011f50:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8011f52:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8011f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011f60:	0a5b      	lsrs	r3, r3, #9
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d201      	bcs.n	8011f6a <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8011f66:	230d      	movs	r3, #13
 8011f68:	e09e      	b.n	80120a8 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8011f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f82:	2280      	movs	r2, #128	; 0x80
 8011f84:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8011f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f8c:	2b03      	cmp	r3, #3
 8011f8e:	d177      	bne.n	8012080 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8011f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f96:	021b      	lsls	r3, r3, #8
 8011f98:	b21a      	sxth	r2, r3
 8011f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fa0:	b21b      	sxth	r3, r3
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	b21b      	sxth	r3, r3
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d16a      	bne.n	8012080 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8011faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fac:	3301      	adds	r3, #1
 8011fae:	4619      	mov	r1, r3
 8011fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011fb2:	f7fe fd3a 	bl	8010a2a <move_window>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d161      	bne.n	8012080 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8011fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8011fca:	021b      	lsls	r3, r3, #8
 8011fcc:	b21a      	sxth	r2, r3
 8011fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011fd4:	b21b      	sxth	r3, r3
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	b21b      	sxth	r3, r3
 8011fda:	4a35      	ldr	r2, [pc, #212]	; (80120b0 <find_volume+0x590>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d14f      	bne.n	8012080 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe2:	78db      	ldrb	r3, [r3, #3]
 8011fe4:	061a      	lsls	r2, r3, #24
 8011fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe8:	789b      	ldrb	r3, [r3, #2]
 8011fea:	041b      	lsls	r3, r3, #16
 8011fec:	4313      	orrs	r3, r2
 8011fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ff0:	7852      	ldrb	r2, [r2, #1]
 8011ff2:	0212      	lsls	r2, r2, #8
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ff8:	7812      	ldrb	r2, [r2, #0]
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	4a2d      	ldr	r2, [pc, #180]	; (80120b4 <find_volume+0x594>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d13e      	bne.n	8012080 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8012008:	061a      	lsls	r2, r3, #24
 801200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8012010:	041b      	lsls	r3, r3, #16
 8012012:	4313      	orrs	r3, r2
 8012014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012016:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 801201a:	0212      	lsls	r2, r2, #8
 801201c:	4313      	orrs	r3, r2
 801201e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012020:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8012024:	4313      	orrs	r3, r2
 8012026:	4a24      	ldr	r2, [pc, #144]	; (80120b8 <find_volume+0x598>)
 8012028:	4293      	cmp	r3, r2
 801202a:	d129      	bne.n	8012080 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 801202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8012032:	061a      	lsls	r2, r3, #24
 8012034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012036:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801203a:	041b      	lsls	r3, r3, #16
 801203c:	4313      	orrs	r3, r2
 801203e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012040:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8012044:	0212      	lsls	r2, r2, #8
 8012046:	4313      	orrs	r3, r2
 8012048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801204a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 801204e:	431a      	orrs	r2, r3
 8012050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012052:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8012056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012058:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 801205c:	061a      	lsls	r2, r3, #24
 801205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012060:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8012064:	041b      	lsls	r3, r3, #16
 8012066:	4313      	orrs	r3, r2
 8012068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801206a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 801206e:	0212      	lsls	r2, r2, #8
 8012070:	4313      	orrs	r3, r2
 8012072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012074:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8012078:	431a      	orrs	r2, r3
 801207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8012080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012082:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 801208a:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <find_volume+0x59c>)
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	3301      	adds	r3, #1
 8012090:	b29a      	uxth	r2, r3
 8012092:	4b0a      	ldr	r3, [pc, #40]	; (80120bc <find_volume+0x59c>)
 8012094:	801a      	strh	r2, [r3, #0]
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <find_volume+0x59c>)
 8012098:	881a      	ldrh	r2, [r3, #0]
 801209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80120a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80120a2:	f7fe fc4f 	bl	8010944 <clear_lock>
#endif

	return FR_OK;
 80120a6:	2300      	movs	r3, #0
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3758      	adds	r7, #88	; 0x58
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	ffffaa55 	.word	0xffffaa55
 80120b4:	41615252 	.word	0x41615252
 80120b8:	61417272 	.word	0x61417272
 80120bc:	20000f24 	.word	0x20000f24

080120c0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b084      	sub	sp, #16
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d022      	beq.n	8012118 <validate+0x58>
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d01d      	beq.n	8012118 <validate+0x58>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d016      	beq.n	8012118 <validate+0x58>
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120f0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d10c      	bne.n	8012118 <validate+0x58>
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012104:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012108:	4618      	mov	r0, r3
 801210a:	f7fe f94d 	bl	80103a8 <disk_status>
 801210e:	4603      	mov	r3, r0
 8012110:	f003 0301 	and.w	r3, r3, #1
 8012114:	2b00      	cmp	r3, #0
 8012116:	d001      	beq.n	801211c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8012118:	2309      	movs	r3, #9
 801211a:	e00b      	b.n	8012134 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012122:	4618      	mov	r0, r3
 8012124:	f7fe fa56 	bl	80105d4 <lock_fs>
 8012128:	4603      	mov	r3, r0
 801212a:	2b00      	cmp	r3, #0
 801212c:	d101      	bne.n	8012132 <validate+0x72>
 801212e:	230f      	movs	r3, #15
 8012130:	e000      	b.n	8012134 <validate+0x74>

	return FR_OK;
 8012132:	2300      	movs	r3, #0
}
 8012134:	4618      	mov	r0, r3
 8012136:	3710      	adds	r7, #16
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8012142:	af00      	add	r7, sp, #0
 8012144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012148:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801214c:	6018      	str	r0, [r3, #0]
 801214e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012152:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012156:	6019      	str	r1, [r3, #0]
 8012158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801215c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012160:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8012162:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012166:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d101      	bne.n	8012174 <f_open+0x38>
 8012170:	2309      	movs	r3, #9
 8012172:	e263      	b.n	801263c <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8012174:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012178:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2200      	movs	r2, #0
 8012180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8012184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012188:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801218c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8012190:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8012194:	7812      	ldrb	r2, [r2, #0]
 8012196:	f002 021f 	and.w	r2, r2, #31
 801219a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801219c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80121a0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	f023 0301 	bic.w	r3, r3, #1
 80121aa:	b2da      	uxtb	r2, r3
 80121ac:	f107 0108 	add.w	r1, r7, #8
 80121b0:	f107 0320 	add.w	r3, r7, #32
 80121b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7ff fcb1 	bl	8011b20 <find_volume>
 80121be:	4603      	mov	r3, r0
 80121c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80121c4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	f040 8229 	bne.w	8012620 <f_open+0x4e4>
		INIT_BUF(dj);
 80121ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80121d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80121d6:	f107 0214 	add.w	r2, r7, #20
 80121da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80121de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80121e2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	f107 0320 	add.w	r3, r7, #32
 80121ec:	4611      	mov	r1, r2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7ff fb7a 	bl	80118e8 <follow_path>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80121fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80121fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012202:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012206:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801220a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801220e:	2b00      	cmp	r3, #0
 8012210:	d11d      	bne.n	801224e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8012212:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012216:	2b00      	cmp	r3, #0
 8012218:	d103      	bne.n	8012222 <f_open+0xe6>
				res = FR_INVALID_NAME;
 801221a:	2306      	movs	r3, #6
 801221c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012220:	e015      	b.n	801224e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012222:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012226:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	f023 0301 	bic.w	r3, r3, #1
 8012230:	2b00      	cmp	r3, #0
 8012232:	bf14      	ite	ne
 8012234:	2301      	movne	r3, #1
 8012236:	2300      	moveq	r3, #0
 8012238:	b2db      	uxtb	r3, r3
 801223a:	461a      	mov	r2, r3
 801223c:	f107 0320 	add.w	r3, r7, #32
 8012240:	4611      	mov	r1, r2
 8012242:	4618      	mov	r0, r3
 8012244:	f7fe f9f4 	bl	8010630 <chk_lock>
 8012248:	4603      	mov	r3, r0
 801224a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801224e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012252:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	f003 031c 	and.w	r3, r3, #28
 801225c:	2b00      	cmp	r3, #0
 801225e:	f000 80e6 	beq.w	801242e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8012262:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012266:	2b00      	cmp	r3, #0
 8012268:	d027      	beq.n	80122ba <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 801226a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801226e:	2b04      	cmp	r3, #4
 8012270:	d10e      	bne.n	8012290 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012272:	f7fe fa49 	bl	8010708 <enq_lock>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d006      	beq.n	801228a <f_open+0x14e>
 801227c:	f107 0320 	add.w	r3, r7, #32
 8012280:	4618      	mov	r0, r3
 8012282:	f7ff fa38 	bl	80116f6 <dir_register>
 8012286:	4603      	mov	r3, r0
 8012288:	e000      	b.n	801228c <f_open+0x150>
 801228a:	2312      	movs	r3, #18
 801228c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012294:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012298:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801229c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80122a0:	7812      	ldrb	r2, [r2, #0]
 80122a2:	f042 0208 	orr.w	r2, r2, #8
 80122a6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80122a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80122b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122b4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80122b8:	e017      	b.n	80122ea <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80122ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80122be:	330b      	adds	r3, #11
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	f003 0311 	and.w	r3, r3, #17
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d003      	beq.n	80122d2 <f_open+0x196>
					res = FR_DENIED;
 80122ca:	2307      	movs	r3, #7
 80122cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80122d0:	e00b      	b.n	80122ea <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80122d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122d6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	f003 0304 	and.w	r3, r3, #4
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d002      	beq.n	80122ea <f_open+0x1ae>
						res = FR_EXIST;
 80122e4:	2308      	movs	r3, #8
 80122e6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80122ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f040 80c1 	bne.w	8012476 <f_open+0x33a>
 80122f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122f8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	f003 0308 	and.w	r3, r3, #8
 8012302:	2b00      	cmp	r3, #0
 8012304:	f000 80b7 	beq.w	8012476 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8012308:	f7fc fcec 	bl	800ece4 <get_fattime>
 801230c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8012310:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012314:	330e      	adds	r3, #14
 8012316:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801231a:	b2d2      	uxtb	r2, r2
 801231c:	701a      	strb	r2, [r3, #0]
 801231e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012322:	b29b      	uxth	r3, r3
 8012324:	0a1b      	lsrs	r3, r3, #8
 8012326:	b29a      	uxth	r2, r3
 8012328:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801232c:	330f      	adds	r3, #15
 801232e:	b2d2      	uxtb	r2, r2
 8012330:	701a      	strb	r2, [r3, #0]
 8012332:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012336:	0c1a      	lsrs	r2, r3, #16
 8012338:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801233c:	3310      	adds	r3, #16
 801233e:	b2d2      	uxtb	r2, r2
 8012340:	701a      	strb	r2, [r3, #0]
 8012342:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012346:	0e1a      	lsrs	r2, r3, #24
 8012348:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801234c:	3311      	adds	r3, #17
 801234e:	b2d2      	uxtb	r2, r2
 8012350:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8012352:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012356:	330b      	adds	r3, #11
 8012358:	2200      	movs	r2, #0
 801235a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 801235c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012360:	331c      	adds	r3, #28
 8012362:	2200      	movs	r2, #0
 8012364:	701a      	strb	r2, [r3, #0]
 8012366:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801236a:	331d      	adds	r3, #29
 801236c:	2200      	movs	r2, #0
 801236e:	701a      	strb	r2, [r3, #0]
 8012370:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012374:	331e      	adds	r3, #30
 8012376:	2200      	movs	r2, #0
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801237e:	331f      	adds	r3, #31
 8012380:	2200      	movs	r2, #0
 8012382:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8012384:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012388:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801238c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012390:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff f90c 	bl	80115b2 <ld_clust>
 801239a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 801239e:	2100      	movs	r1, #0
 80123a0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80123a4:	f7ff f932 	bl	801160c <st_clust>
				dj.fs->wflag = 1;
 80123a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80123b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80123b4:	2201      	movs	r2, #1
 80123b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80123ba:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d059      	beq.n	8012476 <f_open+0x33a>
					dw = dj.fs->winsect;
 80123c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80123ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80123ce:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80123d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80123d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123da:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80123de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80123e2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7fe fde3 	bl	8010fb2 <remove_chain>
 80123ec:	4603      	mov	r3, r0
 80123ee:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80123f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d13d      	bne.n	8012476 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80123fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012406:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801240a:	3a01      	subs	r2, #1
 801240c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8012410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012414:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012418:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801241c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012420:	4618      	mov	r0, r3
 8012422:	f7fe fb02 	bl	8010a2a <move_window>
 8012426:	4603      	mov	r3, r0
 8012428:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801242c:	e023      	b.n	8012476 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801242e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012432:	2b00      	cmp	r3, #0
 8012434:	d11f      	bne.n	8012476 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8012436:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801243a:	330b      	adds	r3, #11
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	f003 0310 	and.w	r3, r3, #16
 8012442:	2b00      	cmp	r3, #0
 8012444:	d003      	beq.n	801244e <f_open+0x312>
					res = FR_NO_FILE;
 8012446:	2304      	movs	r3, #4
 8012448:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801244c:	e013      	b.n	8012476 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801244e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012452:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	f003 0302 	and.w	r3, r3, #2
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00a      	beq.n	8012476 <f_open+0x33a>
 8012460:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012464:	330b      	adds	r3, #11
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	f003 0301 	and.w	r3, r3, #1
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <f_open+0x33a>
						res = FR_DENIED;
 8012470:	2307      	movs	r3, #7
 8012472:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8012476:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801247a:	2b00      	cmp	r3, #0
 801247c:	d153      	bne.n	8012526 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801247e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012482:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	f003 0308 	and.w	r3, r3, #8
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00b      	beq.n	80124a8 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8012490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012494:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012498:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801249c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80124a0:	7812      	ldrb	r2, [r2, #0]
 80124a2:	f042 0220 	orr.w	r2, r2, #32
 80124a6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80124a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80124ac:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80124b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80124b4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80124b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80124bc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80124c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80124ca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80124d4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80124d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80124dc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	f023 0301 	bic.w	r3, r3, #1
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	bf14      	ite	ne
 80124ea:	2301      	movne	r3, #1
 80124ec:	2300      	moveq	r3, #0
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	461a      	mov	r2, r3
 80124f2:	f107 0320 	add.w	r3, r7, #32
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe f929 	bl	8010750 <inc_lock>
 80124fe:	4602      	mov	r2, r0
 8012500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012504:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801250e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012512:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801251c:	2b00      	cmp	r3, #0
 801251e:	d102      	bne.n	8012526 <f_open+0x3ea>
 8012520:	2302      	movs	r3, #2
 8012522:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8012526:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801252a:	2b00      	cmp	r3, #0
 801252c:	d178      	bne.n	8012620 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 801252e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012532:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801253c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8012540:	7812      	ldrb	r2, [r2, #0]
 8012542:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8012546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801254a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2200      	movs	r2, #0
 8012552:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8012556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801255a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801255e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012562:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff f823 	bl	80115b2 <ld_clust>
 801256c:	4602      	mov	r2, r0
 801256e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012572:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 801257c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012580:	331f      	adds	r3, #31
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	061a      	lsls	r2, r3, #24
 8012586:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801258a:	331e      	adds	r3, #30
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	041b      	lsls	r3, r3, #16
 8012590:	4313      	orrs	r3, r2
 8012592:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012596:	321d      	adds	r2, #29
 8012598:	7812      	ldrb	r2, [r2, #0]
 801259a:	0212      	lsls	r2, r2, #8
 801259c:	4313      	orrs	r3, r2
 801259e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80125a2:	321c      	adds	r2, #28
 80125a4:	7812      	ldrb	r2, [r2, #0]
 80125a6:	431a      	orrs	r2, r3
 80125a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125ac:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80125b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125ba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80125c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125ca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2200      	movs	r2, #0
 80125d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80125d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2200      	movs	r2, #0
 80125e2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80125e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125ea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80125ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80125f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8012600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012604:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801260e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8012612:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012616:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8012620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012624:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801262c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7fd ffdd 	bl	80105f2 <unlock_fs>
 8012638:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 801263c:	4618      	mov	r0, r3
 801263e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012646:	b580      	push	{r7, lr}
 8012648:	b08a      	sub	sp, #40	; 0x28
 801264a:	af00      	add	r7, sp, #0
 801264c:	60f8      	str	r0, [r7, #12]
 801264e:	60b9      	str	r1, [r7, #8]
 8012650:	607a      	str	r2, [r7, #4]
 8012652:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	2200      	movs	r2, #0
 801265c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f7ff fd2e 	bl	80120c0 <validate>
 8012664:	4603      	mov	r3, r0
 8012666:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d009      	beq.n	8012682 <f_write+0x3c>
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012674:	7dfa      	ldrb	r2, [r7, #23]
 8012676:	4611      	mov	r1, r2
 8012678:	4618      	mov	r0, r3
 801267a:	f7fd ffba 	bl	80105f2 <unlock_fs>
 801267e:	7dfb      	ldrb	r3, [r7, #23]
 8012680:	e1d4      	b.n	8012a2c <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00d      	beq.n	80126a8 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012698:	4619      	mov	r1, r3
 801269a:	4610      	mov	r0, r2
 801269c:	f7fd ffa9 	bl	80105f2 <unlock_fs>
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80126a6:	e1c1      	b.n	8012a2c <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80126ae:	f003 0302 	and.w	r3, r3, #2
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d108      	bne.n	80126c8 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80126bc:	2107      	movs	r1, #7
 80126be:	4618      	mov	r0, r3
 80126c0:	f7fd ff97 	bl	80105f2 <unlock_fs>
 80126c4:	2307      	movs	r3, #7
 80126c6:	e1b1      	b.n	8012a2c <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	441a      	add	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80126d8:	429a      	cmp	r2, r3
 80126da:	f080 8182 	bcs.w	80129e2 <f_write+0x39c>
 80126de:	2300      	movs	r3, #0
 80126e0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80126e2:	e17e      	b.n	80129e2 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80126ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f040 813e 	bne.w	8012970 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80126fa:	0a5b      	lsrs	r3, r3, #9
 80126fc:	b2da      	uxtb	r2, r3
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012704:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8012708:	3b01      	subs	r3, #1
 801270a:	b2db      	uxtb	r3, r3
 801270c:	4013      	ands	r3, r2
 801270e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8012710:	7dbb      	ldrb	r3, [r7, #22]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d15f      	bne.n	80127d6 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801271c:	2b00      	cmp	r3, #0
 801271e:	d10f      	bne.n	8012740 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012726:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272a:	2b00      	cmp	r3, #0
 801272c:	d121      	bne.n	8012772 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012734:	2100      	movs	r1, #0
 8012736:	4618      	mov	r0, r3
 8012738:	f7fe fc95 	bl	8011066 <create_chain>
 801273c:	6278      	str	r0, [r7, #36]	; 0x24
 801273e:	e018      	b.n	8012772 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012746:	2b00      	cmp	r3, #0
 8012748:	d008      	beq.n	801275c <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012750:	4619      	mov	r1, r3
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f7fe fd24 	bl	80111a0 <clmt_clust>
 8012758:	6278      	str	r0, [r7, #36]	; 0x24
 801275a:	e00a      	b.n	8012772 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012768:	4619      	mov	r1, r3
 801276a:	4610      	mov	r0, r2
 801276c:	f7fe fc7b 	bl	8011066 <create_chain>
 8012770:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012774:	2b00      	cmp	r3, #0
 8012776:	f000 8139 	beq.w	80129ec <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277c:	2b01      	cmp	r3, #1
 801277e:	d10c      	bne.n	801279a <f_write+0x154>
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2202      	movs	r2, #2
 8012784:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801278e:	2102      	movs	r1, #2
 8012790:	4618      	mov	r0, r3
 8012792:	f7fd ff2e 	bl	80105f2 <unlock_fs>
 8012796:	2302      	movs	r3, #2
 8012798:	e148      	b.n	8012a2c <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a0:	d10c      	bne.n	80127bc <f_write+0x176>
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2201      	movs	r2, #1
 80127a6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80127b0:	2101      	movs	r1, #1
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fd ff1d 	bl	80105f2 <unlock_fs>
 80127b8:	2301      	movs	r3, #1
 80127ba:	e137      	b.n	8012a2c <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d103      	bne.n	80127d6 <f_write+0x190>
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80127dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d024      	beq.n	801282e <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80127ea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80127ee:	68f9      	ldr	r1, [r7, #12]
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80127f6:	2301      	movs	r3, #1
 80127f8:	f7fd fe36 	bl	8010468 <disk_write>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d00c      	beq.n	801281c <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2201      	movs	r2, #1
 8012806:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012810:	2101      	movs	r1, #1
 8012812:	4618      	mov	r0, r3
 8012814:	f7fd feed 	bl	80105f2 <unlock_fs>
 8012818:	2301      	movs	r3, #1
 801281a:	e107      	b.n	8012a2c <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012826:	b2da      	uxtb	r2, r3
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801283a:	4619      	mov	r1, r3
 801283c:	4610      	mov	r0, r2
 801283e:	f7fe f9cf 	bl	8010be0 <clust2sect>
 8012842:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d10c      	bne.n	8012864 <f_write+0x21e>
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2202      	movs	r2, #2
 801284e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012858:	2102      	movs	r1, #2
 801285a:	4618      	mov	r0, r3
 801285c:	f7fd fec9 	bl	80105f2 <unlock_fs>
 8012860:	2302      	movs	r3, #2
 8012862:	e0e3      	b.n	8012a2c <f_write+0x3e6>
			sect += csect;
 8012864:	7dbb      	ldrb	r3, [r7, #22]
 8012866:	693a      	ldr	r2, [r7, #16]
 8012868:	4413      	add	r3, r2
 801286a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	0a5b      	lsrs	r3, r3, #9
 8012870:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d04f      	beq.n	8012918 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8012878:	7dba      	ldrb	r2, [r7, #22]
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	4413      	add	r3, r2
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8012884:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8012888:	4293      	cmp	r3, r2
 801288a:	d908      	bls.n	801289e <f_write+0x258>
					cc = fp->fs->csize - csect;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012892:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8012896:	461a      	mov	r2, r3
 8012898:	7dbb      	ldrb	r3, [r7, #22]
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80128a4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	693a      	ldr	r2, [r7, #16]
 80128ac:	69b9      	ldr	r1, [r7, #24]
 80128ae:	f7fd fddb 	bl	8010468 <disk_write>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00c      	beq.n	80128d2 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	2201      	movs	r2, #1
 80128bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80128c6:	2101      	movs	r1, #1
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7fd fe92 	bl	80105f2 <unlock_fs>
 80128ce:	2301      	movs	r3, #1
 80128d0:	e0ac      	b.n	8012a2c <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	1ad3      	subs	r3, r2, r3
 80128dc:	69fa      	ldr	r2, [r7, #28]
 80128de:	429a      	cmp	r2, r3
 80128e0:	d916      	bls.n	8012910 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80128e2:	68f8      	ldr	r0, [r7, #12]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	025b      	lsls	r3, r3, #9
 80128f0:	69ba      	ldr	r2, [r7, #24]
 80128f2:	4413      	add	r3, r2
 80128f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128f8:	4619      	mov	r1, r3
 80128fa:	f7fd fdf3 	bl	80104e4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012908:	b2da      	uxtb	r2, r3
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	025b      	lsls	r3, r3, #9
 8012914:	623b      	str	r3, [r7, #32]
				continue;
 8012916:	e04e      	b.n	80129b6 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801291e:	693a      	ldr	r2, [r7, #16]
 8012920:	429a      	cmp	r2, r3
 8012922:	d021      	beq.n	8012968 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012930:	429a      	cmp	r2, r3
 8012932:	d219      	bcs.n	8012968 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801293a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801293e:	68f9      	ldr	r1, [r7, #12]
 8012940:	2301      	movs	r3, #1
 8012942:	693a      	ldr	r2, [r7, #16]
 8012944:	f7fd fd70 	bl	8010428 <disk_read>
 8012948:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00c      	beq.n	8012968 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2201      	movs	r2, #1
 8012952:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801295c:	2101      	movs	r1, #1
 801295e:	4618      	mov	r0, r3
 8012960:	f7fd fe47 	bl	80105f2 <unlock_fs>
 8012964:	2301      	movs	r3, #1
 8012966:	e061      	b.n	8012a2c <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	693a      	ldr	r2, [r7, #16]
 801296c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801297a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801297e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8012980:	6a3a      	ldr	r2, [r7, #32]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	429a      	cmp	r2, r3
 8012986:	d901      	bls.n	801298c <f_write+0x346>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012996:	68fa      	ldr	r2, [r7, #12]
 8012998:	4413      	add	r3, r2
 801299a:	6a3a      	ldr	r2, [r7, #32]
 801299c:	69b9      	ldr	r1, [r7, #24]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fd fda0 	bl	80104e4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80129aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80129b6:	69ba      	ldr	r2, [r7, #24]
 80129b8:	6a3b      	ldr	r3, [r7, #32]
 80129ba:	4413      	add	r3, r2
 80129bc:	61bb      	str	r3, [r7, #24]
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80129c4:	6a3b      	ldr	r3, [r7, #32]
 80129c6:	441a      	add	r2, r3
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	441a      	add	r2, r3
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	601a      	str	r2, [r3, #0]
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	6a3b      	ldr	r3, [r7, #32]
 80129de:	1ad3      	subs	r3, r2, r3
 80129e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f47f ae7d 	bne.w	80126e4 <f_write+0x9e>
 80129ea:	e000      	b.n	80129ee <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80129ec:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d905      	bls.n	8012a0a <f_write+0x3c4>
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012a10:	f043 0320 	orr.w	r3, r3, #32
 8012a14:	b2da      	uxtb	r2, r3
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a22:	2100      	movs	r1, #0
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fd fde4 	bl	80105f2 <unlock_fs>
 8012a2a:	2300      	movs	r3, #0
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3728      	adds	r7, #40	; 0x28
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b086      	sub	sp, #24
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f7ff fb3f 	bl	80120c0 <validate>
 8012a42:	4603      	mov	r3, r0
 8012a44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012a46:	7dfb      	ldrb	r3, [r7, #23]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	f040 80af 	bne.w	8012bac <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012a54:	f003 0320 	and.w	r3, r3, #32
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 80a7 	beq.w	8012bac <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d020      	beq.n	8012aae <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a72:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012a76:	6879      	ldr	r1, [r7, #4]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012a7e:	2301      	movs	r3, #1
 8012a80:	f7fd fcf2 	bl	8010468 <disk_write>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d008      	beq.n	8012a9c <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012a90:	2101      	movs	r1, #1
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fd fdad 	bl	80105f2 <unlock_fs>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e090      	b.n	8012bbe <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012aba:	4619      	mov	r1, r3
 8012abc:	4610      	mov	r0, r2
 8012abe:	f7fd ffb4 	bl	8010a2a <move_window>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8012ac6:	7dfb      	ldrb	r3, [r7, #23]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d16f      	bne.n	8012bac <f_sync+0x178>
				dir = fp->dir_ptr;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012ad2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	330b      	adds	r3, #11
 8012ad8:	781a      	ldrb	r2, [r3, #0]
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	330b      	adds	r3, #11
 8012ade:	f042 0220 	orr.w	r2, r2, #32
 8012ae2:	b2d2      	uxtb	r2, r2
 8012ae4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	331c      	adds	r3, #28
 8012af0:	b2d2      	uxtb	r2, r2
 8012af2:	701a      	strb	r2, [r3, #0]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	0a1b      	lsrs	r3, r3, #8
 8012afe:	b29a      	uxth	r2, r3
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	331d      	adds	r3, #29
 8012b04:	b2d2      	uxtb	r2, r2
 8012b06:	701a      	strb	r2, [r3, #0]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012b0e:	0c1a      	lsrs	r2, r3, #16
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	331e      	adds	r3, #30
 8012b14:	b2d2      	uxtb	r2, r2
 8012b16:	701a      	strb	r2, [r3, #0]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012b1e:	0e1a      	lsrs	r2, r3, #24
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	331f      	adds	r3, #31
 8012b24:	b2d2      	uxtb	r2, r2
 8012b26:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012b2e:	4619      	mov	r1, r3
 8012b30:	6938      	ldr	r0, [r7, #16]
 8012b32:	f7fe fd6b 	bl	801160c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8012b36:	f7fc f8d5 	bl	800ece4 <get_fattime>
 8012b3a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	3316      	adds	r3, #22
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	b2d2      	uxtb	r2, r2
 8012b44:	701a      	strb	r2, [r3, #0]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	0a1b      	lsrs	r3, r3, #8
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	3317      	adds	r3, #23
 8012b52:	b2d2      	uxtb	r2, r2
 8012b54:	701a      	strb	r2, [r3, #0]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	0c1a      	lsrs	r2, r3, #16
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	3318      	adds	r3, #24
 8012b5e:	b2d2      	uxtb	r2, r2
 8012b60:	701a      	strb	r2, [r3, #0]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	0e1a      	lsrs	r2, r3, #24
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	3319      	adds	r3, #25
 8012b6a:	b2d2      	uxtb	r2, r2
 8012b6c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	3312      	adds	r3, #18
 8012b72:	2200      	movs	r2, #0
 8012b74:	701a      	strb	r2, [r3, #0]
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	3313      	adds	r3, #19
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012b84:	f023 0320 	bic.w	r3, r3, #32
 8012b88:	b2da      	uxtb	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012b96:	2201      	movs	r2, #1
 8012b98:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fd ff6f 	bl	8010a86 <sync_fs>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012bb2:	7dfa      	ldrb	r2, [r7, #23]
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fd fd1b 	bl	80105f2 <unlock_fs>
 8012bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	3718      	adds	r7, #24
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}

08012bc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8012bc6:	b580      	push	{r7, lr}
 8012bc8:	b084      	sub	sp, #16
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7ff ff30 	bl	8012a34 <f_sync>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012bd8:	7bfb      	ldrb	r3, [r7, #15]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d11e      	bne.n	8012c1c <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7ff fa6e 	bl	80120c0 <validate>
 8012be4:	4603      	mov	r3, r0
 8012be6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012be8:	7bfb      	ldrb	r3, [r7, #15]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d116      	bne.n	8012c1c <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012bf4:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fd fe5d 	bl	80108bc <dec_lock>
 8012c02:	4603      	mov	r3, r0
 8012c04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012c06:	7bfb      	ldrb	r3, [r7, #15]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d103      	bne.n	8012c14 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012c14:	2100      	movs	r1, #0
 8012c16:	68b8      	ldr	r0, [r7, #8]
 8012c18:	f7fd fceb 	bl	80105f2 <unlock_fs>
#endif
		}
	}
	return res;
 8012c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
	...

08012c28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	4613      	mov	r3, r2
 8012c34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012c36:	2301      	movs	r3, #1
 8012c38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8012c3e:	4b1e      	ldr	r3, [pc, #120]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c40:	7a5b      	ldrb	r3, [r3, #9]
 8012c42:	b2db      	uxtb	r3, r3
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d831      	bhi.n	8012cac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012c48:	4b1b      	ldr	r3, [pc, #108]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c4a:	7a5b      	ldrb	r3, [r3, #9]
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	461a      	mov	r2, r3
 8012c50:	4b19      	ldr	r3, [pc, #100]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c52:	2100      	movs	r1, #0
 8012c54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012c56:	4b18      	ldr	r3, [pc, #96]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c58:	7a5b      	ldrb	r3, [r3, #9]
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	4a16      	ldr	r2, [pc, #88]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	4413      	add	r3, r2
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012c66:	4b14      	ldr	r3, [pc, #80]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c68:	7a5b      	ldrb	r3, [r3, #9]
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	4b12      	ldr	r3, [pc, #72]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c70:	4413      	add	r3, r2
 8012c72:	79fa      	ldrb	r2, [r7, #7]
 8012c74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c76:	4b10      	ldr	r3, [pc, #64]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c78:	7a5b      	ldrb	r3, [r3, #9]
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	1c5a      	adds	r2, r3, #1
 8012c7e:	b2d1      	uxtb	r1, r2
 8012c80:	4a0d      	ldr	r2, [pc, #52]	; (8012cb8 <FATFS_LinkDriverEx+0x90>)
 8012c82:	7251      	strb	r1, [r2, #9]
 8012c84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c86:	7dbb      	ldrb	r3, [r7, #22]
 8012c88:	3330      	adds	r3, #48	; 0x30
 8012c8a:	b2da      	uxtb	r2, r3
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	3301      	adds	r3, #1
 8012c94:	223a      	movs	r2, #58	; 0x3a
 8012c96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	3302      	adds	r3, #2
 8012c9c:	222f      	movs	r2, #47	; 0x2f
 8012c9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	3303      	adds	r3, #3
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8012cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	371c      	adds	r7, #28
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bc80      	pop	{r7}
 8012cb6:	4770      	bx	lr
 8012cb8:	20000f40 	.word	0x20000f40

08012cbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	6839      	ldr	r1, [r7, #0]
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7ff ffac 	bl	8012c28 <FATFS_LinkDriverEx>
 8012cd0:	4603      	mov	r3, r0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3708      	adds	r7, #8
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
	...

08012cdc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012ce6:	4b0b      	ldr	r3, [pc, #44]	; (8012d14 <SD_initialize+0x38>)
 8012ce8:	2201      	movs	r2, #1
 8012cea:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8012cec:	f7fc f802 	bl	800ecf4 <BSP_SD_Init>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d107      	bne.n	8012d06 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012cf6:	4b07      	ldr	r3, [pc, #28]	; (8012d14 <SD_initialize+0x38>)
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	f023 0301 	bic.w	r3, r3, #1
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	4b04      	ldr	r3, [pc, #16]	; (8012d14 <SD_initialize+0x38>)
 8012d04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012d06:	4b03      	ldr	r3, [pc, #12]	; (8012d14 <SD_initialize+0x38>)
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	b2db      	uxtb	r3, r3
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3708      	adds	r7, #8
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	20000060 	.word	0x20000060

08012d18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	4603      	mov	r3, r0
 8012d20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012d22:	4b0b      	ldr	r3, [pc, #44]	; (8012d50 <SD_status+0x38>)
 8012d24:	2201      	movs	r2, #1
 8012d26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012d28:	f7fc f846 	bl	800edb8 <BSP_SD_GetCardState>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d107      	bne.n	8012d42 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012d32:	4b07      	ldr	r3, [pc, #28]	; (8012d50 <SD_status+0x38>)
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	f023 0301 	bic.w	r3, r3, #1
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	4b04      	ldr	r3, [pc, #16]	; (8012d50 <SD_status+0x38>)
 8012d40:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8012d42:	4b03      	ldr	r3, [pc, #12]	; (8012d50 <SD_status+0x38>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	b2db      	uxtb	r3, r3
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3708      	adds	r7, #8
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	20000060 	.word	0x20000060

08012d54 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60b9      	str	r1, [r7, #8]
 8012d5c:	607a      	str	r2, [r7, #4]
 8012d5e:	603b      	str	r3, [r7, #0]
 8012d60:	4603      	mov	r3, r0
 8012d62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012d64:	2301      	movs	r3, #1
 8012d66:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012d68:	4b0f      	ldr	r3, [pc, #60]	; (8012da8 <SD_read+0x54>)
 8012d6a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8012d6c:	4b0f      	ldr	r3, [pc, #60]	; (8012dac <SD_read+0x58>)
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	6879      	ldr	r1, [r7, #4]
 8012d72:	68b8      	ldr	r0, [r7, #8]
 8012d74:	f7fb ffe4 	bl	800ed40 <BSP_SD_ReadBlocks>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d10e      	bne.n	8012d9c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012d7e:	e006      	b.n	8012d8e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	1e5a      	subs	r2, r3, #1
 8012d84:	613a      	str	r2, [r7, #16]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d101      	bne.n	8012d8e <SD_read+0x3a>
      {
        return RES_ERROR;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	e007      	b.n	8012d9e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012d8e:	f7fc f813 	bl	800edb8 <BSP_SD_GetCardState>
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d1f3      	bne.n	8012d80 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3718      	adds	r7, #24
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	000186a0 	.word	0x000186a0
 8012dac:	05f5e100 	.word	0x05f5e100

08012db0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60b9      	str	r1, [r7, #8]
 8012db8:	607a      	str	r2, [r7, #4]
 8012dba:	603b      	str	r3, [r7, #0]
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012dc4:	4b0f      	ldr	r3, [pc, #60]	; (8012e04 <SD_write+0x54>)
 8012dc6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8012dc8:	4b0f      	ldr	r3, [pc, #60]	; (8012e08 <SD_write+0x58>)
 8012dca:	683a      	ldr	r2, [r7, #0]
 8012dcc:	6879      	ldr	r1, [r7, #4]
 8012dce:	68b8      	ldr	r0, [r7, #8]
 8012dd0:	f7fb ffd4 	bl	800ed7c <BSP_SD_WriteBlocks>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d10e      	bne.n	8012df8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012dda:	e006      	b.n	8012dea <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	1e5a      	subs	r2, r3, #1
 8012de0:	613a      	str	r2, [r7, #16]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d101      	bne.n	8012dea <SD_write+0x3a>
      {
        return RES_ERROR;
 8012de6:	2301      	movs	r3, #1
 8012de8:	e007      	b.n	8012dfa <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012dea:	f7fb ffe5 	bl	800edb8 <BSP_SD_GetCardState>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d1f3      	bne.n	8012ddc <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3718      	adds	r7, #24
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	000186a0 	.word	0x000186a0
 8012e08:	05f5e100 	.word	0x05f5e100

08012e0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b08c      	sub	sp, #48	; 0x30
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	4603      	mov	r3, r0
 8012e14:	603a      	str	r2, [r7, #0]
 8012e16:	71fb      	strb	r3, [r7, #7]
 8012e18:	460b      	mov	r3, r1
 8012e1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012e22:	4b24      	ldr	r3, [pc, #144]	; (8012eb4 <SD_ioctl+0xa8>)
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	f003 0301 	and.w	r3, r3, #1
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d001      	beq.n	8012e34 <SD_ioctl+0x28>
 8012e30:	2303      	movs	r3, #3
 8012e32:	e03b      	b.n	8012eac <SD_ioctl+0xa0>
  
  switch (cmd)
 8012e34:	79bb      	ldrb	r3, [r7, #6]
 8012e36:	2b03      	cmp	r3, #3
 8012e38:	d833      	bhi.n	8012ea2 <SD_ioctl+0x96>
 8012e3a:	a201      	add	r2, pc, #4	; (adr r2, 8012e40 <SD_ioctl+0x34>)
 8012e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e40:	08012e51 	.word	0x08012e51
 8012e44:	08012e59 	.word	0x08012e59
 8012e48:	08012e71 	.word	0x08012e71
 8012e4c:	08012e8b 	.word	0x08012e8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012e50:	2300      	movs	r3, #0
 8012e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e56:	e027      	b.n	8012ea8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e58:	f107 030c 	add.w	r3, r7, #12
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7fb ffbb 	bl	800edd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e6e:	e01b      	b.n	8012ea8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e70:	f107 030c 	add.w	r3, r7, #12
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fb ffaf 	bl	800edd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012e82:	2300      	movs	r3, #0
 8012e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e88:	e00e      	b.n	8012ea8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e8a:	f107 030c 	add.w	r3, r7, #12
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7fb ffa2 	bl	800edd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012ea0:	e002      	b.n	8012ea8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8012ea2:	2304      	movs	r3, #4
 8012ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8012ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3730      	adds	r7, #48	; 0x30
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	20000060 	.word	0x20000060

08012eb8 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f000 f8a5 	bl	8013018 <osSemaphoreWait>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d101      	bne.n	8012ed8 <ff_req_grant+0x20>
  {
    ret = 1;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3710      	adds	r7, #16
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012ee2:	b580      	push	{r7, lr}
 8012ee4:	b082      	sub	sp, #8
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f000 f8e2 	bl	80130b4 <osSemaphoreRelease>
}
 8012ef0:	bf00      	nop
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b085      	sub	sp, #20
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	4603      	mov	r3, r0
 8012f00:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012f02:	2300      	movs	r3, #0
 8012f04:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f0a:	2b84      	cmp	r3, #132	; 0x84
 8012f0c:	d005      	beq.n	8012f1a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012f0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	4413      	add	r3, r2
 8012f16:	3303      	adds	r3, #3
 8012f18:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3714      	adds	r7, #20
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bc80      	pop	{r7}
 8012f24:	4770      	bx	lr

08012f26 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012f26:	b480      	push	{r7}
 8012f28:	b083      	sub	sp, #12
 8012f2a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f2c:	f3ef 8305 	mrs	r3, IPSR
 8012f30:	607b      	str	r3, [r7, #4]
  return(result);
 8012f32:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	bf14      	ite	ne
 8012f38:	2301      	movne	r3, #1
 8012f3a:	2300      	moveq	r3, #0
 8012f3c:	b2db      	uxtb	r3, r3
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bc80      	pop	{r7}
 8012f46:	4770      	bx	lr

08012f48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012f4c:	f000 ffac 	bl	8013ea8 <vTaskStartScheduler>
  
  return osOK;
 8012f50:	2300      	movs	r3, #0
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	bd80      	pop	{r7, pc}

08012f56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f58:	b089      	sub	sp, #36	; 0x24
 8012f5a:	af04      	add	r7, sp, #16
 8012f5c:	6078      	str	r0, [r7, #4]
 8012f5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	695b      	ldr	r3, [r3, #20]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d020      	beq.n	8012faa <osThreadCreate+0x54>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	699b      	ldr	r3, [r3, #24]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d01c      	beq.n	8012faa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685c      	ldr	r4, [r3, #4]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681d      	ldr	r5, [r3, #0]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	691e      	ldr	r6, [r3, #16]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff ffb8 	bl	8012ef8 <makeFreeRtosPriority>
 8012f88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	695b      	ldr	r3, [r3, #20]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012f92:	9202      	str	r2, [sp, #8]
 8012f94:	9301      	str	r3, [sp, #4]
 8012f96:	9100      	str	r1, [sp, #0]
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	4629      	mov	r1, r5
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f000 fdad 	bl	8013afe <xTaskCreateStatic>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	e01c      	b.n	8012fe4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685c      	ldr	r4, [r3, #4]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012fb6:	b29e      	uxth	r6, r3
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7ff ff9a 	bl	8012ef8 <makeFreeRtosPriority>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	f107 030c 	add.w	r3, r7, #12
 8012fca:	9301      	str	r3, [sp, #4]
 8012fcc:	9200      	str	r2, [sp, #0]
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	4632      	mov	r2, r6
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f000 fdee 	bl	8013bb6 <xTaskCreate>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d001      	beq.n	8012fe4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	e000      	b.n	8012fe6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3714      	adds	r7, #20
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b084      	sub	sp, #16
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <osDelay+0x16>
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	e000      	b.n	8013006 <osDelay+0x18>
 8013004:	2301      	movs	r3, #1
 8013006:	4618      	mov	r0, r3
 8013008:	f000 ff1a 	bl	8013e40 <vTaskDelay>
  
  return osOK;
 801300c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801300e:	4618      	mov	r0, r3
 8013010:	3710      	adds	r7, #16
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
	...

08013018 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013022:	2300      	movs	r3, #0
 8013024:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d101      	bne.n	8013030 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801302c:	2380      	movs	r3, #128	; 0x80
 801302e:	e03a      	b.n	80130a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013030:	2300      	movs	r3, #0
 8013032:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801303a:	d103      	bne.n	8013044 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801303c:	f04f 33ff 	mov.w	r3, #4294967295
 8013040:	60fb      	str	r3, [r7, #12]
 8013042:	e009      	b.n	8013058 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d101      	bne.n	8013058 <osSemaphoreWait+0x40>
      ticks = 1;
 8013054:	2301      	movs	r3, #1
 8013056:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013058:	f7ff ff65 	bl	8012f26 <inHandlerMode>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d017      	beq.n	8013092 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013062:	f107 0308 	add.w	r3, r7, #8
 8013066:	461a      	mov	r2, r3
 8013068:	2100      	movs	r1, #0
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f000 fba0 	bl	80137b0 <xQueueReceiveFromISR>
 8013070:	4603      	mov	r3, r0
 8013072:	2b01      	cmp	r3, #1
 8013074:	d001      	beq.n	801307a <osSemaphoreWait+0x62>
      return osErrorOS;
 8013076:	23ff      	movs	r3, #255	; 0xff
 8013078:	e015      	b.n	80130a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d011      	beq.n	80130a4 <osSemaphoreWait+0x8c>
 8013080:	4b0b      	ldr	r3, [pc, #44]	; (80130b0 <osSemaphoreWait+0x98>)
 8013082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013086:	601a      	str	r2, [r3, #0]
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	f3bf 8f6f 	isb	sy
 8013090:	e008      	b.n	80130a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8013092:	68f9      	ldr	r1, [r7, #12]
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f000 fa7f 	bl	8013598 <xQueueSemaphoreTake>
 801309a:	4603      	mov	r3, r0
 801309c:	2b01      	cmp	r3, #1
 801309e:	d001      	beq.n	80130a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80130a0:	23ff      	movs	r3, #255	; 0xff
 80130a2:	e000      	b.n	80130a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80130a4:	2300      	movs	r3, #0
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	e000ed04 	.word	0xe000ed04

080130b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80130bc:	2300      	movs	r3, #0
 80130be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80130c0:	2300      	movs	r3, #0
 80130c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80130c4:	f7ff ff2f 	bl	8012f26 <inHandlerMode>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d016      	beq.n	80130fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80130ce:	f107 0308 	add.w	r3, r7, #8
 80130d2:	4619      	mov	r1, r3
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 f9d1 	bl	801347c <xQueueGiveFromISR>
 80130da:	4603      	mov	r3, r0
 80130dc:	2b01      	cmp	r3, #1
 80130de:	d001      	beq.n	80130e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80130e0:	23ff      	movs	r3, #255	; 0xff
 80130e2:	e017      	b.n	8013114 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d013      	beq.n	8013112 <osSemaphoreRelease+0x5e>
 80130ea:	4b0c      	ldr	r3, [pc, #48]	; (801311c <osSemaphoreRelease+0x68>)
 80130ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130f0:	601a      	str	r2, [r3, #0]
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	e00a      	b.n	8013112 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80130fc:	2300      	movs	r3, #0
 80130fe:	2200      	movs	r2, #0
 8013100:	2100      	movs	r1, #0
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 f8bc 	bl	8013280 <xQueueGenericSend>
 8013108:	4603      	mov	r3, r0
 801310a:	2b01      	cmp	r3, #1
 801310c:	d001      	beq.n	8013112 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801310e:	23ff      	movs	r3, #255	; 0xff
 8013110:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013112:	68fb      	ldr	r3, [r7, #12]
}
 8013114:	4618      	mov	r0, r3
 8013116:	3710      	adds	r7, #16
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	e000ed04 	.word	0xe000ed04

08013120 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f103 0208 	add.w	r2, r3, #8
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f04f 32ff 	mov.w	r2, #4294967295
 8013138:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f103 0208 	add.w	r2, r3, #8
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f103 0208 	add.w	r2, r3, #8
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013154:	bf00      	nop
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	bc80      	pop	{r7}
 801315c:	4770      	bx	lr

0801315e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801315e:	b480      	push	{r7}
 8013160:	b083      	sub	sp, #12
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2200      	movs	r2, #0
 801316a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801316c:	bf00      	nop
 801316e:	370c      	adds	r7, #12
 8013170:	46bd      	mov	sp, r7
 8013172:	bc80      	pop	{r7}
 8013174:	4770      	bx	lr

08013176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013176:	b480      	push	{r7}
 8013178:	b085      	sub	sp, #20
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
 801317e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	689a      	ldr	r2, [r3, #8]
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	683a      	ldr	r2, [r7, #0]
 801319a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	683a      	ldr	r2, [r7, #0]
 80131a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	1c5a      	adds	r2, r3, #1
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	601a      	str	r2, [r3, #0]
}
 80131b2:	bf00      	nop
 80131b4:	3714      	adds	r7, #20
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bc80      	pop	{r7}
 80131ba:	4770      	bx	lr

080131bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131d2:	d103      	bne.n	80131dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	691b      	ldr	r3, [r3, #16]
 80131d8:	60fb      	str	r3, [r7, #12]
 80131da:	e00c      	b.n	80131f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	3308      	adds	r3, #8
 80131e0:	60fb      	str	r3, [r7, #12]
 80131e2:	e002      	b.n	80131ea <vListInsert+0x2e>
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	68ba      	ldr	r2, [r7, #8]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d2f6      	bcs.n	80131e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	685a      	ldr	r2, [r3, #4]
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	683a      	ldr	r2, [r7, #0]
 8013204:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	1c5a      	adds	r2, r3, #1
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	601a      	str	r2, [r3, #0]
}
 8013222:	bf00      	nop
 8013224:	3714      	adds	r7, #20
 8013226:	46bd      	mov	sp, r7
 8013228:	bc80      	pop	{r7}
 801322a:	4770      	bx	lr

0801322c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801322c:	b480      	push	{r7}
 801322e:	b085      	sub	sp, #20
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	691b      	ldr	r3, [r3, #16]
 8013238:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	6892      	ldr	r2, [r2, #8]
 8013242:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	6852      	ldr	r2, [r2, #4]
 801324c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	687a      	ldr	r2, [r7, #4]
 8013254:	429a      	cmp	r2, r3
 8013256:	d103      	bne.n	8013260 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	689a      	ldr	r2, [r3, #8]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2200      	movs	r2, #0
 8013264:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	1e5a      	subs	r2, r3, #1
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	681b      	ldr	r3, [r3, #0]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3714      	adds	r7, #20
 8013278:	46bd      	mov	sp, r7
 801327a:	bc80      	pop	{r7}
 801327c:	4770      	bx	lr
	...

08013280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b08e      	sub	sp, #56	; 0x38
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
 801328c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801328e:	2300      	movs	r3, #0
 8013290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013298:	2b00      	cmp	r3, #0
 801329a:	d10a      	bne.n	80132b2 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a0:	f383 8811 	msr	BASEPRI, r3
 80132a4:	f3bf 8f6f 	isb	sy
 80132a8:	f3bf 8f4f 	dsb	sy
 80132ac:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80132ae:	bf00      	nop
 80132b0:	e7fe      	b.n	80132b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d103      	bne.n	80132c0 <xQueueGenericSend+0x40>
 80132b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d101      	bne.n	80132c4 <xQueueGenericSend+0x44>
 80132c0:	2301      	movs	r3, #1
 80132c2:	e000      	b.n	80132c6 <xQueueGenericSend+0x46>
 80132c4:	2300      	movs	r3, #0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d10a      	bne.n	80132e0 <xQueueGenericSend+0x60>
	__asm volatile
 80132ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ce:	f383 8811 	msr	BASEPRI, r3
 80132d2:	f3bf 8f6f 	isb	sy
 80132d6:	f3bf 8f4f 	dsb	sy
 80132da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80132dc:	bf00      	nop
 80132de:	e7fe      	b.n	80132de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	d103      	bne.n	80132ee <xQueueGenericSend+0x6e>
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d101      	bne.n	80132f2 <xQueueGenericSend+0x72>
 80132ee:	2301      	movs	r3, #1
 80132f0:	e000      	b.n	80132f4 <xQueueGenericSend+0x74>
 80132f2:	2300      	movs	r3, #0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d10a      	bne.n	801330e <xQueueGenericSend+0x8e>
	__asm volatile
 80132f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fc:	f383 8811 	msr	BASEPRI, r3
 8013300:	f3bf 8f6f 	isb	sy
 8013304:	f3bf 8f4f 	dsb	sy
 8013308:	623b      	str	r3, [r7, #32]
}
 801330a:	bf00      	nop
 801330c:	e7fe      	b.n	801330c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801330e:	f001 f9e7 	bl	80146e0 <xTaskGetSchedulerState>
 8013312:	4603      	mov	r3, r0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d102      	bne.n	801331e <xQueueGenericSend+0x9e>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <xQueueGenericSend+0xa2>
 801331e:	2301      	movs	r3, #1
 8013320:	e000      	b.n	8013324 <xQueueGenericSend+0xa4>
 8013322:	2300      	movs	r3, #0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d10a      	bne.n	801333e <xQueueGenericSend+0xbe>
	__asm volatile
 8013328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332c:	f383 8811 	msr	BASEPRI, r3
 8013330:	f3bf 8f6f 	isb	sy
 8013334:	f3bf 8f4f 	dsb	sy
 8013338:	61fb      	str	r3, [r7, #28]
}
 801333a:	bf00      	nop
 801333c:	e7fe      	b.n	801333c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801333e:	f001 fd05 	bl	8014d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801334a:	429a      	cmp	r2, r3
 801334c:	d302      	bcc.n	8013354 <xQueueGenericSend+0xd4>
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	2b02      	cmp	r3, #2
 8013352:	d129      	bne.n	80133a8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013354:	683a      	ldr	r2, [r7, #0]
 8013356:	68b9      	ldr	r1, [r7, #8]
 8013358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801335a:	f000 fac0 	bl	80138de <prvCopyDataToQueue>
 801335e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013364:	2b00      	cmp	r3, #0
 8013366:	d010      	beq.n	801338a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336a:	3324      	adds	r3, #36	; 0x24
 801336c:	4618      	mov	r0, r3
 801336e:	f000 fff3 	bl	8014358 <xTaskRemoveFromEventList>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d013      	beq.n	80133a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013378:	4b3f      	ldr	r3, [pc, #252]	; (8013478 <xQueueGenericSend+0x1f8>)
 801337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801337e:	601a      	str	r2, [r3, #0]
 8013380:	f3bf 8f4f 	dsb	sy
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	e00a      	b.n	80133a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338c:	2b00      	cmp	r3, #0
 801338e:	d007      	beq.n	80133a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013390:	4b39      	ldr	r3, [pc, #228]	; (8013478 <xQueueGenericSend+0x1f8>)
 8013392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013396:	601a      	str	r2, [r3, #0]
 8013398:	f3bf 8f4f 	dsb	sy
 801339c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80133a0:	f001 fd04 	bl	8014dac <vPortExitCritical>
				return pdPASS;
 80133a4:	2301      	movs	r3, #1
 80133a6:	e063      	b.n	8013470 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d103      	bne.n	80133b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133ae:	f001 fcfd 	bl	8014dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80133b2:	2300      	movs	r3, #0
 80133b4:	e05c      	b.n	8013470 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d106      	bne.n	80133ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133bc:	f107 0314 	add.w	r3, r7, #20
 80133c0:	4618      	mov	r0, r3
 80133c2:	f001 f82b 	bl	801441c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80133c6:	2301      	movs	r3, #1
 80133c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80133ca:	f001 fcef 	bl	8014dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133ce:	f000 fdd5 	bl	8013f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133d2:	f001 fcbb 	bl	8014d4c <vPortEnterCritical>
 80133d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133dc:	b25b      	sxtb	r3, r3
 80133de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e2:	d103      	bne.n	80133ec <xQueueGenericSend+0x16c>
 80133e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e6:	2200      	movs	r2, #0
 80133e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133f2:	b25b      	sxtb	r3, r3
 80133f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f8:	d103      	bne.n	8013402 <xQueueGenericSend+0x182>
 80133fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fc:	2200      	movs	r2, #0
 80133fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013402:	f001 fcd3 	bl	8014dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013406:	1d3a      	adds	r2, r7, #4
 8013408:	f107 0314 	add.w	r3, r7, #20
 801340c:	4611      	mov	r1, r2
 801340e:	4618      	mov	r0, r3
 8013410:	f001 f81a 	bl	8014448 <xTaskCheckForTimeOut>
 8013414:	4603      	mov	r3, r0
 8013416:	2b00      	cmp	r3, #0
 8013418:	d124      	bne.n	8013464 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801341a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801341c:	f000 fb57 	bl	8013ace <prvIsQueueFull>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d018      	beq.n	8013458 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013428:	3310      	adds	r3, #16
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	4611      	mov	r1, r2
 801342e:	4618      	mov	r0, r3
 8013430:	f000 ff6e 	bl	8014310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013436:	f000 fae2 	bl	80139fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801343a:	f000 fdad 	bl	8013f98 <xTaskResumeAll>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	f47f af7c 	bne.w	801333e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013446:	4b0c      	ldr	r3, [pc, #48]	; (8013478 <xQueueGenericSend+0x1f8>)
 8013448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801344c:	601a      	str	r2, [r3, #0]
 801344e:	f3bf 8f4f 	dsb	sy
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	e772      	b.n	801333e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801345a:	f000 fad0 	bl	80139fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801345e:	f000 fd9b 	bl	8013f98 <xTaskResumeAll>
 8013462:	e76c      	b.n	801333e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013466:	f000 faca 	bl	80139fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801346a:	f000 fd95 	bl	8013f98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801346e:	2300      	movs	r3, #0
		}
	}
}
 8013470:	4618      	mov	r0, r3
 8013472:	3738      	adds	r7, #56	; 0x38
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	e000ed04 	.word	0xe000ed04

0801347c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b08e      	sub	sp, #56	; 0x38
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348c:	2b00      	cmp	r3, #0
 801348e:	d10a      	bne.n	80134a6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013494:	f383 8811 	msr	BASEPRI, r3
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	f3bf 8f4f 	dsb	sy
 80134a0:	623b      	str	r3, [r7, #32]
}
 80134a2:	bf00      	nop
 80134a4:	e7fe      	b.n	80134a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80134a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d00a      	beq.n	80134c4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80134ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b2:	f383 8811 	msr	BASEPRI, r3
 80134b6:	f3bf 8f6f 	isb	sy
 80134ba:	f3bf 8f4f 	dsb	sy
 80134be:	61fb      	str	r3, [r7, #28]
}
 80134c0:	bf00      	nop
 80134c2:	e7fe      	b.n	80134c2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80134c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d103      	bne.n	80134d4 <xQueueGiveFromISR+0x58>
 80134cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <xQueueGiveFromISR+0x5c>
 80134d4:	2301      	movs	r3, #1
 80134d6:	e000      	b.n	80134da <xQueueGiveFromISR+0x5e>
 80134d8:	2300      	movs	r3, #0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d10a      	bne.n	80134f4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80134de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	61bb      	str	r3, [r7, #24]
}
 80134f0:	bf00      	nop
 80134f2:	e7fe      	b.n	80134f2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134f4:	f001 fcec 	bl	8014ed0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80134f8:	f3ef 8211 	mrs	r2, BASEPRI
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	617a      	str	r2, [r7, #20]
 801350e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013510:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013512:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013518:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801351e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013520:	429a      	cmp	r2, r3
 8013522:	d22b      	bcs.n	801357c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013530:	1c5a      	adds	r2, r3, #1
 8013532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013534:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013536:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801353e:	d112      	bne.n	8013566 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013544:	2b00      	cmp	r3, #0
 8013546:	d016      	beq.n	8013576 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354a:	3324      	adds	r3, #36	; 0x24
 801354c:	4618      	mov	r0, r3
 801354e:	f000 ff03 	bl	8014358 <xTaskRemoveFromEventList>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d00e      	beq.n	8013576 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d00b      	beq.n	8013576 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	2201      	movs	r2, #1
 8013562:	601a      	str	r2, [r3, #0]
 8013564:	e007      	b.n	8013576 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801356a:	3301      	adds	r3, #1
 801356c:	b2db      	uxtb	r3, r3
 801356e:	b25a      	sxtb	r2, r3
 8013570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013576:	2301      	movs	r3, #1
 8013578:	637b      	str	r3, [r7, #52]	; 0x34
 801357a:	e001      	b.n	8013580 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801357c:	2300      	movs	r3, #0
 801357e:	637b      	str	r3, [r7, #52]	; 0x34
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013582:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801358a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801358e:	4618      	mov	r0, r3
 8013590:	3738      	adds	r7, #56	; 0x38
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
	...

08013598 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b08e      	sub	sp, #56	; 0x38
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80135a2:	2300      	movs	r3, #0
 80135a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80135aa:	2300      	movs	r3, #0
 80135ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d10a      	bne.n	80135ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80135b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b8:	f383 8811 	msr	BASEPRI, r3
 80135bc:	f3bf 8f6f 	isb	sy
 80135c0:	f3bf 8f4f 	dsb	sy
 80135c4:	623b      	str	r3, [r7, #32]
}
 80135c6:	bf00      	nop
 80135c8:	e7fe      	b.n	80135c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80135ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d00a      	beq.n	80135e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80135d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d6:	f383 8811 	msr	BASEPRI, r3
 80135da:	f3bf 8f6f 	isb	sy
 80135de:	f3bf 8f4f 	dsb	sy
 80135e2:	61fb      	str	r3, [r7, #28]
}
 80135e4:	bf00      	nop
 80135e6:	e7fe      	b.n	80135e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135e8:	f001 f87a 	bl	80146e0 <xTaskGetSchedulerState>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d102      	bne.n	80135f8 <xQueueSemaphoreTake+0x60>
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d101      	bne.n	80135fc <xQueueSemaphoreTake+0x64>
 80135f8:	2301      	movs	r3, #1
 80135fa:	e000      	b.n	80135fe <xQueueSemaphoreTake+0x66>
 80135fc:	2300      	movs	r3, #0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d10a      	bne.n	8013618 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013606:	f383 8811 	msr	BASEPRI, r3
 801360a:	f3bf 8f6f 	isb	sy
 801360e:	f3bf 8f4f 	dsb	sy
 8013612:	61bb      	str	r3, [r7, #24]
}
 8013614:	bf00      	nop
 8013616:	e7fe      	b.n	8013616 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8013618:	f001 fb98 	bl	8014d4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013620:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013624:	2b00      	cmp	r3, #0
 8013626:	d024      	beq.n	8013672 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	1e5a      	subs	r2, r3, #1
 801362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d104      	bne.n	8013642 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013638:	f001 fa1c 	bl	8014a74 <pvTaskIncrementMutexHeldCount>
 801363c:	4602      	mov	r2, r0
 801363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013640:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d00f      	beq.n	801366a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364c:	3310      	adds	r3, #16
 801364e:	4618      	mov	r0, r3
 8013650:	f000 fe82 	bl	8014358 <xTaskRemoveFromEventList>
 8013654:	4603      	mov	r3, r0
 8013656:	2b00      	cmp	r3, #0
 8013658:	d007      	beq.n	801366a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801365a:	4b54      	ldr	r3, [pc, #336]	; (80137ac <xQueueSemaphoreTake+0x214>)
 801365c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013660:	601a      	str	r2, [r3, #0]
 8013662:	f3bf 8f4f 	dsb	sy
 8013666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801366a:	f001 fb9f 	bl	8014dac <vPortExitCritical>
				return pdPASS;
 801366e:	2301      	movs	r3, #1
 8013670:	e097      	b.n	80137a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d111      	bne.n	801369c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00a      	beq.n	8013694 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013682:	f383 8811 	msr	BASEPRI, r3
 8013686:	f3bf 8f6f 	isb	sy
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	617b      	str	r3, [r7, #20]
}
 8013690:	bf00      	nop
 8013692:	e7fe      	b.n	8013692 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013694:	f001 fb8a 	bl	8014dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013698:	2300      	movs	r3, #0
 801369a:	e082      	b.n	80137a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d106      	bne.n	80136b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136a2:	f107 030c 	add.w	r3, r7, #12
 80136a6:	4618      	mov	r0, r3
 80136a8:	f000 feb8 	bl	801441c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136ac:	2301      	movs	r3, #1
 80136ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136b0:	f001 fb7c 	bl	8014dac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136b4:	f000 fc62 	bl	8013f7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136b8:	f001 fb48 	bl	8014d4c <vPortEnterCritical>
 80136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136c2:	b25b      	sxtb	r3, r3
 80136c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c8:	d103      	bne.n	80136d2 <xQueueSemaphoreTake+0x13a>
 80136ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136cc:	2200      	movs	r2, #0
 80136ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136d8:	b25b      	sxtb	r3, r3
 80136da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136de:	d103      	bne.n	80136e8 <xQueueSemaphoreTake+0x150>
 80136e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e2:	2200      	movs	r2, #0
 80136e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136e8:	f001 fb60 	bl	8014dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136ec:	463a      	mov	r2, r7
 80136ee:	f107 030c 	add.w	r3, r7, #12
 80136f2:	4611      	mov	r1, r2
 80136f4:	4618      	mov	r0, r3
 80136f6:	f000 fea7 	bl	8014448 <xTaskCheckForTimeOut>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d132      	bne.n	8013766 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013702:	f000 f9ce 	bl	8013aa2 <prvIsQueueEmpty>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d026      	beq.n	801375a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d109      	bne.n	8013728 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013714:	f001 fb1a 	bl	8014d4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	4618      	mov	r0, r3
 801371e:	f000 fffd 	bl	801471c <xTaskPriorityInherit>
 8013722:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013724:	f001 fb42 	bl	8014dac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801372a:	3324      	adds	r3, #36	; 0x24
 801372c:	683a      	ldr	r2, [r7, #0]
 801372e:	4611      	mov	r1, r2
 8013730:	4618      	mov	r0, r3
 8013732:	f000 fded 	bl	8014310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013738:	f000 f961 	bl	80139fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801373c:	f000 fc2c 	bl	8013f98 <xTaskResumeAll>
 8013740:	4603      	mov	r3, r0
 8013742:	2b00      	cmp	r3, #0
 8013744:	f47f af68 	bne.w	8013618 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013748:	4b18      	ldr	r3, [pc, #96]	; (80137ac <xQueueSemaphoreTake+0x214>)
 801374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801374e:	601a      	str	r2, [r3, #0]
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	f3bf 8f6f 	isb	sy
 8013758:	e75e      	b.n	8013618 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801375a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801375c:	f000 f94f 	bl	80139fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013760:	f000 fc1a 	bl	8013f98 <xTaskResumeAll>
 8013764:	e758      	b.n	8013618 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013768:	f000 f949 	bl	80139fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801376c:	f000 fc14 	bl	8013f98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013772:	f000 f996 	bl	8013aa2 <prvIsQueueEmpty>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	f43f af4d 	beq.w	8013618 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013780:	2b00      	cmp	r3, #0
 8013782:	d00d      	beq.n	80137a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013784:	f001 fae2 	bl	8014d4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801378a:	f000 f891 	bl	80138b0 <prvGetDisinheritPriorityAfterTimeout>
 801378e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013796:	4618      	mov	r0, r3
 8013798:	f001 f8cc 	bl	8014934 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801379c:	f001 fb06 	bl	8014dac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80137a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3738      	adds	r7, #56	; 0x38
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	e000ed04 	.word	0xe000ed04

080137b0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b08e      	sub	sp, #56	; 0x38
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80137c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d10a      	bne.n	80137dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80137c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ca:	f383 8811 	msr	BASEPRI, r3
 80137ce:	f3bf 8f6f 	isb	sy
 80137d2:	f3bf 8f4f 	dsb	sy
 80137d6:	623b      	str	r3, [r7, #32]
}
 80137d8:	bf00      	nop
 80137da:	e7fe      	b.n	80137da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d103      	bne.n	80137ea <xQueueReceiveFromISR+0x3a>
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d101      	bne.n	80137ee <xQueueReceiveFromISR+0x3e>
 80137ea:	2301      	movs	r3, #1
 80137ec:	e000      	b.n	80137f0 <xQueueReceiveFromISR+0x40>
 80137ee:	2300      	movs	r3, #0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d10a      	bne.n	801380a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80137f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f8:	f383 8811 	msr	BASEPRI, r3
 80137fc:	f3bf 8f6f 	isb	sy
 8013800:	f3bf 8f4f 	dsb	sy
 8013804:	61fb      	str	r3, [r7, #28]
}
 8013806:	bf00      	nop
 8013808:	e7fe      	b.n	8013808 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801380a:	f001 fb61 	bl	8014ed0 <vPortValidateInterruptPriority>
	__asm volatile
 801380e:	f3ef 8211 	mrs	r2, BASEPRI
 8013812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013816:	f383 8811 	msr	BASEPRI, r3
 801381a:	f3bf 8f6f 	isb	sy
 801381e:	f3bf 8f4f 	dsb	sy
 8013822:	61ba      	str	r2, [r7, #24]
 8013824:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013826:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013828:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801382e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	2b00      	cmp	r3, #0
 8013834:	d02f      	beq.n	8013896 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801383c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013840:	68b9      	ldr	r1, [r7, #8]
 8013842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013844:	f000 f8b5 	bl	80139b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384a:	1e5a      	subs	r2, r3, #1
 801384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013850:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013858:	d112      	bne.n	8013880 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d016      	beq.n	8013890 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013864:	3310      	adds	r3, #16
 8013866:	4618      	mov	r0, r3
 8013868:	f000 fd76 	bl	8014358 <xTaskRemoveFromEventList>
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00e      	beq.n	8013890 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d00b      	beq.n	8013890 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2201      	movs	r2, #1
 801387c:	601a      	str	r2, [r3, #0]
 801387e:	e007      	b.n	8013890 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013884:	3301      	adds	r3, #1
 8013886:	b2db      	uxtb	r3, r3
 8013888:	b25a      	sxtb	r2, r3
 801388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013890:	2301      	movs	r3, #1
 8013892:	637b      	str	r3, [r7, #52]	; 0x34
 8013894:	e001      	b.n	801389a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013896:	2300      	movs	r3, #0
 8013898:	637b      	str	r3, [r7, #52]	; 0x34
 801389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	f383 8811 	msr	BASEPRI, r3
}
 80138a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	3738      	adds	r7, #56	; 0x38
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80138b0:	b480      	push	{r7}
 80138b2:	b085      	sub	sp, #20
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d006      	beq.n	80138ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	f1c3 0307 	rsb	r3, r3, #7
 80138ca:	60fb      	str	r3, [r7, #12]
 80138cc:	e001      	b.n	80138d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80138ce:	2300      	movs	r3, #0
 80138d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80138d2:	68fb      	ldr	r3, [r7, #12]
	}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3714      	adds	r7, #20
 80138d8:	46bd      	mov	sp, r7
 80138da:	bc80      	pop	{r7}
 80138dc:	4770      	bx	lr

080138de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80138de:	b580      	push	{r7, lr}
 80138e0:	b086      	sub	sp, #24
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	60f8      	str	r0, [r7, #12]
 80138e6:	60b9      	str	r1, [r7, #8]
 80138e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80138ea:	2300      	movs	r3, #0
 80138ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d10d      	bne.n	8013918 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d14d      	bne.n	80139a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	4618      	mov	r0, r3
 801390a:	f000 ff8d 	bl	8014828 <xTaskPriorityDisinherit>
 801390e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2200      	movs	r2, #0
 8013914:	605a      	str	r2, [r3, #4]
 8013916:	e043      	b.n	80139a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d119      	bne.n	8013952 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6898      	ldr	r0, [r3, #8]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013926:	461a      	mov	r2, r3
 8013928:	68b9      	ldr	r1, [r7, #8]
 801392a:	f002 f9e7 	bl	8015cfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	689a      	ldr	r2, [r3, #8]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013936:	441a      	add	r2, r3
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	689a      	ldr	r2, [r3, #8]
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	429a      	cmp	r2, r3
 8013946:	d32b      	bcc.n	80139a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	609a      	str	r2, [r3, #8]
 8013950:	e026      	b.n	80139a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	68d8      	ldr	r0, [r3, #12]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801395a:	461a      	mov	r2, r3
 801395c:	68b9      	ldr	r1, [r7, #8]
 801395e:	f002 f9cd 	bl	8015cfc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	68da      	ldr	r2, [r3, #12]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801396a:	425b      	negs	r3, r3
 801396c:	441a      	add	r2, r3
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	68da      	ldr	r2, [r3, #12]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	429a      	cmp	r2, r3
 801397c:	d207      	bcs.n	801398e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013986:	425b      	negs	r3, r3
 8013988:	441a      	add	r2, r3
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2b02      	cmp	r3, #2
 8013992:	d105      	bne.n	80139a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d002      	beq.n	80139a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	3b01      	subs	r3, #1
 801399e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	1c5a      	adds	r2, r3, #1
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80139a8:	697b      	ldr	r3, [r7, #20]
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3718      	adds	r7, #24
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}

080139b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80139b2:	b580      	push	{r7, lr}
 80139b4:	b082      	sub	sp, #8
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
 80139ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d018      	beq.n	80139f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	68da      	ldr	r2, [r3, #12]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139cc:	441a      	add	r2, r3
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	68da      	ldr	r2, [r3, #12]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d303      	bcc.n	80139e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	68d9      	ldr	r1, [r3, #12]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ee:	461a      	mov	r2, r3
 80139f0:	6838      	ldr	r0, [r7, #0]
 80139f2:	f002 f983 	bl	8015cfc <memcpy>
	}
}
 80139f6:	bf00      	nop
 80139f8:	3708      	adds	r7, #8
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80139fe:	b580      	push	{r7, lr}
 8013a00:	b084      	sub	sp, #16
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a06:	f001 f9a1 	bl	8014d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a12:	e011      	b.n	8013a38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d012      	beq.n	8013a42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	3324      	adds	r3, #36	; 0x24
 8013a20:	4618      	mov	r0, r3
 8013a22:	f000 fc99 	bl	8014358 <xTaskRemoveFromEventList>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d001      	beq.n	8013a30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013a2c:	f000 fd6e 	bl	801450c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a30:	7bfb      	ldrb	r3, [r7, #15]
 8013a32:	3b01      	subs	r3, #1
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	dce9      	bgt.n	8013a14 <prvUnlockQueue+0x16>
 8013a40:	e000      	b.n	8013a44 <prvUnlockQueue+0x46>
					break;
 8013a42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	22ff      	movs	r2, #255	; 0xff
 8013a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013a4c:	f001 f9ae 	bl	8014dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a50:	f001 f97c 	bl	8014d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a5c:	e011      	b.n	8013a82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	691b      	ldr	r3, [r3, #16]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d012      	beq.n	8013a8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	3310      	adds	r3, #16
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f000 fc74 	bl	8014358 <xTaskRemoveFromEventList>
 8013a70:	4603      	mov	r3, r0
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d001      	beq.n	8013a7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a76:	f000 fd49 	bl	801450c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a7a:	7bbb      	ldrb	r3, [r7, #14]
 8013a7c:	3b01      	subs	r3, #1
 8013a7e:	b2db      	uxtb	r3, r3
 8013a80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	dce9      	bgt.n	8013a5e <prvUnlockQueue+0x60>
 8013a8a:	e000      	b.n	8013a8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	22ff      	movs	r2, #255	; 0xff
 8013a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013a96:	f001 f989 	bl	8014dac <vPortExitCritical>
}
 8013a9a:	bf00      	nop
 8013a9c:	3710      	adds	r7, #16
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}

08013aa2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013aa2:	b580      	push	{r7, lr}
 8013aa4:	b084      	sub	sp, #16
 8013aa6:	af00      	add	r7, sp, #0
 8013aa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013aaa:	f001 f94f 	bl	8014d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d102      	bne.n	8013abc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	60fb      	str	r3, [r7, #12]
 8013aba:	e001      	b.n	8013ac0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013abc:	2300      	movs	r3, #0
 8013abe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ac0:	f001 f974 	bl	8014dac <vPortExitCritical>

	return xReturn;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ace:	b580      	push	{r7, lr}
 8013ad0:	b084      	sub	sp, #16
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ad6:	f001 f939 	bl	8014d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d102      	bne.n	8013aec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	60fb      	str	r3, [r7, #12]
 8013aea:	e001      	b.n	8013af0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013aec:	2300      	movs	r3, #0
 8013aee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013af0:	f001 f95c 	bl	8014dac <vPortExitCritical>

	return xReturn;
 8013af4:	68fb      	ldr	r3, [r7, #12]
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b08e      	sub	sp, #56	; 0x38
 8013b02:	af04      	add	r7, sp, #16
 8013b04:	60f8      	str	r0, [r7, #12]
 8013b06:	60b9      	str	r1, [r7, #8]
 8013b08:	607a      	str	r2, [r7, #4]
 8013b0a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d10a      	bne.n	8013b28 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b16:	f383 8811 	msr	BASEPRI, r3
 8013b1a:	f3bf 8f6f 	isb	sy
 8013b1e:	f3bf 8f4f 	dsb	sy
 8013b22:	623b      	str	r3, [r7, #32]
}
 8013b24:	bf00      	nop
 8013b26:	e7fe      	b.n	8013b26 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d10a      	bne.n	8013b44 <xTaskCreateStatic+0x46>
	__asm volatile
 8013b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b32:	f383 8811 	msr	BASEPRI, r3
 8013b36:	f3bf 8f6f 	isb	sy
 8013b3a:	f3bf 8f4f 	dsb	sy
 8013b3e:	61fb      	str	r3, [r7, #28]
}
 8013b40:	bf00      	nop
 8013b42:	e7fe      	b.n	8013b42 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013b44:	23b4      	movs	r3, #180	; 0xb4
 8013b46:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	2bb4      	cmp	r3, #180	; 0xb4
 8013b4c:	d00a      	beq.n	8013b64 <xTaskCreateStatic+0x66>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	61bb      	str	r3, [r7, #24]
}
 8013b60:	bf00      	nop
 8013b62:	e7fe      	b.n	8013b62 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d01e      	beq.n	8013ba8 <xTaskCreateStatic+0xaa>
 8013b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d01b      	beq.n	8013ba8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7c:	2202      	movs	r2, #2
 8013b7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013b82:	2300      	movs	r3, #0
 8013b84:	9303      	str	r3, [sp, #12]
 8013b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b88:	9302      	str	r3, [sp, #8]
 8013b8a:	f107 0314 	add.w	r3, r7, #20
 8013b8e:	9301      	str	r3, [sp, #4]
 8013b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b92:	9300      	str	r3, [sp, #0]
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	68b9      	ldr	r1, [r7, #8]
 8013b9a:	68f8      	ldr	r0, [r7, #12]
 8013b9c:	f000 f850 	bl	8013c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ba2:	f000 f8e3 	bl	8013d6c <prvAddNewTaskToReadyList>
 8013ba6:	e001      	b.n	8013bac <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013bac:	697b      	ldr	r3, [r7, #20]
	}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3728      	adds	r7, #40	; 0x28
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b08c      	sub	sp, #48	; 0x30
 8013bba:	af04      	add	r7, sp, #16
 8013bbc:	60f8      	str	r0, [r7, #12]
 8013bbe:	60b9      	str	r1, [r7, #8]
 8013bc0:	603b      	str	r3, [r7, #0]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bc6:	88fb      	ldrh	r3, [r7, #6]
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f001 f9be 	bl	8014f4c <pvPortMalloc>
 8013bd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d00e      	beq.n	8013bf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8013bd8:	20b4      	movs	r0, #180	; 0xb4
 8013bda:	f001 f9b7 	bl	8014f4c <pvPortMalloc>
 8013bde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d003      	beq.n	8013bee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	697a      	ldr	r2, [r7, #20]
 8013bea:	631a      	str	r2, [r3, #48]	; 0x30
 8013bec:	e005      	b.n	8013bfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013bee:	6978      	ldr	r0, [r7, #20]
 8013bf0:	f001 fa70 	bl	80150d4 <vPortFree>
 8013bf4:	e001      	b.n	8013bfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d017      	beq.n	8013c30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013c00:	69fb      	ldr	r3, [r7, #28]
 8013c02:	2200      	movs	r2, #0
 8013c04:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013c08:	88fa      	ldrh	r2, [r7, #6]
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	9303      	str	r3, [sp, #12]
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	9302      	str	r3, [sp, #8]
 8013c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c14:	9301      	str	r3, [sp, #4]
 8013c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c18:	9300      	str	r3, [sp, #0]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	68b9      	ldr	r1, [r7, #8]
 8013c1e:	68f8      	ldr	r0, [r7, #12]
 8013c20:	f000 f80e 	bl	8013c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c24:	69f8      	ldr	r0, [r7, #28]
 8013c26:	f000 f8a1 	bl	8013d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	61bb      	str	r3, [r7, #24]
 8013c2e:	e002      	b.n	8013c36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013c30:	f04f 33ff 	mov.w	r3, #4294967295
 8013c34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013c36:	69bb      	ldr	r3, [r7, #24]
	}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3720      	adds	r7, #32
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b088      	sub	sp, #32
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
 8013c4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013c58:	3b01      	subs	r3, #1
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	4413      	add	r3, r2
 8013c5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	f023 0307 	bic.w	r3, r3, #7
 8013c66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013c68:	69bb      	ldr	r3, [r7, #24]
 8013c6a:	f003 0307 	and.w	r3, r3, #7
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d00a      	beq.n	8013c88 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c76:	f383 8811 	msr	BASEPRI, r3
 8013c7a:	f3bf 8f6f 	isb	sy
 8013c7e:	f3bf 8f4f 	dsb	sy
 8013c82:	617b      	str	r3, [r7, #20]
}
 8013c84:	bf00      	nop
 8013c86:	e7fe      	b.n	8013c86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c88:	2300      	movs	r3, #0
 8013c8a:	61fb      	str	r3, [r7, #28]
 8013c8c:	e012      	b.n	8013cb4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c8e:	68ba      	ldr	r2, [r7, #8]
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	4413      	add	r3, r2
 8013c94:	7819      	ldrb	r1, [r3, #0]
 8013c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	3334      	adds	r3, #52	; 0x34
 8013c9e:	460a      	mov	r2, r1
 8013ca0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	69fb      	ldr	r3, [r7, #28]
 8013ca6:	4413      	add	r3, r2
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d006      	beq.n	8013cbc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	61fb      	str	r3, [r7, #28]
 8013cb4:	69fb      	ldr	r3, [r7, #28]
 8013cb6:	2b0f      	cmp	r3, #15
 8013cb8:	d9e9      	bls.n	8013c8e <prvInitialiseNewTask+0x4e>
 8013cba:	e000      	b.n	8013cbe <prvInitialiseNewTask+0x7e>
		{
			break;
 8013cbc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	2b06      	cmp	r3, #6
 8013cca:	d901      	bls.n	8013cd0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013ccc:	2306      	movs	r3, #6
 8013cce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013cda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cde:	2200      	movs	r2, #0
 8013ce0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce4:	3304      	adds	r3, #4
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7ff fa39 	bl	801315e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cee:	3318      	adds	r3, #24
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7ff fa34 	bl	801315e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfe:	f1c3 0207 	rsb	r2, r3, #7
 8013d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d0e:	2200      	movs	r2, #0
 8013d10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	2200      	movs	r2, #0
 8013d18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1e:	334c      	adds	r3, #76	; 0x4c
 8013d20:	2260      	movs	r2, #96	; 0x60
 8013d22:	2100      	movs	r1, #0
 8013d24:	4618      	mov	r0, r3
 8013d26:	f001 fff7 	bl	8015d18 <memset>
 8013d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2c:	4a0c      	ldr	r2, [pc, #48]	; (8013d60 <prvInitialiseNewTask+0x120>)
 8013d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8013d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d32:	4a0c      	ldr	r2, [pc, #48]	; (8013d64 <prvInitialiseNewTask+0x124>)
 8013d34:	655a      	str	r2, [r3, #84]	; 0x54
 8013d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d38:	4a0b      	ldr	r2, [pc, #44]	; (8013d68 <prvInitialiseNewTask+0x128>)
 8013d3a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013d3c:	683a      	ldr	r2, [r7, #0]
 8013d3e:	68f9      	ldr	r1, [r7, #12]
 8013d40:	69b8      	ldr	r0, [r7, #24]
 8013d42:	f000 ff11 	bl	8014b68 <pxPortInitialiseStack>
 8013d46:	4602      	mov	r2, r0
 8013d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d002      	beq.n	8013d58 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d58:	bf00      	nop
 8013d5a:	3720      	adds	r7, #32
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	08031ee0 	.word	0x08031ee0
 8013d64:	08031f00 	.word	0x08031f00
 8013d68:	08031ec0 	.word	0x08031ec0

08013d6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013d74:	f000 ffea 	bl	8014d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013d78:	4b2a      	ldr	r3, [pc, #168]	; (8013e24 <prvAddNewTaskToReadyList+0xb8>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	4a29      	ldr	r2, [pc, #164]	; (8013e24 <prvAddNewTaskToReadyList+0xb8>)
 8013d80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013d82:	4b29      	ldr	r3, [pc, #164]	; (8013e28 <prvAddNewTaskToReadyList+0xbc>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d109      	bne.n	8013d9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013d8a:	4a27      	ldr	r2, [pc, #156]	; (8013e28 <prvAddNewTaskToReadyList+0xbc>)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013d90:	4b24      	ldr	r3, [pc, #144]	; (8013e24 <prvAddNewTaskToReadyList+0xb8>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d110      	bne.n	8013dba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013d98:	f000 fbdc 	bl	8014554 <prvInitialiseTaskLists>
 8013d9c:	e00d      	b.n	8013dba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013d9e:	4b23      	ldr	r3, [pc, #140]	; (8013e2c <prvAddNewTaskToReadyList+0xc0>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d109      	bne.n	8013dba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013da6:	4b20      	ldr	r3, [pc, #128]	; (8013e28 <prvAddNewTaskToReadyList+0xbc>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d802      	bhi.n	8013dba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013db4:	4a1c      	ldr	r2, [pc, #112]	; (8013e28 <prvAddNewTaskToReadyList+0xbc>)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013dba:	4b1d      	ldr	r3, [pc, #116]	; (8013e30 <prvAddNewTaskToReadyList+0xc4>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	4a1b      	ldr	r2, [pc, #108]	; (8013e30 <prvAddNewTaskToReadyList+0xc4>)
 8013dc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc8:	2201      	movs	r2, #1
 8013dca:	409a      	lsls	r2, r3
 8013dcc:	4b19      	ldr	r3, [pc, #100]	; (8013e34 <prvAddNewTaskToReadyList+0xc8>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	4313      	orrs	r3, r2
 8013dd2:	4a18      	ldr	r2, [pc, #96]	; (8013e34 <prvAddNewTaskToReadyList+0xc8>)
 8013dd4:	6013      	str	r3, [r2, #0]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dda:	4613      	mov	r3, r2
 8013ddc:	009b      	lsls	r3, r3, #2
 8013dde:	4413      	add	r3, r2
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	4a15      	ldr	r2, [pc, #84]	; (8013e38 <prvAddNewTaskToReadyList+0xcc>)
 8013de4:	441a      	add	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	3304      	adds	r3, #4
 8013dea:	4619      	mov	r1, r3
 8013dec:	4610      	mov	r0, r2
 8013dee:	f7ff f9c2 	bl	8013176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013df2:	f000 ffdb 	bl	8014dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013df6:	4b0d      	ldr	r3, [pc, #52]	; (8013e2c <prvAddNewTaskToReadyList+0xc0>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00e      	beq.n	8013e1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013dfe:	4b0a      	ldr	r3, [pc, #40]	; (8013e28 <prvAddNewTaskToReadyList+0xbc>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d207      	bcs.n	8013e1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013e0c:	4b0b      	ldr	r3, [pc, #44]	; (8013e3c <prvAddNewTaskToReadyList+0xd0>)
 8013e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e12:	601a      	str	r2, [r3, #0]
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e1c:	bf00      	nop
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	2000104c 	.word	0x2000104c
 8013e28:	20000f4c 	.word	0x20000f4c
 8013e2c:	20001058 	.word	0x20001058
 8013e30:	20001068 	.word	0x20001068
 8013e34:	20001054 	.word	0x20001054
 8013e38:	20000f50 	.word	0x20000f50
 8013e3c:	e000ed04 	.word	0xe000ed04

08013e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d017      	beq.n	8013e82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013e52:	4b13      	ldr	r3, [pc, #76]	; (8013ea0 <vTaskDelay+0x60>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d00a      	beq.n	8013e70 <vTaskDelay+0x30>
	__asm volatile
 8013e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e5e:	f383 8811 	msr	BASEPRI, r3
 8013e62:	f3bf 8f6f 	isb	sy
 8013e66:	f3bf 8f4f 	dsb	sy
 8013e6a:	60bb      	str	r3, [r7, #8]
}
 8013e6c:	bf00      	nop
 8013e6e:	e7fe      	b.n	8013e6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013e70:	f000 f884 	bl	8013f7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013e74:	2100      	movs	r1, #0
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f000 fe10 	bl	8014a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013e7c:	f000 f88c 	bl	8013f98 <xTaskResumeAll>
 8013e80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d107      	bne.n	8013e98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013e88:	4b06      	ldr	r3, [pc, #24]	; (8013ea4 <vTaskDelay+0x64>)
 8013e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e8e:	601a      	str	r2, [r3, #0]
 8013e90:	f3bf 8f4f 	dsb	sy
 8013e94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e98:	bf00      	nop
 8013e9a:	3710      	adds	r7, #16
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20001074 	.word	0x20001074
 8013ea4:	e000ed04 	.word	0xe000ed04

08013ea8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b08a      	sub	sp, #40	; 0x28
 8013eac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013eb6:	463a      	mov	r2, r7
 8013eb8:	1d39      	adds	r1, r7, #4
 8013eba:	f107 0308 	add.w	r3, r7, #8
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ed fcf6 	bl	80018b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013ec4:	6839      	ldr	r1, [r7, #0]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	68ba      	ldr	r2, [r7, #8]
 8013eca:	9202      	str	r2, [sp, #8]
 8013ecc:	9301      	str	r3, [sp, #4]
 8013ece:	2300      	movs	r3, #0
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	460a      	mov	r2, r1
 8013ed6:	4921      	ldr	r1, [pc, #132]	; (8013f5c <vTaskStartScheduler+0xb4>)
 8013ed8:	4821      	ldr	r0, [pc, #132]	; (8013f60 <vTaskStartScheduler+0xb8>)
 8013eda:	f7ff fe10 	bl	8013afe <xTaskCreateStatic>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	4a20      	ldr	r2, [pc, #128]	; (8013f64 <vTaskStartScheduler+0xbc>)
 8013ee2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013ee4:	4b1f      	ldr	r3, [pc, #124]	; (8013f64 <vTaskStartScheduler+0xbc>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013eec:	2301      	movs	r3, #1
 8013eee:	617b      	str	r3, [r7, #20]
 8013ef0:	e001      	b.n	8013ef6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d11b      	bne.n	8013f34 <vTaskStartScheduler+0x8c>
	__asm volatile
 8013efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f00:	f383 8811 	msr	BASEPRI, r3
 8013f04:	f3bf 8f6f 	isb	sy
 8013f08:	f3bf 8f4f 	dsb	sy
 8013f0c:	613b      	str	r3, [r7, #16]
}
 8013f0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013f10:	4b15      	ldr	r3, [pc, #84]	; (8013f68 <vTaskStartScheduler+0xc0>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	334c      	adds	r3, #76	; 0x4c
 8013f16:	4a15      	ldr	r2, [pc, #84]	; (8013f6c <vTaskStartScheduler+0xc4>)
 8013f18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013f1a:	4b15      	ldr	r3, [pc, #84]	; (8013f70 <vTaskStartScheduler+0xc8>)
 8013f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013f22:	4b14      	ldr	r3, [pc, #80]	; (8013f74 <vTaskStartScheduler+0xcc>)
 8013f24:	2201      	movs	r2, #1
 8013f26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013f28:	4b13      	ldr	r3, [pc, #76]	; (8013f78 <vTaskStartScheduler+0xd0>)
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013f2e:	f000 fe9b 	bl	8014c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013f32:	e00e      	b.n	8013f52 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f3a:	d10a      	bne.n	8013f52 <vTaskStartScheduler+0xaa>
	__asm volatile
 8013f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f40:	f383 8811 	msr	BASEPRI, r3
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	f3bf 8f4f 	dsb	sy
 8013f4c:	60fb      	str	r3, [r7, #12]
}
 8013f4e:	bf00      	nop
 8013f50:	e7fe      	b.n	8013f50 <vTaskStartScheduler+0xa8>
}
 8013f52:	bf00      	nop
 8013f54:	3718      	adds	r7, #24
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	08018b84 	.word	0x08018b84
 8013f60:	08014525 	.word	0x08014525
 8013f64:	20001070 	.word	0x20001070
 8013f68:	20000f4c 	.word	0x20000f4c
 8013f6c:	200000b8 	.word	0x200000b8
 8013f70:	2000106c 	.word	0x2000106c
 8013f74:	20001058 	.word	0x20001058
 8013f78:	20001050 	.word	0x20001050

08013f7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013f80:	4b04      	ldr	r3, [pc, #16]	; (8013f94 <vTaskSuspendAll+0x18>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	3301      	adds	r3, #1
 8013f86:	4a03      	ldr	r2, [pc, #12]	; (8013f94 <vTaskSuspendAll+0x18>)
 8013f88:	6013      	str	r3, [r2, #0]
}
 8013f8a:	bf00      	nop
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bc80      	pop	{r7}
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop
 8013f94:	20001074 	.word	0x20001074

08013f98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013fa6:	4b41      	ldr	r3, [pc, #260]	; (80140ac <xTaskResumeAll+0x114>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d10a      	bne.n	8013fc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8013fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb2:	f383 8811 	msr	BASEPRI, r3
 8013fb6:	f3bf 8f6f 	isb	sy
 8013fba:	f3bf 8f4f 	dsb	sy
 8013fbe:	603b      	str	r3, [r7, #0]
}
 8013fc0:	bf00      	nop
 8013fc2:	e7fe      	b.n	8013fc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013fc4:	f000 fec2 	bl	8014d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013fc8:	4b38      	ldr	r3, [pc, #224]	; (80140ac <xTaskResumeAll+0x114>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	3b01      	subs	r3, #1
 8013fce:	4a37      	ldr	r2, [pc, #220]	; (80140ac <xTaskResumeAll+0x114>)
 8013fd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fd2:	4b36      	ldr	r3, [pc, #216]	; (80140ac <xTaskResumeAll+0x114>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d161      	bne.n	801409e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013fda:	4b35      	ldr	r3, [pc, #212]	; (80140b0 <xTaskResumeAll+0x118>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d05d      	beq.n	801409e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013fe2:	e02e      	b.n	8014042 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013fe4:	4b33      	ldr	r3, [pc, #204]	; (80140b4 <xTaskResumeAll+0x11c>)
 8013fe6:	68db      	ldr	r3, [r3, #12]
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	3318      	adds	r3, #24
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7ff f91b 	bl	801322c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	3304      	adds	r3, #4
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7ff f916 	bl	801322c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014004:	2201      	movs	r2, #1
 8014006:	409a      	lsls	r2, r3
 8014008:	4b2b      	ldr	r3, [pc, #172]	; (80140b8 <xTaskResumeAll+0x120>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4313      	orrs	r3, r2
 801400e:	4a2a      	ldr	r2, [pc, #168]	; (80140b8 <xTaskResumeAll+0x120>)
 8014010:	6013      	str	r3, [r2, #0]
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014016:	4613      	mov	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	4413      	add	r3, r2
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	4a27      	ldr	r2, [pc, #156]	; (80140bc <xTaskResumeAll+0x124>)
 8014020:	441a      	add	r2, r3
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	3304      	adds	r3, #4
 8014026:	4619      	mov	r1, r3
 8014028:	4610      	mov	r0, r2
 801402a:	f7ff f8a4 	bl	8013176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014032:	4b23      	ldr	r3, [pc, #140]	; (80140c0 <xTaskResumeAll+0x128>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014038:	429a      	cmp	r2, r3
 801403a:	d302      	bcc.n	8014042 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801403c:	4b21      	ldr	r3, [pc, #132]	; (80140c4 <xTaskResumeAll+0x12c>)
 801403e:	2201      	movs	r2, #1
 8014040:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014042:	4b1c      	ldr	r3, [pc, #112]	; (80140b4 <xTaskResumeAll+0x11c>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d1cc      	bne.n	8013fe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d001      	beq.n	8014054 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014050:	f000 fb22 	bl	8014698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014054:	4b1c      	ldr	r3, [pc, #112]	; (80140c8 <xTaskResumeAll+0x130>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d010      	beq.n	8014082 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014060:	f000 f836 	bl	80140d0 <xTaskIncrementTick>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d002      	beq.n	8014070 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801406a:	4b16      	ldr	r3, [pc, #88]	; (80140c4 <xTaskResumeAll+0x12c>)
 801406c:	2201      	movs	r2, #1
 801406e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	3b01      	subs	r3, #1
 8014074:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d1f1      	bne.n	8014060 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801407c:	4b12      	ldr	r3, [pc, #72]	; (80140c8 <xTaskResumeAll+0x130>)
 801407e:	2200      	movs	r2, #0
 8014080:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014082:	4b10      	ldr	r3, [pc, #64]	; (80140c4 <xTaskResumeAll+0x12c>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d009      	beq.n	801409e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801408a:	2301      	movs	r3, #1
 801408c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801408e:	4b0f      	ldr	r3, [pc, #60]	; (80140cc <xTaskResumeAll+0x134>)
 8014090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014094:	601a      	str	r2, [r3, #0]
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801409e:	f000 fe85 	bl	8014dac <vPortExitCritical>

	return xAlreadyYielded;
 80140a2:	68bb      	ldr	r3, [r7, #8]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	20001074 	.word	0x20001074
 80140b0:	2000104c 	.word	0x2000104c
 80140b4:	2000100c 	.word	0x2000100c
 80140b8:	20001054 	.word	0x20001054
 80140bc:	20000f50 	.word	0x20000f50
 80140c0:	20000f4c 	.word	0x20000f4c
 80140c4:	20001060 	.word	0x20001060
 80140c8:	2000105c 	.word	0x2000105c
 80140cc:	e000ed04 	.word	0xe000ed04

080140d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80140d6:	2300      	movs	r3, #0
 80140d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140da:	4b51      	ldr	r3, [pc, #324]	; (8014220 <xTaskIncrementTick+0x150>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f040 808d 	bne.w	80141fe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80140e4:	4b4f      	ldr	r3, [pc, #316]	; (8014224 <xTaskIncrementTick+0x154>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	3301      	adds	r3, #1
 80140ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80140ec:	4a4d      	ldr	r2, [pc, #308]	; (8014224 <xTaskIncrementTick+0x154>)
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d120      	bne.n	801413a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80140f8:	4b4b      	ldr	r3, [pc, #300]	; (8014228 <xTaskIncrementTick+0x158>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00a      	beq.n	8014118 <xTaskIncrementTick+0x48>
	__asm volatile
 8014102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014106:	f383 8811 	msr	BASEPRI, r3
 801410a:	f3bf 8f6f 	isb	sy
 801410e:	f3bf 8f4f 	dsb	sy
 8014112:	603b      	str	r3, [r7, #0]
}
 8014114:	bf00      	nop
 8014116:	e7fe      	b.n	8014116 <xTaskIncrementTick+0x46>
 8014118:	4b43      	ldr	r3, [pc, #268]	; (8014228 <xTaskIncrementTick+0x158>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	60fb      	str	r3, [r7, #12]
 801411e:	4b43      	ldr	r3, [pc, #268]	; (801422c <xTaskIncrementTick+0x15c>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	4a41      	ldr	r2, [pc, #260]	; (8014228 <xTaskIncrementTick+0x158>)
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	4a41      	ldr	r2, [pc, #260]	; (801422c <xTaskIncrementTick+0x15c>)
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	6013      	str	r3, [r2, #0]
 801412c:	4b40      	ldr	r3, [pc, #256]	; (8014230 <xTaskIncrementTick+0x160>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	3301      	adds	r3, #1
 8014132:	4a3f      	ldr	r2, [pc, #252]	; (8014230 <xTaskIncrementTick+0x160>)
 8014134:	6013      	str	r3, [r2, #0]
 8014136:	f000 faaf 	bl	8014698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801413a:	4b3e      	ldr	r3, [pc, #248]	; (8014234 <xTaskIncrementTick+0x164>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	693a      	ldr	r2, [r7, #16]
 8014140:	429a      	cmp	r2, r3
 8014142:	d34d      	bcc.n	80141e0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014144:	4b38      	ldr	r3, [pc, #224]	; (8014228 <xTaskIncrementTick+0x158>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d101      	bne.n	8014152 <xTaskIncrementTick+0x82>
 801414e:	2301      	movs	r3, #1
 8014150:	e000      	b.n	8014154 <xTaskIncrementTick+0x84>
 8014152:	2300      	movs	r3, #0
 8014154:	2b00      	cmp	r3, #0
 8014156:	d004      	beq.n	8014162 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014158:	4b36      	ldr	r3, [pc, #216]	; (8014234 <xTaskIncrementTick+0x164>)
 801415a:	f04f 32ff 	mov.w	r2, #4294967295
 801415e:	601a      	str	r2, [r3, #0]
					break;
 8014160:	e03e      	b.n	80141e0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014162:	4b31      	ldr	r3, [pc, #196]	; (8014228 <xTaskIncrementTick+0x158>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	68db      	ldr	r3, [r3, #12]
 801416a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014172:	693a      	ldr	r2, [r7, #16]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	429a      	cmp	r2, r3
 8014178:	d203      	bcs.n	8014182 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801417a:	4a2e      	ldr	r2, [pc, #184]	; (8014234 <xTaskIncrementTick+0x164>)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6013      	str	r3, [r2, #0]
						break;
 8014180:	e02e      	b.n	80141e0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	3304      	adds	r3, #4
 8014186:	4618      	mov	r0, r3
 8014188:	f7ff f850 	bl	801322c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014190:	2b00      	cmp	r3, #0
 8014192:	d004      	beq.n	801419e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	3318      	adds	r3, #24
 8014198:	4618      	mov	r0, r3
 801419a:	f7ff f847 	bl	801322c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141a2:	2201      	movs	r2, #1
 80141a4:	409a      	lsls	r2, r3
 80141a6:	4b24      	ldr	r3, [pc, #144]	; (8014238 <xTaskIncrementTick+0x168>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	4313      	orrs	r3, r2
 80141ac:	4a22      	ldr	r2, [pc, #136]	; (8014238 <xTaskIncrementTick+0x168>)
 80141ae:	6013      	str	r3, [r2, #0]
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141b4:	4613      	mov	r3, r2
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	4413      	add	r3, r2
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	4a1f      	ldr	r2, [pc, #124]	; (801423c <xTaskIncrementTick+0x16c>)
 80141be:	441a      	add	r2, r3
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	3304      	adds	r3, #4
 80141c4:	4619      	mov	r1, r3
 80141c6:	4610      	mov	r0, r2
 80141c8:	f7fe ffd5 	bl	8013176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141d0:	4b1b      	ldr	r3, [pc, #108]	; (8014240 <xTaskIncrementTick+0x170>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d3b4      	bcc.n	8014144 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80141da:	2301      	movs	r3, #1
 80141dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80141de:	e7b1      	b.n	8014144 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80141e0:	4b17      	ldr	r3, [pc, #92]	; (8014240 <xTaskIncrementTick+0x170>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141e6:	4915      	ldr	r1, [pc, #84]	; (801423c <xTaskIncrementTick+0x16c>)
 80141e8:	4613      	mov	r3, r2
 80141ea:	009b      	lsls	r3, r3, #2
 80141ec:	4413      	add	r3, r2
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	440b      	add	r3, r1
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d907      	bls.n	8014208 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80141f8:	2301      	movs	r3, #1
 80141fa:	617b      	str	r3, [r7, #20]
 80141fc:	e004      	b.n	8014208 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80141fe:	4b11      	ldr	r3, [pc, #68]	; (8014244 <xTaskIncrementTick+0x174>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	3301      	adds	r3, #1
 8014204:	4a0f      	ldr	r2, [pc, #60]	; (8014244 <xTaskIncrementTick+0x174>)
 8014206:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014208:	4b0f      	ldr	r3, [pc, #60]	; (8014248 <xTaskIncrementTick+0x178>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d001      	beq.n	8014214 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8014210:	2301      	movs	r3, #1
 8014212:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014214:	697b      	ldr	r3, [r7, #20]
}
 8014216:	4618      	mov	r0, r3
 8014218:	3718      	adds	r7, #24
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	20001074 	.word	0x20001074
 8014224:	20001050 	.word	0x20001050
 8014228:	20001004 	.word	0x20001004
 801422c:	20001008 	.word	0x20001008
 8014230:	20001064 	.word	0x20001064
 8014234:	2000106c 	.word	0x2000106c
 8014238:	20001054 	.word	0x20001054
 801423c:	20000f50 	.word	0x20000f50
 8014240:	20000f4c 	.word	0x20000f4c
 8014244:	2000105c 	.word	0x2000105c
 8014248:	20001060 	.word	0x20001060

0801424c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801424c:	b480      	push	{r7}
 801424e:	b087      	sub	sp, #28
 8014250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014252:	4b29      	ldr	r3, [pc, #164]	; (80142f8 <vTaskSwitchContext+0xac>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d003      	beq.n	8014262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801425a:	4b28      	ldr	r3, [pc, #160]	; (80142fc <vTaskSwitchContext+0xb0>)
 801425c:	2201      	movs	r2, #1
 801425e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014260:	e044      	b.n	80142ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8014262:	4b26      	ldr	r3, [pc, #152]	; (80142fc <vTaskSwitchContext+0xb0>)
 8014264:	2200      	movs	r2, #0
 8014266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8014268:	4b25      	ldr	r3, [pc, #148]	; (8014300 <vTaskSwitchContext+0xb4>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	fab3 f383 	clz	r3, r3
 8014274:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014276:	7afb      	ldrb	r3, [r7, #11]
 8014278:	f1c3 031f 	rsb	r3, r3, #31
 801427c:	617b      	str	r3, [r7, #20]
 801427e:	4921      	ldr	r1, [pc, #132]	; (8014304 <vTaskSwitchContext+0xb8>)
 8014280:	697a      	ldr	r2, [r7, #20]
 8014282:	4613      	mov	r3, r2
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	4413      	add	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	440b      	add	r3, r1
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d10a      	bne.n	80142a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8014292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014296:	f383 8811 	msr	BASEPRI, r3
 801429a:	f3bf 8f6f 	isb	sy
 801429e:	f3bf 8f4f 	dsb	sy
 80142a2:	607b      	str	r3, [r7, #4]
}
 80142a4:	bf00      	nop
 80142a6:	e7fe      	b.n	80142a6 <vTaskSwitchContext+0x5a>
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	4613      	mov	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	4413      	add	r3, r2
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	4a14      	ldr	r2, [pc, #80]	; (8014304 <vTaskSwitchContext+0xb8>)
 80142b4:	4413      	add	r3, r2
 80142b6:	613b      	str	r3, [r7, #16]
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	685a      	ldr	r2, [r3, #4]
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	605a      	str	r2, [r3, #4]
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	693b      	ldr	r3, [r7, #16]
 80142c8:	3308      	adds	r3, #8
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d104      	bne.n	80142d8 <vTaskSwitchContext+0x8c>
 80142ce:	693b      	ldr	r3, [r7, #16]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	685a      	ldr	r2, [r3, #4]
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	605a      	str	r2, [r3, #4]
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	4a0a      	ldr	r2, [pc, #40]	; (8014308 <vTaskSwitchContext+0xbc>)
 80142e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80142e2:	4b09      	ldr	r3, [pc, #36]	; (8014308 <vTaskSwitchContext+0xbc>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	334c      	adds	r3, #76	; 0x4c
 80142e8:	4a08      	ldr	r2, [pc, #32]	; (801430c <vTaskSwitchContext+0xc0>)
 80142ea:	6013      	str	r3, [r2, #0]
}
 80142ec:	bf00      	nop
 80142ee:	371c      	adds	r7, #28
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bc80      	pop	{r7}
 80142f4:	4770      	bx	lr
 80142f6:	bf00      	nop
 80142f8:	20001074 	.word	0x20001074
 80142fc:	20001060 	.word	0x20001060
 8014300:	20001054 	.word	0x20001054
 8014304:	20000f50 	.word	0x20000f50
 8014308:	20000f4c 	.word	0x20000f4c
 801430c:	200000b8 	.word	0x200000b8

08014310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d10a      	bne.n	8014336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014324:	f383 8811 	msr	BASEPRI, r3
 8014328:	f3bf 8f6f 	isb	sy
 801432c:	f3bf 8f4f 	dsb	sy
 8014330:	60fb      	str	r3, [r7, #12]
}
 8014332:	bf00      	nop
 8014334:	e7fe      	b.n	8014334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014336:	4b07      	ldr	r3, [pc, #28]	; (8014354 <vTaskPlaceOnEventList+0x44>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	3318      	adds	r3, #24
 801433c:	4619      	mov	r1, r3
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f7fe ff3c 	bl	80131bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014344:	2101      	movs	r1, #1
 8014346:	6838      	ldr	r0, [r7, #0]
 8014348:	f000 fba8 	bl	8014a9c <prvAddCurrentTaskToDelayedList>
}
 801434c:	bf00      	nop
 801434e:	3710      	adds	r7, #16
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	20000f4c 	.word	0x20000f4c

08014358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b086      	sub	sp, #24
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	68db      	ldr	r3, [r3, #12]
 8014366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d10a      	bne.n	8014384 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	60fb      	str	r3, [r7, #12]
}
 8014380:	bf00      	nop
 8014382:	e7fe      	b.n	8014382 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	3318      	adds	r3, #24
 8014388:	4618      	mov	r0, r3
 801438a:	f7fe ff4f 	bl	801322c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801438e:	4b1d      	ldr	r3, [pc, #116]	; (8014404 <xTaskRemoveFromEventList+0xac>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d11c      	bne.n	80143d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	3304      	adds	r3, #4
 801439a:	4618      	mov	r0, r3
 801439c:	f7fe ff46 	bl	801322c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a4:	2201      	movs	r2, #1
 80143a6:	409a      	lsls	r2, r3
 80143a8:	4b17      	ldr	r3, [pc, #92]	; (8014408 <xTaskRemoveFromEventList+0xb0>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4313      	orrs	r3, r2
 80143ae:	4a16      	ldr	r2, [pc, #88]	; (8014408 <xTaskRemoveFromEventList+0xb0>)
 80143b0:	6013      	str	r3, [r2, #0]
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143b6:	4613      	mov	r3, r2
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	4413      	add	r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	4a13      	ldr	r2, [pc, #76]	; (801440c <xTaskRemoveFromEventList+0xb4>)
 80143c0:	441a      	add	r2, r3
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	3304      	adds	r3, #4
 80143c6:	4619      	mov	r1, r3
 80143c8:	4610      	mov	r0, r2
 80143ca:	f7fe fed4 	bl	8013176 <vListInsertEnd>
 80143ce:	e005      	b.n	80143dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	3318      	adds	r3, #24
 80143d4:	4619      	mov	r1, r3
 80143d6:	480e      	ldr	r0, [pc, #56]	; (8014410 <xTaskRemoveFromEventList+0xb8>)
 80143d8:	f7fe fecd 	bl	8013176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e0:	4b0c      	ldr	r3, [pc, #48]	; (8014414 <xTaskRemoveFromEventList+0xbc>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d905      	bls.n	80143f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80143ea:	2301      	movs	r3, #1
 80143ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80143ee:	4b0a      	ldr	r3, [pc, #40]	; (8014418 <xTaskRemoveFromEventList+0xc0>)
 80143f0:	2201      	movs	r2, #1
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	e001      	b.n	80143fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80143f6:	2300      	movs	r3, #0
 80143f8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80143fa:	697b      	ldr	r3, [r7, #20]
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	20001074 	.word	0x20001074
 8014408:	20001054 	.word	0x20001054
 801440c:	20000f50 	.word	0x20000f50
 8014410:	2000100c 	.word	0x2000100c
 8014414:	20000f4c 	.word	0x20000f4c
 8014418:	20001060 	.word	0x20001060

0801441c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014424:	4b06      	ldr	r3, [pc, #24]	; (8014440 <vTaskInternalSetTimeOutState+0x24>)
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801442c:	4b05      	ldr	r3, [pc, #20]	; (8014444 <vTaskInternalSetTimeOutState+0x28>)
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	605a      	str	r2, [r3, #4]
}
 8014434:	bf00      	nop
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	bc80      	pop	{r7}
 801443c:	4770      	bx	lr
 801443e:	bf00      	nop
 8014440:	20001064 	.word	0x20001064
 8014444:	20001050 	.word	0x20001050

08014448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b088      	sub	sp, #32
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d10a      	bne.n	801446e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801445c:	f383 8811 	msr	BASEPRI, r3
 8014460:	f3bf 8f6f 	isb	sy
 8014464:	f3bf 8f4f 	dsb	sy
 8014468:	613b      	str	r3, [r7, #16]
}
 801446a:	bf00      	nop
 801446c:	e7fe      	b.n	801446c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d10a      	bne.n	801448a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014478:	f383 8811 	msr	BASEPRI, r3
 801447c:	f3bf 8f6f 	isb	sy
 8014480:	f3bf 8f4f 	dsb	sy
 8014484:	60fb      	str	r3, [r7, #12]
}
 8014486:	bf00      	nop
 8014488:	e7fe      	b.n	8014488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801448a:	f000 fc5f 	bl	8014d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801448e:	4b1d      	ldr	r3, [pc, #116]	; (8014504 <xTaskCheckForTimeOut+0xbc>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	69ba      	ldr	r2, [r7, #24]
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a6:	d102      	bne.n	80144ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	61fb      	str	r3, [r7, #28]
 80144ac:	e023      	b.n	80144f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	4b15      	ldr	r3, [pc, #84]	; (8014508 <xTaskCheckForTimeOut+0xc0>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d007      	beq.n	80144ca <xTaskCheckForTimeOut+0x82>
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	685b      	ldr	r3, [r3, #4]
 80144be:	69ba      	ldr	r2, [r7, #24]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d302      	bcc.n	80144ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80144c4:	2301      	movs	r3, #1
 80144c6:	61fb      	str	r3, [r7, #28]
 80144c8:	e015      	b.n	80144f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	697a      	ldr	r2, [r7, #20]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d20b      	bcs.n	80144ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	1ad2      	subs	r2, r2, r3
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7ff ff9b 	bl	801441c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80144e6:	2300      	movs	r3, #0
 80144e8:	61fb      	str	r3, [r7, #28]
 80144ea:	e004      	b.n	80144f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	2200      	movs	r2, #0
 80144f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80144f2:	2301      	movs	r3, #1
 80144f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80144f6:	f000 fc59 	bl	8014dac <vPortExitCritical>

	return xReturn;
 80144fa:	69fb      	ldr	r3, [r7, #28]
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3720      	adds	r7, #32
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	20001050 	.word	0x20001050
 8014508:	20001064 	.word	0x20001064

0801450c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801450c:	b480      	push	{r7}
 801450e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014510:	4b03      	ldr	r3, [pc, #12]	; (8014520 <vTaskMissedYield+0x14>)
 8014512:	2201      	movs	r2, #1
 8014514:	601a      	str	r2, [r3, #0]
}
 8014516:	bf00      	nop
 8014518:	46bd      	mov	sp, r7
 801451a:	bc80      	pop	{r7}
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop
 8014520:	20001060 	.word	0x20001060

08014524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801452c:	f000 f852 	bl	80145d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014530:	4b06      	ldr	r3, [pc, #24]	; (801454c <prvIdleTask+0x28>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b01      	cmp	r3, #1
 8014536:	d9f9      	bls.n	801452c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014538:	4b05      	ldr	r3, [pc, #20]	; (8014550 <prvIdleTask+0x2c>)
 801453a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801453e:	601a      	str	r2, [r3, #0]
 8014540:	f3bf 8f4f 	dsb	sy
 8014544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014548:	e7f0      	b.n	801452c <prvIdleTask+0x8>
 801454a:	bf00      	nop
 801454c:	20000f50 	.word	0x20000f50
 8014550:	e000ed04 	.word	0xe000ed04

08014554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801455a:	2300      	movs	r3, #0
 801455c:	607b      	str	r3, [r7, #4]
 801455e:	e00c      	b.n	801457a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	4613      	mov	r3, r2
 8014564:	009b      	lsls	r3, r3, #2
 8014566:	4413      	add	r3, r2
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	4a12      	ldr	r2, [pc, #72]	; (80145b4 <prvInitialiseTaskLists+0x60>)
 801456c:	4413      	add	r3, r2
 801456e:	4618      	mov	r0, r3
 8014570:	f7fe fdd6 	bl	8013120 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	3301      	adds	r3, #1
 8014578:	607b      	str	r3, [r7, #4]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b06      	cmp	r3, #6
 801457e:	d9ef      	bls.n	8014560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014580:	480d      	ldr	r0, [pc, #52]	; (80145b8 <prvInitialiseTaskLists+0x64>)
 8014582:	f7fe fdcd 	bl	8013120 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014586:	480d      	ldr	r0, [pc, #52]	; (80145bc <prvInitialiseTaskLists+0x68>)
 8014588:	f7fe fdca 	bl	8013120 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801458c:	480c      	ldr	r0, [pc, #48]	; (80145c0 <prvInitialiseTaskLists+0x6c>)
 801458e:	f7fe fdc7 	bl	8013120 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014592:	480c      	ldr	r0, [pc, #48]	; (80145c4 <prvInitialiseTaskLists+0x70>)
 8014594:	f7fe fdc4 	bl	8013120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014598:	480b      	ldr	r0, [pc, #44]	; (80145c8 <prvInitialiseTaskLists+0x74>)
 801459a:	f7fe fdc1 	bl	8013120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801459e:	4b0b      	ldr	r3, [pc, #44]	; (80145cc <prvInitialiseTaskLists+0x78>)
 80145a0:	4a05      	ldr	r2, [pc, #20]	; (80145b8 <prvInitialiseTaskLists+0x64>)
 80145a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80145a4:	4b0a      	ldr	r3, [pc, #40]	; (80145d0 <prvInitialiseTaskLists+0x7c>)
 80145a6:	4a05      	ldr	r2, [pc, #20]	; (80145bc <prvInitialiseTaskLists+0x68>)
 80145a8:	601a      	str	r2, [r3, #0]
}
 80145aa:	bf00      	nop
 80145ac:	3708      	adds	r7, #8
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	20000f50 	.word	0x20000f50
 80145b8:	20000fdc 	.word	0x20000fdc
 80145bc:	20000ff0 	.word	0x20000ff0
 80145c0:	2000100c 	.word	0x2000100c
 80145c4:	20001020 	.word	0x20001020
 80145c8:	20001038 	.word	0x20001038
 80145cc:	20001004 	.word	0x20001004
 80145d0:	20001008 	.word	0x20001008

080145d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80145da:	e019      	b.n	8014610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80145dc:	f000 fbb6 	bl	8014d4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80145e0:	4b10      	ldr	r3, [pc, #64]	; (8014624 <prvCheckTasksWaitingTermination+0x50>)
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	3304      	adds	r3, #4
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fe fe1d 	bl	801322c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80145f2:	4b0d      	ldr	r3, [pc, #52]	; (8014628 <prvCheckTasksWaitingTermination+0x54>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	3b01      	subs	r3, #1
 80145f8:	4a0b      	ldr	r2, [pc, #44]	; (8014628 <prvCheckTasksWaitingTermination+0x54>)
 80145fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80145fc:	4b0b      	ldr	r3, [pc, #44]	; (801462c <prvCheckTasksWaitingTermination+0x58>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	3b01      	subs	r3, #1
 8014602:	4a0a      	ldr	r2, [pc, #40]	; (801462c <prvCheckTasksWaitingTermination+0x58>)
 8014604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014606:	f000 fbd1 	bl	8014dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f000 f810 	bl	8014630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014610:	4b06      	ldr	r3, [pc, #24]	; (801462c <prvCheckTasksWaitingTermination+0x58>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d1e1      	bne.n	80145dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014618:	bf00      	nop
 801461a:	bf00      	nop
 801461c:	3708      	adds	r7, #8
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	20001020 	.word	0x20001020
 8014628:	2000104c 	.word	0x2000104c
 801462c:	20001034 	.word	0x20001034

08014630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	334c      	adds	r3, #76	; 0x4c
 801463c:	4618      	mov	r0, r3
 801463e:	f002 f8bd 	bl	80167bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014648:	2b00      	cmp	r3, #0
 801464a:	d108      	bne.n	801465e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014650:	4618      	mov	r0, r3
 8014652:	f000 fd3f 	bl	80150d4 <vPortFree>
				vPortFree( pxTCB );
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f000 fd3c 	bl	80150d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801465c:	e018      	b.n	8014690 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014664:	2b01      	cmp	r3, #1
 8014666:	d103      	bne.n	8014670 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 fd33 	bl	80150d4 <vPortFree>
	}
 801466e:	e00f      	b.n	8014690 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014676:	2b02      	cmp	r3, #2
 8014678:	d00a      	beq.n	8014690 <prvDeleteTCB+0x60>
	__asm volatile
 801467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801467e:	f383 8811 	msr	BASEPRI, r3
 8014682:	f3bf 8f6f 	isb	sy
 8014686:	f3bf 8f4f 	dsb	sy
 801468a:	60fb      	str	r3, [r7, #12]
}
 801468c:	bf00      	nop
 801468e:	e7fe      	b.n	801468e <prvDeleteTCB+0x5e>
	}
 8014690:	bf00      	nop
 8014692:	3710      	adds	r7, #16
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801469e:	4b0e      	ldr	r3, [pc, #56]	; (80146d8 <prvResetNextTaskUnblockTime+0x40>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d101      	bne.n	80146ac <prvResetNextTaskUnblockTime+0x14>
 80146a8:	2301      	movs	r3, #1
 80146aa:	e000      	b.n	80146ae <prvResetNextTaskUnblockTime+0x16>
 80146ac:	2300      	movs	r3, #0
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d004      	beq.n	80146bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80146b2:	4b0a      	ldr	r3, [pc, #40]	; (80146dc <prvResetNextTaskUnblockTime+0x44>)
 80146b4:	f04f 32ff 	mov.w	r2, #4294967295
 80146b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80146ba:	e008      	b.n	80146ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80146bc:	4b06      	ldr	r3, [pc, #24]	; (80146d8 <prvResetNextTaskUnblockTime+0x40>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	4a04      	ldr	r2, [pc, #16]	; (80146dc <prvResetNextTaskUnblockTime+0x44>)
 80146cc:	6013      	str	r3, [r2, #0]
}
 80146ce:	bf00      	nop
 80146d0:	370c      	adds	r7, #12
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bc80      	pop	{r7}
 80146d6:	4770      	bx	lr
 80146d8:	20001004 	.word	0x20001004
 80146dc:	2000106c 	.word	0x2000106c

080146e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80146e0:	b480      	push	{r7}
 80146e2:	b083      	sub	sp, #12
 80146e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80146e6:	4b0b      	ldr	r3, [pc, #44]	; (8014714 <xTaskGetSchedulerState+0x34>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d102      	bne.n	80146f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80146ee:	2301      	movs	r3, #1
 80146f0:	607b      	str	r3, [r7, #4]
 80146f2:	e008      	b.n	8014706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146f4:	4b08      	ldr	r3, [pc, #32]	; (8014718 <xTaskGetSchedulerState+0x38>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d102      	bne.n	8014702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80146fc:	2302      	movs	r3, #2
 80146fe:	607b      	str	r3, [r7, #4]
 8014700:	e001      	b.n	8014706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014702:	2300      	movs	r3, #0
 8014704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014706:	687b      	ldr	r3, [r7, #4]
	}
 8014708:	4618      	mov	r0, r3
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	bc80      	pop	{r7}
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop
 8014714:	20001058 	.word	0x20001058
 8014718:	20001074 	.word	0x20001074

0801471c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014728:	2300      	movs	r3, #0
 801472a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d06e      	beq.n	8014810 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014736:	4b39      	ldr	r3, [pc, #228]	; (801481c <xTaskPriorityInherit+0x100>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801473c:	429a      	cmp	r2, r3
 801473e:	d25e      	bcs.n	80147fe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	699b      	ldr	r3, [r3, #24]
 8014744:	2b00      	cmp	r3, #0
 8014746:	db06      	blt.n	8014756 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014748:	4b34      	ldr	r3, [pc, #208]	; (801481c <xTaskPriorityInherit+0x100>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801474e:	f1c3 0207 	rsb	r2, r3, #7
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	6959      	ldr	r1, [r3, #20]
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801475e:	4613      	mov	r3, r2
 8014760:	009b      	lsls	r3, r3, #2
 8014762:	4413      	add	r3, r2
 8014764:	009b      	lsls	r3, r3, #2
 8014766:	4a2e      	ldr	r2, [pc, #184]	; (8014820 <xTaskPriorityInherit+0x104>)
 8014768:	4413      	add	r3, r2
 801476a:	4299      	cmp	r1, r3
 801476c:	d101      	bne.n	8014772 <xTaskPriorityInherit+0x56>
 801476e:	2301      	movs	r3, #1
 8014770:	e000      	b.n	8014774 <xTaskPriorityInherit+0x58>
 8014772:	2300      	movs	r3, #0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d03a      	beq.n	80147ee <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	3304      	adds	r3, #4
 801477c:	4618      	mov	r0, r3
 801477e:	f7fe fd55 	bl	801322c <uxListRemove>
 8014782:	4603      	mov	r3, r0
 8014784:	2b00      	cmp	r3, #0
 8014786:	d115      	bne.n	80147b4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801478c:	4924      	ldr	r1, [pc, #144]	; (8014820 <xTaskPriorityInherit+0x104>)
 801478e:	4613      	mov	r3, r2
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	4413      	add	r3, r2
 8014794:	009b      	lsls	r3, r3, #2
 8014796:	440b      	add	r3, r1
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d10a      	bne.n	80147b4 <xTaskPriorityInherit+0x98>
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147a2:	2201      	movs	r2, #1
 80147a4:	fa02 f303 	lsl.w	r3, r2, r3
 80147a8:	43da      	mvns	r2, r3
 80147aa:	4b1e      	ldr	r3, [pc, #120]	; (8014824 <xTaskPriorityInherit+0x108>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	4013      	ands	r3, r2
 80147b0:	4a1c      	ldr	r2, [pc, #112]	; (8014824 <xTaskPriorityInherit+0x108>)
 80147b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80147b4:	4b19      	ldr	r3, [pc, #100]	; (801481c <xTaskPriorityInherit+0x100>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c2:	2201      	movs	r2, #1
 80147c4:	409a      	lsls	r2, r3
 80147c6:	4b17      	ldr	r3, [pc, #92]	; (8014824 <xTaskPriorityInherit+0x108>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	4313      	orrs	r3, r2
 80147cc:	4a15      	ldr	r2, [pc, #84]	; (8014824 <xTaskPriorityInherit+0x108>)
 80147ce:	6013      	str	r3, [r2, #0]
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147d4:	4613      	mov	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	4413      	add	r3, r2
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	4a10      	ldr	r2, [pc, #64]	; (8014820 <xTaskPriorityInherit+0x104>)
 80147de:	441a      	add	r2, r3
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	3304      	adds	r3, #4
 80147e4:	4619      	mov	r1, r3
 80147e6:	4610      	mov	r0, r2
 80147e8:	f7fe fcc5 	bl	8013176 <vListInsertEnd>
 80147ec:	e004      	b.n	80147f8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80147ee:	4b0b      	ldr	r3, [pc, #44]	; (801481c <xTaskPriorityInherit+0x100>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80147f8:	2301      	movs	r3, #1
 80147fa:	60fb      	str	r3, [r7, #12]
 80147fc:	e008      	b.n	8014810 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014802:	4b06      	ldr	r3, [pc, #24]	; (801481c <xTaskPriorityInherit+0x100>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014808:	429a      	cmp	r2, r3
 801480a:	d201      	bcs.n	8014810 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801480c:	2301      	movs	r3, #1
 801480e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014810:	68fb      	ldr	r3, [r7, #12]
	}
 8014812:	4618      	mov	r0, r3
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	20000f4c 	.word	0x20000f4c
 8014820:	20000f50 	.word	0x20000f50
 8014824:	20001054 	.word	0x20001054

08014828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014834:	2300      	movs	r3, #0
 8014836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d06e      	beq.n	801491c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801483e:	4b3a      	ldr	r3, [pc, #232]	; (8014928 <xTaskPriorityDisinherit+0x100>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	693a      	ldr	r2, [r7, #16]
 8014844:	429a      	cmp	r2, r3
 8014846:	d00a      	beq.n	801485e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801484c:	f383 8811 	msr	BASEPRI, r3
 8014850:	f3bf 8f6f 	isb	sy
 8014854:	f3bf 8f4f 	dsb	sy
 8014858:	60fb      	str	r3, [r7, #12]
}
 801485a:	bf00      	nop
 801485c:	e7fe      	b.n	801485c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014862:	2b00      	cmp	r3, #0
 8014864:	d10a      	bne.n	801487c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	60bb      	str	r3, [r7, #8]
}
 8014878:	bf00      	nop
 801487a:	e7fe      	b.n	801487a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014880:	1e5a      	subs	r2, r3, #1
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801488e:	429a      	cmp	r2, r3
 8014890:	d044      	beq.n	801491c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014896:	2b00      	cmp	r3, #0
 8014898:	d140      	bne.n	801491c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	3304      	adds	r3, #4
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fe fcc4 	bl	801322c <uxListRemove>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d115      	bne.n	80148d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148ae:	491f      	ldr	r1, [pc, #124]	; (801492c <xTaskPriorityDisinherit+0x104>)
 80148b0:	4613      	mov	r3, r2
 80148b2:	009b      	lsls	r3, r3, #2
 80148b4:	4413      	add	r3, r2
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	440b      	add	r3, r1
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d10a      	bne.n	80148d6 <xTaskPriorityDisinherit+0xae>
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c4:	2201      	movs	r2, #1
 80148c6:	fa02 f303 	lsl.w	r3, r2, r3
 80148ca:	43da      	mvns	r2, r3
 80148cc:	4b18      	ldr	r3, [pc, #96]	; (8014930 <xTaskPriorityDisinherit+0x108>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	4013      	ands	r3, r2
 80148d2:	4a17      	ldr	r2, [pc, #92]	; (8014930 <xTaskPriorityDisinherit+0x108>)
 80148d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80148d6:	693b      	ldr	r3, [r7, #16]
 80148d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148e2:	f1c3 0207 	rsb	r2, r3, #7
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ee:	2201      	movs	r2, #1
 80148f0:	409a      	lsls	r2, r3
 80148f2:	4b0f      	ldr	r3, [pc, #60]	; (8014930 <xTaskPriorityDisinherit+0x108>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4313      	orrs	r3, r2
 80148f8:	4a0d      	ldr	r2, [pc, #52]	; (8014930 <xTaskPriorityDisinherit+0x108>)
 80148fa:	6013      	str	r3, [r2, #0]
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014900:	4613      	mov	r3, r2
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	4413      	add	r3, r2
 8014906:	009b      	lsls	r3, r3, #2
 8014908:	4a08      	ldr	r2, [pc, #32]	; (801492c <xTaskPriorityDisinherit+0x104>)
 801490a:	441a      	add	r2, r3
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	3304      	adds	r3, #4
 8014910:	4619      	mov	r1, r3
 8014912:	4610      	mov	r0, r2
 8014914:	f7fe fc2f 	bl	8013176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014918:	2301      	movs	r3, #1
 801491a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801491c:	697b      	ldr	r3, [r7, #20]
	}
 801491e:	4618      	mov	r0, r3
 8014920:	3718      	adds	r7, #24
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	20000f4c 	.word	0x20000f4c
 801492c:	20000f50 	.word	0x20000f50
 8014930:	20001054 	.word	0x20001054

08014934 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014934:	b580      	push	{r7, lr}
 8014936:	b088      	sub	sp, #32
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014942:	2301      	movs	r3, #1
 8014944:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2b00      	cmp	r3, #0
 801494a:	f000 8088 	beq.w	8014a5e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10a      	bne.n	801496c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495a:	f383 8811 	msr	BASEPRI, r3
 801495e:	f3bf 8f6f 	isb	sy
 8014962:	f3bf 8f4f 	dsb	sy
 8014966:	60fb      	str	r3, [r7, #12]
}
 8014968:	bf00      	nop
 801496a:	e7fe      	b.n	801496a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801496c:	69bb      	ldr	r3, [r7, #24]
 801496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014970:	683a      	ldr	r2, [r7, #0]
 8014972:	429a      	cmp	r2, r3
 8014974:	d902      	bls.n	801497c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	61fb      	str	r3, [r7, #28]
 801497a:	e002      	b.n	8014982 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801497c:	69bb      	ldr	r3, [r7, #24]
 801497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014980:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014986:	69fa      	ldr	r2, [r7, #28]
 8014988:	429a      	cmp	r2, r3
 801498a:	d068      	beq.n	8014a5e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014990:	697a      	ldr	r2, [r7, #20]
 8014992:	429a      	cmp	r2, r3
 8014994:	d163      	bne.n	8014a5e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014996:	4b34      	ldr	r3, [pc, #208]	; (8014a68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	69ba      	ldr	r2, [r7, #24]
 801499c:	429a      	cmp	r2, r3
 801499e:	d10a      	bne.n	80149b6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80149a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a4:	f383 8811 	msr	BASEPRI, r3
 80149a8:	f3bf 8f6f 	isb	sy
 80149ac:	f3bf 8f4f 	dsb	sy
 80149b0:	60bb      	str	r3, [r7, #8]
}
 80149b2:	bf00      	nop
 80149b4:	e7fe      	b.n	80149b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80149b6:	69bb      	ldr	r3, [r7, #24]
 80149b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149ba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	69fa      	ldr	r2, [r7, #28]
 80149c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	699b      	ldr	r3, [r3, #24]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	db04      	blt.n	80149d4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	f1c3 0207 	rsb	r2, r3, #7
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	6959      	ldr	r1, [r3, #20]
 80149d8:	693a      	ldr	r2, [r7, #16]
 80149da:	4613      	mov	r3, r2
 80149dc:	009b      	lsls	r3, r3, #2
 80149de:	4413      	add	r3, r2
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	4a22      	ldr	r2, [pc, #136]	; (8014a6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80149e4:	4413      	add	r3, r2
 80149e6:	4299      	cmp	r1, r3
 80149e8:	d101      	bne.n	80149ee <vTaskPriorityDisinheritAfterTimeout+0xba>
 80149ea:	2301      	movs	r3, #1
 80149ec:	e000      	b.n	80149f0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80149ee:	2300      	movs	r3, #0
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d034      	beq.n	8014a5e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149f4:	69bb      	ldr	r3, [r7, #24]
 80149f6:	3304      	adds	r3, #4
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fe fc17 	bl	801322c <uxListRemove>
 80149fe:	4603      	mov	r3, r0
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d115      	bne.n	8014a30 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a08:	4918      	ldr	r1, [pc, #96]	; (8014a6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	009b      	lsls	r3, r3, #2
 8014a0e:	4413      	add	r3, r2
 8014a10:	009b      	lsls	r3, r3, #2
 8014a12:	440b      	add	r3, r1
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d10a      	bne.n	8014a30 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8014a1a:	69bb      	ldr	r3, [r7, #24]
 8014a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a1e:	2201      	movs	r2, #1
 8014a20:	fa02 f303 	lsl.w	r3, r2, r3
 8014a24:	43da      	mvns	r2, r3
 8014a26:	4b12      	ldr	r3, [pc, #72]	; (8014a70 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	4a10      	ldr	r2, [pc, #64]	; (8014a70 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a2e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a34:	2201      	movs	r2, #1
 8014a36:	409a      	lsls	r2, r3
 8014a38:	4b0d      	ldr	r3, [pc, #52]	; (8014a70 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4313      	orrs	r3, r2
 8014a3e:	4a0c      	ldr	r2, [pc, #48]	; (8014a70 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014a40:	6013      	str	r3, [r2, #0]
 8014a42:	69bb      	ldr	r3, [r7, #24]
 8014a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a46:	4613      	mov	r3, r2
 8014a48:	009b      	lsls	r3, r3, #2
 8014a4a:	4413      	add	r3, r2
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	4a07      	ldr	r2, [pc, #28]	; (8014a6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014a50:	441a      	add	r2, r3
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	3304      	adds	r3, #4
 8014a56:	4619      	mov	r1, r3
 8014a58:	4610      	mov	r0, r2
 8014a5a:	f7fe fb8c 	bl	8013176 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a5e:	bf00      	nop
 8014a60:	3720      	adds	r7, #32
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	20000f4c 	.word	0x20000f4c
 8014a6c:	20000f50 	.word	0x20000f50
 8014a70:	20001054 	.word	0x20001054

08014a74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8014a74:	b480      	push	{r7}
 8014a76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014a78:	4b07      	ldr	r3, [pc, #28]	; (8014a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d004      	beq.n	8014a8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014a80:	4b05      	ldr	r3, [pc, #20]	; (8014a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014a86:	3201      	adds	r2, #1
 8014a88:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014a8a:	4b03      	ldr	r3, [pc, #12]	; (8014a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
	}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bc80      	pop	{r7}
 8014a94:	4770      	bx	lr
 8014a96:	bf00      	nop
 8014a98:	20000f4c 	.word	0x20000f4c

08014a9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b084      	sub	sp, #16
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014aa6:	4b29      	ldr	r3, [pc, #164]	; (8014b4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014aac:	4b28      	ldr	r3, [pc, #160]	; (8014b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	3304      	adds	r3, #4
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fe fbba 	bl	801322c <uxListRemove>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d10b      	bne.n	8014ad6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8014abe:	4b24      	ldr	r3, [pc, #144]	; (8014b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac4:	2201      	movs	r2, #1
 8014ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8014aca:	43da      	mvns	r2, r3
 8014acc:	4b21      	ldr	r3, [pc, #132]	; (8014b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4013      	ands	r3, r2
 8014ad2:	4a20      	ldr	r2, [pc, #128]	; (8014b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014ad4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014adc:	d10a      	bne.n	8014af4 <prvAddCurrentTaskToDelayedList+0x58>
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d007      	beq.n	8014af4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ae4:	4b1a      	ldr	r3, [pc, #104]	; (8014b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	3304      	adds	r3, #4
 8014aea:	4619      	mov	r1, r3
 8014aec:	481a      	ldr	r0, [pc, #104]	; (8014b58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014aee:	f7fe fb42 	bl	8013176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014af2:	e026      	b.n	8014b42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	4413      	add	r3, r2
 8014afa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014afc:	4b14      	ldr	r3, [pc, #80]	; (8014b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	68ba      	ldr	r2, [r7, #8]
 8014b02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d209      	bcs.n	8014b20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b0c:	4b13      	ldr	r3, [pc, #76]	; (8014b5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	4b0f      	ldr	r3, [pc, #60]	; (8014b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	3304      	adds	r3, #4
 8014b16:	4619      	mov	r1, r3
 8014b18:	4610      	mov	r0, r2
 8014b1a:	f7fe fb4f 	bl	80131bc <vListInsert>
}
 8014b1e:	e010      	b.n	8014b42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014b20:	4b0f      	ldr	r3, [pc, #60]	; (8014b60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	4b0a      	ldr	r3, [pc, #40]	; (8014b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	3304      	adds	r3, #4
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	4610      	mov	r0, r2
 8014b2e:	f7fe fb45 	bl	80131bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014b32:	4b0c      	ldr	r3, [pc, #48]	; (8014b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	68ba      	ldr	r2, [r7, #8]
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d202      	bcs.n	8014b42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014b3c:	4a09      	ldr	r2, [pc, #36]	; (8014b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	6013      	str	r3, [r2, #0]
}
 8014b42:	bf00      	nop
 8014b44:	3710      	adds	r7, #16
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	20001050 	.word	0x20001050
 8014b50:	20000f4c 	.word	0x20000f4c
 8014b54:	20001054 	.word	0x20001054
 8014b58:	20001038 	.word	0x20001038
 8014b5c:	20001008 	.word	0x20001008
 8014b60:	20001004 	.word	0x20001004
 8014b64:	2000106c 	.word	0x2000106c

08014b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b085      	sub	sp, #20
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	60f8      	str	r0, [r7, #12]
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	3b04      	subs	r3, #4
 8014b78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	3b04      	subs	r3, #4
 8014b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	f023 0201 	bic.w	r2, r3, #1
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	3b04      	subs	r3, #4
 8014b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b98:	4a08      	ldr	r2, [pc, #32]	; (8014bbc <pxPortInitialiseStack+0x54>)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	3b14      	subs	r3, #20
 8014ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	3b20      	subs	r3, #32
 8014bae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3714      	adds	r7, #20
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bc80      	pop	{r7}
 8014bba:	4770      	bx	lr
 8014bbc:	08014bc1 	.word	0x08014bc1

08014bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014bca:	4b12      	ldr	r3, [pc, #72]	; (8014c14 <prvTaskExitError+0x54>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bd2:	d00a      	beq.n	8014bea <prvTaskExitError+0x2a>
	__asm volatile
 8014bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd8:	f383 8811 	msr	BASEPRI, r3
 8014bdc:	f3bf 8f6f 	isb	sy
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	60fb      	str	r3, [r7, #12]
}
 8014be6:	bf00      	nop
 8014be8:	e7fe      	b.n	8014be8 <prvTaskExitError+0x28>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	60bb      	str	r3, [r7, #8]
}
 8014bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014bfe:	bf00      	nop
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d0fc      	beq.n	8014c00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014c06:	bf00      	nop
 8014c08:	bf00      	nop
 8014c0a:	3714      	adds	r7, #20
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bc80      	pop	{r7}
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	20000064 	.word	0x20000064
	...

08014c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c20:	4b07      	ldr	r3, [pc, #28]	; (8014c40 <pxCurrentTCBConst2>)
 8014c22:	6819      	ldr	r1, [r3, #0]
 8014c24:	6808      	ldr	r0, [r1, #0]
 8014c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014c2a:	f380 8809 	msr	PSP, r0
 8014c2e:	f3bf 8f6f 	isb	sy
 8014c32:	f04f 0000 	mov.w	r0, #0
 8014c36:	f380 8811 	msr	BASEPRI, r0
 8014c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8014c3e:	4770      	bx	lr

08014c40 <pxCurrentTCBConst2>:
 8014c40:	20000f4c 	.word	0x20000f4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c44:	bf00      	nop
 8014c46:	bf00      	nop

08014c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014c48:	4806      	ldr	r0, [pc, #24]	; (8014c64 <prvPortStartFirstTask+0x1c>)
 8014c4a:	6800      	ldr	r0, [r0, #0]
 8014c4c:	6800      	ldr	r0, [r0, #0]
 8014c4e:	f380 8808 	msr	MSP, r0
 8014c52:	b662      	cpsie	i
 8014c54:	b661      	cpsie	f
 8014c56:	f3bf 8f4f 	dsb	sy
 8014c5a:	f3bf 8f6f 	isb	sy
 8014c5e:	df00      	svc	0
 8014c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c62:	bf00      	nop
 8014c64:	e000ed08 	.word	0xe000ed08

08014c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c6e:	4b32      	ldr	r3, [pc, #200]	; (8014d38 <xPortStartScheduler+0xd0>)
 8014c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	22ff      	movs	r2, #255	; 0xff
 8014c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	b2db      	uxtb	r3, r3
 8014c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c88:	78fb      	ldrb	r3, [r7, #3]
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	4b2a      	ldr	r3, [pc, #168]	; (8014d3c <xPortStartScheduler+0xd4>)
 8014c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c96:	4b2a      	ldr	r3, [pc, #168]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014c98:	2207      	movs	r2, #7
 8014c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c9c:	e009      	b.n	8014cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014c9e:	4b28      	ldr	r3, [pc, #160]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	3b01      	subs	r3, #1
 8014ca4:	4a26      	ldr	r2, [pc, #152]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014ca8:	78fb      	ldrb	r3, [r7, #3]
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	b2db      	uxtb	r3, r3
 8014cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cb2:	78fb      	ldrb	r3, [r7, #3]
 8014cb4:	b2db      	uxtb	r3, r3
 8014cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cba:	2b80      	cmp	r3, #128	; 0x80
 8014cbc:	d0ef      	beq.n	8014c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014cbe:	4b20      	ldr	r3, [pc, #128]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	f1c3 0307 	rsb	r3, r3, #7
 8014cc6:	2b04      	cmp	r3, #4
 8014cc8:	d00a      	beq.n	8014ce0 <xPortStartScheduler+0x78>
	__asm volatile
 8014cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cce:	f383 8811 	msr	BASEPRI, r3
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	f3bf 8f4f 	dsb	sy
 8014cda:	60bb      	str	r3, [r7, #8]
}
 8014cdc:	bf00      	nop
 8014cde:	e7fe      	b.n	8014cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014ce0:	4b17      	ldr	r3, [pc, #92]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	021b      	lsls	r3, r3, #8
 8014ce6:	4a16      	ldr	r2, [pc, #88]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014ce8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014cea:	4b15      	ldr	r3, [pc, #84]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014cf2:	4a13      	ldr	r2, [pc, #76]	; (8014d40 <xPortStartScheduler+0xd8>)
 8014cf4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	b2da      	uxtb	r2, r3
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014cfe:	4b11      	ldr	r3, [pc, #68]	; (8014d44 <xPortStartScheduler+0xdc>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a10      	ldr	r2, [pc, #64]	; (8014d44 <xPortStartScheduler+0xdc>)
 8014d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d0a:	4b0e      	ldr	r3, [pc, #56]	; (8014d44 <xPortStartScheduler+0xdc>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	4a0d      	ldr	r2, [pc, #52]	; (8014d44 <xPortStartScheduler+0xdc>)
 8014d10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014d14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014d16:	f000 f8b9 	bl	8014e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014d1a:	4b0b      	ldr	r3, [pc, #44]	; (8014d48 <xPortStartScheduler+0xe0>)
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d20:	f7ff ff92 	bl	8014c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d24:	f7ff fa92 	bl	801424c <vTaskSwitchContext>
	prvTaskExitError();
 8014d28:	f7ff ff4a 	bl	8014bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d2c:	2300      	movs	r3, #0
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	e000e400 	.word	0xe000e400
 8014d3c:	20001078 	.word	0x20001078
 8014d40:	2000107c 	.word	0x2000107c
 8014d44:	e000ed20 	.word	0xe000ed20
 8014d48:	20000064 	.word	0x20000064

08014d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
	__asm volatile
 8014d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	607b      	str	r3, [r7, #4]
}
 8014d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d66:	4b0f      	ldr	r3, [pc, #60]	; (8014da4 <vPortEnterCritical+0x58>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	4a0d      	ldr	r2, [pc, #52]	; (8014da4 <vPortEnterCritical+0x58>)
 8014d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d70:	4b0c      	ldr	r3, [pc, #48]	; (8014da4 <vPortEnterCritical+0x58>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d10f      	bne.n	8014d98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d78:	4b0b      	ldr	r3, [pc, #44]	; (8014da8 <vPortEnterCritical+0x5c>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d00a      	beq.n	8014d98 <vPortEnterCritical+0x4c>
	__asm volatile
 8014d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d86:	f383 8811 	msr	BASEPRI, r3
 8014d8a:	f3bf 8f6f 	isb	sy
 8014d8e:	f3bf 8f4f 	dsb	sy
 8014d92:	603b      	str	r3, [r7, #0]
}
 8014d94:	bf00      	nop
 8014d96:	e7fe      	b.n	8014d96 <vPortEnterCritical+0x4a>
	}
}
 8014d98:	bf00      	nop
 8014d9a:	370c      	adds	r7, #12
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bc80      	pop	{r7}
 8014da0:	4770      	bx	lr
 8014da2:	bf00      	nop
 8014da4:	20000064 	.word	0x20000064
 8014da8:	e000ed04 	.word	0xe000ed04

08014dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014dac:	b480      	push	{r7}
 8014dae:	b083      	sub	sp, #12
 8014db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014db2:	4b11      	ldr	r3, [pc, #68]	; (8014df8 <vPortExitCritical+0x4c>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d10a      	bne.n	8014dd0 <vPortExitCritical+0x24>
	__asm volatile
 8014dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dbe:	f383 8811 	msr	BASEPRI, r3
 8014dc2:	f3bf 8f6f 	isb	sy
 8014dc6:	f3bf 8f4f 	dsb	sy
 8014dca:	607b      	str	r3, [r7, #4]
}
 8014dcc:	bf00      	nop
 8014dce:	e7fe      	b.n	8014dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014dd0:	4b09      	ldr	r3, [pc, #36]	; (8014df8 <vPortExitCritical+0x4c>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	3b01      	subs	r3, #1
 8014dd6:	4a08      	ldr	r2, [pc, #32]	; (8014df8 <vPortExitCritical+0x4c>)
 8014dd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014dda:	4b07      	ldr	r3, [pc, #28]	; (8014df8 <vPortExitCritical+0x4c>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d105      	bne.n	8014dee <vPortExitCritical+0x42>
 8014de2:	2300      	movs	r3, #0
 8014de4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	f383 8811 	msr	BASEPRI, r3
}
 8014dec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014dee:	bf00      	nop
 8014df0:	370c      	adds	r7, #12
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bc80      	pop	{r7}
 8014df6:	4770      	bx	lr
 8014df8:	20000064 	.word	0x20000064
 8014dfc:	00000000 	.word	0x00000000

08014e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014e00:	f3ef 8009 	mrs	r0, PSP
 8014e04:	f3bf 8f6f 	isb	sy
 8014e08:	4b0d      	ldr	r3, [pc, #52]	; (8014e40 <pxCurrentTCBConst>)
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014e10:	6010      	str	r0, [r2, #0]
 8014e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8014e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e1a:	f380 8811 	msr	BASEPRI, r0
 8014e1e:	f7ff fa15 	bl	801424c <vTaskSwitchContext>
 8014e22:	f04f 0000 	mov.w	r0, #0
 8014e26:	f380 8811 	msr	BASEPRI, r0
 8014e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014e2e:	6819      	ldr	r1, [r3, #0]
 8014e30:	6808      	ldr	r0, [r1, #0]
 8014e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014e36:	f380 8809 	msr	PSP, r0
 8014e3a:	f3bf 8f6f 	isb	sy
 8014e3e:	4770      	bx	lr

08014e40 <pxCurrentTCBConst>:
 8014e40:	20000f4c 	.word	0x20000f4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e44:	bf00      	nop
 8014e46:	bf00      	nop

08014e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	607b      	str	r3, [r7, #4]
}
 8014e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e62:	f7ff f935 	bl	80140d0 <xTaskIncrementTick>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d003      	beq.n	8014e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e6c:	4b06      	ldr	r3, [pc, #24]	; (8014e88 <xPortSysTickHandler+0x40>)
 8014e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e72:	601a      	str	r2, [r3, #0]
 8014e74:	2300      	movs	r3, #0
 8014e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	f383 8811 	msr	BASEPRI, r3
}
 8014e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e80:	bf00      	nop
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	e000ed04 	.word	0xe000ed04

08014e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014e90:	4b0a      	ldr	r3, [pc, #40]	; (8014ebc <vPortSetupTimerInterrupt+0x30>)
 8014e92:	2200      	movs	r2, #0
 8014e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014e96:	4b0a      	ldr	r3, [pc, #40]	; (8014ec0 <vPortSetupTimerInterrupt+0x34>)
 8014e98:	2200      	movs	r2, #0
 8014e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014e9c:	4b09      	ldr	r3, [pc, #36]	; (8014ec4 <vPortSetupTimerInterrupt+0x38>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	4a09      	ldr	r2, [pc, #36]	; (8014ec8 <vPortSetupTimerInterrupt+0x3c>)
 8014ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ea6:	099b      	lsrs	r3, r3, #6
 8014ea8:	4a08      	ldr	r2, [pc, #32]	; (8014ecc <vPortSetupTimerInterrupt+0x40>)
 8014eaa:	3b01      	subs	r3, #1
 8014eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014eae:	4b03      	ldr	r3, [pc, #12]	; (8014ebc <vPortSetupTimerInterrupt+0x30>)
 8014eb0:	2207      	movs	r2, #7
 8014eb2:	601a      	str	r2, [r3, #0]
}
 8014eb4:	bf00      	nop
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bc80      	pop	{r7}
 8014eba:	4770      	bx	lr
 8014ebc:	e000e010 	.word	0xe000e010
 8014ec0:	e000e018 	.word	0xe000e018
 8014ec4:	20000010 	.word	0x20000010
 8014ec8:	10624dd3 	.word	0x10624dd3
 8014ecc:	e000e014 	.word	0xe000e014

08014ed0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b085      	sub	sp, #20
 8014ed4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014ed6:	f3ef 8305 	mrs	r3, IPSR
 8014eda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2b0f      	cmp	r3, #15
 8014ee0:	d914      	bls.n	8014f0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014ee2:	4a16      	ldr	r2, [pc, #88]	; (8014f3c <vPortValidateInterruptPriority+0x6c>)
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	4413      	add	r3, r2
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014eec:	4b14      	ldr	r3, [pc, #80]	; (8014f40 <vPortValidateInterruptPriority+0x70>)
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	7afa      	ldrb	r2, [r7, #11]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d20a      	bcs.n	8014f0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efa:	f383 8811 	msr	BASEPRI, r3
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	607b      	str	r3, [r7, #4]
}
 8014f08:	bf00      	nop
 8014f0a:	e7fe      	b.n	8014f0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f0c:	4b0d      	ldr	r3, [pc, #52]	; (8014f44 <vPortValidateInterruptPriority+0x74>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f14:	4b0c      	ldr	r3, [pc, #48]	; (8014f48 <vPortValidateInterruptPriority+0x78>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d90a      	bls.n	8014f32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f20:	f383 8811 	msr	BASEPRI, r3
 8014f24:	f3bf 8f6f 	isb	sy
 8014f28:	f3bf 8f4f 	dsb	sy
 8014f2c:	603b      	str	r3, [r7, #0]
}
 8014f2e:	bf00      	nop
 8014f30:	e7fe      	b.n	8014f30 <vPortValidateInterruptPriority+0x60>
	}
 8014f32:	bf00      	nop
 8014f34:	3714      	adds	r7, #20
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bc80      	pop	{r7}
 8014f3a:	4770      	bx	lr
 8014f3c:	e000e3f0 	.word	0xe000e3f0
 8014f40:	20001078 	.word	0x20001078
 8014f44:	e000ed0c 	.word	0xe000ed0c
 8014f48:	2000107c 	.word	0x2000107c

08014f4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b08a      	sub	sp, #40	; 0x28
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f54:	2300      	movs	r3, #0
 8014f56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f58:	f7ff f810 	bl	8013f7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f5c:	4b58      	ldr	r3, [pc, #352]	; (80150c0 <pvPortMalloc+0x174>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d101      	bne.n	8014f68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f64:	f000 f910 	bl	8015188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f68:	4b56      	ldr	r3, [pc, #344]	; (80150c4 <pvPortMalloc+0x178>)
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	4013      	ands	r3, r2
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	f040 808e 	bne.w	8015092 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d01d      	beq.n	8014fb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014f7c:	2208      	movs	r2, #8
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	4413      	add	r3, r2
 8014f82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f003 0307 	and.w	r3, r3, #7
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d014      	beq.n	8014fb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f023 0307 	bic.w	r3, r3, #7
 8014f94:	3308      	adds	r3, #8
 8014f96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f003 0307 	and.w	r3, r3, #7
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00a      	beq.n	8014fb8 <pvPortMalloc+0x6c>
	__asm volatile
 8014fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa6:	f383 8811 	msr	BASEPRI, r3
 8014faa:	f3bf 8f6f 	isb	sy
 8014fae:	f3bf 8f4f 	dsb	sy
 8014fb2:	617b      	str	r3, [r7, #20]
}
 8014fb4:	bf00      	nop
 8014fb6:	e7fe      	b.n	8014fb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d069      	beq.n	8015092 <pvPortMalloc+0x146>
 8014fbe:	4b42      	ldr	r3, [pc, #264]	; (80150c8 <pvPortMalloc+0x17c>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d864      	bhi.n	8015092 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014fc8:	4b40      	ldr	r3, [pc, #256]	; (80150cc <pvPortMalloc+0x180>)
 8014fca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014fcc:	4b3f      	ldr	r3, [pc, #252]	; (80150cc <pvPortMalloc+0x180>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fd2:	e004      	b.n	8014fde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d903      	bls.n	8014ff0 <pvPortMalloc+0xa4>
 8014fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1f1      	bne.n	8014fd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014ff0:	4b33      	ldr	r3, [pc, #204]	; (80150c0 <pvPortMalloc+0x174>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d04b      	beq.n	8015092 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ffa:	6a3b      	ldr	r3, [r7, #32]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2208      	movs	r2, #8
 8015000:	4413      	add	r3, r2
 8015002:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	6a3b      	ldr	r3, [r7, #32]
 801500a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500e:	685a      	ldr	r2, [r3, #4]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	1ad2      	subs	r2, r2, r3
 8015014:	2308      	movs	r3, #8
 8015016:	005b      	lsls	r3, r3, #1
 8015018:	429a      	cmp	r2, r3
 801501a:	d91f      	bls.n	801505c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	4413      	add	r3, r2
 8015022:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	f003 0307 	and.w	r3, r3, #7
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00a      	beq.n	8015044 <pvPortMalloc+0xf8>
	__asm volatile
 801502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015032:	f383 8811 	msr	BASEPRI, r3
 8015036:	f3bf 8f6f 	isb	sy
 801503a:	f3bf 8f4f 	dsb	sy
 801503e:	613b      	str	r3, [r7, #16]
}
 8015040:	bf00      	nop
 8015042:	e7fe      	b.n	8015042 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015046:	685a      	ldr	r2, [r3, #4]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	1ad2      	subs	r2, r2, r3
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015056:	69b8      	ldr	r0, [r7, #24]
 8015058:	f000 f8f8 	bl	801524c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801505c:	4b1a      	ldr	r3, [pc, #104]	; (80150c8 <pvPortMalloc+0x17c>)
 801505e:	681a      	ldr	r2, [r3, #0]
 8015060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	1ad3      	subs	r3, r2, r3
 8015066:	4a18      	ldr	r2, [pc, #96]	; (80150c8 <pvPortMalloc+0x17c>)
 8015068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801506a:	4b17      	ldr	r3, [pc, #92]	; (80150c8 <pvPortMalloc+0x17c>)
 801506c:	681a      	ldr	r2, [r3, #0]
 801506e:	4b18      	ldr	r3, [pc, #96]	; (80150d0 <pvPortMalloc+0x184>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	429a      	cmp	r2, r3
 8015074:	d203      	bcs.n	801507e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015076:	4b14      	ldr	r3, [pc, #80]	; (80150c8 <pvPortMalloc+0x17c>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4a15      	ldr	r2, [pc, #84]	; (80150d0 <pvPortMalloc+0x184>)
 801507c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015080:	685a      	ldr	r2, [r3, #4]
 8015082:	4b10      	ldr	r3, [pc, #64]	; (80150c4 <pvPortMalloc+0x178>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	431a      	orrs	r2, r3
 8015088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508e:	2200      	movs	r2, #0
 8015090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015092:	f7fe ff81 	bl	8013f98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015096:	69fb      	ldr	r3, [r7, #28]
 8015098:	f003 0307 	and.w	r3, r3, #7
 801509c:	2b00      	cmp	r3, #0
 801509e:	d00a      	beq.n	80150b6 <pvPortMalloc+0x16a>
	__asm volatile
 80150a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a4:	f383 8811 	msr	BASEPRI, r3
 80150a8:	f3bf 8f6f 	isb	sy
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	60fb      	str	r3, [r7, #12]
}
 80150b2:	bf00      	nop
 80150b4:	e7fe      	b.n	80150b4 <pvPortMalloc+0x168>
	return pvReturn;
 80150b6:	69fb      	ldr	r3, [r7, #28]
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3728      	adds	r7, #40	; 0x28
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	20001c88 	.word	0x20001c88
 80150c4:	20001c94 	.word	0x20001c94
 80150c8:	20001c8c 	.word	0x20001c8c
 80150cc:	20001c80 	.word	0x20001c80
 80150d0:	20001c90 	.word	0x20001c90

080150d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b086      	sub	sp, #24
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d048      	beq.n	8015178 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80150e6:	2308      	movs	r3, #8
 80150e8:	425b      	negs	r3, r3
 80150ea:	697a      	ldr	r2, [r7, #20]
 80150ec:	4413      	add	r3, r2
 80150ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	685a      	ldr	r2, [r3, #4]
 80150f8:	4b21      	ldr	r3, [pc, #132]	; (8015180 <vPortFree+0xac>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	4013      	ands	r3, r2
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d10a      	bne.n	8015118 <vPortFree+0x44>
	__asm volatile
 8015102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015106:	f383 8811 	msr	BASEPRI, r3
 801510a:	f3bf 8f6f 	isb	sy
 801510e:	f3bf 8f4f 	dsb	sy
 8015112:	60fb      	str	r3, [r7, #12]
}
 8015114:	bf00      	nop
 8015116:	e7fe      	b.n	8015116 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00a      	beq.n	8015136 <vPortFree+0x62>
	__asm volatile
 8015120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015124:	f383 8811 	msr	BASEPRI, r3
 8015128:	f3bf 8f6f 	isb	sy
 801512c:	f3bf 8f4f 	dsb	sy
 8015130:	60bb      	str	r3, [r7, #8]
}
 8015132:	bf00      	nop
 8015134:	e7fe      	b.n	8015134 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	685a      	ldr	r2, [r3, #4]
 801513a:	4b11      	ldr	r3, [pc, #68]	; (8015180 <vPortFree+0xac>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	4013      	ands	r3, r2
 8015140:	2b00      	cmp	r3, #0
 8015142:	d019      	beq.n	8015178 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d115      	bne.n	8015178 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	685a      	ldr	r2, [r3, #4]
 8015150:	4b0b      	ldr	r3, [pc, #44]	; (8015180 <vPortFree+0xac>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	43db      	mvns	r3, r3
 8015156:	401a      	ands	r2, r3
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801515c:	f7fe ff0e 	bl	8013f7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	685a      	ldr	r2, [r3, #4]
 8015164:	4b07      	ldr	r3, [pc, #28]	; (8015184 <vPortFree+0xb0>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4413      	add	r3, r2
 801516a:	4a06      	ldr	r2, [pc, #24]	; (8015184 <vPortFree+0xb0>)
 801516c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801516e:	6938      	ldr	r0, [r7, #16]
 8015170:	f000 f86c 	bl	801524c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015174:	f7fe ff10 	bl	8013f98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015178:	bf00      	nop
 801517a:	3718      	adds	r7, #24
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	20001c94 	.word	0x20001c94
 8015184:	20001c8c 	.word	0x20001c8c

08015188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015188:	b480      	push	{r7}
 801518a:	b085      	sub	sp, #20
 801518c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801518e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015194:	4b27      	ldr	r3, [pc, #156]	; (8015234 <prvHeapInit+0xac>)
 8015196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	f003 0307 	and.w	r3, r3, #7
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00c      	beq.n	80151bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	3307      	adds	r3, #7
 80151a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f023 0307 	bic.w	r3, r3, #7
 80151ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151b0:	68ba      	ldr	r2, [r7, #8]
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	4a1f      	ldr	r2, [pc, #124]	; (8015234 <prvHeapInit+0xac>)
 80151b8:	4413      	add	r3, r2
 80151ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151c0:	4a1d      	ldr	r2, [pc, #116]	; (8015238 <prvHeapInit+0xb0>)
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80151c6:	4b1c      	ldr	r3, [pc, #112]	; (8015238 <prvHeapInit+0xb0>)
 80151c8:	2200      	movs	r2, #0
 80151ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	68ba      	ldr	r2, [r7, #8]
 80151d0:	4413      	add	r3, r2
 80151d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80151d4:	2208      	movs	r2, #8
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	1a9b      	subs	r3, r3, r2
 80151da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	f023 0307 	bic.w	r3, r3, #7
 80151e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	4a15      	ldr	r2, [pc, #84]	; (801523c <prvHeapInit+0xb4>)
 80151e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80151ea:	4b14      	ldr	r3, [pc, #80]	; (801523c <prvHeapInit+0xb4>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2200      	movs	r2, #0
 80151f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80151f2:	4b12      	ldr	r3, [pc, #72]	; (801523c <prvHeapInit+0xb4>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	2200      	movs	r2, #0
 80151f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	68fa      	ldr	r2, [r7, #12]
 8015202:	1ad2      	subs	r2, r2, r3
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015208:	4b0c      	ldr	r3, [pc, #48]	; (801523c <prvHeapInit+0xb4>)
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	4a0a      	ldr	r2, [pc, #40]	; (8015240 <prvHeapInit+0xb8>)
 8015216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	4a09      	ldr	r2, [pc, #36]	; (8015244 <prvHeapInit+0xbc>)
 801521e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015220:	4b09      	ldr	r3, [pc, #36]	; (8015248 <prvHeapInit+0xc0>)
 8015222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015226:	601a      	str	r2, [r3, #0]
}
 8015228:	bf00      	nop
 801522a:	3714      	adds	r7, #20
 801522c:	46bd      	mov	sp, r7
 801522e:	bc80      	pop	{r7}
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	20001080 	.word	0x20001080
 8015238:	20001c80 	.word	0x20001c80
 801523c:	20001c88 	.word	0x20001c88
 8015240:	20001c90 	.word	0x20001c90
 8015244:	20001c8c 	.word	0x20001c8c
 8015248:	20001c94 	.word	0x20001c94

0801524c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801524c:	b480      	push	{r7}
 801524e:	b085      	sub	sp, #20
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015254:	4b27      	ldr	r3, [pc, #156]	; (80152f4 <prvInsertBlockIntoFreeList+0xa8>)
 8015256:	60fb      	str	r3, [r7, #12]
 8015258:	e002      	b.n	8015260 <prvInsertBlockIntoFreeList+0x14>
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	60fb      	str	r3, [r7, #12]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	429a      	cmp	r2, r3
 8015268:	d8f7      	bhi.n	801525a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	68ba      	ldr	r2, [r7, #8]
 8015274:	4413      	add	r3, r2
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	429a      	cmp	r2, r3
 801527a:	d108      	bne.n	801528e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	685a      	ldr	r2, [r3, #4]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	441a      	add	r2, r3
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	441a      	add	r2, r3
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d118      	bne.n	80152d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681a      	ldr	r2, [r3, #0]
 80152a6:	4b14      	ldr	r3, [pc, #80]	; (80152f8 <prvInsertBlockIntoFreeList+0xac>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d00d      	beq.n	80152ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	685a      	ldr	r2, [r3, #4]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	441a      	add	r2, r3
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	681a      	ldr	r2, [r3, #0]
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	601a      	str	r2, [r3, #0]
 80152c8:	e008      	b.n	80152dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80152ca:	4b0b      	ldr	r3, [pc, #44]	; (80152f8 <prvInsertBlockIntoFreeList+0xac>)
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	601a      	str	r2, [r3, #0]
 80152d2:	e003      	b.n	80152dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80152dc:	68fa      	ldr	r2, [r7, #12]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d002      	beq.n	80152ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152ea:	bf00      	nop
 80152ec:	3714      	adds	r7, #20
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bc80      	pop	{r7}
 80152f2:	4770      	bx	lr
 80152f4:	20001c80 	.word	0x20001c80
 80152f8:	20001c88 	.word	0x20001c88

080152fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015300:	2200      	movs	r2, #0
 8015302:	4912      	ldr	r1, [pc, #72]	; (801534c <MX_USB_DEVICE_Init+0x50>)
 8015304:	4812      	ldr	r0, [pc, #72]	; (8015350 <MX_USB_DEVICE_Init+0x54>)
 8015306:	f7f9 ffb5 	bl	800f274 <USBD_Init>
 801530a:	4603      	mov	r3, r0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d001      	beq.n	8015314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015310:	f7ed feac 	bl	800306c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8015314:	490f      	ldr	r1, [pc, #60]	; (8015354 <MX_USB_DEVICE_Init+0x58>)
 8015316:	480e      	ldr	r0, [pc, #56]	; (8015350 <MX_USB_DEVICE_Init+0x54>)
 8015318:	f7f9 ffd7 	bl	800f2ca <USBD_RegisterClass>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d001      	beq.n	8015326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015322:	f7ed fea3 	bl	800306c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8015326:	490c      	ldr	r1, [pc, #48]	; (8015358 <MX_USB_DEVICE_Init+0x5c>)
 8015328:	4809      	ldr	r0, [pc, #36]	; (8015350 <MX_USB_DEVICE_Init+0x54>)
 801532a:	f7f9 ff8d 	bl	800f248 <USBD_CUSTOM_HID_RegisterInterface>
 801532e:	4603      	mov	r3, r0
 8015330:	2b00      	cmp	r3, #0
 8015332:	d001      	beq.n	8015338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015334:	f7ed fe9a 	bl	800306c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015338:	4805      	ldr	r0, [pc, #20]	; (8015350 <MX_USB_DEVICE_Init+0x54>)
 801533a:	f7f9 ffdf 	bl	800f2fc <USBD_Start>
 801533e:	4603      	mov	r3, r0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d001      	beq.n	8015348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015344:	f7ed fe92 	bl	800306c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015348:	bf00      	nop
 801534a:	bd80      	pop	{r7, pc}
 801534c:	20000068 	.word	0x20000068
 8015350:	20001c98 	.word	0x20001c98
 8015354:	20000028 	.word	0x20000028
 8015358:	20001f60 	.word	0x20001f60

0801535c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	4603      	mov	r3, r0
 8015364:	6039      	str	r1, [r7, #0]
 8015366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	2212      	movs	r2, #18
 801536c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801536e:	4b03      	ldr	r3, [pc, #12]	; (801537c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015370:	4618      	mov	r0, r3
 8015372:	370c      	adds	r7, #12
 8015374:	46bd      	mov	sp, r7
 8015376:	bc80      	pop	{r7}
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop
 801537c:	20000084 	.word	0x20000084

08015380 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015380:	b480      	push	{r7}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
 8015386:	4603      	mov	r3, r0
 8015388:	6039      	str	r1, [r7, #0]
 801538a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	2204      	movs	r2, #4
 8015390:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015392:	4b03      	ldr	r3, [pc, #12]	; (80153a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015394:	4618      	mov	r0, r3
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	bc80      	pop	{r7}
 801539c:	4770      	bx	lr
 801539e:	bf00      	nop
 80153a0:	20000098 	.word	0x20000098

080153a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	4603      	mov	r3, r0
 80153ac:	6039      	str	r1, [r7, #0]
 80153ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153b0:	79fb      	ldrb	r3, [r7, #7]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d105      	bne.n	80153c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80153b6:	683a      	ldr	r2, [r7, #0]
 80153b8:	4907      	ldr	r1, [pc, #28]	; (80153d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80153ba:	4808      	ldr	r0, [pc, #32]	; (80153dc <USBD_FS_ProductStrDescriptor+0x38>)
 80153bc:	f7fa ff16 	bl	80101ec <USBD_GetString>
 80153c0:	e004      	b.n	80153cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80153c2:	683a      	ldr	r2, [r7, #0]
 80153c4:	4904      	ldr	r1, [pc, #16]	; (80153d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80153c6:	4805      	ldr	r0, [pc, #20]	; (80153dc <USBD_FS_ProductStrDescriptor+0x38>)
 80153c8:	f7fa ff10 	bl	80101ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80153cc:	4b02      	ldr	r3, [pc, #8]	; (80153d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	20001f70 	.word	0x20001f70
 80153dc:	08018b8c 	.word	0x08018b8c

080153e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	4603      	mov	r3, r0
 80153e8:	6039      	str	r1, [r7, #0]
 80153ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80153ec:	683a      	ldr	r2, [r7, #0]
 80153ee:	4904      	ldr	r1, [pc, #16]	; (8015400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80153f0:	4804      	ldr	r0, [pc, #16]	; (8015404 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80153f2:	f7fa fefb 	bl	80101ec <USBD_GetString>
  return USBD_StrDesc;
 80153f6:	4b02      	ldr	r3, [pc, #8]	; (8015400 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	20001f70 	.word	0x20001f70
 8015404:	08018bac 	.word	0x08018bac

08015408 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	4603      	mov	r3, r0
 8015410:	6039      	str	r1, [r7, #0]
 8015412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	221a      	movs	r2, #26
 8015418:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801541a:	f000 f843 	bl	80154a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801541e:	4b02      	ldr	r3, [pc, #8]	; (8015428 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015420:	4618      	mov	r0, r3
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	2000009c 	.word	0x2000009c

0801542c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	4603      	mov	r3, r0
 8015434:	6039      	str	r1, [r7, #0]
 8015436:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015438:	79fb      	ldrb	r3, [r7, #7]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d105      	bne.n	801544a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801543e:	683a      	ldr	r2, [r7, #0]
 8015440:	4907      	ldr	r1, [pc, #28]	; (8015460 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015442:	4808      	ldr	r0, [pc, #32]	; (8015464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015444:	f7fa fed2 	bl	80101ec <USBD_GetString>
 8015448:	e004      	b.n	8015454 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	4904      	ldr	r1, [pc, #16]	; (8015460 <USBD_FS_ConfigStrDescriptor+0x34>)
 801544e:	4805      	ldr	r0, [pc, #20]	; (8015464 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015450:	f7fa fecc 	bl	80101ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8015454:	4b02      	ldr	r3, [pc, #8]	; (8015460 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015456:	4618      	mov	r0, r3
 8015458:	3708      	adds	r7, #8
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	20001f70 	.word	0x20001f70
 8015464:	08018bc0 	.word	0x08018bc0

08015468 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	4603      	mov	r3, r0
 8015470:	6039      	str	r1, [r7, #0]
 8015472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015474:	79fb      	ldrb	r3, [r7, #7]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d105      	bne.n	8015486 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801547a:	683a      	ldr	r2, [r7, #0]
 801547c:	4907      	ldr	r1, [pc, #28]	; (801549c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801547e:	4808      	ldr	r0, [pc, #32]	; (80154a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015480:	f7fa feb4 	bl	80101ec <USBD_GetString>
 8015484:	e004      	b.n	8015490 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015486:	683a      	ldr	r2, [r7, #0]
 8015488:	4904      	ldr	r1, [pc, #16]	; (801549c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801548a:	4805      	ldr	r0, [pc, #20]	; (80154a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801548c:	f7fa feae 	bl	80101ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8015490:	4b02      	ldr	r3, [pc, #8]	; (801549c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015492:	4618      	mov	r0, r3
 8015494:	3708      	adds	r7, #8
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	20001f70 	.word	0x20001f70
 80154a0:	08018bd4 	.word	0x08018bd4

080154a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80154aa:	4b0f      	ldr	r3, [pc, #60]	; (80154e8 <Get_SerialNum+0x44>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80154b0:	4b0e      	ldr	r3, [pc, #56]	; (80154ec <Get_SerialNum+0x48>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80154b6:	4b0e      	ldr	r3, [pc, #56]	; (80154f0 <Get_SerialNum+0x4c>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80154bc:	68fa      	ldr	r2, [r7, #12]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	4413      	add	r3, r2
 80154c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d009      	beq.n	80154de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80154ca:	2208      	movs	r2, #8
 80154cc:	4909      	ldr	r1, [pc, #36]	; (80154f4 <Get_SerialNum+0x50>)
 80154ce:	68f8      	ldr	r0, [r7, #12]
 80154d0:	f000 f814 	bl	80154fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80154d4:	2204      	movs	r2, #4
 80154d6:	4908      	ldr	r1, [pc, #32]	; (80154f8 <Get_SerialNum+0x54>)
 80154d8:	68b8      	ldr	r0, [r7, #8]
 80154da:	f000 f80f 	bl	80154fc <IntToUnicode>
  }
}
 80154de:	bf00      	nop
 80154e0:	3710      	adds	r7, #16
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	1ffff7e8 	.word	0x1ffff7e8
 80154ec:	1ffff7ec 	.word	0x1ffff7ec
 80154f0:	1ffff7f0 	.word	0x1ffff7f0
 80154f4:	2000009e 	.word	0x2000009e
 80154f8:	200000ae 	.word	0x200000ae

080154fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b087      	sub	sp, #28
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	4613      	mov	r3, r2
 8015508:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801550a:	2300      	movs	r3, #0
 801550c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801550e:	2300      	movs	r3, #0
 8015510:	75fb      	strb	r3, [r7, #23]
 8015512:	e027      	b.n	8015564 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	0f1b      	lsrs	r3, r3, #28
 8015518:	2b09      	cmp	r3, #9
 801551a:	d80b      	bhi.n	8015534 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	0f1b      	lsrs	r3, r3, #28
 8015520:	b2da      	uxtb	r2, r3
 8015522:	7dfb      	ldrb	r3, [r7, #23]
 8015524:	005b      	lsls	r3, r3, #1
 8015526:	4619      	mov	r1, r3
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	440b      	add	r3, r1
 801552c:	3230      	adds	r2, #48	; 0x30
 801552e:	b2d2      	uxtb	r2, r2
 8015530:	701a      	strb	r2, [r3, #0]
 8015532:	e00a      	b.n	801554a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	0f1b      	lsrs	r3, r3, #28
 8015538:	b2da      	uxtb	r2, r3
 801553a:	7dfb      	ldrb	r3, [r7, #23]
 801553c:	005b      	lsls	r3, r3, #1
 801553e:	4619      	mov	r1, r3
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	440b      	add	r3, r1
 8015544:	3237      	adds	r2, #55	; 0x37
 8015546:	b2d2      	uxtb	r2, r2
 8015548:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	011b      	lsls	r3, r3, #4
 801554e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015550:	7dfb      	ldrb	r3, [r7, #23]
 8015552:	005b      	lsls	r3, r3, #1
 8015554:	3301      	adds	r3, #1
 8015556:	68ba      	ldr	r2, [r7, #8]
 8015558:	4413      	add	r3, r2
 801555a:	2200      	movs	r2, #0
 801555c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801555e:	7dfb      	ldrb	r3, [r7, #23]
 8015560:	3301      	adds	r3, #1
 8015562:	75fb      	strb	r3, [r7, #23]
 8015564:	7dfa      	ldrb	r2, [r7, #23]
 8015566:	79fb      	ldrb	r3, [r7, #7]
 8015568:	429a      	cmp	r2, r3
 801556a:	d3d3      	bcc.n	8015514 <IntToUnicode+0x18>
  }
}
 801556c:	bf00      	nop
 801556e:	bf00      	nop
 8015570:	371c      	adds	r7, #28
 8015572:	46bd      	mov	sp, r7
 8015574:	bc80      	pop	{r7}
 8015576:	4770      	bx	lr

08015578 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4a0d      	ldr	r2, [pc, #52]	; (80155bc <HAL_PCD_MspInit+0x44>)
 8015586:	4293      	cmp	r3, r2
 8015588:	d113      	bne.n	80155b2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801558a:	4b0d      	ldr	r3, [pc, #52]	; (80155c0 <HAL_PCD_MspInit+0x48>)
 801558c:	69db      	ldr	r3, [r3, #28]
 801558e:	4a0c      	ldr	r2, [pc, #48]	; (80155c0 <HAL_PCD_MspInit+0x48>)
 8015590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015594:	61d3      	str	r3, [r2, #28]
 8015596:	4b0a      	ldr	r3, [pc, #40]	; (80155c0 <HAL_PCD_MspInit+0x48>)
 8015598:	69db      	ldr	r3, [r3, #28]
 801559a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801559e:	60fb      	str	r3, [r7, #12]
 80155a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80155a2:	2200      	movs	r2, #0
 80155a4:	2105      	movs	r1, #5
 80155a6:	2014      	movs	r0, #20
 80155a8:	f7ee fe75 	bl	8004296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80155ac:	2014      	movs	r0, #20
 80155ae:	f7ee fe8e 	bl	80042ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80155b2:	bf00      	nop
 80155b4:	3710      	adds	r7, #16
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	40005c00 	.word	0x40005c00
 80155c0:	40021000 	.word	0x40021000

080155c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80155d8:	4619      	mov	r1, r3
 80155da:	4610      	mov	r0, r2
 80155dc:	f7f9 fed6 	bl	800f38c <USBD_LL_SetupStage>
}
 80155e0:	bf00      	nop
 80155e2:	3708      	adds	r7, #8
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}

080155e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	460b      	mov	r3, r1
 80155f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80155fa:	78fa      	ldrb	r2, [r7, #3]
 80155fc:	6879      	ldr	r1, [r7, #4]
 80155fe:	4613      	mov	r3, r2
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	4413      	add	r3, r2
 8015604:	00db      	lsls	r3, r3, #3
 8015606:	440b      	add	r3, r1
 8015608:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	78fb      	ldrb	r3, [r7, #3]
 8015610:	4619      	mov	r1, r3
 8015612:	f7f9 ff08 	bl	800f426 <USBD_LL_DataOutStage>
}
 8015616:	bf00      	nop
 8015618:	3708      	adds	r7, #8
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}

0801561e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801561e:	b580      	push	{r7, lr}
 8015620:	b082      	sub	sp, #8
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
 8015626:	460b      	mov	r3, r1
 8015628:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8015630:	78fa      	ldrb	r2, [r7, #3]
 8015632:	6879      	ldr	r1, [r7, #4]
 8015634:	4613      	mov	r3, r2
 8015636:	009b      	lsls	r3, r3, #2
 8015638:	4413      	add	r3, r2
 801563a:	00db      	lsls	r3, r3, #3
 801563c:	440b      	add	r3, r1
 801563e:	333c      	adds	r3, #60	; 0x3c
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	78fb      	ldrb	r3, [r7, #3]
 8015644:	4619      	mov	r1, r3
 8015646:	f7f9 ff5f 	bl	800f508 <USBD_LL_DataInStage>
}
 801564a:	bf00      	nop
 801564c:	3708      	adds	r7, #8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015652:	b580      	push	{r7, lr}
 8015654:	b082      	sub	sp, #8
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015660:	4618      	mov	r0, r3
 8015662:	f7fa f86f 	bl	800f744 <USBD_LL_SOF>
}
 8015666:	bf00      	nop
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b084      	sub	sp, #16
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015676:	2301      	movs	r3, #1
 8015678:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	689b      	ldr	r3, [r3, #8]
 801567e:	2b02      	cmp	r3, #2
 8015680:	d001      	beq.n	8015686 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015682:	f7ed fcf3 	bl	800306c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801568c:	7bfa      	ldrb	r2, [r7, #15]
 801568e:	4611      	mov	r1, r2
 8015690:	4618      	mov	r0, r3
 8015692:	f7fa f81f 	bl	800f6d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801569c:	4618      	mov	r0, r3
 801569e:	f7f9 ffd8 	bl	800f652 <USBD_LL_Reset>
}
 80156a2:	bf00      	nop
 80156a4:	3710      	adds	r7, #16
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
	...

080156ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7fa f819 	bl	800f6f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	699b      	ldr	r3, [r3, #24]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d005      	beq.n	80156d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156c8:	4b04      	ldr	r3, [pc, #16]	; (80156dc <HAL_PCD_SuspendCallback+0x30>)
 80156ca:	691b      	ldr	r3, [r3, #16]
 80156cc:	4a03      	ldr	r2, [pc, #12]	; (80156dc <HAL_PCD_SuspendCallback+0x30>)
 80156ce:	f043 0306 	orr.w	r3, r3, #6
 80156d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80156d4:	bf00      	nop
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	e000ed00 	.word	0xe000ed00

080156e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b082      	sub	sp, #8
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7fa f813 	bl	800f71a <USBD_LL_Resume>
}
 80156f4:	bf00      	nop
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015704:	4a23      	ldr	r2, [pc, #140]	; (8015794 <USBD_LL_Init+0x98>)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	4a21      	ldr	r2, [pc, #132]	; (8015794 <USBD_LL_Init+0x98>)
 8015710:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8015714:	4b1f      	ldr	r3, [pc, #124]	; (8015794 <USBD_LL_Init+0x98>)
 8015716:	4a20      	ldr	r2, [pc, #128]	; (8015798 <USBD_LL_Init+0x9c>)
 8015718:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801571a:	4b1e      	ldr	r3, [pc, #120]	; (8015794 <USBD_LL_Init+0x98>)
 801571c:	2208      	movs	r2, #8
 801571e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015720:	4b1c      	ldr	r3, [pc, #112]	; (8015794 <USBD_LL_Init+0x98>)
 8015722:	2202      	movs	r2, #2
 8015724:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015726:	4b1b      	ldr	r3, [pc, #108]	; (8015794 <USBD_LL_Init+0x98>)
 8015728:	2200      	movs	r2, #0
 801572a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801572c:	4b19      	ldr	r3, [pc, #100]	; (8015794 <USBD_LL_Init+0x98>)
 801572e:	2200      	movs	r2, #0
 8015730:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015732:	4b18      	ldr	r3, [pc, #96]	; (8015794 <USBD_LL_Init+0x98>)
 8015734:	2200      	movs	r2, #0
 8015736:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015738:	4816      	ldr	r0, [pc, #88]	; (8015794 <USBD_LL_Init+0x98>)
 801573a:	f7f0 ffc6 	bl	80066ca <HAL_PCD_Init>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d001      	beq.n	8015748 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8015744:	f7ed fc92 	bl	800306c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801574e:	2318      	movs	r3, #24
 8015750:	2200      	movs	r2, #0
 8015752:	2100      	movs	r1, #0
 8015754:	f7f2 fcce 	bl	80080f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801575e:	2358      	movs	r3, #88	; 0x58
 8015760:	2200      	movs	r2, #0
 8015762:	2180      	movs	r1, #128	; 0x80
 8015764:	f7f2 fcc6 	bl	80080f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801576e:	2398      	movs	r3, #152	; 0x98
 8015770:	2200      	movs	r2, #0
 8015772:	2181      	movs	r1, #129	; 0x81
 8015774:	f7f2 fcbe 	bl	80080f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801577e:	23d8      	movs	r3, #216	; 0xd8
 8015780:	2200      	movs	r2, #0
 8015782:	2101      	movs	r1, #1
 8015784:	f7f2 fcb6 	bl	80080f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8015788:	2300      	movs	r3, #0
}
 801578a:	4618      	mov	r0, r3
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	20002170 	.word	0x20002170
 8015798:	40005c00 	.word	0x40005c00

0801579c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157a4:	2300      	movs	r3, #0
 80157a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157a8:	2300      	movs	r3, #0
 80157aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7f1 f888 	bl	80068c8 <HAL_PCD_Start>
 80157b8:	4603      	mov	r3, r0
 80157ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157bc:	7bfb      	ldrb	r3, [r7, #15]
 80157be:	4618      	mov	r0, r3
 80157c0:	f000 f93c 	bl	8015a3c <USBD_Get_USB_Status>
 80157c4:	4603      	mov	r3, r0
 80157c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3710      	adds	r7, #16
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80157d2:	b580      	push	{r7, lr}
 80157d4:	b084      	sub	sp, #16
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]
 80157da:	4608      	mov	r0, r1
 80157dc:	4611      	mov	r1, r2
 80157de:	461a      	mov	r2, r3
 80157e0:	4603      	mov	r3, r0
 80157e2:	70fb      	strb	r3, [r7, #3]
 80157e4:	460b      	mov	r3, r1
 80157e6:	70bb      	strb	r3, [r7, #2]
 80157e8:	4613      	mov	r3, r2
 80157ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157ec:	2300      	movs	r3, #0
 80157ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157f0:	2300      	movs	r3, #0
 80157f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80157fa:	78bb      	ldrb	r3, [r7, #2]
 80157fc:	883a      	ldrh	r2, [r7, #0]
 80157fe:	78f9      	ldrb	r1, [r7, #3]
 8015800:	f7f1 f9dd 	bl	8006bbe <HAL_PCD_EP_Open>
 8015804:	4603      	mov	r3, r0
 8015806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015808:	7bfb      	ldrb	r3, [r7, #15]
 801580a:	4618      	mov	r0, r3
 801580c:	f000 f916 	bl	8015a3c <USBD_Get_USB_Status>
 8015810:	4603      	mov	r3, r0
 8015812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015814:	7bbb      	ldrb	r3, [r7, #14]
}
 8015816:	4618      	mov	r0, r3
 8015818:	3710      	adds	r7, #16
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b084      	sub	sp, #16
 8015822:	af00      	add	r7, sp, #0
 8015824:	6078      	str	r0, [r7, #4]
 8015826:	460b      	mov	r3, r1
 8015828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801582a:	2300      	movs	r3, #0
 801582c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801582e:	2300      	movs	r3, #0
 8015830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015838:	78fa      	ldrb	r2, [r7, #3]
 801583a:	4611      	mov	r1, r2
 801583c:	4618      	mov	r0, r3
 801583e:	f7f1 fa1b 	bl	8006c78 <HAL_PCD_EP_Close>
 8015842:	4603      	mov	r3, r0
 8015844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015846:	7bfb      	ldrb	r3, [r7, #15]
 8015848:	4618      	mov	r0, r3
 801584a:	f000 f8f7 	bl	8015a3c <USBD_Get_USB_Status>
 801584e:	4603      	mov	r3, r0
 8015850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015852:	7bbb      	ldrb	r3, [r7, #14]
}
 8015854:	4618      	mov	r0, r3
 8015856:	3710      	adds	r7, #16
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	460b      	mov	r3, r1
 8015866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015868:	2300      	movs	r3, #0
 801586a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801586c:	2300      	movs	r3, #0
 801586e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015876:	78fa      	ldrb	r2, [r7, #3]
 8015878:	4611      	mov	r1, r2
 801587a:	4618      	mov	r0, r3
 801587c:	f7f1 faac 	bl	8006dd8 <HAL_PCD_EP_SetStall>
 8015880:	4603      	mov	r3, r0
 8015882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015884:	7bfb      	ldrb	r3, [r7, #15]
 8015886:	4618      	mov	r0, r3
 8015888:	f000 f8d8 	bl	8015a3c <USBD_Get_USB_Status>
 801588c:	4603      	mov	r3, r0
 801588e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015890:	7bbb      	ldrb	r3, [r7, #14]
}
 8015892:	4618      	mov	r0, r3
 8015894:	3710      	adds	r7, #16
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}

0801589a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801589a:	b580      	push	{r7, lr}
 801589c:	b084      	sub	sp, #16
 801589e:	af00      	add	r7, sp, #0
 80158a0:	6078      	str	r0, [r7, #4]
 80158a2:	460b      	mov	r3, r1
 80158a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158a6:	2300      	movs	r3, #0
 80158a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158aa:	2300      	movs	r3, #0
 80158ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158b4:	78fa      	ldrb	r2, [r7, #3]
 80158b6:	4611      	mov	r1, r2
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7f1 faed 	bl	8006e98 <HAL_PCD_EP_ClrStall>
 80158be:	4603      	mov	r3, r0
 80158c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158c2:	7bfb      	ldrb	r3, [r7, #15]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f000 f8b9 	bl	8015a3c <USBD_Get_USB_Status>
 80158ca:	4603      	mov	r3, r0
 80158cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3710      	adds	r7, #16
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}

080158d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158d8:	b480      	push	{r7}
 80158da:	b085      	sub	sp, #20
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	460b      	mov	r3, r1
 80158e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80158ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80158ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	da0c      	bge.n	801590e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80158f4:	78fb      	ldrb	r3, [r7, #3]
 80158f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158fa:	68f9      	ldr	r1, [r7, #12]
 80158fc:	1c5a      	adds	r2, r3, #1
 80158fe:	4613      	mov	r3, r2
 8015900:	009b      	lsls	r3, r3, #2
 8015902:	4413      	add	r3, r2
 8015904:	00db      	lsls	r3, r3, #3
 8015906:	440b      	add	r3, r1
 8015908:	3302      	adds	r3, #2
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	e00b      	b.n	8015926 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801590e:	78fb      	ldrb	r3, [r7, #3]
 8015910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015914:	68f9      	ldr	r1, [r7, #12]
 8015916:	4613      	mov	r3, r2
 8015918:	009b      	lsls	r3, r3, #2
 801591a:	4413      	add	r3, r2
 801591c:	00db      	lsls	r3, r3, #3
 801591e:	440b      	add	r3, r1
 8015920:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015924:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015926:	4618      	mov	r0, r3
 8015928:	3714      	adds	r7, #20
 801592a:	46bd      	mov	sp, r7
 801592c:	bc80      	pop	{r7}
 801592e:	4770      	bx	lr

08015930 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
 8015938:	460b      	mov	r3, r1
 801593a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801593c:	2300      	movs	r3, #0
 801593e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015940:	2300      	movs	r3, #0
 8015942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801594a:	78fa      	ldrb	r2, [r7, #3]
 801594c:	4611      	mov	r1, r2
 801594e:	4618      	mov	r0, r3
 8015950:	f7f1 f910 	bl	8006b74 <HAL_PCD_SetAddress>
 8015954:	4603      	mov	r3, r0
 8015956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015958:	7bfb      	ldrb	r3, [r7, #15]
 801595a:	4618      	mov	r0, r3
 801595c:	f000 f86e 	bl	8015a3c <USBD_Get_USB_Status>
 8015960:	4603      	mov	r3, r0
 8015962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015964:	7bbb      	ldrb	r3, [r7, #14]
}
 8015966:	4618      	mov	r0, r3
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}

0801596e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801596e:	b580      	push	{r7, lr}
 8015970:	b086      	sub	sp, #24
 8015972:	af00      	add	r7, sp, #0
 8015974:	60f8      	str	r0, [r7, #12]
 8015976:	607a      	str	r2, [r7, #4]
 8015978:	461a      	mov	r2, r3
 801597a:	460b      	mov	r3, r1
 801597c:	72fb      	strb	r3, [r7, #11]
 801597e:	4613      	mov	r3, r2
 8015980:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015982:	2300      	movs	r3, #0
 8015984:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015986:	2300      	movs	r3, #0
 8015988:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015990:	893b      	ldrh	r3, [r7, #8]
 8015992:	7af9      	ldrb	r1, [r7, #11]
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	f7f1 f9e8 	bl	8006d6a <HAL_PCD_EP_Transmit>
 801599a:	4603      	mov	r3, r0
 801599c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801599e:	7dfb      	ldrb	r3, [r7, #23]
 80159a0:	4618      	mov	r0, r3
 80159a2:	f000 f84b 	bl	8015a3c <USBD_Get_USB_Status>
 80159a6:	4603      	mov	r3, r0
 80159a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3718      	adds	r7, #24
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b086      	sub	sp, #24
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	60f8      	str	r0, [r7, #12]
 80159bc:	607a      	str	r2, [r7, #4]
 80159be:	461a      	mov	r2, r3
 80159c0:	460b      	mov	r3, r1
 80159c2:	72fb      	strb	r3, [r7, #11]
 80159c4:	4613      	mov	r3, r2
 80159c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159c8:	2300      	movs	r3, #0
 80159ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159cc:	2300      	movs	r3, #0
 80159ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80159d6:	893b      	ldrh	r3, [r7, #8]
 80159d8:	7af9      	ldrb	r1, [r7, #11]
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	f7f1 f994 	bl	8006d08 <HAL_PCD_EP_Receive>
 80159e0:	4603      	mov	r3, r0
 80159e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159e4:	7dfb      	ldrb	r3, [r7, #23]
 80159e6:	4618      	mov	r0, r3
 80159e8:	f000 f828 	bl	8015a3c <USBD_Get_USB_Status>
 80159ec:	4603      	mov	r3, r0
 80159ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3718      	adds	r7, #24
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
	...

080159fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8015a04:	4b02      	ldr	r3, [pc, #8]	; (8015a10 <USBD_static_malloc+0x14>)
}
 8015a06:	4618      	mov	r0, r3
 8015a08:	370c      	adds	r7, #12
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bc80      	pop	{r7}
 8015a0e:	4770      	bx	lr
 8015a10:	20002460 	.word	0x20002460

08015a14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]

}
 8015a1c:	bf00      	nop
 8015a1e:	370c      	adds	r7, #12
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bc80      	pop	{r7}
 8015a24:	4770      	bx	lr

08015a26 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a26:	b480      	push	{r7}
 8015a28:	b083      	sub	sp, #12
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
 8015a2e:	460b      	mov	r3, r1
 8015a30:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8015a32:	bf00      	nop
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bc80      	pop	{r7}
 8015a3a:	4770      	bx	lr

08015a3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	4603      	mov	r3, r0
 8015a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a46:	2300      	movs	r3, #0
 8015a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a4a:	79fb      	ldrb	r3, [r7, #7]
 8015a4c:	2b03      	cmp	r3, #3
 8015a4e:	d817      	bhi.n	8015a80 <USBD_Get_USB_Status+0x44>
 8015a50:	a201      	add	r2, pc, #4	; (adr r2, 8015a58 <USBD_Get_USB_Status+0x1c>)
 8015a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a56:	bf00      	nop
 8015a58:	08015a69 	.word	0x08015a69
 8015a5c:	08015a6f 	.word	0x08015a6f
 8015a60:	08015a75 	.word	0x08015a75
 8015a64:	08015a7b 	.word	0x08015a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a6c:	e00b      	b.n	8015a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a6e:	2302      	movs	r3, #2
 8015a70:	73fb      	strb	r3, [r7, #15]
    break;
 8015a72:	e008      	b.n	8015a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a74:	2301      	movs	r3, #1
 8015a76:	73fb      	strb	r3, [r7, #15]
    break;
 8015a78:	e005      	b.n	8015a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a7a:	2302      	movs	r3, #2
 8015a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8015a7e:	e002      	b.n	8015a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015a80:	2302      	movs	r3, #2
 8015a82:	73fb      	strb	r3, [r7, #15]
    break;
 8015a84:	bf00      	nop
  }
  return usb_status;
 8015a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	3714      	adds	r7, #20
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bc80      	pop	{r7}
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop

08015a94 <__errno>:
 8015a94:	4b01      	ldr	r3, [pc, #4]	; (8015a9c <__errno+0x8>)
 8015a96:	6818      	ldr	r0, [r3, #0]
 8015a98:	4770      	bx	lr
 8015a9a:	bf00      	nop
 8015a9c:	200000b8 	.word	0x200000b8

08015aa0 <std>:
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	b510      	push	{r4, lr}
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8015aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015aae:	6083      	str	r3, [r0, #8]
 8015ab0:	8181      	strh	r1, [r0, #12]
 8015ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8015ab4:	81c2      	strh	r2, [r0, #14]
 8015ab6:	6183      	str	r3, [r0, #24]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	2208      	movs	r2, #8
 8015abc:	305c      	adds	r0, #92	; 0x5c
 8015abe:	f000 f92b 	bl	8015d18 <memset>
 8015ac2:	4b05      	ldr	r3, [pc, #20]	; (8015ad8 <std+0x38>)
 8015ac4:	6224      	str	r4, [r4, #32]
 8015ac6:	6263      	str	r3, [r4, #36]	; 0x24
 8015ac8:	4b04      	ldr	r3, [pc, #16]	; (8015adc <std+0x3c>)
 8015aca:	62a3      	str	r3, [r4, #40]	; 0x28
 8015acc:	4b04      	ldr	r3, [pc, #16]	; (8015ae0 <std+0x40>)
 8015ace:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015ad0:	4b04      	ldr	r3, [pc, #16]	; (8015ae4 <std+0x44>)
 8015ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8015ad4:	bd10      	pop	{r4, pc}
 8015ad6:	bf00      	nop
 8015ad8:	08016895 	.word	0x08016895
 8015adc:	080168b7 	.word	0x080168b7
 8015ae0:	080168ef 	.word	0x080168ef
 8015ae4:	08016913 	.word	0x08016913

08015ae8 <_cleanup_r>:
 8015ae8:	4901      	ldr	r1, [pc, #4]	; (8015af0 <_cleanup_r+0x8>)
 8015aea:	f000 b8af 	b.w	8015c4c <_fwalk_reent>
 8015aee:	bf00      	nop
 8015af0:	080177c9 	.word	0x080177c9

08015af4 <__sfmoreglue>:
 8015af4:	2268      	movs	r2, #104	; 0x68
 8015af6:	b570      	push	{r4, r5, r6, lr}
 8015af8:	1e4d      	subs	r5, r1, #1
 8015afa:	4355      	muls	r5, r2
 8015afc:	460e      	mov	r6, r1
 8015afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b02:	f000 f979 	bl	8015df8 <_malloc_r>
 8015b06:	4604      	mov	r4, r0
 8015b08:	b140      	cbz	r0, 8015b1c <__sfmoreglue+0x28>
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8015b10:	300c      	adds	r0, #12
 8015b12:	60a0      	str	r0, [r4, #8]
 8015b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b18:	f000 f8fe 	bl	8015d18 <memset>
 8015b1c:	4620      	mov	r0, r4
 8015b1e:	bd70      	pop	{r4, r5, r6, pc}

08015b20 <__sfp_lock_acquire>:
 8015b20:	4801      	ldr	r0, [pc, #4]	; (8015b28 <__sfp_lock_acquire+0x8>)
 8015b22:	f000 b8d8 	b.w	8015cd6 <__retarget_lock_acquire_recursive>
 8015b26:	bf00      	nop
 8015b28:	2000247d 	.word	0x2000247d

08015b2c <__sfp_lock_release>:
 8015b2c:	4801      	ldr	r0, [pc, #4]	; (8015b34 <__sfp_lock_release+0x8>)
 8015b2e:	f000 b8d3 	b.w	8015cd8 <__retarget_lock_release_recursive>
 8015b32:	bf00      	nop
 8015b34:	2000247d 	.word	0x2000247d

08015b38 <__sinit_lock_acquire>:
 8015b38:	4801      	ldr	r0, [pc, #4]	; (8015b40 <__sinit_lock_acquire+0x8>)
 8015b3a:	f000 b8cc 	b.w	8015cd6 <__retarget_lock_acquire_recursive>
 8015b3e:	bf00      	nop
 8015b40:	2000247e 	.word	0x2000247e

08015b44 <__sinit_lock_release>:
 8015b44:	4801      	ldr	r0, [pc, #4]	; (8015b4c <__sinit_lock_release+0x8>)
 8015b46:	f000 b8c7 	b.w	8015cd8 <__retarget_lock_release_recursive>
 8015b4a:	bf00      	nop
 8015b4c:	2000247e 	.word	0x2000247e

08015b50 <__sinit>:
 8015b50:	b510      	push	{r4, lr}
 8015b52:	4604      	mov	r4, r0
 8015b54:	f7ff fff0 	bl	8015b38 <__sinit_lock_acquire>
 8015b58:	69a3      	ldr	r3, [r4, #24]
 8015b5a:	b11b      	cbz	r3, 8015b64 <__sinit+0x14>
 8015b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b60:	f7ff bff0 	b.w	8015b44 <__sinit_lock_release>
 8015b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015b68:	6523      	str	r3, [r4, #80]	; 0x50
 8015b6a:	4b13      	ldr	r3, [pc, #76]	; (8015bb8 <__sinit+0x68>)
 8015b6c:	4a13      	ldr	r2, [pc, #76]	; (8015bbc <__sinit+0x6c>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8015b72:	42a3      	cmp	r3, r4
 8015b74:	bf08      	it	eq
 8015b76:	2301      	moveq	r3, #1
 8015b78:	4620      	mov	r0, r4
 8015b7a:	bf08      	it	eq
 8015b7c:	61a3      	streq	r3, [r4, #24]
 8015b7e:	f000 f81f 	bl	8015bc0 <__sfp>
 8015b82:	6060      	str	r0, [r4, #4]
 8015b84:	4620      	mov	r0, r4
 8015b86:	f000 f81b 	bl	8015bc0 <__sfp>
 8015b8a:	60a0      	str	r0, [r4, #8]
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	f000 f817 	bl	8015bc0 <__sfp>
 8015b92:	2200      	movs	r2, #0
 8015b94:	2104      	movs	r1, #4
 8015b96:	60e0      	str	r0, [r4, #12]
 8015b98:	6860      	ldr	r0, [r4, #4]
 8015b9a:	f7ff ff81 	bl	8015aa0 <std>
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	2109      	movs	r1, #9
 8015ba2:	68a0      	ldr	r0, [r4, #8]
 8015ba4:	f7ff ff7c 	bl	8015aa0 <std>
 8015ba8:	2202      	movs	r2, #2
 8015baa:	2112      	movs	r1, #18
 8015bac:	68e0      	ldr	r0, [r4, #12]
 8015bae:	f7ff ff77 	bl	8015aa0 <std>
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	61a3      	str	r3, [r4, #24]
 8015bb6:	e7d1      	b.n	8015b5c <__sinit+0xc>
 8015bb8:	08031f20 	.word	0x08031f20
 8015bbc:	08015ae9 	.word	0x08015ae9

08015bc0 <__sfp>:
 8015bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bc2:	4607      	mov	r7, r0
 8015bc4:	f7ff ffac 	bl	8015b20 <__sfp_lock_acquire>
 8015bc8:	4b1e      	ldr	r3, [pc, #120]	; (8015c44 <__sfp+0x84>)
 8015bca:	681e      	ldr	r6, [r3, #0]
 8015bcc:	69b3      	ldr	r3, [r6, #24]
 8015bce:	b913      	cbnz	r3, 8015bd6 <__sfp+0x16>
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f7ff ffbd 	bl	8015b50 <__sinit>
 8015bd6:	3648      	adds	r6, #72	; 0x48
 8015bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015bdc:	3b01      	subs	r3, #1
 8015bde:	d503      	bpl.n	8015be8 <__sfp+0x28>
 8015be0:	6833      	ldr	r3, [r6, #0]
 8015be2:	b30b      	cbz	r3, 8015c28 <__sfp+0x68>
 8015be4:	6836      	ldr	r6, [r6, #0]
 8015be6:	e7f7      	b.n	8015bd8 <__sfp+0x18>
 8015be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015bec:	b9d5      	cbnz	r5, 8015c24 <__sfp+0x64>
 8015bee:	4b16      	ldr	r3, [pc, #88]	; (8015c48 <__sfp+0x88>)
 8015bf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015bf4:	60e3      	str	r3, [r4, #12]
 8015bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8015bf8:	f000 f86c 	bl	8015cd4 <__retarget_lock_init_recursive>
 8015bfc:	f7ff ff96 	bl	8015b2c <__sfp_lock_release>
 8015c00:	2208      	movs	r2, #8
 8015c02:	4629      	mov	r1, r5
 8015c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015c0c:	6025      	str	r5, [r4, #0]
 8015c0e:	61a5      	str	r5, [r4, #24]
 8015c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c14:	f000 f880 	bl	8015d18 <memset>
 8015c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c20:	4620      	mov	r0, r4
 8015c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c24:	3468      	adds	r4, #104	; 0x68
 8015c26:	e7d9      	b.n	8015bdc <__sfp+0x1c>
 8015c28:	2104      	movs	r1, #4
 8015c2a:	4638      	mov	r0, r7
 8015c2c:	f7ff ff62 	bl	8015af4 <__sfmoreglue>
 8015c30:	4604      	mov	r4, r0
 8015c32:	6030      	str	r0, [r6, #0]
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d1d5      	bne.n	8015be4 <__sfp+0x24>
 8015c38:	f7ff ff78 	bl	8015b2c <__sfp_lock_release>
 8015c3c:	230c      	movs	r3, #12
 8015c3e:	603b      	str	r3, [r7, #0]
 8015c40:	e7ee      	b.n	8015c20 <__sfp+0x60>
 8015c42:	bf00      	nop
 8015c44:	08031f20 	.word	0x08031f20
 8015c48:	ffff0001 	.word	0xffff0001

08015c4c <_fwalk_reent>:
 8015c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c50:	4606      	mov	r6, r0
 8015c52:	4688      	mov	r8, r1
 8015c54:	2700      	movs	r7, #0
 8015c56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8015c62:	d505      	bpl.n	8015c70 <_fwalk_reent+0x24>
 8015c64:	6824      	ldr	r4, [r4, #0]
 8015c66:	2c00      	cmp	r4, #0
 8015c68:	d1f7      	bne.n	8015c5a <_fwalk_reent+0xe>
 8015c6a:	4638      	mov	r0, r7
 8015c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c70:	89ab      	ldrh	r3, [r5, #12]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d907      	bls.n	8015c86 <_fwalk_reent+0x3a>
 8015c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	d003      	beq.n	8015c86 <_fwalk_reent+0x3a>
 8015c7e:	4629      	mov	r1, r5
 8015c80:	4630      	mov	r0, r6
 8015c82:	47c0      	blx	r8
 8015c84:	4307      	orrs	r7, r0
 8015c86:	3568      	adds	r5, #104	; 0x68
 8015c88:	e7e9      	b.n	8015c5e <_fwalk_reent+0x12>
	...

08015c8c <__libc_init_array>:
 8015c8c:	b570      	push	{r4, r5, r6, lr}
 8015c8e:	2600      	movs	r6, #0
 8015c90:	4d0c      	ldr	r5, [pc, #48]	; (8015cc4 <__libc_init_array+0x38>)
 8015c92:	4c0d      	ldr	r4, [pc, #52]	; (8015cc8 <__libc_init_array+0x3c>)
 8015c94:	1b64      	subs	r4, r4, r5
 8015c96:	10a4      	asrs	r4, r4, #2
 8015c98:	42a6      	cmp	r6, r4
 8015c9a:	d109      	bne.n	8015cb0 <__libc_init_array+0x24>
 8015c9c:	f002 fe8e 	bl	80189bc <_init>
 8015ca0:	2600      	movs	r6, #0
 8015ca2:	4d0a      	ldr	r5, [pc, #40]	; (8015ccc <__libc_init_array+0x40>)
 8015ca4:	4c0a      	ldr	r4, [pc, #40]	; (8015cd0 <__libc_init_array+0x44>)
 8015ca6:	1b64      	subs	r4, r4, r5
 8015ca8:	10a4      	asrs	r4, r4, #2
 8015caa:	42a6      	cmp	r6, r4
 8015cac:	d105      	bne.n	8015cba <__libc_init_array+0x2e>
 8015cae:	bd70      	pop	{r4, r5, r6, pc}
 8015cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8015cb4:	4798      	blx	r3
 8015cb6:	3601      	adds	r6, #1
 8015cb8:	e7ee      	b.n	8015c98 <__libc_init_array+0xc>
 8015cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8015cbe:	4798      	blx	r3
 8015cc0:	3601      	adds	r6, #1
 8015cc2:	e7f2      	b.n	8015caa <__libc_init_array+0x1e>
 8015cc4:	0803229c 	.word	0x0803229c
 8015cc8:	0803229c 	.word	0x0803229c
 8015ccc:	0803229c 	.word	0x0803229c
 8015cd0:	080322a0 	.word	0x080322a0

08015cd4 <__retarget_lock_init_recursive>:
 8015cd4:	4770      	bx	lr

08015cd6 <__retarget_lock_acquire_recursive>:
 8015cd6:	4770      	bx	lr

08015cd8 <__retarget_lock_release_recursive>:
 8015cd8:	4770      	bx	lr
	...

08015cdc <malloc>:
 8015cdc:	4b02      	ldr	r3, [pc, #8]	; (8015ce8 <malloc+0xc>)
 8015cde:	4601      	mov	r1, r0
 8015ce0:	6818      	ldr	r0, [r3, #0]
 8015ce2:	f000 b889 	b.w	8015df8 <_malloc_r>
 8015ce6:	bf00      	nop
 8015ce8:	200000b8 	.word	0x200000b8

08015cec <free>:
 8015cec:	4b02      	ldr	r3, [pc, #8]	; (8015cf8 <free+0xc>)
 8015cee:	4601      	mov	r1, r0
 8015cf0:	6818      	ldr	r0, [r3, #0]
 8015cf2:	f000 b819 	b.w	8015d28 <_free_r>
 8015cf6:	bf00      	nop
 8015cf8:	200000b8 	.word	0x200000b8

08015cfc <memcpy>:
 8015cfc:	440a      	add	r2, r1
 8015cfe:	4291      	cmp	r1, r2
 8015d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8015d04:	d100      	bne.n	8015d08 <memcpy+0xc>
 8015d06:	4770      	bx	lr
 8015d08:	b510      	push	{r4, lr}
 8015d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d0e:	4291      	cmp	r1, r2
 8015d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d14:	d1f9      	bne.n	8015d0a <memcpy+0xe>
 8015d16:	bd10      	pop	{r4, pc}

08015d18 <memset>:
 8015d18:	4603      	mov	r3, r0
 8015d1a:	4402      	add	r2, r0
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	d100      	bne.n	8015d22 <memset+0xa>
 8015d20:	4770      	bx	lr
 8015d22:	f803 1b01 	strb.w	r1, [r3], #1
 8015d26:	e7f9      	b.n	8015d1c <memset+0x4>

08015d28 <_free_r>:
 8015d28:	b538      	push	{r3, r4, r5, lr}
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	2900      	cmp	r1, #0
 8015d2e:	d040      	beq.n	8015db2 <_free_r+0x8a>
 8015d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d34:	1f0c      	subs	r4, r1, #4
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	bfb8      	it	lt
 8015d3a:	18e4      	addlt	r4, r4, r3
 8015d3c:	f001 fda4 	bl	8017888 <__malloc_lock>
 8015d40:	4a1c      	ldr	r2, [pc, #112]	; (8015db4 <_free_r+0x8c>)
 8015d42:	6813      	ldr	r3, [r2, #0]
 8015d44:	b933      	cbnz	r3, 8015d54 <_free_r+0x2c>
 8015d46:	6063      	str	r3, [r4, #4]
 8015d48:	6014      	str	r4, [r2, #0]
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d50:	f001 bda0 	b.w	8017894 <__malloc_unlock>
 8015d54:	42a3      	cmp	r3, r4
 8015d56:	d908      	bls.n	8015d6a <_free_r+0x42>
 8015d58:	6820      	ldr	r0, [r4, #0]
 8015d5a:	1821      	adds	r1, r4, r0
 8015d5c:	428b      	cmp	r3, r1
 8015d5e:	bf01      	itttt	eq
 8015d60:	6819      	ldreq	r1, [r3, #0]
 8015d62:	685b      	ldreq	r3, [r3, #4]
 8015d64:	1809      	addeq	r1, r1, r0
 8015d66:	6021      	streq	r1, [r4, #0]
 8015d68:	e7ed      	b.n	8015d46 <_free_r+0x1e>
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	b10b      	cbz	r3, 8015d74 <_free_r+0x4c>
 8015d70:	42a3      	cmp	r3, r4
 8015d72:	d9fa      	bls.n	8015d6a <_free_r+0x42>
 8015d74:	6811      	ldr	r1, [r2, #0]
 8015d76:	1850      	adds	r0, r2, r1
 8015d78:	42a0      	cmp	r0, r4
 8015d7a:	d10b      	bne.n	8015d94 <_free_r+0x6c>
 8015d7c:	6820      	ldr	r0, [r4, #0]
 8015d7e:	4401      	add	r1, r0
 8015d80:	1850      	adds	r0, r2, r1
 8015d82:	4283      	cmp	r3, r0
 8015d84:	6011      	str	r1, [r2, #0]
 8015d86:	d1e0      	bne.n	8015d4a <_free_r+0x22>
 8015d88:	6818      	ldr	r0, [r3, #0]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	4401      	add	r1, r0
 8015d8e:	6011      	str	r1, [r2, #0]
 8015d90:	6053      	str	r3, [r2, #4]
 8015d92:	e7da      	b.n	8015d4a <_free_r+0x22>
 8015d94:	d902      	bls.n	8015d9c <_free_r+0x74>
 8015d96:	230c      	movs	r3, #12
 8015d98:	602b      	str	r3, [r5, #0]
 8015d9a:	e7d6      	b.n	8015d4a <_free_r+0x22>
 8015d9c:	6820      	ldr	r0, [r4, #0]
 8015d9e:	1821      	adds	r1, r4, r0
 8015da0:	428b      	cmp	r3, r1
 8015da2:	bf01      	itttt	eq
 8015da4:	6819      	ldreq	r1, [r3, #0]
 8015da6:	685b      	ldreq	r3, [r3, #4]
 8015da8:	1809      	addeq	r1, r1, r0
 8015daa:	6021      	streq	r1, [r4, #0]
 8015dac:	6063      	str	r3, [r4, #4]
 8015dae:	6054      	str	r4, [r2, #4]
 8015db0:	e7cb      	b.n	8015d4a <_free_r+0x22>
 8015db2:	bd38      	pop	{r3, r4, r5, pc}
 8015db4:	20002480 	.word	0x20002480

08015db8 <sbrk_aligned>:
 8015db8:	b570      	push	{r4, r5, r6, lr}
 8015dba:	4e0e      	ldr	r6, [pc, #56]	; (8015df4 <sbrk_aligned+0x3c>)
 8015dbc:	460c      	mov	r4, r1
 8015dbe:	6831      	ldr	r1, [r6, #0]
 8015dc0:	4605      	mov	r5, r0
 8015dc2:	b911      	cbnz	r1, 8015dca <sbrk_aligned+0x12>
 8015dc4:	f000 fd56 	bl	8016874 <_sbrk_r>
 8015dc8:	6030      	str	r0, [r6, #0]
 8015dca:	4621      	mov	r1, r4
 8015dcc:	4628      	mov	r0, r5
 8015dce:	f000 fd51 	bl	8016874 <_sbrk_r>
 8015dd2:	1c43      	adds	r3, r0, #1
 8015dd4:	d00a      	beq.n	8015dec <sbrk_aligned+0x34>
 8015dd6:	1cc4      	adds	r4, r0, #3
 8015dd8:	f024 0403 	bic.w	r4, r4, #3
 8015ddc:	42a0      	cmp	r0, r4
 8015dde:	d007      	beq.n	8015df0 <sbrk_aligned+0x38>
 8015de0:	1a21      	subs	r1, r4, r0
 8015de2:	4628      	mov	r0, r5
 8015de4:	f000 fd46 	bl	8016874 <_sbrk_r>
 8015de8:	3001      	adds	r0, #1
 8015dea:	d101      	bne.n	8015df0 <sbrk_aligned+0x38>
 8015dec:	f04f 34ff 	mov.w	r4, #4294967295
 8015df0:	4620      	mov	r0, r4
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	20002484 	.word	0x20002484

08015df8 <_malloc_r>:
 8015df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dfc:	1ccd      	adds	r5, r1, #3
 8015dfe:	f025 0503 	bic.w	r5, r5, #3
 8015e02:	3508      	adds	r5, #8
 8015e04:	2d0c      	cmp	r5, #12
 8015e06:	bf38      	it	cc
 8015e08:	250c      	movcc	r5, #12
 8015e0a:	2d00      	cmp	r5, #0
 8015e0c:	4607      	mov	r7, r0
 8015e0e:	db01      	blt.n	8015e14 <_malloc_r+0x1c>
 8015e10:	42a9      	cmp	r1, r5
 8015e12:	d905      	bls.n	8015e20 <_malloc_r+0x28>
 8015e14:	230c      	movs	r3, #12
 8015e16:	2600      	movs	r6, #0
 8015e18:	603b      	str	r3, [r7, #0]
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e20:	4e2e      	ldr	r6, [pc, #184]	; (8015edc <_malloc_r+0xe4>)
 8015e22:	f001 fd31 	bl	8017888 <__malloc_lock>
 8015e26:	6833      	ldr	r3, [r6, #0]
 8015e28:	461c      	mov	r4, r3
 8015e2a:	bb34      	cbnz	r4, 8015e7a <_malloc_r+0x82>
 8015e2c:	4629      	mov	r1, r5
 8015e2e:	4638      	mov	r0, r7
 8015e30:	f7ff ffc2 	bl	8015db8 <sbrk_aligned>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	4604      	mov	r4, r0
 8015e38:	d14d      	bne.n	8015ed6 <_malloc_r+0xde>
 8015e3a:	6834      	ldr	r4, [r6, #0]
 8015e3c:	4626      	mov	r6, r4
 8015e3e:	2e00      	cmp	r6, #0
 8015e40:	d140      	bne.n	8015ec4 <_malloc_r+0xcc>
 8015e42:	6823      	ldr	r3, [r4, #0]
 8015e44:	4631      	mov	r1, r6
 8015e46:	4638      	mov	r0, r7
 8015e48:	eb04 0803 	add.w	r8, r4, r3
 8015e4c:	f000 fd12 	bl	8016874 <_sbrk_r>
 8015e50:	4580      	cmp	r8, r0
 8015e52:	d13a      	bne.n	8015eca <_malloc_r+0xd2>
 8015e54:	6821      	ldr	r1, [r4, #0]
 8015e56:	3503      	adds	r5, #3
 8015e58:	1a6d      	subs	r5, r5, r1
 8015e5a:	f025 0503 	bic.w	r5, r5, #3
 8015e5e:	3508      	adds	r5, #8
 8015e60:	2d0c      	cmp	r5, #12
 8015e62:	bf38      	it	cc
 8015e64:	250c      	movcc	r5, #12
 8015e66:	4638      	mov	r0, r7
 8015e68:	4629      	mov	r1, r5
 8015e6a:	f7ff ffa5 	bl	8015db8 <sbrk_aligned>
 8015e6e:	3001      	adds	r0, #1
 8015e70:	d02b      	beq.n	8015eca <_malloc_r+0xd2>
 8015e72:	6823      	ldr	r3, [r4, #0]
 8015e74:	442b      	add	r3, r5
 8015e76:	6023      	str	r3, [r4, #0]
 8015e78:	e00e      	b.n	8015e98 <_malloc_r+0xa0>
 8015e7a:	6822      	ldr	r2, [r4, #0]
 8015e7c:	1b52      	subs	r2, r2, r5
 8015e7e:	d41e      	bmi.n	8015ebe <_malloc_r+0xc6>
 8015e80:	2a0b      	cmp	r2, #11
 8015e82:	d916      	bls.n	8015eb2 <_malloc_r+0xba>
 8015e84:	1961      	adds	r1, r4, r5
 8015e86:	42a3      	cmp	r3, r4
 8015e88:	6025      	str	r5, [r4, #0]
 8015e8a:	bf18      	it	ne
 8015e8c:	6059      	strne	r1, [r3, #4]
 8015e8e:	6863      	ldr	r3, [r4, #4]
 8015e90:	bf08      	it	eq
 8015e92:	6031      	streq	r1, [r6, #0]
 8015e94:	5162      	str	r2, [r4, r5]
 8015e96:	604b      	str	r3, [r1, #4]
 8015e98:	4638      	mov	r0, r7
 8015e9a:	f104 060b 	add.w	r6, r4, #11
 8015e9e:	f001 fcf9 	bl	8017894 <__malloc_unlock>
 8015ea2:	f026 0607 	bic.w	r6, r6, #7
 8015ea6:	1d23      	adds	r3, r4, #4
 8015ea8:	1af2      	subs	r2, r6, r3
 8015eaa:	d0b6      	beq.n	8015e1a <_malloc_r+0x22>
 8015eac:	1b9b      	subs	r3, r3, r6
 8015eae:	50a3      	str	r3, [r4, r2]
 8015eb0:	e7b3      	b.n	8015e1a <_malloc_r+0x22>
 8015eb2:	6862      	ldr	r2, [r4, #4]
 8015eb4:	42a3      	cmp	r3, r4
 8015eb6:	bf0c      	ite	eq
 8015eb8:	6032      	streq	r2, [r6, #0]
 8015eba:	605a      	strne	r2, [r3, #4]
 8015ebc:	e7ec      	b.n	8015e98 <_malloc_r+0xa0>
 8015ebe:	4623      	mov	r3, r4
 8015ec0:	6864      	ldr	r4, [r4, #4]
 8015ec2:	e7b2      	b.n	8015e2a <_malloc_r+0x32>
 8015ec4:	4634      	mov	r4, r6
 8015ec6:	6876      	ldr	r6, [r6, #4]
 8015ec8:	e7b9      	b.n	8015e3e <_malloc_r+0x46>
 8015eca:	230c      	movs	r3, #12
 8015ecc:	4638      	mov	r0, r7
 8015ece:	603b      	str	r3, [r7, #0]
 8015ed0:	f001 fce0 	bl	8017894 <__malloc_unlock>
 8015ed4:	e7a1      	b.n	8015e1a <_malloc_r+0x22>
 8015ed6:	6025      	str	r5, [r4, #0]
 8015ed8:	e7de      	b.n	8015e98 <_malloc_r+0xa0>
 8015eda:	bf00      	nop
 8015edc:	20002480 	.word	0x20002480

08015ee0 <__cvt>:
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee6:	461f      	mov	r7, r3
 8015ee8:	bfbb      	ittet	lt
 8015eea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8015eee:	461f      	movlt	r7, r3
 8015ef0:	2300      	movge	r3, #0
 8015ef2:	232d      	movlt	r3, #45	; 0x2d
 8015ef4:	b088      	sub	sp, #32
 8015ef6:	4614      	mov	r4, r2
 8015ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015efa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015efc:	7013      	strb	r3, [r2, #0]
 8015efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f00:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8015f04:	f023 0820 	bic.w	r8, r3, #32
 8015f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015f0c:	d005      	beq.n	8015f1a <__cvt+0x3a>
 8015f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015f12:	d100      	bne.n	8015f16 <__cvt+0x36>
 8015f14:	3501      	adds	r5, #1
 8015f16:	2302      	movs	r3, #2
 8015f18:	e000      	b.n	8015f1c <__cvt+0x3c>
 8015f1a:	2303      	movs	r3, #3
 8015f1c:	aa07      	add	r2, sp, #28
 8015f1e:	9204      	str	r2, [sp, #16]
 8015f20:	aa06      	add	r2, sp, #24
 8015f22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8015f26:	e9cd 3500 	strd	r3, r5, [sp]
 8015f2a:	4622      	mov	r2, r4
 8015f2c:	463b      	mov	r3, r7
 8015f2e:	f000 fddb 	bl	8016ae8 <_dtoa_r>
 8015f32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015f36:	4606      	mov	r6, r0
 8015f38:	d102      	bne.n	8015f40 <__cvt+0x60>
 8015f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f3c:	07db      	lsls	r3, r3, #31
 8015f3e:	d522      	bpl.n	8015f86 <__cvt+0xa6>
 8015f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015f44:	eb06 0905 	add.w	r9, r6, r5
 8015f48:	d110      	bne.n	8015f6c <__cvt+0x8c>
 8015f4a:	7833      	ldrb	r3, [r6, #0]
 8015f4c:	2b30      	cmp	r3, #48	; 0x30
 8015f4e:	d10a      	bne.n	8015f66 <__cvt+0x86>
 8015f50:	2200      	movs	r2, #0
 8015f52:	2300      	movs	r3, #0
 8015f54:	4620      	mov	r0, r4
 8015f56:	4639      	mov	r1, r7
 8015f58:	f7ea fd96 	bl	8000a88 <__aeabi_dcmpeq>
 8015f5c:	b918      	cbnz	r0, 8015f66 <__cvt+0x86>
 8015f5e:	f1c5 0501 	rsb	r5, r5, #1
 8015f62:	f8ca 5000 	str.w	r5, [sl]
 8015f66:	f8da 3000 	ldr.w	r3, [sl]
 8015f6a:	4499      	add	r9, r3
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	2300      	movs	r3, #0
 8015f70:	4620      	mov	r0, r4
 8015f72:	4639      	mov	r1, r7
 8015f74:	f7ea fd88 	bl	8000a88 <__aeabi_dcmpeq>
 8015f78:	b108      	cbz	r0, 8015f7e <__cvt+0x9e>
 8015f7a:	f8cd 901c 	str.w	r9, [sp, #28]
 8015f7e:	2230      	movs	r2, #48	; 0x30
 8015f80:	9b07      	ldr	r3, [sp, #28]
 8015f82:	454b      	cmp	r3, r9
 8015f84:	d307      	bcc.n	8015f96 <__cvt+0xb6>
 8015f86:	4630      	mov	r0, r6
 8015f88:	9b07      	ldr	r3, [sp, #28]
 8015f8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f8c:	1b9b      	subs	r3, r3, r6
 8015f8e:	6013      	str	r3, [r2, #0]
 8015f90:	b008      	add	sp, #32
 8015f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f96:	1c59      	adds	r1, r3, #1
 8015f98:	9107      	str	r1, [sp, #28]
 8015f9a:	701a      	strb	r2, [r3, #0]
 8015f9c:	e7f0      	b.n	8015f80 <__cvt+0xa0>

08015f9e <__exponent>:
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015fa2:	2900      	cmp	r1, #0
 8015fa4:	f803 2b02 	strb.w	r2, [r3], #2
 8015fa8:	bfb6      	itet	lt
 8015faa:	222d      	movlt	r2, #45	; 0x2d
 8015fac:	222b      	movge	r2, #43	; 0x2b
 8015fae:	4249      	neglt	r1, r1
 8015fb0:	2909      	cmp	r1, #9
 8015fb2:	7042      	strb	r2, [r0, #1]
 8015fb4:	dd2b      	ble.n	801600e <__exponent+0x70>
 8015fb6:	f10d 0407 	add.w	r4, sp, #7
 8015fba:	46a4      	mov	ip, r4
 8015fbc:	270a      	movs	r7, #10
 8015fbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8015fc2:	460a      	mov	r2, r1
 8015fc4:	46a6      	mov	lr, r4
 8015fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8015fca:	2a63      	cmp	r2, #99	; 0x63
 8015fcc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8015fd0:	4631      	mov	r1, r6
 8015fd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8015fd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015fda:	dcf0      	bgt.n	8015fbe <__exponent+0x20>
 8015fdc:	3130      	adds	r1, #48	; 0x30
 8015fde:	f1ae 0502 	sub.w	r5, lr, #2
 8015fe2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015fe6:	4629      	mov	r1, r5
 8015fe8:	1c44      	adds	r4, r0, #1
 8015fea:	4561      	cmp	r1, ip
 8015fec:	d30a      	bcc.n	8016004 <__exponent+0x66>
 8015fee:	f10d 0209 	add.w	r2, sp, #9
 8015ff2:	eba2 020e 	sub.w	r2, r2, lr
 8015ff6:	4565      	cmp	r5, ip
 8015ff8:	bf88      	it	hi
 8015ffa:	2200      	movhi	r2, #0
 8015ffc:	4413      	add	r3, r2
 8015ffe:	1a18      	subs	r0, r3, r0
 8016000:	b003      	add	sp, #12
 8016002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016004:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016008:	f804 2f01 	strb.w	r2, [r4, #1]!
 801600c:	e7ed      	b.n	8015fea <__exponent+0x4c>
 801600e:	2330      	movs	r3, #48	; 0x30
 8016010:	3130      	adds	r1, #48	; 0x30
 8016012:	7083      	strb	r3, [r0, #2]
 8016014:	70c1      	strb	r1, [r0, #3]
 8016016:	1d03      	adds	r3, r0, #4
 8016018:	e7f1      	b.n	8015ffe <__exponent+0x60>
	...

0801601c <_printf_float>:
 801601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016020:	b091      	sub	sp, #68	; 0x44
 8016022:	460c      	mov	r4, r1
 8016024:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8016028:	4616      	mov	r6, r2
 801602a:	461f      	mov	r7, r3
 801602c:	4605      	mov	r5, r0
 801602e:	f001 fc07 	bl	8017840 <_localeconv_r>
 8016032:	6803      	ldr	r3, [r0, #0]
 8016034:	4618      	mov	r0, r3
 8016036:	9309      	str	r3, [sp, #36]	; 0x24
 8016038:	f7ea f8fa 	bl	8000230 <strlen>
 801603c:	2300      	movs	r3, #0
 801603e:	930e      	str	r3, [sp, #56]	; 0x38
 8016040:	f8d8 3000 	ldr.w	r3, [r8]
 8016044:	900a      	str	r0, [sp, #40]	; 0x28
 8016046:	3307      	adds	r3, #7
 8016048:	f023 0307 	bic.w	r3, r3, #7
 801604c:	f103 0208 	add.w	r2, r3, #8
 8016050:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016054:	f8d4 b000 	ldr.w	fp, [r4]
 8016058:	f8c8 2000 	str.w	r2, [r8]
 801605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016060:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016064:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8016068:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801606c:	930b      	str	r3, [sp, #44]	; 0x2c
 801606e:	f04f 32ff 	mov.w	r2, #4294967295
 8016072:	4640      	mov	r0, r8
 8016074:	4b9c      	ldr	r3, [pc, #624]	; (80162e8 <_printf_float+0x2cc>)
 8016076:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016078:	f7ea fd38 	bl	8000aec <__aeabi_dcmpun>
 801607c:	bb70      	cbnz	r0, 80160dc <_printf_float+0xc0>
 801607e:	f04f 32ff 	mov.w	r2, #4294967295
 8016082:	4640      	mov	r0, r8
 8016084:	4b98      	ldr	r3, [pc, #608]	; (80162e8 <_printf_float+0x2cc>)
 8016086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016088:	f7ea fd12 	bl	8000ab0 <__aeabi_dcmple>
 801608c:	bb30      	cbnz	r0, 80160dc <_printf_float+0xc0>
 801608e:	2200      	movs	r2, #0
 8016090:	2300      	movs	r3, #0
 8016092:	4640      	mov	r0, r8
 8016094:	4651      	mov	r1, sl
 8016096:	f7ea fd01 	bl	8000a9c <__aeabi_dcmplt>
 801609a:	b110      	cbz	r0, 80160a2 <_printf_float+0x86>
 801609c:	232d      	movs	r3, #45	; 0x2d
 801609e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160a2:	4b92      	ldr	r3, [pc, #584]	; (80162ec <_printf_float+0x2d0>)
 80160a4:	4892      	ldr	r0, [pc, #584]	; (80162f0 <_printf_float+0x2d4>)
 80160a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80160aa:	bf94      	ite	ls
 80160ac:	4698      	movls	r8, r3
 80160ae:	4680      	movhi	r8, r0
 80160b0:	2303      	movs	r3, #3
 80160b2:	f04f 0a00 	mov.w	sl, #0
 80160b6:	6123      	str	r3, [r4, #16]
 80160b8:	f02b 0304 	bic.w	r3, fp, #4
 80160bc:	6023      	str	r3, [r4, #0]
 80160be:	4633      	mov	r3, r6
 80160c0:	4621      	mov	r1, r4
 80160c2:	4628      	mov	r0, r5
 80160c4:	9700      	str	r7, [sp, #0]
 80160c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80160c8:	f000 f9d4 	bl	8016474 <_printf_common>
 80160cc:	3001      	adds	r0, #1
 80160ce:	f040 8090 	bne.w	80161f2 <_printf_float+0x1d6>
 80160d2:	f04f 30ff 	mov.w	r0, #4294967295
 80160d6:	b011      	add	sp, #68	; 0x44
 80160d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160dc:	4642      	mov	r2, r8
 80160de:	4653      	mov	r3, sl
 80160e0:	4640      	mov	r0, r8
 80160e2:	4651      	mov	r1, sl
 80160e4:	f7ea fd02 	bl	8000aec <__aeabi_dcmpun>
 80160e8:	b148      	cbz	r0, 80160fe <_printf_float+0xe2>
 80160ea:	f1ba 0f00 	cmp.w	sl, #0
 80160ee:	bfb8      	it	lt
 80160f0:	232d      	movlt	r3, #45	; 0x2d
 80160f2:	4880      	ldr	r0, [pc, #512]	; (80162f4 <_printf_float+0x2d8>)
 80160f4:	bfb8      	it	lt
 80160f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80160fa:	4b7f      	ldr	r3, [pc, #508]	; (80162f8 <_printf_float+0x2dc>)
 80160fc:	e7d3      	b.n	80160a6 <_printf_float+0x8a>
 80160fe:	6863      	ldr	r3, [r4, #4]
 8016100:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016104:	1c5a      	adds	r2, r3, #1
 8016106:	d142      	bne.n	801618e <_printf_float+0x172>
 8016108:	2306      	movs	r3, #6
 801610a:	6063      	str	r3, [r4, #4]
 801610c:	2200      	movs	r2, #0
 801610e:	9206      	str	r2, [sp, #24]
 8016110:	aa0e      	add	r2, sp, #56	; 0x38
 8016112:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8016116:	aa0d      	add	r2, sp, #52	; 0x34
 8016118:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801611c:	9203      	str	r2, [sp, #12]
 801611e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8016122:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016126:	6023      	str	r3, [r4, #0]
 8016128:	6863      	ldr	r3, [r4, #4]
 801612a:	4642      	mov	r2, r8
 801612c:	9300      	str	r3, [sp, #0]
 801612e:	4628      	mov	r0, r5
 8016130:	4653      	mov	r3, sl
 8016132:	910b      	str	r1, [sp, #44]	; 0x2c
 8016134:	f7ff fed4 	bl	8015ee0 <__cvt>
 8016138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801613a:	4680      	mov	r8, r0
 801613c:	2947      	cmp	r1, #71	; 0x47
 801613e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016140:	d108      	bne.n	8016154 <_printf_float+0x138>
 8016142:	1cc8      	adds	r0, r1, #3
 8016144:	db02      	blt.n	801614c <_printf_float+0x130>
 8016146:	6863      	ldr	r3, [r4, #4]
 8016148:	4299      	cmp	r1, r3
 801614a:	dd40      	ble.n	80161ce <_printf_float+0x1b2>
 801614c:	f1a9 0902 	sub.w	r9, r9, #2
 8016150:	fa5f f989 	uxtb.w	r9, r9
 8016154:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016158:	d81f      	bhi.n	801619a <_printf_float+0x17e>
 801615a:	464a      	mov	r2, r9
 801615c:	3901      	subs	r1, #1
 801615e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016162:	910d      	str	r1, [sp, #52]	; 0x34
 8016164:	f7ff ff1b 	bl	8015f9e <__exponent>
 8016168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801616a:	4682      	mov	sl, r0
 801616c:	1813      	adds	r3, r2, r0
 801616e:	2a01      	cmp	r2, #1
 8016170:	6123      	str	r3, [r4, #16]
 8016172:	dc02      	bgt.n	801617a <_printf_float+0x15e>
 8016174:	6822      	ldr	r2, [r4, #0]
 8016176:	07d2      	lsls	r2, r2, #31
 8016178:	d501      	bpl.n	801617e <_printf_float+0x162>
 801617a:	3301      	adds	r3, #1
 801617c:	6123      	str	r3, [r4, #16]
 801617e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8016182:	2b00      	cmp	r3, #0
 8016184:	d09b      	beq.n	80160be <_printf_float+0xa2>
 8016186:	232d      	movs	r3, #45	; 0x2d
 8016188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801618c:	e797      	b.n	80160be <_printf_float+0xa2>
 801618e:	2947      	cmp	r1, #71	; 0x47
 8016190:	d1bc      	bne.n	801610c <_printf_float+0xf0>
 8016192:	2b00      	cmp	r3, #0
 8016194:	d1ba      	bne.n	801610c <_printf_float+0xf0>
 8016196:	2301      	movs	r3, #1
 8016198:	e7b7      	b.n	801610a <_printf_float+0xee>
 801619a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801619e:	d118      	bne.n	80161d2 <_printf_float+0x1b6>
 80161a0:	2900      	cmp	r1, #0
 80161a2:	6863      	ldr	r3, [r4, #4]
 80161a4:	dd0b      	ble.n	80161be <_printf_float+0x1a2>
 80161a6:	6121      	str	r1, [r4, #16]
 80161a8:	b913      	cbnz	r3, 80161b0 <_printf_float+0x194>
 80161aa:	6822      	ldr	r2, [r4, #0]
 80161ac:	07d0      	lsls	r0, r2, #31
 80161ae:	d502      	bpl.n	80161b6 <_printf_float+0x19a>
 80161b0:	3301      	adds	r3, #1
 80161b2:	440b      	add	r3, r1
 80161b4:	6123      	str	r3, [r4, #16]
 80161b6:	f04f 0a00 	mov.w	sl, #0
 80161ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80161bc:	e7df      	b.n	801617e <_printf_float+0x162>
 80161be:	b913      	cbnz	r3, 80161c6 <_printf_float+0x1aa>
 80161c0:	6822      	ldr	r2, [r4, #0]
 80161c2:	07d2      	lsls	r2, r2, #31
 80161c4:	d501      	bpl.n	80161ca <_printf_float+0x1ae>
 80161c6:	3302      	adds	r3, #2
 80161c8:	e7f4      	b.n	80161b4 <_printf_float+0x198>
 80161ca:	2301      	movs	r3, #1
 80161cc:	e7f2      	b.n	80161b4 <_printf_float+0x198>
 80161ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 80161d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161d4:	4299      	cmp	r1, r3
 80161d6:	db05      	blt.n	80161e4 <_printf_float+0x1c8>
 80161d8:	6823      	ldr	r3, [r4, #0]
 80161da:	6121      	str	r1, [r4, #16]
 80161dc:	07d8      	lsls	r0, r3, #31
 80161de:	d5ea      	bpl.n	80161b6 <_printf_float+0x19a>
 80161e0:	1c4b      	adds	r3, r1, #1
 80161e2:	e7e7      	b.n	80161b4 <_printf_float+0x198>
 80161e4:	2900      	cmp	r1, #0
 80161e6:	bfcc      	ite	gt
 80161e8:	2201      	movgt	r2, #1
 80161ea:	f1c1 0202 	rsble	r2, r1, #2
 80161ee:	4413      	add	r3, r2
 80161f0:	e7e0      	b.n	80161b4 <_printf_float+0x198>
 80161f2:	6823      	ldr	r3, [r4, #0]
 80161f4:	055a      	lsls	r2, r3, #21
 80161f6:	d407      	bmi.n	8016208 <_printf_float+0x1ec>
 80161f8:	6923      	ldr	r3, [r4, #16]
 80161fa:	4642      	mov	r2, r8
 80161fc:	4631      	mov	r1, r6
 80161fe:	4628      	mov	r0, r5
 8016200:	47b8      	blx	r7
 8016202:	3001      	adds	r0, #1
 8016204:	d12b      	bne.n	801625e <_printf_float+0x242>
 8016206:	e764      	b.n	80160d2 <_printf_float+0xb6>
 8016208:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801620c:	f240 80dd 	bls.w	80163ca <_printf_float+0x3ae>
 8016210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016214:	2200      	movs	r2, #0
 8016216:	2300      	movs	r3, #0
 8016218:	f7ea fc36 	bl	8000a88 <__aeabi_dcmpeq>
 801621c:	2800      	cmp	r0, #0
 801621e:	d033      	beq.n	8016288 <_printf_float+0x26c>
 8016220:	2301      	movs	r3, #1
 8016222:	4631      	mov	r1, r6
 8016224:	4628      	mov	r0, r5
 8016226:	4a35      	ldr	r2, [pc, #212]	; (80162fc <_printf_float+0x2e0>)
 8016228:	47b8      	blx	r7
 801622a:	3001      	adds	r0, #1
 801622c:	f43f af51 	beq.w	80160d2 <_printf_float+0xb6>
 8016230:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8016234:	429a      	cmp	r2, r3
 8016236:	db02      	blt.n	801623e <_printf_float+0x222>
 8016238:	6823      	ldr	r3, [r4, #0]
 801623a:	07d8      	lsls	r0, r3, #31
 801623c:	d50f      	bpl.n	801625e <_printf_float+0x242>
 801623e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016242:	4631      	mov	r1, r6
 8016244:	4628      	mov	r0, r5
 8016246:	47b8      	blx	r7
 8016248:	3001      	adds	r0, #1
 801624a:	f43f af42 	beq.w	80160d2 <_printf_float+0xb6>
 801624e:	f04f 0800 	mov.w	r8, #0
 8016252:	f104 091a 	add.w	r9, r4, #26
 8016256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016258:	3b01      	subs	r3, #1
 801625a:	4543      	cmp	r3, r8
 801625c:	dc09      	bgt.n	8016272 <_printf_float+0x256>
 801625e:	6823      	ldr	r3, [r4, #0]
 8016260:	079b      	lsls	r3, r3, #30
 8016262:	f100 8102 	bmi.w	801646a <_printf_float+0x44e>
 8016266:	68e0      	ldr	r0, [r4, #12]
 8016268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801626a:	4298      	cmp	r0, r3
 801626c:	bfb8      	it	lt
 801626e:	4618      	movlt	r0, r3
 8016270:	e731      	b.n	80160d6 <_printf_float+0xba>
 8016272:	2301      	movs	r3, #1
 8016274:	464a      	mov	r2, r9
 8016276:	4631      	mov	r1, r6
 8016278:	4628      	mov	r0, r5
 801627a:	47b8      	blx	r7
 801627c:	3001      	adds	r0, #1
 801627e:	f43f af28 	beq.w	80160d2 <_printf_float+0xb6>
 8016282:	f108 0801 	add.w	r8, r8, #1
 8016286:	e7e6      	b.n	8016256 <_printf_float+0x23a>
 8016288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801628a:	2b00      	cmp	r3, #0
 801628c:	dc38      	bgt.n	8016300 <_printf_float+0x2e4>
 801628e:	2301      	movs	r3, #1
 8016290:	4631      	mov	r1, r6
 8016292:	4628      	mov	r0, r5
 8016294:	4a19      	ldr	r2, [pc, #100]	; (80162fc <_printf_float+0x2e0>)
 8016296:	47b8      	blx	r7
 8016298:	3001      	adds	r0, #1
 801629a:	f43f af1a 	beq.w	80160d2 <_printf_float+0xb6>
 801629e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80162a2:	4313      	orrs	r3, r2
 80162a4:	d102      	bne.n	80162ac <_printf_float+0x290>
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	07d9      	lsls	r1, r3, #31
 80162aa:	d5d8      	bpl.n	801625e <_printf_float+0x242>
 80162ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162b0:	4631      	mov	r1, r6
 80162b2:	4628      	mov	r0, r5
 80162b4:	47b8      	blx	r7
 80162b6:	3001      	adds	r0, #1
 80162b8:	f43f af0b 	beq.w	80160d2 <_printf_float+0xb6>
 80162bc:	f04f 0900 	mov.w	r9, #0
 80162c0:	f104 0a1a 	add.w	sl, r4, #26
 80162c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162c6:	425b      	negs	r3, r3
 80162c8:	454b      	cmp	r3, r9
 80162ca:	dc01      	bgt.n	80162d0 <_printf_float+0x2b4>
 80162cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162ce:	e794      	b.n	80161fa <_printf_float+0x1de>
 80162d0:	2301      	movs	r3, #1
 80162d2:	4652      	mov	r2, sl
 80162d4:	4631      	mov	r1, r6
 80162d6:	4628      	mov	r0, r5
 80162d8:	47b8      	blx	r7
 80162da:	3001      	adds	r0, #1
 80162dc:	f43f aef9 	beq.w	80160d2 <_printf_float+0xb6>
 80162e0:	f109 0901 	add.w	r9, r9, #1
 80162e4:	e7ee      	b.n	80162c4 <_printf_float+0x2a8>
 80162e6:	bf00      	nop
 80162e8:	7fefffff 	.word	0x7fefffff
 80162ec:	08031f24 	.word	0x08031f24
 80162f0:	08031f28 	.word	0x08031f28
 80162f4:	08031f30 	.word	0x08031f30
 80162f8:	08031f2c 	.word	0x08031f2c
 80162fc:	08031f34 	.word	0x08031f34
 8016300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016304:	429a      	cmp	r2, r3
 8016306:	bfa8      	it	ge
 8016308:	461a      	movge	r2, r3
 801630a:	2a00      	cmp	r2, #0
 801630c:	4691      	mov	r9, r2
 801630e:	dc37      	bgt.n	8016380 <_printf_float+0x364>
 8016310:	f04f 0b00 	mov.w	fp, #0
 8016314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016318:	f104 021a 	add.w	r2, r4, #26
 801631c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016320:	ebaa 0309 	sub.w	r3, sl, r9
 8016324:	455b      	cmp	r3, fp
 8016326:	dc33      	bgt.n	8016390 <_printf_float+0x374>
 8016328:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801632c:	429a      	cmp	r2, r3
 801632e:	db3b      	blt.n	80163a8 <_printf_float+0x38c>
 8016330:	6823      	ldr	r3, [r4, #0]
 8016332:	07da      	lsls	r2, r3, #31
 8016334:	d438      	bmi.n	80163a8 <_printf_float+0x38c>
 8016336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016338:	990d      	ldr	r1, [sp, #52]	; 0x34
 801633a:	eba3 020a 	sub.w	r2, r3, sl
 801633e:	eba3 0901 	sub.w	r9, r3, r1
 8016342:	4591      	cmp	r9, r2
 8016344:	bfa8      	it	ge
 8016346:	4691      	movge	r9, r2
 8016348:	f1b9 0f00 	cmp.w	r9, #0
 801634c:	dc34      	bgt.n	80163b8 <_printf_float+0x39c>
 801634e:	f04f 0800 	mov.w	r8, #0
 8016352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016356:	f104 0a1a 	add.w	sl, r4, #26
 801635a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801635e:	1a9b      	subs	r3, r3, r2
 8016360:	eba3 0309 	sub.w	r3, r3, r9
 8016364:	4543      	cmp	r3, r8
 8016366:	f77f af7a 	ble.w	801625e <_printf_float+0x242>
 801636a:	2301      	movs	r3, #1
 801636c:	4652      	mov	r2, sl
 801636e:	4631      	mov	r1, r6
 8016370:	4628      	mov	r0, r5
 8016372:	47b8      	blx	r7
 8016374:	3001      	adds	r0, #1
 8016376:	f43f aeac 	beq.w	80160d2 <_printf_float+0xb6>
 801637a:	f108 0801 	add.w	r8, r8, #1
 801637e:	e7ec      	b.n	801635a <_printf_float+0x33e>
 8016380:	4613      	mov	r3, r2
 8016382:	4631      	mov	r1, r6
 8016384:	4642      	mov	r2, r8
 8016386:	4628      	mov	r0, r5
 8016388:	47b8      	blx	r7
 801638a:	3001      	adds	r0, #1
 801638c:	d1c0      	bne.n	8016310 <_printf_float+0x2f4>
 801638e:	e6a0      	b.n	80160d2 <_printf_float+0xb6>
 8016390:	2301      	movs	r3, #1
 8016392:	4631      	mov	r1, r6
 8016394:	4628      	mov	r0, r5
 8016396:	920b      	str	r2, [sp, #44]	; 0x2c
 8016398:	47b8      	blx	r7
 801639a:	3001      	adds	r0, #1
 801639c:	f43f ae99 	beq.w	80160d2 <_printf_float+0xb6>
 80163a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80163a2:	f10b 0b01 	add.w	fp, fp, #1
 80163a6:	e7b9      	b.n	801631c <_printf_float+0x300>
 80163a8:	4631      	mov	r1, r6
 80163aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163ae:	4628      	mov	r0, r5
 80163b0:	47b8      	blx	r7
 80163b2:	3001      	adds	r0, #1
 80163b4:	d1bf      	bne.n	8016336 <_printf_float+0x31a>
 80163b6:	e68c      	b.n	80160d2 <_printf_float+0xb6>
 80163b8:	464b      	mov	r3, r9
 80163ba:	4631      	mov	r1, r6
 80163bc:	4628      	mov	r0, r5
 80163be:	eb08 020a 	add.w	r2, r8, sl
 80163c2:	47b8      	blx	r7
 80163c4:	3001      	adds	r0, #1
 80163c6:	d1c2      	bne.n	801634e <_printf_float+0x332>
 80163c8:	e683      	b.n	80160d2 <_printf_float+0xb6>
 80163ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80163cc:	2a01      	cmp	r2, #1
 80163ce:	dc01      	bgt.n	80163d4 <_printf_float+0x3b8>
 80163d0:	07db      	lsls	r3, r3, #31
 80163d2:	d537      	bpl.n	8016444 <_printf_float+0x428>
 80163d4:	2301      	movs	r3, #1
 80163d6:	4642      	mov	r2, r8
 80163d8:	4631      	mov	r1, r6
 80163da:	4628      	mov	r0, r5
 80163dc:	47b8      	blx	r7
 80163de:	3001      	adds	r0, #1
 80163e0:	f43f ae77 	beq.w	80160d2 <_printf_float+0xb6>
 80163e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163e8:	4631      	mov	r1, r6
 80163ea:	4628      	mov	r0, r5
 80163ec:	47b8      	blx	r7
 80163ee:	3001      	adds	r0, #1
 80163f0:	f43f ae6f 	beq.w	80160d2 <_printf_float+0xb6>
 80163f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80163f8:	2200      	movs	r2, #0
 80163fa:	2300      	movs	r3, #0
 80163fc:	f7ea fb44 	bl	8000a88 <__aeabi_dcmpeq>
 8016400:	b9d8      	cbnz	r0, 801643a <_printf_float+0x41e>
 8016402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016404:	f108 0201 	add.w	r2, r8, #1
 8016408:	3b01      	subs	r3, #1
 801640a:	4631      	mov	r1, r6
 801640c:	4628      	mov	r0, r5
 801640e:	47b8      	blx	r7
 8016410:	3001      	adds	r0, #1
 8016412:	d10e      	bne.n	8016432 <_printf_float+0x416>
 8016414:	e65d      	b.n	80160d2 <_printf_float+0xb6>
 8016416:	2301      	movs	r3, #1
 8016418:	464a      	mov	r2, r9
 801641a:	4631      	mov	r1, r6
 801641c:	4628      	mov	r0, r5
 801641e:	47b8      	blx	r7
 8016420:	3001      	adds	r0, #1
 8016422:	f43f ae56 	beq.w	80160d2 <_printf_float+0xb6>
 8016426:	f108 0801 	add.w	r8, r8, #1
 801642a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801642c:	3b01      	subs	r3, #1
 801642e:	4543      	cmp	r3, r8
 8016430:	dcf1      	bgt.n	8016416 <_printf_float+0x3fa>
 8016432:	4653      	mov	r3, sl
 8016434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016438:	e6e0      	b.n	80161fc <_printf_float+0x1e0>
 801643a:	f04f 0800 	mov.w	r8, #0
 801643e:	f104 091a 	add.w	r9, r4, #26
 8016442:	e7f2      	b.n	801642a <_printf_float+0x40e>
 8016444:	2301      	movs	r3, #1
 8016446:	4642      	mov	r2, r8
 8016448:	e7df      	b.n	801640a <_printf_float+0x3ee>
 801644a:	2301      	movs	r3, #1
 801644c:	464a      	mov	r2, r9
 801644e:	4631      	mov	r1, r6
 8016450:	4628      	mov	r0, r5
 8016452:	47b8      	blx	r7
 8016454:	3001      	adds	r0, #1
 8016456:	f43f ae3c 	beq.w	80160d2 <_printf_float+0xb6>
 801645a:	f108 0801 	add.w	r8, r8, #1
 801645e:	68e3      	ldr	r3, [r4, #12]
 8016460:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016462:	1a5b      	subs	r3, r3, r1
 8016464:	4543      	cmp	r3, r8
 8016466:	dcf0      	bgt.n	801644a <_printf_float+0x42e>
 8016468:	e6fd      	b.n	8016266 <_printf_float+0x24a>
 801646a:	f04f 0800 	mov.w	r8, #0
 801646e:	f104 0919 	add.w	r9, r4, #25
 8016472:	e7f4      	b.n	801645e <_printf_float+0x442>

08016474 <_printf_common>:
 8016474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016478:	4616      	mov	r6, r2
 801647a:	4699      	mov	r9, r3
 801647c:	688a      	ldr	r2, [r1, #8]
 801647e:	690b      	ldr	r3, [r1, #16]
 8016480:	4607      	mov	r7, r0
 8016482:	4293      	cmp	r3, r2
 8016484:	bfb8      	it	lt
 8016486:	4613      	movlt	r3, r2
 8016488:	6033      	str	r3, [r6, #0]
 801648a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801648e:	460c      	mov	r4, r1
 8016490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016494:	b10a      	cbz	r2, 801649a <_printf_common+0x26>
 8016496:	3301      	adds	r3, #1
 8016498:	6033      	str	r3, [r6, #0]
 801649a:	6823      	ldr	r3, [r4, #0]
 801649c:	0699      	lsls	r1, r3, #26
 801649e:	bf42      	ittt	mi
 80164a0:	6833      	ldrmi	r3, [r6, #0]
 80164a2:	3302      	addmi	r3, #2
 80164a4:	6033      	strmi	r3, [r6, #0]
 80164a6:	6825      	ldr	r5, [r4, #0]
 80164a8:	f015 0506 	ands.w	r5, r5, #6
 80164ac:	d106      	bne.n	80164bc <_printf_common+0x48>
 80164ae:	f104 0a19 	add.w	sl, r4, #25
 80164b2:	68e3      	ldr	r3, [r4, #12]
 80164b4:	6832      	ldr	r2, [r6, #0]
 80164b6:	1a9b      	subs	r3, r3, r2
 80164b8:	42ab      	cmp	r3, r5
 80164ba:	dc28      	bgt.n	801650e <_printf_common+0x9a>
 80164bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80164c0:	1e13      	subs	r3, r2, #0
 80164c2:	6822      	ldr	r2, [r4, #0]
 80164c4:	bf18      	it	ne
 80164c6:	2301      	movne	r3, #1
 80164c8:	0692      	lsls	r2, r2, #26
 80164ca:	d42d      	bmi.n	8016528 <_printf_common+0xb4>
 80164cc:	4649      	mov	r1, r9
 80164ce:	4638      	mov	r0, r7
 80164d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164d4:	47c0      	blx	r8
 80164d6:	3001      	adds	r0, #1
 80164d8:	d020      	beq.n	801651c <_printf_common+0xa8>
 80164da:	6823      	ldr	r3, [r4, #0]
 80164dc:	68e5      	ldr	r5, [r4, #12]
 80164de:	f003 0306 	and.w	r3, r3, #6
 80164e2:	2b04      	cmp	r3, #4
 80164e4:	bf18      	it	ne
 80164e6:	2500      	movne	r5, #0
 80164e8:	6832      	ldr	r2, [r6, #0]
 80164ea:	f04f 0600 	mov.w	r6, #0
 80164ee:	68a3      	ldr	r3, [r4, #8]
 80164f0:	bf08      	it	eq
 80164f2:	1aad      	subeq	r5, r5, r2
 80164f4:	6922      	ldr	r2, [r4, #16]
 80164f6:	bf08      	it	eq
 80164f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164fc:	4293      	cmp	r3, r2
 80164fe:	bfc4      	itt	gt
 8016500:	1a9b      	subgt	r3, r3, r2
 8016502:	18ed      	addgt	r5, r5, r3
 8016504:	341a      	adds	r4, #26
 8016506:	42b5      	cmp	r5, r6
 8016508:	d11a      	bne.n	8016540 <_printf_common+0xcc>
 801650a:	2000      	movs	r0, #0
 801650c:	e008      	b.n	8016520 <_printf_common+0xac>
 801650e:	2301      	movs	r3, #1
 8016510:	4652      	mov	r2, sl
 8016512:	4649      	mov	r1, r9
 8016514:	4638      	mov	r0, r7
 8016516:	47c0      	blx	r8
 8016518:	3001      	adds	r0, #1
 801651a:	d103      	bne.n	8016524 <_printf_common+0xb0>
 801651c:	f04f 30ff 	mov.w	r0, #4294967295
 8016520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016524:	3501      	adds	r5, #1
 8016526:	e7c4      	b.n	80164b2 <_printf_common+0x3e>
 8016528:	2030      	movs	r0, #48	; 0x30
 801652a:	18e1      	adds	r1, r4, r3
 801652c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016530:	1c5a      	adds	r2, r3, #1
 8016532:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016536:	4422      	add	r2, r4
 8016538:	3302      	adds	r3, #2
 801653a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801653e:	e7c5      	b.n	80164cc <_printf_common+0x58>
 8016540:	2301      	movs	r3, #1
 8016542:	4622      	mov	r2, r4
 8016544:	4649      	mov	r1, r9
 8016546:	4638      	mov	r0, r7
 8016548:	47c0      	blx	r8
 801654a:	3001      	adds	r0, #1
 801654c:	d0e6      	beq.n	801651c <_printf_common+0xa8>
 801654e:	3601      	adds	r6, #1
 8016550:	e7d9      	b.n	8016506 <_printf_common+0x92>
	...

08016554 <_printf_i>:
 8016554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016558:	7e0f      	ldrb	r7, [r1, #24]
 801655a:	4691      	mov	r9, r2
 801655c:	2f78      	cmp	r7, #120	; 0x78
 801655e:	4680      	mov	r8, r0
 8016560:	460c      	mov	r4, r1
 8016562:	469a      	mov	sl, r3
 8016564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801656a:	d807      	bhi.n	801657c <_printf_i+0x28>
 801656c:	2f62      	cmp	r7, #98	; 0x62
 801656e:	d80a      	bhi.n	8016586 <_printf_i+0x32>
 8016570:	2f00      	cmp	r7, #0
 8016572:	f000 80d9 	beq.w	8016728 <_printf_i+0x1d4>
 8016576:	2f58      	cmp	r7, #88	; 0x58
 8016578:	f000 80a4 	beq.w	80166c4 <_printf_i+0x170>
 801657c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016584:	e03a      	b.n	80165fc <_printf_i+0xa8>
 8016586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801658a:	2b15      	cmp	r3, #21
 801658c:	d8f6      	bhi.n	801657c <_printf_i+0x28>
 801658e:	a101      	add	r1, pc, #4	; (adr r1, 8016594 <_printf_i+0x40>)
 8016590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016594:	080165ed 	.word	0x080165ed
 8016598:	08016601 	.word	0x08016601
 801659c:	0801657d 	.word	0x0801657d
 80165a0:	0801657d 	.word	0x0801657d
 80165a4:	0801657d 	.word	0x0801657d
 80165a8:	0801657d 	.word	0x0801657d
 80165ac:	08016601 	.word	0x08016601
 80165b0:	0801657d 	.word	0x0801657d
 80165b4:	0801657d 	.word	0x0801657d
 80165b8:	0801657d 	.word	0x0801657d
 80165bc:	0801657d 	.word	0x0801657d
 80165c0:	0801670f 	.word	0x0801670f
 80165c4:	08016631 	.word	0x08016631
 80165c8:	080166f1 	.word	0x080166f1
 80165cc:	0801657d 	.word	0x0801657d
 80165d0:	0801657d 	.word	0x0801657d
 80165d4:	08016731 	.word	0x08016731
 80165d8:	0801657d 	.word	0x0801657d
 80165dc:	08016631 	.word	0x08016631
 80165e0:	0801657d 	.word	0x0801657d
 80165e4:	0801657d 	.word	0x0801657d
 80165e8:	080166f9 	.word	0x080166f9
 80165ec:	682b      	ldr	r3, [r5, #0]
 80165ee:	1d1a      	adds	r2, r3, #4
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	602a      	str	r2, [r5, #0]
 80165f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165fc:	2301      	movs	r3, #1
 80165fe:	e0a4      	b.n	801674a <_printf_i+0x1f6>
 8016600:	6820      	ldr	r0, [r4, #0]
 8016602:	6829      	ldr	r1, [r5, #0]
 8016604:	0606      	lsls	r6, r0, #24
 8016606:	f101 0304 	add.w	r3, r1, #4
 801660a:	d50a      	bpl.n	8016622 <_printf_i+0xce>
 801660c:	680e      	ldr	r6, [r1, #0]
 801660e:	602b      	str	r3, [r5, #0]
 8016610:	2e00      	cmp	r6, #0
 8016612:	da03      	bge.n	801661c <_printf_i+0xc8>
 8016614:	232d      	movs	r3, #45	; 0x2d
 8016616:	4276      	negs	r6, r6
 8016618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801661c:	230a      	movs	r3, #10
 801661e:	485e      	ldr	r0, [pc, #376]	; (8016798 <_printf_i+0x244>)
 8016620:	e019      	b.n	8016656 <_printf_i+0x102>
 8016622:	680e      	ldr	r6, [r1, #0]
 8016624:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016628:	602b      	str	r3, [r5, #0]
 801662a:	bf18      	it	ne
 801662c:	b236      	sxthne	r6, r6
 801662e:	e7ef      	b.n	8016610 <_printf_i+0xbc>
 8016630:	682b      	ldr	r3, [r5, #0]
 8016632:	6820      	ldr	r0, [r4, #0]
 8016634:	1d19      	adds	r1, r3, #4
 8016636:	6029      	str	r1, [r5, #0]
 8016638:	0601      	lsls	r1, r0, #24
 801663a:	d501      	bpl.n	8016640 <_printf_i+0xec>
 801663c:	681e      	ldr	r6, [r3, #0]
 801663e:	e002      	b.n	8016646 <_printf_i+0xf2>
 8016640:	0646      	lsls	r6, r0, #25
 8016642:	d5fb      	bpl.n	801663c <_printf_i+0xe8>
 8016644:	881e      	ldrh	r6, [r3, #0]
 8016646:	2f6f      	cmp	r7, #111	; 0x6f
 8016648:	bf0c      	ite	eq
 801664a:	2308      	moveq	r3, #8
 801664c:	230a      	movne	r3, #10
 801664e:	4852      	ldr	r0, [pc, #328]	; (8016798 <_printf_i+0x244>)
 8016650:	2100      	movs	r1, #0
 8016652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016656:	6865      	ldr	r5, [r4, #4]
 8016658:	2d00      	cmp	r5, #0
 801665a:	bfa8      	it	ge
 801665c:	6821      	ldrge	r1, [r4, #0]
 801665e:	60a5      	str	r5, [r4, #8]
 8016660:	bfa4      	itt	ge
 8016662:	f021 0104 	bicge.w	r1, r1, #4
 8016666:	6021      	strge	r1, [r4, #0]
 8016668:	b90e      	cbnz	r6, 801666e <_printf_i+0x11a>
 801666a:	2d00      	cmp	r5, #0
 801666c:	d04d      	beq.n	801670a <_printf_i+0x1b6>
 801666e:	4615      	mov	r5, r2
 8016670:	fbb6 f1f3 	udiv	r1, r6, r3
 8016674:	fb03 6711 	mls	r7, r3, r1, r6
 8016678:	5dc7      	ldrb	r7, [r0, r7]
 801667a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801667e:	4637      	mov	r7, r6
 8016680:	42bb      	cmp	r3, r7
 8016682:	460e      	mov	r6, r1
 8016684:	d9f4      	bls.n	8016670 <_printf_i+0x11c>
 8016686:	2b08      	cmp	r3, #8
 8016688:	d10b      	bne.n	80166a2 <_printf_i+0x14e>
 801668a:	6823      	ldr	r3, [r4, #0]
 801668c:	07de      	lsls	r6, r3, #31
 801668e:	d508      	bpl.n	80166a2 <_printf_i+0x14e>
 8016690:	6923      	ldr	r3, [r4, #16]
 8016692:	6861      	ldr	r1, [r4, #4]
 8016694:	4299      	cmp	r1, r3
 8016696:	bfde      	ittt	le
 8016698:	2330      	movle	r3, #48	; 0x30
 801669a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801669e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80166a2:	1b52      	subs	r2, r2, r5
 80166a4:	6122      	str	r2, [r4, #16]
 80166a6:	464b      	mov	r3, r9
 80166a8:	4621      	mov	r1, r4
 80166aa:	4640      	mov	r0, r8
 80166ac:	f8cd a000 	str.w	sl, [sp]
 80166b0:	aa03      	add	r2, sp, #12
 80166b2:	f7ff fedf 	bl	8016474 <_printf_common>
 80166b6:	3001      	adds	r0, #1
 80166b8:	d14c      	bne.n	8016754 <_printf_i+0x200>
 80166ba:	f04f 30ff 	mov.w	r0, #4294967295
 80166be:	b004      	add	sp, #16
 80166c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c4:	4834      	ldr	r0, [pc, #208]	; (8016798 <_printf_i+0x244>)
 80166c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80166ca:	6829      	ldr	r1, [r5, #0]
 80166cc:	6823      	ldr	r3, [r4, #0]
 80166ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80166d2:	6029      	str	r1, [r5, #0]
 80166d4:	061d      	lsls	r5, r3, #24
 80166d6:	d514      	bpl.n	8016702 <_printf_i+0x1ae>
 80166d8:	07df      	lsls	r7, r3, #31
 80166da:	bf44      	itt	mi
 80166dc:	f043 0320 	orrmi.w	r3, r3, #32
 80166e0:	6023      	strmi	r3, [r4, #0]
 80166e2:	b91e      	cbnz	r6, 80166ec <_printf_i+0x198>
 80166e4:	6823      	ldr	r3, [r4, #0]
 80166e6:	f023 0320 	bic.w	r3, r3, #32
 80166ea:	6023      	str	r3, [r4, #0]
 80166ec:	2310      	movs	r3, #16
 80166ee:	e7af      	b.n	8016650 <_printf_i+0xfc>
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	f043 0320 	orr.w	r3, r3, #32
 80166f6:	6023      	str	r3, [r4, #0]
 80166f8:	2378      	movs	r3, #120	; 0x78
 80166fa:	4828      	ldr	r0, [pc, #160]	; (801679c <_printf_i+0x248>)
 80166fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016700:	e7e3      	b.n	80166ca <_printf_i+0x176>
 8016702:	0659      	lsls	r1, r3, #25
 8016704:	bf48      	it	mi
 8016706:	b2b6      	uxthmi	r6, r6
 8016708:	e7e6      	b.n	80166d8 <_printf_i+0x184>
 801670a:	4615      	mov	r5, r2
 801670c:	e7bb      	b.n	8016686 <_printf_i+0x132>
 801670e:	682b      	ldr	r3, [r5, #0]
 8016710:	6826      	ldr	r6, [r4, #0]
 8016712:	1d18      	adds	r0, r3, #4
 8016714:	6961      	ldr	r1, [r4, #20]
 8016716:	6028      	str	r0, [r5, #0]
 8016718:	0635      	lsls	r5, r6, #24
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	d501      	bpl.n	8016722 <_printf_i+0x1ce>
 801671e:	6019      	str	r1, [r3, #0]
 8016720:	e002      	b.n	8016728 <_printf_i+0x1d4>
 8016722:	0670      	lsls	r0, r6, #25
 8016724:	d5fb      	bpl.n	801671e <_printf_i+0x1ca>
 8016726:	8019      	strh	r1, [r3, #0]
 8016728:	2300      	movs	r3, #0
 801672a:	4615      	mov	r5, r2
 801672c:	6123      	str	r3, [r4, #16]
 801672e:	e7ba      	b.n	80166a6 <_printf_i+0x152>
 8016730:	682b      	ldr	r3, [r5, #0]
 8016732:	2100      	movs	r1, #0
 8016734:	1d1a      	adds	r2, r3, #4
 8016736:	602a      	str	r2, [r5, #0]
 8016738:	681d      	ldr	r5, [r3, #0]
 801673a:	6862      	ldr	r2, [r4, #4]
 801673c:	4628      	mov	r0, r5
 801673e:	f001 f895 	bl	801786c <memchr>
 8016742:	b108      	cbz	r0, 8016748 <_printf_i+0x1f4>
 8016744:	1b40      	subs	r0, r0, r5
 8016746:	6060      	str	r0, [r4, #4]
 8016748:	6863      	ldr	r3, [r4, #4]
 801674a:	6123      	str	r3, [r4, #16]
 801674c:	2300      	movs	r3, #0
 801674e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016752:	e7a8      	b.n	80166a6 <_printf_i+0x152>
 8016754:	462a      	mov	r2, r5
 8016756:	4649      	mov	r1, r9
 8016758:	4640      	mov	r0, r8
 801675a:	6923      	ldr	r3, [r4, #16]
 801675c:	47d0      	blx	sl
 801675e:	3001      	adds	r0, #1
 8016760:	d0ab      	beq.n	80166ba <_printf_i+0x166>
 8016762:	6823      	ldr	r3, [r4, #0]
 8016764:	079b      	lsls	r3, r3, #30
 8016766:	d413      	bmi.n	8016790 <_printf_i+0x23c>
 8016768:	68e0      	ldr	r0, [r4, #12]
 801676a:	9b03      	ldr	r3, [sp, #12]
 801676c:	4298      	cmp	r0, r3
 801676e:	bfb8      	it	lt
 8016770:	4618      	movlt	r0, r3
 8016772:	e7a4      	b.n	80166be <_printf_i+0x16a>
 8016774:	2301      	movs	r3, #1
 8016776:	4632      	mov	r2, r6
 8016778:	4649      	mov	r1, r9
 801677a:	4640      	mov	r0, r8
 801677c:	47d0      	blx	sl
 801677e:	3001      	adds	r0, #1
 8016780:	d09b      	beq.n	80166ba <_printf_i+0x166>
 8016782:	3501      	adds	r5, #1
 8016784:	68e3      	ldr	r3, [r4, #12]
 8016786:	9903      	ldr	r1, [sp, #12]
 8016788:	1a5b      	subs	r3, r3, r1
 801678a:	42ab      	cmp	r3, r5
 801678c:	dcf2      	bgt.n	8016774 <_printf_i+0x220>
 801678e:	e7eb      	b.n	8016768 <_printf_i+0x214>
 8016790:	2500      	movs	r5, #0
 8016792:	f104 0619 	add.w	r6, r4, #25
 8016796:	e7f5      	b.n	8016784 <_printf_i+0x230>
 8016798:	08031f36 	.word	0x08031f36
 801679c:	08031f47 	.word	0x08031f47

080167a0 <cleanup_glue>:
 80167a0:	b538      	push	{r3, r4, r5, lr}
 80167a2:	460c      	mov	r4, r1
 80167a4:	6809      	ldr	r1, [r1, #0]
 80167a6:	4605      	mov	r5, r0
 80167a8:	b109      	cbz	r1, 80167ae <cleanup_glue+0xe>
 80167aa:	f7ff fff9 	bl	80167a0 <cleanup_glue>
 80167ae:	4621      	mov	r1, r4
 80167b0:	4628      	mov	r0, r5
 80167b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167b6:	f7ff bab7 	b.w	8015d28 <_free_r>
	...

080167bc <_reclaim_reent>:
 80167bc:	4b2c      	ldr	r3, [pc, #176]	; (8016870 <_reclaim_reent+0xb4>)
 80167be:	b570      	push	{r4, r5, r6, lr}
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	4604      	mov	r4, r0
 80167c4:	4283      	cmp	r3, r0
 80167c6:	d051      	beq.n	801686c <_reclaim_reent+0xb0>
 80167c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80167ca:	b143      	cbz	r3, 80167de <_reclaim_reent+0x22>
 80167cc:	68db      	ldr	r3, [r3, #12]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d14a      	bne.n	8016868 <_reclaim_reent+0xac>
 80167d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167d4:	6819      	ldr	r1, [r3, #0]
 80167d6:	b111      	cbz	r1, 80167de <_reclaim_reent+0x22>
 80167d8:	4620      	mov	r0, r4
 80167da:	f7ff faa5 	bl	8015d28 <_free_r>
 80167de:	6961      	ldr	r1, [r4, #20]
 80167e0:	b111      	cbz	r1, 80167e8 <_reclaim_reent+0x2c>
 80167e2:	4620      	mov	r0, r4
 80167e4:	f7ff faa0 	bl	8015d28 <_free_r>
 80167e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80167ea:	b111      	cbz	r1, 80167f2 <_reclaim_reent+0x36>
 80167ec:	4620      	mov	r0, r4
 80167ee:	f7ff fa9b 	bl	8015d28 <_free_r>
 80167f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80167f4:	b111      	cbz	r1, 80167fc <_reclaim_reent+0x40>
 80167f6:	4620      	mov	r0, r4
 80167f8:	f7ff fa96 	bl	8015d28 <_free_r>
 80167fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80167fe:	b111      	cbz	r1, 8016806 <_reclaim_reent+0x4a>
 8016800:	4620      	mov	r0, r4
 8016802:	f7ff fa91 	bl	8015d28 <_free_r>
 8016806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016808:	b111      	cbz	r1, 8016810 <_reclaim_reent+0x54>
 801680a:	4620      	mov	r0, r4
 801680c:	f7ff fa8c 	bl	8015d28 <_free_r>
 8016810:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016812:	b111      	cbz	r1, 801681a <_reclaim_reent+0x5e>
 8016814:	4620      	mov	r0, r4
 8016816:	f7ff fa87 	bl	8015d28 <_free_r>
 801681a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801681c:	b111      	cbz	r1, 8016824 <_reclaim_reent+0x68>
 801681e:	4620      	mov	r0, r4
 8016820:	f7ff fa82 	bl	8015d28 <_free_r>
 8016824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016826:	b111      	cbz	r1, 801682e <_reclaim_reent+0x72>
 8016828:	4620      	mov	r0, r4
 801682a:	f7ff fa7d 	bl	8015d28 <_free_r>
 801682e:	69a3      	ldr	r3, [r4, #24]
 8016830:	b1e3      	cbz	r3, 801686c <_reclaim_reent+0xb0>
 8016832:	4620      	mov	r0, r4
 8016834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016836:	4798      	blx	r3
 8016838:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801683a:	b1b9      	cbz	r1, 801686c <_reclaim_reent+0xb0>
 801683c:	4620      	mov	r0, r4
 801683e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016842:	f7ff bfad 	b.w	80167a0 <cleanup_glue>
 8016846:	5949      	ldr	r1, [r1, r5]
 8016848:	b941      	cbnz	r1, 801685c <_reclaim_reent+0xa0>
 801684a:	3504      	adds	r5, #4
 801684c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801684e:	2d80      	cmp	r5, #128	; 0x80
 8016850:	68d9      	ldr	r1, [r3, #12]
 8016852:	d1f8      	bne.n	8016846 <_reclaim_reent+0x8a>
 8016854:	4620      	mov	r0, r4
 8016856:	f7ff fa67 	bl	8015d28 <_free_r>
 801685a:	e7ba      	b.n	80167d2 <_reclaim_reent+0x16>
 801685c:	680e      	ldr	r6, [r1, #0]
 801685e:	4620      	mov	r0, r4
 8016860:	f7ff fa62 	bl	8015d28 <_free_r>
 8016864:	4631      	mov	r1, r6
 8016866:	e7ef      	b.n	8016848 <_reclaim_reent+0x8c>
 8016868:	2500      	movs	r5, #0
 801686a:	e7ef      	b.n	801684c <_reclaim_reent+0x90>
 801686c:	bd70      	pop	{r4, r5, r6, pc}
 801686e:	bf00      	nop
 8016870:	200000b8 	.word	0x200000b8

08016874 <_sbrk_r>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	2300      	movs	r3, #0
 8016878:	4d05      	ldr	r5, [pc, #20]	; (8016890 <_sbrk_r+0x1c>)
 801687a:	4604      	mov	r4, r0
 801687c:	4608      	mov	r0, r1
 801687e:	602b      	str	r3, [r5, #0]
 8016880:	f7ed f81e 	bl	80038c0 <_sbrk>
 8016884:	1c43      	adds	r3, r0, #1
 8016886:	d102      	bne.n	801688e <_sbrk_r+0x1a>
 8016888:	682b      	ldr	r3, [r5, #0]
 801688a:	b103      	cbz	r3, 801688e <_sbrk_r+0x1a>
 801688c:	6023      	str	r3, [r4, #0]
 801688e:	bd38      	pop	{r3, r4, r5, pc}
 8016890:	20002488 	.word	0x20002488

08016894 <__sread>:
 8016894:	b510      	push	{r4, lr}
 8016896:	460c      	mov	r4, r1
 8016898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801689c:	f001 fcf2 	bl	8018284 <_read_r>
 80168a0:	2800      	cmp	r0, #0
 80168a2:	bfab      	itete	ge
 80168a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80168a6:	89a3      	ldrhlt	r3, [r4, #12]
 80168a8:	181b      	addge	r3, r3, r0
 80168aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80168ae:	bfac      	ite	ge
 80168b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80168b2:	81a3      	strhlt	r3, [r4, #12]
 80168b4:	bd10      	pop	{r4, pc}

080168b6 <__swrite>:
 80168b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ba:	461f      	mov	r7, r3
 80168bc:	898b      	ldrh	r3, [r1, #12]
 80168be:	4605      	mov	r5, r0
 80168c0:	05db      	lsls	r3, r3, #23
 80168c2:	460c      	mov	r4, r1
 80168c4:	4616      	mov	r6, r2
 80168c6:	d505      	bpl.n	80168d4 <__swrite+0x1e>
 80168c8:	2302      	movs	r3, #2
 80168ca:	2200      	movs	r2, #0
 80168cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168d0:	f000 ffba 	bl	8017848 <_lseek_r>
 80168d4:	89a3      	ldrh	r3, [r4, #12]
 80168d6:	4632      	mov	r2, r6
 80168d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80168dc:	81a3      	strh	r3, [r4, #12]
 80168de:	4628      	mov	r0, r5
 80168e0:	463b      	mov	r3, r7
 80168e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168ea:	f000 b84f 	b.w	801698c <_write_r>

080168ee <__sseek>:
 80168ee:	b510      	push	{r4, lr}
 80168f0:	460c      	mov	r4, r1
 80168f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168f6:	f000 ffa7 	bl	8017848 <_lseek_r>
 80168fa:	1c43      	adds	r3, r0, #1
 80168fc:	89a3      	ldrh	r3, [r4, #12]
 80168fe:	bf15      	itete	ne
 8016900:	6560      	strne	r0, [r4, #84]	; 0x54
 8016902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801690a:	81a3      	strheq	r3, [r4, #12]
 801690c:	bf18      	it	ne
 801690e:	81a3      	strhne	r3, [r4, #12]
 8016910:	bd10      	pop	{r4, pc}

08016912 <__sclose>:
 8016912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016916:	f000 b84b 	b.w	80169b0 <_close_r>

0801691a <_vsniprintf_r>:
 801691a:	b530      	push	{r4, r5, lr}
 801691c:	4614      	mov	r4, r2
 801691e:	2c00      	cmp	r4, #0
 8016920:	4605      	mov	r5, r0
 8016922:	461a      	mov	r2, r3
 8016924:	b09b      	sub	sp, #108	; 0x6c
 8016926:	da05      	bge.n	8016934 <_vsniprintf_r+0x1a>
 8016928:	238b      	movs	r3, #139	; 0x8b
 801692a:	6003      	str	r3, [r0, #0]
 801692c:	f04f 30ff 	mov.w	r0, #4294967295
 8016930:	b01b      	add	sp, #108	; 0x6c
 8016932:	bd30      	pop	{r4, r5, pc}
 8016934:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016938:	f8ad 300c 	strh.w	r3, [sp, #12]
 801693c:	bf0c      	ite	eq
 801693e:	4623      	moveq	r3, r4
 8016940:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016944:	9302      	str	r3, [sp, #8]
 8016946:	9305      	str	r3, [sp, #20]
 8016948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801694c:	9100      	str	r1, [sp, #0]
 801694e:	9104      	str	r1, [sp, #16]
 8016950:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016954:	4669      	mov	r1, sp
 8016956:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016958:	f001 fb94 	bl	8018084 <_svfiprintf_r>
 801695c:	1c43      	adds	r3, r0, #1
 801695e:	bfbc      	itt	lt
 8016960:	238b      	movlt	r3, #139	; 0x8b
 8016962:	602b      	strlt	r3, [r5, #0]
 8016964:	2c00      	cmp	r4, #0
 8016966:	d0e3      	beq.n	8016930 <_vsniprintf_r+0x16>
 8016968:	2200      	movs	r2, #0
 801696a:	9b00      	ldr	r3, [sp, #0]
 801696c:	701a      	strb	r2, [r3, #0]
 801696e:	e7df      	b.n	8016930 <_vsniprintf_r+0x16>

08016970 <vsniprintf>:
 8016970:	b507      	push	{r0, r1, r2, lr}
 8016972:	9300      	str	r3, [sp, #0]
 8016974:	4613      	mov	r3, r2
 8016976:	460a      	mov	r2, r1
 8016978:	4601      	mov	r1, r0
 801697a:	4803      	ldr	r0, [pc, #12]	; (8016988 <vsniprintf+0x18>)
 801697c:	6800      	ldr	r0, [r0, #0]
 801697e:	f7ff ffcc 	bl	801691a <_vsniprintf_r>
 8016982:	b003      	add	sp, #12
 8016984:	f85d fb04 	ldr.w	pc, [sp], #4
 8016988:	200000b8 	.word	0x200000b8

0801698c <_write_r>:
 801698c:	b538      	push	{r3, r4, r5, lr}
 801698e:	4604      	mov	r4, r0
 8016990:	4608      	mov	r0, r1
 8016992:	4611      	mov	r1, r2
 8016994:	2200      	movs	r2, #0
 8016996:	4d05      	ldr	r5, [pc, #20]	; (80169ac <_write_r+0x20>)
 8016998:	602a      	str	r2, [r5, #0]
 801699a:	461a      	mov	r2, r3
 801699c:	f7ec ff44 	bl	8003828 <_write>
 80169a0:	1c43      	adds	r3, r0, #1
 80169a2:	d102      	bne.n	80169aa <_write_r+0x1e>
 80169a4:	682b      	ldr	r3, [r5, #0]
 80169a6:	b103      	cbz	r3, 80169aa <_write_r+0x1e>
 80169a8:	6023      	str	r3, [r4, #0]
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	20002488 	.word	0x20002488

080169b0 <_close_r>:
 80169b0:	b538      	push	{r3, r4, r5, lr}
 80169b2:	2300      	movs	r3, #0
 80169b4:	4d05      	ldr	r5, [pc, #20]	; (80169cc <_close_r+0x1c>)
 80169b6:	4604      	mov	r4, r0
 80169b8:	4608      	mov	r0, r1
 80169ba:	602b      	str	r3, [r5, #0]
 80169bc:	f7ec ff50 	bl	8003860 <_close>
 80169c0:	1c43      	adds	r3, r0, #1
 80169c2:	d102      	bne.n	80169ca <_close_r+0x1a>
 80169c4:	682b      	ldr	r3, [r5, #0]
 80169c6:	b103      	cbz	r3, 80169ca <_close_r+0x1a>
 80169c8:	6023      	str	r3, [r4, #0]
 80169ca:	bd38      	pop	{r3, r4, r5, pc}
 80169cc:	20002488 	.word	0x20002488

080169d0 <quorem>:
 80169d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d4:	6903      	ldr	r3, [r0, #16]
 80169d6:	690c      	ldr	r4, [r1, #16]
 80169d8:	4607      	mov	r7, r0
 80169da:	42a3      	cmp	r3, r4
 80169dc:	f2c0 8082 	blt.w	8016ae4 <quorem+0x114>
 80169e0:	3c01      	subs	r4, #1
 80169e2:	f100 0514 	add.w	r5, r0, #20
 80169e6:	f101 0814 	add.w	r8, r1, #20
 80169ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80169ee:	9301      	str	r3, [sp, #4]
 80169f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80169f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80169f8:	3301      	adds	r3, #1
 80169fa:	429a      	cmp	r2, r3
 80169fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8016a00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016a04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016a08:	d331      	bcc.n	8016a6e <quorem+0x9e>
 8016a0a:	f04f 0e00 	mov.w	lr, #0
 8016a0e:	4640      	mov	r0, r8
 8016a10:	46ac      	mov	ip, r5
 8016a12:	46f2      	mov	sl, lr
 8016a14:	f850 2b04 	ldr.w	r2, [r0], #4
 8016a18:	b293      	uxth	r3, r2
 8016a1a:	fb06 e303 	mla	r3, r6, r3, lr
 8016a1e:	0c12      	lsrs	r2, r2, #16
 8016a20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	fb06 e202 	mla	r2, r6, r2, lr
 8016a2a:	ebaa 0303 	sub.w	r3, sl, r3
 8016a2e:	f8dc a000 	ldr.w	sl, [ip]
 8016a32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016a36:	fa1f fa8a 	uxth.w	sl, sl
 8016a3a:	4453      	add	r3, sl
 8016a3c:	f8dc a000 	ldr.w	sl, [ip]
 8016a40:	b292      	uxth	r2, r2
 8016a42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016a46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a50:	4581      	cmp	r9, r0
 8016a52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016a56:	f84c 3b04 	str.w	r3, [ip], #4
 8016a5a:	d2db      	bcs.n	8016a14 <quorem+0x44>
 8016a5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8016a60:	b92b      	cbnz	r3, 8016a6e <quorem+0x9e>
 8016a62:	9b01      	ldr	r3, [sp, #4]
 8016a64:	3b04      	subs	r3, #4
 8016a66:	429d      	cmp	r5, r3
 8016a68:	461a      	mov	r2, r3
 8016a6a:	d32f      	bcc.n	8016acc <quorem+0xfc>
 8016a6c:	613c      	str	r4, [r7, #16]
 8016a6e:	4638      	mov	r0, r7
 8016a70:	f001 f994 	bl	8017d9c <__mcmp>
 8016a74:	2800      	cmp	r0, #0
 8016a76:	db25      	blt.n	8016ac4 <quorem+0xf4>
 8016a78:	4628      	mov	r0, r5
 8016a7a:	f04f 0c00 	mov.w	ip, #0
 8016a7e:	3601      	adds	r6, #1
 8016a80:	f858 1b04 	ldr.w	r1, [r8], #4
 8016a84:	f8d0 e000 	ldr.w	lr, [r0]
 8016a88:	b28b      	uxth	r3, r1
 8016a8a:	ebac 0303 	sub.w	r3, ip, r3
 8016a8e:	fa1f f28e 	uxth.w	r2, lr
 8016a92:	4413      	add	r3, r2
 8016a94:	0c0a      	lsrs	r2, r1, #16
 8016a96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016a9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016aa4:	45c1      	cmp	r9, r8
 8016aa6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016aaa:	f840 3b04 	str.w	r3, [r0], #4
 8016aae:	d2e7      	bcs.n	8016a80 <quorem+0xb0>
 8016ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016ab8:	b922      	cbnz	r2, 8016ac4 <quorem+0xf4>
 8016aba:	3b04      	subs	r3, #4
 8016abc:	429d      	cmp	r5, r3
 8016abe:	461a      	mov	r2, r3
 8016ac0:	d30a      	bcc.n	8016ad8 <quorem+0x108>
 8016ac2:	613c      	str	r4, [r7, #16]
 8016ac4:	4630      	mov	r0, r6
 8016ac6:	b003      	add	sp, #12
 8016ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016acc:	6812      	ldr	r2, [r2, #0]
 8016ace:	3b04      	subs	r3, #4
 8016ad0:	2a00      	cmp	r2, #0
 8016ad2:	d1cb      	bne.n	8016a6c <quorem+0x9c>
 8016ad4:	3c01      	subs	r4, #1
 8016ad6:	e7c6      	b.n	8016a66 <quorem+0x96>
 8016ad8:	6812      	ldr	r2, [r2, #0]
 8016ada:	3b04      	subs	r3, #4
 8016adc:	2a00      	cmp	r2, #0
 8016ade:	d1f0      	bne.n	8016ac2 <quorem+0xf2>
 8016ae0:	3c01      	subs	r4, #1
 8016ae2:	e7eb      	b.n	8016abc <quorem+0xec>
 8016ae4:	2000      	movs	r0, #0
 8016ae6:	e7ee      	b.n	8016ac6 <quorem+0xf6>

08016ae8 <_dtoa_r>:
 8016ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aec:	4616      	mov	r6, r2
 8016aee:	461f      	mov	r7, r3
 8016af0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016af2:	b099      	sub	sp, #100	; 0x64
 8016af4:	4605      	mov	r5, r0
 8016af6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016afa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8016afe:	b974      	cbnz	r4, 8016b1e <_dtoa_r+0x36>
 8016b00:	2010      	movs	r0, #16
 8016b02:	f7ff f8eb 	bl	8015cdc <malloc>
 8016b06:	4602      	mov	r2, r0
 8016b08:	6268      	str	r0, [r5, #36]	; 0x24
 8016b0a:	b920      	cbnz	r0, 8016b16 <_dtoa_r+0x2e>
 8016b0c:	21ea      	movs	r1, #234	; 0xea
 8016b0e:	4ba8      	ldr	r3, [pc, #672]	; (8016db0 <_dtoa_r+0x2c8>)
 8016b10:	48a8      	ldr	r0, [pc, #672]	; (8016db4 <_dtoa_r+0x2cc>)
 8016b12:	f001 fbc9 	bl	80182a8 <__assert_func>
 8016b16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b1a:	6004      	str	r4, [r0, #0]
 8016b1c:	60c4      	str	r4, [r0, #12]
 8016b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016b20:	6819      	ldr	r1, [r3, #0]
 8016b22:	b151      	cbz	r1, 8016b3a <_dtoa_r+0x52>
 8016b24:	685a      	ldr	r2, [r3, #4]
 8016b26:	2301      	movs	r3, #1
 8016b28:	4093      	lsls	r3, r2
 8016b2a:	604a      	str	r2, [r1, #4]
 8016b2c:	608b      	str	r3, [r1, #8]
 8016b2e:	4628      	mov	r0, r5
 8016b30:	f000 fef6 	bl	8017920 <_Bfree>
 8016b34:	2200      	movs	r2, #0
 8016b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016b38:	601a      	str	r2, [r3, #0]
 8016b3a:	1e3b      	subs	r3, r7, #0
 8016b3c:	bfaf      	iteee	ge
 8016b3e:	2300      	movge	r3, #0
 8016b40:	2201      	movlt	r2, #1
 8016b42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016b46:	9305      	strlt	r3, [sp, #20]
 8016b48:	bfa8      	it	ge
 8016b4a:	f8c8 3000 	strge.w	r3, [r8]
 8016b4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016b52:	4b99      	ldr	r3, [pc, #612]	; (8016db8 <_dtoa_r+0x2d0>)
 8016b54:	bfb8      	it	lt
 8016b56:	f8c8 2000 	strlt.w	r2, [r8]
 8016b5a:	ea33 0309 	bics.w	r3, r3, r9
 8016b5e:	d119      	bne.n	8016b94 <_dtoa_r+0xac>
 8016b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8016b64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016b66:	6013      	str	r3, [r2, #0]
 8016b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b6c:	4333      	orrs	r3, r6
 8016b6e:	f000 857f 	beq.w	8017670 <_dtoa_r+0xb88>
 8016b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016b74:	b953      	cbnz	r3, 8016b8c <_dtoa_r+0xa4>
 8016b76:	4b91      	ldr	r3, [pc, #580]	; (8016dbc <_dtoa_r+0x2d4>)
 8016b78:	e022      	b.n	8016bc0 <_dtoa_r+0xd8>
 8016b7a:	4b91      	ldr	r3, [pc, #580]	; (8016dc0 <_dtoa_r+0x2d8>)
 8016b7c:	9303      	str	r3, [sp, #12]
 8016b7e:	3308      	adds	r3, #8
 8016b80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016b82:	6013      	str	r3, [r2, #0]
 8016b84:	9803      	ldr	r0, [sp, #12]
 8016b86:	b019      	add	sp, #100	; 0x64
 8016b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8c:	4b8b      	ldr	r3, [pc, #556]	; (8016dbc <_dtoa_r+0x2d4>)
 8016b8e:	9303      	str	r3, [sp, #12]
 8016b90:	3303      	adds	r3, #3
 8016b92:	e7f5      	b.n	8016b80 <_dtoa_r+0x98>
 8016b94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016b98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8016b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	f7e9 ff70 	bl	8000a88 <__aeabi_dcmpeq>
 8016ba8:	4680      	mov	r8, r0
 8016baa:	b158      	cbz	r0, 8016bc4 <_dtoa_r+0xdc>
 8016bac:	2301      	movs	r3, #1
 8016bae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	f000 8558 	beq.w	801766a <_dtoa_r+0xb82>
 8016bba:	4882      	ldr	r0, [pc, #520]	; (8016dc4 <_dtoa_r+0x2dc>)
 8016bbc:	6018      	str	r0, [r3, #0]
 8016bbe:	1e43      	subs	r3, r0, #1
 8016bc0:	9303      	str	r3, [sp, #12]
 8016bc2:	e7df      	b.n	8016b84 <_dtoa_r+0x9c>
 8016bc4:	ab16      	add	r3, sp, #88	; 0x58
 8016bc6:	9301      	str	r3, [sp, #4]
 8016bc8:	ab17      	add	r3, sp, #92	; 0x5c
 8016bca:	9300      	str	r3, [sp, #0]
 8016bcc:	4628      	mov	r0, r5
 8016bce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016bd2:	f001 f98b 	bl	8017eec <__d2b>
 8016bd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016bda:	4683      	mov	fp, r0
 8016bdc:	2c00      	cmp	r4, #0
 8016bde:	d07f      	beq.n	8016ce0 <_dtoa_r+0x1f8>
 8016be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016be6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8016bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8016bf2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8016bf6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	4b72      	ldr	r3, [pc, #456]	; (8016dc8 <_dtoa_r+0x2e0>)
 8016bfe:	f7e9 fb23 	bl	8000248 <__aeabi_dsub>
 8016c02:	a365      	add	r3, pc, #404	; (adr r3, 8016d98 <_dtoa_r+0x2b0>)
 8016c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c08:	f7e9 fcd6 	bl	80005b8 <__aeabi_dmul>
 8016c0c:	a364      	add	r3, pc, #400	; (adr r3, 8016da0 <_dtoa_r+0x2b8>)
 8016c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c12:	f7e9 fb1b 	bl	800024c <__adddf3>
 8016c16:	4606      	mov	r6, r0
 8016c18:	4620      	mov	r0, r4
 8016c1a:	460f      	mov	r7, r1
 8016c1c:	f7e9 fc62 	bl	80004e4 <__aeabi_i2d>
 8016c20:	a361      	add	r3, pc, #388	; (adr r3, 8016da8 <_dtoa_r+0x2c0>)
 8016c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c26:	f7e9 fcc7 	bl	80005b8 <__aeabi_dmul>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	4630      	mov	r0, r6
 8016c30:	4639      	mov	r1, r7
 8016c32:	f7e9 fb0b 	bl	800024c <__adddf3>
 8016c36:	4606      	mov	r6, r0
 8016c38:	460f      	mov	r7, r1
 8016c3a:	f7e9 ff6d 	bl	8000b18 <__aeabi_d2iz>
 8016c3e:	2200      	movs	r2, #0
 8016c40:	4682      	mov	sl, r0
 8016c42:	2300      	movs	r3, #0
 8016c44:	4630      	mov	r0, r6
 8016c46:	4639      	mov	r1, r7
 8016c48:	f7e9 ff28 	bl	8000a9c <__aeabi_dcmplt>
 8016c4c:	b148      	cbz	r0, 8016c62 <_dtoa_r+0x17a>
 8016c4e:	4650      	mov	r0, sl
 8016c50:	f7e9 fc48 	bl	80004e4 <__aeabi_i2d>
 8016c54:	4632      	mov	r2, r6
 8016c56:	463b      	mov	r3, r7
 8016c58:	f7e9 ff16 	bl	8000a88 <__aeabi_dcmpeq>
 8016c5c:	b908      	cbnz	r0, 8016c62 <_dtoa_r+0x17a>
 8016c5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c62:	f1ba 0f16 	cmp.w	sl, #22
 8016c66:	d858      	bhi.n	8016d1a <_dtoa_r+0x232>
 8016c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016c6c:	4b57      	ldr	r3, [pc, #348]	; (8016dcc <_dtoa_r+0x2e4>)
 8016c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c76:	f7e9 ff11 	bl	8000a9c <__aeabi_dcmplt>
 8016c7a:	2800      	cmp	r0, #0
 8016c7c:	d04f      	beq.n	8016d1e <_dtoa_r+0x236>
 8016c7e:	2300      	movs	r3, #0
 8016c80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016c88:	1b1c      	subs	r4, r3, r4
 8016c8a:	1e63      	subs	r3, r4, #1
 8016c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016c8e:	bf49      	itett	mi
 8016c90:	f1c4 0301 	rsbmi	r3, r4, #1
 8016c94:	2300      	movpl	r3, #0
 8016c96:	9306      	strmi	r3, [sp, #24]
 8016c98:	2300      	movmi	r3, #0
 8016c9a:	bf54      	ite	pl
 8016c9c:	9306      	strpl	r3, [sp, #24]
 8016c9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8016ca0:	f1ba 0f00 	cmp.w	sl, #0
 8016ca4:	db3d      	blt.n	8016d22 <_dtoa_r+0x23a>
 8016ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ca8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016cac:	4453      	add	r3, sl
 8016cae:	9309      	str	r3, [sp, #36]	; 0x24
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8016cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016cb6:	2b09      	cmp	r3, #9
 8016cb8:	f200 808c 	bhi.w	8016dd4 <_dtoa_r+0x2ec>
 8016cbc:	2b05      	cmp	r3, #5
 8016cbe:	bfc4      	itt	gt
 8016cc0:	3b04      	subgt	r3, #4
 8016cc2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8016cc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016cc6:	bfc8      	it	gt
 8016cc8:	2400      	movgt	r4, #0
 8016cca:	f1a3 0302 	sub.w	r3, r3, #2
 8016cce:	bfd8      	it	le
 8016cd0:	2401      	movle	r4, #1
 8016cd2:	2b03      	cmp	r3, #3
 8016cd4:	f200 808a 	bhi.w	8016dec <_dtoa_r+0x304>
 8016cd8:	e8df f003 	tbb	[pc, r3]
 8016cdc:	5b4d4f2d 	.word	0x5b4d4f2d
 8016ce0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8016ce4:	441c      	add	r4, r3
 8016ce6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8016cea:	2b20      	cmp	r3, #32
 8016cec:	bfc3      	ittte	gt
 8016cee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016cf2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8016cf6:	fa09 f303 	lslgt.w	r3, r9, r3
 8016cfa:	f1c3 0320 	rsble	r3, r3, #32
 8016cfe:	bfc6      	itte	gt
 8016d00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016d04:	4318      	orrgt	r0, r3
 8016d06:	fa06 f003 	lslle.w	r0, r6, r3
 8016d0a:	f7e9 fbdb 	bl	80004c4 <__aeabi_ui2d>
 8016d0e:	2301      	movs	r3, #1
 8016d10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8016d14:	3c01      	subs	r4, #1
 8016d16:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d18:	e76f      	b.n	8016bfa <_dtoa_r+0x112>
 8016d1a:	2301      	movs	r3, #1
 8016d1c:	e7b2      	b.n	8016c84 <_dtoa_r+0x19c>
 8016d1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016d20:	e7b1      	b.n	8016c86 <_dtoa_r+0x19e>
 8016d22:	9b06      	ldr	r3, [sp, #24]
 8016d24:	eba3 030a 	sub.w	r3, r3, sl
 8016d28:	9306      	str	r3, [sp, #24]
 8016d2a:	f1ca 0300 	rsb	r3, sl, #0
 8016d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d30:	2300      	movs	r3, #0
 8016d32:	930e      	str	r3, [sp, #56]	; 0x38
 8016d34:	e7be      	b.n	8016cb4 <_dtoa_r+0x1cc>
 8016d36:	2300      	movs	r3, #0
 8016d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	dc58      	bgt.n	8016df2 <_dtoa_r+0x30a>
 8016d40:	f04f 0901 	mov.w	r9, #1
 8016d44:	464b      	mov	r3, r9
 8016d46:	f8cd 9020 	str.w	r9, [sp, #32]
 8016d4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8016d4e:	2200      	movs	r2, #0
 8016d50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8016d52:	6042      	str	r2, [r0, #4]
 8016d54:	2204      	movs	r2, #4
 8016d56:	f102 0614 	add.w	r6, r2, #20
 8016d5a:	429e      	cmp	r6, r3
 8016d5c:	6841      	ldr	r1, [r0, #4]
 8016d5e:	d94e      	bls.n	8016dfe <_dtoa_r+0x316>
 8016d60:	4628      	mov	r0, r5
 8016d62:	f000 fd9d 	bl	80178a0 <_Balloc>
 8016d66:	9003      	str	r0, [sp, #12]
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	d14c      	bne.n	8016e06 <_dtoa_r+0x31e>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016d72:	4b17      	ldr	r3, [pc, #92]	; (8016dd0 <_dtoa_r+0x2e8>)
 8016d74:	e6cc      	b.n	8016b10 <_dtoa_r+0x28>
 8016d76:	2301      	movs	r3, #1
 8016d78:	e7de      	b.n	8016d38 <_dtoa_r+0x250>
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016d80:	eb0a 0903 	add.w	r9, sl, r3
 8016d84:	f109 0301 	add.w	r3, r9, #1
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	9308      	str	r3, [sp, #32]
 8016d8c:	bfb8      	it	lt
 8016d8e:	2301      	movlt	r3, #1
 8016d90:	e7dd      	b.n	8016d4e <_dtoa_r+0x266>
 8016d92:	2301      	movs	r3, #1
 8016d94:	e7f2      	b.n	8016d7c <_dtoa_r+0x294>
 8016d96:	bf00      	nop
 8016d98:	636f4361 	.word	0x636f4361
 8016d9c:	3fd287a7 	.word	0x3fd287a7
 8016da0:	8b60c8b3 	.word	0x8b60c8b3
 8016da4:	3fc68a28 	.word	0x3fc68a28
 8016da8:	509f79fb 	.word	0x509f79fb
 8016dac:	3fd34413 	.word	0x3fd34413
 8016db0:	08031f65 	.word	0x08031f65
 8016db4:	08031f7c 	.word	0x08031f7c
 8016db8:	7ff00000 	.word	0x7ff00000
 8016dbc:	08031f61 	.word	0x08031f61
 8016dc0:	08031f58 	.word	0x08031f58
 8016dc4:	08031f35 	.word	0x08031f35
 8016dc8:	3ff80000 	.word	0x3ff80000
 8016dcc:	08032070 	.word	0x08032070
 8016dd0:	08031fd7 	.word	0x08031fd7
 8016dd4:	2401      	movs	r4, #1
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8016dda:	9322      	str	r3, [sp, #136]	; 0x88
 8016ddc:	f04f 39ff 	mov.w	r9, #4294967295
 8016de0:	2200      	movs	r2, #0
 8016de2:	2312      	movs	r3, #18
 8016de4:	f8cd 9020 	str.w	r9, [sp, #32]
 8016de8:	9223      	str	r2, [sp, #140]	; 0x8c
 8016dea:	e7b0      	b.n	8016d4e <_dtoa_r+0x266>
 8016dec:	2301      	movs	r3, #1
 8016dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8016df0:	e7f4      	b.n	8016ddc <_dtoa_r+0x2f4>
 8016df2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8016df6:	464b      	mov	r3, r9
 8016df8:	f8cd 9020 	str.w	r9, [sp, #32]
 8016dfc:	e7a7      	b.n	8016d4e <_dtoa_r+0x266>
 8016dfe:	3101      	adds	r1, #1
 8016e00:	6041      	str	r1, [r0, #4]
 8016e02:	0052      	lsls	r2, r2, #1
 8016e04:	e7a7      	b.n	8016d56 <_dtoa_r+0x26e>
 8016e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016e08:	9a03      	ldr	r2, [sp, #12]
 8016e0a:	601a      	str	r2, [r3, #0]
 8016e0c:	9b08      	ldr	r3, [sp, #32]
 8016e0e:	2b0e      	cmp	r3, #14
 8016e10:	f200 80a8 	bhi.w	8016f64 <_dtoa_r+0x47c>
 8016e14:	2c00      	cmp	r4, #0
 8016e16:	f000 80a5 	beq.w	8016f64 <_dtoa_r+0x47c>
 8016e1a:	f1ba 0f00 	cmp.w	sl, #0
 8016e1e:	dd34      	ble.n	8016e8a <_dtoa_r+0x3a2>
 8016e20:	4a9a      	ldr	r2, [pc, #616]	; (801708c <_dtoa_r+0x5a4>)
 8016e22:	f00a 030f 	and.w	r3, sl, #15
 8016e26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016e2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8016e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016e32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8016e36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8016e3a:	d016      	beq.n	8016e6a <_dtoa_r+0x382>
 8016e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e40:	4b93      	ldr	r3, [pc, #588]	; (8017090 <_dtoa_r+0x5a8>)
 8016e42:	2703      	movs	r7, #3
 8016e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016e48:	f7e9 fce0 	bl	800080c <__aeabi_ddiv>
 8016e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016e50:	f004 040f 	and.w	r4, r4, #15
 8016e54:	4e8e      	ldr	r6, [pc, #568]	; (8017090 <_dtoa_r+0x5a8>)
 8016e56:	b954      	cbnz	r4, 8016e6e <_dtoa_r+0x386>
 8016e58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016e60:	f7e9 fcd4 	bl	800080c <__aeabi_ddiv>
 8016e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016e68:	e029      	b.n	8016ebe <_dtoa_r+0x3d6>
 8016e6a:	2702      	movs	r7, #2
 8016e6c:	e7f2      	b.n	8016e54 <_dtoa_r+0x36c>
 8016e6e:	07e1      	lsls	r1, r4, #31
 8016e70:	d508      	bpl.n	8016e84 <_dtoa_r+0x39c>
 8016e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016e76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016e7a:	f7e9 fb9d 	bl	80005b8 <__aeabi_dmul>
 8016e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016e82:	3701      	adds	r7, #1
 8016e84:	1064      	asrs	r4, r4, #1
 8016e86:	3608      	adds	r6, #8
 8016e88:	e7e5      	b.n	8016e56 <_dtoa_r+0x36e>
 8016e8a:	f000 80a5 	beq.w	8016fd8 <_dtoa_r+0x4f0>
 8016e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e92:	f1ca 0400 	rsb	r4, sl, #0
 8016e96:	4b7d      	ldr	r3, [pc, #500]	; (801708c <_dtoa_r+0x5a4>)
 8016e98:	f004 020f 	and.w	r2, r4, #15
 8016e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea4:	f7e9 fb88 	bl	80005b8 <__aeabi_dmul>
 8016ea8:	2702      	movs	r7, #2
 8016eaa:	2300      	movs	r3, #0
 8016eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016eb0:	4e77      	ldr	r6, [pc, #476]	; (8017090 <_dtoa_r+0x5a8>)
 8016eb2:	1124      	asrs	r4, r4, #4
 8016eb4:	2c00      	cmp	r4, #0
 8016eb6:	f040 8084 	bne.w	8016fc2 <_dtoa_r+0x4da>
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d1d2      	bne.n	8016e64 <_dtoa_r+0x37c>
 8016ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f000 808b 	beq.w	8016fdc <_dtoa_r+0x4f4>
 8016ec6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016eca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8016ece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	4b6f      	ldr	r3, [pc, #444]	; (8017094 <_dtoa_r+0x5ac>)
 8016ed6:	f7e9 fde1 	bl	8000a9c <__aeabi_dcmplt>
 8016eda:	2800      	cmp	r0, #0
 8016edc:	d07e      	beq.n	8016fdc <_dtoa_r+0x4f4>
 8016ede:	9b08      	ldr	r3, [sp, #32]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d07b      	beq.n	8016fdc <_dtoa_r+0x4f4>
 8016ee4:	f1b9 0f00 	cmp.w	r9, #0
 8016ee8:	dd38      	ble.n	8016f5c <_dtoa_r+0x474>
 8016eea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016eee:	2200      	movs	r2, #0
 8016ef0:	4b69      	ldr	r3, [pc, #420]	; (8017098 <_dtoa_r+0x5b0>)
 8016ef2:	f7e9 fb61 	bl	80005b8 <__aeabi_dmul>
 8016ef6:	464c      	mov	r4, r9
 8016ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016efc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8016f00:	3701      	adds	r7, #1
 8016f02:	4638      	mov	r0, r7
 8016f04:	f7e9 faee 	bl	80004e4 <__aeabi_i2d>
 8016f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f0c:	f7e9 fb54 	bl	80005b8 <__aeabi_dmul>
 8016f10:	2200      	movs	r2, #0
 8016f12:	4b62      	ldr	r3, [pc, #392]	; (801709c <_dtoa_r+0x5b4>)
 8016f14:	f7e9 f99a 	bl	800024c <__adddf3>
 8016f18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016f1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8016f20:	9611      	str	r6, [sp, #68]	; 0x44
 8016f22:	2c00      	cmp	r4, #0
 8016f24:	d15d      	bne.n	8016fe2 <_dtoa_r+0x4fa>
 8016f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	4b5c      	ldr	r3, [pc, #368]	; (80170a0 <_dtoa_r+0x5b8>)
 8016f2e:	f7e9 f98b 	bl	8000248 <__aeabi_dsub>
 8016f32:	4602      	mov	r2, r0
 8016f34:	460b      	mov	r3, r1
 8016f36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016f3a:	4633      	mov	r3, r6
 8016f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f3e:	f7e9 fdcb 	bl	8000ad8 <__aeabi_dcmpgt>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	f040 829c 	bne.w	8017480 <_dtoa_r+0x998>
 8016f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016f52:	f7e9 fda3 	bl	8000a9c <__aeabi_dcmplt>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f040 8290 	bne.w	801747c <_dtoa_r+0x994>
 8016f5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8016f60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8016f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	f2c0 8152 	blt.w	8017210 <_dtoa_r+0x728>
 8016f6c:	f1ba 0f0e 	cmp.w	sl, #14
 8016f70:	f300 814e 	bgt.w	8017210 <_dtoa_r+0x728>
 8016f74:	4b45      	ldr	r3, [pc, #276]	; (801708c <_dtoa_r+0x5a4>)
 8016f76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016f7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016f7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8016f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f280 80db 	bge.w	8017140 <_dtoa_r+0x658>
 8016f8a:	9b08      	ldr	r3, [sp, #32]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	f300 80d7 	bgt.w	8017140 <_dtoa_r+0x658>
 8016f92:	f040 8272 	bne.w	801747a <_dtoa_r+0x992>
 8016f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	4b40      	ldr	r3, [pc, #256]	; (80170a0 <_dtoa_r+0x5b8>)
 8016f9e:	f7e9 fb0b 	bl	80005b8 <__aeabi_dmul>
 8016fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016fa6:	f7e9 fd8d 	bl	8000ac4 <__aeabi_dcmpge>
 8016faa:	9c08      	ldr	r4, [sp, #32]
 8016fac:	4626      	mov	r6, r4
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f040 8248 	bne.w	8017444 <_dtoa_r+0x95c>
 8016fb4:	2331      	movs	r3, #49	; 0x31
 8016fb6:	9f03      	ldr	r7, [sp, #12]
 8016fb8:	f10a 0a01 	add.w	sl, sl, #1
 8016fbc:	f807 3b01 	strb.w	r3, [r7], #1
 8016fc0:	e244      	b.n	801744c <_dtoa_r+0x964>
 8016fc2:	07e2      	lsls	r2, r4, #31
 8016fc4:	d505      	bpl.n	8016fd2 <_dtoa_r+0x4ea>
 8016fc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016fca:	f7e9 faf5 	bl	80005b8 <__aeabi_dmul>
 8016fce:	2301      	movs	r3, #1
 8016fd0:	3701      	adds	r7, #1
 8016fd2:	1064      	asrs	r4, r4, #1
 8016fd4:	3608      	adds	r6, #8
 8016fd6:	e76d      	b.n	8016eb4 <_dtoa_r+0x3cc>
 8016fd8:	2702      	movs	r7, #2
 8016fda:	e770      	b.n	8016ebe <_dtoa_r+0x3d6>
 8016fdc:	46d0      	mov	r8, sl
 8016fde:	9c08      	ldr	r4, [sp, #32]
 8016fe0:	e78f      	b.n	8016f02 <_dtoa_r+0x41a>
 8016fe2:	9903      	ldr	r1, [sp, #12]
 8016fe4:	4b29      	ldr	r3, [pc, #164]	; (801708c <_dtoa_r+0x5a4>)
 8016fe6:	4421      	add	r1, r4
 8016fe8:	9112      	str	r1, [sp, #72]	; 0x48
 8016fea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016ff0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8016ff4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016ff8:	2900      	cmp	r1, #0
 8016ffa:	d055      	beq.n	80170a8 <_dtoa_r+0x5c0>
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	4929      	ldr	r1, [pc, #164]	; (80170a4 <_dtoa_r+0x5bc>)
 8017000:	f7e9 fc04 	bl	800080c <__aeabi_ddiv>
 8017004:	463b      	mov	r3, r7
 8017006:	4632      	mov	r2, r6
 8017008:	f7e9 f91e 	bl	8000248 <__aeabi_dsub>
 801700c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8017010:	9f03      	ldr	r7, [sp, #12]
 8017012:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017016:	f7e9 fd7f 	bl	8000b18 <__aeabi_d2iz>
 801701a:	4604      	mov	r4, r0
 801701c:	f7e9 fa62 	bl	80004e4 <__aeabi_i2d>
 8017020:	4602      	mov	r2, r0
 8017022:	460b      	mov	r3, r1
 8017024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017028:	f7e9 f90e 	bl	8000248 <__aeabi_dsub>
 801702c:	4602      	mov	r2, r0
 801702e:	460b      	mov	r3, r1
 8017030:	3430      	adds	r4, #48	; 0x30
 8017032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801703a:	f807 4b01 	strb.w	r4, [r7], #1
 801703e:	f7e9 fd2d 	bl	8000a9c <__aeabi_dcmplt>
 8017042:	2800      	cmp	r0, #0
 8017044:	d174      	bne.n	8017130 <_dtoa_r+0x648>
 8017046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801704a:	2000      	movs	r0, #0
 801704c:	4911      	ldr	r1, [pc, #68]	; (8017094 <_dtoa_r+0x5ac>)
 801704e:	f7e9 f8fb 	bl	8000248 <__aeabi_dsub>
 8017052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017056:	f7e9 fd21 	bl	8000a9c <__aeabi_dcmplt>
 801705a:	2800      	cmp	r0, #0
 801705c:	f040 80b7 	bne.w	80171ce <_dtoa_r+0x6e6>
 8017060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017062:	429f      	cmp	r7, r3
 8017064:	f43f af7a 	beq.w	8016f5c <_dtoa_r+0x474>
 8017068:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801706c:	2200      	movs	r2, #0
 801706e:	4b0a      	ldr	r3, [pc, #40]	; (8017098 <_dtoa_r+0x5b0>)
 8017070:	f7e9 faa2 	bl	80005b8 <__aeabi_dmul>
 8017074:	2200      	movs	r2, #0
 8017076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801707a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801707e:	4b06      	ldr	r3, [pc, #24]	; (8017098 <_dtoa_r+0x5b0>)
 8017080:	f7e9 fa9a 	bl	80005b8 <__aeabi_dmul>
 8017084:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017088:	e7c3      	b.n	8017012 <_dtoa_r+0x52a>
 801708a:	bf00      	nop
 801708c:	08032070 	.word	0x08032070
 8017090:	08032048 	.word	0x08032048
 8017094:	3ff00000 	.word	0x3ff00000
 8017098:	40240000 	.word	0x40240000
 801709c:	401c0000 	.word	0x401c0000
 80170a0:	40140000 	.word	0x40140000
 80170a4:	3fe00000 	.word	0x3fe00000
 80170a8:	4630      	mov	r0, r6
 80170aa:	4639      	mov	r1, r7
 80170ac:	f7e9 fa84 	bl	80005b8 <__aeabi_dmul>
 80170b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80170b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80170b6:	9c03      	ldr	r4, [sp, #12]
 80170b8:	9314      	str	r3, [sp, #80]	; 0x50
 80170ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80170be:	f7e9 fd2b 	bl	8000b18 <__aeabi_d2iz>
 80170c2:	9015      	str	r0, [sp, #84]	; 0x54
 80170c4:	f7e9 fa0e 	bl	80004e4 <__aeabi_i2d>
 80170c8:	4602      	mov	r2, r0
 80170ca:	460b      	mov	r3, r1
 80170cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80170d0:	f7e9 f8ba 	bl	8000248 <__aeabi_dsub>
 80170d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80170d6:	4606      	mov	r6, r0
 80170d8:	3330      	adds	r3, #48	; 0x30
 80170da:	f804 3b01 	strb.w	r3, [r4], #1
 80170de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80170e0:	460f      	mov	r7, r1
 80170e2:	429c      	cmp	r4, r3
 80170e4:	f04f 0200 	mov.w	r2, #0
 80170e8:	d124      	bne.n	8017134 <_dtoa_r+0x64c>
 80170ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80170ee:	4bb0      	ldr	r3, [pc, #704]	; (80173b0 <_dtoa_r+0x8c8>)
 80170f0:	f7e9 f8ac 	bl	800024c <__adddf3>
 80170f4:	4602      	mov	r2, r0
 80170f6:	460b      	mov	r3, r1
 80170f8:	4630      	mov	r0, r6
 80170fa:	4639      	mov	r1, r7
 80170fc:	f7e9 fcec 	bl	8000ad8 <__aeabi_dcmpgt>
 8017100:	2800      	cmp	r0, #0
 8017102:	d163      	bne.n	80171cc <_dtoa_r+0x6e4>
 8017104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017108:	2000      	movs	r0, #0
 801710a:	49a9      	ldr	r1, [pc, #676]	; (80173b0 <_dtoa_r+0x8c8>)
 801710c:	f7e9 f89c 	bl	8000248 <__aeabi_dsub>
 8017110:	4602      	mov	r2, r0
 8017112:	460b      	mov	r3, r1
 8017114:	4630      	mov	r0, r6
 8017116:	4639      	mov	r1, r7
 8017118:	f7e9 fcc0 	bl	8000a9c <__aeabi_dcmplt>
 801711c:	2800      	cmp	r0, #0
 801711e:	f43f af1d 	beq.w	8016f5c <_dtoa_r+0x474>
 8017122:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8017124:	1e7b      	subs	r3, r7, #1
 8017126:	9314      	str	r3, [sp, #80]	; 0x50
 8017128:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801712c:	2b30      	cmp	r3, #48	; 0x30
 801712e:	d0f8      	beq.n	8017122 <_dtoa_r+0x63a>
 8017130:	46c2      	mov	sl, r8
 8017132:	e03b      	b.n	80171ac <_dtoa_r+0x6c4>
 8017134:	4b9f      	ldr	r3, [pc, #636]	; (80173b4 <_dtoa_r+0x8cc>)
 8017136:	f7e9 fa3f 	bl	80005b8 <__aeabi_dmul>
 801713a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801713e:	e7bc      	b.n	80170ba <_dtoa_r+0x5d2>
 8017140:	9f03      	ldr	r7, [sp, #12]
 8017142:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8017146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801714a:	4640      	mov	r0, r8
 801714c:	4649      	mov	r1, r9
 801714e:	f7e9 fb5d 	bl	800080c <__aeabi_ddiv>
 8017152:	f7e9 fce1 	bl	8000b18 <__aeabi_d2iz>
 8017156:	4604      	mov	r4, r0
 8017158:	f7e9 f9c4 	bl	80004e4 <__aeabi_i2d>
 801715c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017160:	f7e9 fa2a 	bl	80005b8 <__aeabi_dmul>
 8017164:	4602      	mov	r2, r0
 8017166:	460b      	mov	r3, r1
 8017168:	4640      	mov	r0, r8
 801716a:	4649      	mov	r1, r9
 801716c:	f7e9 f86c 	bl	8000248 <__aeabi_dsub>
 8017170:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8017174:	f807 6b01 	strb.w	r6, [r7], #1
 8017178:	9e03      	ldr	r6, [sp, #12]
 801717a:	f8dd c020 	ldr.w	ip, [sp, #32]
 801717e:	1bbe      	subs	r6, r7, r6
 8017180:	45b4      	cmp	ip, r6
 8017182:	4602      	mov	r2, r0
 8017184:	460b      	mov	r3, r1
 8017186:	d136      	bne.n	80171f6 <_dtoa_r+0x70e>
 8017188:	f7e9 f860 	bl	800024c <__adddf3>
 801718c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017190:	4680      	mov	r8, r0
 8017192:	4689      	mov	r9, r1
 8017194:	f7e9 fca0 	bl	8000ad8 <__aeabi_dcmpgt>
 8017198:	bb58      	cbnz	r0, 80171f2 <_dtoa_r+0x70a>
 801719a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801719e:	4640      	mov	r0, r8
 80171a0:	4649      	mov	r1, r9
 80171a2:	f7e9 fc71 	bl	8000a88 <__aeabi_dcmpeq>
 80171a6:	b108      	cbz	r0, 80171ac <_dtoa_r+0x6c4>
 80171a8:	07e1      	lsls	r1, r4, #31
 80171aa:	d422      	bmi.n	80171f2 <_dtoa_r+0x70a>
 80171ac:	4628      	mov	r0, r5
 80171ae:	4659      	mov	r1, fp
 80171b0:	f000 fbb6 	bl	8017920 <_Bfree>
 80171b4:	2300      	movs	r3, #0
 80171b6:	703b      	strb	r3, [r7, #0]
 80171b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80171ba:	f10a 0001 	add.w	r0, sl, #1
 80171be:	6018      	str	r0, [r3, #0]
 80171c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	f43f acde 	beq.w	8016b84 <_dtoa_r+0x9c>
 80171c8:	601f      	str	r7, [r3, #0]
 80171ca:	e4db      	b.n	8016b84 <_dtoa_r+0x9c>
 80171cc:	4627      	mov	r7, r4
 80171ce:	463b      	mov	r3, r7
 80171d0:	461f      	mov	r7, r3
 80171d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80171d6:	2a39      	cmp	r2, #57	; 0x39
 80171d8:	d107      	bne.n	80171ea <_dtoa_r+0x702>
 80171da:	9a03      	ldr	r2, [sp, #12]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d1f7      	bne.n	80171d0 <_dtoa_r+0x6e8>
 80171e0:	2230      	movs	r2, #48	; 0x30
 80171e2:	9903      	ldr	r1, [sp, #12]
 80171e4:	f108 0801 	add.w	r8, r8, #1
 80171e8:	700a      	strb	r2, [r1, #0]
 80171ea:	781a      	ldrb	r2, [r3, #0]
 80171ec:	3201      	adds	r2, #1
 80171ee:	701a      	strb	r2, [r3, #0]
 80171f0:	e79e      	b.n	8017130 <_dtoa_r+0x648>
 80171f2:	46d0      	mov	r8, sl
 80171f4:	e7eb      	b.n	80171ce <_dtoa_r+0x6e6>
 80171f6:	2200      	movs	r2, #0
 80171f8:	4b6e      	ldr	r3, [pc, #440]	; (80173b4 <_dtoa_r+0x8cc>)
 80171fa:	f7e9 f9dd 	bl	80005b8 <__aeabi_dmul>
 80171fe:	2200      	movs	r2, #0
 8017200:	2300      	movs	r3, #0
 8017202:	4680      	mov	r8, r0
 8017204:	4689      	mov	r9, r1
 8017206:	f7e9 fc3f 	bl	8000a88 <__aeabi_dcmpeq>
 801720a:	2800      	cmp	r0, #0
 801720c:	d09b      	beq.n	8017146 <_dtoa_r+0x65e>
 801720e:	e7cd      	b.n	80171ac <_dtoa_r+0x6c4>
 8017210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017212:	2a00      	cmp	r2, #0
 8017214:	f000 80d0 	beq.w	80173b8 <_dtoa_r+0x8d0>
 8017218:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801721a:	2a01      	cmp	r2, #1
 801721c:	f300 80ae 	bgt.w	801737c <_dtoa_r+0x894>
 8017220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017222:	2a00      	cmp	r2, #0
 8017224:	f000 80a6 	beq.w	8017374 <_dtoa_r+0x88c>
 8017228:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801722c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801722e:	9f06      	ldr	r7, [sp, #24]
 8017230:	9a06      	ldr	r2, [sp, #24]
 8017232:	2101      	movs	r1, #1
 8017234:	441a      	add	r2, r3
 8017236:	9206      	str	r2, [sp, #24]
 8017238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801723a:	4628      	mov	r0, r5
 801723c:	441a      	add	r2, r3
 801723e:	9209      	str	r2, [sp, #36]	; 0x24
 8017240:	f000 fc24 	bl	8017a8c <__i2b>
 8017244:	4606      	mov	r6, r0
 8017246:	2f00      	cmp	r7, #0
 8017248:	dd0c      	ble.n	8017264 <_dtoa_r+0x77c>
 801724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801724c:	2b00      	cmp	r3, #0
 801724e:	dd09      	ble.n	8017264 <_dtoa_r+0x77c>
 8017250:	42bb      	cmp	r3, r7
 8017252:	bfa8      	it	ge
 8017254:	463b      	movge	r3, r7
 8017256:	9a06      	ldr	r2, [sp, #24]
 8017258:	1aff      	subs	r7, r7, r3
 801725a:	1ad2      	subs	r2, r2, r3
 801725c:	9206      	str	r2, [sp, #24]
 801725e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017260:	1ad3      	subs	r3, r2, r3
 8017262:	9309      	str	r3, [sp, #36]	; 0x24
 8017264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017266:	b1f3      	cbz	r3, 80172a6 <_dtoa_r+0x7be>
 8017268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801726a:	2b00      	cmp	r3, #0
 801726c:	f000 80a8 	beq.w	80173c0 <_dtoa_r+0x8d8>
 8017270:	2c00      	cmp	r4, #0
 8017272:	dd10      	ble.n	8017296 <_dtoa_r+0x7ae>
 8017274:	4631      	mov	r1, r6
 8017276:	4622      	mov	r2, r4
 8017278:	4628      	mov	r0, r5
 801727a:	f000 fcc5 	bl	8017c08 <__pow5mult>
 801727e:	465a      	mov	r2, fp
 8017280:	4601      	mov	r1, r0
 8017282:	4606      	mov	r6, r0
 8017284:	4628      	mov	r0, r5
 8017286:	f000 fc17 	bl	8017ab8 <__multiply>
 801728a:	4680      	mov	r8, r0
 801728c:	4659      	mov	r1, fp
 801728e:	4628      	mov	r0, r5
 8017290:	f000 fb46 	bl	8017920 <_Bfree>
 8017294:	46c3      	mov	fp, r8
 8017296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017298:	1b1a      	subs	r2, r3, r4
 801729a:	d004      	beq.n	80172a6 <_dtoa_r+0x7be>
 801729c:	4659      	mov	r1, fp
 801729e:	4628      	mov	r0, r5
 80172a0:	f000 fcb2 	bl	8017c08 <__pow5mult>
 80172a4:	4683      	mov	fp, r0
 80172a6:	2101      	movs	r1, #1
 80172a8:	4628      	mov	r0, r5
 80172aa:	f000 fbef 	bl	8017a8c <__i2b>
 80172ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172b0:	4604      	mov	r4, r0
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	f340 8086 	ble.w	80173c4 <_dtoa_r+0x8dc>
 80172b8:	461a      	mov	r2, r3
 80172ba:	4601      	mov	r1, r0
 80172bc:	4628      	mov	r0, r5
 80172be:	f000 fca3 	bl	8017c08 <__pow5mult>
 80172c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80172c4:	4604      	mov	r4, r0
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	dd7f      	ble.n	80173ca <_dtoa_r+0x8e2>
 80172ca:	f04f 0800 	mov.w	r8, #0
 80172ce:	6923      	ldr	r3, [r4, #16]
 80172d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80172d4:	6918      	ldr	r0, [r3, #16]
 80172d6:	f000 fb8b 	bl	80179f0 <__hi0bits>
 80172da:	f1c0 0020 	rsb	r0, r0, #32
 80172de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172e0:	4418      	add	r0, r3
 80172e2:	f010 001f 	ands.w	r0, r0, #31
 80172e6:	f000 8092 	beq.w	801740e <_dtoa_r+0x926>
 80172ea:	f1c0 0320 	rsb	r3, r0, #32
 80172ee:	2b04      	cmp	r3, #4
 80172f0:	f340 808a 	ble.w	8017408 <_dtoa_r+0x920>
 80172f4:	f1c0 001c 	rsb	r0, r0, #28
 80172f8:	9b06      	ldr	r3, [sp, #24]
 80172fa:	4407      	add	r7, r0
 80172fc:	4403      	add	r3, r0
 80172fe:	9306      	str	r3, [sp, #24]
 8017300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017302:	4403      	add	r3, r0
 8017304:	9309      	str	r3, [sp, #36]	; 0x24
 8017306:	9b06      	ldr	r3, [sp, #24]
 8017308:	2b00      	cmp	r3, #0
 801730a:	dd05      	ble.n	8017318 <_dtoa_r+0x830>
 801730c:	4659      	mov	r1, fp
 801730e:	461a      	mov	r2, r3
 8017310:	4628      	mov	r0, r5
 8017312:	f000 fcd3 	bl	8017cbc <__lshift>
 8017316:	4683      	mov	fp, r0
 8017318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801731a:	2b00      	cmp	r3, #0
 801731c:	dd05      	ble.n	801732a <_dtoa_r+0x842>
 801731e:	4621      	mov	r1, r4
 8017320:	461a      	mov	r2, r3
 8017322:	4628      	mov	r0, r5
 8017324:	f000 fcca 	bl	8017cbc <__lshift>
 8017328:	4604      	mov	r4, r0
 801732a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801732c:	2b00      	cmp	r3, #0
 801732e:	d070      	beq.n	8017412 <_dtoa_r+0x92a>
 8017330:	4621      	mov	r1, r4
 8017332:	4658      	mov	r0, fp
 8017334:	f000 fd32 	bl	8017d9c <__mcmp>
 8017338:	2800      	cmp	r0, #0
 801733a:	da6a      	bge.n	8017412 <_dtoa_r+0x92a>
 801733c:	2300      	movs	r3, #0
 801733e:	4659      	mov	r1, fp
 8017340:	220a      	movs	r2, #10
 8017342:	4628      	mov	r0, r5
 8017344:	f000 fb0e 	bl	8017964 <__multadd>
 8017348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801734a:	4683      	mov	fp, r0
 801734c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017350:	2b00      	cmp	r3, #0
 8017352:	f000 8194 	beq.w	801767e <_dtoa_r+0xb96>
 8017356:	4631      	mov	r1, r6
 8017358:	2300      	movs	r3, #0
 801735a:	220a      	movs	r2, #10
 801735c:	4628      	mov	r0, r5
 801735e:	f000 fb01 	bl	8017964 <__multadd>
 8017362:	f1b9 0f00 	cmp.w	r9, #0
 8017366:	4606      	mov	r6, r0
 8017368:	f300 8093 	bgt.w	8017492 <_dtoa_r+0x9aa>
 801736c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801736e:	2b02      	cmp	r3, #2
 8017370:	dc57      	bgt.n	8017422 <_dtoa_r+0x93a>
 8017372:	e08e      	b.n	8017492 <_dtoa_r+0x9aa>
 8017374:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801737a:	e757      	b.n	801722c <_dtoa_r+0x744>
 801737c:	9b08      	ldr	r3, [sp, #32]
 801737e:	1e5c      	subs	r4, r3, #1
 8017380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017382:	42a3      	cmp	r3, r4
 8017384:	bfb7      	itett	lt
 8017386:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017388:	1b1c      	subge	r4, r3, r4
 801738a:	1ae2      	sublt	r2, r4, r3
 801738c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801738e:	bfbe      	ittt	lt
 8017390:	940a      	strlt	r4, [sp, #40]	; 0x28
 8017392:	189b      	addlt	r3, r3, r2
 8017394:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017396:	9b08      	ldr	r3, [sp, #32]
 8017398:	bfb8      	it	lt
 801739a:	2400      	movlt	r4, #0
 801739c:	2b00      	cmp	r3, #0
 801739e:	bfbb      	ittet	lt
 80173a0:	9b06      	ldrlt	r3, [sp, #24]
 80173a2:	9a08      	ldrlt	r2, [sp, #32]
 80173a4:	9f06      	ldrge	r7, [sp, #24]
 80173a6:	1a9f      	sublt	r7, r3, r2
 80173a8:	bfac      	ite	ge
 80173aa:	9b08      	ldrge	r3, [sp, #32]
 80173ac:	2300      	movlt	r3, #0
 80173ae:	e73f      	b.n	8017230 <_dtoa_r+0x748>
 80173b0:	3fe00000 	.word	0x3fe00000
 80173b4:	40240000 	.word	0x40240000
 80173b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80173ba:	9f06      	ldr	r7, [sp, #24]
 80173bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80173be:	e742      	b.n	8017246 <_dtoa_r+0x75e>
 80173c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173c2:	e76b      	b.n	801729c <_dtoa_r+0x7b4>
 80173c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80173c6:	2b01      	cmp	r3, #1
 80173c8:	dc19      	bgt.n	80173fe <_dtoa_r+0x916>
 80173ca:	9b04      	ldr	r3, [sp, #16]
 80173cc:	b9bb      	cbnz	r3, 80173fe <_dtoa_r+0x916>
 80173ce:	9b05      	ldr	r3, [sp, #20]
 80173d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173d4:	b99b      	cbnz	r3, 80173fe <_dtoa_r+0x916>
 80173d6:	9b05      	ldr	r3, [sp, #20]
 80173d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173dc:	0d1b      	lsrs	r3, r3, #20
 80173de:	051b      	lsls	r3, r3, #20
 80173e0:	b183      	cbz	r3, 8017404 <_dtoa_r+0x91c>
 80173e2:	f04f 0801 	mov.w	r8, #1
 80173e6:	9b06      	ldr	r3, [sp, #24]
 80173e8:	3301      	adds	r3, #1
 80173ea:	9306      	str	r3, [sp, #24]
 80173ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ee:	3301      	adds	r3, #1
 80173f0:	9309      	str	r3, [sp, #36]	; 0x24
 80173f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f47f af6a 	bne.w	80172ce <_dtoa_r+0x7e6>
 80173fa:	2001      	movs	r0, #1
 80173fc:	e76f      	b.n	80172de <_dtoa_r+0x7f6>
 80173fe:	f04f 0800 	mov.w	r8, #0
 8017402:	e7f6      	b.n	80173f2 <_dtoa_r+0x90a>
 8017404:	4698      	mov	r8, r3
 8017406:	e7f4      	b.n	80173f2 <_dtoa_r+0x90a>
 8017408:	f43f af7d 	beq.w	8017306 <_dtoa_r+0x81e>
 801740c:	4618      	mov	r0, r3
 801740e:	301c      	adds	r0, #28
 8017410:	e772      	b.n	80172f8 <_dtoa_r+0x810>
 8017412:	9b08      	ldr	r3, [sp, #32]
 8017414:	2b00      	cmp	r3, #0
 8017416:	dc36      	bgt.n	8017486 <_dtoa_r+0x99e>
 8017418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801741a:	2b02      	cmp	r3, #2
 801741c:	dd33      	ble.n	8017486 <_dtoa_r+0x99e>
 801741e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017422:	f1b9 0f00 	cmp.w	r9, #0
 8017426:	d10d      	bne.n	8017444 <_dtoa_r+0x95c>
 8017428:	4621      	mov	r1, r4
 801742a:	464b      	mov	r3, r9
 801742c:	2205      	movs	r2, #5
 801742e:	4628      	mov	r0, r5
 8017430:	f000 fa98 	bl	8017964 <__multadd>
 8017434:	4601      	mov	r1, r0
 8017436:	4604      	mov	r4, r0
 8017438:	4658      	mov	r0, fp
 801743a:	f000 fcaf 	bl	8017d9c <__mcmp>
 801743e:	2800      	cmp	r0, #0
 8017440:	f73f adb8 	bgt.w	8016fb4 <_dtoa_r+0x4cc>
 8017444:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017446:	9f03      	ldr	r7, [sp, #12]
 8017448:	ea6f 0a03 	mvn.w	sl, r3
 801744c:	f04f 0800 	mov.w	r8, #0
 8017450:	4621      	mov	r1, r4
 8017452:	4628      	mov	r0, r5
 8017454:	f000 fa64 	bl	8017920 <_Bfree>
 8017458:	2e00      	cmp	r6, #0
 801745a:	f43f aea7 	beq.w	80171ac <_dtoa_r+0x6c4>
 801745e:	f1b8 0f00 	cmp.w	r8, #0
 8017462:	d005      	beq.n	8017470 <_dtoa_r+0x988>
 8017464:	45b0      	cmp	r8, r6
 8017466:	d003      	beq.n	8017470 <_dtoa_r+0x988>
 8017468:	4641      	mov	r1, r8
 801746a:	4628      	mov	r0, r5
 801746c:	f000 fa58 	bl	8017920 <_Bfree>
 8017470:	4631      	mov	r1, r6
 8017472:	4628      	mov	r0, r5
 8017474:	f000 fa54 	bl	8017920 <_Bfree>
 8017478:	e698      	b.n	80171ac <_dtoa_r+0x6c4>
 801747a:	2400      	movs	r4, #0
 801747c:	4626      	mov	r6, r4
 801747e:	e7e1      	b.n	8017444 <_dtoa_r+0x95c>
 8017480:	46c2      	mov	sl, r8
 8017482:	4626      	mov	r6, r4
 8017484:	e596      	b.n	8016fb4 <_dtoa_r+0x4cc>
 8017486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801748c:	2b00      	cmp	r3, #0
 801748e:	f000 80fd 	beq.w	801768c <_dtoa_r+0xba4>
 8017492:	2f00      	cmp	r7, #0
 8017494:	dd05      	ble.n	80174a2 <_dtoa_r+0x9ba>
 8017496:	4631      	mov	r1, r6
 8017498:	463a      	mov	r2, r7
 801749a:	4628      	mov	r0, r5
 801749c:	f000 fc0e 	bl	8017cbc <__lshift>
 80174a0:	4606      	mov	r6, r0
 80174a2:	f1b8 0f00 	cmp.w	r8, #0
 80174a6:	d05c      	beq.n	8017562 <_dtoa_r+0xa7a>
 80174a8:	4628      	mov	r0, r5
 80174aa:	6871      	ldr	r1, [r6, #4]
 80174ac:	f000 f9f8 	bl	80178a0 <_Balloc>
 80174b0:	4607      	mov	r7, r0
 80174b2:	b928      	cbnz	r0, 80174c0 <_dtoa_r+0x9d8>
 80174b4:	4602      	mov	r2, r0
 80174b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80174ba:	4b7f      	ldr	r3, [pc, #508]	; (80176b8 <_dtoa_r+0xbd0>)
 80174bc:	f7ff bb28 	b.w	8016b10 <_dtoa_r+0x28>
 80174c0:	6932      	ldr	r2, [r6, #16]
 80174c2:	f106 010c 	add.w	r1, r6, #12
 80174c6:	3202      	adds	r2, #2
 80174c8:	0092      	lsls	r2, r2, #2
 80174ca:	300c      	adds	r0, #12
 80174cc:	f7fe fc16 	bl	8015cfc <memcpy>
 80174d0:	2201      	movs	r2, #1
 80174d2:	4639      	mov	r1, r7
 80174d4:	4628      	mov	r0, r5
 80174d6:	f000 fbf1 	bl	8017cbc <__lshift>
 80174da:	46b0      	mov	r8, r6
 80174dc:	4606      	mov	r6, r0
 80174de:	9b03      	ldr	r3, [sp, #12]
 80174e0:	3301      	adds	r3, #1
 80174e2:	9308      	str	r3, [sp, #32]
 80174e4:	9b03      	ldr	r3, [sp, #12]
 80174e6:	444b      	add	r3, r9
 80174e8:	930a      	str	r3, [sp, #40]	; 0x28
 80174ea:	9b04      	ldr	r3, [sp, #16]
 80174ec:	f003 0301 	and.w	r3, r3, #1
 80174f0:	9309      	str	r3, [sp, #36]	; 0x24
 80174f2:	9b08      	ldr	r3, [sp, #32]
 80174f4:	4621      	mov	r1, r4
 80174f6:	3b01      	subs	r3, #1
 80174f8:	4658      	mov	r0, fp
 80174fa:	9304      	str	r3, [sp, #16]
 80174fc:	f7ff fa68 	bl	80169d0 <quorem>
 8017500:	4603      	mov	r3, r0
 8017502:	4641      	mov	r1, r8
 8017504:	3330      	adds	r3, #48	; 0x30
 8017506:	9006      	str	r0, [sp, #24]
 8017508:	4658      	mov	r0, fp
 801750a:	930b      	str	r3, [sp, #44]	; 0x2c
 801750c:	f000 fc46 	bl	8017d9c <__mcmp>
 8017510:	4632      	mov	r2, r6
 8017512:	4681      	mov	r9, r0
 8017514:	4621      	mov	r1, r4
 8017516:	4628      	mov	r0, r5
 8017518:	f000 fc5c 	bl	8017dd4 <__mdiff>
 801751c:	68c2      	ldr	r2, [r0, #12]
 801751e:	4607      	mov	r7, r0
 8017520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017522:	bb02      	cbnz	r2, 8017566 <_dtoa_r+0xa7e>
 8017524:	4601      	mov	r1, r0
 8017526:	4658      	mov	r0, fp
 8017528:	f000 fc38 	bl	8017d9c <__mcmp>
 801752c:	4602      	mov	r2, r0
 801752e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017530:	4639      	mov	r1, r7
 8017532:	4628      	mov	r0, r5
 8017534:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8017538:	f000 f9f2 	bl	8017920 <_Bfree>
 801753c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801753e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017540:	9f08      	ldr	r7, [sp, #32]
 8017542:	ea43 0102 	orr.w	r1, r3, r2
 8017546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017548:	430b      	orrs	r3, r1
 801754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801754c:	d10d      	bne.n	801756a <_dtoa_r+0xa82>
 801754e:	2b39      	cmp	r3, #57	; 0x39
 8017550:	d029      	beq.n	80175a6 <_dtoa_r+0xabe>
 8017552:	f1b9 0f00 	cmp.w	r9, #0
 8017556:	dd01      	ble.n	801755c <_dtoa_r+0xa74>
 8017558:	9b06      	ldr	r3, [sp, #24]
 801755a:	3331      	adds	r3, #49	; 0x31
 801755c:	9a04      	ldr	r2, [sp, #16]
 801755e:	7013      	strb	r3, [r2, #0]
 8017560:	e776      	b.n	8017450 <_dtoa_r+0x968>
 8017562:	4630      	mov	r0, r6
 8017564:	e7b9      	b.n	80174da <_dtoa_r+0x9f2>
 8017566:	2201      	movs	r2, #1
 8017568:	e7e2      	b.n	8017530 <_dtoa_r+0xa48>
 801756a:	f1b9 0f00 	cmp.w	r9, #0
 801756e:	db06      	blt.n	801757e <_dtoa_r+0xa96>
 8017570:	9922      	ldr	r1, [sp, #136]	; 0x88
 8017572:	ea41 0909 	orr.w	r9, r1, r9
 8017576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017578:	ea59 0101 	orrs.w	r1, r9, r1
 801757c:	d120      	bne.n	80175c0 <_dtoa_r+0xad8>
 801757e:	2a00      	cmp	r2, #0
 8017580:	ddec      	ble.n	801755c <_dtoa_r+0xa74>
 8017582:	4659      	mov	r1, fp
 8017584:	2201      	movs	r2, #1
 8017586:	4628      	mov	r0, r5
 8017588:	9308      	str	r3, [sp, #32]
 801758a:	f000 fb97 	bl	8017cbc <__lshift>
 801758e:	4621      	mov	r1, r4
 8017590:	4683      	mov	fp, r0
 8017592:	f000 fc03 	bl	8017d9c <__mcmp>
 8017596:	2800      	cmp	r0, #0
 8017598:	9b08      	ldr	r3, [sp, #32]
 801759a:	dc02      	bgt.n	80175a2 <_dtoa_r+0xaba>
 801759c:	d1de      	bne.n	801755c <_dtoa_r+0xa74>
 801759e:	07da      	lsls	r2, r3, #31
 80175a0:	d5dc      	bpl.n	801755c <_dtoa_r+0xa74>
 80175a2:	2b39      	cmp	r3, #57	; 0x39
 80175a4:	d1d8      	bne.n	8017558 <_dtoa_r+0xa70>
 80175a6:	2339      	movs	r3, #57	; 0x39
 80175a8:	9a04      	ldr	r2, [sp, #16]
 80175aa:	7013      	strb	r3, [r2, #0]
 80175ac:	463b      	mov	r3, r7
 80175ae:	461f      	mov	r7, r3
 80175b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80175b4:	3b01      	subs	r3, #1
 80175b6:	2a39      	cmp	r2, #57	; 0x39
 80175b8:	d050      	beq.n	801765c <_dtoa_r+0xb74>
 80175ba:	3201      	adds	r2, #1
 80175bc:	701a      	strb	r2, [r3, #0]
 80175be:	e747      	b.n	8017450 <_dtoa_r+0x968>
 80175c0:	2a00      	cmp	r2, #0
 80175c2:	dd03      	ble.n	80175cc <_dtoa_r+0xae4>
 80175c4:	2b39      	cmp	r3, #57	; 0x39
 80175c6:	d0ee      	beq.n	80175a6 <_dtoa_r+0xabe>
 80175c8:	3301      	adds	r3, #1
 80175ca:	e7c7      	b.n	801755c <_dtoa_r+0xa74>
 80175cc:	9a08      	ldr	r2, [sp, #32]
 80175ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80175d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80175d4:	428a      	cmp	r2, r1
 80175d6:	d02a      	beq.n	801762e <_dtoa_r+0xb46>
 80175d8:	4659      	mov	r1, fp
 80175da:	2300      	movs	r3, #0
 80175dc:	220a      	movs	r2, #10
 80175de:	4628      	mov	r0, r5
 80175e0:	f000 f9c0 	bl	8017964 <__multadd>
 80175e4:	45b0      	cmp	r8, r6
 80175e6:	4683      	mov	fp, r0
 80175e8:	f04f 0300 	mov.w	r3, #0
 80175ec:	f04f 020a 	mov.w	r2, #10
 80175f0:	4641      	mov	r1, r8
 80175f2:	4628      	mov	r0, r5
 80175f4:	d107      	bne.n	8017606 <_dtoa_r+0xb1e>
 80175f6:	f000 f9b5 	bl	8017964 <__multadd>
 80175fa:	4680      	mov	r8, r0
 80175fc:	4606      	mov	r6, r0
 80175fe:	9b08      	ldr	r3, [sp, #32]
 8017600:	3301      	adds	r3, #1
 8017602:	9308      	str	r3, [sp, #32]
 8017604:	e775      	b.n	80174f2 <_dtoa_r+0xa0a>
 8017606:	f000 f9ad 	bl	8017964 <__multadd>
 801760a:	4631      	mov	r1, r6
 801760c:	4680      	mov	r8, r0
 801760e:	2300      	movs	r3, #0
 8017610:	220a      	movs	r2, #10
 8017612:	4628      	mov	r0, r5
 8017614:	f000 f9a6 	bl	8017964 <__multadd>
 8017618:	4606      	mov	r6, r0
 801761a:	e7f0      	b.n	80175fe <_dtoa_r+0xb16>
 801761c:	f1b9 0f00 	cmp.w	r9, #0
 8017620:	bfcc      	ite	gt
 8017622:	464f      	movgt	r7, r9
 8017624:	2701      	movle	r7, #1
 8017626:	f04f 0800 	mov.w	r8, #0
 801762a:	9a03      	ldr	r2, [sp, #12]
 801762c:	4417      	add	r7, r2
 801762e:	4659      	mov	r1, fp
 8017630:	2201      	movs	r2, #1
 8017632:	4628      	mov	r0, r5
 8017634:	9308      	str	r3, [sp, #32]
 8017636:	f000 fb41 	bl	8017cbc <__lshift>
 801763a:	4621      	mov	r1, r4
 801763c:	4683      	mov	fp, r0
 801763e:	f000 fbad 	bl	8017d9c <__mcmp>
 8017642:	2800      	cmp	r0, #0
 8017644:	dcb2      	bgt.n	80175ac <_dtoa_r+0xac4>
 8017646:	d102      	bne.n	801764e <_dtoa_r+0xb66>
 8017648:	9b08      	ldr	r3, [sp, #32]
 801764a:	07db      	lsls	r3, r3, #31
 801764c:	d4ae      	bmi.n	80175ac <_dtoa_r+0xac4>
 801764e:	463b      	mov	r3, r7
 8017650:	461f      	mov	r7, r3
 8017652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017656:	2a30      	cmp	r2, #48	; 0x30
 8017658:	d0fa      	beq.n	8017650 <_dtoa_r+0xb68>
 801765a:	e6f9      	b.n	8017450 <_dtoa_r+0x968>
 801765c:	9a03      	ldr	r2, [sp, #12]
 801765e:	429a      	cmp	r2, r3
 8017660:	d1a5      	bne.n	80175ae <_dtoa_r+0xac6>
 8017662:	2331      	movs	r3, #49	; 0x31
 8017664:	f10a 0a01 	add.w	sl, sl, #1
 8017668:	e779      	b.n	801755e <_dtoa_r+0xa76>
 801766a:	4b14      	ldr	r3, [pc, #80]	; (80176bc <_dtoa_r+0xbd4>)
 801766c:	f7ff baa8 	b.w	8016bc0 <_dtoa_r+0xd8>
 8017670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017672:	2b00      	cmp	r3, #0
 8017674:	f47f aa81 	bne.w	8016b7a <_dtoa_r+0x92>
 8017678:	4b11      	ldr	r3, [pc, #68]	; (80176c0 <_dtoa_r+0xbd8>)
 801767a:	f7ff baa1 	b.w	8016bc0 <_dtoa_r+0xd8>
 801767e:	f1b9 0f00 	cmp.w	r9, #0
 8017682:	dc03      	bgt.n	801768c <_dtoa_r+0xba4>
 8017684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017686:	2b02      	cmp	r3, #2
 8017688:	f73f aecb 	bgt.w	8017422 <_dtoa_r+0x93a>
 801768c:	9f03      	ldr	r7, [sp, #12]
 801768e:	4621      	mov	r1, r4
 8017690:	4658      	mov	r0, fp
 8017692:	f7ff f99d 	bl	80169d0 <quorem>
 8017696:	9a03      	ldr	r2, [sp, #12]
 8017698:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801769c:	f807 3b01 	strb.w	r3, [r7], #1
 80176a0:	1aba      	subs	r2, r7, r2
 80176a2:	4591      	cmp	r9, r2
 80176a4:	ddba      	ble.n	801761c <_dtoa_r+0xb34>
 80176a6:	4659      	mov	r1, fp
 80176a8:	2300      	movs	r3, #0
 80176aa:	220a      	movs	r2, #10
 80176ac:	4628      	mov	r0, r5
 80176ae:	f000 f959 	bl	8017964 <__multadd>
 80176b2:	4683      	mov	fp, r0
 80176b4:	e7eb      	b.n	801768e <_dtoa_r+0xba6>
 80176b6:	bf00      	nop
 80176b8:	08031fd7 	.word	0x08031fd7
 80176bc:	08031f34 	.word	0x08031f34
 80176c0:	08031f58 	.word	0x08031f58

080176c4 <__sflush_r>:
 80176c4:	898a      	ldrh	r2, [r1, #12]
 80176c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176c8:	4605      	mov	r5, r0
 80176ca:	0710      	lsls	r0, r2, #28
 80176cc:	460c      	mov	r4, r1
 80176ce:	d457      	bmi.n	8017780 <__sflush_r+0xbc>
 80176d0:	684b      	ldr	r3, [r1, #4]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	dc04      	bgt.n	80176e0 <__sflush_r+0x1c>
 80176d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80176d8:	2b00      	cmp	r3, #0
 80176da:	dc01      	bgt.n	80176e0 <__sflush_r+0x1c>
 80176dc:	2000      	movs	r0, #0
 80176de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176e2:	2e00      	cmp	r6, #0
 80176e4:	d0fa      	beq.n	80176dc <__sflush_r+0x18>
 80176e6:	2300      	movs	r3, #0
 80176e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80176ec:	682f      	ldr	r7, [r5, #0]
 80176ee:	602b      	str	r3, [r5, #0]
 80176f0:	d032      	beq.n	8017758 <__sflush_r+0x94>
 80176f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80176f4:	89a3      	ldrh	r3, [r4, #12]
 80176f6:	075a      	lsls	r2, r3, #29
 80176f8:	d505      	bpl.n	8017706 <__sflush_r+0x42>
 80176fa:	6863      	ldr	r3, [r4, #4]
 80176fc:	1ac0      	subs	r0, r0, r3
 80176fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017700:	b10b      	cbz	r3, 8017706 <__sflush_r+0x42>
 8017702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017704:	1ac0      	subs	r0, r0, r3
 8017706:	2300      	movs	r3, #0
 8017708:	4602      	mov	r2, r0
 801770a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801770c:	4628      	mov	r0, r5
 801770e:	6a21      	ldr	r1, [r4, #32]
 8017710:	47b0      	blx	r6
 8017712:	1c43      	adds	r3, r0, #1
 8017714:	89a3      	ldrh	r3, [r4, #12]
 8017716:	d106      	bne.n	8017726 <__sflush_r+0x62>
 8017718:	6829      	ldr	r1, [r5, #0]
 801771a:	291d      	cmp	r1, #29
 801771c:	d82c      	bhi.n	8017778 <__sflush_r+0xb4>
 801771e:	4a29      	ldr	r2, [pc, #164]	; (80177c4 <__sflush_r+0x100>)
 8017720:	40ca      	lsrs	r2, r1
 8017722:	07d6      	lsls	r6, r2, #31
 8017724:	d528      	bpl.n	8017778 <__sflush_r+0xb4>
 8017726:	2200      	movs	r2, #0
 8017728:	6062      	str	r2, [r4, #4]
 801772a:	6922      	ldr	r2, [r4, #16]
 801772c:	04d9      	lsls	r1, r3, #19
 801772e:	6022      	str	r2, [r4, #0]
 8017730:	d504      	bpl.n	801773c <__sflush_r+0x78>
 8017732:	1c42      	adds	r2, r0, #1
 8017734:	d101      	bne.n	801773a <__sflush_r+0x76>
 8017736:	682b      	ldr	r3, [r5, #0]
 8017738:	b903      	cbnz	r3, 801773c <__sflush_r+0x78>
 801773a:	6560      	str	r0, [r4, #84]	; 0x54
 801773c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801773e:	602f      	str	r7, [r5, #0]
 8017740:	2900      	cmp	r1, #0
 8017742:	d0cb      	beq.n	80176dc <__sflush_r+0x18>
 8017744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017748:	4299      	cmp	r1, r3
 801774a:	d002      	beq.n	8017752 <__sflush_r+0x8e>
 801774c:	4628      	mov	r0, r5
 801774e:	f7fe faeb 	bl	8015d28 <_free_r>
 8017752:	2000      	movs	r0, #0
 8017754:	6360      	str	r0, [r4, #52]	; 0x34
 8017756:	e7c2      	b.n	80176de <__sflush_r+0x1a>
 8017758:	6a21      	ldr	r1, [r4, #32]
 801775a:	2301      	movs	r3, #1
 801775c:	4628      	mov	r0, r5
 801775e:	47b0      	blx	r6
 8017760:	1c41      	adds	r1, r0, #1
 8017762:	d1c7      	bne.n	80176f4 <__sflush_r+0x30>
 8017764:	682b      	ldr	r3, [r5, #0]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d0c4      	beq.n	80176f4 <__sflush_r+0x30>
 801776a:	2b1d      	cmp	r3, #29
 801776c:	d001      	beq.n	8017772 <__sflush_r+0xae>
 801776e:	2b16      	cmp	r3, #22
 8017770:	d101      	bne.n	8017776 <__sflush_r+0xb2>
 8017772:	602f      	str	r7, [r5, #0]
 8017774:	e7b2      	b.n	80176dc <__sflush_r+0x18>
 8017776:	89a3      	ldrh	r3, [r4, #12]
 8017778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801777c:	81a3      	strh	r3, [r4, #12]
 801777e:	e7ae      	b.n	80176de <__sflush_r+0x1a>
 8017780:	690f      	ldr	r7, [r1, #16]
 8017782:	2f00      	cmp	r7, #0
 8017784:	d0aa      	beq.n	80176dc <__sflush_r+0x18>
 8017786:	0793      	lsls	r3, r2, #30
 8017788:	bf18      	it	ne
 801778a:	2300      	movne	r3, #0
 801778c:	680e      	ldr	r6, [r1, #0]
 801778e:	bf08      	it	eq
 8017790:	694b      	ldreq	r3, [r1, #20]
 8017792:	1bf6      	subs	r6, r6, r7
 8017794:	600f      	str	r7, [r1, #0]
 8017796:	608b      	str	r3, [r1, #8]
 8017798:	2e00      	cmp	r6, #0
 801779a:	dd9f      	ble.n	80176dc <__sflush_r+0x18>
 801779c:	4633      	mov	r3, r6
 801779e:	463a      	mov	r2, r7
 80177a0:	4628      	mov	r0, r5
 80177a2:	6a21      	ldr	r1, [r4, #32]
 80177a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80177a8:	47e0      	blx	ip
 80177aa:	2800      	cmp	r0, #0
 80177ac:	dc06      	bgt.n	80177bc <__sflush_r+0xf8>
 80177ae:	89a3      	ldrh	r3, [r4, #12]
 80177b0:	f04f 30ff 	mov.w	r0, #4294967295
 80177b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177b8:	81a3      	strh	r3, [r4, #12]
 80177ba:	e790      	b.n	80176de <__sflush_r+0x1a>
 80177bc:	4407      	add	r7, r0
 80177be:	1a36      	subs	r6, r6, r0
 80177c0:	e7ea      	b.n	8017798 <__sflush_r+0xd4>
 80177c2:	bf00      	nop
 80177c4:	20400001 	.word	0x20400001

080177c8 <_fflush_r>:
 80177c8:	b538      	push	{r3, r4, r5, lr}
 80177ca:	690b      	ldr	r3, [r1, #16]
 80177cc:	4605      	mov	r5, r0
 80177ce:	460c      	mov	r4, r1
 80177d0:	b913      	cbnz	r3, 80177d8 <_fflush_r+0x10>
 80177d2:	2500      	movs	r5, #0
 80177d4:	4628      	mov	r0, r5
 80177d6:	bd38      	pop	{r3, r4, r5, pc}
 80177d8:	b118      	cbz	r0, 80177e2 <_fflush_r+0x1a>
 80177da:	6983      	ldr	r3, [r0, #24]
 80177dc:	b90b      	cbnz	r3, 80177e2 <_fflush_r+0x1a>
 80177de:	f7fe f9b7 	bl	8015b50 <__sinit>
 80177e2:	4b14      	ldr	r3, [pc, #80]	; (8017834 <_fflush_r+0x6c>)
 80177e4:	429c      	cmp	r4, r3
 80177e6:	d11b      	bne.n	8017820 <_fflush_r+0x58>
 80177e8:	686c      	ldr	r4, [r5, #4]
 80177ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d0ef      	beq.n	80177d2 <_fflush_r+0xa>
 80177f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80177f4:	07d0      	lsls	r0, r2, #31
 80177f6:	d404      	bmi.n	8017802 <_fflush_r+0x3a>
 80177f8:	0599      	lsls	r1, r3, #22
 80177fa:	d402      	bmi.n	8017802 <_fflush_r+0x3a>
 80177fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177fe:	f7fe fa6a 	bl	8015cd6 <__retarget_lock_acquire_recursive>
 8017802:	4628      	mov	r0, r5
 8017804:	4621      	mov	r1, r4
 8017806:	f7ff ff5d 	bl	80176c4 <__sflush_r>
 801780a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801780c:	4605      	mov	r5, r0
 801780e:	07da      	lsls	r2, r3, #31
 8017810:	d4e0      	bmi.n	80177d4 <_fflush_r+0xc>
 8017812:	89a3      	ldrh	r3, [r4, #12]
 8017814:	059b      	lsls	r3, r3, #22
 8017816:	d4dd      	bmi.n	80177d4 <_fflush_r+0xc>
 8017818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801781a:	f7fe fa5d 	bl	8015cd8 <__retarget_lock_release_recursive>
 801781e:	e7d9      	b.n	80177d4 <_fflush_r+0xc>
 8017820:	4b05      	ldr	r3, [pc, #20]	; (8017838 <_fflush_r+0x70>)
 8017822:	429c      	cmp	r4, r3
 8017824:	d101      	bne.n	801782a <_fflush_r+0x62>
 8017826:	68ac      	ldr	r4, [r5, #8]
 8017828:	e7df      	b.n	80177ea <_fflush_r+0x22>
 801782a:	4b04      	ldr	r3, [pc, #16]	; (801783c <_fflush_r+0x74>)
 801782c:	429c      	cmp	r4, r3
 801782e:	bf08      	it	eq
 8017830:	68ec      	ldreq	r4, [r5, #12]
 8017832:	e7da      	b.n	80177ea <_fflush_r+0x22>
 8017834:	08031ee0 	.word	0x08031ee0
 8017838:	08031f00 	.word	0x08031f00
 801783c:	08031ec0 	.word	0x08031ec0

08017840 <_localeconv_r>:
 8017840:	4800      	ldr	r0, [pc, #0]	; (8017844 <_localeconv_r+0x4>)
 8017842:	4770      	bx	lr
 8017844:	2000020c 	.word	0x2000020c

08017848 <_lseek_r>:
 8017848:	b538      	push	{r3, r4, r5, lr}
 801784a:	4604      	mov	r4, r0
 801784c:	4608      	mov	r0, r1
 801784e:	4611      	mov	r1, r2
 8017850:	2200      	movs	r2, #0
 8017852:	4d05      	ldr	r5, [pc, #20]	; (8017868 <_lseek_r+0x20>)
 8017854:	602a      	str	r2, [r5, #0]
 8017856:	461a      	mov	r2, r3
 8017858:	f7ec f826 	bl	80038a8 <_lseek>
 801785c:	1c43      	adds	r3, r0, #1
 801785e:	d102      	bne.n	8017866 <_lseek_r+0x1e>
 8017860:	682b      	ldr	r3, [r5, #0]
 8017862:	b103      	cbz	r3, 8017866 <_lseek_r+0x1e>
 8017864:	6023      	str	r3, [r4, #0]
 8017866:	bd38      	pop	{r3, r4, r5, pc}
 8017868:	20002488 	.word	0x20002488

0801786c <memchr>:
 801786c:	4603      	mov	r3, r0
 801786e:	b510      	push	{r4, lr}
 8017870:	b2c9      	uxtb	r1, r1
 8017872:	4402      	add	r2, r0
 8017874:	4293      	cmp	r3, r2
 8017876:	4618      	mov	r0, r3
 8017878:	d101      	bne.n	801787e <memchr+0x12>
 801787a:	2000      	movs	r0, #0
 801787c:	e003      	b.n	8017886 <memchr+0x1a>
 801787e:	7804      	ldrb	r4, [r0, #0]
 8017880:	3301      	adds	r3, #1
 8017882:	428c      	cmp	r4, r1
 8017884:	d1f6      	bne.n	8017874 <memchr+0x8>
 8017886:	bd10      	pop	{r4, pc}

08017888 <__malloc_lock>:
 8017888:	4801      	ldr	r0, [pc, #4]	; (8017890 <__malloc_lock+0x8>)
 801788a:	f7fe ba24 	b.w	8015cd6 <__retarget_lock_acquire_recursive>
 801788e:	bf00      	nop
 8017890:	2000247c 	.word	0x2000247c

08017894 <__malloc_unlock>:
 8017894:	4801      	ldr	r0, [pc, #4]	; (801789c <__malloc_unlock+0x8>)
 8017896:	f7fe ba1f 	b.w	8015cd8 <__retarget_lock_release_recursive>
 801789a:	bf00      	nop
 801789c:	2000247c 	.word	0x2000247c

080178a0 <_Balloc>:
 80178a0:	b570      	push	{r4, r5, r6, lr}
 80178a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80178a4:	4604      	mov	r4, r0
 80178a6:	460d      	mov	r5, r1
 80178a8:	b976      	cbnz	r6, 80178c8 <_Balloc+0x28>
 80178aa:	2010      	movs	r0, #16
 80178ac:	f7fe fa16 	bl	8015cdc <malloc>
 80178b0:	4602      	mov	r2, r0
 80178b2:	6260      	str	r0, [r4, #36]	; 0x24
 80178b4:	b920      	cbnz	r0, 80178c0 <_Balloc+0x20>
 80178b6:	2166      	movs	r1, #102	; 0x66
 80178b8:	4b17      	ldr	r3, [pc, #92]	; (8017918 <_Balloc+0x78>)
 80178ba:	4818      	ldr	r0, [pc, #96]	; (801791c <_Balloc+0x7c>)
 80178bc:	f000 fcf4 	bl	80182a8 <__assert_func>
 80178c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80178c4:	6006      	str	r6, [r0, #0]
 80178c6:	60c6      	str	r6, [r0, #12]
 80178c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80178ca:	68f3      	ldr	r3, [r6, #12]
 80178cc:	b183      	cbz	r3, 80178f0 <_Balloc+0x50>
 80178ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178d0:	68db      	ldr	r3, [r3, #12]
 80178d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80178d6:	b9b8      	cbnz	r0, 8017908 <_Balloc+0x68>
 80178d8:	2101      	movs	r1, #1
 80178da:	fa01 f605 	lsl.w	r6, r1, r5
 80178de:	1d72      	adds	r2, r6, #5
 80178e0:	4620      	mov	r0, r4
 80178e2:	0092      	lsls	r2, r2, #2
 80178e4:	f000 fb5e 	bl	8017fa4 <_calloc_r>
 80178e8:	b160      	cbz	r0, 8017904 <_Balloc+0x64>
 80178ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80178ee:	e00e      	b.n	801790e <_Balloc+0x6e>
 80178f0:	2221      	movs	r2, #33	; 0x21
 80178f2:	2104      	movs	r1, #4
 80178f4:	4620      	mov	r0, r4
 80178f6:	f000 fb55 	bl	8017fa4 <_calloc_r>
 80178fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178fc:	60f0      	str	r0, [r6, #12]
 80178fe:	68db      	ldr	r3, [r3, #12]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d1e4      	bne.n	80178ce <_Balloc+0x2e>
 8017904:	2000      	movs	r0, #0
 8017906:	bd70      	pop	{r4, r5, r6, pc}
 8017908:	6802      	ldr	r2, [r0, #0]
 801790a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801790e:	2300      	movs	r3, #0
 8017910:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017914:	e7f7      	b.n	8017906 <_Balloc+0x66>
 8017916:	bf00      	nop
 8017918:	08031f65 	.word	0x08031f65
 801791c:	08031fe8 	.word	0x08031fe8

08017920 <_Bfree>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017924:	4605      	mov	r5, r0
 8017926:	460c      	mov	r4, r1
 8017928:	b976      	cbnz	r6, 8017948 <_Bfree+0x28>
 801792a:	2010      	movs	r0, #16
 801792c:	f7fe f9d6 	bl	8015cdc <malloc>
 8017930:	4602      	mov	r2, r0
 8017932:	6268      	str	r0, [r5, #36]	; 0x24
 8017934:	b920      	cbnz	r0, 8017940 <_Bfree+0x20>
 8017936:	218a      	movs	r1, #138	; 0x8a
 8017938:	4b08      	ldr	r3, [pc, #32]	; (801795c <_Bfree+0x3c>)
 801793a:	4809      	ldr	r0, [pc, #36]	; (8017960 <_Bfree+0x40>)
 801793c:	f000 fcb4 	bl	80182a8 <__assert_func>
 8017940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017944:	6006      	str	r6, [r0, #0]
 8017946:	60c6      	str	r6, [r0, #12]
 8017948:	b13c      	cbz	r4, 801795a <_Bfree+0x3a>
 801794a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801794c:	6862      	ldr	r2, [r4, #4]
 801794e:	68db      	ldr	r3, [r3, #12]
 8017950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017954:	6021      	str	r1, [r4, #0]
 8017956:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801795a:	bd70      	pop	{r4, r5, r6, pc}
 801795c:	08031f65 	.word	0x08031f65
 8017960:	08031fe8 	.word	0x08031fe8

08017964 <__multadd>:
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	4607      	mov	r7, r0
 801796a:	460c      	mov	r4, r1
 801796c:	461e      	mov	r6, r3
 801796e:	2000      	movs	r0, #0
 8017970:	690d      	ldr	r5, [r1, #16]
 8017972:	f101 0c14 	add.w	ip, r1, #20
 8017976:	f8dc 3000 	ldr.w	r3, [ip]
 801797a:	3001      	adds	r0, #1
 801797c:	b299      	uxth	r1, r3
 801797e:	fb02 6101 	mla	r1, r2, r1, r6
 8017982:	0c1e      	lsrs	r6, r3, #16
 8017984:	0c0b      	lsrs	r3, r1, #16
 8017986:	fb02 3306 	mla	r3, r2, r6, r3
 801798a:	b289      	uxth	r1, r1
 801798c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017990:	4285      	cmp	r5, r0
 8017992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017996:	f84c 1b04 	str.w	r1, [ip], #4
 801799a:	dcec      	bgt.n	8017976 <__multadd+0x12>
 801799c:	b30e      	cbz	r6, 80179e2 <__multadd+0x7e>
 801799e:	68a3      	ldr	r3, [r4, #8]
 80179a0:	42ab      	cmp	r3, r5
 80179a2:	dc19      	bgt.n	80179d8 <__multadd+0x74>
 80179a4:	6861      	ldr	r1, [r4, #4]
 80179a6:	4638      	mov	r0, r7
 80179a8:	3101      	adds	r1, #1
 80179aa:	f7ff ff79 	bl	80178a0 <_Balloc>
 80179ae:	4680      	mov	r8, r0
 80179b0:	b928      	cbnz	r0, 80179be <__multadd+0x5a>
 80179b2:	4602      	mov	r2, r0
 80179b4:	21b5      	movs	r1, #181	; 0xb5
 80179b6:	4b0c      	ldr	r3, [pc, #48]	; (80179e8 <__multadd+0x84>)
 80179b8:	480c      	ldr	r0, [pc, #48]	; (80179ec <__multadd+0x88>)
 80179ba:	f000 fc75 	bl	80182a8 <__assert_func>
 80179be:	6922      	ldr	r2, [r4, #16]
 80179c0:	f104 010c 	add.w	r1, r4, #12
 80179c4:	3202      	adds	r2, #2
 80179c6:	0092      	lsls	r2, r2, #2
 80179c8:	300c      	adds	r0, #12
 80179ca:	f7fe f997 	bl	8015cfc <memcpy>
 80179ce:	4621      	mov	r1, r4
 80179d0:	4638      	mov	r0, r7
 80179d2:	f7ff ffa5 	bl	8017920 <_Bfree>
 80179d6:	4644      	mov	r4, r8
 80179d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80179dc:	3501      	adds	r5, #1
 80179de:	615e      	str	r6, [r3, #20]
 80179e0:	6125      	str	r5, [r4, #16]
 80179e2:	4620      	mov	r0, r4
 80179e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e8:	08031fd7 	.word	0x08031fd7
 80179ec:	08031fe8 	.word	0x08031fe8

080179f0 <__hi0bits>:
 80179f0:	0c02      	lsrs	r2, r0, #16
 80179f2:	0412      	lsls	r2, r2, #16
 80179f4:	4603      	mov	r3, r0
 80179f6:	b9ca      	cbnz	r2, 8017a2c <__hi0bits+0x3c>
 80179f8:	0403      	lsls	r3, r0, #16
 80179fa:	2010      	movs	r0, #16
 80179fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017a00:	bf04      	itt	eq
 8017a02:	021b      	lsleq	r3, r3, #8
 8017a04:	3008      	addeq	r0, #8
 8017a06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017a0a:	bf04      	itt	eq
 8017a0c:	011b      	lsleq	r3, r3, #4
 8017a0e:	3004      	addeq	r0, #4
 8017a10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017a14:	bf04      	itt	eq
 8017a16:	009b      	lsleq	r3, r3, #2
 8017a18:	3002      	addeq	r0, #2
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	db05      	blt.n	8017a2a <__hi0bits+0x3a>
 8017a1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8017a22:	f100 0001 	add.w	r0, r0, #1
 8017a26:	bf08      	it	eq
 8017a28:	2020      	moveq	r0, #32
 8017a2a:	4770      	bx	lr
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	e7e5      	b.n	80179fc <__hi0bits+0xc>

08017a30 <__lo0bits>:
 8017a30:	6803      	ldr	r3, [r0, #0]
 8017a32:	4602      	mov	r2, r0
 8017a34:	f013 0007 	ands.w	r0, r3, #7
 8017a38:	d00b      	beq.n	8017a52 <__lo0bits+0x22>
 8017a3a:	07d9      	lsls	r1, r3, #31
 8017a3c:	d421      	bmi.n	8017a82 <__lo0bits+0x52>
 8017a3e:	0798      	lsls	r0, r3, #30
 8017a40:	bf49      	itett	mi
 8017a42:	085b      	lsrmi	r3, r3, #1
 8017a44:	089b      	lsrpl	r3, r3, #2
 8017a46:	2001      	movmi	r0, #1
 8017a48:	6013      	strmi	r3, [r2, #0]
 8017a4a:	bf5c      	itt	pl
 8017a4c:	2002      	movpl	r0, #2
 8017a4e:	6013      	strpl	r3, [r2, #0]
 8017a50:	4770      	bx	lr
 8017a52:	b299      	uxth	r1, r3
 8017a54:	b909      	cbnz	r1, 8017a5a <__lo0bits+0x2a>
 8017a56:	2010      	movs	r0, #16
 8017a58:	0c1b      	lsrs	r3, r3, #16
 8017a5a:	b2d9      	uxtb	r1, r3
 8017a5c:	b909      	cbnz	r1, 8017a62 <__lo0bits+0x32>
 8017a5e:	3008      	adds	r0, #8
 8017a60:	0a1b      	lsrs	r3, r3, #8
 8017a62:	0719      	lsls	r1, r3, #28
 8017a64:	bf04      	itt	eq
 8017a66:	091b      	lsreq	r3, r3, #4
 8017a68:	3004      	addeq	r0, #4
 8017a6a:	0799      	lsls	r1, r3, #30
 8017a6c:	bf04      	itt	eq
 8017a6e:	089b      	lsreq	r3, r3, #2
 8017a70:	3002      	addeq	r0, #2
 8017a72:	07d9      	lsls	r1, r3, #31
 8017a74:	d403      	bmi.n	8017a7e <__lo0bits+0x4e>
 8017a76:	085b      	lsrs	r3, r3, #1
 8017a78:	f100 0001 	add.w	r0, r0, #1
 8017a7c:	d003      	beq.n	8017a86 <__lo0bits+0x56>
 8017a7e:	6013      	str	r3, [r2, #0]
 8017a80:	4770      	bx	lr
 8017a82:	2000      	movs	r0, #0
 8017a84:	4770      	bx	lr
 8017a86:	2020      	movs	r0, #32
 8017a88:	4770      	bx	lr
	...

08017a8c <__i2b>:
 8017a8c:	b510      	push	{r4, lr}
 8017a8e:	460c      	mov	r4, r1
 8017a90:	2101      	movs	r1, #1
 8017a92:	f7ff ff05 	bl	80178a0 <_Balloc>
 8017a96:	4602      	mov	r2, r0
 8017a98:	b928      	cbnz	r0, 8017aa6 <__i2b+0x1a>
 8017a9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017a9e:	4b04      	ldr	r3, [pc, #16]	; (8017ab0 <__i2b+0x24>)
 8017aa0:	4804      	ldr	r0, [pc, #16]	; (8017ab4 <__i2b+0x28>)
 8017aa2:	f000 fc01 	bl	80182a8 <__assert_func>
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	6144      	str	r4, [r0, #20]
 8017aaa:	6103      	str	r3, [r0, #16]
 8017aac:	bd10      	pop	{r4, pc}
 8017aae:	bf00      	nop
 8017ab0:	08031fd7 	.word	0x08031fd7
 8017ab4:	08031fe8 	.word	0x08031fe8

08017ab8 <__multiply>:
 8017ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017abc:	4691      	mov	r9, r2
 8017abe:	690a      	ldr	r2, [r1, #16]
 8017ac0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017ac4:	460c      	mov	r4, r1
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	bfbe      	ittt	lt
 8017aca:	460b      	movlt	r3, r1
 8017acc:	464c      	movlt	r4, r9
 8017ace:	4699      	movlt	r9, r3
 8017ad0:	6927      	ldr	r7, [r4, #16]
 8017ad2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017ad6:	68a3      	ldr	r3, [r4, #8]
 8017ad8:	6861      	ldr	r1, [r4, #4]
 8017ada:	eb07 060a 	add.w	r6, r7, sl
 8017ade:	42b3      	cmp	r3, r6
 8017ae0:	b085      	sub	sp, #20
 8017ae2:	bfb8      	it	lt
 8017ae4:	3101      	addlt	r1, #1
 8017ae6:	f7ff fedb 	bl	80178a0 <_Balloc>
 8017aea:	b930      	cbnz	r0, 8017afa <__multiply+0x42>
 8017aec:	4602      	mov	r2, r0
 8017aee:	f240 115d 	movw	r1, #349	; 0x15d
 8017af2:	4b43      	ldr	r3, [pc, #268]	; (8017c00 <__multiply+0x148>)
 8017af4:	4843      	ldr	r0, [pc, #268]	; (8017c04 <__multiply+0x14c>)
 8017af6:	f000 fbd7 	bl	80182a8 <__assert_func>
 8017afa:	f100 0514 	add.w	r5, r0, #20
 8017afe:	462b      	mov	r3, r5
 8017b00:	2200      	movs	r2, #0
 8017b02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017b06:	4543      	cmp	r3, r8
 8017b08:	d321      	bcc.n	8017b4e <__multiply+0x96>
 8017b0a:	f104 0314 	add.w	r3, r4, #20
 8017b0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017b12:	f109 0314 	add.w	r3, r9, #20
 8017b16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017b1a:	9202      	str	r2, [sp, #8]
 8017b1c:	1b3a      	subs	r2, r7, r4
 8017b1e:	3a15      	subs	r2, #21
 8017b20:	f022 0203 	bic.w	r2, r2, #3
 8017b24:	3204      	adds	r2, #4
 8017b26:	f104 0115 	add.w	r1, r4, #21
 8017b2a:	428f      	cmp	r7, r1
 8017b2c:	bf38      	it	cc
 8017b2e:	2204      	movcc	r2, #4
 8017b30:	9201      	str	r2, [sp, #4]
 8017b32:	9a02      	ldr	r2, [sp, #8]
 8017b34:	9303      	str	r3, [sp, #12]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d80c      	bhi.n	8017b54 <__multiply+0x9c>
 8017b3a:	2e00      	cmp	r6, #0
 8017b3c:	dd03      	ble.n	8017b46 <__multiply+0x8e>
 8017b3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d059      	beq.n	8017bfa <__multiply+0x142>
 8017b46:	6106      	str	r6, [r0, #16]
 8017b48:	b005      	add	sp, #20
 8017b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b4e:	f843 2b04 	str.w	r2, [r3], #4
 8017b52:	e7d8      	b.n	8017b06 <__multiply+0x4e>
 8017b54:	f8b3 a000 	ldrh.w	sl, [r3]
 8017b58:	f1ba 0f00 	cmp.w	sl, #0
 8017b5c:	d023      	beq.n	8017ba6 <__multiply+0xee>
 8017b5e:	46a9      	mov	r9, r5
 8017b60:	f04f 0c00 	mov.w	ip, #0
 8017b64:	f104 0e14 	add.w	lr, r4, #20
 8017b68:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017b6c:	f8d9 1000 	ldr.w	r1, [r9]
 8017b70:	fa1f fb82 	uxth.w	fp, r2
 8017b74:	b289      	uxth	r1, r1
 8017b76:	fb0a 110b 	mla	r1, sl, fp, r1
 8017b7a:	4461      	add	r1, ip
 8017b7c:	f8d9 c000 	ldr.w	ip, [r9]
 8017b80:	0c12      	lsrs	r2, r2, #16
 8017b82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017b86:	fb0a c202 	mla	r2, sl, r2, ip
 8017b8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017b8e:	b289      	uxth	r1, r1
 8017b90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017b94:	4577      	cmp	r7, lr
 8017b96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017b9a:	f849 1b04 	str.w	r1, [r9], #4
 8017b9e:	d8e3      	bhi.n	8017b68 <__multiply+0xb0>
 8017ba0:	9a01      	ldr	r2, [sp, #4]
 8017ba2:	f845 c002 	str.w	ip, [r5, r2]
 8017ba6:	9a03      	ldr	r2, [sp, #12]
 8017ba8:	3304      	adds	r3, #4
 8017baa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017bae:	f1b9 0f00 	cmp.w	r9, #0
 8017bb2:	d020      	beq.n	8017bf6 <__multiply+0x13e>
 8017bb4:	46ae      	mov	lr, r5
 8017bb6:	f04f 0a00 	mov.w	sl, #0
 8017bba:	6829      	ldr	r1, [r5, #0]
 8017bbc:	f104 0c14 	add.w	ip, r4, #20
 8017bc0:	f8bc b000 	ldrh.w	fp, [ip]
 8017bc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017bc8:	b289      	uxth	r1, r1
 8017bca:	fb09 220b 	mla	r2, r9, fp, r2
 8017bce:	4492      	add	sl, r2
 8017bd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017bd4:	f84e 1b04 	str.w	r1, [lr], #4
 8017bd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017bdc:	f8be 1000 	ldrh.w	r1, [lr]
 8017be0:	0c12      	lsrs	r2, r2, #16
 8017be2:	fb09 1102 	mla	r1, r9, r2, r1
 8017be6:	4567      	cmp	r7, ip
 8017be8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017bec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017bf0:	d8e6      	bhi.n	8017bc0 <__multiply+0x108>
 8017bf2:	9a01      	ldr	r2, [sp, #4]
 8017bf4:	50a9      	str	r1, [r5, r2]
 8017bf6:	3504      	adds	r5, #4
 8017bf8:	e79b      	b.n	8017b32 <__multiply+0x7a>
 8017bfa:	3e01      	subs	r6, #1
 8017bfc:	e79d      	b.n	8017b3a <__multiply+0x82>
 8017bfe:	bf00      	nop
 8017c00:	08031fd7 	.word	0x08031fd7
 8017c04:	08031fe8 	.word	0x08031fe8

08017c08 <__pow5mult>:
 8017c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c0c:	4615      	mov	r5, r2
 8017c0e:	f012 0203 	ands.w	r2, r2, #3
 8017c12:	4606      	mov	r6, r0
 8017c14:	460f      	mov	r7, r1
 8017c16:	d007      	beq.n	8017c28 <__pow5mult+0x20>
 8017c18:	4c25      	ldr	r4, [pc, #148]	; (8017cb0 <__pow5mult+0xa8>)
 8017c1a:	3a01      	subs	r2, #1
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017c22:	f7ff fe9f 	bl	8017964 <__multadd>
 8017c26:	4607      	mov	r7, r0
 8017c28:	10ad      	asrs	r5, r5, #2
 8017c2a:	d03d      	beq.n	8017ca8 <__pow5mult+0xa0>
 8017c2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017c2e:	b97c      	cbnz	r4, 8017c50 <__pow5mult+0x48>
 8017c30:	2010      	movs	r0, #16
 8017c32:	f7fe f853 	bl	8015cdc <malloc>
 8017c36:	4602      	mov	r2, r0
 8017c38:	6270      	str	r0, [r6, #36]	; 0x24
 8017c3a:	b928      	cbnz	r0, 8017c48 <__pow5mult+0x40>
 8017c3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017c40:	4b1c      	ldr	r3, [pc, #112]	; (8017cb4 <__pow5mult+0xac>)
 8017c42:	481d      	ldr	r0, [pc, #116]	; (8017cb8 <__pow5mult+0xb0>)
 8017c44:	f000 fb30 	bl	80182a8 <__assert_func>
 8017c48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c4c:	6004      	str	r4, [r0, #0]
 8017c4e:	60c4      	str	r4, [r0, #12]
 8017c50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017c54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017c58:	b94c      	cbnz	r4, 8017c6e <__pow5mult+0x66>
 8017c5a:	f240 2171 	movw	r1, #625	; 0x271
 8017c5e:	4630      	mov	r0, r6
 8017c60:	f7ff ff14 	bl	8017a8c <__i2b>
 8017c64:	2300      	movs	r3, #0
 8017c66:	4604      	mov	r4, r0
 8017c68:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c6c:	6003      	str	r3, [r0, #0]
 8017c6e:	f04f 0900 	mov.w	r9, #0
 8017c72:	07eb      	lsls	r3, r5, #31
 8017c74:	d50a      	bpl.n	8017c8c <__pow5mult+0x84>
 8017c76:	4639      	mov	r1, r7
 8017c78:	4622      	mov	r2, r4
 8017c7a:	4630      	mov	r0, r6
 8017c7c:	f7ff ff1c 	bl	8017ab8 <__multiply>
 8017c80:	4680      	mov	r8, r0
 8017c82:	4639      	mov	r1, r7
 8017c84:	4630      	mov	r0, r6
 8017c86:	f7ff fe4b 	bl	8017920 <_Bfree>
 8017c8a:	4647      	mov	r7, r8
 8017c8c:	106d      	asrs	r5, r5, #1
 8017c8e:	d00b      	beq.n	8017ca8 <__pow5mult+0xa0>
 8017c90:	6820      	ldr	r0, [r4, #0]
 8017c92:	b938      	cbnz	r0, 8017ca4 <__pow5mult+0x9c>
 8017c94:	4622      	mov	r2, r4
 8017c96:	4621      	mov	r1, r4
 8017c98:	4630      	mov	r0, r6
 8017c9a:	f7ff ff0d 	bl	8017ab8 <__multiply>
 8017c9e:	6020      	str	r0, [r4, #0]
 8017ca0:	f8c0 9000 	str.w	r9, [r0]
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	e7e4      	b.n	8017c72 <__pow5mult+0x6a>
 8017ca8:	4638      	mov	r0, r7
 8017caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cae:	bf00      	nop
 8017cb0:	08032138 	.word	0x08032138
 8017cb4:	08031f65 	.word	0x08031f65
 8017cb8:	08031fe8 	.word	0x08031fe8

08017cbc <__lshift>:
 8017cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cc0:	460c      	mov	r4, r1
 8017cc2:	4607      	mov	r7, r0
 8017cc4:	4691      	mov	r9, r2
 8017cc6:	6923      	ldr	r3, [r4, #16]
 8017cc8:	6849      	ldr	r1, [r1, #4]
 8017cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017cce:	68a3      	ldr	r3, [r4, #8]
 8017cd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017cd4:	f108 0601 	add.w	r6, r8, #1
 8017cd8:	42b3      	cmp	r3, r6
 8017cda:	db0b      	blt.n	8017cf4 <__lshift+0x38>
 8017cdc:	4638      	mov	r0, r7
 8017cde:	f7ff fddf 	bl	80178a0 <_Balloc>
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	b948      	cbnz	r0, 8017cfa <__lshift+0x3e>
 8017ce6:	4602      	mov	r2, r0
 8017ce8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017cec:	4b29      	ldr	r3, [pc, #164]	; (8017d94 <__lshift+0xd8>)
 8017cee:	482a      	ldr	r0, [pc, #168]	; (8017d98 <__lshift+0xdc>)
 8017cf0:	f000 fada 	bl	80182a8 <__assert_func>
 8017cf4:	3101      	adds	r1, #1
 8017cf6:	005b      	lsls	r3, r3, #1
 8017cf8:	e7ee      	b.n	8017cd8 <__lshift+0x1c>
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	f100 0114 	add.w	r1, r0, #20
 8017d00:	f100 0210 	add.w	r2, r0, #16
 8017d04:	4618      	mov	r0, r3
 8017d06:	4553      	cmp	r3, sl
 8017d08:	db37      	blt.n	8017d7a <__lshift+0xbe>
 8017d0a:	6920      	ldr	r0, [r4, #16]
 8017d0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017d10:	f104 0314 	add.w	r3, r4, #20
 8017d14:	f019 091f 	ands.w	r9, r9, #31
 8017d18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017d1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017d20:	d02f      	beq.n	8017d82 <__lshift+0xc6>
 8017d22:	468a      	mov	sl, r1
 8017d24:	f04f 0c00 	mov.w	ip, #0
 8017d28:	f1c9 0e20 	rsb	lr, r9, #32
 8017d2c:	681a      	ldr	r2, [r3, #0]
 8017d2e:	fa02 f209 	lsl.w	r2, r2, r9
 8017d32:	ea42 020c 	orr.w	r2, r2, ip
 8017d36:	f84a 2b04 	str.w	r2, [sl], #4
 8017d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d3e:	4298      	cmp	r0, r3
 8017d40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017d44:	d8f2      	bhi.n	8017d2c <__lshift+0x70>
 8017d46:	1b03      	subs	r3, r0, r4
 8017d48:	3b15      	subs	r3, #21
 8017d4a:	f023 0303 	bic.w	r3, r3, #3
 8017d4e:	3304      	adds	r3, #4
 8017d50:	f104 0215 	add.w	r2, r4, #21
 8017d54:	4290      	cmp	r0, r2
 8017d56:	bf38      	it	cc
 8017d58:	2304      	movcc	r3, #4
 8017d5a:	f841 c003 	str.w	ip, [r1, r3]
 8017d5e:	f1bc 0f00 	cmp.w	ip, #0
 8017d62:	d001      	beq.n	8017d68 <__lshift+0xac>
 8017d64:	f108 0602 	add.w	r6, r8, #2
 8017d68:	3e01      	subs	r6, #1
 8017d6a:	4638      	mov	r0, r7
 8017d6c:	4621      	mov	r1, r4
 8017d6e:	612e      	str	r6, [r5, #16]
 8017d70:	f7ff fdd6 	bl	8017920 <_Bfree>
 8017d74:	4628      	mov	r0, r5
 8017d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8017d7e:	3301      	adds	r3, #1
 8017d80:	e7c1      	b.n	8017d06 <__lshift+0x4a>
 8017d82:	3904      	subs	r1, #4
 8017d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d88:	4298      	cmp	r0, r3
 8017d8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017d8e:	d8f9      	bhi.n	8017d84 <__lshift+0xc8>
 8017d90:	e7ea      	b.n	8017d68 <__lshift+0xac>
 8017d92:	bf00      	nop
 8017d94:	08031fd7 	.word	0x08031fd7
 8017d98:	08031fe8 	.word	0x08031fe8

08017d9c <__mcmp>:
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	690a      	ldr	r2, [r1, #16]
 8017da0:	6900      	ldr	r0, [r0, #16]
 8017da2:	b530      	push	{r4, r5, lr}
 8017da4:	1a80      	subs	r0, r0, r2
 8017da6:	d10d      	bne.n	8017dc4 <__mcmp+0x28>
 8017da8:	3314      	adds	r3, #20
 8017daa:	3114      	adds	r1, #20
 8017dac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017db0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017dbc:	4295      	cmp	r5, r2
 8017dbe:	d002      	beq.n	8017dc6 <__mcmp+0x2a>
 8017dc0:	d304      	bcc.n	8017dcc <__mcmp+0x30>
 8017dc2:	2001      	movs	r0, #1
 8017dc4:	bd30      	pop	{r4, r5, pc}
 8017dc6:	42a3      	cmp	r3, r4
 8017dc8:	d3f4      	bcc.n	8017db4 <__mcmp+0x18>
 8017dca:	e7fb      	b.n	8017dc4 <__mcmp+0x28>
 8017dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd0:	e7f8      	b.n	8017dc4 <__mcmp+0x28>
	...

08017dd4 <__mdiff>:
 8017dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd8:	460d      	mov	r5, r1
 8017dda:	4607      	mov	r7, r0
 8017ddc:	4611      	mov	r1, r2
 8017dde:	4628      	mov	r0, r5
 8017de0:	4614      	mov	r4, r2
 8017de2:	f7ff ffdb 	bl	8017d9c <__mcmp>
 8017de6:	1e06      	subs	r6, r0, #0
 8017de8:	d111      	bne.n	8017e0e <__mdiff+0x3a>
 8017dea:	4631      	mov	r1, r6
 8017dec:	4638      	mov	r0, r7
 8017dee:	f7ff fd57 	bl	80178a0 <_Balloc>
 8017df2:	4602      	mov	r2, r0
 8017df4:	b928      	cbnz	r0, 8017e02 <__mdiff+0x2e>
 8017df6:	f240 2132 	movw	r1, #562	; 0x232
 8017dfa:	4b3a      	ldr	r3, [pc, #232]	; (8017ee4 <__mdiff+0x110>)
 8017dfc:	483a      	ldr	r0, [pc, #232]	; (8017ee8 <__mdiff+0x114>)
 8017dfe:	f000 fa53 	bl	80182a8 <__assert_func>
 8017e02:	2301      	movs	r3, #1
 8017e04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017e08:	4610      	mov	r0, r2
 8017e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e0e:	bfa4      	itt	ge
 8017e10:	4623      	movge	r3, r4
 8017e12:	462c      	movge	r4, r5
 8017e14:	4638      	mov	r0, r7
 8017e16:	6861      	ldr	r1, [r4, #4]
 8017e18:	bfa6      	itte	ge
 8017e1a:	461d      	movge	r5, r3
 8017e1c:	2600      	movge	r6, #0
 8017e1e:	2601      	movlt	r6, #1
 8017e20:	f7ff fd3e 	bl	80178a0 <_Balloc>
 8017e24:	4602      	mov	r2, r0
 8017e26:	b918      	cbnz	r0, 8017e30 <__mdiff+0x5c>
 8017e28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017e2c:	4b2d      	ldr	r3, [pc, #180]	; (8017ee4 <__mdiff+0x110>)
 8017e2e:	e7e5      	b.n	8017dfc <__mdiff+0x28>
 8017e30:	f102 0814 	add.w	r8, r2, #20
 8017e34:	46c2      	mov	sl, r8
 8017e36:	f04f 0c00 	mov.w	ip, #0
 8017e3a:	6927      	ldr	r7, [r4, #16]
 8017e3c:	60c6      	str	r6, [r0, #12]
 8017e3e:	692e      	ldr	r6, [r5, #16]
 8017e40:	f104 0014 	add.w	r0, r4, #20
 8017e44:	f105 0914 	add.w	r9, r5, #20
 8017e48:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8017e4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017e50:	3410      	adds	r4, #16
 8017e52:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8017e56:	f859 3b04 	ldr.w	r3, [r9], #4
 8017e5a:	fa1f f18b 	uxth.w	r1, fp
 8017e5e:	448c      	add	ip, r1
 8017e60:	b299      	uxth	r1, r3
 8017e62:	0c1b      	lsrs	r3, r3, #16
 8017e64:	ebac 0101 	sub.w	r1, ip, r1
 8017e68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017e6c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017e70:	b289      	uxth	r1, r1
 8017e72:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8017e76:	454e      	cmp	r6, r9
 8017e78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017e7c:	f84a 3b04 	str.w	r3, [sl], #4
 8017e80:	d8e7      	bhi.n	8017e52 <__mdiff+0x7e>
 8017e82:	1b73      	subs	r3, r6, r5
 8017e84:	3b15      	subs	r3, #21
 8017e86:	f023 0303 	bic.w	r3, r3, #3
 8017e8a:	3515      	adds	r5, #21
 8017e8c:	3304      	adds	r3, #4
 8017e8e:	42ae      	cmp	r6, r5
 8017e90:	bf38      	it	cc
 8017e92:	2304      	movcc	r3, #4
 8017e94:	4418      	add	r0, r3
 8017e96:	4443      	add	r3, r8
 8017e98:	461e      	mov	r6, r3
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	4575      	cmp	r5, lr
 8017e9e:	d30e      	bcc.n	8017ebe <__mdiff+0xea>
 8017ea0:	f10e 0103 	add.w	r1, lr, #3
 8017ea4:	1a09      	subs	r1, r1, r0
 8017ea6:	f021 0103 	bic.w	r1, r1, #3
 8017eaa:	3803      	subs	r0, #3
 8017eac:	4586      	cmp	lr, r0
 8017eae:	bf38      	it	cc
 8017eb0:	2100      	movcc	r1, #0
 8017eb2:	4419      	add	r1, r3
 8017eb4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8017eb8:	b18b      	cbz	r3, 8017ede <__mdiff+0x10a>
 8017eba:	6117      	str	r7, [r2, #16]
 8017ebc:	e7a4      	b.n	8017e08 <__mdiff+0x34>
 8017ebe:	f855 8b04 	ldr.w	r8, [r5], #4
 8017ec2:	fa1f f188 	uxth.w	r1, r8
 8017ec6:	4461      	add	r1, ip
 8017ec8:	140c      	asrs	r4, r1, #16
 8017eca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017ece:	b289      	uxth	r1, r1
 8017ed0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017ed4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8017ed8:	f846 1b04 	str.w	r1, [r6], #4
 8017edc:	e7de      	b.n	8017e9c <__mdiff+0xc8>
 8017ede:	3f01      	subs	r7, #1
 8017ee0:	e7e8      	b.n	8017eb4 <__mdiff+0xe0>
 8017ee2:	bf00      	nop
 8017ee4:	08031fd7 	.word	0x08031fd7
 8017ee8:	08031fe8 	.word	0x08031fe8

08017eec <__d2b>:
 8017eec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017ef0:	2101      	movs	r1, #1
 8017ef2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8017ef6:	4690      	mov	r8, r2
 8017ef8:	461d      	mov	r5, r3
 8017efa:	f7ff fcd1 	bl	80178a0 <_Balloc>
 8017efe:	4604      	mov	r4, r0
 8017f00:	b930      	cbnz	r0, 8017f10 <__d2b+0x24>
 8017f02:	4602      	mov	r2, r0
 8017f04:	f240 310a 	movw	r1, #778	; 0x30a
 8017f08:	4b24      	ldr	r3, [pc, #144]	; (8017f9c <__d2b+0xb0>)
 8017f0a:	4825      	ldr	r0, [pc, #148]	; (8017fa0 <__d2b+0xb4>)
 8017f0c:	f000 f9cc 	bl	80182a8 <__assert_func>
 8017f10:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8017f14:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8017f18:	bb2d      	cbnz	r5, 8017f66 <__d2b+0x7a>
 8017f1a:	9301      	str	r3, [sp, #4]
 8017f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8017f20:	d026      	beq.n	8017f70 <__d2b+0x84>
 8017f22:	4668      	mov	r0, sp
 8017f24:	9300      	str	r3, [sp, #0]
 8017f26:	f7ff fd83 	bl	8017a30 <__lo0bits>
 8017f2a:	9900      	ldr	r1, [sp, #0]
 8017f2c:	b1f0      	cbz	r0, 8017f6c <__d2b+0x80>
 8017f2e:	9a01      	ldr	r2, [sp, #4]
 8017f30:	f1c0 0320 	rsb	r3, r0, #32
 8017f34:	fa02 f303 	lsl.w	r3, r2, r3
 8017f38:	430b      	orrs	r3, r1
 8017f3a:	40c2      	lsrs	r2, r0
 8017f3c:	6163      	str	r3, [r4, #20]
 8017f3e:	9201      	str	r2, [sp, #4]
 8017f40:	9b01      	ldr	r3, [sp, #4]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	bf14      	ite	ne
 8017f46:	2102      	movne	r1, #2
 8017f48:	2101      	moveq	r1, #1
 8017f4a:	61a3      	str	r3, [r4, #24]
 8017f4c:	6121      	str	r1, [r4, #16]
 8017f4e:	b1c5      	cbz	r5, 8017f82 <__d2b+0x96>
 8017f50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017f54:	4405      	add	r5, r0
 8017f56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017f5a:	603d      	str	r5, [r7, #0]
 8017f5c:	6030      	str	r0, [r6, #0]
 8017f5e:	4620      	mov	r0, r4
 8017f60:	b002      	add	sp, #8
 8017f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f6a:	e7d6      	b.n	8017f1a <__d2b+0x2e>
 8017f6c:	6161      	str	r1, [r4, #20]
 8017f6e:	e7e7      	b.n	8017f40 <__d2b+0x54>
 8017f70:	a801      	add	r0, sp, #4
 8017f72:	f7ff fd5d 	bl	8017a30 <__lo0bits>
 8017f76:	2101      	movs	r1, #1
 8017f78:	9b01      	ldr	r3, [sp, #4]
 8017f7a:	6121      	str	r1, [r4, #16]
 8017f7c:	6163      	str	r3, [r4, #20]
 8017f7e:	3020      	adds	r0, #32
 8017f80:	e7e5      	b.n	8017f4e <__d2b+0x62>
 8017f82:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8017f86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017f8a:	6038      	str	r0, [r7, #0]
 8017f8c:	6918      	ldr	r0, [r3, #16]
 8017f8e:	f7ff fd2f 	bl	80179f0 <__hi0bits>
 8017f92:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8017f96:	6031      	str	r1, [r6, #0]
 8017f98:	e7e1      	b.n	8017f5e <__d2b+0x72>
 8017f9a:	bf00      	nop
 8017f9c:	08031fd7 	.word	0x08031fd7
 8017fa0:	08031fe8 	.word	0x08031fe8

08017fa4 <_calloc_r>:
 8017fa4:	b570      	push	{r4, r5, r6, lr}
 8017fa6:	fba1 5402 	umull	r5, r4, r1, r2
 8017faa:	b934      	cbnz	r4, 8017fba <_calloc_r+0x16>
 8017fac:	4629      	mov	r1, r5
 8017fae:	f7fd ff23 	bl	8015df8 <_malloc_r>
 8017fb2:	4606      	mov	r6, r0
 8017fb4:	b928      	cbnz	r0, 8017fc2 <_calloc_r+0x1e>
 8017fb6:	4630      	mov	r0, r6
 8017fb8:	bd70      	pop	{r4, r5, r6, pc}
 8017fba:	220c      	movs	r2, #12
 8017fbc:	2600      	movs	r6, #0
 8017fbe:	6002      	str	r2, [r0, #0]
 8017fc0:	e7f9      	b.n	8017fb6 <_calloc_r+0x12>
 8017fc2:	462a      	mov	r2, r5
 8017fc4:	4621      	mov	r1, r4
 8017fc6:	f7fd fea7 	bl	8015d18 <memset>
 8017fca:	e7f4      	b.n	8017fb6 <_calloc_r+0x12>

08017fcc <__ssputs_r>:
 8017fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd0:	688e      	ldr	r6, [r1, #8]
 8017fd2:	4682      	mov	sl, r0
 8017fd4:	429e      	cmp	r6, r3
 8017fd6:	460c      	mov	r4, r1
 8017fd8:	4690      	mov	r8, r2
 8017fda:	461f      	mov	r7, r3
 8017fdc:	d838      	bhi.n	8018050 <__ssputs_r+0x84>
 8017fde:	898a      	ldrh	r2, [r1, #12]
 8017fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fe4:	d032      	beq.n	801804c <__ssputs_r+0x80>
 8017fe6:	6825      	ldr	r5, [r4, #0]
 8017fe8:	6909      	ldr	r1, [r1, #16]
 8017fea:	3301      	adds	r3, #1
 8017fec:	eba5 0901 	sub.w	r9, r5, r1
 8017ff0:	6965      	ldr	r5, [r4, #20]
 8017ff2:	444b      	add	r3, r9
 8017ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017ffc:	106d      	asrs	r5, r5, #1
 8017ffe:	429d      	cmp	r5, r3
 8018000:	bf38      	it	cc
 8018002:	461d      	movcc	r5, r3
 8018004:	0553      	lsls	r3, r2, #21
 8018006:	d531      	bpl.n	801806c <__ssputs_r+0xa0>
 8018008:	4629      	mov	r1, r5
 801800a:	f7fd fef5 	bl	8015df8 <_malloc_r>
 801800e:	4606      	mov	r6, r0
 8018010:	b950      	cbnz	r0, 8018028 <__ssputs_r+0x5c>
 8018012:	230c      	movs	r3, #12
 8018014:	f04f 30ff 	mov.w	r0, #4294967295
 8018018:	f8ca 3000 	str.w	r3, [sl]
 801801c:	89a3      	ldrh	r3, [r4, #12]
 801801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018022:	81a3      	strh	r3, [r4, #12]
 8018024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018028:	464a      	mov	r2, r9
 801802a:	6921      	ldr	r1, [r4, #16]
 801802c:	f7fd fe66 	bl	8015cfc <memcpy>
 8018030:	89a3      	ldrh	r3, [r4, #12]
 8018032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801803a:	81a3      	strh	r3, [r4, #12]
 801803c:	6126      	str	r6, [r4, #16]
 801803e:	444e      	add	r6, r9
 8018040:	6026      	str	r6, [r4, #0]
 8018042:	463e      	mov	r6, r7
 8018044:	6165      	str	r5, [r4, #20]
 8018046:	eba5 0509 	sub.w	r5, r5, r9
 801804a:	60a5      	str	r5, [r4, #8]
 801804c:	42be      	cmp	r6, r7
 801804e:	d900      	bls.n	8018052 <__ssputs_r+0x86>
 8018050:	463e      	mov	r6, r7
 8018052:	4632      	mov	r2, r6
 8018054:	4641      	mov	r1, r8
 8018056:	6820      	ldr	r0, [r4, #0]
 8018058:	f000 f968 	bl	801832c <memmove>
 801805c:	68a3      	ldr	r3, [r4, #8]
 801805e:	2000      	movs	r0, #0
 8018060:	1b9b      	subs	r3, r3, r6
 8018062:	60a3      	str	r3, [r4, #8]
 8018064:	6823      	ldr	r3, [r4, #0]
 8018066:	4433      	add	r3, r6
 8018068:	6023      	str	r3, [r4, #0]
 801806a:	e7db      	b.n	8018024 <__ssputs_r+0x58>
 801806c:	462a      	mov	r2, r5
 801806e:	f000 f977 	bl	8018360 <_realloc_r>
 8018072:	4606      	mov	r6, r0
 8018074:	2800      	cmp	r0, #0
 8018076:	d1e1      	bne.n	801803c <__ssputs_r+0x70>
 8018078:	4650      	mov	r0, sl
 801807a:	6921      	ldr	r1, [r4, #16]
 801807c:	f7fd fe54 	bl	8015d28 <_free_r>
 8018080:	e7c7      	b.n	8018012 <__ssputs_r+0x46>
	...

08018084 <_svfiprintf_r>:
 8018084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018088:	4698      	mov	r8, r3
 801808a:	898b      	ldrh	r3, [r1, #12]
 801808c:	4607      	mov	r7, r0
 801808e:	061b      	lsls	r3, r3, #24
 8018090:	460d      	mov	r5, r1
 8018092:	4614      	mov	r4, r2
 8018094:	b09d      	sub	sp, #116	; 0x74
 8018096:	d50e      	bpl.n	80180b6 <_svfiprintf_r+0x32>
 8018098:	690b      	ldr	r3, [r1, #16]
 801809a:	b963      	cbnz	r3, 80180b6 <_svfiprintf_r+0x32>
 801809c:	2140      	movs	r1, #64	; 0x40
 801809e:	f7fd feab 	bl	8015df8 <_malloc_r>
 80180a2:	6028      	str	r0, [r5, #0]
 80180a4:	6128      	str	r0, [r5, #16]
 80180a6:	b920      	cbnz	r0, 80180b2 <_svfiprintf_r+0x2e>
 80180a8:	230c      	movs	r3, #12
 80180aa:	603b      	str	r3, [r7, #0]
 80180ac:	f04f 30ff 	mov.w	r0, #4294967295
 80180b0:	e0d1      	b.n	8018256 <_svfiprintf_r+0x1d2>
 80180b2:	2340      	movs	r3, #64	; 0x40
 80180b4:	616b      	str	r3, [r5, #20]
 80180b6:	2300      	movs	r3, #0
 80180b8:	9309      	str	r3, [sp, #36]	; 0x24
 80180ba:	2320      	movs	r3, #32
 80180bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80180c0:	2330      	movs	r3, #48	; 0x30
 80180c2:	f04f 0901 	mov.w	r9, #1
 80180c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80180ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018270 <_svfiprintf_r+0x1ec>
 80180ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180d2:	4623      	mov	r3, r4
 80180d4:	469a      	mov	sl, r3
 80180d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180da:	b10a      	cbz	r2, 80180e0 <_svfiprintf_r+0x5c>
 80180dc:	2a25      	cmp	r2, #37	; 0x25
 80180de:	d1f9      	bne.n	80180d4 <_svfiprintf_r+0x50>
 80180e0:	ebba 0b04 	subs.w	fp, sl, r4
 80180e4:	d00b      	beq.n	80180fe <_svfiprintf_r+0x7a>
 80180e6:	465b      	mov	r3, fp
 80180e8:	4622      	mov	r2, r4
 80180ea:	4629      	mov	r1, r5
 80180ec:	4638      	mov	r0, r7
 80180ee:	f7ff ff6d 	bl	8017fcc <__ssputs_r>
 80180f2:	3001      	adds	r0, #1
 80180f4:	f000 80aa 	beq.w	801824c <_svfiprintf_r+0x1c8>
 80180f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180fa:	445a      	add	r2, fp
 80180fc:	9209      	str	r2, [sp, #36]	; 0x24
 80180fe:	f89a 3000 	ldrb.w	r3, [sl]
 8018102:	2b00      	cmp	r3, #0
 8018104:	f000 80a2 	beq.w	801824c <_svfiprintf_r+0x1c8>
 8018108:	2300      	movs	r3, #0
 801810a:	f04f 32ff 	mov.w	r2, #4294967295
 801810e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018112:	f10a 0a01 	add.w	sl, sl, #1
 8018116:	9304      	str	r3, [sp, #16]
 8018118:	9307      	str	r3, [sp, #28]
 801811a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801811e:	931a      	str	r3, [sp, #104]	; 0x68
 8018120:	4654      	mov	r4, sl
 8018122:	2205      	movs	r2, #5
 8018124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018128:	4851      	ldr	r0, [pc, #324]	; (8018270 <_svfiprintf_r+0x1ec>)
 801812a:	f7ff fb9f 	bl	801786c <memchr>
 801812e:	9a04      	ldr	r2, [sp, #16]
 8018130:	b9d8      	cbnz	r0, 801816a <_svfiprintf_r+0xe6>
 8018132:	06d0      	lsls	r0, r2, #27
 8018134:	bf44      	itt	mi
 8018136:	2320      	movmi	r3, #32
 8018138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801813c:	0711      	lsls	r1, r2, #28
 801813e:	bf44      	itt	mi
 8018140:	232b      	movmi	r3, #43	; 0x2b
 8018142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018146:	f89a 3000 	ldrb.w	r3, [sl]
 801814a:	2b2a      	cmp	r3, #42	; 0x2a
 801814c:	d015      	beq.n	801817a <_svfiprintf_r+0xf6>
 801814e:	4654      	mov	r4, sl
 8018150:	2000      	movs	r0, #0
 8018152:	f04f 0c0a 	mov.w	ip, #10
 8018156:	9a07      	ldr	r2, [sp, #28]
 8018158:	4621      	mov	r1, r4
 801815a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801815e:	3b30      	subs	r3, #48	; 0x30
 8018160:	2b09      	cmp	r3, #9
 8018162:	d94e      	bls.n	8018202 <_svfiprintf_r+0x17e>
 8018164:	b1b0      	cbz	r0, 8018194 <_svfiprintf_r+0x110>
 8018166:	9207      	str	r2, [sp, #28]
 8018168:	e014      	b.n	8018194 <_svfiprintf_r+0x110>
 801816a:	eba0 0308 	sub.w	r3, r0, r8
 801816e:	fa09 f303 	lsl.w	r3, r9, r3
 8018172:	4313      	orrs	r3, r2
 8018174:	46a2      	mov	sl, r4
 8018176:	9304      	str	r3, [sp, #16]
 8018178:	e7d2      	b.n	8018120 <_svfiprintf_r+0x9c>
 801817a:	9b03      	ldr	r3, [sp, #12]
 801817c:	1d19      	adds	r1, r3, #4
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	9103      	str	r1, [sp, #12]
 8018182:	2b00      	cmp	r3, #0
 8018184:	bfbb      	ittet	lt
 8018186:	425b      	neglt	r3, r3
 8018188:	f042 0202 	orrlt.w	r2, r2, #2
 801818c:	9307      	strge	r3, [sp, #28]
 801818e:	9307      	strlt	r3, [sp, #28]
 8018190:	bfb8      	it	lt
 8018192:	9204      	strlt	r2, [sp, #16]
 8018194:	7823      	ldrb	r3, [r4, #0]
 8018196:	2b2e      	cmp	r3, #46	; 0x2e
 8018198:	d10c      	bne.n	80181b4 <_svfiprintf_r+0x130>
 801819a:	7863      	ldrb	r3, [r4, #1]
 801819c:	2b2a      	cmp	r3, #42	; 0x2a
 801819e:	d135      	bne.n	801820c <_svfiprintf_r+0x188>
 80181a0:	9b03      	ldr	r3, [sp, #12]
 80181a2:	3402      	adds	r4, #2
 80181a4:	1d1a      	adds	r2, r3, #4
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	9203      	str	r2, [sp, #12]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	bfb8      	it	lt
 80181ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80181b2:	9305      	str	r3, [sp, #20]
 80181b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8018274 <_svfiprintf_r+0x1f0>
 80181b8:	2203      	movs	r2, #3
 80181ba:	4650      	mov	r0, sl
 80181bc:	7821      	ldrb	r1, [r4, #0]
 80181be:	f7ff fb55 	bl	801786c <memchr>
 80181c2:	b140      	cbz	r0, 80181d6 <_svfiprintf_r+0x152>
 80181c4:	2340      	movs	r3, #64	; 0x40
 80181c6:	eba0 000a 	sub.w	r0, r0, sl
 80181ca:	fa03 f000 	lsl.w	r0, r3, r0
 80181ce:	9b04      	ldr	r3, [sp, #16]
 80181d0:	3401      	adds	r4, #1
 80181d2:	4303      	orrs	r3, r0
 80181d4:	9304      	str	r3, [sp, #16]
 80181d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181da:	2206      	movs	r2, #6
 80181dc:	4826      	ldr	r0, [pc, #152]	; (8018278 <_svfiprintf_r+0x1f4>)
 80181de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181e2:	f7ff fb43 	bl	801786c <memchr>
 80181e6:	2800      	cmp	r0, #0
 80181e8:	d038      	beq.n	801825c <_svfiprintf_r+0x1d8>
 80181ea:	4b24      	ldr	r3, [pc, #144]	; (801827c <_svfiprintf_r+0x1f8>)
 80181ec:	bb1b      	cbnz	r3, 8018236 <_svfiprintf_r+0x1b2>
 80181ee:	9b03      	ldr	r3, [sp, #12]
 80181f0:	3307      	adds	r3, #7
 80181f2:	f023 0307 	bic.w	r3, r3, #7
 80181f6:	3308      	adds	r3, #8
 80181f8:	9303      	str	r3, [sp, #12]
 80181fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181fc:	4433      	add	r3, r6
 80181fe:	9309      	str	r3, [sp, #36]	; 0x24
 8018200:	e767      	b.n	80180d2 <_svfiprintf_r+0x4e>
 8018202:	460c      	mov	r4, r1
 8018204:	2001      	movs	r0, #1
 8018206:	fb0c 3202 	mla	r2, ip, r2, r3
 801820a:	e7a5      	b.n	8018158 <_svfiprintf_r+0xd4>
 801820c:	2300      	movs	r3, #0
 801820e:	f04f 0c0a 	mov.w	ip, #10
 8018212:	4619      	mov	r1, r3
 8018214:	3401      	adds	r4, #1
 8018216:	9305      	str	r3, [sp, #20]
 8018218:	4620      	mov	r0, r4
 801821a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801821e:	3a30      	subs	r2, #48	; 0x30
 8018220:	2a09      	cmp	r2, #9
 8018222:	d903      	bls.n	801822c <_svfiprintf_r+0x1a8>
 8018224:	2b00      	cmp	r3, #0
 8018226:	d0c5      	beq.n	80181b4 <_svfiprintf_r+0x130>
 8018228:	9105      	str	r1, [sp, #20]
 801822a:	e7c3      	b.n	80181b4 <_svfiprintf_r+0x130>
 801822c:	4604      	mov	r4, r0
 801822e:	2301      	movs	r3, #1
 8018230:	fb0c 2101 	mla	r1, ip, r1, r2
 8018234:	e7f0      	b.n	8018218 <_svfiprintf_r+0x194>
 8018236:	ab03      	add	r3, sp, #12
 8018238:	9300      	str	r3, [sp, #0]
 801823a:	462a      	mov	r2, r5
 801823c:	4638      	mov	r0, r7
 801823e:	4b10      	ldr	r3, [pc, #64]	; (8018280 <_svfiprintf_r+0x1fc>)
 8018240:	a904      	add	r1, sp, #16
 8018242:	f7fd feeb 	bl	801601c <_printf_float>
 8018246:	1c42      	adds	r2, r0, #1
 8018248:	4606      	mov	r6, r0
 801824a:	d1d6      	bne.n	80181fa <_svfiprintf_r+0x176>
 801824c:	89ab      	ldrh	r3, [r5, #12]
 801824e:	065b      	lsls	r3, r3, #25
 8018250:	f53f af2c 	bmi.w	80180ac <_svfiprintf_r+0x28>
 8018254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018256:	b01d      	add	sp, #116	; 0x74
 8018258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825c:	ab03      	add	r3, sp, #12
 801825e:	9300      	str	r3, [sp, #0]
 8018260:	462a      	mov	r2, r5
 8018262:	4638      	mov	r0, r7
 8018264:	4b06      	ldr	r3, [pc, #24]	; (8018280 <_svfiprintf_r+0x1fc>)
 8018266:	a904      	add	r1, sp, #16
 8018268:	f7fe f974 	bl	8016554 <_printf_i>
 801826c:	e7eb      	b.n	8018246 <_svfiprintf_r+0x1c2>
 801826e:	bf00      	nop
 8018270:	08032144 	.word	0x08032144
 8018274:	0803214a 	.word	0x0803214a
 8018278:	0803214e 	.word	0x0803214e
 801827c:	0801601d 	.word	0x0801601d
 8018280:	08017fcd 	.word	0x08017fcd

08018284 <_read_r>:
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	4604      	mov	r4, r0
 8018288:	4608      	mov	r0, r1
 801828a:	4611      	mov	r1, r2
 801828c:	2200      	movs	r2, #0
 801828e:	4d05      	ldr	r5, [pc, #20]	; (80182a4 <_read_r+0x20>)
 8018290:	602a      	str	r2, [r5, #0]
 8018292:	461a      	mov	r2, r3
 8018294:	f7eb faab 	bl	80037ee <_read>
 8018298:	1c43      	adds	r3, r0, #1
 801829a:	d102      	bne.n	80182a2 <_read_r+0x1e>
 801829c:	682b      	ldr	r3, [r5, #0]
 801829e:	b103      	cbz	r3, 80182a2 <_read_r+0x1e>
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	bd38      	pop	{r3, r4, r5, pc}
 80182a4:	20002488 	.word	0x20002488

080182a8 <__assert_func>:
 80182a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80182aa:	4614      	mov	r4, r2
 80182ac:	461a      	mov	r2, r3
 80182ae:	4b09      	ldr	r3, [pc, #36]	; (80182d4 <__assert_func+0x2c>)
 80182b0:	4605      	mov	r5, r0
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	68d8      	ldr	r0, [r3, #12]
 80182b6:	b14c      	cbz	r4, 80182cc <__assert_func+0x24>
 80182b8:	4b07      	ldr	r3, [pc, #28]	; (80182d8 <__assert_func+0x30>)
 80182ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80182be:	9100      	str	r1, [sp, #0]
 80182c0:	462b      	mov	r3, r5
 80182c2:	4906      	ldr	r1, [pc, #24]	; (80182dc <__assert_func+0x34>)
 80182c4:	f000 f80e 	bl	80182e4 <fiprintf>
 80182c8:	f000 fa9e 	bl	8018808 <abort>
 80182cc:	4b04      	ldr	r3, [pc, #16]	; (80182e0 <__assert_func+0x38>)
 80182ce:	461c      	mov	r4, r3
 80182d0:	e7f3      	b.n	80182ba <__assert_func+0x12>
 80182d2:	bf00      	nop
 80182d4:	200000b8 	.word	0x200000b8
 80182d8:	08032155 	.word	0x08032155
 80182dc:	08032162 	.word	0x08032162
 80182e0:	08032190 	.word	0x08032190

080182e4 <fiprintf>:
 80182e4:	b40e      	push	{r1, r2, r3}
 80182e6:	b503      	push	{r0, r1, lr}
 80182e8:	4601      	mov	r1, r0
 80182ea:	ab03      	add	r3, sp, #12
 80182ec:	4805      	ldr	r0, [pc, #20]	; (8018304 <fiprintf+0x20>)
 80182ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80182f2:	6800      	ldr	r0, [r0, #0]
 80182f4:	9301      	str	r3, [sp, #4]
 80182f6:	f000 f889 	bl	801840c <_vfiprintf_r>
 80182fa:	b002      	add	sp, #8
 80182fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018300:	b003      	add	sp, #12
 8018302:	4770      	bx	lr
 8018304:	200000b8 	.word	0x200000b8

08018308 <__ascii_mbtowc>:
 8018308:	b082      	sub	sp, #8
 801830a:	b901      	cbnz	r1, 801830e <__ascii_mbtowc+0x6>
 801830c:	a901      	add	r1, sp, #4
 801830e:	b142      	cbz	r2, 8018322 <__ascii_mbtowc+0x1a>
 8018310:	b14b      	cbz	r3, 8018326 <__ascii_mbtowc+0x1e>
 8018312:	7813      	ldrb	r3, [r2, #0]
 8018314:	600b      	str	r3, [r1, #0]
 8018316:	7812      	ldrb	r2, [r2, #0]
 8018318:	1e10      	subs	r0, r2, #0
 801831a:	bf18      	it	ne
 801831c:	2001      	movne	r0, #1
 801831e:	b002      	add	sp, #8
 8018320:	4770      	bx	lr
 8018322:	4610      	mov	r0, r2
 8018324:	e7fb      	b.n	801831e <__ascii_mbtowc+0x16>
 8018326:	f06f 0001 	mvn.w	r0, #1
 801832a:	e7f8      	b.n	801831e <__ascii_mbtowc+0x16>

0801832c <memmove>:
 801832c:	4288      	cmp	r0, r1
 801832e:	b510      	push	{r4, lr}
 8018330:	eb01 0402 	add.w	r4, r1, r2
 8018334:	d902      	bls.n	801833c <memmove+0x10>
 8018336:	4284      	cmp	r4, r0
 8018338:	4623      	mov	r3, r4
 801833a:	d807      	bhi.n	801834c <memmove+0x20>
 801833c:	1e43      	subs	r3, r0, #1
 801833e:	42a1      	cmp	r1, r4
 8018340:	d008      	beq.n	8018354 <memmove+0x28>
 8018342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018346:	f803 2f01 	strb.w	r2, [r3, #1]!
 801834a:	e7f8      	b.n	801833e <memmove+0x12>
 801834c:	4601      	mov	r1, r0
 801834e:	4402      	add	r2, r0
 8018350:	428a      	cmp	r2, r1
 8018352:	d100      	bne.n	8018356 <memmove+0x2a>
 8018354:	bd10      	pop	{r4, pc}
 8018356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801835a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801835e:	e7f7      	b.n	8018350 <memmove+0x24>

08018360 <_realloc_r>:
 8018360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018364:	4680      	mov	r8, r0
 8018366:	4614      	mov	r4, r2
 8018368:	460e      	mov	r6, r1
 801836a:	b921      	cbnz	r1, 8018376 <_realloc_r+0x16>
 801836c:	4611      	mov	r1, r2
 801836e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018372:	f7fd bd41 	b.w	8015df8 <_malloc_r>
 8018376:	b92a      	cbnz	r2, 8018384 <_realloc_r+0x24>
 8018378:	f7fd fcd6 	bl	8015d28 <_free_r>
 801837c:	4625      	mov	r5, r4
 801837e:	4628      	mov	r0, r5
 8018380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018384:	f000 faac 	bl	80188e0 <_malloc_usable_size_r>
 8018388:	4284      	cmp	r4, r0
 801838a:	4607      	mov	r7, r0
 801838c:	d802      	bhi.n	8018394 <_realloc_r+0x34>
 801838e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018392:	d812      	bhi.n	80183ba <_realloc_r+0x5a>
 8018394:	4621      	mov	r1, r4
 8018396:	4640      	mov	r0, r8
 8018398:	f7fd fd2e 	bl	8015df8 <_malloc_r>
 801839c:	4605      	mov	r5, r0
 801839e:	2800      	cmp	r0, #0
 80183a0:	d0ed      	beq.n	801837e <_realloc_r+0x1e>
 80183a2:	42bc      	cmp	r4, r7
 80183a4:	4622      	mov	r2, r4
 80183a6:	4631      	mov	r1, r6
 80183a8:	bf28      	it	cs
 80183aa:	463a      	movcs	r2, r7
 80183ac:	f7fd fca6 	bl	8015cfc <memcpy>
 80183b0:	4631      	mov	r1, r6
 80183b2:	4640      	mov	r0, r8
 80183b4:	f7fd fcb8 	bl	8015d28 <_free_r>
 80183b8:	e7e1      	b.n	801837e <_realloc_r+0x1e>
 80183ba:	4635      	mov	r5, r6
 80183bc:	e7df      	b.n	801837e <_realloc_r+0x1e>

080183be <__sfputc_r>:
 80183be:	6893      	ldr	r3, [r2, #8]
 80183c0:	b410      	push	{r4}
 80183c2:	3b01      	subs	r3, #1
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	6093      	str	r3, [r2, #8]
 80183c8:	da07      	bge.n	80183da <__sfputc_r+0x1c>
 80183ca:	6994      	ldr	r4, [r2, #24]
 80183cc:	42a3      	cmp	r3, r4
 80183ce:	db01      	blt.n	80183d4 <__sfputc_r+0x16>
 80183d0:	290a      	cmp	r1, #10
 80183d2:	d102      	bne.n	80183da <__sfputc_r+0x1c>
 80183d4:	bc10      	pop	{r4}
 80183d6:	f000 b949 	b.w	801866c <__swbuf_r>
 80183da:	6813      	ldr	r3, [r2, #0]
 80183dc:	1c58      	adds	r0, r3, #1
 80183de:	6010      	str	r0, [r2, #0]
 80183e0:	7019      	strb	r1, [r3, #0]
 80183e2:	4608      	mov	r0, r1
 80183e4:	bc10      	pop	{r4}
 80183e6:	4770      	bx	lr

080183e8 <__sfputs_r>:
 80183e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ea:	4606      	mov	r6, r0
 80183ec:	460f      	mov	r7, r1
 80183ee:	4614      	mov	r4, r2
 80183f0:	18d5      	adds	r5, r2, r3
 80183f2:	42ac      	cmp	r4, r5
 80183f4:	d101      	bne.n	80183fa <__sfputs_r+0x12>
 80183f6:	2000      	movs	r0, #0
 80183f8:	e007      	b.n	801840a <__sfputs_r+0x22>
 80183fa:	463a      	mov	r2, r7
 80183fc:	4630      	mov	r0, r6
 80183fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018402:	f7ff ffdc 	bl	80183be <__sfputc_r>
 8018406:	1c43      	adds	r3, r0, #1
 8018408:	d1f3      	bne.n	80183f2 <__sfputs_r+0xa>
 801840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801840c <_vfiprintf_r>:
 801840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018410:	460d      	mov	r5, r1
 8018412:	4614      	mov	r4, r2
 8018414:	4698      	mov	r8, r3
 8018416:	4606      	mov	r6, r0
 8018418:	b09d      	sub	sp, #116	; 0x74
 801841a:	b118      	cbz	r0, 8018424 <_vfiprintf_r+0x18>
 801841c:	6983      	ldr	r3, [r0, #24]
 801841e:	b90b      	cbnz	r3, 8018424 <_vfiprintf_r+0x18>
 8018420:	f7fd fb96 	bl	8015b50 <__sinit>
 8018424:	4b89      	ldr	r3, [pc, #548]	; (801864c <_vfiprintf_r+0x240>)
 8018426:	429d      	cmp	r5, r3
 8018428:	d11b      	bne.n	8018462 <_vfiprintf_r+0x56>
 801842a:	6875      	ldr	r5, [r6, #4]
 801842c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801842e:	07d9      	lsls	r1, r3, #31
 8018430:	d405      	bmi.n	801843e <_vfiprintf_r+0x32>
 8018432:	89ab      	ldrh	r3, [r5, #12]
 8018434:	059a      	lsls	r2, r3, #22
 8018436:	d402      	bmi.n	801843e <_vfiprintf_r+0x32>
 8018438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801843a:	f7fd fc4c 	bl	8015cd6 <__retarget_lock_acquire_recursive>
 801843e:	89ab      	ldrh	r3, [r5, #12]
 8018440:	071b      	lsls	r3, r3, #28
 8018442:	d501      	bpl.n	8018448 <_vfiprintf_r+0x3c>
 8018444:	692b      	ldr	r3, [r5, #16]
 8018446:	b9eb      	cbnz	r3, 8018484 <_vfiprintf_r+0x78>
 8018448:	4629      	mov	r1, r5
 801844a:	4630      	mov	r0, r6
 801844c:	f000 f96e 	bl	801872c <__swsetup_r>
 8018450:	b1c0      	cbz	r0, 8018484 <_vfiprintf_r+0x78>
 8018452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018454:	07dc      	lsls	r4, r3, #31
 8018456:	d50e      	bpl.n	8018476 <_vfiprintf_r+0x6a>
 8018458:	f04f 30ff 	mov.w	r0, #4294967295
 801845c:	b01d      	add	sp, #116	; 0x74
 801845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018462:	4b7b      	ldr	r3, [pc, #492]	; (8018650 <_vfiprintf_r+0x244>)
 8018464:	429d      	cmp	r5, r3
 8018466:	d101      	bne.n	801846c <_vfiprintf_r+0x60>
 8018468:	68b5      	ldr	r5, [r6, #8]
 801846a:	e7df      	b.n	801842c <_vfiprintf_r+0x20>
 801846c:	4b79      	ldr	r3, [pc, #484]	; (8018654 <_vfiprintf_r+0x248>)
 801846e:	429d      	cmp	r5, r3
 8018470:	bf08      	it	eq
 8018472:	68f5      	ldreq	r5, [r6, #12]
 8018474:	e7da      	b.n	801842c <_vfiprintf_r+0x20>
 8018476:	89ab      	ldrh	r3, [r5, #12]
 8018478:	0598      	lsls	r0, r3, #22
 801847a:	d4ed      	bmi.n	8018458 <_vfiprintf_r+0x4c>
 801847c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801847e:	f7fd fc2b 	bl	8015cd8 <__retarget_lock_release_recursive>
 8018482:	e7e9      	b.n	8018458 <_vfiprintf_r+0x4c>
 8018484:	2300      	movs	r3, #0
 8018486:	9309      	str	r3, [sp, #36]	; 0x24
 8018488:	2320      	movs	r3, #32
 801848a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801848e:	2330      	movs	r3, #48	; 0x30
 8018490:	f04f 0901 	mov.w	r9, #1
 8018494:	f8cd 800c 	str.w	r8, [sp, #12]
 8018498:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8018658 <_vfiprintf_r+0x24c>
 801849c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80184a0:	4623      	mov	r3, r4
 80184a2:	469a      	mov	sl, r3
 80184a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184a8:	b10a      	cbz	r2, 80184ae <_vfiprintf_r+0xa2>
 80184aa:	2a25      	cmp	r2, #37	; 0x25
 80184ac:	d1f9      	bne.n	80184a2 <_vfiprintf_r+0x96>
 80184ae:	ebba 0b04 	subs.w	fp, sl, r4
 80184b2:	d00b      	beq.n	80184cc <_vfiprintf_r+0xc0>
 80184b4:	465b      	mov	r3, fp
 80184b6:	4622      	mov	r2, r4
 80184b8:	4629      	mov	r1, r5
 80184ba:	4630      	mov	r0, r6
 80184bc:	f7ff ff94 	bl	80183e8 <__sfputs_r>
 80184c0:	3001      	adds	r0, #1
 80184c2:	f000 80aa 	beq.w	801861a <_vfiprintf_r+0x20e>
 80184c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184c8:	445a      	add	r2, fp
 80184ca:	9209      	str	r2, [sp, #36]	; 0x24
 80184cc:	f89a 3000 	ldrb.w	r3, [sl]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	f000 80a2 	beq.w	801861a <_vfiprintf_r+0x20e>
 80184d6:	2300      	movs	r3, #0
 80184d8:	f04f 32ff 	mov.w	r2, #4294967295
 80184dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184e0:	f10a 0a01 	add.w	sl, sl, #1
 80184e4:	9304      	str	r3, [sp, #16]
 80184e6:	9307      	str	r3, [sp, #28]
 80184e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184ec:	931a      	str	r3, [sp, #104]	; 0x68
 80184ee:	4654      	mov	r4, sl
 80184f0:	2205      	movs	r2, #5
 80184f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184f6:	4858      	ldr	r0, [pc, #352]	; (8018658 <_vfiprintf_r+0x24c>)
 80184f8:	f7ff f9b8 	bl	801786c <memchr>
 80184fc:	9a04      	ldr	r2, [sp, #16]
 80184fe:	b9d8      	cbnz	r0, 8018538 <_vfiprintf_r+0x12c>
 8018500:	06d1      	lsls	r1, r2, #27
 8018502:	bf44      	itt	mi
 8018504:	2320      	movmi	r3, #32
 8018506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801850a:	0713      	lsls	r3, r2, #28
 801850c:	bf44      	itt	mi
 801850e:	232b      	movmi	r3, #43	; 0x2b
 8018510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018514:	f89a 3000 	ldrb.w	r3, [sl]
 8018518:	2b2a      	cmp	r3, #42	; 0x2a
 801851a:	d015      	beq.n	8018548 <_vfiprintf_r+0x13c>
 801851c:	4654      	mov	r4, sl
 801851e:	2000      	movs	r0, #0
 8018520:	f04f 0c0a 	mov.w	ip, #10
 8018524:	9a07      	ldr	r2, [sp, #28]
 8018526:	4621      	mov	r1, r4
 8018528:	f811 3b01 	ldrb.w	r3, [r1], #1
 801852c:	3b30      	subs	r3, #48	; 0x30
 801852e:	2b09      	cmp	r3, #9
 8018530:	d94e      	bls.n	80185d0 <_vfiprintf_r+0x1c4>
 8018532:	b1b0      	cbz	r0, 8018562 <_vfiprintf_r+0x156>
 8018534:	9207      	str	r2, [sp, #28]
 8018536:	e014      	b.n	8018562 <_vfiprintf_r+0x156>
 8018538:	eba0 0308 	sub.w	r3, r0, r8
 801853c:	fa09 f303 	lsl.w	r3, r9, r3
 8018540:	4313      	orrs	r3, r2
 8018542:	46a2      	mov	sl, r4
 8018544:	9304      	str	r3, [sp, #16]
 8018546:	e7d2      	b.n	80184ee <_vfiprintf_r+0xe2>
 8018548:	9b03      	ldr	r3, [sp, #12]
 801854a:	1d19      	adds	r1, r3, #4
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	9103      	str	r1, [sp, #12]
 8018550:	2b00      	cmp	r3, #0
 8018552:	bfbb      	ittet	lt
 8018554:	425b      	neglt	r3, r3
 8018556:	f042 0202 	orrlt.w	r2, r2, #2
 801855a:	9307      	strge	r3, [sp, #28]
 801855c:	9307      	strlt	r3, [sp, #28]
 801855e:	bfb8      	it	lt
 8018560:	9204      	strlt	r2, [sp, #16]
 8018562:	7823      	ldrb	r3, [r4, #0]
 8018564:	2b2e      	cmp	r3, #46	; 0x2e
 8018566:	d10c      	bne.n	8018582 <_vfiprintf_r+0x176>
 8018568:	7863      	ldrb	r3, [r4, #1]
 801856a:	2b2a      	cmp	r3, #42	; 0x2a
 801856c:	d135      	bne.n	80185da <_vfiprintf_r+0x1ce>
 801856e:	9b03      	ldr	r3, [sp, #12]
 8018570:	3402      	adds	r4, #2
 8018572:	1d1a      	adds	r2, r3, #4
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	9203      	str	r2, [sp, #12]
 8018578:	2b00      	cmp	r3, #0
 801857a:	bfb8      	it	lt
 801857c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018580:	9305      	str	r3, [sp, #20]
 8018582:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801865c <_vfiprintf_r+0x250>
 8018586:	2203      	movs	r2, #3
 8018588:	4650      	mov	r0, sl
 801858a:	7821      	ldrb	r1, [r4, #0]
 801858c:	f7ff f96e 	bl	801786c <memchr>
 8018590:	b140      	cbz	r0, 80185a4 <_vfiprintf_r+0x198>
 8018592:	2340      	movs	r3, #64	; 0x40
 8018594:	eba0 000a 	sub.w	r0, r0, sl
 8018598:	fa03 f000 	lsl.w	r0, r3, r0
 801859c:	9b04      	ldr	r3, [sp, #16]
 801859e:	3401      	adds	r4, #1
 80185a0:	4303      	orrs	r3, r0
 80185a2:	9304      	str	r3, [sp, #16]
 80185a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185a8:	2206      	movs	r2, #6
 80185aa:	482d      	ldr	r0, [pc, #180]	; (8018660 <_vfiprintf_r+0x254>)
 80185ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80185b0:	f7ff f95c 	bl	801786c <memchr>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d03f      	beq.n	8018638 <_vfiprintf_r+0x22c>
 80185b8:	4b2a      	ldr	r3, [pc, #168]	; (8018664 <_vfiprintf_r+0x258>)
 80185ba:	bb1b      	cbnz	r3, 8018604 <_vfiprintf_r+0x1f8>
 80185bc:	9b03      	ldr	r3, [sp, #12]
 80185be:	3307      	adds	r3, #7
 80185c0:	f023 0307 	bic.w	r3, r3, #7
 80185c4:	3308      	adds	r3, #8
 80185c6:	9303      	str	r3, [sp, #12]
 80185c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185ca:	443b      	add	r3, r7
 80185cc:	9309      	str	r3, [sp, #36]	; 0x24
 80185ce:	e767      	b.n	80184a0 <_vfiprintf_r+0x94>
 80185d0:	460c      	mov	r4, r1
 80185d2:	2001      	movs	r0, #1
 80185d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80185d8:	e7a5      	b.n	8018526 <_vfiprintf_r+0x11a>
 80185da:	2300      	movs	r3, #0
 80185dc:	f04f 0c0a 	mov.w	ip, #10
 80185e0:	4619      	mov	r1, r3
 80185e2:	3401      	adds	r4, #1
 80185e4:	9305      	str	r3, [sp, #20]
 80185e6:	4620      	mov	r0, r4
 80185e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185ec:	3a30      	subs	r2, #48	; 0x30
 80185ee:	2a09      	cmp	r2, #9
 80185f0:	d903      	bls.n	80185fa <_vfiprintf_r+0x1ee>
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d0c5      	beq.n	8018582 <_vfiprintf_r+0x176>
 80185f6:	9105      	str	r1, [sp, #20]
 80185f8:	e7c3      	b.n	8018582 <_vfiprintf_r+0x176>
 80185fa:	4604      	mov	r4, r0
 80185fc:	2301      	movs	r3, #1
 80185fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8018602:	e7f0      	b.n	80185e6 <_vfiprintf_r+0x1da>
 8018604:	ab03      	add	r3, sp, #12
 8018606:	9300      	str	r3, [sp, #0]
 8018608:	462a      	mov	r2, r5
 801860a:	4630      	mov	r0, r6
 801860c:	4b16      	ldr	r3, [pc, #88]	; (8018668 <_vfiprintf_r+0x25c>)
 801860e:	a904      	add	r1, sp, #16
 8018610:	f7fd fd04 	bl	801601c <_printf_float>
 8018614:	4607      	mov	r7, r0
 8018616:	1c78      	adds	r0, r7, #1
 8018618:	d1d6      	bne.n	80185c8 <_vfiprintf_r+0x1bc>
 801861a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801861c:	07d9      	lsls	r1, r3, #31
 801861e:	d405      	bmi.n	801862c <_vfiprintf_r+0x220>
 8018620:	89ab      	ldrh	r3, [r5, #12]
 8018622:	059a      	lsls	r2, r3, #22
 8018624:	d402      	bmi.n	801862c <_vfiprintf_r+0x220>
 8018626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018628:	f7fd fb56 	bl	8015cd8 <__retarget_lock_release_recursive>
 801862c:	89ab      	ldrh	r3, [r5, #12]
 801862e:	065b      	lsls	r3, r3, #25
 8018630:	f53f af12 	bmi.w	8018458 <_vfiprintf_r+0x4c>
 8018634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018636:	e711      	b.n	801845c <_vfiprintf_r+0x50>
 8018638:	ab03      	add	r3, sp, #12
 801863a:	9300      	str	r3, [sp, #0]
 801863c:	462a      	mov	r2, r5
 801863e:	4630      	mov	r0, r6
 8018640:	4b09      	ldr	r3, [pc, #36]	; (8018668 <_vfiprintf_r+0x25c>)
 8018642:	a904      	add	r1, sp, #16
 8018644:	f7fd ff86 	bl	8016554 <_printf_i>
 8018648:	e7e4      	b.n	8018614 <_vfiprintf_r+0x208>
 801864a:	bf00      	nop
 801864c:	08031ee0 	.word	0x08031ee0
 8018650:	08031f00 	.word	0x08031f00
 8018654:	08031ec0 	.word	0x08031ec0
 8018658:	08032144 	.word	0x08032144
 801865c:	0803214a 	.word	0x0803214a
 8018660:	0803214e 	.word	0x0803214e
 8018664:	0801601d 	.word	0x0801601d
 8018668:	080183e9 	.word	0x080183e9

0801866c <__swbuf_r>:
 801866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801866e:	460e      	mov	r6, r1
 8018670:	4614      	mov	r4, r2
 8018672:	4605      	mov	r5, r0
 8018674:	b118      	cbz	r0, 801867e <__swbuf_r+0x12>
 8018676:	6983      	ldr	r3, [r0, #24]
 8018678:	b90b      	cbnz	r3, 801867e <__swbuf_r+0x12>
 801867a:	f7fd fa69 	bl	8015b50 <__sinit>
 801867e:	4b21      	ldr	r3, [pc, #132]	; (8018704 <__swbuf_r+0x98>)
 8018680:	429c      	cmp	r4, r3
 8018682:	d12b      	bne.n	80186dc <__swbuf_r+0x70>
 8018684:	686c      	ldr	r4, [r5, #4]
 8018686:	69a3      	ldr	r3, [r4, #24]
 8018688:	60a3      	str	r3, [r4, #8]
 801868a:	89a3      	ldrh	r3, [r4, #12]
 801868c:	071a      	lsls	r2, r3, #28
 801868e:	d52f      	bpl.n	80186f0 <__swbuf_r+0x84>
 8018690:	6923      	ldr	r3, [r4, #16]
 8018692:	b36b      	cbz	r3, 80186f0 <__swbuf_r+0x84>
 8018694:	6923      	ldr	r3, [r4, #16]
 8018696:	6820      	ldr	r0, [r4, #0]
 8018698:	b2f6      	uxtb	r6, r6
 801869a:	1ac0      	subs	r0, r0, r3
 801869c:	6963      	ldr	r3, [r4, #20]
 801869e:	4637      	mov	r7, r6
 80186a0:	4283      	cmp	r3, r0
 80186a2:	dc04      	bgt.n	80186ae <__swbuf_r+0x42>
 80186a4:	4621      	mov	r1, r4
 80186a6:	4628      	mov	r0, r5
 80186a8:	f7ff f88e 	bl	80177c8 <_fflush_r>
 80186ac:	bb30      	cbnz	r0, 80186fc <__swbuf_r+0x90>
 80186ae:	68a3      	ldr	r3, [r4, #8]
 80186b0:	3001      	adds	r0, #1
 80186b2:	3b01      	subs	r3, #1
 80186b4:	60a3      	str	r3, [r4, #8]
 80186b6:	6823      	ldr	r3, [r4, #0]
 80186b8:	1c5a      	adds	r2, r3, #1
 80186ba:	6022      	str	r2, [r4, #0]
 80186bc:	701e      	strb	r6, [r3, #0]
 80186be:	6963      	ldr	r3, [r4, #20]
 80186c0:	4283      	cmp	r3, r0
 80186c2:	d004      	beq.n	80186ce <__swbuf_r+0x62>
 80186c4:	89a3      	ldrh	r3, [r4, #12]
 80186c6:	07db      	lsls	r3, r3, #31
 80186c8:	d506      	bpl.n	80186d8 <__swbuf_r+0x6c>
 80186ca:	2e0a      	cmp	r6, #10
 80186cc:	d104      	bne.n	80186d8 <__swbuf_r+0x6c>
 80186ce:	4621      	mov	r1, r4
 80186d0:	4628      	mov	r0, r5
 80186d2:	f7ff f879 	bl	80177c8 <_fflush_r>
 80186d6:	b988      	cbnz	r0, 80186fc <__swbuf_r+0x90>
 80186d8:	4638      	mov	r0, r7
 80186da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186dc:	4b0a      	ldr	r3, [pc, #40]	; (8018708 <__swbuf_r+0x9c>)
 80186de:	429c      	cmp	r4, r3
 80186e0:	d101      	bne.n	80186e6 <__swbuf_r+0x7a>
 80186e2:	68ac      	ldr	r4, [r5, #8]
 80186e4:	e7cf      	b.n	8018686 <__swbuf_r+0x1a>
 80186e6:	4b09      	ldr	r3, [pc, #36]	; (801870c <__swbuf_r+0xa0>)
 80186e8:	429c      	cmp	r4, r3
 80186ea:	bf08      	it	eq
 80186ec:	68ec      	ldreq	r4, [r5, #12]
 80186ee:	e7ca      	b.n	8018686 <__swbuf_r+0x1a>
 80186f0:	4621      	mov	r1, r4
 80186f2:	4628      	mov	r0, r5
 80186f4:	f000 f81a 	bl	801872c <__swsetup_r>
 80186f8:	2800      	cmp	r0, #0
 80186fa:	d0cb      	beq.n	8018694 <__swbuf_r+0x28>
 80186fc:	f04f 37ff 	mov.w	r7, #4294967295
 8018700:	e7ea      	b.n	80186d8 <__swbuf_r+0x6c>
 8018702:	bf00      	nop
 8018704:	08031ee0 	.word	0x08031ee0
 8018708:	08031f00 	.word	0x08031f00
 801870c:	08031ec0 	.word	0x08031ec0

08018710 <__ascii_wctomb>:
 8018710:	4603      	mov	r3, r0
 8018712:	4608      	mov	r0, r1
 8018714:	b141      	cbz	r1, 8018728 <__ascii_wctomb+0x18>
 8018716:	2aff      	cmp	r2, #255	; 0xff
 8018718:	d904      	bls.n	8018724 <__ascii_wctomb+0x14>
 801871a:	228a      	movs	r2, #138	; 0x8a
 801871c:	f04f 30ff 	mov.w	r0, #4294967295
 8018720:	601a      	str	r2, [r3, #0]
 8018722:	4770      	bx	lr
 8018724:	2001      	movs	r0, #1
 8018726:	700a      	strb	r2, [r1, #0]
 8018728:	4770      	bx	lr
	...

0801872c <__swsetup_r>:
 801872c:	4b32      	ldr	r3, [pc, #200]	; (80187f8 <__swsetup_r+0xcc>)
 801872e:	b570      	push	{r4, r5, r6, lr}
 8018730:	681d      	ldr	r5, [r3, #0]
 8018732:	4606      	mov	r6, r0
 8018734:	460c      	mov	r4, r1
 8018736:	b125      	cbz	r5, 8018742 <__swsetup_r+0x16>
 8018738:	69ab      	ldr	r3, [r5, #24]
 801873a:	b913      	cbnz	r3, 8018742 <__swsetup_r+0x16>
 801873c:	4628      	mov	r0, r5
 801873e:	f7fd fa07 	bl	8015b50 <__sinit>
 8018742:	4b2e      	ldr	r3, [pc, #184]	; (80187fc <__swsetup_r+0xd0>)
 8018744:	429c      	cmp	r4, r3
 8018746:	d10f      	bne.n	8018768 <__swsetup_r+0x3c>
 8018748:	686c      	ldr	r4, [r5, #4]
 801874a:	89a3      	ldrh	r3, [r4, #12]
 801874c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018750:	0719      	lsls	r1, r3, #28
 8018752:	d42c      	bmi.n	80187ae <__swsetup_r+0x82>
 8018754:	06dd      	lsls	r5, r3, #27
 8018756:	d411      	bmi.n	801877c <__swsetup_r+0x50>
 8018758:	2309      	movs	r3, #9
 801875a:	6033      	str	r3, [r6, #0]
 801875c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018760:	f04f 30ff 	mov.w	r0, #4294967295
 8018764:	81a3      	strh	r3, [r4, #12]
 8018766:	e03e      	b.n	80187e6 <__swsetup_r+0xba>
 8018768:	4b25      	ldr	r3, [pc, #148]	; (8018800 <__swsetup_r+0xd4>)
 801876a:	429c      	cmp	r4, r3
 801876c:	d101      	bne.n	8018772 <__swsetup_r+0x46>
 801876e:	68ac      	ldr	r4, [r5, #8]
 8018770:	e7eb      	b.n	801874a <__swsetup_r+0x1e>
 8018772:	4b24      	ldr	r3, [pc, #144]	; (8018804 <__swsetup_r+0xd8>)
 8018774:	429c      	cmp	r4, r3
 8018776:	bf08      	it	eq
 8018778:	68ec      	ldreq	r4, [r5, #12]
 801877a:	e7e6      	b.n	801874a <__swsetup_r+0x1e>
 801877c:	0758      	lsls	r0, r3, #29
 801877e:	d512      	bpl.n	80187a6 <__swsetup_r+0x7a>
 8018780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018782:	b141      	cbz	r1, 8018796 <__swsetup_r+0x6a>
 8018784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018788:	4299      	cmp	r1, r3
 801878a:	d002      	beq.n	8018792 <__swsetup_r+0x66>
 801878c:	4630      	mov	r0, r6
 801878e:	f7fd facb 	bl	8015d28 <_free_r>
 8018792:	2300      	movs	r3, #0
 8018794:	6363      	str	r3, [r4, #52]	; 0x34
 8018796:	89a3      	ldrh	r3, [r4, #12]
 8018798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801879c:	81a3      	strh	r3, [r4, #12]
 801879e:	2300      	movs	r3, #0
 80187a0:	6063      	str	r3, [r4, #4]
 80187a2:	6923      	ldr	r3, [r4, #16]
 80187a4:	6023      	str	r3, [r4, #0]
 80187a6:	89a3      	ldrh	r3, [r4, #12]
 80187a8:	f043 0308 	orr.w	r3, r3, #8
 80187ac:	81a3      	strh	r3, [r4, #12]
 80187ae:	6923      	ldr	r3, [r4, #16]
 80187b0:	b94b      	cbnz	r3, 80187c6 <__swsetup_r+0x9a>
 80187b2:	89a3      	ldrh	r3, [r4, #12]
 80187b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80187b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80187bc:	d003      	beq.n	80187c6 <__swsetup_r+0x9a>
 80187be:	4621      	mov	r1, r4
 80187c0:	4630      	mov	r0, r6
 80187c2:	f000 f84d 	bl	8018860 <__smakebuf_r>
 80187c6:	89a0      	ldrh	r0, [r4, #12]
 80187c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80187cc:	f010 0301 	ands.w	r3, r0, #1
 80187d0:	d00a      	beq.n	80187e8 <__swsetup_r+0xbc>
 80187d2:	2300      	movs	r3, #0
 80187d4:	60a3      	str	r3, [r4, #8]
 80187d6:	6963      	ldr	r3, [r4, #20]
 80187d8:	425b      	negs	r3, r3
 80187da:	61a3      	str	r3, [r4, #24]
 80187dc:	6923      	ldr	r3, [r4, #16]
 80187de:	b943      	cbnz	r3, 80187f2 <__swsetup_r+0xc6>
 80187e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80187e4:	d1ba      	bne.n	801875c <__swsetup_r+0x30>
 80187e6:	bd70      	pop	{r4, r5, r6, pc}
 80187e8:	0781      	lsls	r1, r0, #30
 80187ea:	bf58      	it	pl
 80187ec:	6963      	ldrpl	r3, [r4, #20]
 80187ee:	60a3      	str	r3, [r4, #8]
 80187f0:	e7f4      	b.n	80187dc <__swsetup_r+0xb0>
 80187f2:	2000      	movs	r0, #0
 80187f4:	e7f7      	b.n	80187e6 <__swsetup_r+0xba>
 80187f6:	bf00      	nop
 80187f8:	200000b8 	.word	0x200000b8
 80187fc:	08031ee0 	.word	0x08031ee0
 8018800:	08031f00 	.word	0x08031f00
 8018804:	08031ec0 	.word	0x08031ec0

08018808 <abort>:
 8018808:	2006      	movs	r0, #6
 801880a:	b508      	push	{r3, lr}
 801880c:	f000 f898 	bl	8018940 <raise>
 8018810:	2001      	movs	r0, #1
 8018812:	f7ea ffe2 	bl	80037da <_exit>

08018816 <__swhatbuf_r>:
 8018816:	b570      	push	{r4, r5, r6, lr}
 8018818:	460e      	mov	r6, r1
 801881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801881e:	4614      	mov	r4, r2
 8018820:	2900      	cmp	r1, #0
 8018822:	461d      	mov	r5, r3
 8018824:	b096      	sub	sp, #88	; 0x58
 8018826:	da08      	bge.n	801883a <__swhatbuf_r+0x24>
 8018828:	2200      	movs	r2, #0
 801882a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801882e:	602a      	str	r2, [r5, #0]
 8018830:	061a      	lsls	r2, r3, #24
 8018832:	d410      	bmi.n	8018856 <__swhatbuf_r+0x40>
 8018834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018838:	e00e      	b.n	8018858 <__swhatbuf_r+0x42>
 801883a:	466a      	mov	r2, sp
 801883c:	f000 f89c 	bl	8018978 <_fstat_r>
 8018840:	2800      	cmp	r0, #0
 8018842:	dbf1      	blt.n	8018828 <__swhatbuf_r+0x12>
 8018844:	9a01      	ldr	r2, [sp, #4]
 8018846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801884a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801884e:	425a      	negs	r2, r3
 8018850:	415a      	adcs	r2, r3
 8018852:	602a      	str	r2, [r5, #0]
 8018854:	e7ee      	b.n	8018834 <__swhatbuf_r+0x1e>
 8018856:	2340      	movs	r3, #64	; 0x40
 8018858:	2000      	movs	r0, #0
 801885a:	6023      	str	r3, [r4, #0]
 801885c:	b016      	add	sp, #88	; 0x58
 801885e:	bd70      	pop	{r4, r5, r6, pc}

08018860 <__smakebuf_r>:
 8018860:	898b      	ldrh	r3, [r1, #12]
 8018862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018864:	079d      	lsls	r5, r3, #30
 8018866:	4606      	mov	r6, r0
 8018868:	460c      	mov	r4, r1
 801886a:	d507      	bpl.n	801887c <__smakebuf_r+0x1c>
 801886c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018870:	6023      	str	r3, [r4, #0]
 8018872:	6123      	str	r3, [r4, #16]
 8018874:	2301      	movs	r3, #1
 8018876:	6163      	str	r3, [r4, #20]
 8018878:	b002      	add	sp, #8
 801887a:	bd70      	pop	{r4, r5, r6, pc}
 801887c:	466a      	mov	r2, sp
 801887e:	ab01      	add	r3, sp, #4
 8018880:	f7ff ffc9 	bl	8018816 <__swhatbuf_r>
 8018884:	9900      	ldr	r1, [sp, #0]
 8018886:	4605      	mov	r5, r0
 8018888:	4630      	mov	r0, r6
 801888a:	f7fd fab5 	bl	8015df8 <_malloc_r>
 801888e:	b948      	cbnz	r0, 80188a4 <__smakebuf_r+0x44>
 8018890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018894:	059a      	lsls	r2, r3, #22
 8018896:	d4ef      	bmi.n	8018878 <__smakebuf_r+0x18>
 8018898:	f023 0303 	bic.w	r3, r3, #3
 801889c:	f043 0302 	orr.w	r3, r3, #2
 80188a0:	81a3      	strh	r3, [r4, #12]
 80188a2:	e7e3      	b.n	801886c <__smakebuf_r+0xc>
 80188a4:	4b0d      	ldr	r3, [pc, #52]	; (80188dc <__smakebuf_r+0x7c>)
 80188a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80188a8:	89a3      	ldrh	r3, [r4, #12]
 80188aa:	6020      	str	r0, [r4, #0]
 80188ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188b0:	81a3      	strh	r3, [r4, #12]
 80188b2:	9b00      	ldr	r3, [sp, #0]
 80188b4:	6120      	str	r0, [r4, #16]
 80188b6:	6163      	str	r3, [r4, #20]
 80188b8:	9b01      	ldr	r3, [sp, #4]
 80188ba:	b15b      	cbz	r3, 80188d4 <__smakebuf_r+0x74>
 80188bc:	4630      	mov	r0, r6
 80188be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188c2:	f000 f86b 	bl	801899c <_isatty_r>
 80188c6:	b128      	cbz	r0, 80188d4 <__smakebuf_r+0x74>
 80188c8:	89a3      	ldrh	r3, [r4, #12]
 80188ca:	f023 0303 	bic.w	r3, r3, #3
 80188ce:	f043 0301 	orr.w	r3, r3, #1
 80188d2:	81a3      	strh	r3, [r4, #12]
 80188d4:	89a0      	ldrh	r0, [r4, #12]
 80188d6:	4305      	orrs	r5, r0
 80188d8:	81a5      	strh	r5, [r4, #12]
 80188da:	e7cd      	b.n	8018878 <__smakebuf_r+0x18>
 80188dc:	08015ae9 	.word	0x08015ae9

080188e0 <_malloc_usable_size_r>:
 80188e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188e4:	1f18      	subs	r0, r3, #4
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	bfbc      	itt	lt
 80188ea:	580b      	ldrlt	r3, [r1, r0]
 80188ec:	18c0      	addlt	r0, r0, r3
 80188ee:	4770      	bx	lr

080188f0 <_raise_r>:
 80188f0:	291f      	cmp	r1, #31
 80188f2:	b538      	push	{r3, r4, r5, lr}
 80188f4:	4604      	mov	r4, r0
 80188f6:	460d      	mov	r5, r1
 80188f8:	d904      	bls.n	8018904 <_raise_r+0x14>
 80188fa:	2316      	movs	r3, #22
 80188fc:	6003      	str	r3, [r0, #0]
 80188fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018902:	bd38      	pop	{r3, r4, r5, pc}
 8018904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018906:	b112      	cbz	r2, 801890e <_raise_r+0x1e>
 8018908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801890c:	b94b      	cbnz	r3, 8018922 <_raise_r+0x32>
 801890e:	4620      	mov	r0, r4
 8018910:	f000 f830 	bl	8018974 <_getpid_r>
 8018914:	462a      	mov	r2, r5
 8018916:	4601      	mov	r1, r0
 8018918:	4620      	mov	r0, r4
 801891a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801891e:	f000 b817 	b.w	8018950 <_kill_r>
 8018922:	2b01      	cmp	r3, #1
 8018924:	d00a      	beq.n	801893c <_raise_r+0x4c>
 8018926:	1c59      	adds	r1, r3, #1
 8018928:	d103      	bne.n	8018932 <_raise_r+0x42>
 801892a:	2316      	movs	r3, #22
 801892c:	6003      	str	r3, [r0, #0]
 801892e:	2001      	movs	r0, #1
 8018930:	e7e7      	b.n	8018902 <_raise_r+0x12>
 8018932:	2400      	movs	r4, #0
 8018934:	4628      	mov	r0, r5
 8018936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801893a:	4798      	blx	r3
 801893c:	2000      	movs	r0, #0
 801893e:	e7e0      	b.n	8018902 <_raise_r+0x12>

08018940 <raise>:
 8018940:	4b02      	ldr	r3, [pc, #8]	; (801894c <raise+0xc>)
 8018942:	4601      	mov	r1, r0
 8018944:	6818      	ldr	r0, [r3, #0]
 8018946:	f7ff bfd3 	b.w	80188f0 <_raise_r>
 801894a:	bf00      	nop
 801894c:	200000b8 	.word	0x200000b8

08018950 <_kill_r>:
 8018950:	b538      	push	{r3, r4, r5, lr}
 8018952:	2300      	movs	r3, #0
 8018954:	4d06      	ldr	r5, [pc, #24]	; (8018970 <_kill_r+0x20>)
 8018956:	4604      	mov	r4, r0
 8018958:	4608      	mov	r0, r1
 801895a:	4611      	mov	r1, r2
 801895c:	602b      	str	r3, [r5, #0]
 801895e:	f7ea ff2c 	bl	80037ba <_kill>
 8018962:	1c43      	adds	r3, r0, #1
 8018964:	d102      	bne.n	801896c <_kill_r+0x1c>
 8018966:	682b      	ldr	r3, [r5, #0]
 8018968:	b103      	cbz	r3, 801896c <_kill_r+0x1c>
 801896a:	6023      	str	r3, [r4, #0]
 801896c:	bd38      	pop	{r3, r4, r5, pc}
 801896e:	bf00      	nop
 8018970:	20002488 	.word	0x20002488

08018974 <_getpid_r>:
 8018974:	f7ea bf1a 	b.w	80037ac <_getpid>

08018978 <_fstat_r>:
 8018978:	b538      	push	{r3, r4, r5, lr}
 801897a:	2300      	movs	r3, #0
 801897c:	4d06      	ldr	r5, [pc, #24]	; (8018998 <_fstat_r+0x20>)
 801897e:	4604      	mov	r4, r0
 8018980:	4608      	mov	r0, r1
 8018982:	4611      	mov	r1, r2
 8018984:	602b      	str	r3, [r5, #0]
 8018986:	f7ea ff76 	bl	8003876 <_fstat>
 801898a:	1c43      	adds	r3, r0, #1
 801898c:	d102      	bne.n	8018994 <_fstat_r+0x1c>
 801898e:	682b      	ldr	r3, [r5, #0]
 8018990:	b103      	cbz	r3, 8018994 <_fstat_r+0x1c>
 8018992:	6023      	str	r3, [r4, #0]
 8018994:	bd38      	pop	{r3, r4, r5, pc}
 8018996:	bf00      	nop
 8018998:	20002488 	.word	0x20002488

0801899c <_isatty_r>:
 801899c:	b538      	push	{r3, r4, r5, lr}
 801899e:	2300      	movs	r3, #0
 80189a0:	4d05      	ldr	r5, [pc, #20]	; (80189b8 <_isatty_r+0x1c>)
 80189a2:	4604      	mov	r4, r0
 80189a4:	4608      	mov	r0, r1
 80189a6:	602b      	str	r3, [r5, #0]
 80189a8:	f7ea ff74 	bl	8003894 <_isatty>
 80189ac:	1c43      	adds	r3, r0, #1
 80189ae:	d102      	bne.n	80189b6 <_isatty_r+0x1a>
 80189b0:	682b      	ldr	r3, [r5, #0]
 80189b2:	b103      	cbz	r3, 80189b6 <_isatty_r+0x1a>
 80189b4:	6023      	str	r3, [r4, #0]
 80189b6:	bd38      	pop	{r3, r4, r5, pc}
 80189b8:	20002488 	.word	0x20002488

080189bc <_init>:
 80189bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189be:	bf00      	nop
 80189c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189c2:	bc08      	pop	{r3}
 80189c4:	469e      	mov	lr, r3
 80189c6:	4770      	bx	lr

080189c8 <_fini>:
 80189c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ca:	bf00      	nop
 80189cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189ce:	bc08      	pop	{r3}
 80189d0:	469e      	mov	lr, r3
 80189d2:	4770      	bx	lr
